LAMMPS (5 Jun 2019)
OMP_NUM_THREADS environment is not set. Defaulting to 1 thread. (src/comm.cpp:88)
  using 1 OpenMP thread(s) per MPI task
#--- Brush Variables---#
variable      f      equal  1                  # System Size Scaling Factor
variable      M      equal  $(v_f * 60)        # The number of polymer chains on each brush
variable      M      equal  60        
variable      N      string 30                 # The number of beads per chain
variable      xhi    equal  $(sqrt(v_f) * 30)  # The width of the polymer Brush
variable      xhi    equal  30  
variable      yhi    equal  $(sqrt(v_f) * 30)   # The length of the polymer Brush
variable      yhi    equal  30   
variable      wthick equal  3                  # The thickness of the walls wthick=1,2,3,4 gives 2,3,4,6 layers respectively

#--- Simulation Variables ---#
variable       Temp      index 1               # The Temperature of the Thermostats
variable       Tstep     equal 0.005           # Timestep in Tau (default = 0.005)
variable       Nequil    equal 30000          # Number of timesteps to equilibrate
variable       Ncomp     equal 70000          # Number of timesteps to compress - until no more oscillation of D
variable       Nshear    equal 200000         # Number of timesteps to shear
variable       Nthermo   equal 1000            # Number of timesteps between thermo data prints
variable       Ndump_e   equal 10000
variable       Ndump_c   equal 10000           # Number of timesteps per dump file (compression)
variable       Ndump_s   equal 10000           # Number of timesteps per dump file (shear)
variable       Vwalli    index 1          # Relative wall Velocities
variable       Pcomp     index 1 # 0.5 2 0.05 4 8                               # Compressive Pressures applied to top wall
variable       Vscale    equal 1e-1

include        MDPBB.in
# This is an input script that creates a mono disperse polymer brush bilayer
# A coarse grained bead-spring model is used for the polymers which are end
# grafted to the surfaces of 2 opposing FCC walls at random sites.

#--- Initialization ---#

dimension     3
boundary      p p f
units         lj
atom_style    bond


#--- Moved to main.in ---#
#variable      M      equal  50                # The number of polymer chains on each brush
#variable      N      string 80                # The number of beads per chain
#variable      xhi    equal  15                # The width of the polymer Brush
#variable      yhi    equal  20                # The length of the polymer Brush
#variable      wthick equal  3                 # The thickness of the walls wthick=1,2,3,4 gives 2,3,4,6 layers respectively

variable      zhi    equal  $(1.1 * 2 * v_N + (2 * v_wthick))  # The initial height of the simulation box the value is such that no overlaps occur
variable      zhi    equal  72  
variable      z0     equal  $((v_zhi)/4 - (v_N)/30)          # This is the location at which to place the CoM of the molecule
variable      z0     equal  17          

print "The number of grafted chains = $(v_M)"
The number of grafted chains = 60
print "The number of beads per chain = $(v_N)"
The number of beads per chain = 30

variable      check  equal count(all)         # The number of atoms in the system
variable      ntwall equal count(twall)       # The number of atoms in the top wall
variable      nbwall equal count(bwall)       # The number of atoms in the bottom wall
variable      s equal 234897  #45335              # Seed for the RNG

print "zhi = ${zhi}"
zhi = 72

#--- Create the simulation box ---#

region        sbox block 0 ${xhi} 0 ${yhi} 0 ${zhi}
region        sbox block 0 30 0 ${yhi} 0 ${zhi}
region        sbox block 0 30 0 30 0 ${zhi}
region        sbox block 0 30 0 30 0 72
create_box    4 sbox bond/types 3 extra/bond/per/atom 12 extra/special/per/atom 2
Created orthogonal box = (0 0 0) to (30 30 72)
  1 by 1 by 1 MPI processor grid

mass          1 2.0                   # Wall atoms that are not grafted
mass          2 1.0                   # Grafted bead
mass          3 1.0                   # The rest of the beads on the chain
mass          4 2.0                   # Wall atoms that the chains are grafted to

bond_style    hybrid fene harmonic    # Finitely extensible linearly elastic bond between neighbouring beads
#bond_coeff    1 fene 30.0 1.5 0.0 0.0      # Values obtained from literature [Grest, Galushcko]
bond_coeff    1 fene 30.0 30.0 0.0 0.0
bond_coeff    2 fene 30.0 30.0 0.0 0.0       # This is the grafting bond between the polymer and the wall atom
special_bonds fene                    #
  0 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0003888 secs
pair_style	  lj/cut 1.122462         # LJ potential with rc=2^1/6
#pair_coeff	  * * 1.0 1.0             # LJ potential acts between all atoms
pair_coeff    1 1 0.0 0.0
pair_coeff    1 2 1.0 1.0
pair_coeff    1 3 1.0 1.0
pair_coeff    2 2 1.0 1.0
pair_coeff    2 3 1.0 1.0
pair_coeff    2 4 1.0 1.0
pair_coeff    3 3 1.0 1.0
pair_coeff    3 4 1.0 1.0
pair_coeff    4 4 0.0 0.0
neighbor      10 bin                  #
neigh_modify  one 4000

#--- Create and read the molecule file ---#
python        BSMolf input 1 $N format i file BSMolf.py
python        BSMolf input 1 30 format i file BSMolf.py
python        BSMolf invoke    # Call the python function with number of beads to write the mol file
molecule      bs     bsmol.txt     # Read the Mol file to define the polymer chain
Read molecule bs:
  30 atoms with max type 2
  29 bonds with max type 1
  0 angles with max type 0
  0 dihedrals with max type 0
  0 impropers with max type 0

#--- Define the FCC wall region ---#
region        wall  block 0 ${xhi} 0 ${yhi} 0 ${wthick}
region        wall  block 0 30 0 ${yhi} 0 ${wthick}
region        wall  block 0 30 0 30 0 ${wthick}
region        wall  block 0 30 0 30 0 3
lattice       fcc 1
Lattice spacing in x,y,z = 1.5874 1.5874 1.5874

#--- Create the Top Brush  (At the bottom then rotate 180 degrees to top) ---#

create_atoms  1 region wall
Created 2888 atoms
  create_atoms CPU = 0.0015348 secs
group         twall  region wall
2888 atoms in group twall
#group         tsurf  region wsurf

# A loop to insert the Chains into the sim box
variable      i loop $M                                   # Index to insert N total number of chains
variable      i loop 60                                   
label         loop                                        # Start of loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1814                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1814]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 455                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[455]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2182                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2182]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2201                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2201]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2098                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2098]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2845                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2845]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1373                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1373]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 968                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[968]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1250                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1250]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2090                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2090]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2586                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2586]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 21                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[21]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 550                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[550]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 944                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[944]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2340                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2340]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2340 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2340                         
1 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 1
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 1
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2340]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2340]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 2888                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 2888+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 18.2551120976343 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 18.2551120976343 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001703 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 2918               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2340 $b
create_bonds  single/bond 2 2340 2889
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0045075 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2049                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2049]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1989                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1989]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1613                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1613]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2250                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2250]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1777                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1777]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1790                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1790]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 346                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[346]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2515                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2515]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2515 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2515                         
2 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 2
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 2
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2515]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2515]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 2918                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 2918+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 22.2236147275548 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 22.2236147275548 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 7.63e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 2948               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2515 $b
create_bonds  single/bond 2 2515 2919
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0030145 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1738                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1738]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2654                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2654]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2013                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2013]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2593                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2593]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1699                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1699]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1699 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1699                         
3 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 3
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 3
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1699]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1699]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 2948                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 2948+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 4.7622031559046 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 4.7622031559046 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 6.83e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 2978               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1699 $b
create_bonds  single/bond 2 1699 2949
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0037106 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2456                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2456]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2456 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2456                         
4 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 4
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 4
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2456]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2456]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 2978                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 2978+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 21.4299142015707 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 21.4299142015707 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001007 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3008               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2456 $b
create_bonds  single/bond 2 2456 2979
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0063365 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2420                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2420]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2420 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2420                         
5 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 5
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 5
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2420]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2420]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3008                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3008+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 19.8425131496025 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 19.8425131496025 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001625 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3038               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2420 $b
create_bonds  single/bond 2 2420 3009
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0070221 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1201                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1201]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2884                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2884]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2884 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2884                         
6 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 6
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 6
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2884]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2884]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3038                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3038+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 29.3669194614117 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 29.3669194614117 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 7.86e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3068               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2884 $b
create_bonds  single/bond 2 2884 3039
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0042973 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2815                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2815]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2815 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2815                         
7 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 7
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 7
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2815]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2815]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3068                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3068+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 28.5732189354276 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 28.5732189354276 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000107 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3098               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2815 $b
create_bonds  single/bond 2 2815 3069
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0023241 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2092                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2092]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2092 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2092                         
8 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 8
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 8
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2092]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2092]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3098                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3098+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 13.4929089417297 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 13.4929089417297 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001062 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3128               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2092 $b
create_bonds  single/bond 2 2092 3099
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0026285 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2713                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2713]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 682                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[682]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2694                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2694]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 378                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[378]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2456                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2456]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2456 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2456                         
8 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 8
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 9
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2456]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2456]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3128                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3128+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2698                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2698]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 989                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[989]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 752                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[752]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1918                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1918]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1347                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1347]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 418                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[418]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2659                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2659]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2659 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2659                         
9 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 9
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 9
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2659]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2659]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3128                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3128+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 29.3669194614117 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 29.3669194614117 23.811015779523 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 29.3669194614117 23.811015779523 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.06e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3158               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2659 $b
create_bonds  single/bond 2 2659 3129
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0038544 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2763                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2763]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2763 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2763                         
10 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 10
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 10
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2763]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2763]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3158                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3158+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 26.9858178834594 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 26.9858178834594 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000135 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3188               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2763 $b
create_bonds  single/bond 2 2763 3159
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0034739 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2611                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2611]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2611 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2611                         
11 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 11
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 11
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2611]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2611]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3188                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3188+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 23.811015779523 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 23.811015779523 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001431 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3218               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2611 $b
create_bonds  single/bond 2 2611 3189
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0028288 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2302                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2302]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1267                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1267]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1072                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1072]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2025                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2025]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 271                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[271]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1094                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1094]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1260                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1260]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 949                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[949]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1761                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1761]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 827                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[827]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 688                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[688]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 248                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[248]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1966                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1966]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2118                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2118]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 973                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[973]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1444                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1444]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1243                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1243]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 654                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[654]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1674                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1674]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 528                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[528]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2548                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2548]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2548 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2548                         
12 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 12
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 12
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2548]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2548]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3218                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3218+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 23.0173152535389 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 23.0173152535389 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001048 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3248               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2548 $b
create_bonds  single/bond 2 2548 3219
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0031282 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1332                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1332]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2833                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2833]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2217                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2217]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2656                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2656]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2656 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2656                         
13 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 13
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 13
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2656]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2656]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3248                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3248+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 24.6047163055071 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 24.6047163055071 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 7.62e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3278               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2656 $b
create_bonds  single/bond 2 2656 3249
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0022357 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2871                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2871]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2871 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2871                         
14 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 14
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 14
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2871]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2871]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3278                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3278+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 28.5732189354276 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 28.5732189354276 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 7.43e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3308               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2871 $b
create_bonds  single/bond 2 2871 3279
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0043974 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1369                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1369]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 959                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[959]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 203                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[203]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 747                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[747]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 524                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[524]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1185                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1185]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1726                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1726]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1374                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1374]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2398                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2398]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 430                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[430]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 478                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[478]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2316                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2316]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2316 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2316                         
15 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 15
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 15
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2316]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2316]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3308                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3308+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 18.2551120976343 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 18.2551120976343 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001193 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3338               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2316 $b
create_bonds  single/bond 2 2316 3309
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0030986 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1832                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1832]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1832 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1832                         
16 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 16
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 16
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1832]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1832]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3338                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3338+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 8.7307057858251 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 8.7307057858251 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.33e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3368               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1832 $b
create_bonds  single/bond 2 1832 3339
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0033124 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 653                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[653]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 931                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[931]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 779                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[779]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2273                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2273]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2515                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2515]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2515 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2515                         
16 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 16
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 17
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2515]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2515]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3368                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3368+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1255                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1255]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2882                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2882]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1883                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1883]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1883 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1883                         
17 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 17
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 17
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1883]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1883]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3368                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3368+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 7.937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 7.937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.12e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3398               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1883 $b
create_bonds  single/bond 2 1883 3369
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0024397 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2645                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2645]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1244                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1244]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1566                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1566]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2113                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2113]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1251                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1251]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 847                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[847]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 40                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[40]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 434                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[434]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1664                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1664]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1664 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1664                         
18 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 18
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 18
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1664]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1664]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3398                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3398+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 25.3984168314912 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 25.3984168314912 3.9685026299205 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 25.3984168314912 3.9685026299205 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000164 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3428               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1664 $b
create_bonds  single/bond 2 1664 3399
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0027925 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 306                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[306]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1466                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1466]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 521                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[521]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 949                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[949]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 111                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[111]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2713                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2713]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 993                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[993]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1043                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1043]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1408                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1408]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2124                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2124]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2124 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2124                         
19 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 19
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 19
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2124]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2124]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3428                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3428+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 13.4929089417297 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 13.4929089417297 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 7.3e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3458               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2124 $b
create_bonds  single/bond 2 2124 3429
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0041108 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 530                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[530]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1460                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1460]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1460 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1460                         
20 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 20
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 20
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1460]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1460]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3458                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3458+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 0.7937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 0.7937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.08e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3488               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1460 $b
create_bonds  single/bond 2 1460 3459
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0033849 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1385                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1385]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2667                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2667]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2667 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2667                         
21 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 21
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 21
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2667]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2667]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3488                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3488+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 25.3984168314912 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 25.3984168314912 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001379 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3518               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2667 $b
create_bonds  single/bond 2 2667 3489
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0037082 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 703                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[703]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1786                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1786]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 618                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[618]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2572                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2572]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2572 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2572                         
22 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 22
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 22
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2572]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2572]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3518                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3518+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 23.0173152535389 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 23.0173152535389 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 7.45e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3548               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2572 $b
create_bonds  single/bond 2 2572 3519
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0043128 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 514                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[514]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 917                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[917]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1098                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1098]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1545                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1545]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1199                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1199]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2297                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2297]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1647                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1647]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1647 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1647                         
23 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 23
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 23
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1647]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1647]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3548                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3548+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 3.1748021039364 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 3.1748021039364 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001066 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3578               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1647 $b
create_bonds  single/bond 2 1647 3549
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0046537 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1410                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1410]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1682                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1682]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 186                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[186]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 335                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[335]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1181                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1181]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 988                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[988]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1103                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1103]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1432                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1432]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2398                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2398]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2319                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2319]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2319 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2319                         
24 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 24
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 24
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2319]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2319]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3578                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3578+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 17.4614115716502 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 17.4614115716502 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001546 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3608               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2319 $b
create_bonds  single/bond 2 2319 3579
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0089439 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2859                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2859]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2859 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2859                         
25 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 25
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 25
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2859]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2859]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3608                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3608+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 28.5732189354276 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 28.5732189354276 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001189 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3638               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2859 $b
create_bonds  single/bond 2 2859 3609
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0038078 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 290                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[290]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1516                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1516]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1516 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1516                         
26 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 26
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 26
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1516]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1516]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3638                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3638+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 0.7937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 0.7937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.75e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3668               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1516 $b
create_bonds  single/bond 2 1516 3639
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025433 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2473                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2473]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2726                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2726]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 956                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[956]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1598                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1598]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1165                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1165]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 993                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[993]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2335                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2335]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2335 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2335                         
27 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 27
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 27
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2335]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2335]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3668                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3668+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 17.4614115716502 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 17.4614115716502 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001531 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3698               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2335 $b
create_bonds  single/bond 2 2335 3669
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0030053 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1971                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1971]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1971 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1971                         
28 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 28
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 28
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1971]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1971]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3698                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3698+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 9.5244063118092 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 9.5244063118092 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.4e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3728               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1971 $b
create_bonds  single/bond 2 1971 3699
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0028394 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2830                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2830]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 503                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[503]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 426                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[426]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 837                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[837]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2152                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2152]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2152 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2152                         
29 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 29
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 29
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2152]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2152]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3728                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3728+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 15.0803099936979 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 15.0803099936979 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001161 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3758               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2152 $b
create_bonds  single/bond 2 2152 3729
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0030116 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2503                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2503]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2503 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2503                         
30 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 30
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 30
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2503]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2503]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3758                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3758+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 20.6362136755866 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 20.6362136755866 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001107 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3788               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2503 $b
create_bonds  single/bond 2 2503 3759
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0041295 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 88                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[88]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 56                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[56]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1079                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1079]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1596                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1596]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1596 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1596                         
31 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 31
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 31
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1596]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1596]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3788                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3788+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 2.3811015779523 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 2.3811015779523 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000112 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3818               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1596 $b
create_bonds  single/bond 2 1596 3789
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.002656 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2287                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2287]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2287 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2287                         
32 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 32
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 32
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2287]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2287]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3818                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3818+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 17.4614115716502 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 17.4614115716502 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002248 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3848               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2287 $b
create_bonds  single/bond 2 2287 3819
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0038487 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1166                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1166]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2130                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2130]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1309                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1309]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 88                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[88]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 390                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[390]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2532                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2532]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2532 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2532                         
33 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 33
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 33
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2532]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2532]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3848                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3848+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 23.0173152535389 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 23.0173152535389 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001013 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3878               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2532 $b
create_bonds  single/bond 2 2532 3849
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.003531 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2656                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2656]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2656 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2656                         
33 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 33
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 34
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2656]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2656]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3878                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3878+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 355                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[355]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1783                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1783]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1783 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1783                         
34 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 34
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 34
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1783]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1783]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3878                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3878+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 6.3496042078728 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 6.3496042078728 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001048 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3908               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1783 $b
create_bonds  single/bond 2 1783 3879
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0046037 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2349                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2349]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2243                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2243]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2243 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2243                         
35 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 35
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 35
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2243]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2243]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3908                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3908+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 15.874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 15.874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001555 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3938               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2243 $b
create_bonds  single/bond 2 2243 3909
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0049061 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2610                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2610]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2853                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2853]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 601                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[601]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 738                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[738]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2463                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2463]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2463 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2463                         
36 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 36
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 36
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2463]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2463]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3938                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3938+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 20.6362136755866 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 20.6362136755866 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.96e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3968               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2463 $b
create_bonds  single/bond 2 2463 3939
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0047955 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 318                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[318]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 641                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[641]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 529                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[529]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 49                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[49]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 73                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[73]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 704                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[704]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 678                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[678]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 257                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[257]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1929                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1929]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2683                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2683]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2683 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2683                         
37 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 37
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 37
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2683]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2683]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3968                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3968+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 25.3984168314912 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 25.3984168314912 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.28e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3998               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2683 $b
create_bonds  single/bond 2 2683 3969
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.003462 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1292                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1292]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2501                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2501]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2086                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2086]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2175                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2175]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2175 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2175                         
38 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 38
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 38
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2175]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2175]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3998                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3998+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 14.2866094677138 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 14.2866094677138 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001139 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4028               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2175 $b
create_bonds  single/bond 2 2175 3999
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.003223 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1470                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1470]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 146                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[146]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2257                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2257]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2131                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2131]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2131 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2131                         
39 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 39
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 39
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2131]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2131]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4028                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4028+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 14.2866094677138 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 14.2866094677138 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001537 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4058               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2131 $b
create_bonds  single/bond 2 2131 4029
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0040416 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 143                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[143]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1419                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1419]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 666                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[666]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 875                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[875]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 444                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[444]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2867                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2867]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2867 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2867                         
40 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 40
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 40
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2867]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2867]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4058                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4058+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 28.5732189354276 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 28.5732189354276 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.14e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4088               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2867 $b
create_bonds  single/bond 2 2867 4059
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0028152 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2240                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2240]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2240 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2240                         
41 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 41
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 41
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2240]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2240]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4088                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4088+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 16.6677110456661 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 16.6677110456661 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001379 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4118               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2240 $b
create_bonds  single/bond 2 2240 4089
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0023757 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 402                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[402]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 208                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[208]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2060                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2060]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2060 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2060                         
42 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 42
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 42
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2060]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2060]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4118                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4118+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 13.4929089417297 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 13.4929089417297 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.97e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4148               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2060 $b
create_bonds  single/bond 2 2060 4119
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025752 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2173                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2173]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 74                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[74]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1924                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1924]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1924 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1924                         
43 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 43
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 43
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1924]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1924]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4148                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4148+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 10.3181068377933 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 10.3181068377933 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.45e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4178               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1924 $b
create_bonds  single/bond 2 1924 4149
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0029928 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 266                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[266]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 223                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[223]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1515                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1515]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1515 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1515                         
44 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 44
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 44
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1515]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1515]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4178                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4178+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 0 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 0 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000114 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4208               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1515 $b
create_bonds  single/bond 2 1515 4179
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025213 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 915                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[915]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 387                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[387]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2109                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2109]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1796                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1796]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1796 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1796                         
45 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 45
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 45
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1796]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1796]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4208                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4208+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 17.4614115716502 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 17.4614115716502 7.1433047338569 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 17.4614115716502 7.1433047338569 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.17e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4238               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1796 $b
create_bonds  single/bond 2 1796 4209
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0030449 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 518                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[518]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 58                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[58]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 629                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[629]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2228                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2228]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2228 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2228                         
46 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 46
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 46
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2228]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2228]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4238                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4238+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 16.6677110456661 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 16.6677110456661 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001173 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4268               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2228 $b
create_bonds  single/bond 2 2228 4239
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0054367 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 732                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[732]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 957                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[957]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1247                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1247]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 539                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[539]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1420                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1420]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1653                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1653]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 758                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[758]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2614                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2614]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1442                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1442]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 364                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[364]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 554                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[554]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 583                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[583]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1500                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1500]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1500 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1500                         
47 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 47
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 47
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1500]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1500]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4268                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4268+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 0.7937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 0.7937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001628 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4298               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1500 $b
create_bonds  single/bond 2 1500 4269
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0033249 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 475                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[475]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2585                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2585]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2608                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2608]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2608 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2608                         
48 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 48
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 48
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2608]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2608]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4298                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4298+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 24.6047163055071 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 24.6047163055071 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.18e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4328               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2608 $b
create_bonds  single/bond 2 2608 4299
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025323 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2797                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2797]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1961                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1961]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1745                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1745]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1288                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1288]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2773                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2773]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2495                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2495]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2495 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2495                         
49 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 49
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 49
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2495]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2495]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4328                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4328+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 24.6047163055071 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 24.6047163055071 20.6362136755866 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 24.6047163055071 20.6362136755866 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001343 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4358               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2495 $b
create_bonds  single/bond 2 2495 4329
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0035662 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 812                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[812]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2814                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2814]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2406                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2406]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1265                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1265]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1564                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1564]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1564 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1564                         
50 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 50
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 50
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1564]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1564]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4358                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4358+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 2.3811015779523 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 2.3811015779523 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001017 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4388               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1564 $b
create_bonds  single/bond 2 1564 4359
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025643 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 796                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[796]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 398                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[398]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 666                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[666]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2366                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2366]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 636                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[636]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1669                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1669]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1946                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1946]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 624                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[624]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1619                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1619]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1619 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1619                         
51 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 51
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 51
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1619]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1619]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4388                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4388+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 3.1748021039364 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 3.1748021039364 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.99e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4418               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1619 $b
create_bonds  single/bond 2 1619 4389
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0041179 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1780                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1780]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1780 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1780                         
52 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 52
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 52
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1780]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1780]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4418                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4418+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 7.1433047338569 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 7.1433047338569 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001165 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4448               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1780 $b
create_bonds  single/bond 2 1780 4419
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0035595 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2733                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2733]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1621                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1621]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2712                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2712]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2712 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2712                         
53 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 53
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 53
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2712]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2712]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4448                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4448+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 26.1921173574753 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 26.1921173574753 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.84e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4478               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2712 $b
create_bonds  single/bond 2 2712 4449
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0031072 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 251                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[251]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1920                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1920]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1920 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1920                         
54 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 54
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 54
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1920]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1920]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4478                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4478+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 6.3496042078728 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 6.3496042078728 10.3181068377933 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 6.3496042078728 10.3181068377933 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001284 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4508               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1920 $b
create_bonds  single/bond 2 1920 4479
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0049456 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 206                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[206]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1636                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1636]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1636 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1636                         
55 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 55
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 55
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1636]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1636]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4508                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4508+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 3.9685026299205 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 3.9685026299205 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001209 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4538               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1636 $b
create_bonds  single/bond 2 1636 4509
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0040739 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2178                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2178]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2703                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2703]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2703 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2703                         
56 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 56
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 56
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2703]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2703]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4538                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4538+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 25.3984168314912 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 25.3984168314912 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001057 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4568               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2703 $b
create_bonds  single/bond 2 2703 4539
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0033236 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2744                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2744]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2744 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2744                         
57 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 57
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 57
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2744]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2744]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4568                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4568+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 27.7795184094435 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 27.7795184094435 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001033 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4598               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2744 $b
create_bonds  single/bond 2 2744 4569
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.00309 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 492                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[492]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2352                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2352]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2352 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2352                         
58 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 58
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 58
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2352]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2352]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4598                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4598+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 18.2551120976343 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 18.2551120976343 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001274 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4628               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2352 $b
create_bonds  single/bond 2 2352 4599
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025677 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 487                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[487]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 119                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[119]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1896                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1896]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1896 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1896                         
59 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 59
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 59
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1896]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1896]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4628                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4628+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 8.7307057858251 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 8.7307057858251 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001315 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4658               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1896 $b
create_bonds  single/bond 2 1896 4629
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.002876 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1418                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1418]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1388                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1388]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1821                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1821]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2675                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2675]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2675 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2675                         
60 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 60
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 60
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2675]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2675]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4658                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4658+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 25.3984168314912 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 25.3984168314912 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001186 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4688               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2675 $b
create_bonds  single/bond 2 2675 4659
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025454 secs
next i
jump MDPBB.in loop    # End of the loop

# Rotate the created brush about the centre of the simulation box by 180 degrees to make it true top brush
displace_atoms all rotate $(v_xhi/2.0) $(v_yhi/2.0) $(v_zhi/2.0 - 1) 1 0 0 180 units box
displace_atoms all rotate 15 $(v_yhi/2.0) $(v_zhi/2.0 - 1) 1 0 0 180 units box
displace_atoms all rotate 15 15 $(v_zhi/2.0 - 1) 1 0 0 180 units box
displace_atoms all rotate 15 15 35 1 0 0 180 units box

variable      ntop0 equal ${check}          # Count the total number of atoms in the top brush
variable      ntop0 equal 4688          

#--- Create the Bottom brush ---#

# Repeating the same procedure as above again but with new atoms

create_atoms  1 region wall
Created 2888 atoms
  create_atoms CPU = 0.0010188 secs
group         bwall region wall
2888 atoms in group bwall
variable      nbwall0 equal ${nbwall}
variable      nbwall0 equal 2888

variable      j loop $M
variable      j loop 60
label         loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7002
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7002]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5727
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5727]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4819
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4819]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5861
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5861]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5690
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5690]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7380
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7380]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7380 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7380                         
1 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 1
print         "j = $(v_j)"
j = 1
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7380]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7380]
variable      check0 equal ${check}
variable      check0 equal 7576
variable      b equal ${check}+1
variable      b equal 7576+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 26.1921173574753 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 26.1921173574753 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001682 secs
variable      check1 equal ${check}
variable      check1 equal 7606
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7380 $b
create_bonds  single/bond 2 7380 7577
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0039641 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5120
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5120]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6410
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6410]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7324
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7324]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7324 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7324                         
2 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 2
print         "j = $(v_j)"
j = 2
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7324]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7324]
variable      check0 equal ${check}
variable      check0 equal 7606
variable      b equal ${check}+1
variable      b equal 7606+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 24.6047163055071 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 24.6047163055071 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001926 secs
variable      check1 equal ${check}
variable      check1 equal 7636
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7324 $b
create_bonds  single/bond 2 7324 7607
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0049927 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6217
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6217]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5579
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5579]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4915
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4915]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5328
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5328]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5779
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5779]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4818
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4818]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6472
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6472]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6472 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6472                         
3 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 3
print         "j = $(v_j)"
j = 3
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6472]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6472]
variable      check0 equal ${check}
variable      check0 equal 7636
variable      b equal ${check}+1
variable      b equal 7636+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 7.1433047338569 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 7.1433047338569 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001967 secs
variable      check1 equal ${check}
variable      check1 equal 7666
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6472 $b
create_bonds  single/bond 2 6472 7637
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0053304 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6572
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6572]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6572 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6572                         
4 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 4
print         "j = $(v_j)"
j = 4
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6572]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6572]
variable      check0 equal ${check}
variable      check0 equal 7666
variable      b equal ${check}+1
variable      b equal 7666+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 8.7307057858251 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 8.7307057858251 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001938 secs
variable      check1 equal ${check}
variable      check1 equal 7696
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6572 $b
create_bonds  single/bond 2 6572 7667
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0029055 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5475
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5475]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6400
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6400]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6400 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6400                         
5 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 5
print         "j = $(v_j)"
j = 5
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6400]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6400]
variable      check0 equal ${check}
variable      check0 equal 7696
variable      b equal ${check}+1
variable      b equal 7696+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 5.5559036818887 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 5.5559036818887 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002568 secs
variable      check1 equal ${check}
variable      check1 equal 7726
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6400 $b
create_bonds  single/bond 2 6400 7697
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0032782 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5790
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5790]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5886
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5886]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6230
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6230]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6559
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6559]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6559 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6559                         
6 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 6
print         "j = $(v_j)"
j = 6
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6559]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6559]
variable      check0 equal ${check}
variable      check0 equal 7726
variable      b equal ${check}+1
variable      b equal 7726+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 7.937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 7.937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001952 secs
variable      check1 equal ${check}
variable      check1 equal 7756
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6559 $b
create_bonds  single/bond 2 6559 7727
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.005988 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7209
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7209]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6052
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6052]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5316
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5316]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7462
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7462]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6373
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6373]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6702
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6702]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7460
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7460]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7460 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7460                         
7 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 7
print         "j = $(v_j)"
j = 7
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7460]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7460]
variable      check0 equal ${check}
variable      check0 equal 7756
variable      b equal ${check}+1
variable      b equal 7756+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 27.7795184094435 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 27.7795184094435 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001552 secs
variable      check1 equal ${check}
variable      check1 equal 7786
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7460 $b
create_bonds  single/bond 2 7460 7757
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0042828 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7149
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7149]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5103
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5103]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6858
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6858]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5049
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5049]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7113
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7113]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5286
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5286]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5248
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5248]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5458
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5458]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7514
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7514]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5887
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5887]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7514
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7514]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6420
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6420]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6420 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6420                         
8 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 8
print         "j = $(v_j)"
j = 8
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6420]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6420]
variable      check0 equal ${check}
variable      check0 equal 7786
variable      b equal ${check}+1
variable      b equal 7786+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 5.5559036818887 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 5.5559036818887 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001724 secs
variable      check1 equal ${check}
variable      check1 equal 7816
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6420 $b
create_bonds  single/bond 2 6420 7787
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0030744 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6183
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6183]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6183 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6183                         
9 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 9
print         "j = $(v_j)"
j = 9
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6183]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6183]
variable      check0 equal ${check}
variable      check0 equal 7816
variable      b equal ${check}+1
variable      b equal 7816+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 0 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 0 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001586 secs
variable      check1 equal ${check}
variable      check1 equal 7846
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6183 $b
create_bonds  single/bond 2 6183 7817
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0028309 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5540
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5540]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6812
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6812]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6812 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6812                         
10 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 10
print         "j = $(v_j)"
j = 10
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6812]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6812]
variable      check0 equal ${check}
variable      check0 equal 7846
variable      b equal ${check}+1
variable      b equal 7846+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 13.4929089417297 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 13.4929089417297 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001637 secs
variable      check1 equal ${check}
variable      check1 equal 7876
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6812 $b
create_bonds  single/bond 2 6812 7847
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0029596 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5712
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5712]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6811
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6811]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6811 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6811                         
11 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 11
print         "j = $(v_j)"
j = 11
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6811]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6811]
variable      check0 equal ${check}
variable      check0 equal 7876
variable      b equal ${check}+1
variable      b equal 7876+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 12.6992084157456 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 12.6992084157456 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002099 secs
variable      check1 equal ${check}
variable      check1 equal 7906
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6811 $b
create_bonds  single/bond 2 6811 7877
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0038132 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5306
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5306]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6827
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6827]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6827 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6827                         
12 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 12
print         "j = $(v_j)"
j = 12
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6827]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6827]
variable      check0 equal ${check}
variable      check0 equal 7906
variable      b equal ${check}+1
variable      b equal 7906+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 14.2866094677138 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 14.2866094677138 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001498 secs
variable      check1 equal ${check}
variable      check1 equal 7936
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6827 $b
create_bonds  single/bond 2 6827 7907
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0026892 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6871
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6871]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6871 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6871                         
13 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 13
print         "j = $(v_j)"
j = 13
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6871]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6871]
variable      check0 equal ${check}
variable      check0 equal 7936
variable      b equal ${check}+1
variable      b equal 7936+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 14.2866094677138 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 14.2866094677138 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001574 secs
variable      check1 equal ${check}
variable      check1 equal 7966
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6871 $b
create_bonds  single/bond 2 6871 7937
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.003077 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5320
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5320]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5902
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5902]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4971
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4971]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7109
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7109]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7059
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7059]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7059 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7059                         
14 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 14
print         "j = $(v_j)"
j = 14
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7059]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7059]
variable      check0 equal ${check}
variable      check0 equal 7966
variable      b equal ${check}+1
variable      b equal 7966+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 19.0488126236184 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 19.0488126236184 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001749 secs
variable      check1 equal ${check}
variable      check1 equal 7996
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7059 $b
create_bonds  single/bond 2 7059 7967
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.002771 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7269
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7269]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5073
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5073]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4847
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4847]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6066
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6066]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5021
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5021]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6970
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6970]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6557
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6557]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6838
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6838]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6783
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6783]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6783 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6783                         
15 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 15
print         "j = $(v_j)"
j = 15
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6783]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6783]
variable      check0 equal ${check}
variable      check0 equal 7996
variable      b equal ${check}+1
variable      b equal 7996+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 12.6992084157456 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 12.6992084157456 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002039 secs
variable      check1 equal ${check}
variable      check1 equal 8026
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6783 $b
create_bonds  single/bond 2 6783 7997
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025526 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6373
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6373]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5528
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5528]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7512
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7512]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7512 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7512                         
16 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 16
print         "j = $(v_j)"
j = 16
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7512]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7512]
variable      check0 equal ${check}
variable      check0 equal 8026
variable      b equal ${check}+1
variable      b equal 8026+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 29.3669194614117 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 29.3669194614117 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001934 secs
variable      check1 equal ${check}
variable      check1 equal 8056
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7512 $b
create_bonds  single/bond 2 7512 8027
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0075324 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7066
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7066]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6554
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6554]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7511
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7511]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7511 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7511                         
17 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 17
print         "j = $(v_j)"
j = 17
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7511]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7511]
variable      check0 equal ${check}
variable      check0 equal 8056
variable      b equal ${check}+1
variable      b equal 8056+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 28.5732189354276 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 28.5732189354276 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002376 secs
variable      check1 equal ${check}
variable      check1 equal 8086
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7511 $b
create_bonds  single/bond 2 7511 8057
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0057086 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5999
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5999]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6961
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6961]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5288
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5288]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6011
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6011]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5812
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5812]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6044
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6044]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6112
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6112]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6318
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6318]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6801
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6801]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5908
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5908]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6934
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6934]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7157
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7157]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7211
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7211]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7211 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7211                         
18 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 18
print         "j = $(v_j)"
j = 18
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7211]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7211]
variable      check0 equal ${check}
variable      check0 equal 8086
variable      b equal ${check}+1
variable      b equal 8086+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 22.2236147275548 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 22.2236147275548 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002087 secs
variable      check1 equal ${check}
variable      check1 equal 8116
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7211 $b
create_bonds  single/bond 2 7211 8087
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0039978 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5478
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5478]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4755
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4755]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7547
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7547]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7547 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7547                         
19 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 19
print         "j = $(v_j)"
j = 19
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7547]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7547]
variable      check0 equal ${check}
variable      check0 equal 8116
variable      b equal ${check}+1
variable      b equal 8116+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 28.5732189354276 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 28.5732189354276 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002506 secs
variable      check1 equal ${check}
variable      check1 equal 8146
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7547 $b
create_bonds  single/bond 2 7547 8117
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0034931 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7251
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7251]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7251 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7251                         
20 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 20
print         "j = $(v_j)"
j = 20
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7251]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7251]
variable      check0 equal ${check}
variable      check0 equal 8146
variable      b equal ${check}+1
variable      b equal 8146+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 22.2236147275548 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 22.2236147275548 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002176 secs
variable      check1 equal ${check}
variable      check1 equal 8176
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7251 $b
create_bonds  single/bond 2 7251 8147
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0045258 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5772
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5772]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7515
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7515]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7515 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7515                         
21 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 21
print         "j = $(v_j)"
j = 21
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7515]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7515]
variable      check0 equal ${check}
variable      check0 equal 8176
variable      b equal ${check}+1
variable      b equal 8176+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 28.5732189354276 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 28.5732189354276 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000219 secs
variable      check1 equal ${check}
variable      check1 equal 8206
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7515 $b
create_bonds  single/bond 2 7515 8177
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0036409 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7113
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7113]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6791
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6791]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6791 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6791                         
22 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 22
print         "j = $(v_j)"
j = 22
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6791]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6791]
variable      check0 equal ${check}
variable      check0 equal 8206
variable      b equal ${check}+1
variable      b equal 8206+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 12.6992084157456 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 12.6992084157456 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001652 secs
variable      check1 equal ${check}
variable      check1 equal 8236
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6791 $b
create_bonds  single/bond 2 6791 8207
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0035653 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6522
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6522]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4886
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4886]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6664
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6664]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6664 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6664                         
23 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 23
print         "j = $(v_j)"
j = 23
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6664]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6664]
variable      check0 equal ${check}
variable      check0 equal 8236
variable      b equal ${check}+1
variable      b equal 8236+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 10.3181068377933 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 10.3181068377933 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001619 secs
variable      check1 equal ${check}
variable      check1 equal 8266
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6664 $b
create_bonds  single/bond 2 6664 8237
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025286 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5477
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5477]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6947
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6947]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6947 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6947                         
24 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 24
print         "j = $(v_j)"
j = 24
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6947]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6947]
variable      check0 equal ${check}
variable      check0 equal 8266
variable      b equal ${check}+1
variable      b equal 8266+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 15.874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 15.874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000162 secs
variable      check1 equal ${check}
variable      check1 equal 8296
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6947 $b
create_bonds  single/bond 2 6947 8267
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0029004 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6285
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6285]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4764
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4764]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5651
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5651]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6965
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6965]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6883
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6883]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6883 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6883                         
25 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 25
print         "j = $(v_j)"
j = 25
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6883]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6883]
variable      check0 equal ${check}
variable      check0 equal 8296
variable      b equal ${check}+1
variable      b equal 8296+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.1921173574753 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.1921173574753 14.2866094677138 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.1921173574753 14.2866094677138 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001484 secs
variable      check1 equal ${check}
variable      check1 equal 8326
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6883 $b
create_bonds  single/bond 2 6883 8297
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0024544 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5653
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5653]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4816
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4816]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5385
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5385]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7030
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7030]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5160
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5160]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7535
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7535]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7535 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7535                         
26 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 26
print         "j = $(v_j)"
j = 26
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7535]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7535]
variable      check0 equal ${check}
variable      check0 equal 8326
variable      b equal ${check}+1
variable      b equal 8326+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 28.5732189354276 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 28.5732189354276 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001454 secs
variable      check1 equal ${check}
variable      check1 equal 8356
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7535 $b
create_bonds  single/bond 2 7535 8327
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0027425 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5526
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5526]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5948
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5948]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4722
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4722]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6284
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6284]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6284 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6284                         
27 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 27
print         "j = $(v_j)"
j = 27
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6284]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6284]
variable      check0 equal ${check}
variable      check0 equal 8356
variable      b equal ${check}+1
variable      b equal 8356+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 2.3811015779523 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 2.3811015779523 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002163 secs
variable      check1 equal ${check}
variable      check1 equal 8386
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6284 $b
create_bonds  single/bond 2 6284 8357
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0026696 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6159
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6159]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6159 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6159                         
28 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 28
print         "j = $(v_j)"
j = 28
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6159]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6159]
variable      check0 equal ${check}
variable      check0 equal 8386
variable      b equal ${check}+1
variable      b equal 8386+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 0 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 0 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001404 secs
variable      check1 equal ${check}
variable      check1 equal 8416
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6159 $b
create_bonds  single/bond 2 6159 8387
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0034235 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7135
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7135]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7135 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7135                         
29 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 29
print         "j = $(v_j)"
j = 29
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7135]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7135]
variable      check0 equal ${check}
variable      check0 equal 8416
variable      b equal ${check}+1
variable      b equal 8416+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 20.6362136755866 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 20.6362136755866 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001675 secs
variable      check1 equal ${check}
variable      check1 equal 8446
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7135 $b
create_bonds  single/bond 2 7135 8417
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0028096 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7527
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7527]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7527 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7527                         
30 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 30
print         "j = $(v_j)"
j = 30
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7527]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7527]
variable      check0 equal ${check}
variable      check0 equal 8446
variable      b equal ${check}+1
variable      b equal 8446+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 28.5732189354276 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 28.5732189354276 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001865 secs
variable      check1 equal ${check}
variable      check1 equal 8476
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7527 $b
create_bonds  single/bond 2 7527 8447
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0028866 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7524
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7524]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7524 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7524                         
31 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 31
print         "j = $(v_j)"
j = 31
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7524]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7524]
variable      check0 equal ${check}
variable      check0 equal 8476
variable      b equal ${check}+1
variable      b equal 8476+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 29.3669194614117 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 29.3669194614117 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002204 secs
variable      check1 equal ${check}
variable      check1 equal 8506
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7524 $b
create_bonds  single/bond 2 7524 8477
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0022124 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6825
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6825]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6378
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6378]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5626
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5626]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7384
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7384]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7384 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7384                         
32 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 32
print         "j = $(v_j)"
j = 32
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7384]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7384]
variable      check0 equal ${check}
variable      check0 equal 8506
variable      b equal ${check}+1
variable      b equal 8506+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 26.1921173574753 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 26.1921173574753 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000227 secs
variable      check1 equal ${check}
variable      check1 equal 8536
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7384 $b
create_bonds  single/bond 2 7384 8507
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0029003 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6438
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6438]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6997
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6997]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5415
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5415]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6398
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6398]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7296
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7296]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7296 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7296                         
33 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 33
print         "j = $(v_j)"
j = 33
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7296]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7296]
variable      check0 equal ${check}
variable      check0 equal 8536
variable      b equal ${check}+1
variable      b equal 8536+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 24.6047163055071 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 24.6047163055071 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001455 secs
variable      check1 equal ${check}
variable      check1 equal 8566
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7296 $b
create_bonds  single/bond 2 7296 8537
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.003497 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4906
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4906]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5300
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5300]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5597
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5597]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4903
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4903]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5593
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5593]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6439
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6439]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6439 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6439                         
34 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 34
print         "j = $(v_j)"
j = 34
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6439]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6439]
variable      check0 equal ${check}
variable      check0 equal 8566
variable      b equal ${check}+1
variable      b equal 8566+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 6.3496042078728 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 6.3496042078728 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001606 secs
variable      check1 equal ${check}
variable      check1 equal 8596
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6439 $b
create_bonds  single/bond 2 6439 8567
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0024513 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7469
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7469]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7075
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7075]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7075 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7075                         
35 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 35
print         "j = $(v_j)"
j = 35
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7075]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7075]
variable      check0 equal ${check}
variable      check0 equal 8596
variable      b equal ${check}+1
variable      b equal 8596+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 19.0488126236184 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 19.0488126236184 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002339 secs
variable      check1 equal ${check}
variable      check1 equal 8626
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7075 $b
create_bonds  single/bond 2 7075 8597
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0042374 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5252
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5252]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6614
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6614]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6483
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6483]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6483 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6483                         
36 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 36
print         "j = $(v_j)"
j = 36
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6483]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6483]
variable      check0 equal ${check}
variable      check0 equal 8626
variable      b equal ${check}+1
variable      b equal 8626+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 6.3496042078728 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 6.3496042078728 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001467 secs
variable      check1 equal ${check}
variable      check1 equal 8656
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6483 $b
create_bonds  single/bond 2 6483 8627
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0033542 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4917
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4917]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6927
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6927]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6927 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6927                         
37 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 37
print         "j = $(v_j)"
j = 37
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6927]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6927]
variable      check0 equal ${check}
variable      check0 equal 8656
variable      b equal ${check}+1
variable      b equal 8656+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 15.874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 15.874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001451 secs
variable      check1 equal ${check}
variable      check1 equal 8686
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6927 $b
create_bonds  single/bond 2 6927 8657
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0024246 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5339
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5339]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7433
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7433]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6139
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6139]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6139 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6139                         
38 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 38
print         "j = $(v_j)"
j = 38
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6139]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6139]
variable      check0 equal ${check}
variable      check0 equal 8686
variable      b equal ${check}+1
variable      b equal 8686+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 0 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 0 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001784 secs
variable      check1 equal ${check}
variable      check1 equal 8716
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6139 $b
create_bonds  single/bond 2 6139 8687
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0021927 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5934
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5934]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5214
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5214]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6657
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6657]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7511
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7511]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7511 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7511                         
38 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 38
print         "j = $(v_j)"
j = 39
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7511]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7511]
variable      check0 equal ${check}
variable      check0 equal 8716
variable      b equal ${check}+1
variable      b equal 8716+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7450
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7450]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6423
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6423]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6423 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6423                         
39 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 39
print         "j = $(v_j)"
j = 39
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6423]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6423]
variable      check0 equal ${check}
variable      check0 equal 8716
variable      b equal ${check}+1
variable      b equal 8716+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 24.6047163055071 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 24.6047163055071 4.7622031559046 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 24.6047163055071 4.7622031559046 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000148 secs
variable      check1 equal ${check}
variable      check1 equal 8746
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6423 $b
create_bonds  single/bond 2 6423 8717
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.002596 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7393
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7393]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7163
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7163]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7163 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7163                         
40 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 40
print         "j = $(v_j)"
j = 40
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7163]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7163]
variable      check0 equal ${check}
variable      check0 equal 8746
variable      b equal ${check}+1
variable      b equal 8746+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 20.6362136755866 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 20.6362136755866 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001593 secs
variable      check1 equal ${check}
variable      check1 equal 8776
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7163 $b
create_bonds  single/bond 2 7163 8747
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0026777 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6874
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6874]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4819
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4819]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6139
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6139]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6139 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6139                         
40 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 40
print         "j = $(v_j)"
j = 41
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6139]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6139]
variable      check0 equal ${check}
variable      check0 equal 8776
variable      b equal ${check}+1
variable      b equal 8776+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5648
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5648]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5234
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5234]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6685
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6685]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6470
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6470]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5136
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5136]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7398
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7398]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7280
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7280]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7280 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7280                         
41 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 41
print         "j = $(v_j)"
j = 41
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7280]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7280]
variable      check0 equal ${check}
variable      check0 equal 8776
variable      b equal ${check}+1
variable      b equal 8776+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 24.6047163055071 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 24.6047163055071 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001975 secs
variable      check1 equal ${check}
variable      check1 equal 8806
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7280 $b
create_bonds  single/bond 2 7280 8777
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0033015 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4902
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4902]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6203
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6203]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6203 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6203                         
42 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 42
print         "j = $(v_j)"
j = 42
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6203]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6203]
variable      check0 equal ${check}
variable      check0 equal 8806
variable      b equal ${check}+1
variable      b equal 8806+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 0 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 0 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001788 secs
variable      check1 equal ${check}
variable      check1 equal 8836
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6203 $b
create_bonds  single/bond 2 6203 8807
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0027981 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5272
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5272]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5489
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5489]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5116
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5116]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7388
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7388]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7388 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7388                         
43 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 43
print         "j = $(v_j)"
j = 43
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7388]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7388]
variable      check0 equal ${check}
variable      check0 equal 8836
variable      b equal ${check}+1
variable      b equal 8836+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 26.1921173574753 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 26.1921173574753 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001706 secs
variable      check1 equal ${check}
variable      check1 equal 8866
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7388 $b
create_bonds  single/bond 2 7388 8837
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0023358 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5764
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5764]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5506
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5506]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6419
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6419]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6419 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6419                         
44 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 44
print         "j = $(v_j)"
j = 44
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6419]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6419]
variable      check0 equal ${check}
variable      check0 equal 8866
variable      b equal ${check}+1
variable      b equal 8866+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 4.7622031559046 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 4.7622031559046 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002364 secs
variable      check1 equal ${check}
variable      check1 equal 8896
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6419 $b
create_bonds  single/bond 2 6419 8867
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0027269 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6355
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6355]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6355 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6355                         
45 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 45
print         "j = $(v_j)"
j = 45
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6355]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6355]
variable      check0 equal ${check}
variable      check0 equal 8896
variable      b equal ${check}+1
variable      b equal 8896+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 3.1748021039364 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 3.1748021039364 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001639 secs
variable      check1 equal ${check}
variable      check1 equal 8926
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6355 $b
create_bonds  single/bond 2 6355 8897
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0022684 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7313
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7313]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4947
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4947]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5689
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5689]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4712
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4712]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7556
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7556]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7556 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7556                         
46 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 46
print         "j = $(v_j)"
j = 46
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7556]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7556]
variable      check0 equal ${check}
variable      check0 equal 8926
variable      b equal ${check}+1
variable      b equal 8926+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 29.3669194614117 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 29.3669194614117 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001632 secs
variable      check1 equal ${check}
variable      check1 equal 8956
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7556 $b
create_bonds  single/bond 2 7556 8927
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0035381 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6259
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6259]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6259 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6259                         
47 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 47
print         "j = $(v_j)"
j = 47
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6259]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6259]
variable      check0 equal ${check}
variable      check0 equal 8956
variable      b equal ${check}+1
variable      b equal 8956+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 1.5874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 1.5874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001938 secs
variable      check1 equal ${check}
variable      check1 equal 8986
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6259 $b
create_bonds  single/bond 2 6259 8957
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.002379 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5615
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5615]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5972
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5972]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5542
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5542]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5059
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5059]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4738
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4738]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5140
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5140]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4955
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4955]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5839
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5839]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6227
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6227]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6227 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6227                         
48 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 48
print         "j = $(v_j)"
j = 48
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6227]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6227]
variable      check0 equal ${check}
variable      check0 equal 8986
variable      b equal ${check}+1
variable      b equal 8986+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 1.5874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 1.5874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001767 secs
variable      check1 equal ${check}
variable      check1 equal 9016
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6227 $b
create_bonds  single/bond 2 6227 8987
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0032451 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5928
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5928]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6258
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6258]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6844
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6844]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6844 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6844                         
49 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 49
print         "j = $(v_j)"
j = 49
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6844]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6844]
variable      check0 equal ${check}
variable      check0 equal 9016
variable      b equal ${check}+1
variable      b equal 9016+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 15.0803099936979 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 15.0803099936979 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001836 secs
variable      check1 equal ${check}
variable      check1 equal 9046
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6844 $b
create_bonds  single/bond 2 6844 9017
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0023779 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6310
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6310]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7520
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7520]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7520 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7520                         
50 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 50
print         "j = $(v_j)"
j = 50
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7520]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7520]
variable      check0 equal ${check}
variable      check0 equal 9046
variable      b equal ${check}+1
variable      b equal 9046+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 6.3496042078728 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 6.3496042078728 29.3669194614117 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 6.3496042078728 29.3669194614117 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002055 secs
variable      check1 equal ${check}
variable      check1 equal 9076
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7520 $b
create_bonds  single/bond 2 7520 9047
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0024629 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7014
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7014]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7322
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7322]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4760
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4760]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7269
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7269]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5867
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5867]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7454
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7454]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7033
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7033]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6723
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6723]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6723 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6723                         
51 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 51
print         "j = $(v_j)"
j = 51
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6723]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6723]
variable      check0 equal ${check}
variable      check0 equal 9076
variable      b equal ${check}+1
variable      b equal 9076+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 11.1118073637774 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 11.1118073637774 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001552 secs
variable      check1 equal ${check}
variable      check1 equal 9106
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6723 $b
create_bonds  single/bond 2 6723 9077
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025034 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7082
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7082]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7054
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7054]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7400
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7400]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7400 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7400                         
52 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 52
print         "j = $(v_j)"
j = 52
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7400]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7400]
variable      check0 equal ${check}
variable      check0 equal 9106
variable      b equal ${check}+1
variable      b equal 9106+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 26.1921173574753 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 26.1921173574753 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002068 secs
variable      check1 equal ${check}
variable      check1 equal 9136
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7400 $b
create_bonds  single/bond 2 7400 9107
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0022583 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6968
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6968]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6968 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6968                         
53 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 53
print         "j = $(v_j)"
j = 53
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6968]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6968]
variable      check0 equal ${check}
variable      check0 equal 9136
variable      b equal ${check}+1
variable      b equal 9136+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 16.6677110456661 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 16.6677110456661 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001657 secs
variable      check1 equal ${check}
variable      check1 equal 9166
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6968 $b
create_bonds  single/bond 2 6968 9137
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0034585 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6030
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6030]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5147
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5147]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6960
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6960]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6960 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6960                         
54 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 54
print         "j = $(v_j)"
j = 54
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6960]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6960]
variable      check0 equal ${check}
variable      check0 equal 9166
variable      b equal ${check}+1
variable      b equal 9166+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 25.3984168314912 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 25.3984168314912 16.6677110456661 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 25.3984168314912 16.6677110456661 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001916 secs
variable      check1 equal ${check}
variable      check1 equal 9196
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6960 $b
create_bonds  single/bond 2 6960 9167
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0037257 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7023
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7023]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7023 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7023                         
55 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 55
print         "j = $(v_j)"
j = 55
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7023]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7023]
variable      check0 equal ${check}
variable      check0 equal 9196
variable      b equal ${check}+1
variable      b equal 9196+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 17.4614115716502 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 17.4614115716502 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000193 secs
variable      check1 equal ${check}
variable      check1 equal 9226
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7023 $b
create_bonds  single/bond 2 7023 9197
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0028691 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7308
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7308]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7308 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7308                         
56 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 56
print         "j = $(v_j)"
j = 56
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7308]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7308]
variable      check0 equal ${check}
variable      check0 equal 9226
variable      b equal ${check}+1
variable      b equal 9226+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 24.6047163055071 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 24.6047163055071 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001721 secs
variable      check1 equal ${check}
variable      check1 equal 9256
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7308 $b
create_bonds  single/bond 2 7308 9227
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0026385 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6204
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6204]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6204 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6204                         
57 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 57
print         "j = $(v_j)"
j = 57
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6204]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6204]
variable      check0 equal ${check}
variable      check0 equal 9256
variable      b equal ${check}+1
variable      b equal 9256+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 0.7937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 0.7937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001778 secs
variable      check1 equal ${check}
variable      check1 equal 9286
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6204 $b
create_bonds  single/bond 2 6204 9257
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025026 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4705
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4705]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5341
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5341]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6176
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6176]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6176 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6176                         
58 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 58
print         "j = $(v_j)"
j = 58
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6176]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6176]
variable      check0 equal ${check}
variable      check0 equal 9286
variable      b equal ${check}+1
variable      b equal 9286+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 0.7937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 0.7937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002205 secs
variable      check1 equal ${check}
variable      check1 equal 9316
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6176 $b
create_bonds  single/bond 2 6176 9287
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0023304 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6012
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6012]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5316
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5316]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6952
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6952]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6952 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6952                         
59 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 59
print         "j = $(v_j)"
j = 59
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6952]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6952]
variable      check0 equal ${check}
variable      check0 equal 9316
variable      b equal ${check}+1
variable      b equal 9316+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 16.6677110456661 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 16.6677110456661 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001579 secs
variable      check1 equal ${check}
variable      check1 equal 9346
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6952 $b
create_bonds  single/bond 2 6952 9317
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.003363 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7168
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7168]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7168 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7168                         
60 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 60
print         "j = $(v_j)"
j = 60
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7168]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7168]
variable      check0 equal ${check}
variable      check0 equal 9346
variable      b equal ${check}+1
variable      b equal 9346+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 17.4614115716502 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 17.4614115716502 21.4299142015707 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 17.4614115716502 21.4299142015707 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001757 secs
variable      check1 equal ${check}
variable      check1 equal 9376
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7168 $b
create_bonds  single/bond 2 7168 9347
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0070007 secs
next j
jump MDPBB.in loopj

# Assign the beads to 2 different groups of grafted and non-grafted beads

group         gbeads type 2
120 atoms in group gbeads
group         fbeads type 3
3480 atoms in group fbeads

#--- Create harmonic bonds in the walls ---#
bond_coeff    3 harmonic 800.0 $(1.5874 * sqrt(2)/2)
bond_coeff    3 harmonic 800.0 1.1224613044555256103
create_bonds  many bwall bwall 3 0.5 1.2
Neighbor list info ...
  update every 1 steps, delay 10 steps, check yes
  max neighbors/atom: 4000, page size: 100000
  master list distance cutoff = 11.1225
  ghost atom cutoff = 11.1225
  binsize = 5.56123, bins = 6 6 13
  2 neighbor lists, perpetual/occasional/extra = 1 1 0
  (1) command create_bonds, occasional
      attributes: full, newton on
      pair build: full/bin
      stencil: full/bin/3d
      bin: standard
  (2) pair lj/cut, perpetual
      attributes: half, newton on
      pair build: half/bin/newton
      stencil: half/bin/3d/newton
      bin: standard
Added 14440 bonds, new total = 18040
  12 = max # of 1-2 neighbors
  12 = max # of special neighbors
  special bonds CPU = 0.0042569 secs
create_bonds  many twall twall 3 0.5 1.2
Added 14440 bonds, new total = 32480
  12 = max # of 1-2 neighbors
  12 = max # of special neighbors
  special bonds CPU = 0.0049896 secs

info system


fix           1 twall setforce 0.0 0.0 0.0  # Freeze top wall
fix           2 bwall setforce 0.0 0.0 0.0  # Freeze bottom wall

#dump           1 all image 250 stg0.*.jpg type type zoom 2 view 60 120 bond none none
#dump          2 all atom 50 dump.brush
#dump          3 all custom 100 dump.random.bin id x y z vx vy vz


#--- Minimize the system to obtain the initial structure for the PB bilayer ---#

timestep      0.010
minimize      0.0 1.0e-8 10000 100000
WARNING: Using 'neigh_modify every 1 delay 0 check yes' setting during minimization (src/min.cpp:168)
Neighbor list info ...
  update every 1 steps, delay 0 steps, check yes
  max neighbors/atom: 4000, page size: 100000
  master list distance cutoff = 11.1225
  ghost atom cutoff = 11.1225
  binsize = 5.56123, bins = 6 6 13
  1 neighbor lists, perpetual/occasional/extra = 1 0 0
  (1) pair lj/cut, perpetual
      attributes: half, newton on
      pair build: half/bin/newton
      stencil: half/bin/3d/newton
      bin: standard
WARNING: Inconsistent image flags (src/domain.cpp:784)
Per MPI rank memory allocation (min/avg/max) = 36.54 | 36.54 | 36.54 Mbytes
Step Temp E_pair E_mol TotEng Press 
       0            0 -0.018022855    6.6360714    6.6180485   0.42445461 
      64            0 -0.049435231    5.3885369    5.3391017   0.54255402 
Loop time of 2.63964 on 1 procs for 64 steps with 9376 atoms

100.0% CPU use with 1 MPI tasks x 1 OpenMP threads

Minimization stats:
  Stopping criterion = linesearch alpha is zero
  Energy initial, next-to-last, final = 
         6.61804850207      5.33910170445      5.33910170445
  Force two-norm initial, final = 508.997 102.912
  Force max component initial, final = 30.7507 4.63214
  Final line search alpha, max atom move = 1.02941e-08 4.76837e-08
  Iterations, force evaluations = 64 237

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 2.4557     | 2.4557     | 2.4557     |   0.0 | 93.03
Bond    | 0.12522    | 0.12522    | 0.12522    |   0.0 |  4.74
Neigh   | 0          | 0          | 0          |   0.0 |  0.00
Comm    | 0.022741   | 0.022741   | 0.022741   |   0.0 |  0.86
Output  | 0          | 0          | 0          |   0.0 |  0.00
Modify  | 0.0072882  | 0.0072882  | 0.0072882  |   0.0 |  0.28
Other   |            | 0.02875    |            |       |  1.09

Nlocal:    9376 ave 9376 max 9376 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Nghost:    19680 ave 19680 max 19680 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Neighs:    5.118e+06 ave 5.118e+06 max 5.118e+06 min
Histogram: 1 0 0 0 0 0 0 0 0 0

Total # of neighbors = 5118000
Ave neighs/atom = 545.862
Ave special neighs/atom = 6.92833
Neighbor list builds = 0
Dangerous builds = 0

#--- Shrink the simulation box such that it encloses the system exactly ---#

variable z_f equal bound(all,zmin)
variable z_c equal bound(all,zmax)

change_box all z final ${z_f} $(v_z_c + 0.1) units box
change_box all z final 0 $(v_z_c + 0.1) units box
change_box all z final 0 70.099999999999994316 units box
  orthogonal box = (0 0 0) to (30 30 70.1)

info variables                              # For diagnostics

minimize      0.0 1.0e-8 10000 100000
WARNING: Using 'neigh_modify every 1 delay 0 check yes' setting during minimization (src/min.cpp:168)
WARNING: Inconsistent image flags (src/domain.cpp:784)
Per MPI rank memory allocation (min/avg/max) = 36.54 | 36.54 | 36.54 Mbytes
Step Temp E_pair E_mol TotEng Press 
      64            0 -0.049435231    5.3885369    5.3391017   0.55725948 
      65            0 -0.049435231    5.3885369    5.3391017   0.55725948 
Loop time of 0.256148 on 1 procs for 1 steps with 9376 atoms

97.6% CPU use with 1 MPI tasks x 1 OpenMP threads

Minimization stats:
  Stopping criterion = linesearch alpha is zero
  Energy initial, next-to-last, final = 
         5.33910170445      5.33910170445      5.33910170445
  Force two-norm initial, final = 102.912 102.912
  Force max component initial, final = 4.63214 4.63214
  Final line search alpha, max atom move = 1.02941e-08 4.76837e-08
  Iterations, force evaluations = 1 22

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 0.23753    | 0.23753    | 0.23753    |   0.0 | 92.73
Bond    | 0.012528   | 0.012528   | 0.012528   |   0.0 |  4.89
Neigh   | 0          | 0          | 0          |   0.0 |  0.00
Comm    | 0.0023775  | 0.0023775  | 0.0023775  |   0.0 |  0.93
Output  | 0          | 0          | 0          |   0.0 |  0.00
Modify  | 0.0007514  | 0.0007514  | 0.0007514  |   0.0 |  0.29
Other   |            | 0.002963   |            |       |  1.16

Nlocal:    9376 ave 9376 max 9376 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Nghost:    19680 ave 19680 max 19680 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Neighs:    5.14004e+06 ave 5.14004e+06 max 5.14004e+06 min
Histogram: 1 0 0 0 0 0 0 0 0 0

Total # of neighbors = 5140042
Ave neighs/atom = 548.213
Ave special neighs/atom = 6.92833
Neighbor list builds = 0
Dangerous builds = 0

#--- Remove the fixes for the restart file ---#
unfix         1
unfix         2

#--- Write Restart File ---#

write_restart  MDPBB.rst
#write_data     MDPBB.data
print        "Created a Polymer Brush Bilayer with Surface Coverage = $(v_M/(lx*ly))"
Created a Polymer Brush Bilayer with Surface Coverage = 0.066666666666666665741

label          sim

include        ecs.in
# This is an input script that creates a mono disperse polymer brush bilayer
# A coarse grained bead-spring model is used for the polymers which are end
# grafted to the surfaces of 2 opposing FCC walls at random sites.

clear
OMP_NUM_THREADS environment is not set. Defaulting to 1 thread. (src/comm.cpp:88)
  using 1 OpenMP thread(s) per MPI task


#--- Read in the Restart file ---#

read_restart    MDPBB.rst
  restoring atom style bond from restart
  orthogonal box = (0 0 0) to (30 30 70.1)
  1 by 1 by 1 MPI processor grid
  restoring pair style lj/cut from restart
  restoring bond style hybrid from restart
  9376 atoms
  32480 bonds
  12 = max # of 1-2 neighbors
  12 = max # of special neighbors
  special bonds CPU = 0.0053173 secs
  read_restart CPU = 0.0137236 secs
reset_timestep  0

#--- Redefine the bond coeffs ---#

bond_coeff    1 fene 30.0 1.5 0.0 0.0      # Values obtained from literature [Grest, Galushcko]
bond_coeff    2 fene 30.0 1.5 0.0 0.0       # This is the grafting bond between the polymer and the wall atom
bond_coeff    3 harmonic 800.0 $(1.5874 * sqrt(2)/2)
bond_coeff    3 harmonic 800.0 1.1224613044555256103

neigh_modify   every 1 delay 0 check yes

#--- Define variables ---#

# for dimensional values: eps = 4.14e-21 J at T = 300K and sigma = 0.5nm

#--- Moved to main.in ---#
#variable       Temp       equal ${Tstr} #[Grest96]
#variable       Tstep     equal 0.005                       # Timestep in Tau (default = 0.005)
#variable       Nequil    equal 10000                       # Number of timesteps to equilibrate
#variable       Ncomp     equal 200000                      # Number of timesteps to compress - until no more occilation of walls
#variable       Nshear    equal 1000000                     # Number of timesteps to shear - use approx 4ns for 10m/s
#variable       Nthermo   equal 1000                        # Number of timesteps between thermo data prints
#variable       Ndump_e   equal 10000
#variable       Ndump_c   equal 10000                       # Number of timesteps per dump file (compression)
#variable       Ndump_s   equal 10000                       # Number of timesteps per dump file (shear)
#variable       Pcomp     equal 1
variable        Pcomp2    equal ${Pcomp}
variable        Pcomp2    equal 1
variable        Vwall     equal $(v_Vwalli * v_Vscale)
variable        Vwall     equal 0.10000000000000000555

# For Equilibration - density profiles (10 for entire run)
variable       Nfreqe   equal ${Nequil}/10                  # Calculate bin averages every this many timesteps
variable       Nfreqe   equal 30000/10                  
variable       Neverye  equal 100                           # Use input values every this many timesteps
variable       Nrepeate equal ${Nfreqe}/${Neverye}          #s Number of times to use input values
variable       Nrepeate equal 3000/${Neverye}          
variable       Nrepeate equal 3000/100          


# For compression - density profiles (10 for entire run)
variable       Nfreqc   equal ${Ncomp}/10                  # Calculate bin averages every this many timesteps
variable       Nfreqc   equal 70000/10                  
variable       Neveryc  equal 100                          # Use input values every this many timesteps
variable       Nrepeatc equal ${Nfreqc}/${Neveryc}         # Number of times to use input values
variable       Nrepeatc equal 7000/${Neveryc}         
variable       Nrepeatc equal 7000/100         

# For Shear - density profiles (10 for entire run)
variable       Nfreqs   equal ${Nshear}/10                  # Calculate bin averages every this many timesteps
variable       Nfreqs   equal 200000/10                  
variable       Neverys  equal 100                          # Use input values every this many timesteps
variable       Nrepeats equal ${Nfreqs}/${Neverys}         # Number of times to use input values
variable       Nrepeats equal 20000/${Neverys}         
variable       Nrepeats equal 20000/100         


variable       binres   equal  0.001                       # Giving 1000 data points across the sim. box



variable       bwzmin  equal bound(bwall,zmin)
variable       bwzmax  equal bound(bwall,zmax)
variable       twzmin  equal bound(twall,zmin)
variable       twzmax  equal bound(twall,zmax)
variable       c       equal count(gbeads)
variable       surfcov equal $(v_M/(lx*ly))
variable       surfcov equal 0.066666666666666665741
variable       D       equal v_twzmin-v_bwzmax
variable       Dout    equal v_twzmax-v_bwzmin
variable       srate   equal (v_Vwall/v_D)


#--- Define regions and groups ---#

print        "bwzmin = ${bwzmin}"
bwzmin = 0
print        "bwzmax = ${bwzmax}"
bwzmax = 2.3811015779523
print        "twzmin = ${twzmin}"
twzmin = 67.6188984220477
print        "twzmax = ${twzmax}"
twzmax = 70

region         bwallb  block  INF INF INF INF ${bwzmin} $(v_bwzmin + 0.4) units box
region         bwallb  block  INF INF INF INF 0 $(v_bwzmin + 0.4) units box
region         bwallb  block  INF INF INF INF 0 0.4000000000000000222 units box
region         bwallm  block  INF INF INF INF $(v_bwzmin + 0.35) $(v_bwzmax - 0.35) units box
region         bwallm  block  INF INF INF INF 0.3499999999999999778 $(v_bwzmax - 0.35) units box
region         bwallm  block  INF INF INF INF 0.3499999999999999778 2.0311015779522998415 units box
region         bwallt  block  INF INF INF INF $(v_bwzmax - 0.7) $(v_bwzmax) units box
region         bwallt  block  INF INF INF INF 1.6811015779522999747 $(v_bwzmax) units box
region         bwallt  block  INF INF INF INF 1.6811015779522999747 2.3811015779522999303 units box
region         bmelt   block  INF INF INF INF $(v_bwzmax) $(v_twzmax / 2) units box
region         bmelt   block  INF INF INF INF 2.3811015779522999303 $(v_twzmax / 2) units box
region         bmelt   block  INF INF INF INF 2.3811015779522999303 35 units box
region         tmelt   block  INF INF INF INF $(v_twzmax / 2)  $(v_twzmin - 0.1) units box
region         tmelt   block  INF INF INF INF 35  $(v_twzmin - 0.1) units box
region         tmelt   block  INF INF INF INF 35  67.518898422047712415 units box
region         twallb  block  INF INF INF INF $(v_twzmin - 0.1) $(v_twzmin + 0.35) units box
region         twallb  block  INF INF INF INF 67.518898422047712415 $(v_twzmin + 0.35) units box
region         twallb  block  INF INF INF INF 67.518898422047712415 67.968898422047701047 units box
region         twallm  block  INF INF INF INF $(v_twzmin + 0.35) $(v_twzmax - 0.35) units box
region         twallm  block  INF INF INF INF 67.968898422047701047 $(v_twzmax - 0.35) units box
region         twallm  block  INF INF INF INF 67.968898422047701047 69.650000000000005684 units box
region         twallt  block  INF INF INF INF $(v_twzmax - 0.35) $(v_twzmax) units box
region         twallt  block  INF INF INF INF 69.650000000000005684 $(v_twzmax) units box
region         twallt  block  INF INF INF INF 69.650000000000005684 70 units box

group          bwsurf  region bwallt
722 atoms in group bwsurf
group          bwbulk  region bwallm
1444 atoms in group bwbulk
group          bwout   region bwallb
722 atoms in group bwout
group          bbeads  region bmelt
1800 atoms in group bbeads
group          tbeads  region tmelt
1800 atoms in group tbeads
group          abeads  union  bbeads tbeads
3600 atoms in group abeads
group          twsurf  region twallb
722 atoms in group twsurf
group          twbulk  region twallm
1444 atoms in group twbulk
group          twout   region twallt
722 atoms in group twout
group          rest4bot union abeads twall
6488 atoms in group rest4bot
group          rest4top union abeads bwall
6488 atoms in group rest4top
group          walls    union bwall twall
5776 atoms in group walls
group          alltop   union twall tbeads
4688 atoms in group alltop
# Other groups are: gbeads fbeads bwall twall

info system
info coeffs

#--- Exclude wall-wall interactions ---#

#neigh_modify exclude type 1 1
#neigh_modify exclude type 1 4
#neigh_modify exclude type 4 4


############
# Computes #
############

compute         Vir all pressure thermo_temp virial
compute         melTemp   abeads temp
compute         melPress  all    pressure melTemp
compute         wallTemp  walls  temp
compute         wallPress all    pressure wallTemp
variable        melDens   equal  $(mass(abeads))/(lx*ly*v_D)
variable        melDens   equal  3600/(lx*ly*v_D)

#--- Forces and Energies ---#

compute         fbwall  bwall group/group rest4bot
compute         ftwall  twall group/group rest4top
compute         fwalls  bwall group/group twall

#--- Like done in comp_shear.in ---#
group           rest_bot union abeads bwall
6488 atoms in group rest_bot
group           rest_bot2 subtract all bwsurf
8654 atoms in group rest_bot2
compute         ggbot bwsurf group/group rest_bot
compute         ggbot2 bwsurf group/group rest_bot

group           rest_top union abeads twall
6488 atoms in group rest_top
group           rest_top2 subtract all twsurf
8654 atoms in group rest_top2
compute         ggtop twsurf group/group rest_top
compute         ggtop2 twsurf group/group rest_top2


#--- Calculate the applied force on each atom for the pressure applied---#
variable Fcomp equal (${Pcomp}*lx*ly)
variable Fcomp equal (1*lx*ly)
variable Fcatom equal (-${Fcomp})/(count(twout))
variable Fcatom equal (-900)/(count(twout))


#compute	        peratom   all   stress/atom NULL
#compute	        p_all     all   reduce sum c_peratom[1] c_peratom[2] c_peratom[3]
#variable	      press_all equal -(c_p_all[1]+c_p_all[2]+c_p_all[3])/(3*v_volume)

#--- Method of Planes for local stress tensor ---#



info groups variables                              # For diagnostics


#################
# Equilibration #
#################

#--- Number Density profiles (Equil) ---#
compute         eabeads abeads chunk/atom bin/1d z lower ${binres} # Check bound keyword to maybe only bin melt area
compute         eabeads abeads chunk/atom bin/1d z lower 0.001 
fix             abeads_edz abeads ave/chunk ${Neverye} ${Nrepeate} ${Nfreqe} eabeads density/number file abeads_edz
fix             abeads_edz abeads ave/chunk 100 ${Nrepeate} ${Nfreqe} eabeads density/number file abeads_edz
fix             abeads_edz abeads ave/chunk 100 30 ${Nfreqe} eabeads density/number file abeads_edz
fix             abeads_edz abeads ave/chunk 100 30 3000 eabeads density/number file abeads_edz
compute         ebbeads bbeads chunk/atom bin/1d z lower ${binres} # Check bound keyword to maybe only bin melt area
compute         ebbeads bbeads chunk/atom bin/1d z lower 0.001 
fix             bbeads_edz bbeads  ave/chunk ${Neverye} ${Nrepeate} ${Nfreqe} ebbeads density/number file bbeads_edz
fix             bbeads_edz bbeads  ave/chunk 100 ${Nrepeate} ${Nfreqe} ebbeads density/number file bbeads_edz
fix             bbeads_edz bbeads  ave/chunk 100 30 ${Nfreqe} ebbeads density/number file bbeads_edz
fix             bbeads_edz bbeads  ave/chunk 100 30 3000 ebbeads density/number file bbeads_edz
compute         etbeads tbeads chunk/atom bin/1d z lower ${binres} # Check bound keyword to maybe only bin melt area
compute         etbeads tbeads chunk/atom bin/1d z lower 0.001 
fix             tbeads_edz tbeads  ave/chunk ${Neverye} ${Nrepeate} ${Nfreqe} etbeads density/number file tbeads_edz
fix             tbeads_edz tbeads  ave/chunk 100 ${Nrepeate} ${Nfreqe} etbeads density/number file tbeads_edz
fix             tbeads_edz tbeads  ave/chunk 100 30 ${Nfreqe} etbeads density/number file tbeads_edz
fix             tbeads_edz tbeads  ave/chunk 100 30 3000 etbeads density/number file tbeads_edz

compute         mope all stress/mop/profile z lower $(zhi * v_binres) total
compute         mope all stress/mop/profile z lower 0.070099999999999995648 total
fix mope        all ave/time ${Neverye} ${Nrepeate} ${Nfreqe} c_mope[*] ave running overwrite file mope.time mode vector
fix mope        all ave/time 100 ${Nrepeate} ${Nfreqe} c_mope[*] ave running overwrite file mope.time mode vector
fix mope        all ave/time 100 30 ${Nfreqe} c_mope[*] ave running overwrite file mope.time mode vector
fix mope        all ave/time 100 30 3000 c_mope[*] ave running overwrite file mope.time mode vector

#--- Radius of gyration of the bottom brush chains ---#
compute         chunk_bot bbeads chunk/atom molecule
compute         rgbbeads bbeads gyration/chunk chunk_bot
variable        aveRg    equal  (ave(c_rgbbeads))


#--- Fixes (Equil) ---#

#velocity       abeads create ${Temp} 290842 dist gaussian
#fix             nvt_melt    abeads nvt temp ${Temp} ${Temp} 100.0

# NVE for all and langevin thermostat for melt
fix             nve_melt abeads nve
fix             lang_melt abeads langevin ${Temp} ${Temp} 0.1 798753
fix             lang_melt abeads langevin 1 ${Temp} 0.1 798753
fix             lang_melt abeads langevin 1 1 0.1 798753
fix             nve_walls  walls nve

#--- Langevin thermostat the bulk of the walls in y ---#
# Only thermostat the bulk of the wall not the surface or the outer layer
compute         Tempyt     twbulk temp/partial 0 1 0
fix             lang_tbulk twbulk langevin ${Temp} ${Temp} 0.1 87239 zero yes
fix             lang_tbulk twbulk langevin 1 ${Temp} 0.1 87239 zero yes
fix             lang_tbulk twbulk langevin 1 1 0.1 87239 zero yes
fix_modify      lang_tbulk temp Tempyt
compute         Tempyb     bwbulk temp/partial 0 1 0
fix             lang_bbulk bwbulk langevin ${Temp} ${Temp} 0.1 87239 zero yes
fix             lang_bbulk bwbulk langevin 1 ${Temp} 0.1 87239 zero yes
fix             lang_bbulk bwbulk langevin 1 1 0.1 87239 zero yes
fix_modify      lang_bbulk temp Tempyb

#--- Freeze the outer layer of the walls ---#
fix             freeze_bout bwout setforce 0.0 0.0 0.0
fix             freeze_tout twout setforce 0.0 0.0 0.0

#--- Thermo output ---#

thermo_style  custom step etotal ke pe epair temp c_melTemp c_wallTemp v_Fcatom v_Pcomp2 press pxx pyy pzz pxy pxz pyz c_Vir c_Vir[1] c_Vir[2] c_Vir[3] c_Vir[4] c_Vir[5] c_Vir[6] c_melPress c_wallPress v_melDens v_surfcov v_aveRg v_Vwall v_srate v_D v_bwzmax zhi c_fbwall[1] c_fbwall[3] c_ftwall[1] c_ftwall[3] c_ggbot[1] c_ggbot[3] c_ggtop[1] c_ggtop[3]
thermo        ${Nthermo}
thermo        1000
thermo_modify flush yes

#--- Dumps ---#
#dump           eq all image ${Ndump_e} stg1.*.jpg type type zoom 2 view 60 120 bond none none
dump            eqxyz all xyz ${Nequil} eq.xyz
dump            eqxyz all xyz 30000 eq.xyz

#--- Run Equilibration ---#
timestep    ${Tstep}
timestep    0.005
run         ${Nequil}
run         30000
WARNING: compute stress/mop/profile does not account for bond potentials (src/USER-MISC/compute_stress_mop_profile.cpp:193)
Neighbor list info ...
  update every 1 steps, delay 0 steps, check yes
  max neighbors/atom: 2000, page size: 100000
  master list distance cutoff = 1.42246
  ghost atom cutoff = 1.42246
  binsize = 0.711231, bins = 43 43 99
  9 neighbor lists, perpetual/occasional/extra = 1 8 0
  (1) pair lj/cut, perpetual
      attributes: half, newton on
      pair build: half/bin/newton
      stencil: half/bin/3d/newton
      bin: standard
  (2) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (3) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (4) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (5) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (6) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (7) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (8) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (9) compute stress/mop/profile, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
WARNING: Inconsistent image flags (src/domain.cpp:784)
Per MPI rank memory allocation (min/avg/max) = 12.16 | 12.16 | 12.16 Mbytes
Step TotEng KinEng PotEng E_pair Temp c_melTemp c_wallTemp v_Fcatom v_Pcomp2 Press Pxx Pyy Pzz Pxy Pxz Pyz c_Vir c_Vir[1] c_Vir[2] c_Vir[3] c_Vir[4] c_Vir[5] c_Vir[6] c_melPress c_wallPress v_melDens v_surfcov v_aveRg v_Vwall v_srate v_D v_bwzmax Zhi c_fbwall[1] c_fbwall[3] c_ftwall[1] c_ftwall[3] c_ggbot[1] c_ggbot[3] c_ggtop[1] c_ggtop[3] 
WARNING: One or more chunks do not contain all atoms in molecule (src/compute_chunk_atom.cpp:1161)
       0    6.4300024            0    6.4300024 -0.049435231            0            0            0   -1.2465374            1   0.29830313    1.0821911    1.0821763    -1.269458 -3.8745736e-05 2.4516568e-07 -6.1318788e-08   0.29830313    1.0821911    1.0821763    -1.269458 -3.8745736e-05 2.4516568e-07 -6.1318788e-08   0.29830313   0.29830313  0.061314149  0.066666667    3.8737558          0.1 0.0015328537    65.237797    2.3811016         70.1            0            0            0            0            0            0            0            0 
    1000    7.4364366    1.3878341    6.0486025 -0.025027263   0.92532142    1.0208496   0.86594813   -1.2465374            1  -0.37847396   0.57159471   0.57954885   -2.2865654 -0.0022449495  0.017663606 -0.0043227838  -0.51597417   0.41200558   0.45680928   -2.4167374 -0.00099051954  0.018868275 -0.0067799727   -0.4577393  -0.43670883  0.061579322  0.066666667    3.4916569          0.1 0.0015394831    64.956869    2.5164224         70.1 -0.00014794257 -0.00042488725 6.4559612e-05 0.00011253318 -0.00014794257 -0.00042488725 6.4559612e-05 0.00011253318 
    2000    6.8316282    1.3802416    5.4513867 -0.033265435    0.9202592    1.0232825   0.85621405   -1.2465374            1  0.027471065   0.77136577   0.80777258   -1.4967252 -0.0016021981  0.012745861 -0.032332763  -0.10927691   0.62074287   0.68337905   -1.6319527 -0.0010565894 0.0095271206 -0.032184519  -0.05090326  -0.03090259  0.061530421  0.066666667    3.2453515          0.1 0.0015382605    65.008494    2.4908828         70.1 -6.9682503e-05 -6.8085226e-05            0            0 -6.9682503e-05 -6.8085226e-05            0            0 
    3000    6.3491142    1.3765413    4.9725729 -0.038817777   0.91779208   0.99233043   0.87149845   -1.2465374            1  0.080258673   0.75542793      0.79229   -1.3069419 -0.0012675994  0.028568671  0.013307311 -0.056122699   0.60378308   0.66602272   -1.4381739 -0.001907012  0.028172148    0.0119747 0.00048527704  0.023650697  0.061542758  0.066666667    3.0469354          0.1 0.0015385689    64.995462    2.5012705         70.1 -0.00031523325 -0.00047656715 -4.0728154e-05 3.8682022e-05 -0.00031523325 -0.00047656715 -4.0728154e-05 3.8682022e-05 
    4000    5.9749248    1.4013504    4.5735744 -0.049216748   0.93433326    1.0007211   0.89312191   -1.2465374            1   0.27346823   0.87213069   0.87492436  -0.92665037 -0.0010171457  0.030280785 -0.0083696868   0.13462888   0.71622448   0.74999465   -1.0623325 -0.00055137037  0.032185829 -0.0087270737   0.19171551    0.2163816  0.061523207  0.066666667    2.8938657          0.1 0.0015380802    65.016116    2.4911793         70.1 -0.00017041821 -0.00014497843 0.0033599586 0.0035079288 -0.00017041821 -0.00014497843 0.0033599586 0.0035079288 
    5000    5.6728841    1.3926513    4.2802328 -0.055302441   0.92853323    1.0416333   0.85820963   -1.2465374            1  0.092800673   0.69223511   0.72105213   -1.1348852 0.0014037665  0.024646125  -0.01679076 -0.045176804   0.54449599   0.59090195   -1.2709283 -0.00054256572  0.025509938  -0.01732767  0.014243681  0.033380187  0.061563234  0.066666667    2.7571975          0.1 0.0015390808    64.973845    2.5105777         70.1 -0.00089152974 -0.0018158027 0.0022466374 0.0033048661 -0.00089152974 -0.0018158027 0.0022466374 0.0033048661 
    6000     5.370935    1.3606016    4.0103333 -0.063620919   0.90716451    1.0090491   0.84382674   -1.2465374            1   0.20925505   0.75026288   0.76496217  -0.88745989 -0.0022218973 -0.0014738705 -0.0062908522  0.074452907   0.60449242   0.64146432    -1.022598 0.00041708677 -0.0015956437 -0.0056465686   0.13201461   0.15169335  0.061506469  0.066666667    2.6495375          0.1 0.0015376617     65.03381    2.4885225         70.1 -0.00011356508 -0.0027322157 -0.0022461861  0.010633256 -0.00011356508 -0.0027322157 -0.0022461861  0.010633256 
    7000    5.1652671    1.3726364    3.7926306 -0.070460107   0.91518856    1.0136202   0.85400413   -1.2465374            1   0.33738795    0.8277589   0.82995183  -0.64554688 0.0049068724 0.0070481505 -0.0012865996   0.20139345   0.68147328   0.70513013  -0.78242305 0.0025662565 0.0089398511 -0.0018584152   0.25921591   0.27956549   0.06151117  0.066666667    2.5362143          0.1 0.0015377792     65.02884    2.4855341         70.1 -0.004691016 -0.0092065261 -0.00047715791 0.0069174854 -0.004691016 -0.0092065261 -0.00047715791 0.0069174854 
    8000    4.9739119    1.3492211    3.6246907 -0.086396077   0.89957671   0.99533123   0.84005793   -1.2465374            1   0.36487431   0.80880033   0.83788726  -0.55206466 -0.0016421993 0.0058671076 -0.028853792   0.23119969   0.67118779   0.70834043  -0.68592913 -0.00067822686 0.0096979889 -0.027861747   0.28797885   0.30809515  0.061582947  0.066666667    2.4583128          0.1 0.0015395737    64.953046    2.5238542         70.1 -0.00049664682 -0.015072227 -0.00084305179 0.0071170429 -0.00049664682 -0.015072227 -0.00084305179 0.0071170429 
    9000    4.7540911    1.3219045    3.4321866  -0.10500997   0.88136368   0.97976489   0.82019231   -1.2465374            1   0.39787681   0.82343928   0.83260983  -0.46241868 -0.0010155133  0.037610287 -0.0029506772    0.2669086    0.6825329   0.71108641  -0.59289352 -0.0026600754  0.037862352 -0.0035275474   0.32279977   0.34198564  0.061519274  0.066666667    2.3940699          0.1 0.0015379819    65.020273    2.4842382         70.1 0.0011016187 -0.013614947 -0.0018394114  0.021160103 0.0011016187 -0.013614947 -0.0018394114  0.021160103 
   10000    4.6409771    1.3426442    3.2983329  -0.12089348    0.8951916    1.0187712   0.81833137   -1.2465374            1   0.35268659   0.77537734   0.78621311  -0.50353069 0.0018693502  0.017564464 -0.013221169   0.21966358   0.63159677    0.6612944  -0.63390042 0.00064728397  0.019953386 -0.010816467   0.27777989   0.29457028  0.061514175  0.066666667    2.3488742          0.1 0.0015378544    65.025663    2.4937372         70.1 -9.6466098e-05 -0.027784977  0.002406985  0.030466549 -9.6466098e-05 -0.027784977  0.002406985  0.030466549 
   11000    4.5858851    1.3530833    3.2328018   -0.1201835   0.90215175    1.0160415   0.83133149   -1.2465374            1   0.50946558   0.86835431    0.8870597  -0.22701726 0.0037948799 -0.023545814 -0.009976068   0.37540832   0.72578412   0.75790453  -0.35746369 0.00085119338 -0.024918722 -0.010663665   0.43336891     0.451505  0.061573565  0.066666667    2.2832315          0.1 0.0015393391    64.962943    2.5197326         70.1 0.0069173139 -0.035183648 0.0027993174   0.06266589 0.0069173139 -0.035183648 0.0027993174   0.06266589 
   12000    4.4711749    1.3547724    3.1164026  -0.14104877   0.90327791    1.0114312   0.83603281   -1.2465374            1   0.45408536   0.82481572   0.82676143  -0.28932106 -0.0035091962  -0.01626994  0.013041596   0.31986076   0.68168663   0.69815681  -0.42026116 -0.0028152849 -0.018971682   0.01332122   0.37755835   0.39638777  0.061520351  0.066666667    2.2360576          0.1 0.0015380088    65.019135    2.4851263         70.1 -0.0037177319 -0.049970071 -0.0063466723  0.064305528 -0.0037177319 -0.049970071 -0.0063466723  0.064305528 
   13000    4.4447349      1.30722    3.1375149  -0.14243133   0.87157297    1.0007529   0.79121853   -1.2465374            1   0.45311306   0.79640349   0.82099247  -0.25805678 0.0062967594 -0.024968943 0.0079605089   0.32359972   0.66533903   0.69446808  -0.38900795 0.0014679499  -0.02306354 0.0086504919   0.38068816   0.39602462  0.061509535  0.066666667    2.1923206          0.1 0.0015377384    65.030568     2.487066         70.1  0.002187209 -0.050039987 -0.0032646112  0.080487706  0.002187209 -0.050039987 -0.0032646112  0.080487706 
   14000    4.4152303    1.3192361    3.0959942  -0.14469055   0.87958452   0.99596162   0.80721022   -1.2465374            1   0.49480591   0.83753414   0.83223351  -0.18534991 -0.0035959644 0.0080910349 -0.0060675048   0.36410208   0.69667598    0.7084387  -0.31280845 -0.0035020647 0.0067427805 -0.0062785275    0.4209172   0.43799079  0.061524034  0.066666667    2.1660567          0.1 0.0015381008    65.015243    2.4906031         70.1 -0.0010837439  -0.06133073 0.0043727548   0.10892838 -0.0010837439  -0.06133073 0.0043727548   0.10892838 
   15000    4.3711431    1.3092076    3.0619355  -0.14380953   0.87289815    1.0127215   0.78591093   -1.2465374            1   0.54677393   0.85624531   0.87146015 -0.087383688 0.00081854437 0.0091913754  0.015075522   0.41706367   0.72605962   0.74391475  -0.21878336 0.0019129578  0.008771948  0.015738011   0.47483486   0.48900273  0.061541796  0.066666667    2.1268834          0.1 0.0015385449    64.996478    2.4871431         70.1 0.0016905114 -0.071314541 -0.0042936664  0.068663083 0.0016905114 -0.071314541 -0.0042936664  0.068663083 
   16000    4.3694549    1.3191252    3.0503297  -0.14508455   0.87951061      1.01627     0.794434   -1.2465374            1   0.53739871   0.85197199   0.86677179  -0.10654766 -0.00079886886  0.017322436 -0.034596284   0.40670586   0.71753742   0.73903126   -0.2364511 -0.00036723128  0.017425022 -0.032887614   0.46467948   0.47942509  0.061505141  0.066666667    2.1106581          0.1 0.0015376285    65.035214    2.4862313         70.1 -0.005078999 -0.094660578 0.0098389038  0.078615259 -0.005078999 -0.094660578 0.0098389038  0.078615259 
   17000    4.3484083    1.2926586    3.0557497  -0.14456094    0.8618643   0.99562657   0.77865243   -1.2465374            1   0.56572279   0.87306455   0.88016961  -0.05606579 0.00042924857  0.034167708  0.011316208   0.43765213   0.74290273   0.75607949  -0.18602582 0.0011443109  0.032210824  0.014009191   0.49444814   0.50892679  0.061536589  0.066666667    2.0844632          0.1 0.0015384147    65.001978     2.487404         70.1 -0.0020347432 -0.079474732  0.018678705  0.088055263 -0.0020347432 -0.079474732  0.018678705  0.088055263 
   18000    4.3287978    1.2921708    3.0366271  -0.14669663   0.86153906   0.99966017   0.77561069   -1.2465374            1   0.54617154   0.85638769   0.86193412 -0.079807203 0.0049540183  0.018909108 -0.018829294   0.41814921    0.7265646   0.73913692  -0.21125389 0.0048587615  0.022657222 -0.019026367   0.47517531   0.48914543  0.061530191  0.066666667    2.0646263          0.1 0.0015382548    65.008737    2.4954817         70.1 -0.0031179731 -0.081186333 -0.0078441236  0.070116987 -0.0031179731 -0.081186333 -0.0078441236  0.070116987 
   19000    4.3343593    1.2874162    3.0469431  -0.14524608   0.85836901   0.98962687   0.77671729   -1.2465374            1   0.56591314   0.87427515   0.87110132 -0.047637062 0.00010841228 0.0063197648 -0.0089968714   0.43836187   0.74283421   0.74675589  -0.17450449 0.00057734685  0.005141096  -0.01144087   0.49481562   0.50945939  0.061540188  0.066666667    2.0491589          0.1 0.0015385047    64.998177     2.515738         70.1 -0.0050965619 -0.099311645 -0.0040790766  0.072837529 -0.0050965619 -0.099311645 -0.0040790766  0.072837529 
   20000    4.3461372    1.3006654    3.0454717  -0.14080634   0.86720277    1.0029535   0.78275263   -1.2465374            1   0.53483265   0.85149745   0.83852906 -0.085528575 0.0017031725  0.031774849  0.027662629   0.40596871   0.71871617   0.71206069  -0.21287074 0.0030128548  0.027745894  0.028494232   0.46318268   0.47761867  0.061530687  0.066666667    2.0223093          0.1 0.0015382672    65.008213    2.4899142         70.1 -0.0075504779 -0.072824396 0.0044388703  0.087645266 -0.0075504779 -0.072824396 0.0044388703  0.087645266 
   21000    4.3224315    1.3006309    3.0218007  -0.14614131   0.86717974    1.0070139   0.78018476   -1.2465374            1   0.54880771   0.85007569   0.86199801 -0.065650566 -0.0010157488 -0.0019725103  0.015231181    0.4199472   0.71900537   0.73468656  -0.19385034 -0.0027531243 -0.00072812066   0.01420181    0.4773928   0.49136211  0.061502731  0.066666667    2.0062315          0.1 0.0015375683    65.037762    2.4779843         70.1 -0.0033826221 -0.081875113 0.0012633028  0.099342801 -0.0033826221 -0.081875113 0.0012633028  0.099342801 
   22000    4.3278538    1.2934058     3.034448  -0.15056401   0.86236253    1.0045865    0.7738774   -1.2465374            1   0.56131772   0.85762018   0.87340215 -0.047069173 0.0027214864  0.011334585 -0.020057944   0.43317303   0.72660671   0.74517989  -0.17226752 0.0022618815  0.011576148 -0.019600405   0.49048016   0.50401059   0.06152625  0.066666667    2.0030812          0.1 0.0015381562    65.012901    2.4971097         70.1 0.00093353188  -0.06414461 0.0023408177  0.085002301 0.00093353188  -0.06414461 0.0023408177  0.085002301 
   23000    4.2925882    1.2875582      3.00503  -0.13962147   0.85846368   0.99087604   0.77609249   -1.2465374            1   0.56769683   0.86478742   0.87444189 -0.036138804 0.0016370896  -0.01035531 0.0017786692    0.4401315   0.73419525   0.75005934   -0.1638601 0.0015346399 -0.0095106711 0.0038837342   0.49665651   0.51117182  0.061530835  0.066666667    2.0026592          0.1 0.0015382709    65.008056    2.5107077         70.1 -0.0065624446 -0.086695126  -0.01012469  0.095581907 -0.0065624446 -0.086695126  -0.01012469  0.095581907 
   24000    4.2613425     1.268278    2.9930646  -0.14617088   0.84560882   0.98743085   0.75737127   -1.2465374            1   0.53814952   0.84157819   0.84434875 -0.071478386 0.0030091542 0.0010931082 0.0019290967   0.41249438   0.71470567   0.72025732  -0.19747986 0.0027519931 -0.0001271904 0.0011797709   0.46882285   0.48182104  0.061524616  0.066666667    1.9788969          0.1 0.0015381154    65.014627    2.4898479         70.1 -0.012103342  -0.10073223 -0.0014805992  0.087499766 -0.012103342  -0.10073223 -0.0014805992  0.087499766 
   25000    4.3088744    1.2787296    3.0301448  -0.14217478   0.85257734    1.0068426   0.75658635   -1.2465374            1   0.50844677   0.82145466   0.82083903  -0.11695337 0.0018646909 -0.024359441 0.0013108207   0.38175613   0.69248973    0.6959729  -0.24319423 0.00047938005 -0.023398223 -0.00049841949   0.43919196   0.45101095    0.0615399  0.066666667    1.9626677          0.1 0.0015384975    64.998481    2.5027475         70.1 0.0051601772  -0.10739882 0.0042033022   0.11924568 0.0051601772  -0.10739882 0.0042033022   0.11924568 
   26000    4.3315996    1.2999553    3.0316443  -0.14354435   0.86672932    1.0094746   0.77792006   -1.2465374            1    0.5479039   0.84366764   0.85547026 -0.055426202 0.0013391539 -0.030227144 0.0051900259   0.41911031   0.71433082   0.72789009  -0.18488997 0.0018719115  -0.02970346 0.0050529411   0.47669629   0.49031793  0.061511657  0.066666667    1.9599096          0.1 0.0015377914    65.028324    2.4968093         70.1 0.0039523274 -0.085124785 -0.0041940167  0.083769926 0.0039523274 -0.085124785 -0.0041940167  0.083769926 
   27000    4.2845241    1.2672686    3.0172555  -0.15144057   0.84493587   0.99675177   0.75046998   -1.2465374            1   0.56286301   0.85819302   0.87636837  -0.04597237 0.0013245536 -0.016534709 -0.024190392   0.43730787   0.73268891   0.75148979   -0.1722551 0.00096876427 -0.015983256 -0.023980531   0.49416806   0.50600281  0.061513264  0.066666667    1.9492613          0.1 0.0015378316    65.026626     2.488469         70.1  0.001697611 -0.080802521  0.008468008   0.12062916  0.001697611 -0.080802521  0.008468008   0.12062916 
   28000    4.3032827    1.2791874    3.0240953  -0.14080775   0.85288253    0.9979913   0.76259794   -1.2465374            1   0.57415628    0.8653721   0.87713867 -0.020041919 -0.0029806624 -0.019534062 -0.012262505   0.44742029   0.73986836   0.75007939  -0.14768687 -0.0023092795 -0.018315734 -0.012693182    0.5043512   0.51722538  0.061516378  0.066666667    1.9395594          0.1 0.0015379095    65.023334    2.4903222         70.1 0.0030098954  -0.11362274 0.0064811413  0.093408579 0.0030098954  -0.11362274 0.0064811413  0.093408579 
   29000    4.2703744    1.2686211    3.0017534  -0.14725018   0.84583758   0.98987991   0.75621638   -1.2465374            1   0.59938387   0.89437908   0.89221827  0.011554246 -0.00086947991 -0.024998768 -0.0043685717   0.47369474   0.76722604   0.76771476   -0.1138566 -0.0028140834 -0.023779395 -0.0044648517   0.53016292   0.54291568  0.061551883  0.066666667    1.9383382          0.1 0.0015387971    64.985827    2.5057001         70.1 -0.0069815568 -0.085131646 0.0010126419  0.084610285 -0.0069815568 -0.085131646 0.0010126419  0.084610285 
   30000    4.2901925    1.2714497    3.0187428  -0.14379035   0.84772355    1.0140234   0.74423172   -1.2465374            1   0.53935365   0.84422577   0.84680105 -0.072965863 0.0036061154  0.023400851 -0.025598575   0.41338427   0.71774231   0.72155878  -0.19914828 0.0028374412  0.021208732 -0.021172874   0.47122973   0.48150819  0.061528307  0.066666667    1.9377495          0.1 0.0015382077    65.010727    2.5006936         70.1 -0.002905907  -0.07721878 -0.00060735242  0.097148513 -0.002905907  -0.07721878 -0.00060735242  0.097148513 
Loop time of 45.1439 on 1 procs for 30000 steps with 9376 atoms

Performance: 287082.070 tau/day, 664.542 timesteps/s
97.8% CPU use with 1 MPI tasks x 1 OpenMP threads

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 2.2002     | 2.2002     | 2.2002     |   0.0 |  4.87
Bond    | 9.8349     | 9.8349     | 9.8349     |   0.0 | 21.79
Neigh   | 10.235     | 10.235     | 10.235     |   0.0 | 22.67
Comm    | 0.77604    | 0.77604    | 0.77604    |   0.0 |  1.72
Output  | 0.065196   | 0.065196   | 0.065196   |   0.0 |  0.14
Modify  | 21.189     | 21.189     | 21.189     |   0.0 | 46.94
Other   |            | 0.8442     |            |       |  1.87

Nlocal:    9376 ave 9376 max 9376 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Nghost:    1671 ave 1671 max 1671 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Neighs:    5117 ave 5117 max 5117 min
Histogram: 1 0 0 0 0 0 0 0 0 0

Total # of neighbors = 5117
Ave neighs/atom = 0.545755
Ave special neighs/atom = 6.92833
Neighbor list builds = 3911
Dangerous builds = 0
#undump      eq
undump       eqxyz

#--- Unfix Equil ---#

unfix abeads_edz
unfix bbeads_edz
unfix tbeads_edz
unfix mope

unfix freeze_tout


###############
# Compression #
###############


#--- Bring the brushes closer together fit the sim box ---#

variable       bbzmax  equal bound(bbeads,zmax)
variable       tbzmin  equal bound(tbeads,zmin)
displace_atoms  alltop move 0.0 0.0 -$(v_tbzmin - v_bbzmax) units box
displace_atoms  alltop move 0.0 0.0 -35.686773140298299722 units box
variable z_f equal bound(all,zmin)
variable z_c equal bound(all,zmax)
change_box all z final ${z_f} $(v_z_c + 0.1) units box
change_box all z final 0 $(v_z_c + 0.1) units box
change_box all z final 0 34.413226859701701699 units box
  orthogonal box = (0 0 0) to (30 30 34.4132)

print         "D = $D"
D = 29.3239543080712
print         "D = $(v_twzmin - v_bwzmax)"
D = 29.323954308071229491
info variables

#--- Computes ---#

# Number density profiles and mop

compute         cabeads abeads chunk/atom bin/1d z lower ${binres} # Check bound keyword to maybe only bin melt area
compute         cabeads abeads chunk/atom bin/1d z lower 0.001 
fix             abeads_cdz abeads  ave/chunk ${Neveryc} ${Nrepeatc} ${Nfreqc} cabeads density/number file abeads_cdz
fix             abeads_cdz abeads  ave/chunk 100 ${Nrepeatc} ${Nfreqc} cabeads density/number file abeads_cdz
fix             abeads_cdz abeads  ave/chunk 100 70 ${Nfreqc} cabeads density/number file abeads_cdz
fix             abeads_cdz abeads  ave/chunk 100 70 7000 cabeads density/number file abeads_cdz
compute         cbbeads bbeads chunk/atom bin/1d z lower ${binres} # Check bound keyword to maybe only bin melt area
compute         cbbeads bbeads chunk/atom bin/1d z lower 0.001 
fix             bbeads_cdz bbeads  ave/chunk ${Neveryc} ${Nrepeatc} ${Nfreqc} cbbeads density/number file bbeads_cdz
fix             bbeads_cdz bbeads  ave/chunk 100 ${Nrepeatc} ${Nfreqc} cbbeads density/number file bbeads_cdz
fix             bbeads_cdz bbeads  ave/chunk 100 70 ${Nfreqc} cbbeads density/number file bbeads_cdz
fix             bbeads_cdz bbeads  ave/chunk 100 70 7000 cbbeads density/number file bbeads_cdz
compute         ctbeads tbeads chunk/atom bin/1d z lower ${binres} # Check bound keyword to maybe only bin melt area
compute         ctbeads tbeads chunk/atom bin/1d z lower 0.001 
fix             tbeads_cdz tbeads  ave/chunk ${Neveryc} ${Nrepeatc} ${Nfreqc} ctbeads density/number file tbeads_cdz
fix             tbeads_cdz tbeads  ave/chunk 100 ${Nrepeatc} ${Nfreqc} ctbeads density/number file tbeads_cdz
fix             tbeads_cdz tbeads  ave/chunk 100 70 ${Nfreqc} ctbeads density/number file tbeads_cdz
fix             tbeads_cdz tbeads  ave/chunk 100 70 7000 ctbeads density/number file tbeads_cdz

compute         mopc all stress/mop/profile z lower $(zhi * v_binres) total
compute         mopc all stress/mop/profile z lower 0.034413226859701703808 total
fix mopc        all ave/time ${Neveryc} ${Nrepeatc} ${Nfreqc} c_mopc[*] ave running overwrite file mopc.time mode vector
fix mopc        all ave/time 100 ${Nrepeatc} ${Nfreqc} c_mopc[*] ave running overwrite file mopc.time mode vector
fix mopc        all ave/time 100 70 ${Nfreqc} c_mopc[*] ave running overwrite file mopc.time mode vector
fix mopc        all ave/time 100 70 7000 c_mopc[*] ave running overwrite file mopc.time mode vector


#--- Fixes ---#
fix             freeze_tout twout setforce 0.0 0.0 NULL
fix             comp_tout twout aveforce 0.0 0.0 ${Fcatom}
fix             comp_tout twout aveforce 0.0 0.0 -1.24653739612188
fix             rwalls all wall/reflect zlo EDGE zhi EDGE




#--- Dumps ---#
#dump           comp all image ${Ndump_c} stg2.*.jpg type type zoom 2 view 60 120 bond none none
dump            cpxyz all xyz ${Ncomp} cp.xyz
dump            cpxyz all xyz 70000 cp.xyz

#--- Run Compression ---#
timestep    ${Tstep}
timestep    0.005
run         ${Ncomp}
run         70000
WARNING: compute stress/mop/profile does not account for bond potentials (src/USER-MISC/compute_stress_mop_profile.cpp:193)
WARNING: compute stress/mop/profile does not account for bond potentials (src/USER-MISC/compute_stress_mop_profile.cpp:193)
Neighbor list info ...
  update every 1 steps, delay 0 steps, check yes
  max neighbors/atom: 2000, page size: 100000
  master list distance cutoff = 1.42246
  ghost atom cutoff = 1.42246
  binsize = 0.711231, bins = 43 43 49
  10 neighbor lists, perpetual/occasional/extra = 1 9 0
  (1) pair lj/cut, perpetual
      attributes: half, newton on
      pair build: half/bin/newton
      stencil: half/bin/3d/newton
      bin: standard
  (2) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (3) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (4) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (5) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (6) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (7) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (8) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (9) compute stress/mop/profile, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (10) compute stress/mop/profile, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
WARNING: Inconsistent image flags (src/domain.cpp:784)
Per MPI rank memory allocation (min/avg/max) = 11.19 | 11.19 | 11.19 Mbytes
Step TotEng KinEng PotEng E_pair Temp c_melTemp c_wallTemp v_Fcatom v_Pcomp2 Press Pxx Pyy Pzz Pxy Pxz Pyz c_Vir c_Vir[1] c_Vir[2] c_Vir[3] c_Vir[4] c_Vir[5] c_Vir[6] c_melPress c_wallPress v_melDens v_surfcov v_aveRg v_Vwall v_srate v_D v_bwzmax Zhi c_fbwall[1] c_fbwall[3] c_ftwall[1] c_ftwall[3] c_ggbot[1] c_ggbot[3] c_ggtop[1] c_ggtop[3] 
   30000    4.2901925    1.2714497    3.0187428  -0.14379035   0.84772355    1.0140234   0.74423172   -1.2465374            1    1.0986674    1.7196942    1.7249401  -0.14863201 0.0073456839  0.047667708 -0.052144488   0.84206684    1.4620464    1.4698206  -0.40566654 0.0057798888  0.043202346 -0.043129303   0.95989848   0.98083578   0.13640725  0.066666667    1.9377495          0.1 0.0034101813    29.323954    2.5006936    34.413227 -0.002905907  -0.07721878 -0.00060735242  0.097148513 -0.002905907  -0.07721878 -0.00060735242  0.097148513 
   31000    4.2777433     1.293838    2.9839053  -0.14883087   0.86265068    1.0064925   0.77315733   -1.2465374            1     1.338943     1.889009     1.902265   0.22555498 0.00020472694 0.0066019537  0.016375391    1.0778241      1.62548    1.6504298 -0.042437564 -0.0012263515 0.0030876206  0.016628351    1.1947806    1.2219865   0.14134803  0.066666667    1.9335364          0.1 0.0035337007    28.298945    2.4997259    34.413227 0.0042987691  -0.11132716 -0.0010643253    0.1758612 0.0042987691  -0.11132716 -0.0010643253    0.1758612 
   32000    4.3094048    1.3040543    3.0053505  -0.15498258   0.86946229    1.0068089   0.78401795   -1.2465374            1    1.2218443    1.8131211    1.7935928  0.058818886 0.0093544098 -0.038491798 0.0014499878   0.95866351    1.5517451    1.5308102  -0.20656477  0.011893371 -0.031228783 0.00040481805    1.0756568     1.104851    0.1484726  0.066666667    1.9247122          0.1  0.003711815    26.940998    2.5167347    34.413227  0.013785403 -0.097962231  0.012382185    0.1944624  0.013785403 -0.097962231  0.012382185    0.1944624 
   33000    4.2565451    1.2606861     2.995859   -0.1570007   0.84054704   0.97708843   0.75559953   -1.2465374            1    1.2273054    1.8115188    1.8082578  0.062139487 0.0096495784 -0.082822032 -0.0085272334    0.9728771    1.5565626    1.5548787  -0.19281002 0.0061314703 -0.083053042   -0.0027908    1.0864168    1.1137657   0.15315179  0.066666667    1.9242885          0.1 0.0038287948    26.117879     2.489504    34.413227 -0.0054766875 -0.083870404 -0.0037665578   0.17071055 -0.0054766875 -0.083870404 -0.0037665578   0.17071055 
   34000    4.3082907    1.2760102    3.0322804  -0.15484004   0.85076423    0.9908683   0.76359821   -1.2465374            1    1.1905581     1.752257     1.771528  0.047889193 0.0092043265  0.027672353 -0.050590051   0.93303712    1.4961128    1.5171089  -0.21411033 0.0097214047  0.026299266 -0.048324526    1.0481781    1.0754171    0.1575414  0.066666667    1.9158468          0.1 0.0039385351    25.390151    2.4888651    34.413227 -0.00036090839 -0.077856707  0.018702015   0.19291576 -0.00036090839 -0.077856707  0.018702015   0.19291576 
   35000    4.2623778    1.2639462    2.9984316  -0.15947003    0.8427207   0.99887574   0.74555026   -1.2465374            1    1.1688561    1.7441436    1.7454216  0.017002961 -0.0093477196  0.027297896  0.030816263   0.91376983    1.4899146    1.4935095  -0.24211461 -0.0096111614  0.027146753  0.030848435    1.0298413    1.0527846   0.16119614  0.066666667    1.9115716          0.1 0.0040299034     24.81449    2.4801246    34.413227 -0.0025332168   -0.1116958 -0.015629603   0.19668917 -0.0025332168   -0.1116958 -0.015629603   0.19668917 
   36000    4.2965333    1.2868175    3.0097158  -0.15642367   0.85796985    1.0005833   0.76924123   -1.2465374            1    1.3375119    1.8642451    1.9023124   0.24597828 0.0020976241 -0.0027381356 -0.044841298    1.0778099     1.601048    1.6466927 -0.014311042 0.0058799562 -0.0063042566 -0.045623786    1.1940797    1.2212421    0.1648863  0.066666667    1.9158549          0.1 0.0041221574    24.259142    2.4747651    34.413227 -0.0060737139  -0.10145174 -0.0038253878    0.1661505 -0.0060737139  -0.10145174 -0.0038253878    0.1661505 
   37000    4.2970869    1.2705419     3.026545  -0.15021701   0.84711827    1.0026917   0.75031108   -1.2465374            1    1.2799092    1.8453631    1.8279709    0.1663935 -0.0059934799 -0.017990256 -0.039788082    1.0234918    1.5819982    1.5823031 -0.093825962 -0.0082266904 -0.014027346 -0.041264012    1.1400067    1.1633943   0.16848822  0.066666667    1.9044066          0.1 0.0042122056    23.740532    2.5085088    34.413227 -0.0087268025 -0.084381031 0.0030605883    0.1755207 -0.0087268025 -0.084381031 0.0030605883    0.1755207 
   38000    4.2740564    1.2601135     3.013943  -0.15510512   0.84016525   0.99193652   0.74572635   -1.2465374            1    1.2540668    1.8199121    1.8219287   0.12035961 6.0807205e-05  -0.06328873  0.037495242   0.99975407    1.5594094    1.5725161   -0.1326632 -0.0022360092  -0.06971693  0.030840425    1.1150192    1.1388017   0.17120007  0.066666667    1.9099023          0.1 0.0042800018    23.364476    2.4905693    34.413227  -0.00451387 -0.085834671 0.0069219213   0.19966482  -0.00451387 -0.085834671 0.0069219213   0.19966482 
   39000    4.2998869    1.2871981    3.0126888  -0.16333079    0.8582236    1.0085741   0.76467324   -1.2465374            1    1.3046395    1.8459305    1.8675762   0.20041189 0.0042003952 -0.044354341 -0.014043484    1.0448606     1.582627    1.6111401 -0.059185112 0.0072331477 -0.044090453 -0.010361088    1.1620591    1.1874411   0.17417605  0.066666667    1.9065787          0.1 0.0043544013     22.96527    2.4906514    34.413227 0.00067970628 -0.092250278  0.013504658   0.19479533 0.00067970628 -0.092250278  0.013504658   0.19479533 
   40000     4.266526    1.2703587    2.9961673  -0.15370695   0.84699615   0.99335593   0.75593089   -1.2465374            1    1.3066958    1.8609018    1.8748618   0.18432382 -0.0077204896  0.090510492 -0.0056177953    1.0503154    1.6003178    1.6205768  -0.06994833 -0.0092269402  0.092886979 -0.006510594    1.1657455    1.1912658   0.17719445  0.066666667    1.9055441          0.1 0.0044298613     22.57407    2.4933828    34.413227 -0.003064753  -0.10315159 -3.8100673e-05   0.20416904 -0.003064753  -0.10315159 -3.8100673e-05   0.20416904 
   41000    4.2784605    1.2704346    3.0080259  -0.16316986   0.84704671   0.99091573   0.75753371   -1.2465374            1    1.1541956    1.7411148    1.7699477 -0.048475548 -0.009428555  0.068244481 -0.064776729   0.89779994    1.4828881    1.5089036  -0.29839183 -0.011659747  0.066757071 -0.066657996    1.0129464    1.0390492   0.17998745  0.066666667     1.890485          0.1 0.0044996861    22.223772    2.4856954    34.413227 -0.0062889383 -0.084207141 0.0089685681    0.2106296 -0.0062889383 -0.084207141 0.0089685681    0.2106296 
   42000    4.2712239      1.26731    3.0039139  -0.16902512   0.84496347   0.99340268   0.75260196   -1.2465374            1     1.214531     1.797221    1.8013936  0.044978315 0.0035511392 -0.0017093743  0.048003948   0.95876585    1.5356297    1.5455432  -0.20487538 0.0032166913 0.00053155533  0.045290037    1.0742013    1.0990955   0.18321398  0.066666667    1.8752926          0.1 0.0045803495    21.832395    2.5100389    34.413227 0.00097164186 -0.099594865 0.0048712022   0.16400267 0.00097164186 -0.099594865 0.0048712022   0.16400267 
   43000     4.278141    1.2682095    3.0099315  -0.15712914   0.84556316    1.0061531   0.74562934   -1.2465374            1    1.2118948    1.7959759    1.8025341  0.037174485  0.017988686    0.1056204 -0.031191629   0.95594819    1.5418895    1.5463006  -0.22034557  0.011747869    0.1063075 -0.031185138    1.0728653    1.0949777   0.18583923  0.066666667     1.864124          0.1 0.0046459807    21.523981    2.4983662    34.413227 0.00072701558 -0.070315734 -0.00045221265   0.17354452 0.00072701558 -0.070315734 -0.00045221265   0.17354452 
   44000    4.2528211     1.271238    2.9815831  -0.16214953    0.8475824     1.010794   0.74601516   -1.2465374            1    1.1367498    1.7461162    1.7462819 -0.082148606   0.01451445  0.082625328  0.024284535     0.880192    1.4897118    1.4893489  -0.33848468  0.015365559  0.087052318  0.022584255   0.99764837    1.0192935   0.18807809  0.066666667    1.8690521          0.1 0.0047019523    21.267761    2.4843529    34.413227 -0.0019900987 -0.091581557 0.0063344284    0.1634851 -0.0019900987 -0.091581557 0.0063344284    0.1634851 
   45000    4.2710348    1.2707467    3.0002881    -0.158226   0.84725481   0.99495646   0.75535334   -1.2465374            1    1.2561348    1.8265457    1.8302613   0.11159746 0.0032000282  0.053546964 -0.042520794   0.99967616    1.5694584    1.5762145   -0.1466445 -0.0023185764  0.061352027 -0.038034074    1.1152922    1.1405188   0.19131488  0.066666667    1.8567504          0.1 0.0047828721    20.907939     2.491861    34.413227 0.0058669459 -0.071799586 0.0024598549   0.17882868 0.0058669459 -0.071799586 0.0024598549   0.17882868 
   46000    4.3123776    1.2874893    3.0248883  -0.15798231   0.85841775    1.0210878   0.75718988   -1.2465374            1    1.2995668     1.856232    1.8567248   0.18574375 0.0054119772  0.062522619 -0.056977276    1.0397292    1.5996174    1.5936254 -0.074055212 -0.00015425024  0.060170701 -0.056988424    1.1583817    1.1809143   0.19468195  0.066666667    1.8549786          0.1 0.0048670488    20.546332    2.4823698    34.413227 -0.0055792105 -0.093767682 -0.004183467   0.18582325 -0.0055792105 -0.093767682 -0.004183467   0.18582325 
   47000     4.327113    1.2919551    3.0351578  -0.15728361   0.86139529    1.0190777   0.76327621   -1.2465374            1    1.2236947    1.8019625    1.7943264  0.074795328 -0.00044737419   0.18528202  0.015385573   0.96295582    1.5443016    1.5316704  -0.18710456 -0.00059561472   0.18084966  0.016905466    1.0813748    1.1052758   0.19731506  0.066666667    1.8453264          0.1 0.0049328764    20.272148    2.4831833    34.413227 -0.0046237329 -0.091427638 0.0072763013   0.20660281 -0.0046237329 -0.091427638 0.0072763013   0.20660281 
   48000    4.2721847    1.2659982    3.0061865  -0.16991827   0.84408882   0.97840581   0.76052816   -1.2465374            1    1.2233212    1.8201731    1.8136133  0.036177362 0.00032831991   0.12907907 0.0020940372   0.96782089    1.5625353    1.5649634  -0.22403606  0.001384608   0.12778387 0.0029592149    1.0815137    1.1096284   0.19993572  0.066666667    1.8370945          0.1  0.004998393     20.00643    2.5089352    34.413227 0.0024334749 -0.086285639 -0.0013153763   0.18292037 0.0024334749 -0.086285639 -0.0013153763   0.18292037 
   49000    4.2648856    1.2623901    3.0024956  -0.16454649   0.84168314   0.99625556   0.74549882   -1.2465374            1    1.4320749    1.9628483    1.9405555   0.39282084 -0.00073085071  0.062945533   0.05066297    1.1773027    1.7069357    1.6853464   0.13962602 -0.0025221243  0.062797532  0.045171842    1.2930697    1.3163079    0.2024351  0.066666667    1.8392957          0.1 0.0050608775    19.759419    2.4826266    34.413227 0.0052279678  -0.10125072 0.0049275368   0.21209231 0.0052279678  -0.10125072 0.0049275368   0.21209231 
   50000     4.232202      1.27435     2.957852  -0.17113467   0.84965729    1.0179592   0.74491806   -1.2465374            1    1.2368991     1.805276    1.8169592  0.088462004 0.00043983794 -0.012129464  0.019988979   0.97971318    1.5484651    1.5631509   -0.1724764 -0.0017869099  -0.01629707  0.013404869    1.0980022    1.1186101   0.20546865  0.066666667     1.847287          0.1 0.0051367163     19.46769    2.4939875    34.413227 0.0040005542  -0.11516941 -0.00039242471   0.19141368 0.0040005542  -0.11516941 -0.00039242471   0.19141368 
   51000    4.2371293    1.2655839    2.9715453  -0.16460234   0.84381261    1.0026065   0.74499783   -1.2465374            1    1.2500448    1.8166423    1.8334121   0.10007986 -0.0018261093 -0.023132228  0.037329335     0.994628    1.5590734    1.5770815  -0.15227092 0.0003628369 -0.024496215  0.032330028     1.111133    1.1335398   0.20743666  0.066666667    1.8550766          0.1 0.0051859165    19.282995    2.5012102    34.413227 0.0082351987 -0.084838274 -0.0042926888   0.16966872 0.0082351987 -0.084838274 -0.0042926888   0.16966872 
   52000    4.2620331    1.2786858    2.9833473  -0.16144039   0.85254811   0.99119176   0.76629253   -1.2465374            1    1.2033694    1.7776156    1.7929489  0.039543645  0.013830192  0.006312326 -0.031244798   0.94530845    1.5157711    1.5369212  -0.21676689  0.010205423  0.007052311 -0.025663636     1.060487    1.0881908   0.20986736  0.066666667    1.8324599          0.1  0.005246684    19.059658    2.4814655    34.413227 -0.0032249536 -0.075899112 -0.0039545833    0.1913302 -0.0032249536 -0.075899112 -0.0039545833    0.1913302 
   53000     4.236821    1.2666981    2.9701229  -0.16008992   0.84455549    1.0026157   0.74619805   -1.2465374            1    1.3856055    1.9210177     1.926125   0.30967389 -0.011822273   0.04489963 -0.025314384    1.1299639    1.6695977    1.6656985  0.054595561 -0.005203192  0.046964154 -0.022175005    1.2464699    1.2690995   0.21274335  0.066666667    1.8274815          0.1 0.0053185836    18.801998     2.479048    34.413227 -0.0052829375  -0.10582336 0.00094197077   0.19503237 -0.0052829375  -0.10582336 0.00094197077   0.19503237 
   54000    4.2653918    1.2811175    2.9842743  -0.16332152   0.85416944   0.99933773   0.76384797   -1.2465374            1    1.2511034    1.8332827    1.7987496   0.12127803  0.017461546  0.037910343 -0.036333657   0.99255173    1.5773468    1.5443196  -0.14401124  0.010694131  0.037687605 -0.029334645    1.1086769    1.1349783   0.21651832  0.066666667    1.8308913          0.1 0.0054129581    18.474187    2.5021818    34.413227 0.0037565286  -0.10970405 -0.0069178784    0.1877617 0.0037565286  -0.10970405 -0.0069178784    0.1877617 
   55000    4.2745365    1.2763369    2.9981996  -0.16374953   0.85098204    1.0037437   0.75592784   -1.2465374            1    1.2590036    1.8272107    1.8424073   0.10739274 -0.0023657036  0.076069197 -0.034443444    1.0014167    1.5706854    1.5815686    -0.148004 -0.0012963405  0.079963106 -0.034537611    1.1180538    1.1423665   0.21915103  0.066666667    1.8393378          0.1 0.0054787757    18.252253    2.4901436    34.413227 -0.0015662939 -0.098672292 0.00034113739   0.20211095 -0.0015662939 -0.098672292 0.00034113739   0.20211095 
   56000    4.2864964    1.2768606    3.0096358  -0.16272764   0.85133121    1.0011369   0.75811919   -1.2465374            1     1.221005    1.7937105    1.7933971  0.075907487 -0.005021753   0.10552687 -0.031476713   0.96331246    1.5363062    1.5355408  -0.18190954 -0.0041058657   0.10389248 -0.030270478    1.0796467    1.1046708   0.22318297  0.066666667    1.8311533          0.1 0.0055795742    17.922515    2.4957124    34.413227 -0.011554846 -0.090035644 -0.0064065078   0.18994234 -0.011554846 -0.090035644 -0.0064065078   0.18994234 
   57000    4.2490729    1.2863415    2.9627313  -0.17698497   0.85765249    1.0027823    0.7673556   -1.2465374            1    1.2169795    1.7926489    1.8091015  0.049188017 -0.0029278341   0.06035471 0.0019973006   0.95737347    1.5309078    1.5495609  -0.20834832 -0.005192986  0.059199398 -0.0015598355    1.0738989    1.1004541   0.22653198  0.066666667    1.8306811          0.1 0.0056632994    17.657551    2.5117448    34.413227 0.0018409879 -0.095778673 0.0072682068      0.17594 0.0018409879 -0.095778673 0.0072682068      0.17594 
   58000    4.2280591    1.2511137    2.9769453  -0.16672219   0.83416479   0.99585611   0.73354264   -1.2465374            1    1.3138246    1.8663763    1.8669603   0.20813721   0.01910001  0.021112077 -0.041266169    1.0613282    1.6108429    1.6152368 -0.042095061  0.014666817  0.022979452 -0.038805762    1.1770488    1.1981041   0.22908763  0.066666667    1.8464074          0.1 0.0057271907    17.460568    2.4851113    34.413227 0.0085161999  -0.11026679 -0.0083407075   0.19535287 0.0085161999  -0.11026679 -0.0083407075   0.19535287 
   59000    4.2497263    1.2769773     2.972749  -0.17306002     0.851409   0.99999636   0.75895627   -1.2465374            1     1.187106    1.7622477    1.7849472  0.014123186 -0.0032150109 0.0033409224 -0.020990658    0.9293899    1.5101595    1.5267495  -0.24873929 -0.0042810853 0.0062784919  -0.02099327    1.0455916    1.0709044   0.23323724  0.066666667    1.8409393          0.1 0.0058309311     17.14992    2.4940392    34.413227 0.0082279073  -0.10345799 0.0032575849   0.15975927 0.0082279073  -0.10345799 0.0032575849   0.15975927 
   60000    4.2584203    1.2833172     2.975103  -0.16325072   0.85563607    1.0141609   0.75699103   -1.2465374            1    1.3248392    1.8674259    1.8954981   0.21159346 -0.020302697  -0.10059133 -0.076391955    1.0658435    1.6062979    1.6338742 -0.042641524 -0.016147621    -0.101507 -0.074937075    1.1836911    1.2069915   0.23672442  0.066666667    1.8196831          0.1 0.0059181104    16.897285      2.49602    34.413227 -0.0014503154 -0.078733587  -0.01114832   0.17939367 -0.0014503154 -0.078733587  -0.01114832   0.17939367 
   61000      4.21519    1.2455382    2.9696518  -0.16992061   0.83044738   0.97954624   0.73767226   -1.2465374            1    1.0953824    1.7105655    1.7061318  -0.13055012 0.0023520811 -0.053717632 -0.022632326    0.8440112    1.4569096    1.4584022  -0.38327827 0.0043977634 -0.055581875 -0.021184307   0.95783652   0.98155706   0.24021533  0.066666667    1.8272913          0.1 0.0060053833    16.651727    2.4931669    34.413227 -0.004556176 -0.079486768 -0.0052038267   0.19264076 -0.004556176 -0.079486768 -0.0052038267   0.19264076 
   62000    4.2589498    1.2603421    2.9986076  -0.15758589   0.84031771   0.99445982   0.74440132   -1.2465374            1    1.3956361    1.9347044    1.9343072    0.3178968 0.0040996951 -0.035100455 -0.049005559    1.1412773    1.6791931     1.679773  0.064865597 0.0056933732 -0.036442828 -0.048406502    1.2568356    1.2800778   0.24389891  0.066666667    1.8249741          0.1 0.0060974728    16.400237    2.4919797    34.413227 -0.00018602875 -0.091438559 -0.010343647   0.20221282 -0.00018602875 -0.091438559 -0.010343647   0.20221282 
   63000    4.2573588    1.2734074    2.9839514  -0.16260223   0.84902881   0.99937076   0.75548221   -1.2465374            1    1.2379863    1.8117206    1.8184329  0.083805283 -0.0026315843  0.024048208  0.038404307    0.9809906    1.5555375     1.559062  -0.17162767 -0.0056103469  0.027961933   0.03604793    1.0971196    1.1218573   0.24802246  0.066666667    1.8092192          0.1 0.0062005615    16.127572      2.49654    34.413227 0.0024161383  -0.11976132 -0.011746908   0.19550818 0.0024161383  -0.11976132 -0.011746908   0.19550818 
   64000     4.267233    1.2805856    2.9866474  -0.17186373   0.85381482    1.0256947   0.74684652   -1.2465374            1    1.3485957    1.9111709    1.8895387   0.24507735  0.014170832  0.076680483 -0.054921925    1.0901513     1.658654    1.6315699  -0.01977001  0.013935429  0.074316644  -0.05547621    1.2093392    1.2294078   0.25246983  0.066666667    1.7955308          0.1 0.0063117457    15.843477    2.5172932    34.413227 -0.0066762082 -0.093048676 -0.0058075585   0.19264084 -0.0066762082 -0.093048676 -0.0058075585   0.19264084 
   65000    4.2497539     1.256243     2.993511  -0.16475516   0.83758464   0.99114907    0.7420278   -1.2465374            1    1.2689839    1.8308408    1.8246433   0.15146744 0.0015492169  0.066438757 -0.014973151    1.0154523    1.5798412    1.5730115   -0.1064959 -0.00040245223  0.064534577 -0.013996857    1.1306259    1.1538103   0.25707075  0.066666667    1.7689113          0.1 0.0064267687    15.559919     2.491707    34.413227 -0.0026604554 -0.086313372  0.014723257   0.20042966 -0.0026604554 -0.086313372  0.014723257   0.20042966 
   66000    4.2769295    1.2784262    2.9985033  -0.15742573   0.85237506    1.0088065   0.75503406   -1.2465374            1    1.2215856    1.8065194     1.813714  0.044523316 0.0053063308  0.078864057 -0.053172549   0.96357705    1.5489388    1.5598796  -0.21808729 0.0087757245  0.083686682 -0.051167228    1.0808025    1.1043602   0.26103307  0.066666667    1.7620372          0.1 0.0065258268    15.323729    2.5100036    34.413227 -0.003161039  -0.10706758 -0.011954535   0.18619114 -0.003161039  -0.10706758 -0.011954535   0.18619114 
   67000    4.2485696    1.2737945    2.9747751  -0.16404695   0.84928693   0.98751379   0.76329054   -1.2465374            1    1.3436736    1.9002679    1.9164992   0.21425363 0.0041074562   0.15961841 -0.011890494    1.0865998    1.6485509    1.6544536  -0.04320516 0.00016901831    0.1574199 -0.0073681631    1.2013509    1.2289224   0.26454411  0.066666667    1.7405641          0.1 0.0066136027    15.120352    2.4929993    34.413227 -0.0032606481 -0.090120856 0.0028791409   0.21893503 -0.0032606481 -0.090120856 0.0028791409   0.21893503 
   68000    4.2542221    1.2884864    2.9657356  -0.16935378   0.85908256   0.99608615   0.77385021   -1.2465374            1    1.1433282     1.749151    1.7509383 -0.070104727 0.0080252597  0.098389618  0.014077912   0.88328935     1.487687    1.4918457  -0.32966467  0.005418021   0.10103915  0.014466065   0.99903664    1.0275809   0.26814926  0.066666667    1.7376012          0.1 0.0067037315    14.917065     2.482929    34.413227 0.0015910064  -0.10370492 -0.0028945071   0.18451803 0.0015910064  -0.10370492 -0.0027501304   0.18427995 
   69000    4.2503812    1.2663706    2.9840106  -0.16125986   0.84433712   0.98881725   0.75444281   -1.2465374            1    1.1574308    1.7707639    1.7429044 -0.041375811  0.017698889    0.1107759   -0.0310529   0.90185532    1.5088873    1.4931592  -0.29648062  0.015737623   0.10967991 -0.031960584    1.0167579    1.0425282   0.27170649  0.066666667    1.7277062          0.1 0.0067926622    14.721768    2.4960822    34.413227 -0.0055690449 -0.076513214 0.0040136951   0.18134522 -0.0055690449 -0.076513214 0.0040136951   0.18134522 
   70000    4.2567376    1.2899747    2.9667629   -0.1712249   0.86007486      1.01846   0.76151763   -1.2465374            1    1.2627202    1.8360743    1.8199806   0.13210578  0.010349837  0.050139988  0.002516902     1.002381    1.5766356    1.5580303  -0.12752294  0.012995888  0.049145994 0.0013793801    1.1207282     1.144373   0.27740681  0.066666667    1.7288022          0.1 0.0069351704    14.419256    2.4985997    34.413227 -0.0057793843  -0.10851236 0.0039321281   0.18599431 -0.0057793843  -0.10851236 0.0039321281   0.18599431 
   71000    4.2517934    1.2717825    2.9800109  -0.15947889   0.84794542    1.0033282   0.75125718   -1.2465374            1    1.3031287    1.8704932    1.8597413   0.17915168 -0.0019666909  0.070494427 -0.033900254     1.046461    1.6106737    1.6047741 -0.076064724 -0.0022573153  0.065993064 -0.035532434    1.1630498    1.1865399   0.28203944  0.066666667    1.7112865          0.1  0.007050986    14.182414    2.4978006    34.413227  0.010122792 -0.087653159 0.0080537468   0.20865035  0.010122792 -0.087653159 0.0080537468   0.20865035 
   72000    4.2672881    1.2761731     2.991115  -0.16479293    0.8508728   0.98393908   0.76809276   -1.2465374            1    1.3000944    1.8398742    1.8596564   0.20075246  0.011426939  0.066325738  0.033774369    1.0425405    1.5921334    1.5990382 -0.063550092  0.010007079  0.067448902  0.039732719    1.1568763    1.1857586   0.28525586  0.066666667    1.7022303          0.1 0.0071313966    14.022499    2.4776286    34.413227 0.0086673936  -0.10231619  0.024251633   0.18920275 0.0086673936  -0.10231619  0.024251633   0.18920275 
   73000    4.2238552    1.2543296    2.9695255  -0.16989578   0.83630895   0.97657163   0.74904158   -1.2465374            1    1.2713533    1.8368666    1.8319762   0.14521709 0.0096155214 -0.020750406 -0.028177089    1.0182078    1.5854727    1.5818568  -0.11270592   0.01243357  -0.02267427 -0.026344231    1.1316875    1.1578736     0.290467  0.066666667    1.6900045          0.1 0.0072616749    13.770928    2.4980263    34.413227 -0.0049341554 -0.092927714 0.0084961077   0.18060481 -0.0049341554 -0.092927714 0.0084961077   0.18060481 
   74000     4.246145    1.2558187    2.9903263  -0.16384353   0.83730176   0.99351756   0.74009252   -1.2465374            1    1.2224667    1.7965339    1.8168243  0.054041962 -0.0044854371   0.01474253 -0.053367932   0.96902077    1.5414683    1.5666753  -0.20108128 -0.00067973056 0.0096280814 -0.052271263    1.0844696    1.1070179   0.29544387  0.066666667    1.6786818          0.1 0.0073860968    13.538951    2.5169881    34.413227 -0.00038445216 -0.099378835 5.9058567e-05   0.17128763 -0.00038445216 -0.099378835 5.9058567e-05   0.17128763 
   75000    4.2328417    1.2652019    2.9676398  -0.17232691   0.84355791   0.99226681   0.75102808   -1.2465374            1     1.367494    1.9107025    1.9055915    0.2861879  0.012483736  -0.04675561  0.017452473    1.1121543     1.653157    1.6466753  0.036630628  0.012238226 -0.045350074  0.017153131    1.2274578    1.2521905   0.29885474  0.066666667    1.6760213          0.1 0.0074713685    13.384429    2.4970894    34.413227 0.0055432492  -0.11267107  0.013718528    0.2110401 0.0055432492  -0.11267107  0.013718528    0.2110401 
   76000    4.2428473    1.2578864     2.984961  -0.17220475   0.83868035   0.99954941   0.73857142   -1.2465374            1    1.2151369    1.7946944    1.7849113   0.06580508 0.0063440086 -0.012951696 0.0038467849   0.96127365    1.5417566    1.5330836  -0.19101926 0.00071004833 -0.010331032 0.0068034421    1.0774234    1.0989872   0.30444501  0.066666667    1.6595018          0.1 0.0076111252    13.138662    2.4972195    34.413227 0.0082127128 -0.086608614 -0.0010780238   0.15315751 0.0082127128 -0.086608614 -0.0010780238   0.15315751 
   77000    4.2694932    1.2756386    2.9938546  -0.16611937   0.85051641   0.99639567   0.75975123   -1.2465374            1    1.2526453    1.8346166    1.8176736   0.10564575 0.0054880784  0.081603871 0.0020736092   0.99519936    1.5761714    1.5622742  -0.15284752 0.0012931921    0.0857441 0.0064016933    1.1109826    1.1368621   0.30961164  0.066666667     1.629184          0.1  0.007740291    12.919411    2.5008356    34.413227 0.0066269226 -0.091164645 -0.0040649481   0.16623462 0.0066269226 -0.091164645 -0.0040649481   0.16623462 
   78000    4.2069618    1.2331357    2.9738262  -0.16523367   0.82217812   0.99159977   0.71673633   -1.2465374            1    1.3092338    1.8532726    1.8659651   0.20846378 0.0044103197   0.04812193 -0.00047169895    1.0603657    1.6029178    1.6246095 -0.046430331 0.0079578291  0.048156784 0.0025540861    1.1755916    1.1940078   0.31635449  0.066666667     1.612278          0.1 0.0079088622    12.644044    2.5096127    34.413227 -3.2211965e-05 -0.081910825 -0.0050130601   0.18638154 -3.2211965e-05 -0.081910825 -0.0050053542   0.18623992 
   79000    4.2517501    1.2817891     2.969961  -0.16982837   0.85461725    1.0134857   0.75575783   -1.2465374            1    1.2243506    1.8046555    1.7891963  0.079200025     0.011406  0.018994827   0.02824964   0.96566336    1.5496193    1.5326299  -0.18525911   0.01201875  0.015923999  0.021912506    1.0834325    1.1065814   0.32118685  0.066666667    1.5979198          0.1 0.0080296713     12.45381    2.4951943    34.413227 0.0014251679   -0.0953532 0.00068619502   0.17570036 0.0014251679   -0.0953532 0.00068619502   0.17570036 
   80000    4.2297842    1.2651184    2.9646658  -0.17764397   0.84350223    1.0048768    0.7430791   -1.2465374            1    1.3362857    1.8919469    1.8957202   0.22118992 -0.012568227 -0.0078136988  -0.03192846    1.0809629    1.6370377    1.6366795 -0.030828645  -0.01141026 -0.0071037118   -0.0307501    1.1977316    1.2195169   0.32540215  0.066666667    1.5676308          0.1 0.0081350537    12.292482    2.4780542    34.413227 -0.0064547658  -0.10697407 -0.0055131351   0.18844104 -0.0064547658  -0.10697407 -0.0055131351   0.18844104 
   81000    4.2352792    1.2637976    2.9714815  -0.17328179   0.84262162   0.98687627   0.75286753   -1.2465374            1    1.2221256    1.7989587    1.8093213  0.058096783 -0.0039716467 0.0045983634   0.02368219   0.96706934     1.541158    1.5515946   -0.1915446 -0.005651743 0.00038247947   0.02977945    1.0817464    1.1074485   0.32988582  0.066666667    1.5489386          0.1 0.0082471454    12.125408    2.5071458    34.413227 -0.00066646108  -0.11029454 -0.0067455609   0.19285164 -0.00069131453  -0.11025622 -0.0067455609   0.19285164 
   82000    4.2242223    1.2546917    2.9695306  -0.17419719   0.83655037   0.98568898   0.74375154   -1.2465374            1    1.3138668    1.8830697    1.8643483   0.19418251 0.0099764757  0.056672245  0.016021005    1.0606483    1.6293925     1.612244 -0.059691576 0.0087880016  0.054710347  0.018952192    1.1751874    1.1993277   0.33598542  0.066666667    1.5249745          0.1 0.0083996355    11.905278    2.4756662    34.413227 0.0021689217  -0.10211328  0.008038172   0.18703631 0.0021689217  -0.10211328  0.008038172   0.18703631 
   83000    4.2242115     1.263779    2.9604325  -0.17769009   0.84260923    1.0132111   0.73643548   -1.2465374            1     1.252036    1.8067908    1.8429515   0.10636572 -0.0012010929 -0.082897734  0.028982875    0.9969835    1.5482984      1.58404   -0.1413879 -0.0041846043 -0.081491387    0.0218493    1.1147207    1.1342988   0.34019819  0.066666667    1.5086469          0.1 0.0085049547    11.757852    2.4736175    34.413227 0.0034026594  -0.11803929 -0.0027286333   0.21120283 0.0034026594  -0.11803929 -0.0027286333   0.21120283 
   84000    4.2434833    1.2789105    2.9645728  -0.17109163   0.85269796     1.015042   0.75167228   -1.2465374            1    1.2182757    1.8009658    1.7922137  0.061647726 0.00058433471 -0.085605355 -0.0044489186   0.96016945    1.5453411    1.5337274  -0.19856015 -0.00074513687 -0.083952868 -0.00020987925    1.0781194    1.1003258   0.34570323  0.066666667    1.5051895          0.1 0.0086425807    11.570618    2.5157529    34.413227 -0.001527059  -0.10076622 -0.0085651804   0.18917258 -0.001527059  -0.10076622 -0.0085651804   0.18917258 
   85000      4.23091    1.2509862    2.9799237  -0.16848961   0.83407978   0.97174515   0.74843067   -1.2465374            1    1.2576278    1.8257554    1.8371655   0.10996246 0.0020883138 -0.098123483  0.032583023    1.0051571    1.5762738    1.5853919   -0.1461943 -0.001255741  -0.10053903  0.035374942    1.1180759     1.144709   0.35201051  0.066666667    1.4830188          0.1 0.0088002628    11.363297    2.4962969    34.413227 -1.9700326e-05 -0.095188948  -0.00087227   0.19808475 -1.9700326e-05 -0.095188948  -0.00087227   0.19808475 
   86000    4.2562053    1.2686051    2.9876002  -0.17521892   0.84582696   0.99133506   0.75529228   -1.2465374            1    1.2871471    1.8511249    1.8562328   0.15408367 0.00062119419  -0.12965445  0.032264959    1.0311206    1.5971248    1.6023999  -0.10616278 0.00094389487  -0.13191533  0.026994729    1.1463158    1.1719519   0.35618481  0.066666667    1.4719404          0.1 0.0089046202    11.230125    2.4914827    34.413227 0.0046766748  -0.10139115 0.0062708092   0.19858787 0.0046766748  -0.10139115 0.0062708092   0.19858787 
   87000    4.2442381    1.2825053    2.9617327  -0.18346927   0.85509476    1.0116699   0.75766467   -1.2465374            1    1.3880001    1.9142048    1.9383628   0.31143272 0.0058013947 -0.019316151 0.00018495411    1.1291683    1.6541171    1.6813402  0.052047609 0.0037636256 -0.018477247 0.0029542862    1.2467265    1.2704419   0.36147596  0.066666667    1.4327476          0.1  0.009036899    11.065743    2.4703798    34.413227 0.0017743868  -0.10041978 -0.0032945046   0.20199435 0.0017743868  -0.10041978 -0.0032945046   0.20199435 
   88000    4.2264359    1.2572715    2.9691645  -0.16395063   0.83827038    0.9925337    0.7422781   -1.2465374            1    1.2986542    1.8773066    1.8503421   0.16831377 0.0044770717  0.012968281  0.015264529     1.044915    1.6194873    1.5933152 -0.078057516 0.0001356251  0.010099735  0.017969808    1.1602495    1.1833197   0.37054457  0.066666667    1.4174535          0.1 0.0092636141    10.794923    2.5092073    34.413227 -0.013640292  -0.12569885 0.0058496483    0.2226804 -0.013640292  -0.12569885 0.0058496483    0.2226804 
   89000    4.2596936    1.2713005    2.9883931  -0.17425913   0.84762405   0.98954288   0.75932652   -1.2465374            1    1.1287903    1.7293712    1.7426042 -0.085604371 -0.0031908712   0.14892654 0.0088079652   0.87221986     1.472354    1.4813565  -0.33705089 -0.0061338102   0.15056215 0.0013752969   0.98720682    1.0138034   0.37512977  0.066666667      1.40702          0.1 0.0093782441    10.662977     2.505355    34.413227 0.00050385254  -0.08053045 -0.0093095747   0.17887625 0.00050385254  -0.08053045 -0.0093095747   0.17887625 
   90000    4.2558609    1.2864346    2.9694263  -0.17720894   0.85771456    1.0118304   0.76181757   -1.2465374            1    1.2256348    1.7973971    1.8174359  0.062071473 0.0074422639  0.046452858  -0.04203253   0.96601005    1.5388128    1.5566903   -0.1974729 0.0061174756  0.051008072 -0.043738521    1.0835869     1.108058   0.38073851  0.066666667    1.3934459          0.1 0.0095184628    10.505898    2.5190256    34.413227 0.0017529471 -0.092601609 -0.007242625   0.16775866 0.0017529471 -0.092601609 -0.007242625   0.16775866 
   91000     4.229782    1.2413885    2.9883935  -0.16749016   0.82768058   0.96976251   0.73927795   -1.2465374            1    1.2043511    1.8014967    1.7803995   0.03115715 0.0042663487  0.082261092  0.020876366   0.95381742    1.5473334    1.5356232  -0.22150438 0.00091329343  0.080863713  0.015706196    1.0665058    1.0916627   0.38893687  0.066666667    1.3877245          0.1 0.0097234218    10.284445    2.5034102    34.413227 -0.009277152  -0.10383742 -0.0075541619   0.20215701 -0.009277152  -0.10383742 -0.0075541619   0.20215701 
   92000    4.2298828     1.282671    2.9472118  -0.18039937   0.85520523    1.0133661   0.75678691   -1.2465374            1    1.2775176    1.8337016    1.8321963   0.16665497   0.01192779 -0.026793929  0.036174455    1.0186524    1.5759413    1.5768247 -0.096808792   0.01149007  -0.02424545  0.033480624    1.1364077    1.1597624   0.39272446  0.066666667     1.363218          0.1 0.0098181116    10.185258     2.491527    34.413227 -0.0033378106  -0.12620515 0.0038639049    0.1796862 -0.0033378106  -0.12620515 0.0038639049    0.1796862 
   93000    4.2531733    1.2704283    2.9827449  -0.17228116   0.84704257    1.0102189   0.74549718   -1.2465374            1    1.3447699    1.8835807    1.8969888   0.25374005 0.0024475094  -0.10130012   0.03689475    1.0883754    1.6246139    1.6453073 -0.0047950418 0.0025549269 -0.098755822  0.036465524     1.205765    1.2273803   0.40035019  0.066666667    1.3466824          0.1  0.010008755    9.9912528    2.4927096    34.413227 -0.014902057   -0.1188929  0.025648707   0.20684051 -0.014902057   -0.1188929  0.025648707   0.20684051 
   94000    4.2531043    1.2798771    2.9732272   -0.1720988   0.85334239   0.99034712   0.76810833   -1.2465374            1    1.3383804    1.8809707    1.8890337   0.24513671  0.003050718 -0.097904243  0.050168012     1.080079    1.6219414     1.629839 -0.011543332 -0.0011257071 -0.094777442  0.046449479    1.1951594       1.2233   0.40510064  0.066666667    1.3311019          0.1  0.010127516    9.8740895    2.5041663    34.413227 -0.0060197732  -0.10011048  0.014422856   0.20374206 -0.0060197732  -0.10011048  0.014422856   0.20374206 
   95000    4.2255448    1.2656524    2.9598924  -0.17792004   0.84385824    1.0074651   0.74204399   -1.2465374            1    1.2441356    1.8062588    1.8303125  0.095835541 -0.0082753278 -0.026782657  0.019567619   0.98870504    1.5564582    1.5733764  -0.16371946 -0.010208953 -0.032190927  0.020247876    1.1057746    1.1270661   0.41055637  0.066666667    1.3209294          0.1  0.010263909    9.7428765    2.4856477    34.413227 -0.0045846917  -0.11075174 -0.00060200617   0.18904399 -0.0045846917  -0.11075174 -0.00060200617   0.18904399 
   96000    4.2420191    1.2809577    2.9610615  -0.17999039   0.85406288     1.024442   0.74802991   -1.2465374            1    1.2066035    1.8040404     1.785797   0.02997311 0.0065184086 -0.043227305 -0.017855408   0.94808404    1.5340216    1.5346058  -0.22437529   0.00718159 -0.044545891 -0.018386053    1.0671263    1.0875612   0.41672879  0.066666667     1.299696          0.1   0.01041822    9.5985688    2.5050685    34.413227 0.0069624742  -0.11020409 0.0031139901   0.19012089 0.0069624742  -0.11020409 0.0031139901   0.19012089 
   97000    4.2647691    1.2807962    2.9839729  -0.17474209   0.85395523    1.0039448   0.76062909   -1.2465374            1     1.322786    1.8691017    1.8901275   0.20912866  0.011210656 -0.011003964 -0.074902322    1.0642991    1.6121839     1.636553 -0.055839654 0.0098931159 -0.0072235751 -0.077291256    1.1809596    1.2061255   0.42311117  0.066666667    1.2880508          0.1  0.010577779    9.4537801    2.5048388    34.413227 -0.005127296  -0.10237965 -0.0051464761   0.19375287 -0.005127296  -0.10237965 -0.0051464761   0.19375287 
   98000    4.2388161    1.2757705    2.9630456  -0.17869944   0.85060439   0.99764852   0.75911327   -1.2465374            1    1.3531549    1.9015909    1.9009743   0.25689945 0.0053229623   0.10014182 0.0026453952    1.0956823    1.6405701    1.6418723 0.0046044583 0.0041271817  0.093330246  0.009026832    1.2116111     1.237226   0.42743484  0.066666667    1.2738094          0.1  0.010685871    9.3581515    2.4859188    34.413227 0.0037689681  -0.10876364 -0.0089092438   0.19000627 0.0037689681  -0.10876364 -0.0089092438   0.19000627 
   99000    4.2365301    1.2651118    2.9714183  -0.17252598   0.84349782    1.0038521   0.74371052   -1.2465374            1    1.2546884    1.8221213    1.8332783   0.10866555  0.003258743   0.13936215 -0.021400668   0.99936692    1.5689888    1.5748609  -0.14574891 -0.00058638048    0.1395284 -0.027856666    1.1160166    1.1380387   0.43617485  0.066666667    1.2590575          0.1  0.010904371    9.1706343    2.5079106    34.413227 -0.00091860063  -0.10102175 -0.0088248073   0.20826903 -0.00091860063  -0.10102175 -0.0088248073   0.20826903 
  100000    4.2668457    1.2743926    2.9924531  -0.17166747    0.8496857    1.0072038   0.75166701   -1.2465374            1    1.3268125    1.8704357    1.8786277   0.23137401 0.0073781369  0.082317653 -0.033211289     1.069618    1.6103129    1.6203642 -0.021823161 0.0034169797   0.08152008 -0.038549528    1.1866572    1.2097733    0.4421998  0.066666667    1.2572208          0.1  0.011054995    9.0456847    2.4759524    34.413227 -0.00099170063  -0.10756807 0.0001000161   0.18443058 -0.00099170063  -0.10756807 0.0001000161   0.18443058 
Loop time of 108.811 on 1 procs for 70000 steps with 9376 atoms

Performance: 277912.682 tau/day, 643.316 timesteps/s
99.2% CPU use with 1 MPI tasks x 1 OpenMP threads

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 7.8819     | 7.8819     | 7.8819     |   0.0 |  7.24
Bond    | 22.621     | 22.621     | 22.621     |   0.0 | 20.79
Neigh   | 26.049     | 26.049     | 26.049     |   0.0 | 23.94
Comm    | 1.7321     | 1.7321     | 1.7321     |   0.0 |  1.59
Output  | 0.15589    | 0.15589    | 0.15589    |   0.0 |  0.14
Modify  | 48.501     | 48.501     | 48.501     |   0.0 | 44.57
Other   |            | 1.87       |            |       |  1.72

Nlocal:    9376 ave 9376 max 9376 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Nghost:    1653 ave 1653 max 1653 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Neighs:    9332 ave 9332 max 9332 min
Histogram: 1 0 0 0 0 0 0 0 0 0

Total # of neighbors = 9332
Ave neighs/atom = 0.995307
Ave special neighs/atom = 6.92833
Neighbor list builds = 9102
Dangerous builds = 0
#undump      comp
undump      cpxyz

unfix abeads_cdz
unfix bbeads_cdz
unfix tbeads_cdz
unfix mopc

###############
# Shearing    #
###############

#--- Keep only thermostat on walls ---#
unfix lang_melt

velocity    twout set $(v_Vwall/2) 0.0 0.0  units box
velocity    twout set 0.050000000000000002776 0.0 0.0  units box
velocity    bwout set -$(v_Vwall/2) 0.0 0.0  units box
velocity    bwout set -0.050000000000000002776 0.0 0.0  units box


#--- Number Density profiles ---#

compute         sabeads abeads chunk/atom bin/1d z lower ${binres} # Check bound keyword to maybe only bin melt area
compute         sabeads abeads chunk/atom bin/1d z lower 0.001 
fix             abeads_sdz abeads  ave/chunk ${Neverys} ${Nrepeats} ${Nfreqs} sabeads density/number file abeads_sdz
fix             abeads_sdz abeads  ave/chunk 100 ${Nrepeats} ${Nfreqs} sabeads density/number file abeads_sdz
fix             abeads_sdz abeads  ave/chunk 100 200 ${Nfreqs} sabeads density/number file abeads_sdz
fix             abeads_sdz abeads  ave/chunk 100 200 20000 sabeads density/number file abeads_sdz
compute         sbbeads bbeads chunk/atom bin/1d z lower ${binres}  # Check bound keyword to maybe only bin melt area
compute         sbbeads bbeads chunk/atom bin/1d z lower 0.001  
fix             bbeads_sdz bbeads  ave/chunk ${Neverys} ${Nrepeats} ${Nfreqs} sbbeads density/number file bbeads_sdz
fix             bbeads_sdz bbeads  ave/chunk 100 ${Nrepeats} ${Nfreqs} sbbeads density/number file bbeads_sdz
fix             bbeads_sdz bbeads  ave/chunk 100 200 ${Nfreqs} sbbeads density/number file bbeads_sdz
fix             bbeads_sdz bbeads  ave/chunk 100 200 20000 sbbeads density/number file bbeads_sdz
compute         stbeads tbeads chunk/atom bin/1d z lower ${binres} # Check bound keyword to maybe only bin melt area
compute         stbeads tbeads chunk/atom bin/1d z lower 0.001 
fix             tbeads_sdz tbeads  ave/chunk ${Neverys} ${Nrepeats} ${Nfreqs} stbeads density/number file tbeads_sdz
fix             tbeads_sdz tbeads  ave/chunk 100 ${Nrepeats} ${Nfreqs} stbeads density/number file tbeads_sdz
fix             tbeads_sdz tbeads  ave/chunk 100 200 ${Nfreqs} stbeads density/number file tbeads_sdz
fix             tbeads_sdz tbeads  ave/chunk 100 200 20000 stbeads density/number file tbeads_sdz

compute         mops all stress/mop/profile z lower $(zhi * v_binres) total
compute         mops all stress/mop/profile z lower 0.034413226859701703808 total
fix mops        all ave/time ${Neverys} ${Nrepeats} ${Nfreqs} c_mops[*] ave running overwrite file mops.time mode vector
fix mops        all ave/time 100 ${Nrepeats} ${Nfreqs} c_mops[*] ave running overwrite file mops.time mode vector
fix mops        all ave/time 100 200 ${Nfreqs} c_mops[*] ave running overwrite file mops.time mode vector
fix mops        all ave/time 100 200 20000 c_mops[*] ave running overwrite file mops.time mode vector


#--- Temperature and Velocity profiles ---#
compute        eall all chunk/atom bin/1d z lower ${binres} units reduced
compute        eall all chunk/atom bin/1d z lower 0.001 units reduced
#compute        biasT all temp/profile 1 1 1 xyz 100 100 100
fix            temp_prof   all ave/chunk ${Neverys} ${Nrepeats} ${Nfreqs} eall temp file temp_sz
fix            temp_prof   all ave/chunk 100 ${Nrepeats} ${Nfreqs} eall temp file temp_sz
fix            temp_prof   all ave/chunk 100 200 ${Nfreqs} eall temp file temp_sz
fix            temp_prof   all ave/chunk 100 200 20000 eall temp file temp_sz
#fix            temp_bias   all ave/chunk ${Neverys} ${Nrepeats} ${Nfreqs} eall temp bias biasT file tempb_sz
fix            vel_prof_x_s all ave/chunk ${Neverys} ${Nrepeats} ${Nfreqs} eall vx vy file velp_sz
fix            vel_prof_x_s all ave/chunk 100 ${Nrepeats} ${Nfreqs} eall vx vy file velp_sz
fix            vel_prof_x_s all ave/chunk 100 200 ${Nfreqs} eall vx vy file velp_sz
fix            vel_prof_x_s all ave/chunk 100 200 20000 eall vx vy file velp_sz


#--- Dumps ---#
#dump           shear all image ${Ndump_s} stg3.*.jpg type type zoom 2 view 60 120 bond none none
dump            shxyz all xyz ${Nshear} sh.xyz
dump            shxyz all xyz 200000 sh.xyz

#--- Run Shear ---#
timestep    ${Tstep}
timestep    0.005
run         ${Nshear}
run         200000
WARNING: compute stress/mop/profile does not account for bond potentials (src/USER-MISC/compute_stress_mop_profile.cpp:193)
WARNING: compute stress/mop/profile does not account for bond potentials (src/USER-MISC/compute_stress_mop_profile.cpp:193)
WARNING: compute stress/mop/profile does not account for bond potentials (src/USER-MISC/compute_stress_mop_profile.cpp:193)
Neighbor list info ...
  update every 1 steps, delay 0 steps, check yes
  max neighbors/atom: 2000, page size: 100000
  master list distance cutoff = 1.42246
  ghost atom cutoff = 1.42246
  binsize = 0.711231, bins = 43 43 49
  11 neighbor lists, perpetual/occasional/extra = 1 10 0
  (1) pair lj/cut, perpetual
      attributes: half, newton on
      pair build: half/bin/newton
      stencil: half/bin/3d/newton
      bin: standard
  (2) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (3) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (4) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (5) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (6) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (7) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (8) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (9) compute stress/mop/profile, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (10) compute stress/mop/profile, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (11) compute stress/mop/profile, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
WARNING: Inconsistent image flags (src/domain.cpp:784)
Per MPI rank memory allocation (min/avg/max) = 12.61 | 12.61 | 12.61 Mbytes
Step TotEng KinEng PotEng E_pair Temp c_melTemp c_wallTemp v_Fcatom v_Pcomp2 Press Pxx Pyy Pzz Pxy Pxz Pyz c_Vir c_Vir[1] c_Vir[2] c_Vir[3] c_Vir[4] c_Vir[5] c_Vir[6] c_melPress c_wallPress v_melDens v_surfcov v_aveRg v_Vwall v_srate v_D v_bwzmax Zhi c_fbwall[1] c_fbwall[3] c_ftwall[1] c_ftwall[3] c_ggbot[1] c_ggbot[3] c_ggtop[1] c_ggtop[3] 
  100000    4.2672254    1.2747723    2.9924531  -0.17166747   0.84993888    1.0072038   0.75207802   -1.2465374            1    1.3268891    1.8706688    1.8786277    0.2313708 0.0073781369  0.082317653 -0.033211289     1.069618    1.6103129    1.6203642 -0.021823161 0.0034169797   0.08152008 -0.038549528    1.1866572    1.2098499    0.4421998  0.066666667    1.2572208          0.1  0.011054995    9.0456847    2.4759524    34.413227 -0.00099170063  -0.10756807 0.0001000161   0.18443058 -0.00099170063  -0.10756807 0.0001000161   0.18443058 
  101000    4.3608666    1.3758958    2.9849708  -0.17640259   0.91736169    1.0688856   0.82309032   -1.2465374            1    1.3372073    1.8541491    1.8902234   0.26724951     -0.00117 -0.058229057  0.028388673    1.0595277      1.59741    1.6257382 -0.044565073 -0.0040735833 -0.060388679   0.02252619    1.1837345    1.2130006   0.49643279  0.066666667    1.1763902          0.1   0.01241082    8.0574855    2.5045638    34.413227 -1.8912439e-06  -0.15616011 0.0084137327   0.16474876 -1.8912439e-06  -0.15616011 0.0084137327   0.16474876 
  102000    4.4708059    1.5209676    2.9498383  -0.23624518    1.0140866    1.3151465   0.82664062   -1.2465374            1    1.6752273    2.1323075    2.1617155   0.73165897 -0.0099389853 -0.095149364  0.022966931    1.3682697    1.8429827    1.8765249   0.38530151 -0.0096812434 -0.088795235  0.023191525    1.5210925    1.5224045    0.7638581  0.066666667    1.1055063          0.1  0.019096452    5.2365747    2.4895364    34.413227  0.012698273  -0.28364726 0.00057043098   0.30104873  0.012698273  -0.28364726 0.00057043098   0.30104873 
  103000    4.4492042     1.444425    3.0047792   -0.2064626   0.96305271    1.1978291   0.81690603   -1.2465374            1    1.4248914    1.9632558    1.9503755   0.36104304 0.00018514704 -0.053702183 -0.032059307    1.1333815    1.6832229    1.6754342  0.041487299 0.0014901248 -0.062214833  -0.03013414    1.2725717    1.2857012   0.72668965  0.066666667    1.1133825          0.1  0.018167241    5.5044131    2.4851391    34.413227 -0.00083790519  -0.21579784  0.012071831   0.18705618 -0.00083790519  -0.21579784  0.012071831   0.18705618 
  104000    4.3426326     1.338288    3.0043446  -0.16886211    0.8922872    1.0968709   0.76494446   -1.2465374            1    1.2476391    1.8227876    1.8244607  0.095668808  0.015932403 -0.077210585 -0.0036622826   0.97754935    1.5530218    1.5565127  -0.17688642  0.012721136  -0.08239514 -0.0045874824     1.105008    1.1201804   0.54643744  0.066666667    1.2045619          0.1  0.013660936    7.3201427    2.5148071    34.413227 -0.012195336  -0.14908672 -0.010089138   0.16176582 -0.012195336  -0.14908672 -0.010089138   0.16176582 
  105000    4.3464319    1.3179467    3.0284851  -0.17377746   0.87872487    1.0682402   0.76077042   -1.2465374            1    1.3251053    1.8642026    1.8655029   0.24561053  0.016021715 -0.071498708  0.027178156    1.0591208    1.5988091     1.602775 -0.024221553  0.014666071 -0.065967989  0.028226031    1.1832526    1.2009736     0.540633  0.066666667    1.2166568          0.1  0.013515825    7.3987345     2.508056    34.413227 -0.0060159467  -0.16967515 0.0067128401   0.15632892 -0.0060159467  -0.16967515 0.0067128401   0.15632892 
  106000    4.4083763    1.4128833     2.995493  -0.19490315   0.94202264    1.1820791   0.79258177   -1.2465374            1    1.4603467    1.9887466    2.0041325   0.38816091  0.025133838  0.071909824  0.011439039    1.1752024    1.7113665    1.7294087  0.084832004  0.024175135  0.073868827 0.0062425641    1.3125624    1.3229866   0.68200634  0.066666667    1.1843742          0.1  0.017050158    5.8650481    2.4842754    34.413227 -0.0028666117  -0.18920568 0.0066481493   0.19592146 -0.0028666117  -0.18920568 0.0066481493   0.19592146 
  107000     4.372037     1.412227      2.95981  -0.22380049   0.94158509     1.229771   0.76214967   -1.2465374            1    1.5301833    2.0600515     2.049528    0.4809702 -0.0024138839 -0.012442529  0.027291183    1.2451714    1.7711621    1.7708328   0.19351926 0.0015830548 -0.012687953  0.027743526    1.3880733    1.3872813   0.77517529  0.066666667    1.1830112          0.1  0.019379382    5.1601232    2.4950415    34.413227 0.0046796003  -0.21546903 -0.0022783216   0.31872649 0.0046796003  -0.21546903 -0.0022783216   0.31872649 
  108000    4.3115215     1.331225    2.9802965  -0.17318272     0.887578    1.0912516   0.76080162   -1.2465374            1    1.3132453    1.8833985    1.8891582   0.16717935 -0.0054502477  0.064864557 -0.018716351    1.0445811     1.620895     1.624579  -0.11173075 -0.0027765055  0.061475131 -0.022211654    1.1713868    1.1864396   0.61998836  0.066666667    1.2304148          0.1  0.015499709    6.4517341     2.477493    34.413227 0.0068306363  -0.15146185  0.023709973   0.18629183 0.0068306363  -0.15146185  0.023709973   0.18629183 
  109000    4.3165377    1.3365246    2.9800131  -0.18209588   0.89111144    1.0854322   0.77016435   -1.2465374            1    1.3822465    1.9234545    1.9358373   0.28744766  0.015805826  0.071832575  0.038227468    1.1125127    1.6551918    1.6597277  0.022618463   0.01776735  0.074410669  0.039593432    1.2386422     1.256117   0.58989091  0.066666667    1.2683981          0.1  0.014747273    6.7809148    2.4935718    34.413227 -0.005391231  -0.15126018 -0.0038851338   0.17381058 -0.005391231  -0.15126018 -0.0038851338   0.17381058 
  110000    4.3599272    1.3757405    2.9841867  -0.18815619   0.91725819    1.1371407   0.78038551   -1.2465374            1    1.3947006    1.9401946    1.9578002    0.2861071 -0.0042971936  0.096556475  0.054943958    1.1170524    1.6622712    1.6861964   0.00268955 -0.004500241   0.09874293  0.057049123    1.2491905    1.2625625   0.67272939  0.066666667    1.2490178          0.1  0.016818235    5.9459273    2.4979943    34.413227 0.0021107421  -0.19613928 0.0072434073   0.19867306 0.0021115431  -0.19609628 0.0072434073   0.19867306 
  111000     4.342502    1.3968231    2.9456789  -0.21679483   0.93131471    1.2121342    0.7564683   -1.2465374            1    1.4358148    1.9814053    1.9953517   0.33068729 -0.0021806747 -0.034747794 -0.018682068    1.1539117    1.6959786    1.7189764  0.046780104 -0.004357827 -0.037147762 -0.021971689    1.2947642    1.2949622   0.74729608  0.066666667    1.2534923          0.1  0.018682402    5.3526308    2.4863306    34.413227 0.0049968039  -0.26499394 0.0059008288   0.19900253 0.0049968039  -0.26499394 0.0059071209   0.19853276 
  112000    4.3207992    1.3435524    2.9772468  -0.18365846   0.89579712    1.0994392    0.7690418   -1.2465374            1    1.2919323    1.8608396    1.8758834   0.13907407  0.014838167 -0.046714301  0.007488577    1.0207802    1.5955886    1.6046744  -0.13792234  0.010848613 -0.049837257  0.012659389    1.1485373    1.1641752   0.66207041  0.066666667    1.3015371          0.1   0.01655176    6.0416535     2.487606    34.413227 -0.003024938  -0.16655623 4.3205486e-05   0.20491011 -0.003024938  -0.16655623 4.3205486e-05   0.20491011 
  113000    4.3034032    1.3316455    2.9717576  -0.19005618   0.88785839    1.0794915   0.76858573   -1.2465374            1    1.3969528    1.9425514    1.9431287   0.30517834 0.0096909357  0.026189949  0.015615298    1.1282037    1.6709826    1.6708039  0.042824464 0.0070843345  0.027543165  0.014853999    1.2536428    1.2715136   0.62200997  0.066666667    1.3211132          0.1  0.015550249    6.4307651    2.4959716    34.413227 -0.019230144  -0.16794172 0.0028899082   0.12500605 -0.019230144  -0.16794172 0.0028899082   0.12500605 
  114000    4.2922632    1.3524223    2.9398409   -0.1900909   0.90171104    1.1126592   0.77040357   -1.2465374            1    1.3392988    1.9014182    1.9012728   0.21520533 -0.022360628 0.0060742728 -0.013537266    1.0663566    1.6303142    1.6285255 -0.059770067 -0.018353577  0.010664598 -0.010607789    1.1956499    1.2100055   0.66607343  0.066666667    1.3627303          0.1  0.016651836    6.0053439    2.4922144    34.413227 -0.0075748955  -0.19327205 0.0077012865   0.19126345 -0.0075748955  -0.19327205 0.0077012865   0.19126345 
  115000    4.2952851    1.3402343    2.9550508  -0.21306795   0.89358485    1.1258514   0.74899024   -1.2465374            1    1.3550092    1.9154644    1.9193849   0.23017821 -0.020924413  0.066119546 -0.036811187    1.0845267    1.6474139    1.6508258 -0.044659624 -0.020867743  0.067018547 -0.034280625     1.215353    1.2241829   0.73452619  0.066666667    1.3654575          0.1  0.018363155    5.4456874    2.5153884    34.413227 0.0078812926  -0.26136602 -0.0010763967   0.23868112 0.0078812926  -0.26136602 -0.0010721695   0.23867455 
  116000    4.2869228    1.3194419    2.9674809    -0.208028   0.87972176    1.0746448   0.75839737   -1.2465374            1    1.4004214    1.9408816    1.9520965   0.30828618 -0.0026848169  -0.15891688  0.021579371    1.1341352    1.6724259    1.6878385  0.042141221 -0.0036581485   -0.1633392  0.021030901    1.2590112    1.2755455   0.70030157  0.066666667    1.3627868          0.1  0.017507539     5.711825     2.494815    34.413227 0.0017602399  -0.19173028  0.012199014   0.20318584 0.0017602399  -0.19173028  0.012199014   0.20318584 
  117000    4.2753299     1.331694    2.9436359  -0.20532848    0.8878907    1.0892419   0.76256169   -1.2465374            1     1.366882     1.909203    1.9061241   0.28531903 0.0071221759  -0.12752634   0.03914647    1.0981231    1.6459654    1.6375653  0.010838709  0.013237518   -0.1250556  0.048367301    1.2246953    1.2403099   0.65782173  0.066666667    1.3962278          0.1  0.016445543    6.0806748    2.4947103    34.413227 -0.0050867331  -0.18007844    0.0159616   0.18958986 -0.0050867331  -0.18007844    0.0159616   0.18958986 
  118000     4.263556    1.3203542    2.9432018  -0.20662319      0.88033    1.0827941   0.75430612   -1.2465374            1    1.3761287    1.9280985    1.9218522   0.27843522  0.010069725  -0.11232744 -0.025927314    1.1096583    1.6578541    1.6522252  0.018895636  0.014463558  -0.11805793 -0.028975043    1.2354813    1.2503057   0.67685439  0.066666667    1.3959629          0.1   0.01692136    5.9096906     2.491317    34.413227 -0.014862535  -0.19273248  0.017097362   0.20131589 -0.014862535  -0.19273248  0.017097362   0.20131589 
  119000    4.2807636    1.3271153    2.9536483  -0.22016817    0.8848379    1.1018841   0.74972716   -1.2465374            1    1.4423247     1.974928     1.994927   0.35711903 -0.005185759 -0.026900416  0.012737049    1.1744898    1.7015556    1.7311119  0.090801985 -0.0054591644 -0.025857403  0.018492503    1.3025311    1.3142835   0.71860122  0.066666667    1.4206225          0.1  0.017965031    5.5663696     2.498178    34.413227 6.6103552e-05  -0.20291601 -0.0069862828    0.2025059 6.6103552e-05  -0.20291601 -0.0069862828    0.2025059 
  120000    4.2826209    1.3307406    2.9518803   -0.2093606   0.88725501    1.0851458   0.76408241   -1.2465374            1    1.3531309    1.8871056    1.9259119   0.24637514 0.0092568514  -0.06180616 -0.031604453    1.0845644    1.6181827    1.6572151 -0.021704706 0.0012086211 -0.060928567 -0.034502949    1.2106606    1.2270347   0.69583147  0.066666667    1.4483214          0.1  0.017395787    5.7485184    2.4873285    34.413227 -0.0092638456  -0.19635974 -0.0029425973    0.1788061 -0.0092638456  -0.19635974 -0.0029425973    0.1788061 
  121000    4.2592217    1.3105259    2.9486959  -0.20424562   0.87377711     1.067702   0.75307372   -1.2465374            1    1.5538404    2.0684424    2.0466092   0.54646955 0.0026025142   0.05297497 0.0017822684    1.2893536     1.801173    1.7888595   0.27802818 -0.00056854614  0.049991314 0.0071194339    1.4134228    1.4297712   0.66753881  0.066666667    1.4747062          0.1   0.01668847     5.992161    2.4837336    34.413227 -0.00052386519  -0.14416164  0.010354192   0.15562638 -0.00052386519  -0.14416164  0.010354192   0.15562638 
  122000    4.2426363    1.3038104    2.9388259  -0.19962156   0.86929968    1.0713926   0.74350519   -1.2465374            1    1.3233304    1.8994956    1.8967178    0.1737778 -0.0016378586  0.025598386 -0.045464385    1.0601989    1.6357136    1.6343194 -0.089436356 -0.0023122512  0.025341617 -0.041308383    1.1846969    1.1988323   0.68868311  0.066666667    1.4712622          0.1  0.017217078    5.8081866    2.4925787    34.413227  0.010417686  -0.17589844 0.0045658536   0.18370483  0.010417686  -0.17589844 0.0045658536   0.18370483 
  123000    4.2439973    1.3163605    2.9276369  -0.21309843   0.87766725    1.0979476   0.74053975   -1.2465374            1    1.4006224    1.9657053    1.9616956   0.27446636 -0.0016803511  -0.10386722  0.065627504    1.1349581    1.6938432    1.6995995  0.011431618 -0.0012671634  -0.09760811  0.068251945    1.2625419    1.2730386   0.71336806  0.066666667    1.4685425          0.1  0.017834201    5.6072037    2.5071579    34.413227  0.010249783  -0.20321304 0.0079473938    0.1821418  0.010249783  -0.20321304 0.0079473938    0.1821418 
  124000    4.2488977    1.3116042    2.9372935  -0.19978986   0.87449609    1.0643001   0.75636098   -1.2465374            1    1.4663408     2.011494    1.9984453   0.38908313 -0.0099019141 -0.082586416  0.012640463    1.2016364    1.7435531    1.7336732    0.1276828 -0.010842587  -0.08265001 0.0072906816    1.3253103    1.3426669    0.6937191  0.066666667    1.5112774          0.1  0.017342978    5.7660226    2.5018229    34.413227 -0.0058127924   -0.2043848 0.0079266444   0.19996784 -0.0058127924   -0.2043848 0.0079266444   0.19996784 
  125000    4.2217753    1.2887831    2.9329923  -0.20479306   0.85928037    1.0439552   0.74433918   -1.2465374            1    1.3999434    1.9184068    1.9550416   0.32638182 -0.0045316892  0.063014425  0.049405408    1.1398447    1.6573505    1.6964953  0.065688176 -0.0053726433  0.064838985  0.051204124    1.2611544    1.2786336   0.68481507  0.066666667    1.5193633          0.1  0.017120377    5.8409929    2.4965124    34.413227 -0.012452673  -0.20053626  0.010562672   0.19507465 -0.012452673  -0.20053626  0.010562672   0.19507465 
  126000    4.2302119    1.3091174    2.9210945   -0.2180686   0.87283802     1.078007   0.74512716   -1.2465374            1    1.4251258    1.9578284    1.9588925    0.3586565 -0.022721062   0.01607944 -0.035358991    1.1609232    1.6906347    1.6968642  0.095270783 -0.026152084  0.015597019 -0.033783789    1.2861899    1.2998591   0.69510872  0.066666667    1.5189175          0.1  0.017377718    5.7544955    2.4872523    34.413227  0.004584619  -0.20953281 -0.005329164   0.22202989  0.004584619  -0.20953281 -0.005329164   0.22202989 
  127000    4.2240868    1.3063047    2.9177821  -0.21541655    0.8709627    1.0708572   0.74653855   -1.2465374            1    1.4613102    1.9652859    2.0114217   0.40722313 0.0091251856     0.017848  0.041715506    1.1976753    1.7087568    1.7456883   0.13858085 0.0070844171  0.017983638  0.047872087    1.3221112    1.3368744   0.70099653  0.066666667    1.5294094          0.1  0.017524913    5.7061624    2.4829575    34.413227 0.0093016658  -0.17944198 0.0015321757   0.18037528 0.0093016658  -0.17944198 0.0015321757   0.18037528 
  128000    4.2457073    1.3062356    2.9394717   -0.2019515   0.87091661    1.0640013   0.75073635   -1.2465374            1    1.3363525    1.8848847    1.9073241   0.21684867 0.0010325116 -0.030287862   0.07087679    1.0727315    1.6236623    1.6457671 -0.051234829 0.0031971064 -0.031037649  0.069559194    1.1963707    1.2127133   0.69030914  0.066666667    1.5461525          0.1  0.017257729    5.7945053    2.4853062    34.413227  0.011015103  -0.20636702 -0.0005438186   0.17472676  0.011015103  -0.20636702 -0.0005438186   0.17472676 
  129000    4.2220119    1.3120396    2.9099723  -0.21656513   0.87478637    1.0614075   0.75863492   -1.2465374            1    1.3757617    1.9225853    1.9343282   0.27037153 -0.011681558 -0.0093845645 -0.0016583322    1.1109694    1.6566265    1.6699158 0.0063658211 -0.016107409 -0.0077341333 -0.002489506    1.2343071    1.2524239   0.69268855  0.066666667    1.5577059          0.1  0.017317214     5.774601    2.4952573    34.413227 -0.0014435912  -0.17371479 -0.011204445   0.18918957 -0.0014435912  -0.17371479 -0.011204445   0.18918957 
  130000    4.2479697    1.3190548    2.9289149  -0.21020697   0.87946367    1.0713462   0.76003413   -1.2465374            1    1.4583286    1.9830987    1.9881826   0.40370455 0.0071910274 -0.068377844 -0.051294938    1.1921205    1.7252173    1.7160145   0.13512971 0.0056460038 -0.068261739 -0.049809666    1.3166132     1.333836   0.69534595  0.066666667    1.6002551          0.1  0.017383649    5.7525323    2.4912911    34.413227  0.015971565   -0.1930434    0.0204335   0.19326196  0.015971565   -0.1930434    0.0204335   0.19326196 
  131000    4.2196098    1.3049109    2.9146988  -0.21429587   0.87003342    1.0654517   0.74839874   -1.2465374            1    1.3071353    1.8779394    1.8832192   0.16024732  -0.01762004 -0.040793448 0.00063803326    1.0437817    1.6158066    1.6188279  -0.10328952 -0.014501426  -0.04341778 -0.0018610138    1.1675894    1.1833276   0.70130803  0.066666667     1.586833          0.1  0.017532701    5.7036279     2.493033    34.413227 0.0025288796  -0.19676419 0.0056261543   0.17308196 0.0025288796  -0.19676419 0.0056261543   0.17308196 
  132000    4.2423597    1.3010505    2.9413092   -0.2117616   0.86745949    1.0484205   0.75483418   -1.2465374            1    1.4985799    2.0057165    2.0255636   0.46445952 9.9508496e-05 -0.048923073  0.016652495    1.2360054    1.7447552    1.7593044   0.20395644 -0.0019596672 -0.049637268  0.014178442     1.357834    1.3767512   0.71112306  0.066666667    1.6164595          0.1  0.017778076    5.6249055    2.5119202    34.413227 -0.0096569011  -0.20500702 0.0036518517   0.16793141 -0.0096569011  -0.20500702 0.0036518517   0.16793141 
  133000    4.2013627    1.2862298    2.9151329    -0.212948   0.85757797    1.0342605   0.74761728   -1.2465374            1    1.4117056    1.9485757    1.9460344   0.34050675 -0.010076603  -0.10012517  0.052647676    1.1521222    1.6914992     1.684594  0.080273283 -0.011248366  -0.10257584  0.053606631    1.2723054    1.2915224   0.69575034  0.066666667    1.6439378          0.1  0.017393758    5.7491887    2.4711456    34.413227 -0.025632854  -0.16732082 0.0065175794   0.21124194 -0.025639787  -0.16722712 0.0065175794   0.21124194 
  134000     4.177605    1.2908264    2.8867785  -0.21351215   0.86064276    1.0418195   0.74788181   -1.2465374            1    1.3130979    1.8976977    1.8879421   0.15365382  0.012024454 -0.090093985 -0.0097784787    1.0525867     1.637643    1.6266795  -0.10656225 0.0074495183 -0.096102395 -0.010488872    1.1736483    1.1920363   0.69543381  0.066666667    1.6518297          0.1  0.017385845    5.7518055    2.4833583    34.413227 -0.010557485  -0.20214254 0.0034543187   0.17896116 -0.010557485  -0.20214254 0.0034543187   0.17896116 
  135000    4.1997512    1.3002692    2.8994821  -0.21288559   0.86693857    1.0490638   0.75358759   -1.2465374            1    1.3855996    1.9291671    1.9415902   0.28604142 0.00020140778 -0.048124545 -0.0014956539    1.1231827    1.6658594    1.6786107  0.025078096 0.00084483696 -0.043975333 0.00024127886    1.2450861    1.2636962   0.70487928  0.066666667    1.6634165          0.1  0.017621982    5.6747306    2.4859632    34.413227 0.0016379903  -0.21498091 -0.0025141879    0.2200197 0.0016379903  -0.21498091 -0.0025141879    0.2200197 
  136000     4.214268    1.3001269    2.9141411  -0.21057068    0.8668437    1.0368791   0.76102718   -1.2465374            1    1.3496483      1.89915    1.8945555   0.25523922 -0.0060908215 -0.046713727   0.05663818    1.0872601    1.6391789    1.6343181 -0.011716544 -0.0035309634 -0.040656789  0.056104091    1.2077476    1.2291607   0.70494274  0.066666667    1.6612681          0.1  0.017623568    5.6742198    2.5041173    34.413227 -0.011803571  -0.22140121   0.00603448   0.22412004 -0.011803571  -0.22140121   0.00603448   0.22412004 
  137000    4.2089976    1.2934551    2.9155425  -0.21168191    0.8623954    1.0343542    0.7553794   -1.2465374            1    1.4830009    1.9752885    2.0166667   0.45704756 0.0019379348  -0.13119303  -0.01229299    1.2219593    1.7169535    1.7561433   0.19278106 -0.0034306946  -0.13084714 -0.013512737    1.3421534    1.3628068   0.68972015  0.066666667    1.6390815          0.1  0.017243004    5.7994536     2.481497    34.413227 -0.004664171   -0.2088003 -0.0036018948   0.15061428 -0.004664171   -0.2088003 -0.0036018948   0.15061428 
  138000    4.1854725      1.29596    2.8895125  -0.22285604   0.86406547    1.0297663   0.76094979   -1.2465374            1    1.3747851     1.905581    1.9313805   0.28739378 -0.0059695241 -0.096352808 -0.029574083    1.1132379    1.6368107     1.671542  0.031361179 -0.0084146463 -0.094556884 -0.029549978    1.2328989    1.2551241   0.69938808  0.066666667    1.6221626          0.1  0.017484702    5.7192853    2.4898773    34.413227 -0.0060560746  -0.18787138  0.010054288   0.16319121 -0.0060560746  -0.18787138  0.010054288   0.16319121 
  139000    4.1987007    1.3031795    2.8955212  -0.20895293   0.86887902    1.0421485    0.7610473   -1.2465374            1    1.2846921    1.8601313    1.8599172   0.13402773  0.010467001 -0.001438283 -0.012323497    1.0216879    1.5982073    1.5973223  -0.13046595  0.012072799 -0.0034711492 -0.012613313    1.1427877    1.1635922   0.70912372  0.066666667    1.6487175          0.1  0.017728093    5.6407646    2.4868243    34.413227 -0.013306815   -0.2263498 0.0013828722   0.19078119 -0.013306815   -0.2263498 0.0013828722   0.19078119 
  140000    4.2125231    1.2910093    2.9215138  -0.21573069   0.86076464     1.034085   0.75289983   -1.2465374            1    1.3635408    1.8898655     1.947099   0.25365786 -0.0021431942 -0.0069582846 -0.061969239    1.1029928    1.6261319    1.6873311 -0.0044847589 -0.0023876928 -0.0034987314 -0.062094033    1.2231556    1.2433779   0.70572968  0.066666667    1.6986285          0.1  0.017643242    5.6678925    2.4897861    34.413227 -0.0069767717   -0.1852244 0.0042061548   0.20259304 -0.0069767717   -0.1852244 0.0042061548   0.20259304 
  141000    4.2172363     1.299286    2.9179503  -0.22347354   0.86628307    1.0454319   0.75478693   -1.2465374            1    1.4273811    1.9358975    1.9694463   0.37679955 0.0051346995 -0.059100147 -0.015135774    1.1651627    1.6734495    1.7122099   0.10982874 0.0020423064 -0.056632641 -0.019052571    1.2866441    1.3058998   0.70362143  0.066666667    1.7285481          0.1  0.017590536    5.6848752    2.5013093    34.413227  0.016108741  -0.18168308  0.012711566   0.22933106  0.016121435  -0.18157633  0.012711566   0.22933106 
  142000     4.217672    1.3085169    2.9091551  -0.22398985   0.87243764    1.0435602   0.76594456   -1.2465374            1    1.3492119    1.8829799    1.9297194   0.23493652   0.01376441 -0.025329987  0.065792652    1.0851306    1.6183588     1.668644 -0.031611082  0.013666559 -0.028918287  0.067480279    1.2063944    1.2279481   0.70484044  0.066666667    1.7347126          0.1  0.017621011    5.6750433    2.4943491    34.413227 -0.0083141045  -0.19648163 0.0071207426   0.19316906 -0.0084505857  -0.19628547 0.0071207426   0.19316906 
  143000    4.1864292    1.2857745    2.9006547   -0.2200852   0.85727443    1.0308225   0.74926712   -1.2465374            1    1.3603803    1.9043137    1.9261362   0.25069087 0.0090390203 -0.098739024 -0.0033682654    1.1008887    1.6410478    1.6668716 -0.0052533272  0.007516626  -0.09982294 -0.0054215563    1.2206724    1.2405965   0.70360639  0.066666667    1.7597992          0.1   0.01759016    5.6849967     2.505216    34.413227 -0.00018303547  -0.15797711 -0.003015065   0.20625734 -0.00018303547  -0.15797711 -0.003015065   0.20625734 
  144000    4.1999008    1.2753305    2.9245703  -0.20523863   0.85031104    1.0323891   0.73698661   -1.2465374            1    1.3224037    1.9137782    1.8757554   0.17767755 -0.0073833716 -0.0053706145 -0.009338647    1.0650199    1.6574176    1.6184122 -0.080770057 -0.0046868551 -0.012660331 -0.0019545362    1.1849857     1.202438   0.70671895  0.066666667    1.7861099          0.1  0.017667974    5.6599586    2.5345232    34.413227 -0.0026840311  -0.20132084 0.0029952139   0.18439072 -0.0026840311  -0.20132084 0.0029952139   0.18439072 
  145000    4.1893673    1.2876102    2.9017571  -0.20985096   0.85849836    1.0242606   0.75534342   -1.2465374            1    1.5110281    2.0106112    2.0276306   0.49484259 0.0070360381  0.067691915  0.010283238    1.2511661    1.7456353    1.7708058   0.23705721  0.011244779  0.071639958  0.011773531    1.3701873    1.3920069    0.7084871  0.066666667    1.7973442          0.1  0.017712177    5.6458332    2.4990096    34.413227 -0.0079976292  -0.20666564  0.016800261   0.20529544 -0.0079976292  -0.20666564  0.016800261   0.20529544 
  146000    4.2193123    1.3053881    2.9139243  -0.22709705   0.87035154    1.0362896    0.7670891   -1.2465374            1    1.3940925    1.9324471     1.952191   0.29763946  -0.01146083  -0.11626878   0.01297102    1.1306426    1.6604866    1.6938325  0.037608662 -0.0095315556   -0.1200869  0.010235637    1.2510616    1.2736735   0.70761609  0.066666667    1.7951268          0.1  0.017690402    5.6527827    2.4932994    34.413227  0.011754061  -0.14903329 0.00063578996   0.19723829  0.011754061  -0.14903329 0.00063578996   0.19723829 
  147000    4.2001993    1.3008604    2.8993389  -0.22133572   0.86733276    1.0260045   0.76859814   -1.2465374            1    1.4694471    1.9968875    2.0071278   0.40432591  -0.01585766  -0.26266513 -0.091846127    1.2069109    1.7384309    1.7424197    0.1398822 -0.011482109  -0.26296013 -0.089701077    1.3261348    1.3502232   0.70980274  0.066666667    1.7957518          0.1  0.017745068    5.6353685    2.4802308    34.413227  0.001406893  -0.16456164 0.0092543627   0.16326866  0.001406893  -0.16456164 0.0092543627   0.16326866 
  148000    4.2116906    1.3042127     2.907478  -0.20889671   0.86956786    1.0383395   0.76453937   -1.2465374            1    1.3656196    1.8690958    1.9508437   0.27691922  0.001398275  -0.19626759  0.025453029    1.1024069    1.6064032    1.6849757  0.015841805 0.0019510277   -0.1949676   0.02801305    1.2230641    1.2449624   0.70734996  0.066666667    1.7851347          0.1  0.017683749    5.6549095    2.4870449    34.413227 0.0050360311  -0.18117124 0.0085893057    0.2106043 0.0050360311  -0.18117124 0.0085893057    0.2106043 
  149000    4.2178208    1.3022818     2.915539  -0.20839629   0.86828049    1.0399607   0.76143914   -1.2465374            1    1.4189202    1.9495447    1.9663885   0.34082742 -0.0035356417  -0.10107673  0.054242957    1.1560972    1.6870893    1.7049001  0.076302185 -0.0063529075   -0.1038991  0.053595427    1.2769428    1.2980746   0.70342527  0.066666667    1.7855728          0.1  0.017585632    5.6864605    2.4859766    34.413227 0.0089513349  -0.18564463 0.0019038281   0.17858848 0.0089513349  -0.18564463 0.0019038281   0.17858848 
  150000    4.2073796    1.3003439    2.9070358  -0.21931418   0.86698839    1.0361678    0.7617053   -1.2465374            1    1.2561542    1.8080151    1.8500607   0.11038688  0.010749707  0.093030166  0.031914478   0.99372233     1.552606    1.5844627  -0.15590165 0.0049275606  0.089429724  0.028435556    1.1141272    1.1357494   0.70267082  0.066666667    1.7591029          0.1   0.01756677     5.692566    2.5067775    34.413227 -0.0041829043   -0.1589644 0.0046951339   0.19394908 -0.0041829043   -0.1589644 0.0046951339   0.19394908 
  151000    4.1971439    1.2945169     2.902627   -0.2097306   0.86310332    1.0601549   0.74044953   -1.2465374            1    1.4362543    1.9673954    1.9623843   0.37898329 0.0039737988 0.0023889921 -0.0069406359    1.1749984    1.7028258    1.7037547   0.11841473 0.0060800266 0.0043910732 -0.010163974    1.2981906    1.3130621    0.7008893  0.066666667    1.7754822          0.1  0.017522232    5.7070354    2.4775363    34.413227 0.0017626757  -0.18693745  0.018764737   0.24046474 0.0017626757  -0.18693745  0.018764737   0.24046474 
  152000    4.2039404    1.3163006    2.8876398  -0.21474758   0.87762733    1.0676332   0.75936696   -1.2465374            1    1.3680398    1.9330728     1.927912   0.24313469 0.0055817146 0.0015562321 7.0224695e-05    1.1023876    1.6644702    1.6616113 -0.018918833 0.0036542624 0.0054751822  0.004565432    1.2264488    1.2439786   0.70584746  0.066666667    1.7748914          0.1  0.017646186    5.6669468     2.491836    34.413227 -0.0029126069  -0.16901347 -0.0032676646   0.21303235 -0.0029126069  -0.16901347 -0.0032676646   0.21303235 
  153000    4.2402902    1.3240413    2.9162489  -0.22254339   0.88278838    1.0417805   0.78385677   -1.2465374            1    1.5002104    2.0082259    2.0159187   0.47648658 0.0029413841 -0.028712299 -0.0062840729    1.2329959    1.7392518    1.7515691   0.20816691 0.0035783527 -0.026874528 -0.0068283681     1.354053    1.3791533   0.70464518  0.066666667    1.7773911          0.1   0.01761613    5.6766158    2.4900391    34.413227 -0.0065799369  -0.16864746 0.0076207879   0.20740391 -0.0065799369  -0.16864746 0.0076207879   0.20740391 
  154000    4.1927123    1.3032377    2.8894746  -0.22345118   0.86891779    1.0471942   0.75796581   -1.2465374            1    1.4470524    1.9702309    1.9755934   0.39533288 -0.0011004171 -0.065258327 -0.0030921147    1.1840365    1.7068949    1.7094815   0.13573293 -0.0036253859 -0.068180841 -0.0022392452    1.3057226    1.3253662   0.70177137  0.066666667    1.7690088          0.1  0.017544284    5.6998621    2.5056855    34.413227 -0.0092221686  -0.15793026  0.017922669     0.187341 -0.0092221686  -0.15793026  0.017922669     0.187341 
  155000    4.1857001    1.2916609    2.8940393  -0.21388694   0.86119909    1.0431013   0.74798613   -1.2465374            1    1.3526039    1.8860094    1.9313439   0.24045847 9.4515933e-05  -0.21049776  0.037850742    1.0919244    1.6226566     1.669739 -0.016622378 -0.0029654679  -0.20794686  0.037547772    1.2131349    1.2313934   0.70063761  0.066666667    1.7702794          0.1   0.01751594    5.7090854    2.4910232    34.413227 -0.017498246  -0.17210658  0.015358067   0.21846499 -0.017498246  -0.17210658  0.015358067   0.21846499 
  156000    4.1607601     1.281062     2.879698  -0.21942181   0.85413244    1.0220385    0.7496407   -1.2465374            1    1.4059542    1.9352447    1.9531541   0.32946378 0.0011136524  -0.15692074 -0.013339082    1.1474137    1.6759681    1.6973914  0.068881496 0.0010453486  -0.15438625   -0.0115403    1.2661767    1.2871912   0.70764387  0.066666667    1.7383704          0.1  0.017691097    5.6525608    2.4811716    34.413227  0.001225919  -0.18707508 -0.0042007165   0.21882159  0.001225919  -0.18707508 -0.0042007165   0.21882159 
  157000    4.1479858    1.2786646    2.8693212  -0.21419544   0.85253402    1.0271372   0.74386831   -1.2465374            1    1.3583012    1.9102542    1.9105586   0.25409082   0.01763286  -0.11543715 -0.0081042976    1.1002445    1.6522679    1.6520785 -0.0036128052   0.01196452  -0.11394314 -0.0074126734       1.2196    1.2389457   0.70590282  0.066666667     1.763797          0.1   0.01764757    5.6665024    2.4736017    34.413227 -0.00068628252  -0.19776085 0.0014347973   0.21852832 -0.00068628252  -0.19776085  0.001437111   0.21847097 
  158000     4.180197    1.2773088    2.9028882  -0.20958606   0.85163003    1.0294673   0.74094868   -1.2465374            1    1.2911122    1.8405324    1.8808014   0.15200293   0.00720314  -0.07745597  0.012798416    1.0333292    1.5831143    1.6257574  -0.10888411 0.0070713731 -0.074766013  0.012598679    1.1529555     1.171486   0.70627039  0.066666667    1.7502009          0.1   0.01765676    5.6635533    2.4972124    34.413227 0.0021586305  -0.16887858 0.00066264877   0.21868527 0.0021586305  -0.16887858 0.00066264877   0.21868527 
  159000    4.1628078    1.2693887    2.8934191  -0.22577566   0.84634939    1.0285282    0.7329615   -1.2465374            1    1.2842488    1.8365755     1.880261   0.13591005 -0.002669716   0.10990198 -0.034597825    1.0280642    1.5835295    1.6193021    -0.118639 0.0032989102   0.10615336 -0.029192613    1.1475813    1.1647317   0.70754418  0.066666667    1.7722225          0.1  0.017688604    5.6533573    2.4878061    34.413227 0.00042153041  -0.19000849 -0.0060551393   0.15429811 0.00042153041  -0.19000849 -0.0060551393   0.15429811 
  160000    4.1725796    1.2806006     2.891979  -0.20851085   0.85382481    1.0436135   0.73569567   -1.2465374            1     1.334489     1.881214    1.9085617   0.21369111 -0.018163692  -0.02257126 -0.054043145    1.0760416    1.6259106     1.647447  -0.04523291 -0.017938663 -0.017425953 -0.055434054    1.1973116    1.2132189   0.71307872  0.066666667    1.7773943          0.1  0.017826968    5.6094789    2.4839935    34.413227  0.010116303  -0.18970114 -8.7209705e-05   0.21042563  0.010116303  -0.18970114 -8.7209705e-05   0.21042563 
  161000    4.1762503    1.2841239    2.8921264  -0.21269051    0.8561739    1.0414756   0.74084151   -1.2465374            1    1.5429979    2.0474732    2.0533043   0.52821607 0.0075206805  0.020698128  0.038220495    1.2838394    1.7866371    1.7918813   0.27299989 0.0045960302  0.019990719  0.033949731    1.4048611    1.4219762   0.70204711  0.066666667    1.7939595          0.1  0.017551178    5.6976234     2.472587    34.413227 0.0013543814  -0.20669989 -0.0045712911   0.18742616 0.0013543814  -0.20669989 -0.0045712911   0.18742616 
  162000    4.1854033    1.2971825    2.8882208  -0.20321368   0.86488056    1.0326641   0.76046702   -1.2465374            1    1.4206178    1.9421138    1.9907699   0.32896953 0.00044529805  -0.03253006 -0.0096657691    1.1588239    1.6833223    1.7292848  0.063864473  0.002573543 -0.030322262 -0.0082712724    1.2788216      1.30062   0.70039353  0.066666667    1.7857262          0.1  0.017509838    5.7110751    2.4872084    34.413227 -0.0056858936  -0.24770572 0.0015789454   0.15808908 -0.0056858936  -0.24770572 0.0015789454   0.15808908 
  163000    4.1644197    1.2798252    2.8845945  -0.21775953   0.85330778    1.0380639   0.73831491   -1.2465374            1    1.4462717    1.9645475    1.9806599   0.39360757 -0.024898461 -0.048854221  0.072390487    1.1879808    1.7073869    1.7279249   0.12863055 -0.024605016 -0.045356179   0.07013414     1.308606    1.3256465   0.70948621  0.066666667    1.7783925          0.1  0.017737155    5.6378826    2.4856353    34.413227 -0.0054176303  -0.18032872 -0.001612117   0.19779253 -0.0054176303  -0.18032872 -0.001612117   0.19779253 
  164000     4.175348    1.2890145    2.8863334  -0.21835571   0.85943468    1.0323663   0.75181192   -1.2465374            1    1.4178525    1.9440076    1.9936002   0.31594955 -0.00091078731 0.0080030287  0.029536399     1.157707    1.6820059    1.7327461  0.058368931 -0.002972473 0.0094746241  0.022082478    1.2776701    1.2978893   0.71648146  0.066666667     1.749631          0.1  0.017912036    5.5828381    2.4969996    34.413227 -0.016325848   -0.1788356 -0.0038963791   0.18794734 -0.016325848   -0.1788356 -0.0038963791   0.18794734 
  165000    4.2004871    1.2983553    2.9021318  -0.22454026   0.86566255    1.0294061   0.76376687   -1.2465374            1    1.2975294    1.8421506    1.8877189   0.16271872 0.0064302757 -0.083258174  0.018788086    1.0354988    1.5760847     1.629976 -0.099564326 0.0084598933 -0.086141672  0.024734604    1.1551179    1.1779102   0.70981997  0.066666667     1.743138          0.1  0.017745499    5.6352317     2.514234    34.413227 -0.012620592  -0.21025754 0.0044970622   0.20736382 -0.012620592  -0.21025754 0.0044970622   0.20736382 
  166000    4.1645367    1.2676584    2.8968783  -0.22217303   0.84519575    1.0115311   0.74168135   -1.2465374            1    1.3907384    1.9088579    1.9408452   0.32251196 0.0025009292  -0.17019476 -0.0056136639    1.1349029    1.6535924    1.6878345  0.063281907 0.0066601095  -0.16940174 -0.011806332     1.252445    1.2731963   0.70659067  0.066666667    1.7697199          0.1  0.017664767    5.6609862    2.5010868    34.413227 0.0001522822  -0.21263492  0.014062019   0.17938655 0.0001522822  -0.21263492  0.014062019   0.17938655 
  167000    4.1600464     1.274352    2.8856944  -0.22300091   0.84965864    1.0242625   0.74099205   -1.2465374            1    1.5246064     2.037962    2.0493688   0.48648831 -0.0080138353 -0.091650141  0.043110831      1.26742    1.7810185    1.7894404   0.23180132 -0.0078279851 -0.089285915   0.04286507    1.3864415    1.4055849   0.70801519  0.066666667    1.7571303          0.1   0.01770038    5.6495963    2.5121135    34.413227 -0.0009781358  -0.20843142  0.002605349   0.18101948 -0.0009781358  -0.20843142  0.002605349   0.18101948 
  168000    4.1860128    1.2810453    2.9049674  -0.21083899   0.85412131    1.0353964   0.74129795   -1.2465374            1      1.30347    1.8549939    1.8720155   0.18340057 -0.0096996459 -0.0034789558 0.00049987013    1.0449329    1.5948227    1.6154447 -0.075468737 -0.0080038244 -0.0025850375 0.00052316346    1.1652481    1.1831548   0.70559709  0.066666667    1.7617887          0.1  0.017639927    5.6689576    2.4754217    34.413227 -0.0051201622  -0.18863395 -0.0052896197    0.1777534 -0.0051201622  -0.18863395 -0.0052896197    0.1777534 
  169000    4.1923384     1.279245    2.9130934  -0.21156426   0.85292098    1.0206151   0.74856112   -1.2465374            1    1.4743365    1.9979587     2.015761   0.40928998 0.0077741847 0.0072014531  0.032348622    1.2161627    1.7427103    1.7522406   0.15353731 0.0056173392  0.006227875  0.031458207    1.3347604    1.3557389    0.7045531  0.066666667    1.7510176          0.1  0.017613828    5.6773577    2.4854323    34.413227  0.011426761  -0.15723704 0.0080950274   0.20868935  0.011426761  -0.15723704 0.0080950274   0.20868935 
  170000    4.1890427    1.2862702    2.9027725  -0.21020652   0.85760492    1.0286031   0.75118676   -1.2465374            1    1.4117302    1.9512217    1.9399945   0.34397422 -0.0063496793   0.05754924   0.03045991    1.1521386    1.6884537    1.6806999  0.087262118 -0.0040588887  0.056948298  0.026078761    1.2716644    1.2922043   0.69909536  0.066666667    1.7580735          0.1  0.017477384    5.7216801    2.4729039    34.413227 -0.0057486219  -0.18588843 0.0035162242   0.21428596 -0.0057486219  -0.18588843 0.0035162242   0.21428596 
  171000     4.195704    1.3105985    2.8851055  -0.22040887   0.87382556    1.0427698   0.76869023   -1.2465374            1    1.3467088    1.8693171    1.9142786   0.25653077 0.00074553082  0.097593648 -0.040614745    1.0822073    1.6074344    1.6470465 -0.0078589306 -0.0017643012  0.099369386 -0.037876792    1.2033794    1.2255368    0.7073124  0.066666667     1.793043          0.1   0.01768281    5.6552098    2.5130359    34.413227 0.0019355903  -0.18112061 -0.00016866167   0.18020464 0.0019355903  -0.18112061 -0.00016866167   0.18020464 
  172000    4.1848425    1.2933206    2.8915219  -0.22551938   0.86230572    1.0297067   0.75813017   -1.2465374            1    1.4000224    1.9100418    1.9607127   0.32931263 0.00028917853 -0.0027493911  0.062476917    1.1390079    1.6444922    1.7049643  0.067567085 0.00074293043 -0.001712277  0.058741216     1.258662    1.2803683   0.70639159  0.066666667    1.7848543          0.1   0.01765979    5.6625816    2.4874509    34.413227 0.0055884529  -0.16264081 -0.0073510375   0.20225126 0.0055884529  -0.16264081 -0.0073510375   0.20225126 
  173000    4.1626919    1.2783657    2.8843262  -0.22304657   0.85233468    1.0147461    0.7512669   -1.2465374            1     1.344115    1.8951148    1.9212263   0.21600402 -0.013421914  0.065749976 -0.00014593528    1.0861187    1.6328451    1.6656188 -0.040107799 -0.011487422  0.062941852 -0.005261011    1.2040343    1.2261994   0.70425265  0.066666667    1.7938665          0.1  0.017606316    5.6797798     2.484461    34.413227  -0.01076867  -0.16871645 -0.0072870078   0.17533868  -0.01076867  -0.16871645 -0.0072870078   0.17533868 
  174000    4.1623058    1.2849574    2.8773485  -0.21286328   0.85672963    1.0363594    0.7449321   -1.2465374            1    1.3531368     1.915982    1.9061293   0.23729923  0.022085648  0.086640561 0.0068800553    1.0938102    1.6549138    1.6492963  -0.02277954  0.023242491  0.087942485 0.0065994334    1.2142373    1.2327097   0.70944146  0.066666667    1.8131517          0.1  0.017736036    5.6382383    2.5119904    34.413227 -0.0059788316  -0.18312589 0.0084108556   0.19336231 -0.0059788316  -0.18312589 0.0084127457   0.19331063 
  175000    4.1979832    1.2851119    2.9128713   -0.2099971   0.85683265    1.0211898   0.75455308   -1.2465374            1    1.3764677    1.9191272    1.9474206   0.26285521  0.017270198 -0.033785452 -0.0040417552    1.1171099    1.6601338    1.6837924 0.0074033486  0.016433935 -0.036008177 -0.00069865497    1.2357742    1.2578033   0.70367501  0.066666667    1.8265416          0.1  0.017591875    5.6844423    2.4797162    34.413227  0.017391437  -0.22394497 -0.0057230381   0.17760613  0.017391437  -0.22394497 -0.0057230381   0.17760613 
  176000    4.1539759    1.2731852    2.8807906  -0.22844768   0.84888069    1.0328477   0.73437883   -1.2465374            1    1.4375151    1.9531789    1.9665867   0.39277969 -0.0032156074 -0.055815326  0.027760668    1.1805643    1.6982345    1.7101541   0.13330418 -0.005573601 -0.054330625  0.029577688    1.3005833     1.317496   0.70859621  0.066666667    1.8259587          0.1  0.017714905    5.6449639    2.5154604    34.413227 -0.0076201748  -0.20823677 0.0059128316    0.1772422 -0.0076201748  -0.20823677 0.0059128316    0.1772422 
  177000    4.1679193    1.2766223    2.8912969  -0.22430706   0.85117233    1.0294298   0.74022905   -1.2465374            1    1.3216997    1.8691932    1.9037811    0.1921248 0.0028040347 -0.034782263  0.028916933    1.0640552    1.6091486    1.6506379 -0.067620832 0.00014437844 -0.039162366  0.028306808    1.1836771    1.2020778   0.71032129  0.066666667    1.8329556          0.1  0.017758032    5.6312545    2.4949915    34.413227 -0.016097928  -0.16656202 0.0099412166   0.17597841 -0.016097928  -0.16656202 0.0099412166   0.17597841 
  178000    4.1835585    1.2826042    2.9009543  -0.21649123    0.8551607    1.0168156   0.75456488   -1.2465374            1    1.3043016    1.8499189    1.8944428   0.16854302 -0.011256096 -0.0042596641  -0.01866224    1.0454498     1.590449    1.6301746 -0.084274238   -0.0092672 2.1304327e-05 -0.018808023    1.1636059    1.1861455   0.70833624  0.066666667    1.8483275          0.1  0.017708406    5.6470357    2.4878879    34.413227 -0.0027006185  -0.18759424 -0.024440601    0.2169547 -0.0027006185  -0.18759424 -0.024440601    0.2169547 
  179000    4.1996218    1.2997716    2.8998502  -0.21889717   0.86660684    1.0253087   0.76785335   -1.2465374            1    1.4790383     1.991107     2.000049   0.44595896 0.0043447543 -0.078270383 -0.021505153    1.2167219    1.7304757    1.7392493   0.18044072 0.0055734055  -0.07982734 -0.018339209    1.3358649    1.3598953   0.69941713  0.066666667    1.8196934          0.1  0.017485428    5.7190478    2.4826742    34.413227 -0.0009621715  -0.19517989 -0.0029351776   0.22005862 -0.0009621715  -0.19517989 -0.0029351776   0.22005862 
  180000     4.186499    1.2921503    2.8943487  -0.21892426   0.86152543    1.0276242   0.75816127   -1.2465374            1    1.3597063    1.8793883    1.9306308   0.26909968 -0.022147866 -0.088730553 -0.037236241     1.098928    1.6186771    1.6745521  0.003554666 -0.022174275  -0.08428931 -0.034838512      1.21834    1.2402942   0.70576338  0.066666667    1.7976465          0.1  0.017644085    5.6676219    2.4877544    34.413227 -0.0079436459  -0.20743437 -0.0048347836   0.15120882 -0.0079436459  -0.20743437 -0.0048347836   0.15120882 
  181000    4.1663975    1.2950891    2.8713084   -0.2115138   0.86348484     1.035234   0.75659968   -1.2465374            1    1.3730412    1.9478195    1.9237384   0.24756557 0.0092738541 -0.029192599  0.020349991    1.1116697     1.685416    1.6645883 -0.014995053 0.0086709001 -0.028323158  0.020351895    1.2319661    1.2527448   0.71552048  0.066666667    1.7871267          0.1  0.017888012    5.5903362    2.4914607    34.413227 -0.0055166403  -0.18922075  0.005793936   0.18422904 -0.0055166403  -0.18922075  0.005793936   0.18422904 
  182000    4.1731768    1.2895875    2.8835893  -0.21291296   0.85981674    1.0352669   0.75062446   -1.2465374            1    1.2903578    1.8593467    1.8654119   0.14631475 0.0013508663  -0.05826329  0.046453365    1.0300967    1.5987083    1.5972876  -0.10570578 0.0045730525 -0.058216425  0.049939752    1.1503969    1.1700576   0.70975147  0.066666667    1.8087965          0.1  0.017743787    5.6357755    2.5018923    34.413227 -0.00051526908  -0.17648307 -0.0044046129   0.21909344 -0.00051526908  -0.17648307 -0.0044046129   0.21909344 
  183000    4.1853252    1.2856854    2.8996398  -0.20954366   0.85721504     1.022671   0.75425076   -1.2465374            1    1.4290076    1.9540587    2.0021707   0.33079351 -0.0031740396  -0.13493748 -0.046367623     1.169534    1.6888298    1.7389383  0.080834001 0.0034016584  -0.13457653 -0.047108206    1.2883705    1.3101711   0.70440197  0.066666667    1.8019152          0.1  0.017610049    5.6785759    2.4885433    34.413227 -0.0016044822  -0.16602049  0.011260483   0.17158734 -0.0016044822  -0.16602049  0.011260483   0.17158734 
  184000    4.1939865    1.2711038    2.9228826   -0.2168564   0.84749295    1.0069309   0.74827744   -1.2465374            1    1.3055297    1.8442663     1.879937   0.19238575 -0.0019554968  -0.28814536 0.0053952147    1.0489989    1.5836527    1.6242771 -0.060933026 -0.0047916793  -0.28699243 0.0022483696    1.1660064    1.1885222   0.71056765  0.066666667    1.7943522          0.1  0.017764191    5.6293021    2.5096062    34.413227 -0.0037085674  -0.17993914  0.014515853   0.20074573 -0.0037085674  -0.17993914  0.014515853   0.20074573 
  185000    4.2157762    1.2935745    2.9222016  -0.21325375   0.86247502    1.0158031   0.76706979   -1.2465374            1    1.3226774    1.8709498    1.8966807   0.20040162 -0.0056528818 -0.032313999  0.023156469    1.0616116    1.6088532     1.634687  -0.05870539 -0.0027370222 -0.026516189  0.025568942    1.1796501    1.2046389     0.713779  0.066666667    1.7639386          0.1  0.017844475    5.6039754    2.4892284    34.413227 -0.016199075  -0.19979479  0.015559304   0.20478809 -0.016199075  -0.19979479  0.015559304   0.20478809 
  186000    4.1899095    1.2846436    2.9052659   -0.2164269   0.85652044    1.0153592   0.75767989   -1.2465374            1    1.3533683    1.8796986    1.9180777   0.26232861  0.013879467 -0.0061654075   0.01336066     1.094105    1.6221109    1.6571097 0.0030943512  0.011603865 -0.0046290371  0.014354595    1.2120918    1.2353814   0.71415873  0.066666667    1.7992592          0.1  0.017853968    5.6009958    2.4901963    34.413227 -0.0004610807  -0.19509092 0.0077566513   0.17530325 -0.0004610807  -0.19509092 0.0077566513   0.17530325 
  187000    4.1761756    1.2950846     2.881091  -0.22652347   0.86348185    1.0086603   0.77315566   -1.2465374            1    1.4664957    1.9734556    2.0017908    0.4242408  0.014874792  0.028183672   0.04998665    1.2051252    1.7129379    1.7404127   0.16202498  0.016365638  0.030110935  0.047846962    1.3223336    1.3492873   0.70858414  0.066666667    1.8153336          0.1  0.017714603      5.64506    2.4886761    34.413227 0.0062373466  -0.16773032  0.027510798   0.20587368 0.0062373466  -0.16773032  0.027510798   0.20587368 
  188000    4.1802836    1.2812881    2.8989955  -0.22475916   0.85428321    1.0208237   0.75064252   -1.2465374            1    1.2625634    1.8060807    1.8660361   0.11557345 0.0048213007 -0.0032786428  0.058199799    1.0039773    1.5513359    1.6026272  -0.14203119 0.0066590708 -0.00087152699  0.062510581    1.1225991    1.1439416   0.71046204  0.066666667    1.8113677          0.1  0.017761551     5.630139    2.4995671    34.413227 -0.0030369158  -0.18905825  -0.00879102   0.16516156 -0.0030369158  -0.18905825  -0.00879102   0.16516156 
  189000    4.1651946    1.2817512    2.8834433  -0.21952818   0.85459198    1.0357997   0.74181067   -1.2465374            1    1.4772893    1.9802416    2.0226611   0.42896529 0.0055896788 -0.026140792 -0.014489635    1.2186097    1.7241909    1.7629389   0.16869942 0.0055444385   -0.0282121  -0.01390944    1.3389718    1.3569272   0.71533287  0.066666667    1.8023004          0.1  0.017883322    5.5918024    2.4926752    34.413227 -0.0090149145  -0.23069814  0.015171146   0.18972806 -0.0090149145  -0.23069814  0.015171146   0.18972806 
  190000     4.191333    1.2982545    2.8930785  -0.22109306   0.86559532    1.0228405   0.76774947   -1.2465374            1    1.3983853    1.9310674    1.9472418   0.31684673  0.025742815   -0.1556231  0.044111823    1.1363751     1.674544    1.6771393  0.057441869  0.024433965  -0.16112641  0.045236334    1.2552313    1.2795291   0.70283896  0.066666667    1.8034248          0.1  0.017570974    5.6912041    2.4863593    34.413227 -0.016409022   -0.1761782 -0.00089272921   0.21856952 -0.016409022   -0.1761782 -0.00089272921   0.21856952 
  191000    4.1934601    1.2823285    2.9111316  -0.21349636   0.85497688    1.0123029   0.75707884   -1.2465374            1    1.4070904    1.9566439    1.9445399   0.32008754 -0.0034208993 -0.044051852  0.042991278    1.1482943    1.6928399    1.6879074  0.064135634 -0.0022754547  -0.04323415  0.041037071     1.265926    1.2894587    0.7111994  0.066666667    1.7948627          0.1  0.017779985    5.6243017    2.4907181    34.413227   0.00358002  -0.17997579 0.0016606896   0.17026764   0.00358002  -0.17997579 0.0016606896   0.17026764 
  192000    4.2043913    1.3028679    2.9015234  -0.21975657   0.86867126    1.0304736   0.76798591   -1.2465374            1    1.3262199    1.8710004    1.9004209   0.20723829   0.02024431 -0.022250668 0.0043333889    1.0632785    1.6091079    1.6434395  -0.06271173   0.01965202 -0.022722054 0.0014243611    1.1830217    1.2064767   0.71532172  0.066666667    1.7818967          0.1  0.017883043    5.5918895    2.4776355    34.413227 -0.0058952672  -0.16645425 0.0067828832   0.20257178 -0.0060653366  -0.16586369 0.0067828832   0.20257178 
  193000    4.1720281     1.279563    2.8924651  -0.21130829   0.85313301    1.0076911   0.75695963   -1.2465374            1    1.4007777    1.9480765    1.9528814   0.30137507  0.010482534 -0.014472075  0.056327806    1.1425397    1.6932017    1.6928224  0.041594958   0.01192679 -0.014370482  0.051446827    1.2596355    1.2836819   0.71167186  0.066666667    1.7761647          0.1  0.017791796    5.6205679    2.4955759    34.413227  0.010222803  -0.25387705 0.00076878381   0.18180118  0.010222803  -0.25387705 0.00076878381   0.18180118 
  194000    4.1613893    1.2698849    2.8915044  -0.21354437   0.84668026    1.0103999   0.74479624   -1.2465374            1    1.4203969    1.9487547     1.973884   0.33855196 -0.010128935  -0.11162958  0.025156586    1.1641121    1.6897237    1.7224839  0.080128743 -0.0057497047  -0.11223844  0.027890531    1.2815227    1.3029863    0.7094056  0.066666667    1.7658652          0.1   0.01773514    5.6385233    2.5051916    34.413227 -0.0025430592  -0.21404217 -0.0055938797   0.17828683 -0.0025430592  -0.21404217 -0.0055902313   0.17828111 
  195000    4.1689977    1.2893118    2.8796859  -0.22158336   0.85963287    1.0247687   0.75686848   -1.2465374            1    1.4412577    1.9668367    1.9813721    0.3755644 -0.0023155055  0.037164052  0.095869269    1.1810523    1.7044881    1.7219575   0.11671119 -0.0053763025  0.039689487  0.094737666    1.3001325    1.3221774   0.71004068  0.066666667    1.7852924          0.1  0.017751017      5.63348    2.4845414    34.413227 -0.0012189046  -0.23032777  0.010308345   0.19125711 -0.0012189046  -0.23032777  0.010308345   0.19125711 
  196000    4.1684614    1.2870413    2.8814201  -0.21976909   0.85811906    1.0365313   0.74708054   -1.2465374            1    1.4003761    1.9421531    1.9556216   0.30335355 -0.0086966456   0.05158367 -0.00024062732    1.1406289    1.6783044    1.6978515  0.045730709 -0.0029390728  0.056244348 0.0028784976     1.261076     1.279929   0.71751182  0.066666667    1.7810523          0.1  0.017937796    5.5748211    2.4984064    34.413227 -0.010224028  -0.14375497 0.0085985423   0.21416318 -0.010224028  -0.14375497 0.0085985423   0.21416318 
  197000    4.1779176    1.2861192    2.8917984  -0.21506143   0.85750427    1.0343006   0.74747265   -1.2465374            1    1.3674062    1.9077716    1.9105125   0.28393466  -0.01131315 0.0080602374 -0.020107871    1.1078451    1.6463366     1.657577  0.019621689 -0.0052012453 0.0026452674 -0.020098145     1.228033    1.2472183   0.71233379  0.066666667    1.7580553          0.1  0.017808345     5.615345    2.5012004    34.413227 0.0031600957  -0.19987754  0.010376927   0.17570994 0.0031600957  -0.19987754  0.010376927   0.17570994 
  198000    4.1542261    1.2789425    2.8752836  -0.22066381   0.85271925    1.0270875   0.74420002   -1.2465374            1    1.3837724    1.9230935    1.9244914   0.30373218 0.0067936138 -0.035800102 -0.014145317    1.1256596    1.6607493    1.6673388  0.048890792   0.00424622  -0.03653701 -0.012013196    1.2450093    1.2644226    0.7061901  0.066666667     1.768754          0.1  0.017654752    5.6641972    2.4803178    34.413227 0.0018576201  -0.20414804  0.010876943   0.20966379 0.0018576201  -0.20414804  0.011338979   0.20886315 
  199000    4.1563907    1.2705998    2.8857909  -0.21448408   0.84715687    1.0238428   0.73719227   -1.2465374            1    1.3440102    1.8860094    1.9040667   0.24195446  0.012827592  0.052321332 -0.052219031    1.0875812     1.630297    1.6450315 -0.012584957  0.016844368  0.055451731 -0.051390573    1.2065538    1.2250375   0.70796485  0.066666667    1.7843624          0.1  0.017699121     5.649998    2.4937397    34.413227 -0.0099076168  -0.18632627   0.01398495    0.1879788 -0.0099076168  -0.18632627   0.01398495    0.1879788 
  200000    4.1893917    1.2793594    2.9100323  -0.22247125   0.85299721    1.0062585   0.75763198   -1.2465374            1    1.3858313    1.9416883    1.9337552   0.28205045 0.0041615218  0.057539854 0.0052656684    1.1276344    1.6710057    1.6834923   0.02840532 0.0041530304  0.060066395 0.0047681595    1.2445638     1.268902   0.71220359  0.066666667    1.7670074          0.1   0.01780509    5.6163716    2.4922531    34.413227 -0.0063745105  -0.21715615 -0.00041249876   0.19985175 -0.0063745105  -0.21715615 -0.00041249876   0.19985175 
  201000    4.1619771    1.2747234    2.8872537  -0.21776667   0.84990626    1.0247787   0.74107234   -1.2465374            1    1.3014885    1.8649921    1.8740797   0.16539369 0.00072283199 -0.089605834  0.058841845    1.0442272    1.6050882    1.6179827 -0.090389171 -0.00089554989 -0.089767563  0.054336296    1.1633086    1.1824071   0.70392564  0.066666667    1.7802623          0.1  0.017598141    5.6824183     2.501231    34.413227 -0.0012722516  -0.18470396 -0.0030157518   0.19754705 -0.0012872867  -0.18468504 -0.0030748444   0.19530441 
  202000    4.1782394    1.2827792    2.8954602  -0.22048043   0.85527735    1.0303469   0.74632153   -1.2465374            1    1.3916303    1.9254704    1.9545615   0.29485899 -0.021586412 -0.062788501 -0.018953223    1.1327433    1.6607629    1.6929079  0.044558985  -0.01824593  -0.05962129 -0.017159822    1.2524717    1.2719019   0.70712293  0.066666667    1.7857503          0.1  0.017678073     5.656725    2.5001439    34.413227 -0.014547616  -0.18846112 0.0089159704   0.19002661 -0.014547616  -0.18846112 0.0089159704   0.19002661 
  203000    4.1692514    1.2885882    2.8806632  -0.22330281   0.85915046      1.02418   0.75645226   -1.2465374            1    1.4002061    1.9581184    1.9386773   0.30382265 0.0093490685 -0.0063626314  0.055151715    1.1401467    1.6986168    1.6764291  0.045394158 0.0098176286 -0.0041059174  0.055764353    1.2591586    1.2811943   0.71609634  0.066666667    1.7770132          0.1  0.017902408    5.5858406    2.5099712    34.413227 -0.0085480008  -0.20398842 0.0073448539   0.18730193 -0.0085480008  -0.20398842 0.0073448539   0.18730193 
  204000     4.173136    1.2833785    2.8897575  -0.20949717   0.85567691    1.0289022   0.74787045   -1.2465374            1    1.4678597    1.9855371     2.009862   0.40818004  0.010776795 -0.023745901 -0.021275737    1.2088517     1.724916    1.7531162   0.14852299  0.015038137 -0.016414135 -0.019571906    1.3284123    1.3482991   0.71129908  0.066666667    1.7466248          0.1  0.017782477    5.6235135    2.5130301    34.413227 -0.011222962  -0.18846282  0.018566083   0.18193448 -0.011222962  -0.18846282  0.018566083   0.18193448 
  205000    4.1972573    1.2877213     2.909536  -0.21419728   0.85857243    1.0322057   0.75051222   -1.2465374            1    1.3515093     1.888835    1.9289161   0.23677669 0.0053631781  0.042139282 -0.010401838    1.0916248    1.6330519    1.6659695 -0.024147086 0.0055092661  0.044960514 -0.0092058039    1.2115693    1.2315648   0.70552578  0.066666667    1.7679794          0.1  0.017638144    5.6695306    2.4718585    34.413227 -0.014598154   -0.1637911 -0.00074458155    0.1711125 -0.014598154   -0.1637911 -0.00074458155    0.1711125 
  206000    4.1888045    1.2994048    2.8893997  -0.21976379   0.86636228    1.0371477   0.76007825   -1.2465374            1     1.372749    1.9192204    1.9259583   0.27306821 -0.0059211531  0.045197148 -0.008946707    1.1105066     1.660717     1.659037  0.011765738 -0.0074294657  0.043750511 -0.0061720498    1.2310253    1.2522302   0.71092249  0.066666667    1.7573498          0.1  0.017773062    5.6264925    2.4965473    34.413227 -0.014948829  -0.20446414 -0.00034155752   0.19517453 -0.014948829  -0.20446414 -0.00034679392   0.19498557 
  207000    4.1702435     1.267158    2.9030855  -0.21147574    0.8448621    1.0176331   0.73733688   -1.2465374            1    1.4830827    2.0028663    2.0030084   0.44337334 0.0063687051 -0.024413594 0.0093385993    1.2273482    1.7489161     1.745158   0.18797066 0.00059011478 -0.024853839  0.010740426    1.3455993    1.3648316   0.71076426  0.066666667    1.7361605          0.1  0.017769107    5.6277449    2.5062837    34.413227 -0.0032201587  -0.18992754 0.0080649808    0.1890678 -0.0032201587  -0.18992754 0.0080649808    0.1890678 
  208000    4.1707645     1.276175    2.8945894  -0.20952856    0.8508741    1.0102407   0.75170363   -1.2465374            1    1.4005928    1.9333158    1.9704053    0.2980573 -0.019449255   0.11258152 -0.036843966    1.1430386    1.6708451    1.7142267   0.04404388 -0.018346905   0.11103384 -0.036923463    1.2604306    1.2832007    0.7096236  0.066666667    1.7634899          0.1   0.01774059    5.6367911    2.4989708    34.413227 -0.0018023607  -0.13341141  0.010816565    0.1761613 -0.0018023607  -0.13341141  0.010816565    0.1761613 
  209000    4.2014419    1.3142531    2.8871888  -0.22260798   0.87626221    1.0463493   0.77041509   -1.2465374            1    1.3740115    1.9206866    1.9463371   0.25501089 -0.0060456002 -0.031203421  0.016881678    1.1087725    1.6490307    1.6784308 -0.001144113 -0.0097875697 -0.030993938  0.015609421    1.2303604    1.2524235   0.71692689  0.066666667    1.7653418          0.1  0.017923172    5.5793695    2.4953231    34.413227 -0.024378428  -0.19948055  0.005916187   0.15912002 -0.024378428  -0.19948055 0.0059115699   0.15902886 
  210000    4.1982556    1.2847068    2.9135488  -0.20934656   0.85656258    1.0287095   0.74942838   -1.2465374            1    1.4768785    1.9709921    2.0113163   0.44832706  0.018884481 -0.077658006  0.040906901    1.2176024    1.7116489     1.749531   0.19162743  0.017471984 -0.076563973  0.043692439    1.3371406    1.3573403   0.70962314  0.066666667     1.766823          0.1  0.017740579    5.6367948    2.5013722    34.413227 -0.022397294  -0.20516384  0.015806142   0.19552745 -0.022450696  -0.20507338  0.015806142   0.19552745 
  211000    4.1860725    1.2762945    2.9097781  -0.22000131   0.85095374    1.0355528   0.73605833   -1.2465374            1    1.3726823    1.8887193    1.9376215   0.29170608  0.011993243 -0.0012794378  0.055199318     1.115104    1.6301954    1.6798241  0.035292521  0.013752805 0.0018264941  0.053937046    1.2354374    1.2523489   0.69986217  0.066666667    1.7691259          0.1  0.017496554    5.7154111    2.4990932    34.413227 -0.0055548986  -0.18897719 -0.0042085325   0.17522759 -0.0055548986  -0.18897719 -0.0042085325   0.17522759 
  212000    4.1929795    1.2864704    2.9065091  -0.22083487   0.85773842    1.0303526   0.75031318   -1.2465374            1    1.3857574    1.9198392    1.9274321   0.31000076 0.0030808203  0.047064924  0.015055842    1.1261254    1.6648621    1.6635178  0.049996166 0.0037219531  0.047502097  0.015731558    1.2458545    1.2660282   0.70580138  0.066666667    1.7473995          0.1  0.017645035    5.6673168    2.4821314    34.413227 -0.011126285  -0.21000024 -0.0028885537   0.21640473 -0.011126285  -0.21000024 -0.0028885537   0.21640473 
  213000    4.1982391    1.2916993    2.9065398  -0.21839365   0.86122471    1.0453108   0.74665074   -1.2465374            1    1.4045451    1.9326233    1.9630766   0.31793532 -0.0024088121  0.059921298  0.032102503    1.1438578    1.6676157    1.7024091  0.061548587 -0.0029056972  0.055929097   0.03382778    1.2653251    1.2830778   0.70824514  0.066666667    1.8045506          0.1  0.017706129     5.647762    2.4833166    34.413227 -0.0016958532  -0.23470351 -0.00092836748   0.17983107 -0.0016958532  -0.23470351 -0.00092836748   0.17983107 
  214000    4.1952576    1.3024737    2.8927838    -0.215177   0.86840844     1.056632   0.75125726   -1.2465374            1    1.4112271    1.9506711    1.9562066   0.32680358   0.01077751 -0.0069418371  -0.02954331    1.1483653    1.6884462    1.6950151  0.061634699 0.0069666633 -0.004211666  -0.03128749    1.2711482    1.2884442      0.70597  0.066666667    1.7967239          0.1   0.01764925    5.6659632    2.5034265    34.413227 0.0041425589    -0.174927 0.0039364733    0.1902279 0.0041425589    -0.174927 0.0039364733    0.1902279 
  215000    4.2148102     1.303359    2.9114511  -0.20534349   0.86899871    1.0456987   0.75902915   -1.2465374            1    1.3425977    1.8967905    1.8976876   0.23331477  0.024365997 -0.078520334  0.039478286    1.0795572    1.6320555    1.6370213 -0.030405157  0.021796253 -0.083243177  0.036176393    1.2010696    1.2210853   0.69423881  0.066666667    1.8147141          0.1   0.01735597    5.7617061    2.4908489    34.413227 -0.020037887    -0.207411 0.0026264855   0.18654762 -0.020037887    -0.207411 0.0026264855   0.18654762 
  216000     4.204447    1.2929711    2.9114758  -0.20736259   0.86207271    1.0321272   0.75624345   -1.2465374            1    1.4730989    1.9861629    1.9970563    0.4360776 -0.015046607  0.023920284  0.011720184    1.2121549    1.7204939    1.7396659   0.17630503  -0.01536307  0.028186848  0.012533213    1.3320903    1.3531636   0.69326658  0.066666667    1.7780474          0.1  0.017331665    5.7697862    2.5086429    34.413227 -0.0011530879  -0.16571774  0.012951531   0.19007932 -0.0011530879  -0.16571774  0.012951531   0.19007932 
  217000    4.1720187    1.2965293    2.8754893  -0.22175068   0.86444508    1.0606353   0.74232838   -1.2465374            1    1.3696831    1.9278689    1.9141919   0.26698846 0.0073732897  0.077910455 -0.0014776112     1.108021    1.6649538    1.6539177 0.0051914924  0.009618747  0.075654905 0.00014644952     1.231269    1.2464351   0.70676757  0.066666667    1.7834267          0.1  0.017669189    5.6595693    2.4861043    34.413227 -0.00080522008  -0.19752659 0.0078948781   0.23779542 -0.00080522008  -0.19752659 0.0078948781   0.23779542 
  218000    4.2010505     1.294332    2.9067185  -0.21864564   0.86298003    1.0499877   0.74658562   -1.2465374            1     1.390988    1.9178219    1.9561571   0.29898499 0.0077588221 0.0081849882  0.014434024    1.1297694    1.6561311    1.6952039  0.037973149 0.0038330027  0.014458787  0.013903739    1.2517802    1.2689772    0.7093524  0.066666667    1.7922255          0.1   0.01773381    5.6389462    2.5035479    34.413227 -0.010941899  -0.19018586 0.0059467877   0.20504209 -0.010941899  -0.19018586 0.0059467877   0.20504209 
  219000    4.1983624     1.294848    2.9035144  -0.20585677   0.86332407    1.0335119   0.75741194   -1.2465374            1    1.4769096     1.996062    2.0206576   0.41400925 0.0099628934 -0.021394957  0.014870953    1.2155869    1.7396014    1.7551005   0.15205863  0.011730578 -0.019916849 0.0090407139    1.3356831    1.3568134   0.70086256  0.066666667    1.8133004          0.1  0.017521564    5.7072531    2.4976263    34.413227 -0.0088868327  -0.18083997  0.018075539   0.17794137 -0.0088868327  -0.18083997  0.018075539   0.17794137 
  220000    4.1818154    1.2885069    2.8933085  -0.20530716   0.85909626     1.043549   0.74429345   -1.2465374            1    1.4976399    2.0227462    2.0166273   0.45354631  0.012262224 -0.038414158   -0.0373457    1.2375969    1.7581346    1.7569921   0.19766407   0.01211003 -0.038895578 -0.033135675    1.3588595    1.3763774   0.70435706  0.066666667    1.8358091          0.1  0.017608927    5.6789379    2.5036748    34.413227 -0.0098814135  -0.19507398  0.023691078   0.20029443 -0.0098814135  -0.19507398  0.023691078   0.20029443 
  221000    4.1735671    1.2861794    2.8873877  -0.21453123   0.85754437    1.0383997   0.74498322   -1.2465374            1    1.4263679    1.9414002     1.967842   0.36986151  0.013626788 -0.016559665 -0.0087760349    1.1667946    1.6818728    1.7096968   0.10881421  0.016466718 -0.015781868 -0.013242207    1.2874588    1.3057037   0.69942166  0.066666667    1.8456959          0.1  0.017485541    5.7190108    2.4785096    34.413227 0.00025744693  -0.20701953 -0.010333793   0.18845505 0.00025744693  -0.20701953 -0.010333793   0.18845505 
  222000    4.1690004    1.2572825    2.9117179  -0.21208768   0.83827771    1.0187081   0.72597801   -1.2465374            1    1.4685106    1.9678831    2.0007557   0.43689293 -0.0073713834 0.0083828626  0.010017072    1.2147692    1.7134443    1.7477699   0.18309347 -0.006273711 0.0093484584  0.007834143    1.3331452    1.3501346   0.70330721  0.066666667    1.8366085          0.1   0.01758268     5.687415    2.4956428    34.413227 -0.0010482153  -0.16726251  0.015814144   0.16914234 -0.00081519764  -0.16693687  0.015814144   0.16914234 
  223000    4.1868203    1.2937603      2.89306  -0.22710948   0.86259888    1.0344281   0.75566368   -1.2465374            1    1.3505475    1.8683895    1.9256304   0.25762247 -0.00078308609  0.014261414  0.023460539    1.0894442    1.6023287    1.6662357 -0.00023174348 -0.0011522594  0.016680759  0.027355749    1.2096469    1.2303448   0.70628506  0.066666667    1.8263266          0.1  0.017657127    5.6634356    2.4988005    34.413227 -0.0050848584  -0.22849254  0.008741477   0.18658067 -0.0050848584  -0.22849254  0.008741477   0.18658067 
  224000    4.2062792     1.304459    2.9018202  -0.21218859   0.86973207    1.0373713   0.76540931   -1.2465374            1    1.5328318    2.0339656    2.0668413   0.49768854 0.0050387377 -0.070568267 -0.029414327    1.2695694    1.7663784      1.80599    0.2363398 0.0064486991   -0.0741011 -0.026655258    1.3901141    1.4122871   0.70652666  0.066666667    1.8352785          0.1  0.017663166     5.661499    2.4853191    34.413227 0.0025676509  -0.18425278  0.022920705   0.20071438 0.0025676509  -0.18425278  0.022920705   0.20071438 
  225000    4.1932231    1.2886005    2.9046226  -0.21869878   0.85915866    1.0405475   0.74626527   -1.2465374            1    1.3710272    1.9080626    1.9136786   0.29134051  0.011306468  0.061161287  0.025490027    1.1109653    1.6468501    1.6530026  0.033043406 0.0090118886  0.069182421  0.025410814    1.2318791    1.2501134   0.70464249  0.066666667    1.8116713          0.1  0.017616062    5.6766375     2.484524    34.413227 -0.012830194  -0.20218963 -0.00044978221   0.22881337 -0.012830194  -0.20218963 -0.00044978221   0.22881337 
  226000    4.1671493    1.2922804    2.8748689  -0.21064594    0.8616122    1.0281925   0.75794796   -1.2465374            1    1.4115144    1.9577552    1.9619786   0.31480948  0.012089625   0.12355763 -0.0023661327    1.1507099    1.7029961    1.6962943  0.052839233 0.0085253008   0.12518982 -0.0033117186     1.270188    1.2920363   0.70418561  0.066666667    1.8338029          0.1   0.01760464    5.6803206    2.4857825    34.413227 -0.011834396  -0.17651063 0.0073740842   0.20614897 -0.011834396  -0.17651063 0.0073740842   0.20614897 
  227000    4.1846036    1.2932915    2.8913121  -0.21647098   0.86228632    1.0445811    0.7488289   -1.2465374            1    1.5169752    2.0379718    2.0288501    0.4841038 -0.0031270799   0.05578688 -0.031669794    1.2559666    1.7744081    1.7686186   0.22487313 -0.0058122936  0.054923879 -0.035624216    1.3773491    1.3955927   0.70890218  0.066666667    1.8481211          0.1  0.017722554    5.6425274    2.4795407    34.413227 -0.017461147   -0.1870873 -0.0088333904   0.20302831 -0.017461147   -0.1870873 -0.0088333904   0.20302831 
  228000    4.1807381    1.2730716    2.9076665   -0.2147244   0.84880494    1.0221244   0.74093862   -1.2465374            1    1.2554903    1.8123895    1.8488685   0.10521285 0.0024799189  0.049436631 -0.019518906   0.99856238    1.5512172    1.5901918  -0.14572187 0.00014357264  0.044773247 -0.025689412    1.1173354    1.1367173   0.71338633  0.066666667    1.8449743          0.1  0.017834658    5.6070601    2.4890373    34.413227 -0.010811714   -0.1962712 0.0028079115   0.19169465 -0.010811714   -0.1962712 0.0028079115   0.19169465 
  229000    4.1371207     1.276776    2.8603447  -0.21087249   0.85127479    1.0241981   0.74365581   -1.2465374            1    1.4848673    2.0188306    2.0192013   0.41657011 0.0056123237 -0.077860236  0.051774585    1.2271918     1.756856    1.7632037   0.16151571  0.001472338 -0.079753516   0.05279091    1.3462058    1.3658534   0.70738922  0.066666667    1.8531076          0.1   0.01768473    5.6545956    2.4849536    34.413227 0.0016828613  -0.20271043 0.0033216428   0.18371448 0.0016828613  -0.20271043 0.0033216428   0.18371448 
  230000    4.1630198    1.2697698      2.89325  -0.20660631   0.84660348    1.0228515   0.73691167   -1.2465374            1    1.3354324    1.8649627    1.9080765   0.23325788 0.0089915032 -0.079562695  0.057209141    1.0791708     1.610706    1.6511617 -0.024355296 0.0068515439 -0.077945214  0.056923681    1.1980283    1.2165749   0.70231309  0.066666667    1.8322039          0.1  0.017557827    5.6954655    2.4904909    34.413227 -0.0057894435  -0.15337649 -0.00082061768   0.17050855 -0.0057894435  -0.15337649 -0.00082061768   0.17050855 
  231000    4.1769486    1.2900408    2.8869078  -0.21771359   0.86011894    1.0241878   0.75801961   -1.2465374            1    1.4693039    1.9608867    2.0201256   0.42689933  0.017994684 -0.035667359  0.041521702    1.2089513     1.702489    1.7627969   0.16156803  0.015969627 -0.038276175  0.046312122    1.3279641    1.3502911   0.70983651  0.066666667     1.807304          0.1  0.017745913    5.6351004    2.4989591    34.413227 -0.0060355884  -0.20275063 0.0066902196   0.20093349 -0.0060355884  -0.20275063 0.0066902196   0.20093349 
  232000    4.1811256    1.2789276    2.9021981  -0.22481696   0.85270932     1.030825   0.74185467   -1.2465374            1    1.4003264    1.9127148    1.9624223   0.32584218  0.018756773 -0.053714983  0.032861508    1.1422167    1.6525325    1.7028423  0.071275267  0.016732223 -0.054281204  0.029686995    1.2620007    1.2805424   0.70921733  0.066666667    1.8299029          0.1  0.017730433    5.6400201    2.4984272    34.413227  0.011000582  -0.17513698 0.0038579123   0.19114849  0.011000582  -0.17513698 0.0038579123   0.19114849 
  233000    4.1827456    1.2909801    2.8917654  -0.21043911   0.86074521    1.0349867   0.75230633   -1.2465374            1    1.4509846     1.965846    2.0107249   0.37638288 -0.0072572759 -0.058520626  0.042585016    1.1904425    1.7079614    1.7505953    0.1127707 0.0010691287 -0.059170347  0.042823286    1.3107101     1.330717   0.70342866  0.066666667    1.8290872          0.1  0.017585716    5.6864331    2.4721959    34.413227 0.0018991555  -0.21153733 -0.0078276774   0.16424494 0.0018991555  -0.21153733 -0.0078276774   0.16424494 
  234000    4.1525632     1.289621    2.8629422  -0.21684603   0.85983907    1.0359109   0.75025936   -1.2465374            1    1.3517913     1.863239    1.9435092   0.24862574 -0.015669039 -0.069659592  -0.02462305    1.0915234    1.6005247    1.6811156 -0.007069952  -0.01521857  -0.07247972 -0.027672597    1.2118985    1.2314163   0.70711799  0.066666667    1.8207772          0.1   0.01767795    5.6567646    2.5006078    34.413227 -0.00020721989  -0.25138466  0.009672862   0.19396951 -0.00020721989  -0.25138466  0.009672862   0.19396951 
  235000     4.196076    1.3125331    2.8835428  -0.22106753   0.87511543    1.0431754   0.77053141   -1.2465374            1    1.3783473    1.9154416    1.9236091   0.29599135 0.0024620238 -0.0060272443 -0.024334112    1.1134554    1.6508359      1.66088  0.028650385 0.0042086195 -0.0063849814 -0.030142359    1.2346746    1.2571282   0.71027477  0.066666667    1.7856968          0.1  0.017756869    5.6316234    2.4886111    34.413227  -0.01415972  -0.18142407 0.0046332219   0.17667654  -0.01415972  -0.18142407 0.0046332219   0.17667654 
  236000    4.2048079    1.2955205    2.9092874  -0.21436922   0.86377248    1.0301584   0.76022974   -1.2465374            1    1.4101014    1.9396355    1.9706816   0.31998723 -0.0016994857  0.023609724 -0.0023001927     1.148643    1.6719035    1.7095795  0.064445915 -0.0026767145  0.027381747 -0.0052140919    1.2683495    1.2903949   0.70716626  0.066666667    1.7954274          0.1  0.017679156    5.6563785     2.500917    34.413227 -0.025946263  -0.20388577 0.0029921688   0.19572095 -0.026034465  -0.20376236 0.0029921688   0.19572095 
  237000    4.1794782    1.3113817    2.8680966   -0.2123466   0.87434771    1.0452178   0.76801227   -1.2465374            1    1.4355085    1.9654805    2.0004736   0.34057132 0.0020457318  0.042729806 -0.0074018787     1.170849    1.7026319    1.7311042   0.07881072 0.0044304004  0.039006846 -0.0074928338    1.2923054     1.314052   0.71344475  0.066666667    1.8310162          0.1  0.017836119     5.606601    2.4881386    34.413227 -0.0097819366  -0.18375152 -0.0024958619    0.1705829 -0.0097819366  -0.18375152 -0.0024958619    0.1705829 
  238000    4.1840862    1.2870954    2.8969908  -0.22060216   0.85815513    1.0216931   0.75638632   -1.2465374            1    1.3115295    1.8477109    1.9010989   0.18577856 -0.0064475116 0.0050227669  0.047046585    1.0517713    1.5833831    1.6419481 -0.070017222 -0.0058547598 0.0040136735  0.046932879    1.1704942    1.1928066   0.71131207  0.066666667    1.8501904          0.1  0.017782802    5.6234108     2.496665    34.413227 -0.010452427  -0.21167303 0.0024207608   0.20645468 -0.010452427  -0.21167303 0.0024207608   0.20645468 
  239000    4.1968907    1.3049057     2.891985  -0.21173822   0.87002989    1.0216563   0.77568642   -1.2465374            1    1.3922015    1.9378253    1.9427709   0.29600814 -0.013767022 -0.0022167239  0.038996354    1.1288489    1.6820102    1.6768325  0.027703908 -0.011768577 -0.0039515042  0.039409545    1.2475675    1.2734829   0.71358047  0.066666667    1.8554525          0.1  0.017839512    5.6055346    2.5047436    34.413227 -0.00062625203  -0.18053804  0.010408707   0.19089179 -0.00062625203  -0.18053804  0.010408707   0.19089179 
  240000    4.1867115     1.304082    2.8826295   -0.2190735   0.86948073    1.0545788   0.75427756   -1.2465374            1    1.4291368    1.9579756    1.9702293   0.35920537  0.011638581  0.047605308 -0.011382669    1.1659504    1.6956325    1.7112279   0.09099096 0.0083646818  0.051688784 -0.0097310141    1.2884947    1.3065925   0.71065995  0.066666667    1.8502705          0.1  0.017766499     5.628571    2.4809206    34.413227 -0.0039365695  -0.21284976 -0.0012407161   0.14868541 -0.0039365695  -0.21284976 -0.0012407161   0.14868541 
  241000    4.2067337    1.3106518    2.8960818  -0.20935978   0.87386108    1.0432211   0.76846663   -1.2465374            1    1.4200091    1.9398475    1.9744831   0.34569657 0.00035640127 0.0072551199 0.0095820933    1.1554968    1.6747163    1.7089017  0.082872507  0.004608761  0.010558516  0.013294133    1.2767213    1.2987846   0.70729014  0.066666667    1.8203406          0.1  0.017682253    5.6553878      2.47284    34.413227 -0.0025145551   -0.1972193 0.0018282368   0.16959524 -0.0025145551   -0.1972193 0.0018282368   0.16959524 
  242000    4.1964566    1.2875997    2.9088569  -0.20911742   0.85849138    1.0261511   0.75415391   -1.2465374            1    1.4208074    1.9633871    1.9579248   0.34111042  0.018567862 -0.022105213 -0.0038448773    1.1609475    1.7075405    1.7002221  0.075080055  0.013091574  -0.02332756 -0.0033752164    1.2801884    1.3015665   0.70610394  0.066666667    1.8181593          0.1  0.017652599    5.6648883    2.5010292    34.413227 -0.0051336876  -0.18134346 -0.0020638271   0.17608685 -0.0051336876  -0.18134346 -0.001958191   0.17590666 
  243000    4.1758693    1.2836513     2.892218  -0.21798651   0.85585884    1.0421752   0.73989407   -1.2465374            1    1.3083325    1.8628415    1.8724441   0.18971197 -0.0099867116 -0.019457822 -0.065932932    1.0492694    1.6048362    1.6177884 -0.074816233 -0.0083095616  -0.01969755 -0.067381363    1.1703724    1.1872296    0.7073791  0.066666667    1.8157163          0.1  0.017684478    5.6546765    2.4839741    34.413227 -0.012118038  -0.20495606  0.002629327   0.16409539 -0.012118038  -0.20495606 0.0025725464   0.16399965 
  244000     4.179931    1.2914937    2.8884373  -0.21152016   0.86108766     1.026215   0.75832884   -1.2465374            1     1.487569    1.9977643    2.0301804   0.43476242 0.0070710768  0.062092271 -0.015909145    1.2269232    1.7395679      1.76932    0.1718818 0.0030676915  0.065417865 -0.017885868    1.3461716    1.3683207   0.69996987  0.066666667     1.797296          0.1  0.017499247    5.7145317    2.4778598    34.413227 -0.011636363  -0.21661233 -0.0067637109   0.19508801 -0.011636363  -0.21661233 -0.0067637109   0.19508801 
  245000    4.2126439    1.2914608     2.921183  -0.20889245   0.86106574     1.041626   0.74868906   -1.2465374            1    1.3840718     1.918065    1.9478705   0.28627998 0.00033515966  0.008462929 -0.010610433    1.1234327    1.6528171    1.6912682  0.026212722 -4.738687e-05 0.0073427989 -0.0078485044    1.2444718    1.2630327    0.7057931  0.066666667    1.7750113          0.1  0.017644828    5.6673832    2.4821069    34.413227 -0.002384319  -0.18786038  0.018882163   0.15330984 -0.002384319  -0.18786038  0.018882163   0.15330984 
  246000    4.2015943    1.2935051    2.9080892  -0.21360533   0.86242873    1.0348131   0.75514751   -1.2465374            1    1.4583887    1.9819282     1.999669   0.39356905 -0.0021480093 -0.054182892  0.031432828     1.197337    1.7230328    1.7378176   0.13116055 -0.0036560146 -0.057927433   0.03282588    1.3175844    1.3381413   0.70779117  0.066666667    1.7606874          0.1  0.017694779    5.6513844    2.4884635    34.413227 -0.017864362  -0.22445547 0.0040310619   0.19940231 -0.017864362  -0.22445547 0.0040310619   0.19940231 
  247000    4.2095201    1.2907333    2.9187867  -0.21842774   0.86058066     1.033138   0.75319135   -1.2465374            1     1.363527    1.9198133    1.8990825   0.27168508 0.0075060808 -0.053673262  0.027776288    1.1030346    1.6534269    1.6414624  0.014214546 0.0078651136 -0.056676445  0.028073716    1.2230874    1.2434742   0.70610939  0.066666667    1.7737409          0.1  0.017652735    5.6648446    2.4896883    34.413227 0.0094922983  -0.19605823   0.01639191    0.1989951 0.0094922983  -0.19605823   0.01639191    0.1989951 
  248000    4.1885385    1.2943709    2.8941677  -0.21558289   0.86300594    1.0318325   0.75794206   -1.2465374            1    1.3266032    1.8923837    1.9037078   0.18371811 -0.0019817965   0.03845091 -0.0014651323    1.0653768    1.6305271    1.6385392 -0.072936039 -0.0022750327  0.038708017 0.0013734051    1.1852779    1.2067021   0.70544149  0.066666667    1.7867823          0.1  0.017636037     5.670208    2.4860997    34.413227 -0.0025087531   -0.1614295 -0.0035580563   0.19953183 -0.0025087531   -0.1614295 -0.0035580563   0.19953183 
  249000    4.2002517    1.2965964    2.9036552  -0.20120594   0.86448983    1.0206012   0.76735037   -1.2465374            1    1.4720261    1.9938007    2.0040338   0.41824376  0.017764079  0.025644393  0.013244583    1.2103505      1.72744    1.7489712    0.1546402  0.016455939  0.028034105  0.012230955    1.3289465    1.3534301   0.70182599  0.066666667    1.8160697          0.1   0.01754565    5.6994185    2.4896805    34.413227 -0.014264572  -0.16264271 -0.0020617375   0.17507371 -0.014264572  -0.16264271 -0.0020617375   0.17507371 
  250000    4.1900818    1.2996782    2.8904036  -0.22351103   0.86654453    1.0372925   0.76028387   -1.2465374            1    1.3698275    1.9213095    1.9246055   0.26356761  0.010491305   0.09142409  -0.04384113      1.10753    1.6529903    1.6648386 0.0047609022 0.0083995543  0.089885908  -0.04656348    1.2280655     1.249292   0.70874501  0.066666667    1.8219681          0.1  0.017718625    5.6437787    2.4917875    34.413227 0.0064050774  -0.19228218  0.015353501   0.17499359 0.0064050774  -0.19228218  0.015353501   0.17499359 
  251000    4.1963835    1.2912328    2.9051508  -0.21766094   0.86091366    1.0353049   0.75238149   -1.2465374            1    1.3078748     1.856057    1.8913927   0.17617477 0.0049713106 -0.056842843  0.053838176    1.0472817     1.593671    1.6324438 -0.084269739 0.0060644962 -0.055176371  0.052289998    1.1675863    1.1875702    0.7160025  0.066666667    1.8390462          0.1  0.017900063    5.5865727    2.5018475    34.413227  -0.01888533  -0.18274575 -0.0079459351   0.19498571  -0.01888533  -0.18274575 -0.0079459351   0.19498571 
  252000    4.1804086    1.2828843    2.8975242   -0.2205402   0.85534746    1.0302891   0.74647135   -1.2465374            1    1.3668565    1.8910682    1.9322266   0.27727465 -0.0065243775    0.1099965 -0.043639274    1.1079482    1.6371285     1.669618  0.017098182 -0.0071020219   0.10687349 -0.041501676      1.22767    1.2471348   0.70400222  0.066666667    1.8608645          0.1  0.017600055    5.6818003     2.501613    34.413227 -0.0046953128  -0.20333638 0.0071317652   0.16024395 -0.0046953128  -0.20333638 0.0071317652   0.16024395 
  253000    4.2102746    1.2936239    2.9166507  -0.20492958   0.86250795    1.0277897   0.75965315   -1.2465374            1    1.4328777    1.9673541    1.9635436   0.36773532 -0.004761801  0.060548345 -0.0056406388     1.171802    1.7017258    1.7059564   0.10772373 -0.00057166116  0.055198687 -0.0049234316    1.2912333    1.3134464   0.70756905  0.066666667    1.8570473          0.1  0.017689226    5.6531585    2.5019317    34.413227 -0.010788503  -0.18647834  0.022230263   0.21874166 -0.010788503  -0.18647834  0.022230263   0.21874166 
  254000    4.1801155    1.3001296    2.8799859  -0.21782544   0.86684551    1.0420864    0.7577849   -1.2465374            1    1.4798214    1.9879284    2.0369076   0.41462816 0.0069071106 -0.0083435121 -0.023746399    1.2174327    1.7281066    1.7745719   0.14961962 0.0056652639 -0.0087681422 -0.020586692    1.3385253    1.3587288   0.71023628  0.066666667    1.8595191          0.1  0.017755907    5.6319286    2.4957573    34.413227 0.0070677124  -0.18523974 -0.0046716108   0.20628091 0.0070677124  -0.18523974 -0.0046716108   0.20628091 
  255000    4.1849404    1.2984337    2.8865067  -0.21018856   0.86571477    1.0446321   0.75436279   -1.2465374            1    1.4496015    1.9646455    2.0044792   0.37967963   0.01825989  0.051235088 -0.017313875    1.1875551    1.6986239    1.7438782    0.1201631  0.015705943  0.051240441 -0.017121895    1.3089435     1.328213   0.72145835  0.066666667    1.8662767          0.1  0.018036459    5.5443256    2.5273191    34.413227 0.0090729538  -0.21053062 -0.0013811297   0.17907069 0.0090729538  -0.21053062 -0.0013811297   0.17907069 
  256000    4.1700952    1.2908006    2.8792946   -0.2161392   0.86062551    1.0439199   0.74654483   -1.2465374            1    1.3087206     1.880833    1.8879791   0.15734978 0.0012089907  0.020555425 -0.052668725    1.0482147    1.6201558    1.6221524 -0.097664102 -0.004845893  0.020160302  -0.05086587    1.1695204    1.1874149   0.72003949  0.066666667    1.8394003          0.1  0.018000987    5.5552509    2.4918016    34.413227 -0.0035008435  -0.19150779 0.0092068321   0.22151975 -0.0035008435  -0.19150779 0.0092068321   0.22151975 
  257000     4.177339    1.2870428    2.8902962  -0.21326226   0.85812005    1.0062787   0.76593566   -1.2465374            1    1.3997286    1.9392069    1.9603817   0.29959723 0.00084634144 -0.054552243  0.020414477    1.1399811    1.6795933    1.6982089  0.042141116 0.0028677981 -0.052151766  0.023682099    1.2569128    1.2827969   0.70676826  0.066666667    1.8616528          0.1  0.017669206    5.6595637    2.4874074    34.413227 0.0026562805  -0.19411228 0.0023297421   0.22393898 0.0025792274  -0.19399786 0.0023297421   0.22393898 
  258000    4.1611035    1.2805393    2.8805642  -0.22013107   0.85378391    1.0258746   0.74668426   -1.2465374            1     1.437051    1.9620665    1.9687337   0.38035281  0.013759185 -0.046731093 -0.0022838621     1.178616    1.7020521    1.7117901   0.12200578  0.014652575 -0.048070385 0.0027733386    1.2978248    1.3178422   0.69937804  0.066666667    1.8469703          0.1  0.017484451    5.7193675    2.4854692    34.413227 -0.010838668  -0.19667022 0.0065947461   0.17821499 -0.010838668  -0.19667022 0.0065947461   0.17821499 
  259000    4.1798121    1.2809722    2.8988399   -0.2141329   0.85407258    1.0306284    0.7441903   -1.2465374            1    1.4015392     1.937438    1.9226961   0.34448362 0.0036159765 -0.070021818 -0.026278212    1.1430168    1.6689952    1.6703955  0.089659875 0.0070116206 -0.072120245 -0.029681414     1.262778    1.2817781   0.70222444  0.066666667    1.8688568          0.1  0.017555611    5.6961845    2.4776546    34.413227 0.0034873547  -0.21492229 0.0017266517   0.19035993 0.0034873547  -0.21492229 0.0017266517   0.19035993 
  260000    4.1808086    1.3009867    2.8798219  -0.22075058   0.86741696    1.0460645   0.75623341   -1.2465374            1    1.4663333    1.9899576    1.9989536   0.41008872 0.0036523915  -0.10740936 -0.004701492    1.2037717    1.7277275    1.7361471   0.14744039 0.0039950504  -0.10608545 -0.0075230595    1.3253265    1.3447784   0.71916823  0.066666667    1.8707542          0.1  0.017979206    5.5619809    2.4760188    34.413227 -0.001247361  -0.17434825  0.018653908   0.22562619 -0.001247361  -0.17434825  0.018653908   0.22562619 
  261000    4.1831689    1.2681099     2.915059  -0.22400827   0.84549675    1.0051569   0.74614242   -1.2465374            1    1.3538876    1.8662582    1.9332234   0.26218111 -0.011952264  -0.05972873 0.0060369879    1.0979611    1.6109426    1.6717396  0.011201036 -0.013182506 -0.056905949 0.0060790727    1.2147624    1.2370863   0.71359566  0.066666667    1.8634786          0.1  0.017839892    5.6054153    2.5134154    34.413227 -0.014916954  -0.18646391 0.0010751191   0.18978589 -0.014916954  -0.18646391 0.0010751191   0.18978589 
  262000    4.1956187    1.3077577     2.887861  -0.21163424   0.87193149    1.0245631   0.77696194   -1.2465374            1    1.3009129    1.8637269    1.8702094    0.1688022 0.00098163112 -0.042780291  0.013604403    1.0369847    1.5941941     1.609925 -0.093165042 0.0064985907 -0.039499232  0.016961671    1.1560411    1.1818565   0.69677269  0.066666667    1.8669572          0.1  0.017419317    5.7407531    2.4997975    34.413227 -0.005617499  -0.18037218  0.019225054   0.21548165 -0.005617499  -0.18037218  0.019225054   0.21548165 
  263000    4.1900509    1.2891412    2.9009098  -0.22216016   0.85951913   0.99846675   0.77307532   -1.2465374            1    1.3515824    1.8940409    1.8989641   0.26174219  0.009812204  -0.02181625 -0.062280891    1.0914114    1.6293303    1.6371358 0.0077680547 0.0098838448 -0.025475316 -0.062680285    1.2074353    1.2355585   0.70036248  0.066666667    1.8707574          0.1  0.017509062    5.7113282    2.4817184    34.413227 0.0026934096  -0.16605224 0.0048170349   0.22014174 0.0026934096  -0.16605224 0.0048170349   0.22014174 
  264000    4.1632077    1.2797599    2.8834478  -0.22308129   0.85326428    1.0302259   0.74312894   -1.2465374            1    1.3464326     1.896201    1.8900672   0.25302954   0.00745365 -0.039244367  0.044968508    1.0881549     1.641601    1.6306499 -0.0077863716 0.0064009265 -0.036476871  0.046807361    1.2078693    1.2267182   0.71991282  0.066666667    1.8432564          0.1   0.01799782    5.5562284    2.4989242    34.413227 -0.022193737  -0.18421887 0.0066156143   0.20615037 -0.022193737  -0.18421887 0.0066156143   0.20615037 
  265000    4.1541889     1.260187    2.8940019  -0.21646351   0.84021425    1.0071605   0.73631823   -1.2465374            1    1.3657496    1.8920377    1.9187525   0.28645855 0.0048839849   0.10458129 -0.0090418316     1.111422    1.6295782    1.6665856  0.038102246 0.0040963926   0.10294704 -0.011162553    1.2284562    1.2487154   0.71302025  0.066666667    1.8345797          0.1  0.017825506    5.6099388    2.5001801    34.413227 -9.5085191e-05  -0.18862872  0.013669129     0.204873 -9.5085191e-05  -0.18862872  0.013669129     0.204873 
  266000     4.162934       1.2872     2.875734   -0.2103603   0.85822488    1.0227749   0.75582535   -1.2465374            1    1.4111379    1.9251852    1.9735347   0.33469373  0.021986685  0.022393907  0.031641486    1.1513586    1.6672083    1.7141073  0.072760253  0.015536372   0.02220054  0.040102486    1.2702072    1.2922893   0.70328926  0.066666667    1.8461917          0.1  0.017582232    5.6875602    2.4869803    34.413227  0.024849861   -0.1872855  0.004791695    0.2182443  0.024849861   -0.1872855  0.004791695    0.2182443 
  267000    4.1619636    1.2774846     2.884479  -0.20875905   0.85174721    1.0389156   0.73525069   -1.2465374            1     1.394024    1.9434931    1.9486787   0.28990019 -0.020343767   0.11118319 0.0087296071    1.1362055    1.6862736    1.6971204  0.025222501 -0.014918277   0.11082087 0.0089726785    1.2569297    1.2732998   0.71104693  0.066666667    1.8427732          0.1  0.017776173    5.6255077    2.4919777    34.413227 0.0015997341  -0.22162105  0.012374694   0.19976729 0.0015997341  -0.22162105  0.012374694   0.19976729 
  268000    4.1995613    1.3021325    2.8974288  -0.21675158   0.86818094    1.0326669   0.76582308   -1.2465374            1    1.4129249    1.9411098    1.9557339   0.34193088 -0.0097747218  0.059090367 -0.0068349338     1.150132    1.6785662    1.6921748  0.079654985 -0.0066800113  0.060606528 -0.0069176052      1.27013    1.2929268   0.70592774  0.066666667    1.8468852          0.1  0.017648193    5.6663024    2.4798396    34.413227 -2.6931506e-05  -0.17750921 0.0039385163    0.2189568 -2.6931506e-05  -0.17750921 0.0039385163    0.2189568 
  269000     4.194803     1.299928     2.894875  -0.21534137   0.86671108    1.0155804   0.77408529   -1.2465374            1    1.4061296    1.9117714     1.983944   0.32267327  0.010823586 -0.062391639 -0.052205012    1.1437816    1.6534495    1.7169239  0.060971328 0.0091770111 -0.067821127 -0.051559701    1.2617941     1.288117   0.70426197  0.066666667    1.8365815          0.1  0.017606549    5.6797047     2.477709    34.413227 -0.0049504591  -0.18144113 0.0018017497    0.1866526 -0.0049504591  -0.18144113 0.0018017497    0.1866526 
  270000    4.2142809    1.2984733    2.9158077  -0.21744656   0.86574117    1.0228788   0.76796239   -1.2465374            1    1.5407535    2.0277458    2.0541618   0.54035285 -0.0077415748 -0.061443266  0.059279644    1.2786991    1.7705797     1.791394   0.27412348 -0.0053081935 -0.067089652  0.058648386    1.3975597    1.4218928   0.70805422  0.066666667    1.7977339          0.1  0.017701355    5.6492849    2.4878965    34.413227  0.015594735  -0.20456837 -0.0016221145   0.15884754  0.015594735  -0.20456837 -0.0016221145   0.15884754 
  271000    4.1948931    1.2921884    2.9027047  -0.21540201   0.86155084    1.0497646   0.74440457   -1.2465374            1     1.275953    1.8359838    1.8770942   0.11478109 -0.0022118398  -0.10077523  0.068742488     1.015167    1.5767005    1.6138661  -0.14506564 0.0046073402  -0.10055714  0.070269091    1.1371518    1.1539682   0.71428524  0.066666667    1.8164538          0.1  0.017857131    5.6000037    2.5118269    34.413227 0.0061428824    -0.199567 0.0048494019   0.16761591 0.0061428824    -0.199567 0.0048494019   0.16761591 
  272000    4.1869014    1.2924628    2.8944387  -0.22137215   0.86173375    1.0300587   0.75698226   -1.2465374            1    1.3796907    1.9159258    1.9357639   0.28738223 -0.021553681  -0.13055734 -0.068023416    1.1188493     1.659245    1.6722463  0.025056527 -0.021067397  -0.13425109 -0.066645838    1.2385443    1.2599957   0.70769842  0.066666667    1.8181891          0.1   0.01769246    5.6521251    2.4818828    34.413227 -0.0028344573  -0.19369472 -0.0024622959   0.18688952 -0.0028344573  -0.19369472 -0.0024622959   0.18688952 
  273000    4.1809712    1.2965655    2.8844057  -0.20739317   0.86446922    1.0384207   0.75621173   -1.2465374            1    1.4038435    1.9587107     1.938657   0.31416278 0.0064492729  -0.14330842  0.013820424    1.1421741    1.6946056    1.6800155  0.051901236 0.0044382205   -0.1479144 0.0096213507    1.2628408    1.2831768   0.70779684  0.066666667    1.8208959          0.1  0.017694921    5.6513392    2.4930802    34.413227 -0.020808604  -0.20396385 0.0018046517    0.1762215 -0.020808604  -0.20396385 0.0018046517    0.1762215 
  274000    4.1909445    1.2952598    2.8956847  -0.21963215   0.86359865    1.0392939   0.75425427   -1.2465374            1    1.3973166    1.9057449    1.9542595   0.33194536 -0.0058839991   -0.1121346  0.014213394    1.1359107    1.6514135    1.6911573  0.065161402 -0.0022056541  -0.11081365  0.016480642    1.2566789    1.2765485    0.7145848  0.066666667    1.8079155          0.1   0.01786462    5.5976562    2.5334423    34.413227 -0.0060542998  -0.16330377  0.019318024   0.19527596 -0.0060542998  -0.16330377  0.019318024   0.19527596 
  275000    4.1920249     1.300144    2.8918809  -0.21945585   0.86685513    1.0506373   0.75247154   -1.2465374            1    1.4088034    1.9606065    1.9502894   0.31551445 -0.027572572  -0.10085886  0.012942857    1.1464119    1.6972489    1.6877556  0.054231066 -0.027448289 -0.096692509  0.006281345    1.2684981    1.2867172   0.71442921  0.066666667    1.8013236          0.1   0.01786073    5.5988752    2.4780436    34.413227 0.0036870405    -0.190687 -0.0046148514   0.18226469 0.0036870405    -0.190687 -0.0046148514   0.18226469 
  276000    4.1814906    1.2836426     2.897848  -0.21410209   0.85585304    1.0179271    0.7549961   -1.2465374            1    1.4277686     1.967257    1.9911884   0.32486034 -0.014514412 -0.043046941 -0.013847423    1.1687072    1.7055887    1.7302081  0.070324863 -0.015271676 -0.042477083  -0.01081431    1.2869925    1.3094833   0.70897142  0.066666667    1.8139058          0.1  0.017724285    5.6419764    2.5163665    34.413227 -0.0090957348  -0.18772519 0.0051155124   0.20282412 -0.0090957348  -0.18772519 0.0051155124   0.20282412 
  277000    4.1999331    1.3029823    2.8969509  -0.21921295   0.86874752    1.0400693   0.76212959   -1.2465374            1    1.4111243    1.9409292     1.958767   0.33367662 0.0069321287 -0.024106579 -0.035875951    1.1481599    1.6805615    1.6930287  0.070889403 0.0094987669 -0.022559811 -0.033460481    1.2690181     1.290266   0.71310291  0.066666667    1.8053413          0.1  0.017827573    5.6092885    2.5145508    34.413227 -0.0016707455  -0.17696297 -0.0029654071   0.20479114 -0.0016707455  -0.17696297 -0.0029654071   0.20479114 
  278000    4.1550007    1.2655599    2.8894408  -0.21321328   0.84379662    1.0163562   0.73640299   -1.2465374            1    1.3325656    1.8856189    1.9261739    0.1859039  0.012961193  0.067309708 -0.037710708    1.0771537    1.6233572    1.6769866  -0.06888282  0.015539401  0.063690672 -0.039574334    1.1952564    1.2144629   0.72275782  0.066666667    1.8198272          0.1  0.018068946    5.5343572    2.5172151    34.413227 0.0056143122  -0.20002695  0.004186066   0.18834329 0.0056143122  -0.20002695  0.004186066   0.18834329 
  279000     4.149729    1.2805314    2.8691976  -0.21357564   0.85377868    1.0311414   0.74339347   -1.2465374            1     1.421179    1.9552431    1.9541781   0.35411574 -0.0012030925   0.16425499   0.00899932    1.1627456    1.6917968    1.7005423  0.095897578 0.0022829547   0.16528355  0.012042638    1.2825664    1.3013582   0.71257906  0.066666667    1.8048871          0.1  0.017814477    5.6134122    2.4980976    34.413227 -0.0020225425  -0.17749543 0.0037235717   0.22572791 -0.0020225425  -0.17749543 0.0037235717   0.22572791 
  280000    4.1869866    1.2821428    2.9048438   -0.2002239   0.85485305    1.0187388   0.75286687   -1.2465374            1    1.3681092    1.9132148    1.9284964   0.26261626 -0.010700122 -0.029319252 -0.047886912    1.1093505    1.6510759    1.6704508 0.0065248841 -0.016115882 -0.028011065 -0.047591761    1.2277301    1.2497296   0.69549268  0.066666667    1.8174674          0.1  0.017387317    5.7513186    2.4849617    34.413227 -0.0058721238   -0.1689826 0.00021595668   0.20727022 -0.0058721238   -0.1689826 0.00021595668   0.20727022 
  281000    4.2002724    1.2777903    2.9224821  -0.20300214   0.85195107    1.0127991   0.75185754   -1.2465374            1    1.4639211    1.9811176    2.0103015   0.40034425 -0.015769238 -0.078812693  -0.01713663    1.2060409    1.7199672    1.7512931   0.14686242 -0.013420241 -0.076464481 -0.014331417    1.3237303    1.3462317   0.70094708  0.066666667    1.8169064          0.1  0.017523677    5.7065649    2.4737573    34.413227 -0.011166633  -0.18455084  0.014296312   0.19776143 -0.011166633  -0.18455084  0.014296312   0.19776143 
  282000    4.2007779    1.3113275    2.8894504  -0.21766875    0.8743116    1.0530839   0.76305149   -1.2465374            1    1.3946914     1.933353    1.9510896   0.29963179  0.006101731  -0.15796761 -0.0083685356    1.1300428    1.6626053    1.6901867  0.037336572 0.0033527161  -0.15524664 -0.0026080315    1.2524134    1.2723209   0.71198572  0.066666667    1.7938038          0.1  0.017799643    5.6180902    2.4740469    34.413227 -0.0016225888  -0.21647382 0.00065872392   0.17171331 -0.0016225888  -0.21647382 0.00065872392   0.17171331 
  283000    4.1622125     1.277971    2.8842414  -0.21324562   0.85207157     1.041677   0.73405633   -1.2465374            1    1.3971601    1.9276401    1.9588549    0.3049854 0.0073423995 -0.077862449 0.0052910872    1.1392434     1.670463    1.7011888  0.046078432 0.0017935658 -0.079462022 0.0067907635    1.2602885    1.2761151   0.69975176  0.066666667     1.799554          0.1  0.017493794    5.7163129    2.4943555    34.413227 0.0022364513  -0.16559086  0.005795159   0.20985956 0.0022364513  -0.16559086  0.005795159   0.20985956 
  284000     4.171974    1.2851788    2.8867951  -0.21738528   0.85687728    1.0402738   0.74273233   -1.2465374            1     1.409526    1.9514628    1.9513493   0.32576592 -0.0039602503 -0.0097936326  0.061105383    1.1501547    1.6895475    1.6925944  0.068322017 -0.0047242971 -0.0085901617  0.060576519    1.2710366     1.288644   0.69310559  0.066666667    1.8122638          0.1   0.01732764    5.7711265    2.4843242    34.413227 -0.0080486983  -0.17906978 0.0053745965    0.1687464 -0.0080486983  -0.17906978 0.0053745965    0.1687464 
  285000    4.1682863     1.272212    2.8960743  -0.21697772    0.8482318    1.0255495   0.73787371   -1.2465374            1    1.3433666    1.9131487      1.89227   0.22468121 -0.010253204 -0.097911729  0.019937673    1.0866122    1.6503471    1.6400644 -0.030574809 -0.010424753  -0.09817682  0.018791422    1.2057832    1.2241956    0.7113943  0.066666667    1.7811507          0.1  0.017784857    5.6227608    2.5008767    34.413227 -0.0075212539  -0.21765004 -0.0066154273    0.1697661 -0.0075212539  -0.21765004 -0.0066154229   0.16975518 
  286000     4.188004     1.291582     2.896422  -0.21489266   0.86114649    1.0386688   0.75066307   -1.2465374            1    1.4951565    2.0074517    2.0258548   0.45216307 -0.013195801  -0.16426997  0.028335834    1.2344929    1.7466067    1.7701011   0.18677088 -0.013717958  -0.15847946  0.032551084    1.3551884     1.374461   0.71979655  0.066666667    1.7936506          0.1  0.017994914    5.5571258    2.4913257    34.413227 -0.011674752  -0.20094177 0.0028933517   0.20454486 -0.011674752  -0.20094177 0.0028933517   0.20454486 
  287000    4.1884397    1.2840283    2.9044114  -0.21413292    0.8561102    1.0171384   0.75590515   -1.2465374            1    1.3381661      1.88367     1.890678   0.24015016  0.007220245 0.00011647586  0.062920469    1.0790269    1.6258111     1.637239 -0.025969438 0.0069928932 -0.0030711879  0.058369397    1.1972205    1.2199724    0.7021897  0.066666667    1.8198481          0.1  0.017554743    5.6964663    2.5039242    34.413227 -0.010048097  -0.22559467 -0.0057266217   0.17314109 -0.010048097  -0.22559467 -0.0057266217   0.17314109 
  288000    4.2004906    1.2972865    2.9032042  -0.21786486   0.86494989    1.0405794   0.75564673   -1.2465374            1     1.439888    1.9780072     1.965838   0.37581883 -0.0058994201 -0.0060616108   0.11058576    1.1780731    1.7127548    1.7049645   0.11650007 -0.0063879112 -0.00017810192   0.10992575    1.2989906    1.3189705   0.70527857  0.066666667    1.8232988          0.1  0.017631964    5.6715178    2.5137011    34.413227  -0.01187745  -0.14966486 -0.00076965172   0.20018776  -0.01187745  -0.14966486 -0.00076965172   0.20018776 
  289000    4.1701185    1.2791573    2.8909611  -0.21523207   0.85286253    1.0234239   0.74671574   -1.2465374            1    1.3320901    1.8991629    1.9003654   0.19674204  0.015625671 -0.053752604 -0.034657943     1.073934     1.634535    1.6433034 -0.056036424  0.017711074 -0.051094551 -0.036668062     1.192858    1.2131661   0.70548851  0.066666667    1.7962887          0.1  0.017637213    5.6698301    2.4848658    34.413227  0.012069968  -0.17714501 -0.0084273754   0.18718403  0.012069968  -0.17714501 -0.0084273754   0.18718403 
  290000    4.2014025    1.2948855    2.9065169  -0.21242288   0.86334909    1.0296864   0.75983661   -1.2465374            1    1.3660334    1.9034678     1.925521    0.2691112 -0.0013846736 -0.054141573 -0.017849412     1.104703    1.6380787    1.6696706  0.006359795 0.0023628473 -0.056144429 -0.017910568    1.2243548    1.2463817   0.70366299  0.066666667    1.8028546          0.1  0.017591575    5.6845394    2.4967013    34.413227  0.013226769  -0.15918182 -0.0037862662   0.21155773  0.013226769  -0.15918182 -0.0037862662   0.21155773 
  291000    4.1759229    1.2897807    2.8861422  -0.22702086   0.85994555     1.035737   0.75054062   -1.2465374            1    1.3772886    1.9070459    1.9375156   0.28730424  0.018183331  -0.15458904  0.068261706    1.1169885    1.6469028    1.6711325  0.032930059  0.015026896  -0.15541559  0.074007943    1.2373433    1.2569338   0.70332904  0.066666667    1.8102457          0.1  0.017583226    5.6872385    2.4878759    34.413227 0.00088563156  -0.22569857 -0.004878196   0.19753882 0.00088563156  -0.22569857 -0.004878196   0.19753882 
  292000    4.1746317    1.2680765    2.9065552  -0.20393484   0.84547452    1.0240331   0.73434261   -1.2465374            1    1.3574072    1.9208754    1.9230151   0.22833092 -0.0054606328 -0.082914548  -0.03753643    1.1014874    1.6643438     1.667599 -0.027480663 -0.0033013543 -0.081148639 -0.040520115    1.2204821    1.2384124   0.70834172  0.066666667    1.8406587          0.1  0.017708543     5.646992    2.4982024    34.413227 -0.011027191  -0.17935967 0.0089242207   0.15380876 -0.011027191  -0.17935967 0.0089242207   0.15380876 
  293000    4.2111128    1.3030545    2.9080583  -0.20873507   0.86879563    1.0383644   0.76327025   -1.2465374            1    1.3878156    1.9240273    1.9421915   0.29722799   0.02132415  0.024583752  0.039036503    1.1248367     1.656443    1.6778088  0.040258213  0.016914953  0.024732724   0.04335052    1.2454968    1.2671555   0.70570281  0.066666667    1.8523504          0.1   0.01764257    5.6681084    2.5046562    34.413227 -0.0051961892   -0.1613962 -0.00074667265   0.20660859 -0.0051961892   -0.1613962 -0.00074667265   0.20660859 
  294000    4.2098967    1.3142167    2.8956801  -0.21462086   0.87623789    1.0641211   0.75930014   -1.2465374            1    1.3646414    1.9151193    1.9184757   0.26032918  0.015552598  0.027991343 -0.0074974884    1.0994097    1.6547765     1.653672 -0.010219386  0.020209718  0.025038945 -0.014317921    1.2230628    1.2409883   0.69324739  0.066666667    1.8648411          0.1  0.017331185     5.769946    2.4783443    34.413227 -9.598429e-05  -0.16684156  0.011470885   0.17365786 -9.598429e-05  -0.16684156  0.011470885   0.17365786 
  295000    4.2045186    1.2804332    2.9240853  -0.20387653   0.85371322    1.0206991   0.74979488   -1.2465374            1    1.3602562    1.8914368    1.9256035   0.26372839 -0.015191825   0.12603598  0.051169931    1.1018426    1.6359621    1.6609078 0.0086579862 -0.0080680919   0.13301366  0.048475862      1.22045    1.2416489   0.69992789  0.066666667    1.8235536          0.1  0.017498197    5.7148744    2.4850832    34.413227 -0.0083801556  -0.15972089 0.0037245091   0.19081687 -0.0083801556  -0.15972089 0.0037245091   0.19081687 
  296000    4.2032851    1.2958294    2.9074557  -0.22477626   0.86397843    1.0447769   0.75145378   -1.2465374            1    1.4250547    1.9314819    1.9556669   0.38801522 0.00070253058  0.083069663 -0.011701542    1.1635339    1.6706794    1.6920722   0.12785002 0.00065375935  0.083084742 -0.011740466    1.2849391    1.3036494   0.70932004  0.066666667    1.8118358          0.1  0.017733001    5.6392034    2.4840229    34.413227 -0.0053009571  -0.20095319  0.018861899   0.21128541 -0.0053009571  -0.20095319  0.018861899   0.21128541 
  297000    4.2026293    1.3093489    2.8932804   -0.2127125   0.87299235    1.0426695   0.76740015   -1.2465374            1    1.4081138    1.9496667    1.9501286   0.32454595  0.011532155 -0.0065640562 -0.031514631    1.1438645    1.6820868    1.6942147  0.055292061  0.010914665 -0.0063680209 -0.032925362    1.2650249    1.2869534   0.71032934  0.066666667    1.7999925          0.1  0.017758234    5.6311907    2.5119879    34.413227 -0.013871133  -0.20680258  0.018150718   0.21315458 -0.013871133  -0.20680258  0.017986027   0.21290931 
  298000    4.2033011     1.283875    2.9194261  -0.21317759   0.85600795    1.0049726   0.76332088   -1.2465374            1    1.2999127    1.8546709    1.8802689    0.1647981  0.013172867  -0.10769658  0.008907388    1.0408044    1.5927831    1.6218697 -0.092239445  0.014025783  -0.10872832  0.010151262    1.1575844    1.1831327   0.69558092  0.066666667    1.7829645          0.1  0.017389523     5.750589    2.4914904    34.413227 -0.0055427935  -0.17524859 -0.007185823   0.17592644 -0.0055427935  -0.17524859 -0.007185823   0.17592644 
  299000    4.1875519    1.2815177    2.9060343   -0.2012888   0.85443625    1.0007199   0.76341975   -1.2465374            1    1.4100502    1.9286141    1.9723699   0.32916662  0.014906875 -0.089059675 -0.076913066    1.1514177    1.6687611    1.7133941  0.072098048 0.0083454603 -0.089455934 -0.075189825    1.2677035    1.2937645   0.69405131  0.066666667     1.781051          0.1  0.017351283    5.7632627    2.4902023    34.413227 -0.019215956  -0.20281297 0.0046871815   0.17069342 -0.019215956  -0.20281297 0.0046871815   0.17069342 
  300000    4.1890936    1.2981403    2.8909533  -0.21820323   0.86551916    1.0399281    0.7569768   -1.2465374            1    1.4245532    1.9627089    1.9508461   0.36010468 -0.010391829  -0.14967935   0.02943051     1.162566    1.7036274    1.6897613  0.094309403 -0.0089642474  -0.14728925  0.029385432    1.2834078    1.3037114   0.70820034  0.066666667    1.7820162          0.1  0.017705008    5.6481193    2.4965254    34.413227 -0.0037390939  -0.18754049  0.011493746    0.1965487 -0.0037390939  -0.18754049  0.011493746    0.1965487 
Loop time of 314.19 on 1 procs for 200000 steps with 9376 atoms

Performance: 274992.767 tau/day, 636.557 timesteps/s
99.3% CPU use with 1 MPI tasks x 1 OpenMP threads

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 30.364     | 30.364     | 30.364     |   0.0 |  9.66
Bond    | 65.734     | 65.734     | 65.734     |   0.0 | 20.92
Neigh   | 94.919     | 94.919     | 94.919     |   0.0 | 30.21
Comm    | 5.3188     | 5.3188     | 5.3188     |   0.0 |  1.69
Output  | 0.43671    | 0.43671    | 0.43671    |   0.0 |  0.14
Modify  | 111.89     | 111.89     | 111.89     |   0.0 | 35.61
Other   |            | 5.529      |            |       |  1.76

Nlocal:    9376 ave 9376 max 9376 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Nghost:    1792 ave 1792 max 1792 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Neighs:    13268 ave 13268 max 13268 min
Histogram: 1 0 0 0 0 0 0 0 0 0

Total # of neighbors = 13268
Ave neighs/atom = 1.4151
Ave special neighs/atom = 6.92833
Neighbor list builds = 28079
Dangerous builds = 0

#--- Write Restart File ---#

write_restart  ecs.rst
WARNING: compute stress/mop/profile does not account for bond potentials (src/USER-MISC/compute_stress_mop_profile.cpp:193)
WARNING: compute stress/mop/profile does not account for bond potentials (src/USER-MISC/compute_stress_mop_profile.cpp:193)
WARNING: compute stress/mop/profile does not account for bond potentials (src/USER-MISC/compute_stress_mop_profile.cpp:193)
shell          python post.py
shell          mkdir $(v_Vwalli)_V
shell          mkdir 