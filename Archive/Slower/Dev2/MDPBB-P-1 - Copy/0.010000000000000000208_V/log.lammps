LAMMPS (5 Jun 2019)
OMP_NUM_THREADS environment is not set. Defaulting to 1 thread. (src/comm.cpp:88)
  using 1 OpenMP thread(s) per MPI task
#--- Brush Variables---#
variable      f      equal  1
variable      M      equal  $(v_f * 60)                 # The number of polymer chains on each brush
variable      M      equal  60                 
variable      N      string 30                 # The number of beads per chain
variable      xhi    equal  $(sqrt(v_f) * 30)                 # The width of the polymer Brush
variable      xhi    equal  30                 
variable      yhi    equal  $(sqrt(v_f) * 30)                 # The length of the polymer Brush
variable      yhi    equal  30                 
variable      wthick equal  3                  # The thickness of the walls wthick=1,2,3,4 gives 2,3,4,6 layers respectively

#--- Simulation Variables ---#
variable       Temp      index 1        #0.8 1 1.68                 #[Grest96]
variable       Tstep     equal 0.005                       # Timestep in Tau (default = 0.005)
variable       Nequil    equal 300000                       # Number of timesteps to equilibrate
variable       Ncomp     equal 700000                     # Number of timesteps to compress - until no more occilation of walls
variable       Nshear    equal 1000000      #2000000                      # Number of timesteps to shear - use approx 4ns for 10m/s
variable       Nthermo   equal 1000                        # Number of timesteps between thermo data prints
variable       Ndump_e   equal 10000
variable       Ndump_c   equal 10000                      # Number of timesteps per dump file (compression)
variable       Ndump_s   equal 10000                       # Number of timesteps per dump file (shear)
variable       Wall_vi   index 0.01 # 0.1 0.2 0.4 0.6 0.8 1 1.2 1.4 1.6 1.8 2                   # Wall velocity (A/fs) - equal to 10 m/s
variable       Pcomp     index 1 # 0.5 2 0.05 4 8
variable       Wall_v    equal $(v_Wall_vi * 0.00000001)        #Added to try scale down the strain rates (10^-8)
variable       Wall_v    equal 1.0000000000000000364e-10        

include        MDPBB.in
# This is an input script that creates a mono disperse polymer brush bilayer
# A coarse grained bead-spring model is used for the polymers which are end
# grafted to the surfaces of 2 opposing FCC walls at random sites.

#--- Initialization ---#

dimension     3
boundary      p p f
units         lj
atom_style    bond


#--- Moved to main.in ---#
#variable      M      equal  50                # The number of polymer chains on each brush
#variable      N      string 80                # The number of beads per chain
#variable      xhi    equal  15                # The width of the polymer Brush
#variable      yhi    equal  20                # The length of the polymer Brush
#variable      wthick equal  3                 # The thickness of the walls wthick=1,2,3,4 gives 2,3,4,6 layers respectively

variable      zhi    equal  $(1.1 * 2 * v_N + (2 * v_wthick))  # The initial height of the simulation box the value is such that no overlaps occur
variable      zhi    equal  72  
variable      z0     equal  $((v_zhi)/4 - (v_N)/30)          # This is the location at which to place the CoM of the molecule
variable      z0     equal  17          

print "The number of grafted chains = $(v_M)"
The number of grafted chains = 60
print "The number of beads per chain = $(v_N)"
The number of beads per chain = 30

variable      check  equal count(all)         # The number of atoms in the system
variable      ntwall equal count(twall)       # The number of atoms in the top wall
variable      nbwall equal count(bwall)       # The number of atoms in the bottom wall
variable      s equal 234897  #45335              # Seed for the RNG

print "zhi = ${zhi}"
zhi = 72

#--- Create the simulation box ---#

region        sbox block 0 ${xhi} 0 ${yhi} 0 ${zhi}
region        sbox block 0 30 0 ${yhi} 0 ${zhi}
region        sbox block 0 30 0 30 0 ${zhi}
region        sbox block 0 30 0 30 0 72
create_box    4 sbox bond/types 3 extra/bond/per/atom 12 extra/special/per/atom 2
Created orthogonal box = (0 0 0) to (30 30 72)
  1 by 1 by 1 MPI processor grid

mass          1 2.0                   # Wall atoms that are not grafted
mass          2 1.0                   # Grafted bead
mass          3 1.0                   # The rest of the beads on the chain
mass          4 2.0                   # Wall atoms that the chains are grafted to

bond_style    hybrid fene harmonic    # Finitely extensible linearly elastic bond between neighbouring beads
#bond_coeff    1 fene 30.0 1.5 0.0 0.0      # Values obtained from literature [Grest, Galushcko]
bond_coeff    1 fene 30.0 30.0 0.0 0.0
bond_coeff    2 fene 30.0 30.0 0.0 0.0       # This is the grafting bond between the polymer and the wall atom
special_bonds fene                    #
  0 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0004373 secs
pair_style	  lj/cut 1.122462         # LJ potential with rc=2^1/6
#pair_coeff	  * * 1.0 1.0             # LJ potential acts between all atoms
pair_coeff    1 1 0.0 0.0
pair_coeff    1 2 1.0 1.0
pair_coeff    1 3 1.0 1.0
pair_coeff    2 2 1.0 1.0
pair_coeff    2 3 1.0 1.0
pair_coeff    2 4 1.0 1.0
pair_coeff    3 3 1.0 1.0
pair_coeff    3 4 1.0 1.0
pair_coeff    4 4 0.0 0.0
neighbor      10 bin                  #
neigh_modify  one 4000

#--- Create and read the molecule file ---#
python        BSMolf input 1 $N format i file BSMolf.py
python        BSMolf input 1 30 format i file BSMolf.py
python        BSMolf invoke    # Call the python function with number of beads to write the mol file
molecule      bs     bsmol.txt     # Read the Mol file to define the polymer chain
Read molecule bs:
  30 atoms with max type 2
  29 bonds with max type 1
  0 angles with max type 0
  0 dihedrals with max type 0
  0 impropers with max type 0

#--- Define the FCC wall region ---#
region        wall  block 0 ${xhi} 0 ${yhi} 0 ${wthick}
region        wall  block 0 30 0 ${yhi} 0 ${wthick}
region        wall  block 0 30 0 30 0 ${wthick}
region        wall  block 0 30 0 30 0 3
lattice       fcc 1
Lattice spacing in x,y,z = 1.5874 1.5874 1.5874

#--- Create the Top Brush  (At the bottom then rotate 180 degrees to top) ---#

create_atoms  1 region wall
Created 2888 atoms
  create_atoms CPU = 0.0016084 secs
group         twall  region wall
2888 atoms in group twall
#group         tsurf  region wsurf

# A loop to insert the Chains into the sim box
variable      i loop $M                                   # Index to insert N total number of chains
variable      i loop 60                                   
label         loop                                        # Start of loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1814                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1814]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 455                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[455]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2182                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2182]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2201                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2201]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2098                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2098]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2845                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2845]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1373                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1373]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 968                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[968]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1250                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1250]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2090                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2090]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2586                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2586]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 21                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[21]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 550                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[550]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 944                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[944]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2340                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2340]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2340 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2340                         
1 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 1
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 1
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2340]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2340]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 2888                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 2888+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 18.2551120976343 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 18.2551120976343 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001322 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 2918               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2340 $b
create_bonds  single/bond 2 2340 2889
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0023157 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2049                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2049]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1989                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1989]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1613                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1613]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2250                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2250]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1777                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1777]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1790                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1790]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 346                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[346]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2515                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2515]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2515 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2515                         
2 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 2
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 2
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2515]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2515]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 2918                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 2918+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 22.2236147275548 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 22.2236147275548 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 6.1e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 2948               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2515 $b
create_bonds  single/bond 2 2515 2919
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0034525 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1738                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1738]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2654                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2654]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2013                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2013]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2593                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2593]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1699                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1699]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1699 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1699                         
3 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 3
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 3
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1699]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1699]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 2948                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 2948+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 4.7622031559046 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 4.7622031559046 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000161 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 2978               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1699 $b
create_bonds  single/bond 2 1699 2949
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0043781 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2456                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2456]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2456 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2456                         
4 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 4
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 4
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2456]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2456]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 2978                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 2978+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 21.4299142015707 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 21.4299142015707 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001034 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3008               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2456 $b
create_bonds  single/bond 2 2456 2979
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0040867 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2420                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2420]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2420 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2420                         
5 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 5
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 5
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2420]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2420]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3008                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3008+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 19.8425131496025 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 19.8425131496025 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 6.65e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3038               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2420 $b
create_bonds  single/bond 2 2420 3009
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0033037 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1201                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1201]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2884                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2884]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2884 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2884                         
6 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 6
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 6
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2884]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2884]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3038                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3038+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 29.3669194614117 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 29.3669194614117 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 6.45e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3068               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2884 $b
create_bonds  single/bond 2 2884 3039
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0026436 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2815                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2815]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2815 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2815                         
7 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 7
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 7
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2815]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2815]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3068                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3068+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 28.5732189354276 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 28.5732189354276 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001073 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3098               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2815 $b
create_bonds  single/bond 2 2815 3069
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0032792 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2092                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2092]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2092 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2092                         
8 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 8
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 8
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2092]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2092]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3098                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3098+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 13.4929089417297 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 13.4929089417297 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 7.19e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3128               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2092 $b
create_bonds  single/bond 2 2092 3099
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0030118 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2713                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2713]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 682                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[682]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2694                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2694]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 378                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[378]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2456                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2456]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2456 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2456                         
8 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 8
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 9
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2456]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2456]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3128                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3128+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2698                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2698]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 989                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[989]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 752                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[752]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1918                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1918]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1347                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1347]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 418                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[418]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2659                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2659]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2659 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2659                         
9 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 9
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 9
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2659]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2659]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3128                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3128+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 29.3669194614117 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 29.3669194614117 23.811015779523 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 29.3669194614117 23.811015779523 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 6.66e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3158               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2659 $b
create_bonds  single/bond 2 2659 3129
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0022015 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2763                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2763]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2763 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2763                         
10 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 10
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 10
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2763]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2763]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3158                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3158+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 26.9858178834594 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 26.9858178834594 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001007 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3188               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2763 $b
create_bonds  single/bond 2 2763 3159
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0032004 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2611                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2611]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2611 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2611                         
11 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 11
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 11
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2611]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2611]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3188                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3188+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 23.811015779523 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 23.811015779523 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 7.29e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3218               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2611 $b
create_bonds  single/bond 2 2611 3189
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0028857 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2302                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2302]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1267                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1267]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1072                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1072]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2025                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2025]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 271                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[271]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1094                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1094]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1260                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1260]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 949                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[949]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1761                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1761]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 827                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[827]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 688                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[688]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 248                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[248]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1966                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1966]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2118                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2118]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 973                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[973]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1444                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1444]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1243                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1243]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 654                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[654]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1674                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1674]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 528                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[528]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2548                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2548]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2548 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2548                         
12 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 12
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 12
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2548]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2548]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3218                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3218+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 23.0173152535389 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 23.0173152535389 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.7e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3248               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2548 $b
create_bonds  single/bond 2 2548 3219
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0031374 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1332                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1332]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2833                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2833]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2217                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2217]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2656                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2656]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2656 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2656                         
13 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 13
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 13
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2656]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2656]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3248                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3248+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 24.6047163055071 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 24.6047163055071 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.23e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3278               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2656 $b
create_bonds  single/bond 2 2656 3249
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0045384 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2871                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2871]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2871 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2871                         
14 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 14
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 14
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2871]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2871]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3278                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3278+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 28.5732189354276 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 28.5732189354276 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 7.24e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3308               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2871 $b
create_bonds  single/bond 2 2871 3279
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0034078 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1369                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1369]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 959                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[959]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 203                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[203]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 747                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[747]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 524                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[524]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1185                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1185]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1726                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1726]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1374                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1374]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2398                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2398]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 430                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[430]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 478                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[478]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2316                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2316]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2316 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2316                         
15 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 15
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 15
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2316]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2316]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3308                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3308+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 18.2551120976343 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 18.2551120976343 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002399 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3338               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2316 $b
create_bonds  single/bond 2 2316 3309
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025657 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1832                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1832]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1832 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1832                         
16 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 16
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 16
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1832]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1832]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3338                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3338+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 8.7307057858251 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 8.7307057858251 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.74e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3368               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1832 $b
create_bonds  single/bond 2 1832 3339
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0042599 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 653                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[653]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 931                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[931]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 779                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[779]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2273                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2273]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2515                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2515]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2515 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2515                         
16 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 16
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 17
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2515]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2515]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3368                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3368+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1255                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1255]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2882                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2882]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1883                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1883]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1883 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1883                         
17 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 17
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 17
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1883]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1883]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3368                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3368+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 7.937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 7.937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000108 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3398               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1883 $b
create_bonds  single/bond 2 1883 3369
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025634 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2645                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2645]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1244                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1244]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1566                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1566]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2113                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2113]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1251                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1251]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 847                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[847]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 40                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[40]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 434                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[434]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1664                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1664]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1664 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1664                         
18 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 18
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 18
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1664]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1664]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3398                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3398+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 25.3984168314912 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 25.3984168314912 3.9685026299205 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 25.3984168314912 3.9685026299205 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000113 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3428               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1664 $b
create_bonds  single/bond 2 1664 3399
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0024157 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 306                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[306]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1466                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1466]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 521                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[521]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 949                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[949]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 111                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[111]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2713                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2713]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 993                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[993]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1043                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1043]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1408                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1408]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2124                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2124]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2124 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2124                         
19 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 19
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 19
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2124]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2124]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3428                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3428+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 13.4929089417297 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 13.4929089417297 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001016 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3458               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2124 $b
create_bonds  single/bond 2 2124 3429
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025799 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 530                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[530]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1460                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1460]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1460 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1460                         
20 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 20
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 20
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1460]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1460]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3458                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3458+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 0.7937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 0.7937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 7.69e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3488               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1460 $b
create_bonds  single/bond 2 1460 3459
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025912 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1385                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1385]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2667                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2667]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2667 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2667                         
21 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 21
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 21
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2667]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2667]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3488                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3488+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 25.3984168314912 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 25.3984168314912 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000105 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3518               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2667 $b
create_bonds  single/bond 2 2667 3489
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0031887 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 703                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[703]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1786                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1786]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 618                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[618]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2572                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2572]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2572 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2572                         
22 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 22
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 22
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2572]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2572]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3518                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3518+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 23.0173152535389 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 23.0173152535389 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 7.63e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3548               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2572 $b
create_bonds  single/bond 2 2572 3519
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0026854 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 514                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[514]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 917                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[917]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1098                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1098]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1545                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1545]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1199                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1199]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2297                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2297]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1647                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1647]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1647 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1647                         
23 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 23
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 23
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1647]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1647]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3548                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3548+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 3.1748021039364 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 3.1748021039364 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 7.24e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3578               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1647 $b
create_bonds  single/bond 2 1647 3549
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0034991 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1410                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1410]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1682                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1682]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 186                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[186]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 335                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[335]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1181                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1181]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 988                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[988]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1103                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1103]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1432                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1432]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2398                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2398]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2319                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2319]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2319 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2319                         
24 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 24
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 24
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2319]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2319]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3578                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3578+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 17.4614115716502 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 17.4614115716502 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001258 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3608               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2319 $b
create_bonds  single/bond 2 2319 3579
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0039041 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2859                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2859]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2859 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2859                         
25 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 25
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 25
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2859]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2859]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3608                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3608+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 28.5732189354276 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 28.5732189354276 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.38e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3638               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2859 $b
create_bonds  single/bond 2 2859 3609
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0030679 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 290                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[290]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1516                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1516]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1516 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1516                         
26 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 26
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 26
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1516]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1516]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3638                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3638+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 0.7937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 0.7937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.8e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3668               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1516 $b
create_bonds  single/bond 2 1516 3639
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.003055 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2473                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2473]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2726                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2726]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 956                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[956]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1598                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1598]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1165                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1165]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 993                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[993]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2335                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2335]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2335 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2335                         
27 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 27
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 27
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2335]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2335]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3668                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3668+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 17.4614115716502 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 17.4614115716502 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000115 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3698               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2335 $b
create_bonds  single/bond 2 2335 3669
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0024472 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1971                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1971]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1971 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1971                         
28 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 28
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 28
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1971]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1971]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3698                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3698+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 9.5244063118092 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 9.5244063118092 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 7.76e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3728               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1971 $b
create_bonds  single/bond 2 1971 3699
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0035515 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2830                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2830]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 503                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[503]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 426                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[426]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 837                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[837]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2152                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2152]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2152 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2152                         
29 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 29
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 29
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2152]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2152]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3728                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3728+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 15.0803099936979 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 15.0803099936979 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001168 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3758               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2152 $b
create_bonds  single/bond 2 2152 3729
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0030232 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2503                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2503]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2503 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2503                         
30 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 30
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 30
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2503]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2503]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3758                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3758+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 20.6362136755866 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 20.6362136755866 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.32e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3788               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2503 $b
create_bonds  single/bond 2 2503 3759
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0031278 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 88                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[88]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 56                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[56]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1079                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1079]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1596                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1596]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1596 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1596                         
31 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 31
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 31
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1596]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1596]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3788                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3788+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 2.3811015779523 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 2.3811015779523 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.26e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3818               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1596 $b
create_bonds  single/bond 2 1596 3789
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.004635 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2287                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2287]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2287 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2287                         
32 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 32
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 32
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2287]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2287]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3818                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3818+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 17.4614115716502 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 17.4614115716502 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000107 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3848               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2287 $b
create_bonds  single/bond 2 2287 3819
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0027318 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1166                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1166]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2130                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2130]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1309                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1309]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 88                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[88]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 390                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[390]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2532                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2532]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2532 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2532                         
33 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 33
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 33
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2532]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2532]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3848                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3848+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 23.0173152535389 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 23.0173152535389 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001143 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3878               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2532 $b
create_bonds  single/bond 2 2532 3849
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0027889 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2656                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2656]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2656 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2656                         
33 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 33
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 34
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2656]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2656]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3878                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3878+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 355                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[355]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1783                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1783]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1783 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1783                         
34 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 34
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 34
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1783]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1783]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3878                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3878+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 6.3496042078728 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 6.3496042078728 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002582 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3908               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1783 $b
create_bonds  single/bond 2 1783 3879
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0027297 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2349                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2349]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2243                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2243]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2243 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2243                         
35 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 35
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 35
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2243]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2243]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3908                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3908+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 15.874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 15.874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000133 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3938               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2243 $b
create_bonds  single/bond 2 2243 3909
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0055488 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2610                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2610]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2853                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2853]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 601                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[601]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 738                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[738]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2463                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2463]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2463 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2463                         
36 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 36
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 36
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2463]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2463]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3938                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3938+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 20.6362136755866 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 20.6362136755866 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.15e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3968               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2463 $b
create_bonds  single/bond 2 2463 3939
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0026547 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 318                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[318]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 641                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[641]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 529                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[529]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 49                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[49]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 73                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[73]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 704                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[704]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 678                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[678]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 257                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[257]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1929                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1929]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2683                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2683]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2683 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2683                         
37 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 37
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 37
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2683]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2683]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3968                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3968+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 25.3984168314912 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 25.3984168314912 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.17e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3998               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2683 $b
create_bonds  single/bond 2 2683 3969
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0034508 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1292                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1292]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2501                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2501]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2086                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2086]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2175                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2175]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2175 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2175                         
38 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 38
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 38
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2175]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2175]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3998                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3998+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 14.2866094677138 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 14.2866094677138 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001085 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4028               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2175 $b
create_bonds  single/bond 2 2175 3999
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.002711 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1470                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1470]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 146                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[146]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2257                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2257]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2131                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2131]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2131 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2131                         
39 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 39
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 39
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2131]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2131]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4028                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4028+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 14.2866094677138 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 14.2866094677138 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.76e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4058               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2131 $b
create_bonds  single/bond 2 2131 4029
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0034022 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 143                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[143]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1419                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1419]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 666                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[666]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 875                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[875]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 444                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[444]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2867                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2867]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2867 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2867                         
40 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 40
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 40
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2867]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2867]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4058                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4058+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 28.5732189354276 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 28.5732189354276 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.86e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4088               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2867 $b
create_bonds  single/bond 2 2867 4059
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0031986 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2240                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2240]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2240 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2240                         
41 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 41
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 41
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2240]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2240]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4088                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4088+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 16.6677110456661 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 16.6677110456661 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001109 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4118               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2240 $b
create_bonds  single/bond 2 2240 4089
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0026386 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 402                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[402]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 208                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[208]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2060                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2060]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2060 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2060                         
42 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 42
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 42
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2060]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2060]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4118                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4118+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 13.4929089417297 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 13.4929089417297 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001037 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4148               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2060 $b
create_bonds  single/bond 2 2060 4119
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0041552 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2173                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2173]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 74                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[74]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1924                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1924]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1924 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1924                         
43 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 43
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 43
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1924]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1924]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4148                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4148+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 10.3181068377933 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 10.3181068377933 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.42e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4178               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1924 $b
create_bonds  single/bond 2 1924 4149
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0035094 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 266                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[266]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 223                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[223]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1515                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1515]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1515 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1515                         
44 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 44
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 44
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1515]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1515]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4178                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4178+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 0 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 0 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001323 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4208               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1515 $b
create_bonds  single/bond 2 1515 4179
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0039112 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 915                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[915]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 387                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[387]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2109                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2109]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1796                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1796]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1796 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1796                         
45 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 45
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 45
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1796]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1796]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4208                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4208+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 17.4614115716502 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 17.4614115716502 7.1433047338569 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 17.4614115716502 7.1433047338569 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.27e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4238               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1796 $b
create_bonds  single/bond 2 1796 4209
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0023988 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 518                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[518]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 58                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[58]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 629                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[629]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2228                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2228]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2228 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2228                         
46 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 46
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 46
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2228]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2228]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4238                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4238+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 16.6677110456661 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 16.6677110456661 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001651 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4268               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2228 $b
create_bonds  single/bond 2 2228 4239
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0029846 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 732                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[732]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 957                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[957]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1247                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1247]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 539                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[539]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1420                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1420]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1653                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1653]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 758                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[758]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2614                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2614]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1442                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1442]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 364                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[364]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 554                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[554]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 583                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[583]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1500                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1500]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1500 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1500                         
47 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 47
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 47
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1500]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1500]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4268                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4268+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 0.7937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 0.7937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001072 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4298               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1500 $b
create_bonds  single/bond 2 1500 4269
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0022554 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 475                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[475]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2585                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2585]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2608                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2608]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2608 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2608                         
48 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 48
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 48
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2608]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2608]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4298                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4298+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 24.6047163055071 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 24.6047163055071 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.73e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4328               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2608 $b
create_bonds  single/bond 2 2608 4299
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0031726 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2797                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2797]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1961                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1961]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1745                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1745]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1288                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1288]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2773                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2773]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2495                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2495]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2495 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2495                         
49 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 49
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 49
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2495]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2495]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4328                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4328+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 24.6047163055071 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 24.6047163055071 20.6362136755866 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 24.6047163055071 20.6362136755866 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000104 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4358               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2495 $b
create_bonds  single/bond 2 2495 4329
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0030726 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 812                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[812]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2814                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2814]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2406                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2406]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1265                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1265]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1564                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1564]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1564 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1564                         
50 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 50
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 50
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1564]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1564]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4358                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4358+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 2.3811015779523 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 2.3811015779523 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001158 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4388               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1564 $b
create_bonds  single/bond 2 1564 4359
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0024837 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 796                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[796]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 398                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[398]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 666                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[666]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2366                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2366]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 636                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[636]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1669                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1669]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1946                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1946]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 624                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[624]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1619                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1619]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1619 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1619                         
51 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 51
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 51
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1619]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1619]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4388                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4388+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 3.1748021039364 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 3.1748021039364 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001137 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4418               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1619 $b
create_bonds  single/bond 2 1619 4389
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0047467 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1780                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1780]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1780 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1780                         
52 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 52
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 52
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1780]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1780]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4418                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4418+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 7.1433047338569 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 7.1433047338569 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001344 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4448               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1780 $b
create_bonds  single/bond 2 1780 4419
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025221 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2733                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2733]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1621                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1621]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2712                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2712]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2712 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2712                         
53 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 53
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 53
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2712]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2712]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4448                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4448+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 26.1921173574753 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 26.1921173574753 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001015 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4478               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2712 $b
create_bonds  single/bond 2 2712 4449
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025949 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 251                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[251]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1920                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1920]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1920 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1920                         
54 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 54
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 54
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1920]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1920]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4478                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4478+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 6.3496042078728 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 6.3496042078728 10.3181068377933 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 6.3496042078728 10.3181068377933 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.59e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4508               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1920 $b
create_bonds  single/bond 2 1920 4479
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025874 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 206                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[206]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1636                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1636]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1636 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1636                         
55 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 55
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 55
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1636]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1636]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4508                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4508+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 3.9685026299205 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 3.9685026299205 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001362 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4538               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1636 $b
create_bonds  single/bond 2 1636 4509
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025119 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2178                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2178]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2703                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2703]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2703 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2703                         
56 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 56
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 56
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2703]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2703]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4538                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4538+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 25.3984168314912 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 25.3984168314912 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.77e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4568               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2703 $b
create_bonds  single/bond 2 2703 4539
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025064 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2744                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2744]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2744 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2744                         
57 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 57
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 57
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2744]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2744]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4568                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4568+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 27.7795184094435 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 27.7795184094435 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.08e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4598               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2744 $b
create_bonds  single/bond 2 2744 4569
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0052218 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 492                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[492]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2352                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2352]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2352 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2352                         
58 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 58
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 58
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2352]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2352]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4598                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4598+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 18.2551120976343 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 18.2551120976343 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001201 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4628               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2352 $b
create_bonds  single/bond 2 2352 4599
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0054566 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 487                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[487]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 119                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[119]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1896                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1896]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1896 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1896                         
59 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 59
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 59
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1896]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1896]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4628                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4628+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 8.7307057858251 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 8.7307057858251 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001035 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4658               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1896 $b
create_bonds  single/bond 2 1896 4629
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0036073 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1418                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1418]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1388                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1388]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1821                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1821]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2888,$s))  
variable      randni equal round(random(1,2888,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2675                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2675]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2675 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2675                         
60 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 60
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 60
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2675]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2675]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4658                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4658+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 25.3984168314912 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 25.3984168314912 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001088 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4688               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2675 $b
create_bonds  single/bond 2 2675 4659
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0047011 secs
next i
jump MDPBB.in loop    # End of the loop

# Rotate the created brush about the centre of the simulation box by 180 degrees to make it true top brush
displace_atoms all rotate $(v_xhi/2.0) $(v_yhi/2.0) $(v_zhi/2.0 - 1) 1 0 0 180 units box
displace_atoms all rotate 15 $(v_yhi/2.0) $(v_zhi/2.0 - 1) 1 0 0 180 units box
displace_atoms all rotate 15 15 $(v_zhi/2.0 - 1) 1 0 0 180 units box
displace_atoms all rotate 15 15 35 1 0 0 180 units box

variable      ntop0 equal ${check}          # Count the total number of atoms in the top brush
variable      ntop0 equal 4688          

#--- Create the Bottom brush ---#

# Repeating the same procedure as above again but with new atoms

create_atoms  1 region wall
Created 2888 atoms
  create_atoms CPU = 0.0005448 secs
group         bwall region wall
2888 atoms in group bwall
variable      nbwall0 equal ${nbwall}
variable      nbwall0 equal 2888

variable      j loop $M
variable      j loop 60
label         loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7002
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7002]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5727
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5727]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4819
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4819]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5861
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5861]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5690
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5690]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7380
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7380]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7380 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7380                         
1 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 1
print         "j = $(v_j)"
j = 1
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7380]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7380]
variable      check0 equal ${check}
variable      check0 equal 7576
variable      b equal ${check}+1
variable      b equal 7576+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 26.1921173574753 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 26.1921173574753 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001535 secs
variable      check1 equal ${check}
variable      check1 equal 7606
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7380 $b
create_bonds  single/bond 2 7380 7577
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0023542 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5120
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5120]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6410
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6410]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7324
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7324]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7324 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7324                         
2 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 2
print         "j = $(v_j)"
j = 2
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7324]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7324]
variable      check0 equal ${check}
variable      check0 equal 7606
variable      b equal ${check}+1
variable      b equal 7606+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 24.6047163055071 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 24.6047163055071 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001371 secs
variable      check1 equal ${check}
variable      check1 equal 7636
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7324 $b
create_bonds  single/bond 2 7324 7607
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0046029 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6217
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6217]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5579
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5579]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4915
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4915]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5328
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5328]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5779
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5779]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4818
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4818]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6472
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6472]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6472 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6472                         
3 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 3
print         "j = $(v_j)"
j = 3
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6472]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6472]
variable      check0 equal ${check}
variable      check0 equal 7636
variable      b equal ${check}+1
variable      b equal 7636+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 7.1433047338569 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 7.1433047338569 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001519 secs
variable      check1 equal ${check}
variable      check1 equal 7666
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6472 $b
create_bonds  single/bond 2 6472 7637
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0034398 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6572
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6572]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6572 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6572                         
4 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 4
print         "j = $(v_j)"
j = 4
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6572]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6572]
variable      check0 equal ${check}
variable      check0 equal 7666
variable      b equal ${check}+1
variable      b equal 7666+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 8.7307057858251 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 8.7307057858251 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001722 secs
variable      check1 equal ${check}
variable      check1 equal 7696
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6572 $b
create_bonds  single/bond 2 6572 7667
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0029181 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5475
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5475]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6400
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6400]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6400 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6400                         
5 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 5
print         "j = $(v_j)"
j = 5
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6400]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6400]
variable      check0 equal ${check}
variable      check0 equal 7696
variable      b equal ${check}+1
variable      b equal 7696+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 5.5559036818887 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 5.5559036818887 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001317 secs
variable      check1 equal ${check}
variable      check1 equal 7726
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6400 $b
create_bonds  single/bond 2 6400 7697
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0041021 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5790
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5790]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5886
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5886]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6230
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6230]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6559
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6559]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6559 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6559                         
6 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 6
print         "j = $(v_j)"
j = 6
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6559]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6559]
variable      check0 equal ${check}
variable      check0 equal 7726
variable      b equal ${check}+1
variable      b equal 7726+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 7.937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 7.937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001909 secs
variable      check1 equal ${check}
variable      check1 equal 7756
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6559 $b
create_bonds  single/bond 2 6559 7727
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025641 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7209
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7209]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6052
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6052]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5316
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5316]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7462
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7462]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6373
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6373]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6702
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6702]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7460
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7460]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7460 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7460                         
7 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 7
print         "j = $(v_j)"
j = 7
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7460]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7460]
variable      check0 equal ${check}
variable      check0 equal 7756
variable      b equal ${check}+1
variable      b equal 7756+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 27.7795184094435 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 27.7795184094435 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000188 secs
variable      check1 equal ${check}
variable      check1 equal 7786
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7460 $b
create_bonds  single/bond 2 7460 7757
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0031482 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7149
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7149]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5103
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5103]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6858
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6858]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5049
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5049]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7113
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7113]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5286
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5286]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5248
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5248]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5458
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5458]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7514
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7514]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5887
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5887]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7514
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7514]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6420
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6420]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6420 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6420                         
8 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 8
print         "j = $(v_j)"
j = 8
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6420]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6420]
variable      check0 equal ${check}
variable      check0 equal 7786
variable      b equal ${check}+1
variable      b equal 7786+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 5.5559036818887 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 5.5559036818887 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001397 secs
variable      check1 equal ${check}
variable      check1 equal 7816
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6420 $b
create_bonds  single/bond 2 6420 7787
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0041289 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6183
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6183]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6183 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6183                         
9 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 9
print         "j = $(v_j)"
j = 9
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6183]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6183]
variable      check0 equal ${check}
variable      check0 equal 7816
variable      b equal ${check}+1
variable      b equal 7816+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 0 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 0 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001318 secs
variable      check1 equal ${check}
variable      check1 equal 7846
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6183 $b
create_bonds  single/bond 2 6183 7817
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0022785 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5540
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5540]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6812
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6812]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6812 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6812                         
10 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 10
print         "j = $(v_j)"
j = 10
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6812]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6812]
variable      check0 equal ${check}
variable      check0 equal 7846
variable      b equal ${check}+1
variable      b equal 7846+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 13.4929089417297 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 13.4929089417297 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002598 secs
variable      check1 equal ${check}
variable      check1 equal 7876
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6812 $b
create_bonds  single/bond 2 6812 7847
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0033066 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5712
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5712]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6811
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6811]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6811 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6811                         
11 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 11
print         "j = $(v_j)"
j = 11
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6811]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6811]
variable      check0 equal ${check}
variable      check0 equal 7876
variable      b equal ${check}+1
variable      b equal 7876+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 12.6992084157456 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 12.6992084157456 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001399 secs
variable      check1 equal ${check}
variable      check1 equal 7906
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6811 $b
create_bonds  single/bond 2 6811 7877
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0024061 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5306
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5306]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6827
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6827]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6827 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6827                         
12 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 12
print         "j = $(v_j)"
j = 12
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6827]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6827]
variable      check0 equal ${check}
variable      check0 equal 7906
variable      b equal ${check}+1
variable      b equal 7906+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 14.2866094677138 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 14.2866094677138 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001418 secs
variable      check1 equal ${check}
variable      check1 equal 7936
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6827 $b
create_bonds  single/bond 2 6827 7907
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0039981 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6871
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6871]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6871 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6871                         
13 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 13
print         "j = $(v_j)"
j = 13
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6871]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6871]
variable      check0 equal ${check}
variable      check0 equal 7936
variable      b equal ${check}+1
variable      b equal 7936+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 14.2866094677138 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 14.2866094677138 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000184 secs
variable      check1 equal ${check}
variable      check1 equal 7966
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6871 $b
create_bonds  single/bond 2 6871 7937
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0030328 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5320
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5320]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5902
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5902]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4971
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4971]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7109
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7109]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7059
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7059]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7059 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7059                         
14 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 14
print         "j = $(v_j)"
j = 14
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7059]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7059]
variable      check0 equal ${check}
variable      check0 equal 7966
variable      b equal ${check}+1
variable      b equal 7966+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 19.0488126236184 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 19.0488126236184 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001888 secs
variable      check1 equal ${check}
variable      check1 equal 7996
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7059 $b
create_bonds  single/bond 2 7059 7967
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0053223 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7269
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7269]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5073
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5073]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4847
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4847]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6066
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6066]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5021
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5021]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6970
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6970]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6557
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6557]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6838
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6838]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6783
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6783]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6783 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6783                         
15 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 15
print         "j = $(v_j)"
j = 15
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6783]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6783]
variable      check0 equal ${check}
variable      check0 equal 7996
variable      b equal ${check}+1
variable      b equal 7996+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 12.6992084157456 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 12.6992084157456 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000187 secs
variable      check1 equal ${check}
variable      check1 equal 8026
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6783 $b
create_bonds  single/bond 2 6783 7997
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0040191 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6373
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6373]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5528
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5528]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7512
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7512]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7512 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7512                         
16 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 16
print         "j = $(v_j)"
j = 16
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7512]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7512]
variable      check0 equal ${check}
variable      check0 equal 8026
variable      b equal ${check}+1
variable      b equal 8026+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 29.3669194614117 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 29.3669194614117 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001382 secs
variable      check1 equal ${check}
variable      check1 equal 8056
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7512 $b
create_bonds  single/bond 2 7512 8027
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0042175 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7066
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7066]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6554
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6554]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7511
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7511]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7511 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7511                         
17 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 17
print         "j = $(v_j)"
j = 17
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7511]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7511]
variable      check0 equal ${check}
variable      check0 equal 8056
variable      b equal ${check}+1
variable      b equal 8056+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 28.5732189354276 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 28.5732189354276 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001453 secs
variable      check1 equal ${check}
variable      check1 equal 8086
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7511 $b
create_bonds  single/bond 2 7511 8057
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.005428 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5999
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5999]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6961
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6961]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5288
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5288]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6011
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6011]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5812
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5812]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6044
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6044]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6112
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6112]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6318
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6318]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6801
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6801]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5908
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5908]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6934
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6934]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7157
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7157]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7211
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7211]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7211 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7211                         
18 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 18
print         "j = $(v_j)"
j = 18
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7211]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7211]
variable      check0 equal ${check}
variable      check0 equal 8086
variable      b equal ${check}+1
variable      b equal 8086+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 22.2236147275548 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 22.2236147275548 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002727 secs
variable      check1 equal ${check}
variable      check1 equal 8116
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7211 $b
create_bonds  single/bond 2 7211 8087
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0041087 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5478
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5478]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4755
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4755]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7547
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7547]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7547 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7547                         
19 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 19
print         "j = $(v_j)"
j = 19
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7547]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7547]
variable      check0 equal ${check}
variable      check0 equal 8116
variable      b equal ${check}+1
variable      b equal 8116+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 28.5732189354276 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 28.5732189354276 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001867 secs
variable      check1 equal ${check}
variable      check1 equal 8146
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7547 $b
create_bonds  single/bond 2 7547 8117
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0026377 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7251
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7251]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7251 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7251                         
20 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 20
print         "j = $(v_j)"
j = 20
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7251]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7251]
variable      check0 equal ${check}
variable      check0 equal 8146
variable      b equal ${check}+1
variable      b equal 8146+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 22.2236147275548 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 22.2236147275548 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001449 secs
variable      check1 equal ${check}
variable      check1 equal 8176
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7251 $b
create_bonds  single/bond 2 7251 8147
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0029255 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5772
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5772]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7515
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7515]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7515 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7515                         
21 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 21
print         "j = $(v_j)"
j = 21
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7515]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7515]
variable      check0 equal ${check}
variable      check0 equal 8176
variable      b equal ${check}+1
variable      b equal 8176+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 28.5732189354276 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 28.5732189354276 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001845 secs
variable      check1 equal ${check}
variable      check1 equal 8206
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7515 $b
create_bonds  single/bond 2 7515 8177
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0061771 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7113
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7113]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6791
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6791]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6791 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6791                         
22 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 22
print         "j = $(v_j)"
j = 22
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6791]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6791]
variable      check0 equal ${check}
variable      check0 equal 8206
variable      b equal ${check}+1
variable      b equal 8206+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 12.6992084157456 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 12.6992084157456 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001538 secs
variable      check1 equal ${check}
variable      check1 equal 8236
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6791 $b
create_bonds  single/bond 2 6791 8207
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0045216 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6522
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6522]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4886
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4886]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6664
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6664]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6664 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6664                         
23 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 23
print         "j = $(v_j)"
j = 23
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6664]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6664]
variable      check0 equal ${check}
variable      check0 equal 8236
variable      b equal ${check}+1
variable      b equal 8236+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 10.3181068377933 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 10.3181068377933 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000164 secs
variable      check1 equal ${check}
variable      check1 equal 8266
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6664 $b
create_bonds  single/bond 2 6664 8237
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0098696 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5477
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5477]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6947
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6947]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6947 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6947                         
24 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 24
print         "j = $(v_j)"
j = 24
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6947]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6947]
variable      check0 equal ${check}
variable      check0 equal 8266
variable      b equal ${check}+1
variable      b equal 8266+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 15.874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 15.874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002032 secs
variable      check1 equal ${check}
variable      check1 equal 8296
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6947 $b
create_bonds  single/bond 2 6947 8267
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0061443 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6285
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6285]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4764
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4764]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5651
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5651]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6965
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6965]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6883
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6883]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6883 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6883                         
25 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 25
print         "j = $(v_j)"
j = 25
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6883]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6883]
variable      check0 equal ${check}
variable      check0 equal 8296
variable      b equal ${check}+1
variable      b equal 8296+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.1921173574753 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.1921173574753 14.2866094677138 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.1921173574753 14.2866094677138 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001821 secs
variable      check1 equal ${check}
variable      check1 equal 8326
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6883 $b
create_bonds  single/bond 2 6883 8297
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0039391 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5653
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5653]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4816
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4816]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5385
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5385]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7030
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7030]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5160
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5160]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7535
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7535]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7535 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7535                         
26 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 26
print         "j = $(v_j)"
j = 26
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7535]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7535]
variable      check0 equal ${check}
variable      check0 equal 8326
variable      b equal ${check}+1
variable      b equal 8326+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 28.5732189354276 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 28.5732189354276 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002487 secs
variable      check1 equal ${check}
variable      check1 equal 8356
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7535 $b
create_bonds  single/bond 2 7535 8327
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.004779 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5526
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5526]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5948
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5948]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4722
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4722]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6284
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6284]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6284 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6284                         
27 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 27
print         "j = $(v_j)"
j = 27
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6284]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6284]
variable      check0 equal ${check}
variable      check0 equal 8356
variable      b equal ${check}+1
variable      b equal 8356+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 2.3811015779523 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 2.3811015779523 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001722 secs
variable      check1 equal ${check}
variable      check1 equal 8386
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6284 $b
create_bonds  single/bond 2 6284 8357
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0031336 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6159
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6159]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6159 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6159                         
28 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 28
print         "j = $(v_j)"
j = 28
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6159]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6159]
variable      check0 equal ${check}
variable      check0 equal 8386
variable      b equal ${check}+1
variable      b equal 8386+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 0 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 0 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001532 secs
variable      check1 equal ${check}
variable      check1 equal 8416
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6159 $b
create_bonds  single/bond 2 6159 8387
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0031764 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7135
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7135]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7135 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7135                         
29 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 29
print         "j = $(v_j)"
j = 29
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7135]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7135]
variable      check0 equal ${check}
variable      check0 equal 8416
variable      b equal ${check}+1
variable      b equal 8416+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 20.6362136755866 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 20.6362136755866 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001658 secs
variable      check1 equal ${check}
variable      check1 equal 8446
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7135 $b
create_bonds  single/bond 2 7135 8417
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0048131 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7527
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7527]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7527 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7527                         
30 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 30
print         "j = $(v_j)"
j = 30
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7527]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7527]
variable      check0 equal ${check}
variable      check0 equal 8446
variable      b equal ${check}+1
variable      b equal 8446+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 28.5732189354276 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 28.5732189354276 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002198 secs
variable      check1 equal ${check}
variable      check1 equal 8476
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7527 $b
create_bonds  single/bond 2 7527 8447
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0036159 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7524
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7524]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7524 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7524                         
31 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 31
print         "j = $(v_j)"
j = 31
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7524]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7524]
variable      check0 equal ${check}
variable      check0 equal 8476
variable      b equal ${check}+1
variable      b equal 8476+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 29.3669194614117 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 29.3669194614117 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001891 secs
variable      check1 equal ${check}
variable      check1 equal 8506
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7524 $b
create_bonds  single/bond 2 7524 8477
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0029304 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6825
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6825]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6378
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6378]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5626
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5626]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7384
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7384]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7384 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7384                         
32 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 32
print         "j = $(v_j)"
j = 32
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7384]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7384]
variable      check0 equal ${check}
variable      check0 equal 8506
variable      b equal ${check}+1
variable      b equal 8506+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 26.1921173574753 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 26.1921173574753 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000197 secs
variable      check1 equal ${check}
variable      check1 equal 8536
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7384 $b
create_bonds  single/bond 2 7384 8507
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0033712 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6438
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6438]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6997
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6997]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5415
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5415]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6398
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6398]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7296
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7296]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7296 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7296                         
33 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 33
print         "j = $(v_j)"
j = 33
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7296]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7296]
variable      check0 equal ${check}
variable      check0 equal 8536
variable      b equal ${check}+1
variable      b equal 8536+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 24.6047163055071 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 24.6047163055071 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000147 secs
variable      check1 equal ${check}
variable      check1 equal 8566
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7296 $b
create_bonds  single/bond 2 7296 8537
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0029551 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4906
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4906]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5300
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5300]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5597
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5597]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4903
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4903]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5593
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5593]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6439
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6439]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6439 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6439                         
34 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 34
print         "j = $(v_j)"
j = 34
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6439]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6439]
variable      check0 equal ${check}
variable      check0 equal 8566
variable      b equal ${check}+1
variable      b equal 8566+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 6.3496042078728 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 6.3496042078728 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002193 secs
variable      check1 equal ${check}
variable      check1 equal 8596
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6439 $b
create_bonds  single/bond 2 6439 8567
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0043064 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7469
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7469]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7075
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7075]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7075 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7075                         
35 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 35
print         "j = $(v_j)"
j = 35
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7075]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7075]
variable      check0 equal ${check}
variable      check0 equal 8596
variable      b equal ${check}+1
variable      b equal 8596+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 19.0488126236184 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 19.0488126236184 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001719 secs
variable      check1 equal ${check}
variable      check1 equal 8626
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7075 $b
create_bonds  single/bond 2 7075 8597
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025173 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5252
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5252]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6614
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6614]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6483
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6483]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6483 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6483                         
36 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 36
print         "j = $(v_j)"
j = 36
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6483]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6483]
variable      check0 equal ${check}
variable      check0 equal 8626
variable      b equal ${check}+1
variable      b equal 8626+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 6.3496042078728 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 6.3496042078728 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001609 secs
variable      check1 equal ${check}
variable      check1 equal 8656
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6483 $b
create_bonds  single/bond 2 6483 8627
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0028398 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4917
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4917]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6927
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6927]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6927 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6927                         
37 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 37
print         "j = $(v_j)"
j = 37
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6927]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6927]
variable      check0 equal ${check}
variable      check0 equal 8656
variable      b equal ${check}+1
variable      b equal 8656+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 15.874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 15.874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001595 secs
variable      check1 equal ${check}
variable      check1 equal 8686
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6927 $b
create_bonds  single/bond 2 6927 8657
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.003198 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5339
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5339]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7433
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7433]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6139
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6139]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6139 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6139                         
38 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 38
print         "j = $(v_j)"
j = 38
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6139]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6139]
variable      check0 equal ${check}
variable      check0 equal 8686
variable      b equal ${check}+1
variable      b equal 8686+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 0 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 0 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001778 secs
variable      check1 equal ${check}
variable      check1 equal 8716
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6139 $b
create_bonds  single/bond 2 6139 8687
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025746 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5934
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5934]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5214
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5214]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6657
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6657]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7511
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7511]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7511 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7511                         
38 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 38
print         "j = $(v_j)"
j = 39
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7511]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7511]
variable      check0 equal ${check}
variable      check0 equal 8716
variable      b equal ${check}+1
variable      b equal 8716+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7450
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7450]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6423
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6423]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6423 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6423                         
39 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 39
print         "j = $(v_j)"
j = 39
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6423]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6423]
variable      check0 equal ${check}
variable      check0 equal 8716
variable      b equal ${check}+1
variable      b equal 8716+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 24.6047163055071 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 24.6047163055071 4.7622031559046 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 24.6047163055071 4.7622031559046 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001689 secs
variable      check1 equal ${check}
variable      check1 equal 8746
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6423 $b
create_bonds  single/bond 2 6423 8717
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025464 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7393
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7393]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7163
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7163]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7163 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7163                         
40 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 40
print         "j = $(v_j)"
j = 40
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7163]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7163]
variable      check0 equal ${check}
variable      check0 equal 8746
variable      b equal ${check}+1
variable      b equal 8746+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 20.6362136755866 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 20.6362136755866 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001716 secs
variable      check1 equal ${check}
variable      check1 equal 8776
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7163 $b
create_bonds  single/bond 2 7163 8747
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0024659 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6874
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6874]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4819
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4819]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6139
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6139]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6139 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6139                         
40 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 40
print         "j = $(v_j)"
j = 41
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6139]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6139]
variable      check0 equal ${check}
variable      check0 equal 8776
variable      b equal ${check}+1
variable      b equal 8776+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5648
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5648]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5234
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5234]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6685
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6685]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6470
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6470]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5136
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5136]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7398
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7398]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7280
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7280]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7280 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7280                         
41 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 41
print         "j = $(v_j)"
j = 41
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7280]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7280]
variable      check0 equal ${check}
variable      check0 equal 8776
variable      b equal ${check}+1
variable      b equal 8776+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 24.6047163055071 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 24.6047163055071 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000167 secs
variable      check1 equal ${check}
variable      check1 equal 8806
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7280 $b
create_bonds  single/bond 2 7280 8777
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0041281 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4902
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4902]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6203
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6203]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6203 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6203                         
42 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 42
print         "j = $(v_j)"
j = 42
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6203]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6203]
variable      check0 equal ${check}
variable      check0 equal 8806
variable      b equal ${check}+1
variable      b equal 8806+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 0 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 0 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001595 secs
variable      check1 equal ${check}
variable      check1 equal 8836
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6203 $b
create_bonds  single/bond 2 6203 8807
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0038378 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5272
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5272]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5489
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5489]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5116
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5116]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7388
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7388]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7388 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7388                         
43 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 43
print         "j = $(v_j)"
j = 43
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7388]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7388]
variable      check0 equal ${check}
variable      check0 equal 8836
variable      b equal ${check}+1
variable      b equal 8836+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 26.1921173574753 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 26.1921173574753 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001895 secs
variable      check1 equal ${check}
variable      check1 equal 8866
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7388 $b
create_bonds  single/bond 2 7388 8837
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.004321 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5764
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5764]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5506
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5506]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6419
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6419]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6419 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6419                         
44 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 44
print         "j = $(v_j)"
j = 44
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6419]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6419]
variable      check0 equal ${check}
variable      check0 equal 8866
variable      b equal ${check}+1
variable      b equal 8866+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 4.7622031559046 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 4.7622031559046 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001927 secs
variable      check1 equal ${check}
variable      check1 equal 8896
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6419 $b
create_bonds  single/bond 2 6419 8867
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0034549 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6355
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6355]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6355 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6355                         
45 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 45
print         "j = $(v_j)"
j = 45
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6355]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6355]
variable      check0 equal ${check}
variable      check0 equal 8896
variable      b equal ${check}+1
variable      b equal 8896+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 3.1748021039364 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 3.1748021039364 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001714 secs
variable      check1 equal ${check}
variable      check1 equal 8926
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6355 $b
create_bonds  single/bond 2 6355 8897
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0027217 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7313
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7313]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4947
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4947]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5689
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5689]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4712
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4712]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7556
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7556]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7556 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7556                         
46 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 46
print         "j = $(v_j)"
j = 46
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7556]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7556]
variable      check0 equal ${check}
variable      check0 equal 8926
variable      b equal ${check}+1
variable      b equal 8926+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 29.3669194614117 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 29.3669194614117 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001494 secs
variable      check1 equal ${check}
variable      check1 equal 8956
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7556 $b
create_bonds  single/bond 2 7556 8927
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0024403 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6259
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6259]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6259 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6259                         
47 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 47
print         "j = $(v_j)"
j = 47
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6259]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6259]
variable      check0 equal ${check}
variable      check0 equal 8956
variable      b equal ${check}+1
variable      b equal 8956+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 1.5874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 1.5874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002379 secs
variable      check1 equal ${check}
variable      check1 equal 8986
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6259 $b
create_bonds  single/bond 2 6259 8957
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025391 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5615
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5615]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5972
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5972]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5542
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5542]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5059
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5059]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4738
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4738]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5140
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5140]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4955
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4955]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5839
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5839]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6227
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6227]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6227 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6227                         
48 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 48
print         "j = $(v_j)"
j = 48
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6227]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6227]
variable      check0 equal ${check}
variable      check0 equal 8986
variable      b equal ${check}+1
variable      b equal 8986+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 1.5874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 1.5874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001781 secs
variable      check1 equal ${check}
variable      check1 equal 9016
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6227 $b
create_bonds  single/bond 2 6227 8987
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0027737 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5928
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5928]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6258
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6258]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6844
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6844]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6844 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6844                         
49 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 49
print         "j = $(v_j)"
j = 49
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6844]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6844]
variable      check0 equal ${check}
variable      check0 equal 9016
variable      b equal ${check}+1
variable      b equal 9016+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 15.0803099936979 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 15.0803099936979 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001747 secs
variable      check1 equal ${check}
variable      check1 equal 9046
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6844 $b
create_bonds  single/bond 2 6844 9017
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0038157 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6310
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6310]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7520
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7520]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7520 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7520                         
50 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 50
print         "j = $(v_j)"
j = 50
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7520]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7520]
variable      check0 equal ${check}
variable      check0 equal 9046
variable      b equal ${check}+1
variable      b equal 9046+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 6.3496042078728 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 6.3496042078728 29.3669194614117 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 6.3496042078728 29.3669194614117 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001957 secs
variable      check1 equal ${check}
variable      check1 equal 9076
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7520 $b
create_bonds  single/bond 2 7520 9047
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025728 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7014
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7014]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7322
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7322]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4760
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4760]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7269
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7269]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5867
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5867]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7454
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7454]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7033
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7033]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6723
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6723]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6723 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6723                         
51 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 51
print         "j = $(v_j)"
j = 51
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6723]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6723]
variable      check0 equal ${check}
variable      check0 equal 9076
variable      b equal ${check}+1
variable      b equal 9076+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 11.1118073637774 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 11.1118073637774 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001741 secs
variable      check1 equal ${check}
variable      check1 equal 9106
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6723 $b
create_bonds  single/bond 2 6723 9077
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0032334 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7082
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7082]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7054
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7054]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7400
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7400]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7400 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7400                         
52 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 52
print         "j = $(v_j)"
j = 52
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7400]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7400]
variable      check0 equal ${check}
variable      check0 equal 9106
variable      b equal ${check}+1
variable      b equal 9106+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 26.1921173574753 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 26.1921173574753 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000174 secs
variable      check1 equal ${check}
variable      check1 equal 9136
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7400 $b
create_bonds  single/bond 2 7400 9107
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0042234 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6968
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6968]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6968 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6968                         
53 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 53
print         "j = $(v_j)"
j = 53
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6968]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6968]
variable      check0 equal ${check}
variable      check0 equal 9136
variable      b equal ${check}+1
variable      b equal 9136+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 16.6677110456661 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 16.6677110456661 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001544 secs
variable      check1 equal ${check}
variable      check1 equal 9166
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6968 $b
create_bonds  single/bond 2 6968 9137
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0035293 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6030
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6030]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5147
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5147]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6960
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6960]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6960 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6960                         
54 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 54
print         "j = $(v_j)"
j = 54
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6960]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6960]
variable      check0 equal ${check}
variable      check0 equal 9166
variable      b equal ${check}+1
variable      b equal 9166+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 25.3984168314912 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 25.3984168314912 16.6677110456661 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 25.3984168314912 16.6677110456661 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001755 secs
variable      check1 equal ${check}
variable      check1 equal 9196
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6960 $b
create_bonds  single/bond 2 6960 9167
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.004177 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7023
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7023]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7023 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7023                         
55 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 55
print         "j = $(v_j)"
j = 55
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7023]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7023]
variable      check0 equal ${check}
variable      check0 equal 9196
variable      b equal ${check}+1
variable      b equal 9196+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 17.4614115716502 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 17.4614115716502 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001916 secs
variable      check1 equal ${check}
variable      check1 equal 9226
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7023 $b
create_bonds  single/bond 2 7023 9197
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0024763 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7308
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7308]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7308 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7308                         
56 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 56
print         "j = $(v_j)"
j = 56
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7308]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7308]
variable      check0 equal ${check}
variable      check0 equal 9226
variable      b equal ${check}+1
variable      b equal 9226+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 24.6047163055071 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 24.6047163055071 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001563 secs
variable      check1 equal ${check}
variable      check1 equal 9256
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7308 $b
create_bonds  single/bond 2 7308 9227
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0032005 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6204
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6204]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6204 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6204                         
57 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 57
print         "j = $(v_j)"
j = 57
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6204]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6204]
variable      check0 equal ${check}
variable      check0 equal 9256
variable      b equal ${check}+1
variable      b equal 9256+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 0.7937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 0.7937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001573 secs
variable      check1 equal ${check}
variable      check1 equal 9286
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6204 $b
create_bonds  single/bond 2 6204 9257
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0023411 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4705
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4705]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5341
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5341]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6176
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6176]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6176 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6176                         
58 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 58
print         "j = $(v_j)"
j = 58
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6176]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6176]
variable      check0 equal ${check}
variable      check0 equal 9286
variable      b equal ${check}+1
variable      b equal 9286+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 0.7937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 0.7937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001873 secs
variable      check1 equal ${check}
variable      check1 equal 9316
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6176 $b
create_bonds  single/bond 2 6176 9287
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0030436 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6012
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6012]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5316
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5316]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6952
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6952]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6952 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6952                         
59 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 59
print         "j = $(v_j)"
j = 59
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6952]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6952]
variable      check0 equal ${check}
variable      check0 equal 9316
variable      b equal ${check}+1
variable      b equal 9316+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 16.6677110456661 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 16.6677110456661 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001577 secs
variable      check1 equal ${check}
variable      check1 equal 9346
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6952 $b
create_bonds  single/bond 2 6952 9317
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0027314 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,7576,$s))
variable      randnj equal round(random(v_ntop0,7576,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 7168
variable      randzj equal z[${randatomj}]
variable      randzj equal z[7168]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 7168 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 7168                         
60 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 60
print         "j = $(v_j)"
j = 60
variable      x0 equal x[${randatomj}]
variable      x0 equal x[7168]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[7168]
variable      check0 equal ${check}
variable      check0 equal 9346
variable      b equal ${check}+1
variable      b equal 9346+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 17.4614115716502 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 17.4614115716502 21.4299142015707 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 17.4614115716502 21.4299142015707 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001909 secs
variable      check1 equal ${check}
variable      check1 equal 9376
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 7168 $b
create_bonds  single/bond 2 7168 9347
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0032973 secs
next j
jump MDPBB.in loopj

# Assign the beads to 2 different groups of grafted and non-grafted beads

group         gbeads type 2
120 atoms in group gbeads
group         fbeads type 3
3480 atoms in group fbeads

#--- Create harmonic bonds in the walls ---#
bond_coeff    3 harmonic 800.0 $(1.5874 * sqrt(2)/2)
bond_coeff    3 harmonic 800.0 1.1224613044555256103
create_bonds  many bwall bwall 3 0.5 1.2
Neighbor list info ...
  update every 1 steps, delay 10 steps, check yes
  max neighbors/atom: 4000, page size: 100000
  master list distance cutoff = 11.1225
  ghost atom cutoff = 11.1225
  binsize = 5.56123, bins = 6 6 13
  2 neighbor lists, perpetual/occasional/extra = 1 1 0
  (1) command create_bonds, occasional
      attributes: full, newton on
      pair build: full/bin
      stencil: full/bin/3d
      bin: standard
  (2) pair lj/cut, perpetual
      attributes: half, newton on
      pair build: half/bin/newton
      stencil: half/bin/3d/newton
      bin: standard
Added 14440 bonds, new total = 18040
  12 = max # of 1-2 neighbors
  12 = max # of special neighbors
  special bonds CPU = 0.0048205 secs
create_bonds  many twall twall 3 0.5 1.2
Added 14440 bonds, new total = 32480
  12 = max # of 1-2 neighbors
  12 = max # of special neighbors
  special bonds CPU = 0.0054023 secs

info system


fix           1 twall setforce 0.0 0.0 0.0  # Freeze top wall
fix           2 bwall setforce 0.0 0.0 0.0  # Freeze bottom wall

#dump           1 all image 250 stg0.*.jpg type type zoom 2 view 60 120 bond none none
#dump          2 all atom 50 dump.brush
#dump          3 all custom 100 dump.random.bin id x y z vx vy vz


#--- Minimize the system to obtain the initial structure for the PB bilayer ---#

timestep      0.010
minimize      0.0 1.0e-8 10000 100000
WARNING: Using 'neigh_modify every 1 delay 0 check yes' setting during minimization (src/min.cpp:168)
Neighbor list info ...
  update every 1 steps, delay 0 steps, check yes
  max neighbors/atom: 4000, page size: 100000
  master list distance cutoff = 11.1225
  ghost atom cutoff = 11.1225
  binsize = 5.56123, bins = 6 6 13
  1 neighbor lists, perpetual/occasional/extra = 1 0 0
  (1) pair lj/cut, perpetual
      attributes: half, newton on
      pair build: half/bin/newton
      stencil: half/bin/3d/newton
      bin: standard
WARNING: Inconsistent image flags (src/domain.cpp:784)
Per MPI rank memory allocation (min/avg/max) = 36.54 | 36.54 | 36.54 Mbytes
Step Temp E_pair E_mol TotEng Press 
       0            0 -0.018022855    6.6360714    6.6180485   0.42445461 
      64            0 -0.049435231    5.3885369    5.3391017   0.54255402 
Loop time of 2.68931 on 1 procs for 64 steps with 9376 atoms

99.9% CPU use with 1 MPI tasks x 1 OpenMP threads

Minimization stats:
  Stopping criterion = linesearch alpha is zero
  Energy initial, next-to-last, final = 
         6.61804850207      5.33910170445      5.33910170445
  Force two-norm initial, final = 508.997 102.912
  Force max component initial, final = 30.7507 4.63214
  Final line search alpha, max atom move = 1.02941e-08 4.76837e-08
  Iterations, force evaluations = 64 237

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 2.5013     | 2.5013     | 2.5013     |   0.0 | 93.01
Bond    | 0.12766    | 0.12766    | 0.12766    |   0.0 |  4.75
Neigh   | 0          | 0          | 0          |   0.0 |  0.00
Comm    | 0.023352   | 0.023352   | 0.023352   |   0.0 |  0.87
Output  | 0          | 0          | 0          |   0.0 |  0.00
Modify  | 0.0073441  | 0.0073441  | 0.0073441  |   0.0 |  0.27
Other   |            | 0.02961    |            |       |  1.10

Nlocal:    9376 ave 9376 max 9376 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Nghost:    19680 ave 19680 max 19680 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Neighs:    5.118e+06 ave 5.118e+06 max 5.118e+06 min
Histogram: 1 0 0 0 0 0 0 0 0 0

Total # of neighbors = 5118000
Ave neighs/atom = 545.862
Ave special neighs/atom = 6.92833
Neighbor list builds = 0
Dangerous builds = 0

#--- Shrink the simulation box such that it encloses the system exactly ---#

variable z_f equal bound(all,zmin)
variable z_c equal bound(all,zmax)

change_box all z final ${z_f} $(v_z_c + 0.1) units box
change_box all z final 0 $(v_z_c + 0.1) units box
change_box all z final 0 70.099999999999994316 units box
  orthogonal box = (0 0 0) to (30 30 70.1)

info variables                              # For diagnostics

minimize      0.0 1.0e-8 10000 100000
WARNING: Using 'neigh_modify every 1 delay 0 check yes' setting during minimization (src/min.cpp:168)
WARNING: Inconsistent image flags (src/domain.cpp:784)
Per MPI rank memory allocation (min/avg/max) = 36.54 | 36.54 | 36.54 Mbytes
Step Temp E_pair E_mol TotEng Press 
      64            0 -0.049435231    5.3885369    5.3391017   0.55725948 
      65            0 -0.049435231    5.3885369    5.3391017   0.55725948 
Loop time of 0.267509 on 1 procs for 1 steps with 9376 atoms

99.3% CPU use with 1 MPI tasks x 1 OpenMP threads

Minimization stats:
  Stopping criterion = linesearch alpha is zero
  Energy initial, next-to-last, final = 
         5.33910170445      5.33910170445      5.33910170445
  Force two-norm initial, final = 102.912 102.912
  Force max component initial, final = 4.63214 4.63214
  Final line search alpha, max atom move = 1.02941e-08 4.76837e-08
  Iterations, force evaluations = 1 22

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 0.24918    | 0.24918    | 0.24918    |   0.0 | 93.15
Bond    | 0.012416   | 0.012416   | 0.012416   |   0.0 |  4.64
Neigh   | 0          | 0          | 0          |   0.0 |  0.00
Comm    | 0.0023424  | 0.0023424  | 0.0023424  |   0.0 |  0.88
Output  | 0          | 0          | 0          |   0.0 |  0.00
Modify  | 0.000721   | 0.000721   | 0.000721   |   0.0 |  0.27
Other   |            | 0.002853   |            |       |  1.07

Nlocal:    9376 ave 9376 max 9376 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Nghost:    19680 ave 19680 max 19680 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Neighs:    5.14004e+06 ave 5.14004e+06 max 5.14004e+06 min
Histogram: 1 0 0 0 0 0 0 0 0 0

Total # of neighbors = 5140042
Ave neighs/atom = 548.213
Ave special neighs/atom = 6.92833
Neighbor list builds = 0
Dangerous builds = 0

#--- Remove the fixes for the restart file ---#
unfix         1
unfix         2

#--- Write Restart File ---#

write_restart  MDPBB.rst
#write_data     MDPBB.data
print        "Created a Polymer Brush Bilayer with Surface Coverage = $(v_M/(lx*ly))"
Created a Polymer Brush Bilayer with Surface Coverage = 0.066666666666666665741

label          sim

include        ecs.in
# This is an input script that creates a mono disperse polymer brush bilayer
# A coarse grained bead-spring model is used for the polymers which are end
# grafted to the surfaces of 2 opposing FCC walls at random sites.

clear
OMP_NUM_THREADS environment is not set. Defaulting to 1 thread. (src/comm.cpp:88)
  using 1 OpenMP thread(s) per MPI task


#--- Read in the Restart file ---#

read_restart    MDPBB.rst
  restoring atom style bond from restart
  orthogonal box = (0 0 0) to (30 30 70.1)
  1 by 1 by 1 MPI processor grid
  restoring pair style lj/cut from restart
  restoring bond style hybrid from restart
  9376 atoms
  32480 bonds
  12 = max # of 1-2 neighbors
  12 = max # of special neighbors
  special bonds CPU = 0.0043613 secs
  read_restart CPU = 0.0113416 secs
reset_timestep  0

#--- Redefine the bond coeffs ---#

bond_coeff    1 fene 30.0 1.5 0.0 0.0      # Values obtained from literature [Grest, Galushcko]
bond_coeff    2 fene 30.0 1.5 0.0 0.0       # This is the grafting bond between the polymer and the wall atom
bond_coeff    3 harmonic 800.0 $(1.5874 * sqrt(2)/2)
bond_coeff    3 harmonic 800.0 1.1224613044555256103

neigh_modify   every 1 delay 0 check yes

#--- Define variables ---#

# for dimensional values: eps = 4.14e-21 J at T = 300K and sigma = 0.5nm

#--- Moved to main.in ---#
#variable       Temp       equal ${Tstr} #[Grest96]
#variable       Tstep     equal 0.005                       # Timestep in Tau (default = 0.005)
#variable       Nequil    equal 10000                       # Number of timesteps to equilibrate
#variable       Ncomp     equal 200000                      # Number of timesteps to compress - until no more occilation of walls
#variable       Nshear    equal 1000000                     # Number of timesteps to shear - use approx 4ns for 10m/s
#variable       Nthermo   equal 1000                        # Number of timesteps between thermo data prints
#variable       Ndump_e   equal 10000
#variable       Ndump_c   equal 10000                       # Number of timesteps per dump file (compression)
#variable       Ndump_s   equal 10000                       # Number of timesteps per dump file (shear)
#variable       Wall_v    equal 0.0002                      # Wall velocity (A/fs) - equal to 10 m/s
#variable       Pcomp     equal 1
variable        Pcomp2    equal ${Pcomp}
variable        Pcomp2    equal 1
variable        Wall_v2   equal ${Wall_v}
variable        Wall_v2   equal 1e-10

# For Equilibration - density profiles (10 for entire run)
variable       Nfreqe   equal ${Nequil}/10                  # Calculate bin averages every this many timesteps
variable       Nfreqe   equal 300000/10                  
variable       Neverye  equal 100                           # Use input values every this many timesteps
variable       Nrepeate equal ${Nfreqe}/${Neverye}          #s Number of times to use input values
variable       Nrepeate equal 30000/${Neverye}          
variable       Nrepeate equal 30000/100          


# For compression - density profiles (10 for entire run)
variable       Nfreqc   equal ${Ncomp}/10                  # Calculate bin averages every this many timesteps
variable       Nfreqc   equal 700000/10                  
variable       Neveryc  equal 100                          # Use input values every this many timesteps
variable       Nrepeatc equal ${Nfreqc}/${Neveryc}         # Number of times to use input values
variable       Nrepeatc equal 70000/${Neveryc}         
variable       Nrepeatc equal 70000/100         

# For Shear - density profiles (10 for entire run)
variable       Nfreqs   equal ${Nshear}/10                  # Calculate bin averages every this many timesteps
variable       Nfreqs   equal 1000000/10                  
variable       Neverys  equal 100                          # Use input values every this many timesteps
variable       Nrepeats equal ${Nfreqs}/${Neverys}         # Number of times to use input values
variable       Nrepeats equal 100000/${Neverys}         
variable       Nrepeats equal 100000/100         


variable       binres   equal  0.001                       # Giving 1000 data points across the sim. box


variable       bwzmin  equal bound(bwall,zmin)
variable       bwzmax  equal bound(bwall,zmax)
variable       twzmin  equal bound(twall,zmin)
variable       twzmax  equal bound(twall,zmax)
variable       c       equal count(gbeads)
variable       surfcov equal $(v_M/(lx*ly))
variable       surfcov equal 0.066666666666666665741
variable       D       equal v_twzmin-v_bwzmax
variable       Dout    equal v_twzmax-v_bwzmin
variable       srate   equal (v_Wall_v/v_D)


#--- Define regions and groups ---#

print        "bwzmin = ${bwzmin}"
bwzmin = 0
print        "bwzmax = ${bwzmax}"
bwzmax = 2.3811015779523
print        "twzmin = ${twzmin}"
twzmin = 67.6188984220477
print        "twzmax = ${twzmax}"
twzmax = 70

region         bwallb  block  INF INF INF INF ${bwzmin} $(v_bwzmin + 0.4) units box
region         bwallb  block  INF INF INF INF 0 $(v_bwzmin + 0.4) units box
region         bwallb  block  INF INF INF INF 0 0.4000000000000000222 units box
region         bwallm  block  INF INF INF INF $(v_bwzmin + 0.35) $(v_bwzmax - 0.35) units box
region         bwallm  block  INF INF INF INF 0.3499999999999999778 $(v_bwzmax - 0.35) units box
region         bwallm  block  INF INF INF INF 0.3499999999999999778 2.0311015779522998415 units box
region         bwallt  block  INF INF INF INF $(v_bwzmax - 0.7) $(v_bwzmax) units box
region         bwallt  block  INF INF INF INF 1.6811015779522999747 $(v_bwzmax) units box
region         bwallt  block  INF INF INF INF 1.6811015779522999747 2.3811015779522999303 units box
region         bmelt   block  INF INF INF INF $(v_bwzmax) $(v_twzmax / 2) units box
region         bmelt   block  INF INF INF INF 2.3811015779522999303 $(v_twzmax / 2) units box
region         bmelt   block  INF INF INF INF 2.3811015779522999303 35 units box
region         tmelt   block  INF INF INF INF $(v_twzmax / 2)  $(v_twzmin - 0.1) units box
region         tmelt   block  INF INF INF INF 35  $(v_twzmin - 0.1) units box
region         tmelt   block  INF INF INF INF 35  67.518898422047712415 units box
region         twallb  block  INF INF INF INF $(v_twzmin - 0.1) $(v_twzmin + 0.35) units box
region         twallb  block  INF INF INF INF 67.518898422047712415 $(v_twzmin + 0.35) units box
region         twallb  block  INF INF INF INF 67.518898422047712415 67.968898422047701047 units box
region         twallm  block  INF INF INF INF $(v_twzmin + 0.35) $(v_twzmax - 0.35) units box
region         twallm  block  INF INF INF INF 67.968898422047701047 $(v_twzmax - 0.35) units box
region         twallm  block  INF INF INF INF 67.968898422047701047 69.650000000000005684 units box
region         twallt  block  INF INF INF INF $(v_twzmax - 0.35) $(v_twzmax) units box
region         twallt  block  INF INF INF INF 69.650000000000005684 $(v_twzmax) units box
region         twallt  block  INF INF INF INF 69.650000000000005684 70 units box

group          bwsurf  region bwallt
722 atoms in group bwsurf
group          bwbulk  region bwallm
1444 atoms in group bwbulk
group          bwout   region bwallb
722 atoms in group bwout
group          bbeads  region bmelt
1800 atoms in group bbeads
group          tbeads  region tmelt
1800 atoms in group tbeads
group          abeads  union  bbeads tbeads
3600 atoms in group abeads
group          twsurf  region twallb
722 atoms in group twsurf
group          twbulk  region twallm
1444 atoms in group twbulk
group          twout   region twallt
722 atoms in group twout
group          rest4bot union abeads twall
6488 atoms in group rest4bot
group          rest4top union abeads bwall
6488 atoms in group rest4top
group          walls    union bwall twall
5776 atoms in group walls
group          alltop   union twall tbeads
4688 atoms in group alltop
# Other groups are: gbeads fbeads bwall twall

info system
info coeffs

#--- Exclude wall-wall interactions ---#

#neigh_modify exclude type 1 1
#neigh_modify exclude type 1 4
#neigh_modify exclude type 4 4


############
# Computes #
############

#compute         sysTemp   all    temp/deform                       # Calculate the temperature without translational velocities
#compute         sysPress  all    pressure sysTemp                  # Calculate the pressure of the entire system of atoms
compute         melTemp   abeads temp
compute         melPress  all    pressure melTemp
compute         wallTemp  walls  temp
compute         wallPress all    pressure wallTemp
variable        melDens   equal  $(mass(abeads))/(lx*ly*v_D)
variable        melDens   equal  3600/(lx*ly*v_D)

#--- Forces and Energies ---#

compute         fbwall  bwall group/group rest4bot
compute         ftwall  twall group/group rest4top
compute         fwalls  bwall group/group twall

#--- Like done in comp_shear.in ---#
group           rest_bot union abeads bwall
6488 atoms in group rest_bot
group           rest_bot2 subtract all bwsurf
8654 atoms in group rest_bot2
compute         ggbot bwsurf group/group rest_bot
compute         ggbot2 bwsurf group/group rest_bot

group           rest_top union abeads twall
6488 atoms in group rest_top
group           rest_top2 subtract all twsurf
8654 atoms in group rest_top2
compute         ggtop twsurf group/group rest_top
compute         ggtop2 twsurf group/group rest_top2


#--- Calculate the applied force on each atom for the pressure applied---#
variable Fcomp equal (${Pcomp}*lx*ly)
variable Fcomp equal (1*lx*ly)
variable Fcatom equal (-${Fcomp})/(count(twout))
variable Fcatom equal (-900)/(count(twout))


#compute	        peratom   all   stress/atom NULL
#compute	        p_all     all   reduce sum c_peratom[1] c_peratom[2] c_peratom[3]
#variable	      press_all equal -(c_p_all[1]+c_p_all[2]+c_p_all[3])/(3*v_volume)



info groups variables                              # For diagnostics


#################
# Equilibration #
#################

#--- Number Density profiles (Equil) ---#
compute         eabeads abeads chunk/atom bin/1d z lower ${binres} units reduced # Check bound keyword to maybe only bin melt area
compute         eabeads abeads chunk/atom bin/1d z lower 0.001 units reduced 
fix             abeads_edz abeads ave/chunk ${Neverye} ${Nrepeate} ${Nfreqe} eabeads density/number file abeads_edz
fix             abeads_edz abeads ave/chunk 100 ${Nrepeate} ${Nfreqe} eabeads density/number file abeads_edz
fix             abeads_edz abeads ave/chunk 100 300 ${Nfreqe} eabeads density/number file abeads_edz
fix             abeads_edz abeads ave/chunk 100 300 30000 eabeads density/number file abeads_edz
compute         ebbeads bbeads chunk/atom bin/1d z lower ${binres} units reduced # Check bound keyword to maybe only bin melt area
compute         ebbeads bbeads chunk/atom bin/1d z lower 0.001 units reduced 
fix             bbeads_edz bbeads  ave/chunk ${Neverye} ${Nrepeate} ${Nfreqe} ebbeads density/number file bbeads_edz
fix             bbeads_edz bbeads  ave/chunk 100 ${Nrepeate} ${Nfreqe} ebbeads density/number file bbeads_edz
fix             bbeads_edz bbeads  ave/chunk 100 300 ${Nfreqe} ebbeads density/number file bbeads_edz
fix             bbeads_edz bbeads  ave/chunk 100 300 30000 ebbeads density/number file bbeads_edz
compute         etbeads tbeads chunk/atom bin/1d z lower ${binres} units reduced # Check bound keyword to maybe only bin melt area
compute         etbeads tbeads chunk/atom bin/1d z lower 0.001 units reduced 
fix             tbeads_edz tbeads  ave/chunk ${Neverye} ${Nrepeate} ${Nfreqe} etbeads density/number file tbeads_edz
fix             tbeads_edz tbeads  ave/chunk 100 ${Nrepeate} ${Nfreqe} etbeads density/number file tbeads_edz
fix             tbeads_edz tbeads  ave/chunk 100 300 ${Nfreqe} etbeads density/number file tbeads_edz
fix             tbeads_edz tbeads  ave/chunk 100 300 30000 etbeads density/number file tbeads_edz

#--- Radius of gyration of the bottom brush chains ---#
compute         chunk_bot bbeads chunk/atom molecule
compute         rgbbeads bbeads gyration/chunk chunk_bot
variable        aveRg    equal  (ave(c_rgbbeads))


#--- Fixes (Equil) ---#

#velocity       abeads create ${Temp} 290842 dist gaussian
#fix             nvt_melt    abeads nvt temp ${Temp} ${Temp} 100.0

# NVE for all and langevin thermostat for melt
fix             nve_melt abeads nve
fix             lang_melt abeads langevin ${Temp} ${Temp} 0.1 798753
fix             lang_melt abeads langevin 1 ${Temp} 0.1 798753
fix             lang_melt abeads langevin 1 1 0.1 798753
fix             nve_walls  walls nve

#--- Langevin thermostat the bulk of the walls in y ---#
# Only thermostat the bulk of the wall not the surface or the outer layer
compute         Tempyt     twbulk temp/partial 0 1 0
fix             lang_tbulk twbulk langevin ${Temp} ${Temp} 0.1 87239 zero yes
fix             lang_tbulk twbulk langevin 1 ${Temp} 0.1 87239 zero yes
fix             lang_tbulk twbulk langevin 1 1 0.1 87239 zero yes
fix_modify      lang_tbulk temp Tempyt
compute         Tempyb     bwbulk temp/partial 0 1 0
fix             lang_bbulk bwbulk langevin ${Temp} ${Temp} 0.1 87239 zero yes
fix             lang_bbulk bwbulk langevin 1 ${Temp} 0.1 87239 zero yes
fix             lang_bbulk bwbulk langevin 1 1 0.1 87239 zero yes
fix_modify      lang_bbulk temp Tempyb

#--- Freeze the outer layer of the walls ---#
fix             freeze_bout bwout setforce 0.0 0.0 0.0
fix             freeze_tout twout setforce 0.0 0.0 0.0

variable        sbot equal  f_freeze_bout[1]/(lx*ly)
variable        pbot equal -f_freeze_bout[3]/(lx*ly)
#--- Thermo output ---#

thermo_style  custom step etotal ke pe epair temp c_melTemp c_wallTemp v_Fcatom v_Pcomp2 press pxx pyy pzz pxy pxz pyz c_melPress c_wallPress v_melDens v_surfcov v_aveRg v_Wall_v2 v_srate v_D v_bwzmax zhi c_fbwall[1] c_fbwall[3] c_ftwall[1] c_ftwall[3] v_sbot v_pbot #c_ggbot[1] c_ggbot[3] c_ggtop[1] c_ggtop[3]
thermo        ${Nthermo}
thermo        1000
thermo_modify flush yes

#--- Dumps ---#
#dump           eq all image ${Ndump_e} stg1.*.jpg type type zoom 2 view 60 120 bond none none
#dump            vis all atom ${Ndump_e} vis.dump

#--- Run Equilibration ---#
timestep    ${Tstep}
timestep    0.005
run         ${Nequil}
run         300000
Neighbor list info ...
  update every 1 steps, delay 0 steps, check yes
  max neighbors/atom: 2000, page size: 100000
  master list distance cutoff = 1.42246
  ghost atom cutoff = 1.42246
  binsize = 0.711231, bins = 43 43 99
  8 neighbor lists, perpetual/occasional/extra = 1 7 0
  (1) pair lj/cut, perpetual
      attributes: half, newton on
      pair build: half/bin/newton
      stencil: half/bin/3d/newton
      bin: standard
  (2) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (3) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (4) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (5) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (6) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (7) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (8) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
WARNING: Inconsistent image flags (src/domain.cpp:784)
Per MPI rank memory allocation (min/avg/max) = 8.752 | 8.752 | 8.752 Mbytes
Step TotEng KinEng PotEng E_pair Temp c_melTemp c_wallTemp v_Fcatom v_Pcomp2 Press Pxx Pyy Pzz Pxy Pxz Pyz c_melPress c_wallPress v_melDens v_surfcov v_aveRg v_Wall_v2 v_srate v_D v_bwzmax Zhi c_fbwall[1] c_fbwall[3] c_ftwall[1] c_ftwall[3] v_sbot v_pbot 
WARNING: One or more chunks do not contain all atoms in molecule (src/compute_chunk_atom.cpp:1161)
       0    6.4300024            0    6.4300024 -0.049435231            0            0            0   -1.2465374            1   0.29830313    1.0821911    1.0821763    -1.269458 -3.8745736e-05 2.4516568e-07 -6.1318788e-08   0.29830313   0.29830313  0.061314149  0.066666667    3.8737558        1e-10 1.5328537e-12    65.237797    2.3811016         70.1            0            0            0            0 1.2631871e-16    11.320685 
    1000    7.4364366    1.3878341    6.0486025 -0.025027263   0.92532142    1.0208496   0.86594813   -1.2465374            1  -0.37847396   0.57159471   0.57954885   -2.2865654 -0.0022449495  0.017663606 -0.0043227838   -0.4577393  -0.43670883  0.061579322  0.066666667    3.4916569        1e-10 1.5394831e-12    64.956869    2.5164224         70.1 -0.00014794257 -0.00042488725 6.4559612e-05 0.00011253318  -0.38795478    -12.95777 
    2000    6.8316282    1.3802416    5.4513867 -0.033265435    0.9202592    1.0232825   0.85621405   -1.2465374            1  0.027471065   0.77136577   0.80777258   -1.4967252 -0.0016021981  0.012745861 -0.032332763  -0.05090326  -0.03090259  0.061530421  0.066666667    3.2453515        1e-10 1.5382605e-12    65.008494    2.4908828         70.1 -6.9682503e-05 -6.8085226e-05            0            0  -0.46975376   -2.6276564 
    3000    6.3491142    1.3765413    4.9725729 -0.038817777   0.91779208   0.99233043   0.87149845   -1.2465374            1  0.080258673   0.75542793      0.79229   -1.3069419 -0.0012675994  0.028568671  0.013307311 0.00048527704  0.023650697  0.061542758  0.066666667    3.0469354        1e-10 1.5385689e-12    64.995462    2.5012705         70.1 -0.00031523325 -0.00047656715 -4.0728154e-05 3.8682022e-05 0.0010177279   -2.1885988 
    4000    5.9749248    1.4013504    4.5735744 -0.049216748   0.93433326    1.0007211   0.89312191   -1.2465374            1   0.27346823   0.87213069   0.87492436  -0.92665037 -0.0010171457  0.030280785 -0.0083696868   0.19171551    0.2163816  0.061523207  0.066666667    2.8938657        1e-10 1.5380802e-12    65.016116    2.4911793         70.1 -0.00017041821 -0.00014497843 0.0033599586 0.0035079288  -0.62027872    4.9006011 
    5000    5.6728841    1.3926513    4.2802328 -0.055302441   0.92853323    1.0416333   0.85820963   -1.2465374            1  0.092800673   0.69223511   0.72105213   -1.1348852 0.0014037665  0.024646125  -0.01679076  0.014243681  0.033380187  0.061563234  0.066666667    2.7571975        1e-10 1.5390808e-12    64.973845    2.5105777         70.1 -0.00089152974 -0.0018158027 0.0022466374 0.0033048661   -0.6103932   -3.4851382 
    6000     5.370935    1.3606016    4.0103333 -0.063620919   0.90716451    1.0090491   0.84382674   -1.2465374            1   0.20925505   0.75026288   0.76496217  -0.88745989 -0.0022218973 -0.0014738705 -0.0062908522   0.13201461   0.15169335  0.061506469  0.066666667    2.6495375        1e-10 1.5376617e-12     65.03381    2.4885225         70.1 -0.00011356508 -0.0027322157 -0.0022461861  0.010633256     0.498084   -2.4530186 
    7000    5.1652671    1.3726364    3.7926306 -0.070460107   0.91518856    1.0136202   0.85400413   -1.2465374            1   0.33738795    0.8277589   0.82995183  -0.64554688 0.0049068724 0.0070481505 -0.0012865996   0.25921591   0.27956549   0.06151117  0.066666667    2.5362143        1e-10 1.5377792e-12     65.02884    2.4855341         70.1 -0.004691016 -0.0092065261 -0.00047715791 0.0069174854   0.76482171    2.4544893 
    8000    4.9739119    1.3492211    3.6246907 -0.086396077   0.89957671   0.99533123   0.84005793   -1.2465374            1   0.36487431   0.80880033   0.83788726  -0.55206466 -0.0016421993 0.0058671076 -0.028853792   0.28797885   0.30809515  0.061582947  0.066666667    2.4583128        1e-10 1.5395737e-12    64.953046    2.5238542         70.1 -0.00049664682 -0.015072227 -0.00084305179 0.0071170429   0.26975413    2.8413171 
    9000    4.7540911    1.3219045    3.4321866  -0.10500997   0.88136368   0.97976489   0.82019231   -1.2465374            1   0.39787681   0.82343928   0.83260983  -0.46241868 -0.0010155133  0.037610287 -0.0029506772   0.32279977   0.34198564  0.061519274  0.066666667    2.3940699        1e-10 1.5379819e-12    65.020273    2.4842382         70.1 0.0011016187 -0.013614947 -0.0018394114  0.021160103   0.77544902    1.6755213 
   10000    4.6409771    1.3426442    3.2983329  -0.12089348    0.8951916    1.0187712   0.81833137   -1.2465374            1   0.35268659   0.77537734   0.78621311  -0.50353069 0.0018693502  0.017564464 -0.013221169   0.27777989   0.29457028  0.061514175  0.066666667    2.3488742        1e-10 1.5378544e-12    65.025663    2.4937372         70.1 -9.6466098e-05 -0.027784977  0.002406985  0.030466549     1.187121   -2.1205234 
   11000    4.5858851    1.3530833    3.2328018   -0.1201835   0.90215175    1.0160415   0.83133149   -1.2465374            1   0.50946558   0.86835431    0.8870597  -0.22701726 0.0037948799 -0.023545814 -0.009976068   0.43336891     0.451505  0.061573565  0.066666667    2.2832315        1e-10 1.5393391e-12    64.962943    2.5197326         70.1 0.0069173139 -0.035183648 0.0027993174   0.06266589 -0.064790169    1.3227531 
   12000    4.4711749    1.3547724    3.1164026  -0.14104877   0.90327791    1.0114312   0.83603281   -1.2465374            1   0.45408536   0.82481572   0.82676143  -0.28932106 -0.0035091962  -0.01626994  0.013041596   0.37755835   0.39638777  0.061520351  0.066666667    2.2360576        1e-10 1.5380088e-12    65.019135    2.4851263         70.1 -0.0037177319 -0.049970071 -0.0063466723  0.064305528    -1.078778   -1.5787855 
   13000    4.4447349      1.30722    3.1375149  -0.14243133   0.87157297    1.0007529   0.79121853   -1.2465374            1   0.45311306   0.79640349   0.82099247  -0.25805678 0.0062967594 -0.024968943 0.0079605089   0.38068816   0.39602462  0.061509535  0.066666667    2.1923206        1e-10 1.5377384e-12    65.030568     2.487066         70.1  0.002187209 -0.050039987 -0.0032646112  0.080487706   0.66505604    -1.818925 
   14000    4.4152303    1.3192361    3.0959942  -0.14469055   0.87958452   0.99596162   0.80721022   -1.2465374            1   0.49480591   0.83753414   0.83223351  -0.18534991 -0.0035959644 0.0080910349 -0.0060675048    0.4209172   0.43799079  0.061524034  0.066666667    2.1660567        1e-10 1.5381008e-12    65.015243    2.4906031         70.1 -0.0010837439  -0.06133073 0.0043727548   0.10892838  -0.27596687   -2.0325184 
   15000    4.3711431    1.3092076    3.0619355  -0.14380953   0.87289815    1.0127215   0.78591093   -1.2465374            1   0.54677393   0.85624531   0.87146015 -0.087383688 0.00081854437 0.0091913754  0.015075522   0.47483486   0.48900273  0.061541796  0.066666667    2.1268834        1e-10 1.5385449e-12    64.996478    2.4871431         70.1 0.0016905114 -0.071314541 -0.0042936664  0.068663083  -0.33200018   0.34765769 
   16000    4.3694549    1.3191252    3.0503297  -0.14508455   0.87951061      1.01627     0.794434   -1.2465374            1   0.53739871   0.85197199   0.86677179  -0.10654766 -0.00079886886  0.017322436 -0.034596284   0.46467948   0.47942509  0.061505141  0.066666667    2.1106581        1e-10 1.5376285e-12    65.035214    2.4862313         70.1 -0.005078999 -0.094660578 0.0098389038  0.078615259   0.39693051    1.3686851 
   17000    4.3484083    1.2926586    3.0557497  -0.14456094    0.8618643   0.99562657   0.77865243   -1.2465374            1   0.56572279   0.87306455   0.88016961  -0.05606579 0.00042924857  0.034167708  0.011316208   0.49444814   0.50892679  0.061536589  0.066666667    2.0844632        1e-10 1.5384147e-12    65.001978     2.487404         70.1 -0.0020347432 -0.079474732  0.018678705  0.088055263    -1.790558    1.9616582 
   18000    4.3287978    1.2921708    3.0366271  -0.14669663   0.86153906   0.99966017   0.77561069   -1.2465374            1   0.54617154   0.85638769   0.86193412 -0.079807203 0.0049540183  0.018909108 -0.018829294   0.47517531   0.48914543  0.061530191  0.066666667    2.0646263        1e-10 1.5382548e-12    65.008737    2.4954817         70.1 -0.0031179731 -0.081186333 -0.0078441236  0.070116987    -1.770882  -0.55521668 
   19000    4.3343593    1.2874162    3.0469431  -0.14524608   0.85836901   0.98962687   0.77671729   -1.2465374            1   0.56591314   0.87427515   0.87110132 -0.047637062 0.00010841228 0.0063197648 -0.0089968714   0.49481562   0.50945939  0.061540188  0.066666667    2.0491589        1e-10 1.5385047e-12    64.998177     2.515738         70.1 -0.0050965619 -0.099311645 -0.0040790766  0.072837529   -1.1466994   -1.7396805 
   20000    4.3461372    1.3006654    3.0454717  -0.14080634   0.86720277    1.0029535   0.78275263   -1.2465374            1   0.53483265   0.85149745   0.83852906 -0.085528575 0.0017031725  0.031774849  0.027662629   0.46318268   0.47761867  0.061530687  0.066666667    2.0223093        1e-10 1.5382672e-12    65.008213    2.4899142         70.1 -0.0075504779 -0.072824396 0.0044388703  0.087645266  -0.71282444   0.60495628 
   21000    4.3224315    1.3006309    3.0218007  -0.14614131   0.86717974    1.0070139   0.78018476   -1.2465374            1   0.54880771   0.85007569   0.86199801 -0.065650566 -0.0010157488 -0.0019725103  0.015231181    0.4773928   0.49136211  0.061502731  0.066666667    2.0062315        1e-10 1.5375683e-12    65.037762    2.4779843         70.1 -0.0033826221 -0.081875113 0.0012633028  0.099342801    2.0386008  -0.33093605 
   22000    4.3278538    1.2934058     3.034448  -0.15056401   0.86236253    1.0045865    0.7738774   -1.2465374            1   0.56131772   0.85762018   0.87340215 -0.047069173 0.0027214864  0.011334585 -0.020057944   0.49048016   0.50401059   0.06152625  0.066666667    2.0030812        1e-10 1.5381562e-12    65.012901    2.4971097         70.1 0.00093353188  -0.06414461 0.0023408177  0.085002301    1.0659905    1.8652112 
   23000    4.2925882    1.2875582      3.00503  -0.13962147   0.85846368   0.99087604   0.77609249   -1.2465374            1   0.56769683   0.86478742   0.87444189 -0.036138804 0.0016370896  -0.01035531 0.0017786692   0.49665651   0.51117182  0.061530835  0.066666667    2.0026592        1e-10 1.5382709e-12    65.008056    2.5107077         70.1 -0.0065624446 -0.086695126  -0.01012469  0.095581907    1.5908426   -3.7751799 
   24000    4.2613425     1.268278    2.9930646  -0.14617088   0.84560882   0.98743085   0.75737127   -1.2465374            1   0.53814952   0.84157819   0.84434875 -0.071478386 0.0030091542 0.0010931082 0.0019290967   0.46882285   0.48182104  0.061524616  0.066666667    1.9788969        1e-10 1.5381154e-12    65.014627    2.4898479         70.1 -0.012103342  -0.10073223 -0.0014805992  0.087499766    1.8625768  -0.85971981 
   25000    4.3088744    1.2787296    3.0301448  -0.14217478   0.85257734    1.0068426   0.75658635   -1.2465374            1   0.50844677   0.82145466   0.82083903  -0.11695337 0.0018646909 -0.024359441 0.0013108207   0.43919196   0.45101095    0.0615399  0.066666667    1.9626677        1e-10 1.5384975e-12    64.998481    2.5027475         70.1 0.0051601772  -0.10739882 0.0042033022   0.11924568   0.57150143   -2.5481617 
   26000    4.3315996    1.2999553    3.0316443  -0.14354435   0.86672932    1.0094746   0.77792006   -1.2465374            1    0.5479039   0.84366764   0.85547026 -0.055426202 0.0013391539 -0.030227144 0.0051900259   0.47669629   0.49031793  0.061511657  0.066666667    1.9599096        1e-10 1.5377914e-12    65.028324    2.4968093         70.1 0.0039523274 -0.085124785 -0.0041940167  0.083769926      1.05469  -0.58221215 
   27000    4.2845241    1.2672686    3.0172555  -0.15144057   0.84493587   0.99675177   0.75046998   -1.2465374            1   0.56286301   0.85819302   0.87636837  -0.04597237 0.0013245536 -0.016534709 -0.024190392   0.49416806   0.50600281  0.061513264  0.066666667    1.9492613        1e-10 1.5378316e-12    65.026626     2.488469         70.1  0.001697611 -0.080802521  0.008468008   0.12062916   0.76741737    1.2265898 
   28000    4.3032827    1.2791874    3.0240953  -0.14080775   0.85288253    0.9979913   0.76259794   -1.2465374            1   0.57415628    0.8653721   0.87713867 -0.020041919 -0.0029806624 -0.019534062 -0.012262505    0.5043512   0.51722538  0.061516378  0.066666667    1.9395594        1e-10 1.5379095e-12    65.023334    2.4903222         70.1 0.0030098954  -0.11362274 0.0064811413  0.093408579   0.73443285    1.2868486 
   29000    4.2703744    1.2686211    3.0017534  -0.14725018   0.84583758   0.98987991   0.75621638   -1.2465374            1   0.59938387   0.89437908   0.89221827  0.011554246 -0.00086947991 -0.024998768 -0.0043685717   0.53016292   0.54291568  0.061551883  0.066666667    1.9383382        1e-10 1.5387971e-12    64.985827    2.5057001         70.1 -0.0069815568 -0.085131646 0.0010126419  0.084610285   0.63292636    1.8126557 
   30000    4.2901925    1.2714497    3.0187428  -0.14379035   0.84772355    1.0140234   0.74423172   -1.2465374            1   0.53935365   0.84422577   0.84680105 -0.072965863 0.0036061154  0.023400851 -0.025598575   0.47122973   0.48150819  0.061528307  0.066666667    1.9377495        1e-10 1.5382077e-12    65.010727    2.5006936         70.1 -0.002905907  -0.07721878 -0.00060735242  0.097148513  -0.20537062    -2.597473 
   31000    4.2613692    1.2628116    2.9985576  -0.13922695   0.84196421   0.98639125   0.75210257   -1.2465374            1    0.6027136   0.89139059   0.89201106  0.024739152 0.0044943315   0.01337123 0.0069539399   0.53386921   0.54644443  0.061536255  0.066666667    1.9326086        1e-10 1.5384064e-12     65.00233    2.4898332         70.1 -0.0022605956  -0.10754099 0.0071366001  0.090093188   0.22633016   0.92806997 
   32000    4.2846349    1.2689446    3.0156903   -0.1500693   0.84605332   0.98251494   0.76115647   -1.2465374            1   0.48678616   0.80588173   0.80769099  -0.15321422 0.0026915995  0.050883474 0.0014889459   0.41711302   0.43073812  0.061531416  0.066666667    1.9278723        1e-10 1.5382854e-12    65.007443    2.4969673         70.1 -0.0027147458 -0.099640075 -9.6754931e-05  0.087828271  0.071769549    -5.215074 
   33000    4.2785985     1.254358    3.0242405  -0.14660701   0.83632784   0.97849575   0.74787312   -1.2465374            1   0.54488478   0.83902228   0.84866416 -0.053032081 0.0015873993 0.0040926994  0.011803466   0.47642754   0.48906601  0.061549689  0.066666667    1.9307664        1e-10 1.5387422e-12    64.988143    2.4986633         70.1 0.0050790737 -0.088282006 -0.00086559734   0.10782164    1.4952573   -3.0384441 
   34000    4.3060945    1.2652994    3.0407951    -0.149021   0.84362292   0.99136932   0.75169294   -1.2465374            1   0.55978463   0.86128931   0.84505208 -0.026987502 0.0022855473 0.0036367895 -0.032659779   0.49097774   0.50323148  0.061556006  0.066666667    1.9226745        1e-10 1.5389001e-12    64.981474    2.5007894         70.1 0.0074438931 -0.081666322 0.0012536377  0.080700985 -0.025338874   -1.7728086 
   35000    4.2694564    1.2542946    3.0151618  -0.14682164   0.83628556   0.99542816   0.73725216   -1.2465374            1    0.5546585   0.84505888   0.85379619 -0.034879561   0.00166274 -0.021250285  0.025542553   0.48717346   0.49787382  0.061501301  0.066666667     1.917708        1e-10 1.5375325e-12    65.039274     2.470468         70.1 -0.011755136  -0.10193598 -0.0029581168  0.072061912    0.6792985   -2.4420591 
   36000    4.2859637    1.2758208    3.0101429  -0.14452021   0.85063794    0.9938358   0.76154383   -1.2465374            1   0.50914182   0.80997229   0.82980499  -0.11235183 -0.0019833267 -0.028459942 -0.013256472   0.43943322   0.45244797  0.061507078  0.066666667    1.9098969        1e-10 1.5376769e-12    65.033166    2.4804844         70.1  0.002635707  -0.11524597 0.0073508139   0.11402371    1.7072939  -0.72960549 
   37000    4.2898791    1.2618109    3.0280683  -0.14536354   0.84129698   0.99420251    0.7461514   -1.2465374            1   0.57632245   0.86600767   0.86709785 -0.0041381516 0.0021769675  0.011488211 -0.027205165   0.50802281   0.51960768  0.061545492  0.066666667    1.9036558        1e-10 1.5386373e-12    64.992575    2.5052956         70.1 0.0012011097 -0.083823505 -0.0026360049   0.10309303  -0.67831175   -1.3068678 
   38000     4.286077    1.2593178    3.0267591  -0.14819693   0.83963478   0.99737858   0.74147368   -1.2465374            1   0.57492945   0.86280652   0.87542518 -0.013443352 0.00021419571  0.019219897 0.0076791874   0.50705799    0.5180335   0.06154076  0.066666667    1.9152021        1e-10 1.538519e-12    64.997573    2.4992681         70.1 0.00030807497 -0.089294993 -0.0050170541   0.09665733   -1.1007334   -1.5325734 
   39000    4.2790868    1.2858596    2.9932272  -0.14748836   0.85733119    1.0183369   0.75714035   -1.2465374            1   0.57681244   0.87699676   0.87363719 -0.020196643 0.0087030379   0.01411826 -0.0052308952   0.50750691   0.51872091  0.061517278  0.066666667    1.9063165        1e-10 1.5379319e-12    65.022383    2.4916733         70.1 0.0074065918 -0.084621377 0.0043714232  0.073477512   -1.3690699   0.72824242 
   40000    4.2674704    1.2603724     3.007098  -0.14715927   0.84033787   0.98417826   0.75084155   -1.2465374            1   0.58025023   0.86588726   0.87390797 0.0009554553 -0.0021467736  0.044729763 -0.0061939278   0.51152127    0.5241073  0.061524916  0.066666667    1.8956364        1e-10 1.5381229e-12     65.01431    2.5010421         70.1 -0.0046353141 -0.090588869 -0.00079130181  0.091262206   -2.2491292   -1.5471756 
   41000    4.3070054    1.2692988    3.0377066  -0.14680674   0.84628947    1.0046499   0.74774524   -1.2465374            1    0.5664978   0.86278146   0.85793936 -0.021227418 -0.0013128715  0.038741549 -0.023344495   0.49805227   0.50918705  0.061523299  0.066666667     1.885084        1e-10 1.5380825e-12     65.01602    2.4785511         70.1 0.00068204761  -0.10265037 -0.0033856031  0.080004509 -0.063203521    0.7689359 
   42000    4.2679351    1.2622352    3.0056998  -0.13975834   0.84157992   0.97623582   0.75780763   -1.2465374            1   0.54989276    0.8461039   0.85349295 -0.049918567 0.00043882632  0.035492496  0.022704913   0.48052616   0.49420291  0.061516861  0.066666667    1.8774626        1e-10 1.5379215e-12    65.022824    2.4948813         70.1 0.0010584731 -0.096817702 0.0028458231  0.092558911  -0.11729823  -0.49396502 
   43000    4.2726578    1.2678417     3.004816  -0.13823661   0.84531799    1.0013505   0.74822436   -1.2465374            1   0.53803539   0.84197859   0.84272606 -0.070598473 0.0068876518  0.060338201 -0.0053557603     0.469546   0.48091286  0.061514747  0.066666667    1.8596942        1e-10 1.5378687e-12    65.025058    2.4797351         70.1 -0.0045597427 -0.074938777 0.0033946944  0.099633487   -1.0100508   -3.0521868 
   44000     4.274483    1.2545976    3.0198853   -0.1440212   0.83648765    1.0039282   0.73228295   -1.2465374            1   0.51643037    0.8171199   0.82565018 -0.093478977 0.0024178465  0.056476378 0.0017047552   0.44940019   0.45916079  0.061521759  0.066666667    1.8665677        1e-10 1.538044e-12    65.017646    2.4970276         70.1 0.00023362877 -0.096928774 0.0050179485  0.094062416     1.753612   0.50276334 
   45000    4.2610188     1.260702    3.0003168  -0.15030938   0.84055763   0.99504245    0.7444277   -1.2465374            1   0.61907445   0.89675373   0.90005226  0.060417378 0.0065821861  0.024120876 -0.016009683   0.55093259   0.56231177  0.061496614  0.066666667    1.8626759        1e-10 1.5374154e-12    65.044231    2.4743352         70.1 -0.0026932857 -0.088810018  0.005297425  0.094801723    1.5672806    3.1532526 
   46000    4.3448451    1.2921091    3.0527359  -0.14613166   0.86149797    1.0044391   0.77256572   -1.2465374            1   0.56919262    0.8617637   0.86442403 -0.018609869 -0.00028335796  0.016829588 -0.013673964   0.49847512    0.5118939  0.061522681  0.066666667    1.8570538        1e-10 1.538067e-12    65.016672     2.478647         70.1  0.010762171  -0.08805667 -0.0088501967  0.077320275    1.4349473    1.4831311 
   47000    4.3164377    1.2824784    3.0339593  -0.14992175   0.85507681     1.007256   0.76038628   -1.2465374            1   0.64252378    0.9249169   0.91601653  0.086637912 -0.004978092  0.028620964  0.010494439   0.57292114   0.58506437  0.061509533  0.066666667    1.8457614        1e-10 1.5377383e-12     65.03057    2.4741426         70.1 0.0025096674 -0.080637391 -0.0015445379  0.090389595    1.5127097    1.3775048 
   48000     4.268029    1.2703126    2.9977165  -0.14997886   0.84696537   0.97223641   0.76904268   -1.2465374            1   0.51528719   0.82839427   0.82295396  -0.10548666 0.0091413408  0.030829539 0.0074459114   0.44489218   0.45982549  0.061524766  0.066666667    1.8353813        1e-10 1.5381192e-12    65.014469    2.5005434         70.1 -0.0045677065 -0.079852746 -0.010221806  0.087769531    1.0031333   -6.5187013 
   49000    4.2689078     1.249861    3.0190468  -0.14506003   0.83332953   0.98869318   0.73665066   -1.2465374            1   0.53975833   0.84076284   0.83499172 -0.056479565 0.0025785085  0.026201258  0.016419661   0.47232835   0.48335784  0.061493582  0.066666667    1.8353585        1e-10 1.5373395e-12    65.047439    2.4772545         70.1  0.005654954 -0.081860171 0.0025867349  0.096597514   0.15835281   0.33088313 
   50000    4.2647974    1.2778163    2.9869811   -0.1406881   0.85196839    1.0221134   0.74608095   -1.2465374            1   0.59717395   0.88905464   0.88469796  0.017769237 0.00063997889 0.0049327955 0.0039148497   0.52888075   0.53886698  0.061511563  0.066666667    1.8466764        1e-10 1.5377891e-12    65.028424    2.4845656         70.1 -0.010094162  -0.10351813 0.00011074495   0.08741198  -0.80956642  -0.12702263 
   51000     4.261873    1.2647445    2.9971284  -0.15063685   0.84325294   0.99175181   0.75085395   -1.2465374            1   0.56092248   0.86060479   0.85733279 -0.035170143 -0.0048711009 -0.035078972 0.0066920176   0.49219239   0.50434751  0.061525843  0.066666667    1.8498629        1e-10 1.5381461e-12    65.013331    2.4978039         70.1 0.0012013798 -0.091269574 -0.0019297713  0.082943989 0.0086805119     1.127529 
   52000    4.2604634    1.2714279    2.9890355  -0.14931965   0.84770901   0.99950835   0.75325393   -1.2465374            1   0.55894943   0.85706925   0.85952888 -0.039749844 -0.0021766552 0.0072615055 -0.0076951653   0.48999965   0.50193199  0.061517563  0.066666667    1.8431221        1e-10 1.5379391e-12    65.022082    2.4850978         70.1 0.0038524086 -0.092149219 0.0046647841  0.098025144   -1.1208467   -0.3136593 
   53000    4.2511287    1.2620277    2.9891011  -0.14253599   0.84144152   0.98849627    0.7499422   -1.2465374            1   0.54641671   0.84725759   0.85072204 -0.058729491 -0.0035261603 -0.017691629 -0.0051497172   0.47777008   0.49002746  0.061525368  0.066666667    1.8523425        1e-10 1.5381342e-12    65.013833    2.5021052         70.1 0.0002934261  -0.09220826 -0.006573862  0.070455946  -0.26552243   -1.3736148 
   54000    4.2772377    1.2681416    3.0090961  -0.15030167   0.84551788   0.99035204   0.75540314   -1.2465374            1   0.57552895   0.86484184   0.87461727 -0.012872262 0.0034040312  0.028502362 -0.023592423   0.50638244   0.51903383   0.06152858  0.066666667    1.8527467        1e-10 1.5382145e-12    65.010439    2.4783759         70.1 0.0067374105 -0.095537275 -0.0047460433  0.094743074  -0.14658042   0.17170679 
   55000    4.2896685    1.2806542    3.0090143  -0.14340507   0.85386054   0.99720569    0.7646752   -1.2465374            1    0.5592683   0.86019639   0.85612791 -0.038519391 0.0015143262  0.024170187 -0.020644476   0.48927307   0.50238221  0.061519529  0.066666667     1.854914        1e-10 1.5379882e-12    65.020004    2.5011669         70.1 0.00094208804  -0.11372291 -0.0050729621   0.10155855    1.0803796  -0.34358619 
   56000    4.2905298    1.2625114    3.0280184  -0.14616229   0.84176405    1.0058346   0.73966045   -1.2465374            1   0.57954481   0.87098948   0.86901672 -0.0013717872 -0.0026396178  0.047562718 -0.025655539   0.51183932   0.52216648  0.061530104  0.066666667    1.8432428        1e-10 1.5382526e-12    65.008829    2.5095717         70.1 -0.0049171879  -0.07656463 0.00040145091   0.11981697   0.63938283    -1.450464 
   57000    4.2741189    1.2770937    2.9970251   -0.1403092   0.85148664   0.99598027   0.76158515   -1.2465374            1   0.54942322   0.84849167   0.85567342 -0.055895422 0.0030888896  0.024470732 -0.0031917117   0.47971084   0.49260704  0.061532192  0.066666667    1.8448478        1e-10 1.5383048e-12    65.006623    2.4965518         70.1 0.0059878588  -0.10594195 -0.009577968  0.092861203  -0.64009198    1.8473282 
   58000    4.2420222    1.2528383    2.9891839  -0.15251969    0.8353146   0.99426687   0.73639963   -1.2465374            1   0.59388136   0.88711493    0.8849914 0.0095377455 -0.0013148242  0.061596986 -0.012727847   0.52647435   0.53716292  0.061499388  0.066666667    1.8620172        1e-10 1.5374847e-12    65.041297    2.4832602         70.1 0.00054720072 -0.094802313 -0.0043091539  0.085510368   -0.4242301    1.9799486 
   59000    4.2580468    1.2740706    2.9839763  -0.15002671   0.84947098    1.0163319   0.74562975   -1.2465374            1   0.52499796   0.82595176   0.82752558  -0.07848346 0.0053300253  0.071736618 -0.016896592   0.45674607   0.46702081  0.061518236  0.066666667     1.854702        1e-10 1.5379559e-12    65.021371    2.4856093         70.1 0.0064610546  -0.11452897 -0.0063964872   0.10244549   -1.2296085   -3.5287948 
   60000    4.2859902    1.2940898    2.9919003  -0.14418337   0.86281858    1.0123229   0.76979637   -1.2465374            1   0.57114394   0.86592501   0.86805377 -0.020546972 0.0012048211 -0.011287771 -0.031235815   0.50067993   0.51339548  0.061534652  0.066666667    1.8244351        1e-10 1.5383663e-12    65.004024    2.5038277         70.1 -0.004610737    -0.116085 -0.006527558  0.094852625   -1.6625334  -0.79691096 
   61000    4.2482883    1.2553398    2.9929484  -0.14799689    0.8369825   0.99576506   0.73817359   -1.2465374            1   0.53417731   0.83978565   0.83864578 -0.075899486 -0.0040541899  0.015634595  -0.02252888   0.46660793   0.47737341  0.061521217  0.066666667    1.8424427        1e-10 1.5380304e-12    65.018219    2.4862666         70.1  0.002027813 -0.095154073 0.0021599297  0.084281419   -1.2755863     1.092831 
   62000      4.25563    1.2547927    3.0008373  -0.14996674    0.8366177   0.99548883   0.73775353   -1.2465374            1    0.5839671   0.88129212   0.87120644 -0.0005972571 -0.0046128526  0.018706227 -0.011389943   0.51643617   0.52717895  0.061527342  0.066666667    1.8237507        1e-10 1.5381836e-12    65.011747    2.4978132         70.1 0.0021234752 -0.081624295 -0.0063156028  0.096157452   -1.2258855  -0.65310052 
   63000    4.2847135    1.2736288    3.0110847  -0.13799967   0.84917646    1.0015093   0.75438913   -1.2465374            1   0.59126454   0.88054694   0.87750283  0.015743845 0.0026415314  0.020648174  0.015203129   0.52221085   0.53413295  0.061521248  0.066666667    1.8150632        1e-10 1.5380312e-12    65.018187    2.4954409         70.1 0.0075895957  -0.10302432 -0.006655354   0.10371006  -0.83213232   -1.3816896 
   64000    4.2865647    1.2866324    2.9999323  -0.14760928   0.85784642    1.0179196   0.75823682   -1.2465374            1   0.53509138   0.83955201   0.83374936  -0.06802723 -0.0018435392   0.05814215  -0.02766858   0.46568549   0.47702366  0.061560007  0.066666667    1.8116435        1e-10 1.5390002e-12    64.977251    2.5153391         70.1 0.0062944464  -0.11874894 -0.0054953965  0.098314255   0.56500615    -2.008032 
   65000    4.2580902     1.254116    3.0039742  -0.14251031   0.83616651    1.0004695   0.73391709   -1.2465374            1   0.58646638   0.87866601    0.8722233 0.0085098435 -0.0032907402  0.066816998 -0.015415216   0.51928662   0.52939411   0.06156609  0.066666667    1.7968274        1e-10 1.5391522e-12    64.970831    2.5063921         70.1 -7.6918577e-05  -0.10235006  0.010167651  0.093604705   0.17371375    0.1522416 
   66000    4.2819464    1.2742589    3.0076875  -0.14747819   0.84959656   0.99184575   0.76109349   -1.2465374            1   0.55629329   0.84829942    0.8511503 -0.030569856 -0.00067177385  0.028816676  -0.01886677   0.48662591   0.49971296  0.061539043  0.066666667    1.7934166        1e-10 1.5384761e-12    64.999386    2.5116598         70.1 0.0041918685  -0.10757063 0.00012198737  0.088076358   0.83626468   -1.1688879 
   67000     4.263814    1.2654298    2.9983842  -0.14428642   0.84370985   0.97837546   0.75993187   -1.2465374            1   0.55239476   0.85352162   0.85334517 -0.049682498 0.0071009622  0.042901487 -0.011347774   0.48283371   0.49658285  0.061551102  0.066666667    1.7861144        1e-10 1.5387775e-12    64.986651     2.503694         70.1  0.003619738 -0.096931529 0.0058277351   0.10643624  -0.62227135    -1.103609 
   68000     4.268391    1.2804612    2.9879298   -0.1484302   0.85373189   0.99211595   0.76763829   -1.2465374            1   0.52271621   0.82130005   0.83213584 -0.085287261  0.001069851  -0.04147131  0.011469598   0.45244975   0.46612047  0.061544804  0.066666667     1.782843        1e-10 1.5386201e-12    64.993302    2.4919302         70.1 -0.00037833083 -0.094233673 0.0013786198  0.091911829   -0.1096187    1.2606245 
   69000     4.267089    1.2585922    3.0084968  -0.14062234   0.83915096   0.98642392   0.74751524   -1.2465374            1   0.52970537   0.83408505   0.82419863 -0.069167558 -0.0028158269 -0.027868562 -0.0068860458   0.46128089   0.47343434  0.061505204  0.066666667    1.7814917        1e-10 1.5376301e-12    65.035147    2.4732992         70.1 0.0013165852 -0.086074982 0.0010538453  0.086607184   0.13060681   -1.3406903 
   70000    4.2439264    1.2546989    2.9892275  -0.14963682   0.83655512   0.97513677   0.75033542   -1.2465374            1   0.59454841   0.87777331   0.88825488  0.017617046 0.0011144704 -0.026873406 0.0028877315   0.52586578   0.53892125  0.061533204  0.066666667    1.7802557        1e-10 1.5383301e-12    65.005554     2.491742         70.1 0.0035586878 -0.099012649 -0.00045505229  0.070897307   -1.1968651   0.91595035 
   71000    4.2771704    1.2835001    2.9936703  -0.14359958   0.85575802    1.0258823   0.74988419   -1.2465374            1   0.58481401   0.87729561   0.87181894 0.0053274717 0.0027212163 -0.0029959121 -0.010210418   0.51617268   0.52629205  0.061538115  0.066666667    1.7769784        1e-10 1.5384529e-12    65.000366    2.4927217         70.1  0.013062934  -0.08028394 -0.0058172224   0.10142575  -0.16797967    1.3243116 
   72000    4.2745082    1.2787041    2.9958041   -0.1487587   0.85256034   0.99821307   0.76193669   -1.2465374            1   0.52414118   0.82876149   0.83758941 -0.093927357 0.0019955975  0.045526402 0.0060222495   0.45439662   0.46719763  0.061515132  0.066666667    1.7816774        1e-10 1.5378783e-12    65.024652    2.4900711         70.1 -0.0012588919  -0.10369371 -0.0016035972  0.070395164  -0.96150495   0.98933326 
   73000    4.2564264    1.2403764    3.0160499    -0.149274   0.82700583   0.95779058   0.74564353   -1.2465374            1   0.53444726   0.83278569   0.83529292 -0.064736831 0.0018997469  0.019091742 -0.010116858   0.46619411   0.47980963  0.061535385  0.066666667    1.7822184        1e-10 1.5383846e-12    65.003249    2.4947546         70.1 -0.0049946193 -0.080811335 -0.003506164  0.091971638  -0.14253454  -0.20832824 
   74000    4.2930276    1.2615083    3.0315193  -0.14130886   0.84109524   0.99741915   0.74381927   -1.2465374            1   0.60702079   0.88761834   0.89717032  0.036273697 0.0060640748 0.0038796474 -0.019194951   0.53893462   0.55012252  0.061508629  0.066666667     1.787093        1e-10 1.5377157e-12    65.031526     2.489277         70.1 -0.0018701871   -0.1047975 0.0013892504  0.073123203    1.1375137  -0.97288537 
   75000    4.2744014    1.2727178    3.0016836  -0.14456919   0.84856901   0.98218664   0.76544498   -1.2465374            1   0.55090118   0.85193807   0.85049475 -0.049729267 0.0080091778 -0.0040936648 0.0048665966   0.48083549   0.49487186  0.061519667  0.066666667    1.7931352        1e-10 1.5379917e-12    65.019858    2.4876859         70.1 0.0020780537  -0.10840702  0.014667202   0.11118695   0.39747165   -3.2654228 
   76000    4.2868694    1.2687778    3.0180916  -0.14551999    0.8459421   0.99782989   0.75143159   -1.2465374            1    0.5309844   0.82639278   0.84226991 -0.075709499 -5.4005891e-05 0.00062046334  0.010609204   0.46220143    0.4740627  0.061504843  0.066666667    1.7969536        1e-10 1.5376211e-12    65.035529    2.4860582         70.1 -0.0010929218 -0.086133905 -0.0023413917   0.10038608   0.74986886   -4.6751458 
   77000    4.2743989    1.2626132    3.0117858   -0.1536906    0.8418319   0.97397823   0.75962361   -1.2465374            1   0.61992289   0.89836114   0.90553823  0.055869284 0.0041924808 -0.0050227867 -0.0084794159   0.55039005   0.56436182  0.061520026  0.066666667    1.7981304        1e-10 1.5380006e-12    65.019479    2.4917666         70.1  0.003950283 -0.085801838 -0.0019652231  0.085136092     1.459881    2.4157127 
   78000     4.241513    1.2332208    3.0082922  -0.14734338   0.82223492   0.99023191     0.717681   -1.2465374            1   0.63037592   0.91333016   0.90824658  0.069551015 -0.0012170299 -0.0065979236  0.012157717   0.56468234   0.57388765  0.061536885  0.066666667    1.7889653        1e-10 1.5384221e-12    65.001665    2.5005017         70.1 -0.0027457079 -0.096749201 -0.0025506573   0.11378269    1.2939293    1.7132427 
   79000    4.2927379    1.2730803    3.0196576  -0.14714453   0.84881071    1.0066323    0.7506027   -1.2465374            1    0.6003708   0.89650254   0.87949819  0.025111679 0.0033666934 -0.025752415 0.0089165096   0.53166371   0.54294697   0.06152104  0.066666667    1.7747878        1e-10 1.538026e-12    65.018407    2.4827623         70.1  0.013189243 -0.096324347 -0.00049406688  0.093565882    2.6892672   0.51709905 
   80000    4.2582833    1.2474698    3.0108134  -0.14605667   0.83173527   0.98106319   0.73881762   -1.2465374            1   0.54034705     0.844246   0.83950766 -0.062712523 -0.0065986992 -0.0080504609 -0.020145532   0.47271871   0.48438182  0.061512936  0.066666667    1.7596265        1e-10 1.5378234e-12    65.026973    2.4804258         70.1 -0.0016842067 -0.091600939 -0.016254881  0.089149036    1.6095831  -0.14569762 
   81000    4.2655709    1.2696269     2.995944  -0.14495441   0.84650822    1.0010586   0.75033849   -1.2465374            1    0.5294584    0.8376283   0.83785031 -0.087103415 0.0032643788  0.008397799  0.003356733   0.46077549   0.47235252  0.061525071  0.066666667    1.7564731        1e-10 1.5381268e-12    65.014147    2.4915658         70.1 -0.0017684287  -0.10704959 0.0098397207  0.075446926    1.4089906   0.71449005 
   82000    4.2696506    1.2573231    3.0123275  -0.14484456   0.83830478   0.98271204   0.74845484   -1.2465374            1   0.57828974   0.87063569   0.87166227 -0.0074287464 -0.0041742521 -0.023770446 0.0093682053   0.50977925   0.52223045   0.06155181  0.066666667    1.7526869        1e-10 1.5387952e-12    64.985904     2.517334         70.1 3.0267179e-05  -0.08243961 -0.0049325171   0.10318465   0.55048963     2.204797 
   83000    4.2541151    1.2633498    2.9907653   -0.1411426   0.84232301    1.0077891   0.73934982   -1.2465374            1    0.6049845   0.88059862   0.89550894  0.038845957 0.0042128174 -0.056165849 -0.004037766   0.53730745   0.54749468  0.061514529  0.066666667    1.7485331        1e-10 1.5378632e-12    65.025289    2.4958169         70.1 0.0014697543 -0.078371235 0.0011049937   0.07432026  0.084850167    1.9960311 
   84000    4.2897353    1.2831811    3.0065543  -0.14302698    0.8555453    1.0190884    0.7537728   -1.2465374            1   0.54980584   0.84804662   0.84812317  -0.04675226 -0.0010552274 -0.038206698 0.00025454038   0.48080857   0.49167145  0.061540279  0.066666667    1.7467286        1e-10 1.538507e-12    64.998081    2.4982014         70.1 -0.0075996941 -0.082976166 -0.0070421149  0.086823347   0.35097523  -0.56051615 
   85000    4.2538761    1.2594492     2.994427  -0.14188913   0.83972233   0.99032488   0.74601172   -1.2465374            1   0.57178733   0.86282192   0.86993649 -0.017396418 0.00098270905  0.016454627 0.0058344684   0.50350048   0.51529376  0.061535678  0.066666667    1.7464974        1e-10 1.5383919e-12    65.002941    2.5084923         70.1 0.0025715588 -0.096486496 -0.0053107242  0.090880748  -0.80609633   0.43597064 
   86000    4.3009487    1.2723047     3.028644  -0.14585302    0.8482936   0.98721542   0.76186394   -1.2465374            1   0.59949186   0.88089476   0.88534881  0.032232019   0.00249181 0.0029412173  0.016890117   0.52975396   0.54317568  0.061509021  0.066666667     1.748737        1e-10 1.5377255e-12    65.031112    2.4858521         70.1  0.008732897  -0.10107818 0.0018607287   0.10165818  -0.29441884    0.2740237 
   87000    4.3036469    1.2816292    3.0220178  -0.14534938   0.85451059    1.0074872   0.75932298   -1.2465374            1   0.56606999   0.86380217   0.86102255 -0.026614756 0.0047869501 0.0083232179 -0.0056477031   0.49656468   0.50859738  0.061532593  0.066666667      1.73676        1e-10 1.5383148e-12    65.006199    2.4872266         70.1 0.0038338197 -0.086540939 -0.0051290967   0.10034646   -1.4127959    1.6137494 
   88000     4.255994    1.2641055    2.9918885  -0.14057646   0.84282689    1.0053815   0.74166823   -1.2465374            1   0.52451558   0.83997079    0.8295367 -0.095960755 0.0024758345  0.016409473  0.022933739   0.45662631   0.46716309  0.061510293  0.066666667    1.7374444        1e-10 1.5377573e-12    65.029766    2.4838481         70.1 -0.0034134021  -0.11240155  0.012426643    0.1125425  -0.80178622  -0.45123439 
   89000     4.295025    1.2706063    3.0244187  -0.14346487   0.84716125    1.0065944   0.74794862   -1.2465374            1   0.55563352   0.84849929   0.85557648 -0.037175204 0.00074418651   0.01991908 -0.011335122   0.48716937   0.49821185  0.061529057  0.066666667    1.7326992        1e-10 1.5382264e-12    65.009936    2.5104847         70.1 0.0080040143   -0.0838281 0.0027023774   0.12570363   0.13014051   0.44241881 
   90000    4.2769351    1.2754137    3.0015215  -0.14287973   0.85036647   0.98840516   0.76448752   -1.2465374            1   0.55654606   0.85312023   0.84872357 -0.032205603 0.0082542709  0.041420174 -0.021797791   0.48656801   0.50016201  0.061531497  0.066666667     1.723797        1e-10 1.5382874e-12    65.007357    2.4912134         70.1 0.0073330358 -0.082151476 -0.0071715686   0.10300417   0.64270591     1.928141 
   91000    4.2776552    1.2654157    3.0122395  -0.14840469   0.84370046    1.0150518   0.73705979   -1.2465374            1   0.61495542   0.90704332   0.89272086  0.045102092  0.002974648  0.062131436 0.0039532533   0.54748799   0.55705129  0.061546461  0.066666667    1.7331205        1e-10 1.5386615e-12    64.991552    2.5021563         70.1 -0.00098508067   -0.1090006 -0.0081030987  0.087597541  -0.52245345    1.8304204 
   92000    4.2866812    1.2863846    3.0002966  -0.15194133    0.8576812    1.0072732   0.76460345   -1.2465374            1   0.59385775   0.88179002   0.88243913    0.0173441 0.0020502218  0.015469381   0.01411771   0.52386909   0.53639736  0.061506363  0.066666667    1.7262246        1e-10 1.5376591e-12    65.033922    2.4829332         70.1  -0.01171848 -0.098463357 0.0036350919   0.10659073  -0.33644185    3.8601244 
   93000    4.2712959    1.2801138     2.991182  -0.14759307   0.85350025    1.0172698    0.7515863   -1.2465374            1   0.57025445    0.8645047   0.87167407 -0.025415406 0.0023874676 -0.0076042556  0.005547937   0.50145732    0.5122238  0.061506334  0.066666667    1.7296295        1e-10 1.5376584e-12    65.033952    2.4786354         70.1 -0.0054163131 -0.098821506  0.010031298  0.093418132 -0.060876147   -1.4220491 
   94000    4.2914995    1.2814875     3.010012  -0.14890598   0.85441613   0.99053419   0.76973483   -1.2465374            1   0.58176586   0.87230151   0.86908183 0.0039142393 -0.0013053613 -0.0058651532    0.0247024   0.51130749   0.52526035  0.061540769  0.066666667    1.7271037        1e-10 1.5385192e-12    64.997563    2.5008537         70.1 -0.0077602706  -0.10005196 0.0063246037   0.10154271  -0.90034058   0.34509451 
   95000     4.264876    1.2603422    3.0045339   -0.1484558   0.84031775    1.0083822   0.73572492   -1.2465374            1   0.55687478   0.84885134   0.85922328 -0.037450274 0.0043940123 -0.013750525  0.029432756   0.48952954   0.49935113  0.061520488  0.066666667    1.7253887        1e-10 1.5380122e-12     65.01899      2.48799         70.1 0.0026831638 -0.096036746 -0.010599811   0.11713131   0.15301708   -1.1994856 
   96000    4.2623443    1.2691054    2.9932389   -0.1458199   0.84616051   0.97909108   0.76346424   -1.2465374            1   0.60878107   0.88714886   0.89586256  0.043331773 0.00062942145  0.013132267 -0.0040310206   0.53889668   0.55292834  0.061529309  0.066666667    1.7179809        1e-10 1.5382327e-12    65.009668    2.5004667         70.1 0.0050326694  -0.10395794  0.011157958  0.099476015    1.2645998    1.2098564 
   97000    4.2840586    1.2733389    3.0107197  -0.14964581   0.84898315   0.99025344   0.76109002   -1.2465374            1   0.53478078   0.83710617   0.83722366 -0.069987492 -0.0028871367 -0.022795863 -0.027436033   0.46511372   0.47829129  0.061550891  0.066666667    1.7199113        1e-10 1.5387723e-12    64.986874    2.5150674         70.1 0.0067650425 -0.093630394 -0.012995833  0.085062955    1.6790966   -2.1775169 
   98000     4.283061    1.2897647    2.9932964  -0.14344805   0.85993483    1.0107378   0.76610277   -1.2465374            1   0.55977844   0.84722183   0.84842904 -0.016315561 8.3021729e-05 -0.009013398 0.0097569428   0.48965253    0.5021204  0.061517104  0.066666667    1.7173205        1e-10 1.5379276e-12    65.022567    2.5012849         70.1 -0.00089864392 -0.078821222 -0.001287591  0.088208196   0.81713935    1.1989721 
   99000    4.2766969    1.2595248    3.0171721  -0.13770721   0.83977278    1.0114374   0.73293623   -1.2465374            1   0.57553446   0.87699889   0.85455191 -0.0049474064 0.0040506724 0.0095081677 -0.0032736635   0.50844448   0.51783652  0.061523629  0.066666667    1.7017461        1e-10 1.5380907e-12    65.015671    2.4968733         70.1 0.0045101224  -0.09661336 -0.0015390674  0.093280576    1.2409301    1.4261897 
  100000    4.2962108     1.287503    3.0087077   -0.1472144   0.85842692    1.0138223    0.7617326   -1.2465374            1   0.53604658   0.84414865      0.83101 -0.067018925 -0.00056023869 -0.024193934 -0.033509591    0.4663207   0.47821258  0.061532489  0.066666667    1.7115732        1e-10 1.5383122e-12     65.00631    2.4932084         70.1 -0.0024034511 -0.065794312 0.0016359054   0.11683024     0.533261   -1.5204403 
  101000    4.2692513    1.2662537    3.0029975  -0.14296868   0.84425921   0.97376452   0.76369724   -1.2465374            1   0.60786406   0.88814879   0.89003396  0.045409437 0.0014921173 -0.037538242 0.0017650358   0.53795835   0.55231519  0.061570278  0.066666667    1.7287795        1e-10 1.5392569e-12    64.966411    2.4970429         70.1 -0.00058512768  -0.13731657 -0.005948491  0.096497911    1.7400909    1.1958833 
  102000    4.2696378    1.2703627     2.999275  -0.14738259   0.84699883    1.0038305   0.74940747   -1.2465374            1   0.57014306   0.86332155    0.8635196 -0.016411971 0.0017756893  -0.02887486 0.0015185601   0.50154537   0.51287906  0.061499799  0.066666667     1.719334        1e-10 1.537495e-12    65.040863    2.4783946         70.1 -0.012884634  -0.08966285 -0.0037026777  0.098129853     1.352191  -0.56184346 
  103000    4.2624188    1.2621325    3.0002863  -0.14519162   0.84151144    1.0166903   0.73248505   -1.2465374            1    0.5543932   0.84982464   0.85637024 -0.043015297 -0.001787761 -0.029532374 -0.014551708   0.48734452    0.4963956  0.061497522  0.066666667    1.7077808        1e-10 1.5374381e-12    65.043271     2.473867         70.1 0.0087334021 -0.085310562 -0.00078854925   0.10084442     -1.24518   -1.3209521 
  104000    4.2757467    1.2626269    3.0131198  -0.14032612   0.84184104    1.0008165   0.74291276   -1.2465374            1   0.55979131   0.85998309   0.84333132 -0.023940473 0.0043537115 -0.048031164 0.0012617183   0.49178812   0.50269925  0.061559679  0.066666667    1.6998458        1e-10 1.538992e-12    64.977597    2.5053919         70.1 -0.0019363319 -0.096748053 -0.0059367701   0.10847738    0.6947228   -1.9553828 
  105000    4.2841338    1.2750055    3.0091283  -0.14704381   0.85009434    1.0050571   0.75366822   -1.2465374            1   0.56829748   0.85844893   0.85770674 -0.011263246 0.0012317634 -0.063656449  0.001365756   0.49930978    0.5109635  0.061520452  0.066666667    1.7041168        1e-10 1.5380113e-12    65.019028     2.481684         70.1 0.0051207517 -0.098356845 -0.0075601676  0.090094173    1.6904084   0.85391263 
  106000    4.2649725    1.2648151    3.0001574  -0.14528298   0.84330001   0.99470541   0.74908967   -1.2465374            1   0.59368099   0.88411258   0.88209012  0.014840266 0.0061204127 -0.030559639 -0.010893349   0.52511239   0.53693753  0.061527159  0.066666667    1.7150775        1e-10 1.538179e-12     65.01194    2.4914426         70.1 -0.0067918336  -0.09961466 -0.014748692   0.10973156 -0.071877877      3.51855 
  107000    4.2625236    1.2547655    3.0077581  -0.14766634   0.83659958    1.0207579   0.72197633   -1.2465374            1   0.59157975    0.8823497   0.87458274  0.017806794 -0.0015722471 -0.026653122 0.00094616553   0.52549299   0.53335011  0.061531349  0.066666667    1.7088275        1e-10 1.5382837e-12    65.007513    2.4936643         70.1 0.0015908261  -0.11090424 0.0012778123   0.11269652    2.2034432   0.82450335 
  108000    4.2511278    1.2561837    2.9949441  -0.14480919   0.83754516    1.0125341   0.72863648   -1.2465374            1   0.58343432   0.87439233   0.87132256 0.0045880814 -0.0056783856  0.022498317 0.0030632031   0.51673793   0.52567382  0.061518434  0.066666667    1.7038548        1e-10 1.5379609e-12    65.021161    2.4893013         70.1 -0.010534672  -0.11422373 -0.0011107649   0.11217188   0.29565887  0.021309081 
  109000    4.2698307     1.273313    2.9965177  -0.14630323   0.84896591    1.0084207   0.74974015   -1.2465374            1   0.58024586   0.86525292   0.88027826 -0.0047935992 8.9215261e-05 0.0054947854  0.018923432   0.51161772   0.52272001   0.06149172  0.066666667    1.7076821        1e-10 1.537293e-12    65.049409    2.4761654         70.1 0.00010861829  -0.10958473  0.008052354  0.092008426   0.82806054 -0.080262825 
  110000    4.2823408    1.2742733    3.0080674  -0.14916154   0.84960617    1.0073918   0.75142075   -1.2465374            1   0.58861393   0.87568175    0.8659411  0.024218948  -0.00622562  0.013099375  0.015671969   0.51983196   0.53114677  0.061530555  0.066666667    1.7089965        1e-10 1.5382639e-12    65.008352    2.4915786         70.1 0.0075823992  -0.10744568 0.0022080718   0.09533016   0.78181359   0.21312695 
  111000    4.2354801    1.2451238    2.9903562  -0.14905951    0.8301711   0.98853649     0.731621   -1.2465374            1   0.57312757   0.85562684   0.87011837 -0.0063625109  0.010256733 0.0033239239 -0.0043831713   0.50615798   0.51673602  0.061547761  0.066666667    1.6920667        1e-10 1.538694e-12    64.990178    2.5079752         70.1 0.00018332154 -0.091617492 -0.00088654766   0.10078081  0.087647828   -0.2390742 
  112000    4.2547561    1.2684373    2.9863188  -0.14095783   0.84571507    0.9956792   0.75240336   -1.2465374            1   0.51196425   0.81653636   0.82079697  -0.10144057  0.002172825 -0.041786283 -0.0011963129   0.44309234   0.45516525  0.061518267  0.066666667    1.6890823        1e-10 1.5379567e-12    65.021337    2.4897262         70.1 -0.010576098  -0.10308347 -0.0038747151   0.11773344    2.1047312  -0.02306735 
  113000    4.2650028    1.2490004    3.0160025  -0.14765118   0.83275575   0.97262141   0.74573518   -1.2465374            1   0.57694242   0.86458969   0.86662258 -0.00038502361 0.0016564312 -0.060014771 0.00037928834   0.50868088   0.52145875  0.061524933  0.066666667    1.6873968        1e-10 1.5381233e-12    65.014293     2.485154         70.1 -0.0092005087  -0.10041491 -0.00025032872  0.077096321   0.15724749    5.5012606 
  114000    4.2609742    1.2653473    2.9956269  -0.14779317   0.84365485   0.99814817   0.74752016   -1.2465374            1   0.58691586   0.87847136   0.87045101  0.011825213 -0.0027207134 -0.017359678 -0.0013133974   0.51849093   0.52997601  0.061528958  0.066666667    1.6853515        1e-10 1.5382239e-12     65.01004    2.4948847         70.1 0.0087942208  -0.09571618 0.0070933696   0.11283366 -0.050774578    2.7855627 
  115000    4.2819146    1.2868217     2.995093  -0.14376114   0.85797262    1.0217689   0.75604277   -1.2465374            1   0.54825587   0.84896766   0.85035174 -0.054551801 0.0027717682 -0.028134429 -0.026393561   0.47905081   0.48996856  0.061529719  0.066666667    1.6839129        1e-10 1.538243e-12    65.009235    2.4863909         70.1 0.0055123346  -0.11635378 -0.0080708521  0.083800282      2.48067 -0.025394993 
  116000    4.2787188    1.2867469     2.991972  -0.14639627   0.85792274    1.0261801   0.75321275   -1.2465374            1   0.60179319   0.89330964   0.87935555   0.03271437 -0.0053804659 -0.018707681 -0.006470303   0.53284718   0.54325424  0.061513008  0.066666667    1.6775141        1e-10 1.5378252e-12    65.026896     2.483027         70.1 -0.0026435354  -0.09993327 -0.0067389103  0.091022404  -0.55843305   0.34911019 
  117000    4.2766022    1.2753572     3.001245  -0.15173114   0.85032881    1.0132678   0.74893192   -1.2465374            1   0.56251662    0.8542804   0.85087309 -0.017603627 0.00021435054  0.031408459 -0.0022686886   0.49396246   0.50471426  0.061526284  0.066666667    1.6660185        1e-10 1.5381571e-12    65.012865     2.487162         70.1 -0.011164649 -0.097239489 0.0063172289  0.077317089   0.12470631  -0.11494453 
  118000    4.2698092    1.2680547    3.0017544  -0.14474838      0.84546    1.0057571   0.74570867   -1.2465374            1   0.64849139   0.92245588   0.91999659   0.10302171 -0.0042517894 -0.031167059 -0.032445359   0.58023228   0.59111749   0.06150097  0.066666667    1.6693581        1e-10 1.5375242e-12    65.039625     2.481138         70.1 -0.0046531753  -0.10325982 -0.0049933621  0.086235946    1.3646269   0.86304544 
  119000    4.2538386    1.2466117    3.0072269  -0.14579634   0.83116312   0.98088837   0.73799775   -1.2465374            1   0.58643068   0.87336105   0.87328286   0.01264814 -0.00053578492 -0.018282365 0.0012933604   0.51887739   0.53047542   0.06150864  0.066666667    1.6644337        1e-10 1.537716e-12    65.031514     2.474881         70.1 -0.0062473503  -0.11901968 -0.0019359444   0.10516109   0.39328584    0.7002633 
  120000    4.2894938    1.2699937    3.0195001  -0.14847843   0.84675277    1.0034721   0.74923134   -1.2465374            1   0.56528115   0.85849336   0.85050366 -0.013153559 0.0047978002 -0.013790908 -0.025938764   0.49669959   0.50803759   0.06151794  0.066666667     1.661888        1e-10 1.5379485e-12    65.021683    2.4895909         70.1 -0.0011259877  -0.10469897 -0.0062331278   0.08756505    1.1306499    2.9559572 
  121000    4.2866514    1.2583351    3.0283163  -0.14702226   0.83897953   0.99605846   0.74123268   -1.2465374            1   0.51073536   0.81822269   0.81370568 -0.099722302 -0.0043545046 -0.016312477 -0.0045373142   0.44288596   0.45391471  0.061508313  0.066666667    1.6584485        1e-10 1.5377078e-12     65.03186    2.4801919         70.1 0.00028159842 -0.096565273 -0.002436485   0.10405096   0.29998905   -2.5596545 
  122000    4.2369992    1.2474868    2.9895124  -0.14563445   0.83174658   0.97998669   0.73950686   -1.2465374            1   0.57869608   0.87227321   0.86327811 0.00053690792 -0.0081065036 0.0041833134 -0.023454743   0.51100465   0.52279226  0.061528551  0.066666667    1.6673056        1e-10 1.5382138e-12     65.01047    2.5051733         70.1  0.010613659 -0.085120677 0.0047383665   0.10383882   -0.8916326   0.24835981 
  123000     4.284727     1.274904     3.009823  -0.14755962   0.85002667    1.0212347   0.74347643   -1.2465374            1   0.57811725   0.86807552   0.87037541 -0.0040991618 -0.0021229482  0.051867547  0.025553477   0.51006247   0.51986042  0.061515826  0.066666667    1.6694461        1e-10 1.5378957e-12    65.023918    2.4872652         70.1 -0.0017487514 -0.093753764 0.0034947501   0.10294049   -1.8569739   0.59683115 
  124000    4.2545956    1.2558657    2.9987299  -0.14807702   0.83733311   0.97869868   0.74937859   -1.2465374            1   0.55644813   0.85017578   0.85067367 -0.031505061 -0.0076930569  0.065832724  0.021008989   0.48785309   0.50061778  0.061559152  0.066666667    1.6617848        1e-10 1.5389788e-12    64.978153    2.5103895         70.1 -0.00093528544   -0.1075188  0.003992072  0.096512738   -0.9203771    2.4264866 
  125000    4.2696178    1.2538421    3.0157757  -0.14542259    0.8359839   0.98196018   0.74515574   -1.2465374            1   0.59489725   0.88049198   0.88018461  0.024015159 0.0048248597  0.030863364  0.016722833   0.52668875   0.53888085  0.061514189  0.066666667    1.6509837        1e-10 1.5378547e-12    65.025648    2.4867102         70.1 -0.0044447593  -0.08862811 -0.00072156781  0.090048481   0.11399822   0.39546258 
  126000    4.2775184    1.2555877    3.0219306  -0.14434015   0.83714778   0.98966891   0.74224104   -1.2465374            1   0.55430937   0.84671228   0.84277219 -0.026556353 0.0052489136 -0.003949782 -0.018383696   0.48636767   0.49785322  0.061507939  0.066666667    1.6428009        1e-10 1.5376985e-12    65.032256    2.4983499         70.1  0.013482217  -0.10320979 0.0055786844   0.10835738  0.062651664  -0.48073491 
  127000    4.2509826    1.2539475    2.9970351  -0.14609141   0.83605419   0.99494482   0.73717776   -1.2465374            1   0.59248172   0.88290998   0.87732313  0.017212049 0.00028475838 -0.0038051686 -0.010318756   0.52500349    0.5357246  0.061514444  0.066666667    1.6519395        1e-10 1.5378611e-12    65.025378    2.4851571         70.1 -0.0028060985 -0.084260653 0.0037120952  0.086394275    1.8311627   -0.9283547 
  128000    4.2905838    1.2789507    3.0116331  -0.14634902   0.85272474    1.0119047   0.75367092   -1.2465374            1   0.57085316   0.85753568   0.86064767 -0.0056238811 0.0042889922 -0.0096630556  0.021118691   0.50186521   0.51312856  0.061504215  0.066666667    1.6575687        1e-10 1.5376054e-12    65.036193     2.487799         70.1 -0.0028154666  -0.11311687 -0.010184309   0.10021645    1.7858798   -1.5172052 
  129000    4.2724228      1.27136    3.0010627  -0.14814467   0.84766376    1.0137772   0.74428808   -1.2465374            1   0.57601158   0.86645631   0.86650906 -0.0049306374 -0.0018753267 -0.018679035 0.0072594029    0.5078825   0.51818016  0.061498612  0.066666667    1.6537748        1e-10 1.5374653e-12    65.042119    2.4796197         70.1 0.0080459974 -0.090160354 -0.0087343874   0.09983677    2.6504737  -0.63717696 
  130000    4.3081355    1.2953749    3.0127606  -0.14566762   0.86367537    1.0345057   0.75736287   -1.2465374            1   0.64084799   0.91089719   0.92227231  0.089374474 -0.0027614713  0.058177763 -0.0077123775    0.5715221    0.5818341   0.06151516  0.066666667    1.6610931        1e-10 1.537879e-12    65.024621    2.4865451         70.1 0.0071297142 -0.089240638 -0.00065575222  0.094028786    1.4812301    2.9641128 
  131000    4.2566954    1.2569336    2.9997618  -0.14411283   0.83804509    0.9849141   0.74666093   -1.2465374            1   0.59132685   0.87950442   0.87583715  0.018638978 -0.0043368127  0.048202329 -0.0039649158   0.52298057   0.53514194  0.061545891  0.066666667    1.6542512        1e-10 1.5386473e-12    64.992153    2.5036688         70.1 -0.011299249  -0.08715973 -0.0048743221   0.11161721    1.4676302   0.61551072 
  132000    4.2797706    1.2609054    3.0188651  -0.14594281    0.8406933   0.99381637   0.74541204   -1.2465374            1   0.54246589    0.8369515   0.83659309 -0.046146914  -0.01200893  0.022697455  0.016489534   0.47423393   0.48577315  0.061536333  0.066666667    1.6724352        1e-10 1.5384083e-12    65.002248    2.4981073         70.1 0.0016944809  -0.09406788  -0.00213152   0.10177011    1.8296347   -5.3904726 
  133000    4.2771472    1.2657401    3.0114071  -0.13980369   0.84391676    1.0042723   0.74412878   -1.2465374            1   0.60417686   0.89618704   0.88463235  0.031711195 -0.0013933054 -0.0033694123  0.015256446   0.53606236   0.54688766  0.061493329  0.066666667     1.669363        1e-10 1.5373332e-12    65.047707    2.4691276         70.1 -0.0038311418   -0.1103202 0.0056385155  0.098213227   0.58787382   -1.3275399 
  134000    4.2376862    1.2456449    2.9920412   -0.1464002   0.83051853   0.98919085   0.73177721   -1.2465374            1   0.53130578   0.83233223   0.83024804 -0.068662949 -0.0038624867 -0.020969644 -0.011834406   0.46432189    0.4748769  0.061536256  0.066666667    1.6698191        1e-10 1.5384064e-12     65.00233    2.5009448         70.1  0.001885652   -0.1004323  0.006702518  0.091198623   0.17775734  -0.94758442 
  135000     4.235085    1.2350079     3.000077  -0.13560723   0.82342644   0.97778648   0.72737132   -1.2465374            1   0.60871163   0.89562353    0.8871304  0.043380959 0.0013408555 -0.044267085 0.0072233427   0.54213104   0.55293332  0.061529189  0.066666667    1.6731444        1e-10 1.5382297e-12    65.009795     2.504313         70.1 0.0041144704  -0.10097223 0.0041397931   0.12447313   0.46185101    1.4691563 
  136000    4.2729174    1.2802924     2.992625  -0.14884301   0.85361928   0.99997022   0.76256068   -1.2465374            1   0.56341882   0.85095016    0.8573837 -0.018077404 -0.0028806817 -0.050127434  0.018337534   0.49361714   0.50637503  0.061595345  0.066666667    1.6687187        1e-10 1.5398836e-12    64.939972    2.5250911         70.1 0.0042564337  -0.10147326 -0.0098678424  0.093894984   0.44550888  -0.55065822 
  137000    4.2548974    1.2521342    3.0027632  -0.14714146   0.83484515   0.99447947   0.73550505   -1.2465374            1   0.51481758    0.8182613   0.81927062  -0.09307917  0.003519352 -0.049464611 -0.013064035   0.44749247   0.45808701   0.06155819  0.066666667     1.674786        1e-10 1.5389548e-12    64.979168    2.5238776         70.1 0.0036209718 -0.081233128 -0.0081014724  0.090832347    1.2442172   -2.4007949 
  138000    4.2631733    1.2807846    2.9823886  -0.15091021    0.8539475   0.99917972   0.76358615   -1.2465374            1   0.60802691   0.89385221    0.8962033  0.034025238 0.00054101695  -0.06551005 0.0075123159   0.53813137   0.55102822  0.061535779  0.066666667    1.6637973        1e-10 1.5383945e-12    65.002834    2.5061745         70.1 0.0021260119 -0.077589488 0.0067368891   0.10270302    2.0227663    1.5948674 
  139000    4.2663417    1.2682152    2.9981264  -0.15037542     0.845567   0.99301001   0.75382643   -1.2465374            1   0.57781925   0.86296845   0.87036835 0.00012095711 0.0019553794 -0.013728406 -0.0050325937   0.50881707   0.52117251  0.061545869  0.066666667    1.6691863        1e-10 1.5386467e-12    64.992177    2.5151214         70.1 -0.0040019285 -0.092648591 -0.00024643779      0.11672    1.4182823   0.77399606 
  140000     4.283763    1.2588518    3.0249112  -0.14057161   0.83932404   0.99230483   0.74413123   -1.2465374            1   0.52029007   0.82443648   0.82823497 -0.091801228 -0.0073445529  0.060329465 -0.017929317   0.45217535   0.46368356  0.061536212  0.066666667    1.6715362        1e-10 1.5384053e-12    65.002376    2.4925396         70.1 -0.00091151932  -0.10279505 0.0053017486   0.10243089  -0.76406504   -1.8293545 
  141000    4.3058695    1.2734021    3.0324674  -0.14542838   0.84902527    1.0009055   0.75452002   -1.2465374            1   0.61512805   0.89304045   0.89350115  0.058842549 0.0008473164  0.053225047 -0.0034273488   0.54606238    0.5580309  0.061519354  0.066666667    1.6633653        1e-10 1.5379839e-12    65.020188    2.4934038         70.1 -0.010242652 -0.085450062 0.0043959501  0.096643763   0.41881425    2.1475076 
  142000    4.3099372    1.2882641    3.0216731  -0.14546633   0.85893435   0.99384159   0.77500843   -1.2465374            1   0.58453172   0.86730086      0.86968  0.016614285 -0.0072091228  0.026515016  0.016099658   0.51359062   0.52783754  0.061537559  0.066666667     1.660329        1e-10 1.538439e-12    65.000953    2.5072621         70.1  0.006284579 -0.086159028 0.00072246697   0.11687553  -0.29226844     1.150681 
  143000    4.2652682    1.2668479    2.9984203  -0.14992038   0.84465536   0.99334417   0.75213824   -1.2465374            1   0.52286531   0.82924993   0.83090698 -0.091560989 0.00068040127  0.036315792  0.004781636   0.45401766    0.4661995  0.061533915  0.066666667     1.652359        1e-10 1.5383479e-12    65.004802    2.4980031         70.1 -0.0033163272 -0.092056499 -0.013462601   0.12690552  -0.12053966   -1.4828893 
  144000    4.2699387    1.2622941    3.0076446  -0.13955747   0.84161918   0.98011716   0.75545249   -1.2465374            1   0.66737842   0.93782749   0.93535276   0.12895503 0.0010435452 -0.022149377  0.015657878    0.5982274   0.61146716  0.061504654  0.066666667    1.6580404        1e-10 1.5376163e-12    65.035729    2.4904123         70.1 0.0042267464 -0.081921415 -0.010585963   0.10683961   0.47102709    1.8148518 
  145000    4.2905495    1.2896475     3.000902  -0.13739468   0.85985674    1.0098749   0.76651379   -1.2465374            1   0.62181606   0.89932765   0.90068997  0.065430556 -0.0025854517 -0.025081952  0.015074584   0.55165253   0.56420725  0.061530023  0.066666667    1.6563124        1e-10 1.5382506e-12    65.008914    2.4982572         70.1 -0.0028740727  -0.11340024 -0.0066268955  0.070629778  -0.41303169    1.7969146 
  146000    4.2850012    1.2618813    3.0231199  -0.14243407   0.84134395   0.98595865   0.75136525   -1.2465374            1   0.56897374   0.85081072   0.85955941 -0.0034489175 -0.0086030488 -0.050036796  0.020999049   0.50019684   0.51272924   0.06155212  0.066666667     1.640032        1e-10 1.538803e-12    64.985577    2.5041615         70.1 -0.0056047602  -0.11112641 -0.0067428292   0.12500739   0.88245581     2.390928 
  147000    4.2975205    1.2532575     3.044263  -0.14830265   0.83559415   0.97444445   0.74920684   -1.2465374            1   0.58982633   0.87428798   0.88794884 0.0072421521 -0.0071317703 -0.083631983   -0.0461466     0.521247   0.53423866  0.061525462  0.066666667    1.6511296        1e-10 1.5381366e-12    65.013734     2.491091         70.1  0.010454994 -0.091334732  0.011024307  0.099736662    0.7840575  -0.94407753 
  148000    4.2621606    1.2634386     2.998722  -0.14468767   0.84238226   0.99542805   0.74714946   -1.2465374            1   0.54925214   0.84122759   0.85062724 -0.044098414 -0.0040842069 -0.069338906 -0.0052431898   0.48086114   0.49246746  0.061516558  0.066666667    1.6631083        1e-10 1.537914e-12    65.023144    2.4876296         70.1 -0.0094041836  -0.11242358 -0.0044428572   0.10521329    1.7754287   -2.2988903 
  149000    4.2691655    1.2448999    3.0242657  -0.14706044   0.83002176   0.97216438   0.74158172   -1.2465374            1   0.49129212   0.80652025   0.79943886  -0.13208276 0.0017493683 -0.096093324 0.0031939538   0.42341077   0.43583452  0.061536158  0.066666667    1.6836084        1e-10 1.538404e-12    65.002433    2.5024086         70.1  0.015576836 -0.091021336 -0.011327381  0.082402905    1.1515901   -1.7917453 
  150000     4.294587    1.2881953    3.0063917  -0.14381237   0.85888848    1.0032487   0.76907145   -1.2465374            1   0.59238309     0.877343   0.88028188  0.019524382 0.0015718781 -0.035179129  0.012010181   0.52198544   0.53515228  0.061543204  0.066666667    1.6810638        1e-10 1.5385801e-12    64.994991    2.5045477         70.1 -0.0049657217  -0.11705564 0.0019037917   0.10493027  -0.51543375    3.2185508 
  151000    4.2739988    1.2612338     3.012765  -0.14702267   0.84091224    1.0038589   0.73950892   -1.2465374            1   0.59376992   0.88132581   0.88270841  0.017275532 -0.00069203815 -0.029042898 -0.0073190403    0.5260783   0.53650429  0.061532167  0.066666667    1.6706917        1e-10 1.5383042e-12    65.006649     2.498388         70.1 -0.0015486778 -0.096308337 -0.011239269   0.11431805    0.7697746  -0.98814978 
  152000    4.2919644    1.2758243    3.0161401  -0.14204136   0.85064028   0.99060301   0.76356232   -1.2465374            1   0.61879728   0.90256918   0.89029839  0.063524272 -0.0036772353 -0.0090454528 -0.0097511733   0.54890392   0.56228785  0.061510602  0.066666667    1.6785508        1e-10 1.5377651e-12     65.02944    2.4901827         70.1 0.0068656656  -0.13138145  0.011754394   0.11173533  -0.31320138   -1.4053146 
  153000     4.296164     1.298845     2.997319  -0.14749842   0.86598904    1.0156611   0.77286284   -1.2465374            1   0.57979716   0.86404741    0.8791308 -0.0037867111 0.0023872338  0.016897106  0.016021787   0.50905247   0.52185828   0.06152949  0.066666667    1.6670038        1e-10 1.5382373e-12    65.009477    2.4903603         70.1 0.00014876177  -0.10628971 -0.0030693726   0.10756046  -0.19017628   -1.2572848 
  154000    4.3001463    1.2873303     3.012816  -0.14071168   0.85831172    1.0384059   0.74622501   -1.2465374            1   0.60817554   0.90181861   0.88563291  0.037075118 -0.0016822445  0.019824492  0.012070071   0.53986917   0.54893917  0.061531199  0.066666667    1.6799984        1e-10  1.53828e-12    65.007672      2.51084         70.1 0.0077356284  -0.10959445 0.0041379674  0.087643178    0.5547541   -0.2670758 
  155000      4.26309    1.2645571    2.9985329  -0.15439155   0.84312799   0.97746277   0.75955608   -1.2465374            1   0.56277534   0.84810163   0.85400934 -0.013784947 0.00031116165  0.010493656  0.001519188   0.49324869    0.5070155  0.061506941  0.066666667    1.6847591        1e-10 1.5376735e-12    65.033311    2.4768468         70.1  0.019111623  -0.11288306 0.0030427661  0.099948864    1.1435354  -0.64187455 
  156000    4.2707446    1.2633555    3.0073891  -0.14027671   0.84232682     1.011186   0.73723906   -1.2465374            1   0.60137367   0.87485513   0.88521755  0.044048318 0.0013501968 -0.0038839852 -0.002198483   0.53388983   0.54369007  0.061531707  0.066666667    1.6847293        1e-10 1.5382927e-12    65.007135    2.4825747         70.1 0.0011211647  -0.10710834 -0.0050322813   0.10353312     2.113082   0.90068086 
  157000    4.2639959     1.256765     3.007231  -0.14620039   0.83793268    1.0050568   0.73392543   -1.2465374            1    0.5388722   0.83660155   0.83879136 -0.058776293 0.0022295278  0.037558195  0.019384695   0.47169168   0.48153824  0.061534336  0.066666667    1.6775787        1e-10 1.5383584e-12    65.004358    2.4997328         70.1 -0.010545316  -0.12023636 0.0074623369  0.098709418  -0.25423472   -2.5936846 
  158000    4.2782513    1.2701678    3.0080835  -0.14797876   0.84686885    1.0150369   0.74221261   -1.2465374            1     0.633995   0.90419175   0.91316927  0.084623979 -0.00028508311  0.017309051 -0.0072711774    0.5660559   0.57609173  0.061541603  0.066666667    1.6777917        1e-10 1.5385401e-12    64.996682    2.4870196         70.1 0.0012847333 -0.097523082 -0.0030153521  0.093158847    1.7795072    1.4462802 
  159000    4.2372436     1.238566    2.9986775  -0.14613789   0.82579876   0.98130815   0.72902776   -1.2465374            1   0.56675094    0.8506375   0.87655733 -0.026942011 -0.0025590645 -0.0096207572 -0.024858152   0.50001873   0.51077173  0.061523856  0.066666667    1.6832394        1e-10 1.5380964e-12    65.015431    2.4929152         70.1 -0.0012509462  -0.12548602 0.0063371367  0.085321833    1.6575903   0.14214711 
  160000    4.2737354    1.2862281    2.9875073  -0.14273816   0.85757687    1.0138654    0.7603258   -1.2465374            1   0.66058326   0.93479834   0.94121236   0.10573909 0.0029143924 -0.025756542 -0.0075242309   0.59098615   0.60274681  0.061513249  0.066666667    1.6723511        1e-10 1.5378312e-12    65.026642    2.4886224         70.1 0.0045411509  -0.10218008 0.0070244024  0.083462567  -0.68933565    2.5662682 
  161000     4.295223     1.278368     3.016855  -0.14478503   0.85233624   0.99727126   0.76215982   -1.2465374            1   0.56796033   0.85083539   0.86170393 -0.0086583274 -0.00064570437 -0.0017588451 -0.0040407606   0.49819534    0.5110705  0.061517591  0.066666667     1.656912        1e-10 1.5379398e-12    65.022052      2.47632         70.1 -0.0076035097 -0.079706944  0.011885368   0.11350986   0.44578257    2.5655431 
  162000    4.2991433    1.2860293    3.0131141  -0.14966055   0.85744429    1.0165353   0.75844672   -1.2465374            1   0.54224667   0.84303681   0.84433484 -0.060631632 -0.00024888799 -0.023791909 -0.014167973   0.47282157   0.48425792  0.061507267  0.066666667    1.6546111        1e-10 1.5376817e-12    65.032966    2.4921796         70.1 0.0072507721  -0.09352069 -0.0059497346  0.081409147    1.5364486   -1.5643945 
  163000    4.2751064    1.2619021    3.0132043  -0.13927465   0.84135781   0.99007313   0.74882359   -1.2465374            1   0.59268994   0.88878679   0.87841765  0.010865377 0.0030082963 0.0086218736   0.03390038    0.5241457   0.53621073  0.061541139  0.066666667    1.6539422        1e-10 1.5385285e-12    64.997172    2.4870488         70.1 0.0051225232 -0.093923846 -0.0013374817   0.10196351   0.45781132  -0.13933631 
  164000    4.2565082    1.2630908    2.9934173  -0.14276164   0.84215039   0.98800886    0.7513967   -1.2465374            1   0.58799045    0.8696792   0.88438126 0.0099109102 0.0045262729  0.011888289   0.01711645   0.51921068     0.531629  0.061558968  0.066666667    1.6521695        1e-10 1.5389742e-12    64.978347    2.5249934         70.1 0.0034368002 -0.078417303 -0.0075163789  0.090879825    2.1611734    1.4752125 
  165000    4.2868093    1.2741847    3.0126246  -0.14351219   0.84954705    0.9852023   0.76515334   -1.2465374            1   0.55307238   0.84541858   0.85713237   -0.0433338 -0.00080919671 0.0031048693  0.008390026   0.48303338   0.49687103  0.061527511  0.066666667    1.6544121        1e-10 1.5381878e-12    65.011569    2.4812154         70.1 0.0023821757  -0.10076444 -0.0060584231   0.10341104  -0.22171066    1.2049696 
  166000    4.2523662    1.2323503    3.0200159  -0.14752581   0.82165451   0.97327439   0.72730675   -1.2465374            1   0.54854038    0.8470837   0.84505938 -0.046521939 -0.0019439514 -0.049961675 -0.026028571    0.4819657   0.49301946  0.061512467  0.066666667    1.6577235        1e-10 1.5378117e-12    65.027468    2.4815401         70.1 0.0089585236 -0.094396564 -0.0056304709   0.10358364     0.926502  -0.69527065 
  167000    4.2839347    1.2763768     3.007558  -0.13994085   0.85100862    1.0081718   0.75321134   -1.2465374            1   0.58788672   0.86725781   0.87757959  0.018822761 0.0069975934 0.0075680352 -0.0074235086   0.51894084   0.53037507  0.061543762  0.066666667    1.6621139        1e-10 1.5385941e-12    64.994402    2.5112775         70.1  0.014273955  -0.10316082 -0.0049838464  0.075024606   0.96188951      1.70496 
  168000    4.2661596    1.2534284    3.0127312  -0.14751514   0.83570806   0.99423549   0.73705793   -1.2465374            1   0.52109988   0.82606927    0.8242269 -0.086996518 -0.0028240654 -0.0097947083 -0.0070153153   0.45363262   0.46438323  0.061503854  0.066666667    1.6532127        1e-10 1.5375963e-12    65.036575    2.4768218         70.1 0.0050032503 -0.071780866 -0.0098343758   0.10678867 -0.084566383   -1.6733782 
  169000    4.2654693      1.26654    2.9989293  -0.14480515   0.84445003   0.98312515   0.75817345   -1.2465374            1   0.57254263   0.86175294   0.86030302 -0.0044280693 0.0016923885  -0.01134489  0.013002242   0.50314254   0.51645977  0.061519849  0.066666667    1.6588625        1e-10 1.5379962e-12    65.019665     2.493323         70.1 0.0084475282  -0.10015444 -0.0059896954  0.083513699   0.50891356    2.0838651 
  170000    4.2951234    1.2821435    3.0129799  -0.14322516   0.85485352      1.01072     0.757865   -1.2465374            1   0.55769266   0.84676345    0.8505853  -0.02427077 0.0046854951  0.027766687 -0.0017123223   0.48832081   0.50003564  0.061543349  0.066666667    1.6578851        1e-10 1.5385837e-12    64.994838    2.5163691         70.1 -0.0059070105  -0.11040854   0.00329615   0.10420693  -0.48177654    1.3359647 
  171000    4.2843288    1.2660551    3.0182737  -0.14901533   0.84412678   0.98230657   0.75815883   -1.2465374            1   0.51782434   0.82163115   0.83100016 -0.099158299 0.0012047572 -0.0083178596 -0.011169437   0.44842559   0.46178818  0.061551095  0.066666667    1.6386307        1e-10 1.5387774e-12    64.986658    2.5052595         70.1 -0.011999083 -0.097303929  0.001657954   0.10164704   -2.2723089   0.04304357 
  172000    4.2885094     1.275589    3.0129204  -0.14767135   0.85048337    1.0019261   0.75625099   -1.2465374            1    0.6113225   0.89418738   0.88816291  0.051617188 0.00083449694 -0.0006575973  0.028896983   0.54209838   0.55416713   0.06152926  0.066666667    1.6290474        1e-10 1.5382315e-12    65.009721    2.4870301         70.1 -0.0075713178 -0.095149179 -0.010851396   0.10908955  -0.70634393    1.8157231 
  173000     4.276281    1.2790522    2.9972287  -0.15621844   0.85279244    1.0135686   0.75274383   -1.2465374            1   0.55975877   0.85526152   0.85539395 -0.031379152 -0.0035132045 -0.005820519  0.003992262   0.49085569   0.50193925  0.061545725  0.066666667    1.6359158        1e-10 1.5386431e-12    64.992328    2.4941761         70.1 0.0059970479  -0.10034972 -0.0032545351  0.080220392   -0.9624589    2.1736296 
  174000    4.2700219    1.2557065    3.0143154  -0.15051574   0.83722697   0.99550383   0.73873326   -1.2465374            1   0.59766719    0.8822801    0.8834387   0.02728275 -0.0042626272 0.0053470621  0.014407219   0.53004657   0.54087818  0.061523251  0.066666667    1.6509932        1e-10 1.5380813e-12     65.01607    2.4869967         70.1 0.00025897255  -0.12520201 0.0092590514   0.12182676    1.3280885   0.87967312 
  175000    4.3058568    1.2835069    3.0223499  -0.14715099   0.85576251    1.0173744   0.75519358   -1.2465374            1   0.50948864   0.81158099   0.82337963  -0.10649469 -0.00059730275 -0.019965167 0.0019008038   0.44036132   0.45145202  0.061514086  0.066666667    1.6446246        1e-10 1.5378522e-12    65.025757    2.4946023         70.1 0.0023470985  -0.10586476  0.013076651   0.12185406    2.5479242   -2.8878217 
  176000    4.2613946    1.2483266     3.013068  -0.14509561   0.83230651   0.99032018   0.73397597   -1.2465374            1   0.52207077   0.84019192   0.82279563 -0.096775255 -0.0015127172 0.0052418925  0.023530211   0.45488561   0.46557747  0.061511944  0.066666667    1.6485454        1e-10 1.5377986e-12    65.028021    2.4775814         70.1 0.0030128333 -0.097562781 0.0061494916  0.092422283   0.17063577   -2.3902304 
  177000    4.2564379    1.2414162    3.0150217   -0.1434877   0.82769905   0.98920048   0.72719412   -1.2465374            1   0.59620163   0.87912521   0.87688451  0.032595182 -0.0054210753 -0.017970453 0.0064377369   0.52963727   0.53977221  0.061512183  0.066666667    1.6456706        1e-10 1.5378046e-12    65.027769     2.472281         70.1 0.0075841993  -0.10580517  0.012973988  0.079600212    2.2522167   -1.3091894 
  178000    4.2707381     1.263866    3.0068721  -0.13656722   0.84266719   0.99926044   0.74522366   -1.2465374            1    0.5938304   0.89102621   0.86777385  0.022691124 -0.0039635714  0.010522142 -0.000740018   0.52561568   0.53682709  0.061520476  0.066666667      1.64527        1e-10 1.5380119e-12    65.019003    2.4828952         70.1 -0.0053726003  -0.10433294 -0.0016468767   0.09466277   0.96606797  0.051562914 
  179000    4.3208805    1.2936125     3.027268  -0.14349294   0.86250032    1.0238166   0.76211681   -1.2465374            1   0.54875802   0.84070989   0.84823441 -0.042670238 0.0025864076  0.036633327  0.013373357   0.47899697    0.4903539  0.061535057  0.066666667    1.6435778        1e-10 1.5383764e-12    65.003596     2.499453         70.1 0.0016341634 -0.085611027 -0.012802709    0.1000948  -0.96995714    1.3955044 
  180000     4.278625    1.2803041    2.9983208  -0.14813693   0.85362713    1.0192398   0.75056456   -1.2465374            1   0.54213272   0.84700071   0.83672211 -0.057324676 -0.0067413518 -0.006036223 -0.0068255586   0.47342911   0.48398968  0.061526986  0.066666667    1.6401419        1e-10 1.5381746e-12    65.012124    2.5111718         70.1 -7.7782798e-05  -0.11088702 -0.0079123974  0.078977942   0.37414898   0.40471085 
  181000    4.2547737    1.2498408    3.0049329  -0.14905819   0.83331608    1.0085068   0.72428094   -1.2465374            1   0.62087113   0.89721648   0.89791417  0.067482736 -0.0019553851  0.032071818 -0.011750272   0.55457342   0.56334037  0.061507403  0.066666667    1.6342772        1e-10 1.5376851e-12    65.032823    2.4881048         70.1 0.00060791243 -0.096241845 -0.011474676   0.10752869   -2.0989095   0.74943007 
  182000    4.2623607    1.2667916    2.9955691   -0.1527289   0.84461783   0.99487372    0.7511241   -1.2465374            1   0.58592686   0.86811089   0.88055477 0.0091149114 -0.007462117 -0.012327419  0.035582054   0.51717203    0.5291738  0.061558571  0.066666667    1.6231332        1e-10 1.5389643e-12    64.978766     2.503632         70.1 0.0071794589 -0.079025548 -0.0053140124  0.092167009  -0.87649163  -0.51420032 
  183000    4.2995025    1.2825784     3.016924   -0.1464539    0.8551435     1.005124   0.76182319   -1.2465374            1   0.57975528   0.86955135   0.86941763  0.000296851 -0.0050117893  0.020225448 -0.0083481829    0.5100211   0.52241748  0.061547124  0.066666667    1.6266645        1e-10 1.5386781e-12    64.990852    2.5090745         70.1 0.0083370227 -0.081750562  0.010340377   0.12758017   -1.4850325   -1.8569036 
  184000     4.297136    1.2644363    3.0326997   -0.1437505   0.84304743   0.99360381   0.74936616   -1.2465374            1    0.5361022   0.83201689   0.84719428 -0.070904568 0.0018410551  0.042759989 0.0063213606    0.4675083   0.47942159  0.061528009  0.066666667    1.6291917        1e-10 1.5382002e-12    65.011042    2.4942668         70.1 0.0097129273  -0.12002397 -0.0029969362  0.092031343  -0.91195146   -2.6155293 
  185000    4.2835871    1.2496613    3.0339258  -0.14967813   0.83319637   0.98319139   0.73986324   -1.2465374            1   0.60732111   0.88285188   0.88504468  0.054066771 -0.0065175081  0.051987611 -0.010288216   0.53959706   0.55123447  0.061513501  0.066666667    1.6449993        1e-10 1.5378375e-12    65.026375    2.4832196         70.1 0.0037982328  -0.11919277 0.00031689514  0.087816789   -1.1090306  -0.16608823 
  186000    4.2503547    1.2531401    2.9972146  -0.14708778   0.83551582   0.96757607    0.7533601   -1.2465374            1   0.54701302    0.8376075   0.85525754 -0.051825989 0.0014402885  0.038754142 0.0028503348   0.47805352   0.49181717   0.06153686  0.066666667    1.6575271        1e-10 1.5384215e-12    65.001692    2.4941885         70.1 -0.0044310858 -0.098272005 0.0077978412  0.099726772   -1.4109416  -0.37469652 
  187000    4.2578411    1.2821456    2.9756956  -0.14724652   0.85485488    1.0142522   0.75566595   -1.2465374            1   0.59699241   0.88589155   0.88387371  0.021211985 -0.0010998867  0.037494057  0.013690409   0.52782185    0.5391339  0.061536104  0.066666667    1.6540961        1e-10 1.5384026e-12     65.00249    2.4902933         70.1  0.013676991  -0.13616618 0.0042988007  0.082485883    -1.300248    2.4337523 
  188000    4.2690578    1.2515247    3.0175332  -0.14730518   0.83443877   0.99115232   0.73691884   -1.2465374            1   0.54698405   0.83867214   0.84521701 -0.042936985 -0.0056403221  0.012708931  0.031057877   0.47952952   0.49044328   0.06149765  0.066666667    1.6331392        1e-10 1.5374412e-12    65.043136    2.4797464         70.1 0.0011344234 -0.087264976 0.00045558856   0.10836447   -1.9162816    1.1418367 
  189000    4.2818264    1.2580378    3.0237886  -0.13029191   0.83878134   0.99828877   0.73952101   -1.2465374            1   0.56099841   0.85552629   0.86125769 -0.033788749 -0.0051019278  0.041130263 -0.024343727   0.49330569   0.50405054  0.061524572  0.066666667    1.6223214        1e-10 1.5381143e-12    65.014674    2.5036346         70.1 -0.00058156591 -0.095547444 -0.0011667369  0.095830732   -2.8967325   -1.1851324 
  190000    4.3196972    1.2771589    3.0425383  -0.14634492   0.85153005     1.006142   0.75532282   -1.2465374            1   0.52487679   0.82627206   0.82655867 -0.078200347 0.0033435954  0.058188333 0.0030736917   0.45573764   0.46748093  0.061546236  0.066666667    1.6286241        1e-10 1.5386559e-12    64.991789    2.4851572         70.1 0.0018555463  -0.10167508 -0.0039497498    0.1003169   -1.3280795   -1.5158825 
  191000    4.2630841    1.2641175    2.9989665  -0.14486026   0.84283491   0.99416888     0.748669   -1.2465374            1   0.60335936   0.88376355   0.88668156  0.039632972 -0.0027478076  0.072356724  0.027683293   0.53482927   0.54664651  0.061520321  0.066666667    1.6199209        1e-10 1.538008e-12    65.019167    2.4880444         70.1 -0.0018064419 -0.098790341 0.0038301556  0.081372285   -2.6001471  -0.69529505 
  192000    4.2890721    1.2782787    3.0107935  -0.15123963   0.85227667    1.0105388   0.75379474   -1.2465374            1    0.6087918   0.90048493   0.89266051  0.033229971 0.0094733718  0.059021862 0.0011663074   0.53979252   0.55114512  0.061544556  0.066666667     1.610706        1e-10 1.5386139e-12    64.993563    2.5257815         70.1 0.0039000696 -0.096478413 -0.00060072501   0.11790076   -0.8441964    1.2432194 
  193000    4.2663526    1.2631578    3.0031948  -0.14178796   0.84219502   0.99610242   0.74642523   -1.2465374            1   0.60288011   0.89570211   0.87420337  0.038734854 -0.0017142247  0.038086568  0.025754149    0.5345554   0.54605696  0.061525356  0.066666667    1.6282192        1e-10 1.5381339e-12    65.013846    2.5099936         70.1  0.011867867  -0.12294427 -0.0033499244   0.11144542   0.89148243    3.2213099 
  194000    4.2807887    1.2664239    3.0143647  -0.14316193   0.84437269   0.99443215   0.75100132   -1.2465374            1   0.58745636   0.88020642   0.88001284 0.0021498229 0.0013218281 -0.00043448695 0.0059064428   0.51871278   0.53072849  0.061536211  0.066666667    1.6174418        1e-10 1.5384053e-12    65.002377    2.5078481         70.1 -0.0020081474 -0.096772404 0.0066733156  0.092629366  -0.63244182   0.08885629 
  195000    4.2698757    1.2651941    3.0046816  -0.15133109   0.84355271   0.99967334   0.74640386   -1.2465374            1   0.49391419    0.8030245   0.80029941  -0.12158134 -0.0031472881 -0.015413916  0.014089838   0.42559144   0.43688733  0.061512651  0.066666667    1.6136138        1e-10 1.5378163e-12    65.027274    2.4781906         70.1 0.0047180222 -0.097507074 0.0022312919  0.096603351 -0.058364622   -1.8737929 
  196000    4.2514366    1.2491876     3.002249  -0.14359816   0.83288055   0.98487853    0.7382991   -1.2465374            1   0.56369193   0.86396844   0.84918157 -0.022074227 -0.0053523832  0.028358554  0.013503841   0.49611106   0.50750905  0.061524541  0.066666667    1.6157181        1e-10 1.5381135e-12    65.014707    2.5024908         70.1 -0.0047091704   -0.1012947 0.00073309126   0.12064287  -0.45985587   0.41873376 
  197000    4.2790969    1.2544297    3.0246672  -0.13965872   0.83637565    0.9983844   0.73555606   -1.2465374            1   0.57630527   0.86766871   0.86334995 -0.0021028431 0.0013134884  0.044805622  -0.01482891   0.50897549   0.51935195  0.061509355  0.066666667    1.6188875        1e-10 1.5377339e-12    65.030759    2.4759085         70.1 -0.0025020501   -0.1022422 -0.0050131766   0.11730311   -1.8427233    1.8462008 
  198000    4.2536271    1.2563235    2.9973036  -0.15006604   0.83763832   0.99705807   0.73843243   -1.2465374            1   0.55812965   0.85399916   0.85577381 -0.035384004 -0.0043153454  0.030882222 -0.0017825489   0.49053658   0.50125199  0.061544316  0.066666667    1.6218559        1e-10 1.5386079e-12    64.993817    2.4942862         70.1 0.0063395401 -0.098731355 0.0053300846  0.099799513  -0.73349117  -0.38525235 
  199000    4.2668608    1.2655313    3.0013296  -0.14765218    0.8437775    1.0160598    0.7365567   -1.2465374            1   0.61179622   0.89508444   0.89153579  0.048768423 -0.0016369469  0.016582279 -0.019448394   0.54437483   0.55383459  0.061534012  0.066666667    1.6174311        1e-10 1.5383503e-12      65.0047    2.4968793         70.1 0.00027560293  -0.11440386 0.00011463649  0.096219479   0.60452178    2.9042623 
  200000    4.2909793    1.2772436    3.0137357   -0.1440256   0.85158658    1.0238221   0.74439624   -1.2465374            1   0.52526075   0.82088363   0.83354599 -0.078647375 -0.0048547546 -0.037440453 -0.0072846362   0.45712177   0.46685631  0.061550332  0.066666667    1.6174932        1e-10 1.5387583e-12    64.987464     2.515234         70.1  0.013253007 -0.083336329 -0.002064346  0.096058809   0.29917235    1.8617344 
  201000     4.287004    1.2839811    3.0030228  -0.14196395   0.85607873    1.0317383   0.74675533   -1.2465374            1   0.56395582   0.86197041   0.85460869 -0.024711648 -0.0071486469 -0.038892996 0.0031429688   0.49560089    0.5050998  0.061525259  0.066666667    1.6056268        1e-10 1.5381315e-12    65.013948    2.4942564         70.1  0.002759973 -0.073254994 0.0035983455  0.087970562   0.63809483    1.0604409 
  202000    4.3075258    1.2884718     3.019054  -0.14219882   0.85907285    1.0199821   0.75894243   -1.2465374            1   0.61724498   0.88996739   0.90363613  0.058131427 -0.0031479469 -0.0075426315 -0.018048056    0.5477745   0.55905961  0.061509583  0.066666667    1.6132721        1e-10 1.5377396e-12    65.030517    2.4889723         70.1 -0.0029148871 -0.095363947  0.012804069   0.11362619   0.31072537    2.1449902 
  203000    4.2514843    1.2650265    2.9864578  -0.14615884   0.84344096    1.0077473   0.74119073   -1.2465374            1   0.62625795   0.90533032   0.90312941  0.070314126 0.0025019997 -0.035479071   0.04693447   0.55841239   0.56877051  0.061527761  0.066666667    1.6150923        1e-10 1.538194e-12    65.011304    2.4902683         70.1  0.011448766  -0.11183432 0.00053440972   0.09132096      2.73713    4.6886039 
  204000    4.3010108    1.2663587     3.034652  -0.14372463    0.8443292    1.0167856   0.73699999   -1.2465374            1   0.54862404   0.84166451   0.84954328 -0.045335665  0.003312234 -0.020998173 -0.00074879579   0.48116209   0.49062101   0.06150761  0.066666667    1.6271334        1e-10 1.5376903e-12    65.032603    2.4819181         70.1 0.0040042758  -0.10911249 0.0030899152  0.089983598    1.7999494    1.0671479 
  205000    4.2827222    1.2587869    3.0239353  -0.15001478   0.83928077   0.99835409   0.74029105   -1.2465374            1   0.58411572   0.85975033   0.87675688   0.01583994 -6.0715272e-05 -0.0032334648 -0.022872973   0.51635251   0.52716412   0.06153087  0.066666667    1.6295525        1e-10 1.5382717e-12     65.00802    2.4890432         70.1 0.00036022309  -0.10970879 -4.7450467e-05  0.088599765   0.89427241   -1.0376831 
  206000    4.2929212    1.2862168    3.0067044   -0.1439279   0.85756932    1.0204135   0.75623277   -1.2465374            1   0.51054032   0.81759956   0.81702252  -0.10300113 0.0026806542  0.020182992 0.0062411025   0.44131787   0.45233033  0.061504604  0.066666667    1.6355991        1e-10 1.5376151e-12    65.035782    2.4836847         70.1  0.015058507 -0.085137688 -0.005662319   0.10989208    1.5578551   -2.0318254 
  207000    4.2791327    1.2581328    3.0209998  -0.14100443    0.8388447   0.98395873   0.74855439   -1.2465374            1    0.5413142   0.83320032   0.84536709 -0.054624818 -0.00022403842  0.046371908 -0.012230806    0.4727946   0.48518379  0.061527167  0.066666667    1.6325402        1e-10 1.5381792e-12    65.011932    2.4772922         70.1 0.0043318004  -0.10534681  0.010043976    0.1240649  -0.30062698   -1.9659321 
  208000    4.2377865    1.2505588    2.9872277  -0.14319416    0.8337948   0.98160208   0.74182517   -1.2465374            1   0.57822392     0.865714   0.87332462 -0.0043668554 -0.0065934652  0.009152737 -0.033217061   0.51032029   0.52222795  0.061501885  0.066666667    1.6307613        1e-10 1.5375471e-12    65.038657    2.4778388         70.1 -0.0053820066  -0.10175376 0.0024459381  0.088940061  -0.61069946   -1.2446887 
  209000    4.2693908    1.2484079    3.0209829  -0.14181549   0.83236071   0.96350172   0.75077732   -1.2465374            1   0.59562548   0.88460319   0.87944815  0.022825102 -0.0025182742 -0.0028877005 -0.018836296    0.5269024   0.54066205  0.061499733  0.066666667    1.6163337        1e-10 1.5374933e-12    65.040933    2.4739424         70.1 0.0057462507 -0.096238917 -0.0041165002  0.097703686  -0.93048808   -2.0611307 
  210000    4.2726908    1.2590812    3.0136096  -0.14983286   0.83947701   0.99534815   0.74248294   -1.2465374            1   0.56572748   0.85749884   0.85092984 -0.011246229 0.0022274504 -0.0046579243 0.0018393599   0.49776364   0.50894736  0.061545958  0.066666667    1.6140445        1e-10 1.5386489e-12    64.992083    2.4888182         70.1 0.0031542182 -0.076368684 -0.0059221597  0.098776688   -1.0828996   0.27083081 
  211000    4.2786528    1.2698866    3.0087662  -0.15181439   0.84668134   0.99969242   0.75147092   -1.2465374            1   0.57214305   0.86271938   0.85979415 -0.0060843918 -0.0023528704 -0.018768941  0.031279046   0.50335648    0.5151151  0.061516772  0.066666667     1.607566        1e-10 1.5379193e-12    65.022918    2.4973209         70.1 -0.0023862138 -0.097594916 -0.016449815  0.096137318   -1.1740289  -0.60433473 
  212000    4.2839534    1.2659621    3.0179913  -0.13735154   0.84406474   0.99253769   0.75168205   -1.2465374            1   0.62103735   0.90115427   0.89831596  0.063641807 0.0012666314  -0.03042092 -0.0027439976   0.55223145   0.56441755  0.061496883  0.066666667    1.6111198        1e-10 1.5374221e-12    65.043947    2.4753958         70.1 -2.4484019e-05  -0.11433459 -0.016013563  0.095090225  -0.60714601   0.30052526 
  213000    4.2886957    1.2558445    3.0328511  -0.14308968     0.837319   0.98546598   0.74513828   -1.2465374            1    0.6282187   0.89871809   0.90695632  0.078981677 -0.00085315163  0.035234913  0.013158169   0.56001179   0.57200231  0.061544614  0.066666667    1.5896204        1e-10 1.5386154e-12    64.993502    2.4888645         70.1 0.0094617439   -0.1121554  0.019680033   0.10059651   -1.0077554    2.0335149 
  214000    4.3132588     1.285123    3.0281358  -0.14295668   0.85684003   0.99864745   0.76861353   -1.2465374            1   0.53065798   0.83374608   0.82945251 -0.071224653 -0.00099372581 0.0035326599 -0.0070122767   0.46030225   0.47368965  0.061536391  0.066666667    1.5835264        1e-10 1.5384098e-12    65.002187    2.4837444         70.1 -0.0049184212  -0.10646023 -0.0043994432   0.10439779  -0.73888865  -0.23255271 
  215000    4.2907152     1.278094    3.0126213  -0.14616591   0.85215354    0.9909358    0.7658115   -1.2465374            1   0.58539891   0.87792462   0.86805601  0.010216087 -0.0054589144   0.01933972  0.015481691   0.51529966   0.52887049  0.061491129  0.066666667    1.5852717        1e-10 1.5372782e-12    65.050034    2.4675219         70.1 -0.0033085296 -0.099708312 0.0057746589  0.089288319   0.64260053    1.4700508 
  216000    4.2714491    1.2586407    3.0128085  -0.14531318   0.83918327    1.0007801    0.7386209   -1.2465374            1    0.5530672   0.85343688   0.84271437  -0.03694966 -0.00051608467 -0.0054867753 0.0033483006   0.48545687   0.49597721  0.061514329  0.066666667    1.6032825        1e-10 1.5378582e-12      65.0255    2.4827984         70.1 -0.014097433   -0.1179435 -0.00049954806   0.10443195    0.6308237  -0.20497729 
  217000    4.2500902    1.2416719    3.0084183  -0.14064198   0.82786958   0.98319837    0.7312115   -1.2465374            1   0.55297673   0.85104729   0.85233931 -0.044456404 0.00064191261  0.011739168 -0.0039023457   0.48604463    0.4968897  0.061525217  0.066666667    1.6237201        1e-10 1.5381304e-12    65.013992    2.4831965         70.1 -0.0090667373  -0.10148321 0.0022197915   0.11257603   0.27518358    1.3684425 
  218000     4.286132    1.2614574    3.0246746  -0.13964486   0.84106129   0.98949049   0.74870533   -1.2465374            1   0.56676318   0.84955787   0.86255758 -0.011825892  0.003793231 0.0062531847 0.0030317412   0.49822977   0.51031721   0.06152147  0.066666667    1.6166027        1e-10 1.5380367e-12    65.017952    2.4879431         70.1 -0.0023754614 -0.094202858 0.0052102943  0.092849894  -0.23613247    1.0230961 
  219000     4.262495    1.2627991    2.9996959  -0.14205552   0.84195586   0.99279705    0.7480969   -1.2465374            1   0.63609196   0.90738634   0.92329077  0.077598765 0.00028881172 -0.0027026047 0.0085021876   0.56761423   0.57945736  0.061527245  0.066666667    1.6275139        1e-10 1.5381811e-12     65.01185    2.4918231         70.1 -0.0019259331  -0.09218548 0.0079588228   0.09692122  -0.09654091    1.2638562 
  220000     4.253599    1.2455922    3.0080068  -0.14298286   0.83048337    1.0046084   0.72211184   -1.2465374            1   0.60922004   0.89306672   0.87846715  0.056126251 0.00028129749 0.00093211696 -0.019023561   0.54312089   0.55191166  0.061511414  0.066666667    1.6271818        1e-10 1.5377853e-12    65.028582    2.4810299         70.1  0.010519058 -0.093938603  0.015688195     0.113334  -0.74210199   -2.2982951 
  221000    4.2395781    1.2482154    2.9913627  -0.14628695   0.83223236   0.98079212   0.73979351   -1.2465374            1   0.51486506   0.81697901   0.82260511 -0.094988951 -0.0038758644 -0.018422188 -0.024361222   0.44714739   0.45891529  0.061541909  0.066666667    1.6250918        1e-10 1.5385477e-12    64.996358    2.5152096         70.1  0.010489121 -0.085458042 0.0036170617   0.10243138  -0.32955134   -4.8546945 
  222000    4.2660201     1.266058    2.9999621  -0.14319671   0.84412872    1.0162548   0.73700531   -1.2465374            1   0.51155876   0.81296536   0.81271157  -0.09100067 0.0044096486 -0.017884551 0.0024030729   0.44409631     0.453586   0.06155179  0.066666667    1.6314135        1e-10 1.5387947e-12    64.985925    2.4881835         70.1  0.012107833   -0.1068936 -0.0040143503   0.10108388   -1.5896883   -1.9544995 
  223000    4.2852684    1.2851525    3.0001159  -0.14075729   0.85685971    1.0049932   0.76469076   -1.2465374            1   0.60340442   0.88745246   0.88038185  0.042378949 -0.0032080551 -0.045219153   0.01248937   0.53340776   0.54607409  0.061532982  0.066666667    1.6257543        1e-10 1.5383246e-12    65.005788    2.4939785         70.1 -0.011636123 -0.088458661 -0.0041551992    0.0937561  -0.84149302     3.800178 
  224000    4.2890794    1.2737423    3.0153371  -0.14342294   0.84925211    1.0132718   0.74718154   -1.2465374            1   0.57513779    0.8684285   0.86799937 -0.011014499 0.0067961569 -0.052474507  0.007543956   0.50674385    0.5173352  0.061533475  0.066666667     1.615688        1e-10 1.5383369e-12    65.005268    2.4994059         70.1 -0.0063301565 -0.098188769  0.015733581  0.090418359   0.76353416    2.1965301 
  225000    4.2668489    1.2411767    3.0256722  -0.14826536   0.82753942   0.98238027   0.73118537   -1.2465374            1   0.62422605   0.90556356   0.89849651  0.068618086 0.0040393403 -0.020883787 0.0046967411   0.55729634   0.56818569  0.061542576  0.066666667    1.6126045        1e-10 1.5385644e-12    64.995655    2.5110286         70.1 0.0070984991 -0.089262274 0.0040814708   0.11655851  -0.24673109    1.6410212 
  226000    4.2629333    1.2533582    3.0095752  -0.14551003   0.83566123   0.99435447   0.73690776   -1.2465374            1   0.53241786   0.82607511   0.83905765 -0.067879173 0.0020926452  0.029837189  0.010797604   0.46496435   0.47569442  0.061515297  0.066666667    1.6114825        1e-10 1.5378824e-12    65.024477    2.4814076         70.1  0.014610914  -0.09884673 0.0053436939   0.12928053  -0.73319489  -0.75645757 
  227000     4.288822    1.2759248    3.0128972  -0.14433239   0.85070729    1.0038755   0.75539963   -1.2465374            1   0.55175658   0.84558954   0.85042353 -0.040743327 0.0052580126 0.00091222431  0.020366012    0.4826104   0.49449001  0.061536934  0.066666667    1.5881187        1e-10 1.5384234e-12    65.001613    2.5014562         70.1 -0.012848323 -0.090331905 -0.0051554913    0.1023808   0.55684697    -2.270134 
  228000     4.258795    1.2447048    3.0140902  -0.14516592    0.8298917   0.97023552   0.74257266   -1.2465374            1   0.57639815   0.86197281   0.86269232 0.0045293121 -0.0058438865 -0.045182607 -0.021822599   0.50842609   0.52105059  0.061550372  0.066666667    1.5832325        1e-10 1.5387593e-12    64.987422    2.5141042         70.1 0.0055449114 -0.097925482 0.0019820454   0.11674625   0.21267776    3.5501829 
  229000    4.2470378    1.2624659    2.9845719  -0.14586857   0.84173368   0.99613668   0.74565495   -1.2465374            1   0.55410668   0.85183758   0.85007585 -0.039593396 -0.0054582278 -0.010767749  0.019994844   0.48585248   0.49728157  0.061514991  0.066666667    1.5879473        1e-10 1.5378748e-12      65.0248    2.4877353         70.1  0.011443047  -0.11209868 0.0042791149   0.10011115    1.3781041  -0.14468075 
  230000    4.2623634     1.252793    3.0095704  -0.14658595   0.83528444   0.99340239   0.73688943   -1.2465374            1   0.57079085   0.86528651   0.85942129 -0.012335268 -0.0061025056 -0.034072598  0.022873064   0.50333901   0.51412172   0.06151661  0.066666667    1.5968927        1e-10 1.5379153e-12    65.023089    2.4838966         70.1 0.0038159107 -0.086529085 -0.0027987692  0.099759028   0.94964357   -1.0303061 
  231000    4.2885495     1.276838    3.0117115  -0.14525069   0.85131612   0.99952789   0.75909744   -1.2465374            1   0.55329063   0.84863131   0.85205694 -0.040816355 0.00083825908 -0.020727348  0.018963027   0.48380596   0.49627207  0.061560737  0.066666667    1.5914356        1e-10 1.5390184e-12     64.97648    2.5088384         70.1 0.0054318998   -0.0942535 -0.0034205995  0.092025866   0.39233195   -2.1898195 
  232000    4.2874806    1.2617029    3.0257777  -0.14896981   0.84122496   0.99446057   0.74587366   -1.2465374            1   0.62647436     0.894582   0.90623284  0.078608242 -0.0008233701 0.0079899295 0.0041637944   0.55820014   0.56974487  0.061524076  0.066666667     1.601031        1e-10 1.5381019e-12    65.015198    2.4841093         70.1 0.0015920378  -0.10251003 -0.011426583   0.11065148   0.89702406  -0.88742645 
  233000    4.2969636    1.2770696     3.019894  -0.14373866   0.85147054    1.0043966   0.75631396   -1.2465374            1   0.55263991    0.8400267   0.84324379  -0.02535075 0.0068767159 0.0007030272 0.0093033984   0.48341003   0.49534362  0.061531922  0.066666667    1.5945336        1e-10 1.538298e-12    65.006908    2.4909135         70.1 -0.0079536941  -0.10564894 0.0041212204   0.10919272  -0.26869283  -0.53481558 
  234000    4.2442307    1.2298661    3.0143646  -0.14102794   0.81999818   0.96329943   0.73083433   -1.2465374            1   0.58665651   0.86404991   0.87782867  0.018090948 -0.00011219826  0.024534552 -0.012570588   0.51975893   0.53170462     0.061539  0.066666667    1.6033751        1e-10 1.538475e-12    64.999431    2.4923354         70.1  0.011782754 -0.074196597 -0.015765918  0.095514932   0.74068079    2.2805645 
  235000    4.2738076    1.2556526     3.018155  -0.14762749   0.83719103   0.98841857   0.74309047   -1.2465374            1   0.58030225    0.8730472   0.86896367 -0.0011041092 -0.00035852354  0.025453741 -0.032882804    0.5122828   0.52391743  0.061533213  0.066666667     1.598405        1e-10 1.5383303e-12    65.005544    2.4985327         70.1  0.013867508  -0.10861671 -0.0050280078  0.076676778  -0.49941605    2.8502521 
  236000     4.297764    1.2849133    3.0128507  -0.14222263   0.85670024    1.0043402   0.76483887   -1.2465374            1   0.59973547   0.88054903   0.88608294   0.03257444 0.0024235542 -0.0041440081  0.015057132   0.52972525   0.54244239  0.061509775  0.066666667    1.5924618        1e-10 1.5377444e-12    65.030314    2.4824002         70.1 -0.0050863701  -0.09033922 0.0026398239   0.10310981    0.4579604    3.8577369 
  237000    4.2660033    1.2688545    2.9971488  -0.15260413   0.84599325   0.98794526   0.75767475   -1.2465374            1   0.51221991   0.81540387   0.81707988 -0.095824035 0.0033850082  0.020224006 0.0058406856   0.44286546   0.45586208  0.061524064  0.066666667    1.5790163        1e-10 1.5381016e-12    65.015211    2.4969133         70.1 0.0019970831 -0.097469048 0.00087319258  0.095186785  -0.28702271   -3.4082587 
  238000    4.2656323    1.2689005    2.9967318  -0.14990019   0.84602389    1.0099664   0.74400087   -1.2465374            1   0.61963769   0.90138506   0.89607759  0.061450432 0.00034159378 0.0084747246 2.0990761e-05    0.5515349   0.56202366   0.06149838  0.066666667    1.5703612        1e-10 1.5374595e-12    65.042363    2.4794088         70.1 -0.00080299365  -0.08513728 -0.0041182579   0.09819734   -1.0363758    3.1291774 
  239000    4.2979939    1.2884056    3.0095884  -0.15503781   0.85902866    1.0124424   0.76356943   -1.2465374            1   0.60161587   0.88946137   0.88543574  0.029950506  0.004885318  0.034363186  0.013672176   0.53172185    0.5438606   0.06154516  0.066666667      1.56985        1e-10 1.538629e-12    64.992925    2.5084628         70.1 0.0071584848  -0.10295138 -0.0064182503   0.10061991   -1.5615313    2.3508599 
  240000    4.2961929    1.2696011    3.0265917  -0.14030743   0.84649105    1.0086352   0.74558882   -1.2465374            1   0.54641304   0.83659064   0.85902153 -0.056373045 0.0027498599   0.02826967 0.0065539446    0.4781649   0.48887495  0.061509241  0.066666667    1.5741599        1e-10 1.537731e-12    65.030879    2.4851173         70.1 -0.010780097  -0.12188741  0.012194263   0.10856778 -0.029657517   0.42432779 
  241000    4.2890922    1.2821672     3.006925  -0.14694587   0.85486933    1.0011127   0.76387799   -1.2465374            1   0.61221644   0.88741332   0.89533931  0.053896704  0.004242869 -0.016290101 0.0058346609   0.54229418   0.55510748  0.061500477  0.066666667    1.5712212        1e-10 1.5375119e-12    65.040146    2.4839723         70.1 -0.0085895705  -0.13192167 0.0037782804   0.12333916   0.94620868    2.4092333 
  242000    4.2941018    1.2727729    3.0213289  -0.14487606   0.84860575   0.99149863   0.75970135   -1.2465374            1   0.61206392   0.87975351   0.89289375  0.063544497 -0.00050977099  -0.01858204 -0.0038613368   0.54252397   0.55550339  0.061545236  0.066666667    1.5847859        1e-10 1.5386309e-12    64.992845    2.5118202         70.1 -0.0027713402 -0.099903289  0.011356059  0.097340516    1.3163564    3.5008408 
  243000    4.2644713    1.2553379    3.0091334  -0.14555215   0.83698121    1.0128588   0.72751861   -1.2465374            1   0.54017918   0.83506672   0.84520716 -0.059736339 0.0063965142   -0.0397729 -0.023475539   0.47358511   0.48240015  0.061525059  0.066666667    1.5645252        1e-10 1.5381265e-12     65.01416    2.4903612         70.1 0.0013700541 -0.094740098 -0.011183182   0.10673269    1.4249316    1.2695849 
  244000    4.2859022    1.2550767    3.0308255  -0.13167238   0.83680707    1.0020474   0.73397362   -1.2465374            1   0.60455397   0.89036848   0.88896304  0.034330391 -0.0037415936 -0.012497308  0.012332201   0.53736903   0.54739168  0.061520648  0.066666667    1.5596763        1e-10 1.5380162e-12    65.018821    2.4927298         70.1 -0.0012387221 -0.092888197 -0.0017025497   0.10300532    1.7465275   0.31047516 
  245000    4.2693759     1.276819    2.9925569  -0.14447369   0.85130344   0.99950374   0.75909192   -1.2465374            1    0.6022573   0.89586894   0.88380357  0.027099385 -0.00099245692 -0.044101099 -0.014528841   0.53277314   0.54524012  0.061530902  0.066666667    1.5604075        1e-10 1.5382726e-12    65.007986    2.4963815         70.1 -0.0040728634 -0.090556335  0.010677012   0.10255094    1.2787784  -0.36407615 
  246000     4.293153     1.275575     3.017578  -0.14172295   0.85047403    1.0072559   0.75291431   -1.2465374            1   0.53455053   0.83875828   0.82179045 -0.056897138 -0.0026093841  0.013942106  0.025224595   0.46563184   0.47709112  0.061545008  0.066666667     1.569472        1e-10 1.5386252e-12    64.993086    2.5069923         70.1 0.0065469081 -0.091488513 -0.0023988299   0.10222714   0.30054928 -0.0048528139 
  247000    4.2978126    1.2726661    3.0251464  -0.13875213   0.84853458   0.99357218   0.75829358   -1.2465374            1    0.5704271   0.86747041   0.85030949 -0.0064986147 -0.00038633764  0.020578905  0.014177299   0.50101601   0.51374828  0.061530351  0.066666667    1.5771275        1e-10 1.5382588e-12    65.008568    2.4852277         70.1 -0.0059825339  -0.13922523 -0.0036933643  0.094407752  -0.25332407     -1.49748 
  248000    4.2818305    1.2798946    3.0019359   -0.1477871   0.85335407    1.0245743    0.7467968   -1.2465374            1   0.61897375     0.904022    0.8961146  0.056784661 0.0059432719  0.029470112 -0.0076065214   0.55061503   0.56052641  0.061529256  0.066666667    1.5769033        1e-10 1.5382314e-12    65.009725    2.5071715         70.1 0.0034290929  -0.10273229 0.0035814188  0.080829401   -1.1374148   0.40855321 
  249000     4.296476    1.2740956    3.0223804   -0.1513678   0.84948769   0.98556758   0.76482933   -1.2465374            1   0.55765338   0.85098701   0.85086849 -0.028895348 -0.001566877  0.037427949 -0.0032805264   0.48764404    0.5014312  0.061547434  0.066666667    1.5816172        1e-10 1.5386858e-12    64.990525    2.4930915         70.1 -0.011242984 -0.082400627 -0.0023870743  0.091116537  -0.89410314  -0.78949553 
  250000    4.3040708    1.2902727    3.0137981   -0.1447812   0.86027353    1.0134514   0.76496154   -1.2465374            1   0.58169463   0.86914798   0.86855039 0.0073855059 -0.00035867935   0.02989378 -0.028296675   0.51167318    0.5238818  0.061518533  0.066666667    1.5747907        1e-10 1.5379633e-12    65.021057    2.4974929         70.1  0.010447553 -0.070227635 0.00043027511  0.073003171  -0.78028184   0.80693173 
  251000    4.2970808    1.2759653    3.0211155  -0.14205969   0.85073428    1.0147998   0.74863541   -1.2465374            1   0.58539366   0.86673881   0.86955069  0.019891473 -0.00013610187  0.064841912   0.01212361   0.51686664   0.52750391  0.061510072  0.066666667    1.5763382        1e-10 1.5377518e-12        65.03    2.4870076         70.1 -0.0080737545  -0.12611118 -0.011202216  0.089232689   -1.4818384  -0.21376166 
  252000     4.302667    1.2771711     3.025496   -0.1467325   0.85153822    1.0181059   0.74788009   -1.2465374            1   0.60738919   0.88596912   0.89077223  0.045426239 -0.00022649357  0.029298654 -0.0061611649   0.53893132   0.54931084  0.061511838  0.066666667    1.5763298        1e-10 1.537796e-12    65.028133    2.4899633         70.1 0.0006624066 -0.085300731 -0.012118087   0.09538739   0.11671362   0.68604804 
  253000    4.2751728    1.2491342    3.0260387  -0.14562997   0.83284495   0.97115311   0.74679503   -1.2465374            1   0.57694931   0.87171039   0.85909014 4.7392382e-05 -0.0011775762  0.033315382 0.0069839906   0.50859075    0.5215494  0.061532035  0.066666667     1.585625        1e-10 1.5383009e-12    65.006788    2.4987568         70.1 -0.00020491545   -0.1030801 0.0056782669  0.094274193  -0.76593963   -2.4182959 
  254000    4.2754231    1.2674706    3.0079525  -0.14690612   0.84507053    1.0061482   0.74483271   -1.2465374            1   0.55247508   0.85011958   0.84781314 -0.040507486 -0.0030131914 -0.010079053 -0.0095252315   0.48429614   0.49507886  0.061508886  0.066666667    1.5711186        1e-10 1.5377221e-12    65.031254    2.4912932         70.1 0.0085126185   -0.1037468  0.006239229  0.092569298  0.062684525  -0.64026521 
  255000    4.2690365    1.2660925     3.002944  -0.14041359   0.84415173   0.99461867   0.75052638   -1.2465374            1   0.56130433   0.85454274   0.85241414 -0.023043877 0.0054568221 -0.010141003 -0.0038995538   0.49260423   0.50456582    0.0615273  0.066666667     1.576769        1e-10 1.5381825e-12    65.011792    2.4913392         70.1 0.0040102449 -0.096069468  0.012959066   0.10691462  -0.75067603   -1.6929521 
  256000    4.2798323    1.2507159    3.0291164  -0.14397862   0.83389954   0.98283693   0.74122565   -1.2465374            1   0.55359895    0.8497701   0.83902516 -0.027998417 0.0027447299   0.02620318 -0.0032988545   0.48575019   0.49753253  0.061535431  0.066666667    1.5733312        1e-10 1.5383858e-12    65.003202    2.4883627         70.1 -0.0055704097   -0.1112108  0.002924609   0.11299713   -1.3212942   -1.7189017 
  257000    4.2733636    1.2592248    3.0141388  -0.15173084   0.83957274   0.98192783   0.75100194   -1.2465374            1   0.61445526   0.89439233   0.88605519   0.06291825 -0.00037813003  0.013835533 0.0039379772   0.54571162    0.5584407  0.061504996  0.066666667    1.5660287        1e-10 1.5376249e-12    65.035368    2.4829416         70.1 -0.0048512967  -0.11600867 -0.0052152875  0.097835204  -0.48393839    2.6440364 
  258000    4.2636312     1.268097    2.9955342  -0.15065603    0.8454882    1.0097788   0.74324811   -1.2465374            1   0.61233913   0.89008328   0.89633848  0.050595627 0.0019596389   0.06873789 -0.0089316171   0.54430524    0.5547358  0.061516388  0.066666667    1.5745825        1e-10 1.5379097e-12    65.023323    2.4850436         70.1 -4.2829618e-05   -0.1040817 0.00037768643   0.10312418   -3.1844309    3.5710805 
  259000    4.3009782     1.277736    3.0232421  -0.14836203   0.85191489     1.008615   0.75440634   -1.2465374            1   0.58181797    0.8774849   0.86576859  0.002200435 0.0022018193   0.02832789 -0.0042601061   0.51276271   0.52428104  0.061497333  0.066666667    1.5780843        1e-10 1.5374333e-12    65.043471    2.4807325         70.1 -0.010702439  -0.11746676 0.0024794488  0.094380345  -0.56021573     2.104792 
  260000    4.3016226    1.2830477    3.0185749  -0.14801978   0.85545635    1.0066643   0.76137119   -1.2465374            1   0.51932393   0.82140938   0.82080324 -0.084240833 0.0013764742  0.012043242  0.006431914   0.44963113   0.46189827  0.061521571  0.066666667    1.5819651        1e-10 1.5380393e-12    65.017846    2.4992182         70.1 -0.0034285452  -0.11936451  0.005807113  0.083931077    1.0404008    0.8474105 
  261000    4.2572796    1.2660952    2.9911844  -0.14531554   0.84415351   0.97645354   0.76184985   -1.2465374            1   0.57630313   0.86103262    0.8696517 -0.0017749333 -0.0011070724  0.051604957 -0.012319828   0.50656652   0.52060086  0.061537359  0.066666667    1.5777015        1e-10 1.538434e-12    65.001164     2.503449         70.1 0.0063407621  -0.12444737 -0.005745342  0.098719996  -0.81096563    1.3167772 
  262000    4.2805641    1.2815458    2.9990182  -0.15125603   0.85445503   0.98489745   0.77331082   -1.2465374            1   0.56431013   0.84920604   0.86423997 -0.020515619 0.0010151999  0.015293004  0.020363395   0.49352443   0.50812617  0.061520749  0.066666667    1.5774507        1e-10 1.5380187e-12    65.018714    2.5038944         70.1 0.0050837489 -0.097577429 0.0022125182   0.10449976    1.8416903   -1.8276612 
  263000    4.2721727     1.274637    2.9975357  -0.15372701   0.84984863   0.99484495   0.75963358   -1.2465374            1    0.5852387   0.86875229   0.87541424  0.011549556 0.00023204846 0.00065938545 -0.017754061   0.51570495   0.52848728  0.061510421  0.066666667    1.5683717        1e-10 1.5377605e-12    65.029632    2.4813828         70.1 -0.0064093944  -0.12087046 0.0034776722  0.084373106    0.7860675   0.46392696 
  264000    4.2333972    1.2541078    2.9792894  -0.14177293   0.83616106   0.99982554   0.73430957   -1.2465374            1   0.60921646   0.90006924   0.88883659  0.038743543 -0.003702426 -0.022139801 0.0065955823   0.54200077   0.55218092   0.06153325  0.066666667    1.5709398        1e-10 1.5383313e-12    65.005505    2.5040398         70.1 0.0022801711  -0.12030832 -0.00049016808  0.096218807    1.4772589   0.62297648 
  265000    4.2750176    1.2736239    3.0013937  -0.15297119   0.84917315    1.0002954    0.7551403   -1.2465374            1   0.65421345   0.92133958   0.92363596   0.11766481 0.0041115067 -0.062553847 0.0030872534     0.585091   0.59715111  0.061523144  0.066666667    1.5661031        1e-10 1.5380786e-12    65.016183    2.4940857         70.1 -0.0015891313 -0.081734464 -0.0079489385  0.093135617    1.4072791  -0.19162812 
  266000    4.2605658    1.2658956    2.9946702  -0.14841029    0.8440204   0.99789202   0.74827322   -1.2465374            1   0.56248339   0.86483955   0.85725115 -0.034640538 0.0025168582 -0.094040345 0.0094918158   0.49398952   0.50555815  0.061552255  0.066666667    1.5676778        1e-10 1.5388064e-12    64.985434    2.5127475         70.1  0.002358428 -0.092977945 -0.020579691    0.1032179     -0.52882   -1.9640268 
  267000    4.2638555     1.271084    2.9927716  -0.14127866   0.84747969    1.0195111   0.74041588   -1.2465374            1   0.54462259   0.84881901   0.83784817 -0.052799402 0.0067903967 -0.077714622 -0.0035518488   0.47684796   0.48646408  0.061524831  0.066666667    1.5711036        1e-10 1.5381208e-12      65.0144    2.4808152         70.1 -0.0045455071 -0.091064077   0.00425227   0.11114087   0.89400946    -3.370978 
  268000    4.2870305    1.2853047    3.0017258  -0.13914462   0.85696123    1.0058964   0.76429268   -1.2465374            1   0.59265471   0.87631094   0.87839205  0.023261137 -0.0039502691 -0.064379876  0.028749695   0.52269449   0.53527285  0.061497473  0.066666667     1.588656        1e-10 1.5374368e-12    65.043323    2.4811227         70.1 -0.0096174888 -0.089526269 0.0042904531  0.091042989   0.51453235    1.8007601 
  269000    4.2631486     1.262235    3.0009135  -0.14677964   0.84157977    1.0076557   0.73822641   -1.2465374            1   0.58546634    0.8831032   0.86711346 0.0061823445 -0.0021536441 -0.061028238  -0.03554941   0.51789212   0.52798412  0.061523653  0.066666667    1.5794525        1e-10 1.5380913e-12    65.015646    2.4909374         70.1 0.0036204419   -0.0929083 -0.0096124681   0.11431271   -1.2775296   -1.2211341 
  270000    4.2911591    1.2648813    3.0262778   -0.1453608   0.84334413    1.0110329   0.73898597   -1.2465374            1   0.60017589   0.88452508   0.88143981  0.034562786 0.0036744517 -0.037579569  0.014872959   0.53253215   0.54250103  0.061514778  0.066666667    1.5687416        1e-10 1.5378694e-12    65.025025    2.4872123         70.1 -0.0023295722 -0.083590142 0.0044792805   0.12037661   0.70635804   -1.6392342 
  271000    4.2960091    1.2700148    3.0259943  -0.14547327   0.84676685    1.0063715   0.74744734   -1.2465374            1   0.53152675   0.83715711   0.83110205 -0.073678902 -0.0073176956 -0.038844514  0.020695231   0.46310849    0.4741178  0.061535894  0.066666667    1.5766441        1e-10 1.5383974e-12    65.002712    2.4928664         70.1 -0.0020799705  -0.10356724 0.0077922737  0.098273594   0.49532362   -2.0625789 
  272000    4.2638261    1.2456148    3.0182113  -0.14075356   0.83049843    1.0016716   0.72396654   -1.2465374            1   0.62387583   0.90171179   0.89230393  0.077611768 0.0020113512 -0.0098418772 -0.026882043    0.5576069   0.56673498  0.061509189  0.066666667    1.5790456        1e-10 1.5377297e-12    65.030934    2.4943857         70.1 0.0051716392  -0.09142415 0.0084810797  0.098679697    1.0411231   0.24617843 
  273000    4.2436122    1.2475546    2.9960576  -0.14121254   0.83179179   0.99146352   0.73242785   -1.2465374            1   0.62531158   0.90091567   0.90743558  0.067583476 -0.0048696769 -0.0010353988 -0.00035069576   0.55826813   0.56875305  0.061545164  0.066666667    1.5826857        1e-10 1.5386291e-12    64.992921    2.5118071         70.1 0.0013330688  -0.11137703 -0.014391304   0.11334233    1.2078738    1.2535402 
  274000    4.2688453    1.2690998    2.9997455  -0.15126359    0.8461568   0.98056072   0.76254233   -1.2465374            1   0.54891387   0.83571406   0.85128026 -0.040252692 0.0031148619 -0.053455807 0.0010968893   0.47911388   0.49297731  0.061510531  0.066666667     1.584497        1e-10 1.5377633e-12    65.029515    2.4850569         70.1 -0.00040138878 -0.095383677 -0.0029004127   0.10276759    2.1624873   -2.9219958 
  275000    4.2693858    1.2710286    2.9983571  -0.15243622   0.84744281    1.0138729   0.74386977   -1.2465374            1   0.55442821   0.83999063   0.86139072  -0.03809673 -0.00076410068 -0.036405939   0.02503326   0.48633742   0.49659133  0.061510806  0.066666667    1.5902192        1e-10 1.5377702e-12    65.029224    2.4847612         70.1 -0.009249484  -0.12042681 0.0054440436    0.1023714   0.56502037   -2.5322057 
  276000    4.2537346    1.2533664    3.0003682  -0.14227564   0.83566673   0.98104915    0.7452086   -1.2465374            1     0.558904   0.86378071   0.85073081 -0.037799536 -0.0075042564 -0.072095675 -0.010373034   0.49069065   0.50293956  0.061521134  0.066666667    1.5880293        1e-10 1.5380284e-12    65.018307    2.4929485         70.1  0.016683445  -0.10580178 -0.0068421097   0.10144153   -1.4139503    -3.637668 
  277000     4.279032    1.2820339     2.996998   -0.1395099   0.85478045    1.0152101   0.75494817   -1.2465374            1   0.60129747    0.8874767   0.88045378  0.035961921 -0.0022518088  -0.04640439 -0.025667608   0.53219261   0.54338431  0.061523104  0.066666667    1.5948188        1e-10 1.5380776e-12    65.016225    2.5033802         70.1 -0.0053188008  -0.12732081 -0.0085343711   0.09206939   -1.3568094  -0.15294355 
  278000    4.2387693    1.2378628    3.0009065  -0.14461514   0.82532992   0.99749196   0.71818085   -1.2465374            1   0.57113494   0.85978502   0.86327731 -0.0096575294 -0.0037705567 -0.077386228 0.0044437038    0.5053956   0.51423252  0.061520084  0.066666667    1.6047477        1e-10 1.5380021e-12    65.019418    2.5046368         70.1 -0.0040615153 -0.089311155 -0.0074858539  0.095066619   0.33268566   0.44152601 
  279000    4.2308486    1.2472031    2.9836455  -0.14796098   0.83155743   0.99646521   0.72893032   -1.2465374            1   0.58658426   0.86782858   0.88484338 0.0070808263 0.00038598441 -0.052132738   0.01858104   0.51986097   0.52974042  0.061550332  0.066666667    1.6126185        1e-10 1.5387583e-12    64.987464    2.4980936         70.1 0.0038588461  -0.12630805 0.00063109662  0.075994365   0.28902655    2.0924246 
  280000    4.2973751    1.2600423    3.0373329  -0.14282893   0.84011777   0.99354402   0.74464748   -1.2465374            1   0.50173318    0.8049776   0.80780414   -0.1075822 0.0035008399 -0.011128433 -0.015922286    0.4335712   0.44505597  0.061510859  0.066666667    1.5927199        1e-10 1.5377715e-12    65.029169    2.4806452         70.1 -0.015323172  -0.10924658 0.0017584999  0.078825942    2.4508811 -0.0056942091 
  281000     4.280991    1.2597984    3.0211926  -0.14535746   0.83995516   0.97184147   0.75790861   -1.2465374            1   0.54013144   0.84028614   0.83313294 -0.053024773 -0.0041792526 0.00052184077 -0.0038914994   0.47075559   0.48469226  0.061531087  0.066666667    1.5849416        1e-10 1.5382772e-12    65.007791    2.4987547         70.1 -0.0096543586 -0.095461466 0.0069306946  0.091482674    1.8108852   0.20430176 
  282000    4.2602313    1.2818583     2.978373  -0.14837915   0.85466337    1.0112002   0.75725706   -1.2465374            1   0.62119866   0.89867563   0.90474092  0.060179414 -0.0030874201 -0.0059240266 -0.007679047   0.55188245   0.56351425   0.06153953  0.066666667    1.5759478        1e-10 1.5384882e-12    64.998872    2.5100783         70.1 -0.0044254513  -0.10150857 0.0039145734  0.089079061   0.23737159    3.7520028 
  283000    4.2735344    1.2669621    3.0065724  -0.15542254   0.84473148    1.0102194   0.74174513   -1.2465374            1   0.53194334   0.82839513    0.8383144 -0.070879502 -0.0015749074  0.057026894 -0.0042475805   0.46404703   0.47431488  0.061538655  0.066666667    1.5781978        1e-10 1.5384664e-12    64.999795    2.5042402         70.1 -0.0077927718 -0.078927363 0.0053537029   0.11896808   -0.7814001    1.6258423 
  284000    4.2733134    1.2492455    3.0240679  -0.14255374   0.83291917   0.97488587   0.74458926   -1.2465374            1   0.57549102   0.86685682   0.86360265 -0.0039863989 0.0067188081 -0.0072175708  0.019838935   0.50733438   0.51987818  0.061524775  0.066666667     1.571694        1e-10 1.5381194e-12     65.01446    2.5024371         70.1 0.0035667506 -0.087784732 -0.00032005269  0.082746146   -0.8185089   0.67636942 
  285000    4.2792097    1.2635484    3.0156613  -0.14376972   0.84245544    0.9941885   0.74804075   -1.2465374            1   0.53815003   0.84315838   0.83435938 -0.063067679 -0.001467858 -0.00019463338    0.0223972   0.46967744   0.48143605  0.061522359  0.066666667    1.5634668        1e-10 1.538059e-12    65.017012    2.4875883         70.1 -0.0038493332 -0.097045584 0.0039884787  0.092745815   -2.0758328   0.32876244 
  286000    4.3030196    1.2690695    3.0339501  -0.13519863    0.8461366   0.99257148   0.75502439   -1.2465374            1   0.54994415   0.83934302   0.85266113 -0.042171692 -0.0054204929  0.018417528 0.0056513864   0.48083231   0.49332242  0.061498243  0.066666667    1.5631818        1e-10 1.5374561e-12    65.042509    2.4818503         70.1 -0.0075852728  -0.10424274 0.0075270704   0.12638199   -2.0134133   0.25830528 
  287000    4.3059131    1.2850234    3.0208897  -0.13884098   0.85677365    1.0274718   0.75054231   -1.2465374            1   0.59253365   0.87939078   0.87446303  0.023747134 -0.0033908961 0.0013864962  0.039173732   0.52383208   0.53392101  0.061525259  0.066666667    1.5568534        1e-10 1.5381315e-12    65.013949    2.5007273         70.1 -0.0068863279  -0.10965658 -0.0005752093  0.091817987    -1.375202    2.6152394 
  288000    4.3013849    1.2791816    3.0222032  -0.14637476   0.85287872   0.99518956    0.7643378   -1.2465374            1   0.56856673   0.85893496   0.86658671 -0.019821482 -0.00094631078  0.031847437  0.032698254   0.49860238   0.51179565   0.06150459  0.066666667    1.5525608        1e-10 1.5376148e-12    65.035796    2.4796459         70.1 0.0051367853 -0.084561984 0.0038399988   0.10103313  -0.84728084   -1.0873855 
  289000    4.2690012    1.2618058    3.0071954  -0.14531909    0.8412936   0.98576086   0.75140679   -1.2465374            1    0.5609833   0.85348807   0.85318792 -0.023726082 -0.0010288714  0.035346062 -0.00084220195    0.4922026   0.50475009  0.061516812  0.066666667    1.5516975        1e-10 1.5379203e-12    65.022876    2.4845972         70.1 0.0018488999  -0.09969564  0.011745184   0.10534694   -1.2224906    1.1509025 
  290000    4.3017891    1.2983593    3.0034298   -0.1420125   0.86566519    1.0294129   0.76376697   -1.2465374            1   0.59871006    0.8814743    0.8919975  0.022658385 -0.002547766  0.015525926 -0.0097534668   0.52879796    0.5399867  0.061522642  0.066666667    1.5511866        1e-10 1.538066e-12    65.016714    2.4922334         70.1 -0.007460371  -0.10329493 -0.0080853649   0.12452213  -0.11048737    1.5610671 
  291000    4.2590506    1.2506793    3.0083713  -0.14848423   0.83387514    0.9962996   0.73279604   -1.2465374            1   0.55699203   0.85514435    0.8388231 -0.022991374 -0.0063423671 0.00067061536  0.039082181   0.48991488   0.50015763  0.061513937  0.066666667    1.5545599        1e-10 1.5378484e-12    65.025914    2.4815766         70.1  0.011587619  -0.10138442 -0.0081531508   0.10632507    1.5002431 -0.063787161 
  292000    4.2463454     1.245021    3.0013244   -0.1525342   0.83010254   0.99960775   0.72461004   -1.2465374            1   0.58056883   0.86404834   0.87217537  0.005482785 -0.0030202123  0.020443963 -0.020063631     0.514241   0.52354572  0.061509167  0.066666667    1.5658357        1e-10 1.5377292e-12    65.030957    2.4899688         70.1 0.0069552861    -0.111114 0.0098988327    0.0880442   0.95968163  -0.88414217 
  293000    4.2792586    1.2684451    3.0108135  -0.14075134   0.84572024    0.9938068   0.75357863   -1.2465374            1    0.6088348    0.8833158   0.89813884  0.045049764 0.0064394499 -0.021923829  0.022436125    0.5398553    0.5521426  0.061537344  0.066666667    1.5468901        1e-10 1.5384336e-12     65.00118    2.5055207         70.1  0.012405256  -0.11047163 -0.005694321  0.091914632    1.3563789   0.78295407 
  294000    4.2952203    1.2965403      2.99868  -0.14312258   0.86445237     1.014917     0.770832   -1.2465374            1   0.62216545   0.89831067   0.90264117  0.065544515 -0.0026201457  0.029687992 -0.0079258349   0.55160665   0.56426901  0.061536646  0.066666667    1.5444308        1e-10 1.5384161e-12    65.001918     2.501674         70.1 -0.0095721963   -0.1153602 -0.011368997   0.13669775 -0.018892676   0.21032464 
  295000    4.2709934    1.2669055    3.0040879  -0.14573985   0.84469375    0.9951409   0.75108083   -1.2465374            1    0.5964007   0.88694063   0.88688687  0.015374589 -0.0013091698  0.045683277  0.028566544   0.52764984   0.53963239  0.061529597  0.066666667    1.5387382        1e-10 1.5382399e-12    65.009364    2.4862129         70.1 -6.8832848e-05 -0.084427784 -0.0013529596   0.11075022   -1.2262505   -1.1294042 
  296000     4.303222    1.2745031    3.0287189  -0.14596132   0.84975939    1.0028174   0.75452027   -1.2465374            1   0.57251856   0.86429957   0.86313291 -0.0098767883  0.006343162  0.023189417 -0.018326662   0.50345287   0.51531236  0.061497745  0.066666667    1.5439709        1e-10 1.5374436e-12    65.043036    2.4810549         70.1 0.0017185978  -0.08285216 -0.0028246847  0.098876513   0.79950384   -1.4296565 
  297000    4.2950643    1.2871768    3.0078875  -0.14075497   0.85820938    1.0237479   0.75519381   -1.2465374            1   0.54003183   0.84500183   0.83550457 -0.060410896 -0.0022793494  0.031756657 -0.00013552603   0.47090449   0.48163163  0.061530037  0.066666667    1.5398795        1e-10 1.5382509e-12    65.008899    2.4953892         70.1 -0.0065553088 -0.075913347 -0.0014639762   0.08990712  -0.62876171   -3.3169448 
  298000     4.297642    1.2832108    3.0144312  -0.14274683   0.85556515    1.0012125   0.76494539   -1.2465374            1   0.55528563   0.83441447   0.84918396 -0.017741536 0.0021225564  0.044967386 0.0090734112   0.48526567   0.49817098  0.061513826  0.066666667    1.5452295        1e-10 1.5378457e-12    65.026031    2.4896573         70.1 -0.0091878849  -0.11456632 -0.00051258908   0.11465875   -1.2644095  -0.98446294 
  299000    4.2678641    1.2722698    2.9955943  -0.14797213   0.84827036    1.0006411   0.75345931   -1.2465374            1   0.56819809   0.86414278   0.85470254 -0.014251067 -0.00012533451  0.010630807 -0.024756257   0.49922951   0.51111603  0.061519365  0.066666667    1.5543615        1e-10 1.5379841e-12    65.020177    2.5000645         70.1 0.00089751276  -0.10650399 -0.0066112021  0.096363524  -0.91741466   -1.0164526 
  300000    4.2776007     1.268686    3.0089147  -0.14520876   0.84588086    1.0053414   0.74665098   -1.2465374            1    0.5853431   0.87253095   0.87821711 0.0052812389 -0.00045009746  0.026338547  0.017399435   0.51699773   0.52799291  0.061525158  0.066666667    1.5578183        1e-10 1.538129e-12    65.014055      2.48441         70.1 0.0010049405  -0.10383906 -0.0096192392  0.096330761   -1.2956478   0.34287436 
Loop time of 392.701 on 1 procs for 300000 steps with 9376 atoms

Performance: 330022.486 tau/day, 763.941 timesteps/s
99.3% CPU use with 1 MPI tasks x 1 OpenMP threads

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 27.062     | 27.062     | 27.062     |   0.0 |  6.89
Bond    | 104.55     | 104.55     | 104.55     |   0.0 | 26.62
Neigh   | 107.11     | 107.11     | 107.11     |   0.0 | 27.28
Comm    | 8.0026     | 8.0026     | 8.0026     |   0.0 |  2.04
Output  | 0.59299    | 0.59299    | 0.59299    |   0.0 |  0.15
Modify  | 136.55     | 136.55     | 136.55     |   0.0 | 34.77
Other   |            | 8.832      |            |       |  2.25

Nlocal:    9376 ave 9376 max 9376 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Nghost:    1726 ave 1726 max 1726 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Neighs:    5538 ave 5538 max 5538 min
Histogram: 1 0 0 0 0 0 0 0 0 0

Total # of neighbors = 5538
Ave neighs/atom = 0.590657
Ave special neighs/atom = 6.92833
Neighbor list builds = 39004
Dangerous builds = 0
#undump      eq

#--- Unfix Equil ---#

unfix abeads_edz
unfix bbeads_edz
unfix tbeads_edz

unfix freeze_tout


###############
# Compression #
###############


#--- Bring the brushes closer together fit the sim box ---#

variable       bbzmax  equal bound(bbeads,zmax)
variable       tbzmin  equal bound(tbeads,zmin)
displace_atoms  alltop move 0.0 0.0 -$(v_tbzmin - v_bbzmax) units box
displace_atoms  alltop move 0.0 0.0 -39.696485362212996506 units box
variable z_f equal bound(all,zmin)
variable z_c equal bound(all,zmax)
change_box all z final ${z_f} $(v_z_c + 0.1) units box
change_box all z final 0 $(v_z_c + 0.1) units box
change_box all z final 0 30.403514637787001362 units box
  orthogonal box = (0 0 0) to (30 30 30.4035)

print         "D = $D"
D = 25.3175692812198
print         "D = $(v_twzmin - v_bwzmax)"
D = 25.317569281219761024
info variables

#--- Computes ---#

# Number density profiles

compute         cabeads abeads chunk/atom bin/1d z lower ${binres} units reduced # Check bound keyword to maybe only bin melt area
compute         cabeads abeads chunk/atom bin/1d z lower 0.001 units reduced 
fix             abeads_cdz abeads  ave/chunk ${Neveryc} ${Nrepeatc} ${Nfreqc} cabeads density/number file abeads_cdz
fix             abeads_cdz abeads  ave/chunk 100 ${Nrepeatc} ${Nfreqc} cabeads density/number file abeads_cdz
fix             abeads_cdz abeads  ave/chunk 100 700 ${Nfreqc} cabeads density/number file abeads_cdz
fix             abeads_cdz abeads  ave/chunk 100 700 70000 cabeads density/number file abeads_cdz
compute         cbbeads bbeads chunk/atom bin/1d z lower ${binres} units reduced # Check bound keyword to maybe only bin melt area
compute         cbbeads bbeads chunk/atom bin/1d z lower 0.001 units reduced 
fix             bbeads_cdz bbeads  ave/chunk ${Neveryc} ${Nrepeatc} ${Nfreqc} cbbeads density/number file bbeads_cdz
fix             bbeads_cdz bbeads  ave/chunk 100 ${Nrepeatc} ${Nfreqc} cbbeads density/number file bbeads_cdz
fix             bbeads_cdz bbeads  ave/chunk 100 700 ${Nfreqc} cbbeads density/number file bbeads_cdz
fix             bbeads_cdz bbeads  ave/chunk 100 700 70000 cbbeads density/number file bbeads_cdz
compute         ctbeads tbeads chunk/atom bin/1d z lower ${binres} units reduced # Check bound keyword to maybe only bin melt area
compute         ctbeads tbeads chunk/atom bin/1d z lower 0.001 units reduced 
fix             tbeads_cdz tbeads  ave/chunk ${Neveryc} ${Nrepeatc} ${Nfreqc} ctbeads density/number file tbeads_cdz
fix             tbeads_cdz tbeads  ave/chunk 100 ${Nrepeatc} ${Nfreqc} ctbeads density/number file tbeads_cdz
fix             tbeads_cdz tbeads  ave/chunk 100 700 ${Nfreqc} ctbeads density/number file tbeads_cdz
fix             tbeads_cdz tbeads  ave/chunk 100 700 70000 ctbeads density/number file tbeads_cdz



#--- Fixes ---#
fix             freeze_tout twout setforce 0.0 0.0 NULL
fix             comp_tout twout aveforce 0.0 0.0 ${Fcatom}
fix             comp_tout twout aveforce 0.0 0.0 -1.24653739612188
fix             rwalls all wall/reflect zlo EDGE zhi EDGE




#--- Dumps ---#
#dump           comp all image ${Ndump_c} stg2.*.jpg type type zoom 2 view 60 120 bond none none


#--- Run Compression ---#
timestep    ${Tstep}
timestep    0.005
run         ${Ncomp}
run         700000
WARNING: Inconsistent image flags (src/domain.cpp:784)
Per MPI rank memory allocation (min/avg/max) = 9.94 | 9.94 | 9.94 Mbytes
Step TotEng KinEng PotEng E_pair Temp c_melTemp c_wallTemp v_Fcatom v_Pcomp2 Press Pxx Pyy Pzz Pxy Pxz Pyz c_melPress c_wallPress v_melDens v_surfcov v_aveRg v_Wall_v2 v_srate v_D v_bwzmax Zhi c_fbwall[1] c_fbwall[3] c_ftwall[1] c_ftwall[3] v_sbot v_pbot 
  300000    4.2776007     1.268686    3.0089147  -0.14520876   0.84588086    1.0053414   0.74665098   -1.2465374            1    1.3495989    2.0117549    2.0248652  0.012176712 -0.0010377692   0.06072759  0.040117085    1.1920181    1.2173692   0.15799305  0.066666667    1.5578183        1e-10 3.9498263e-12    25.317569      2.48441    30.403515 0.0010049405  -0.10383906 -0.0096192392  0.096330761   -1.2956478   0.34287436 
  301000    4.2777622    1.2743265    3.0034357  -0.15735921    0.8496416   0.98563557   0.76503681   -1.2465374            1    1.4845711    2.0744716    2.1296399   0.24960165 0.0078760307  0.073674689  0.089568267    1.3231099    1.3549332   0.16495894  0.066666667    1.5554136        1e-10 4.1239735e-12    24.248459    2.5074222    30.403515 0.0030189891 -0.089846712  0.021180065   0.18773453   -1.7736125  0.090815562 
  302000    4.2662707    1.2779039    2.9883668  -0.15806842   0.85202682    1.0195328   0.74778408   -1.2465374            1     1.372968    2.0540548    2.0114405  0.053408662  0.017529711  0.023120962 -0.046357753     1.215148    1.2388717   0.17118165  0.066666667    1.5546781        1e-10 4.2795412e-12    23.366991    2.4852031    30.403515 0.00039492641 -0.083513772 -0.00069938262   0.19703473   -1.4479306   -1.1859073 
  303000    4.2893306    1.2772002    3.0121304  -0.16053433   0.85155764    1.0005477     0.758854   -1.2465374            1    1.3522733    2.0173726    1.9983211  0.041126117 -0.024908728   0.04450663 0.0041364789     1.192117    1.2206741   0.17518661  0.066666667    1.5428093        1e-10 4.3796652e-12    22.832795    2.4866774    30.403515 0.0026921039  -0.10937637 -0.0012798684   0.16707238   -1.8701352   -1.5634638 
  304000    4.2681691    1.2716071     2.996562  -0.16037994    0.8478285    1.0048759   0.75010285   -1.2465374            1    1.5573082     2.152212    2.1517102   0.36800239 -0.00091299468 -0.0029231846 -0.021917362    1.3989989    1.4251397    0.1790042  0.066666667    1.5304599        1e-10 4.4751051e-12    22.345844     2.487188    30.403515  0.007228915  -0.11331578 -0.012722877   0.20050735  -0.29413868  -0.54519354 
  305000    4.2873734    1.2747933    3.0125801  -0.15867091   0.84995288    1.0247546     0.741163   -1.2465374            1    1.3488976    1.9965618    2.0187829  0.031348014 0.0094315093  0.088138517  0.016378141     1.192475    1.2141145   0.18306698  0.066666667    1.5161593        1e-10 4.5766746e-12    21.849926    2.5013375    30.403515  0.017313965 -0.097646192 0.0080162592   0.20180422   -2.1162159   0.83640897 
  306000    4.2381925    1.2546232    2.9835692  -0.15373313   0.83650471    0.9954115   0.73761831   -1.2465374            1    1.5154493    2.1335337      2.15104   0.26177401  0.014864733 0.0027518822   -0.0344493    1.3597748    1.3845256   0.18595059  0.066666667     1.517689        1e-10 4.6487649e-12     21.51109     2.515285    30.403515 0.0050770055   -0.1206111 0.0090347707   0.18355786    -2.184987   0.32649852 
  307000    4.2364546    1.2615448    2.9749098  -0.16602534   0.84111956   0.98576678   0.75112057   -1.2465374            1    1.3804861     2.025635    2.0384598  0.077363533 -0.00051225727  0.055807092   0.02222353     1.221962     1.250831   0.18977203  0.066666667     1.504961        1e-10 4.7443007e-12    21.077922    2.4838676    30.403515 -0.0037202776 -0.095731702 0.0059768633     0.186792   -0.2149672    1.0070025 
  308000    4.2608594    1.2808665    2.9799929  -0.16404911    0.8540021    1.0018097   0.76203574   -1.2465374            1    1.5796312    2.1819282    2.1894443   0.36752096 -0.0049504826  0.038013392 -0.053633531    1.4188034    1.4478659   0.19261738  0.066666667    1.5092157        1e-10 4.8154344e-12    20.766559    2.4930258    30.403515 0.0070795075   -0.1146131  0.026818013   0.18146817  -0.82892537    2.0523386 
  309000    4.2757078    1.2679452    3.0077627    -0.158168   0.84538695     1.000385   0.74893802   -1.2465374            1    1.4848463    2.1136345    2.0963062   0.24459815 0.0052507035  -0.13684645 -0.027065623    1.3267828    1.3532685   0.19607548  0.066666667    1.5107108        1e-10 4.901887e-12    20.400307    2.4917995    30.403515 -0.0034743574  -0.14194873 0.0040167224   0.17243093    1.2701524    -0.162165 
  310000    4.2743104    1.2596563     3.014654  -0.16357191   0.83986047   0.98897688   0.74707604   -1.2465374            1    1.4154836    2.0667314    2.0414394   0.13828014 -0.0050689101 -0.069063164 -0.022307677    1.2578131    1.2854063   0.19912208  0.066666667    1.5206333        1e-10 4.978052e-12    20.088179    2.4781192    30.403515 -0.0027731193 -0.095799002  0.005551961   0.19740389    1.0064721  -0.70246903 
  311000    4.2560944     1.261944    2.9941504  -0.15986551   0.84138572     1.001691   0.74162858   -1.2465374            1    1.4235437    2.0450791    2.0728541   0.15269791 -0.011122861 -0.068958755  0.037894868    1.2670229    1.2917941    0.2025345  0.066666667    1.5188459        1e-10 5.0633626e-12    19.749721     2.483723    30.403515 -0.0064799546 -0.095295809 0.0065302565   0.21536875   0.12664734  -0.56961031 
  312000    4.2663245    1.2654672    3.0008573  -0.16635866    0.8437348   0.98698187   0.75460883   -1.2465374            1    1.4732033    2.1113621    2.1023424   0.20590561 -0.014487259 -0.062996235 -0.071840469     1.313943    1.3433884   0.20568349  0.066666667    1.5185198        1e-10 5.1420872e-12    19.447356    2.4961925    30.403515  0.014813025  -0.10627696 -0.00050209384     0.146547  -0.99584014    2.1586441 
  313000     4.261306    1.2650188    2.9962873  -0.15818891   0.84343579    0.9903872   0.75200121   -1.2465374            1    1.3582279    2.0168147    2.0121186  0.045750486  0.018923207  0.030321019 -0.0085650035    1.1995179    1.2279651   0.20889863  0.066666667    1.5060144        1e-10 5.2224657e-12    19.148043     2.519051    30.403515 -0.0032043235  -0.10080475 0.0045624375   0.18855409   -2.1502083  -0.43430988 
  314000    4.2858608    1.2759178     3.009943  -0.16735104   0.85070263    1.0360416   0.73534606   -1.2465374            1    1.4334421    2.0706678    2.0842304   0.14542805 -0.0080964529   0.15811969 -0.011464084    1.2782472    1.2971744    0.2122091  0.066666667    1.5057024        1e-10 5.3052276e-12    18.849333     2.488933    30.403515 -0.011536322 -0.093533881 -0.0076541548   0.19727289   -1.7259446  -0.05401247 
  315000    4.2269754    1.2530677    2.9739077  -0.16498019    0.8354676   0.98538559   0.74218285   -1.2465374            1    1.4602746     2.087539    2.1030021   0.19028263 -0.0022210953   0.20932169 -0.041219265    1.3036368    1.3306696   0.21565757  0.066666667    1.5185609        1e-10 5.3914391e-12    18.547923    2.5106998    30.403515 -0.0046140551  -0.09456574 -0.014870493   0.18766175   -1.3939189   -1.2063416 
  316000    4.2480129    1.2678362    2.9801767  -0.16070675   0.84531428    1.0028053   0.74731172   -1.2465374            1    1.5123659    2.1287534    2.1476504     0.260694 -0.0013973913   0.10965208  -0.11342807    1.3546457    1.3804698   0.21832994  0.066666667    1.5097016        1e-10 5.4582486e-12    18.320895    2.4798167    30.403515 0.00079140791 -0.088654888  0.017869212   0.21501909  -0.39878228   0.19756587 
  317000    4.3006648    1.2942838     3.006381    -0.166396   0.86294791    1.0411193    0.7520603   -1.2465374            1     1.264036    1.9268798    1.9557591 -0.090530963  0.010104584   0.11568401 -0.025170976    1.1053135    1.1271005   0.22128086  0.066666667    1.5098755        1e-10 5.5320214e-12    18.076575    2.4732493    30.403515 -0.0035146059  -0.10257798 0.0013295115   0.16564423   0.61305323  -0.54840851 
  318000    4.2709146    1.2689579    3.0019567  -0.16362337   0.84606217    1.0083613   0.74506326   -1.2465374            1    1.4581304    2.0960202    2.0989475    0.1794235 -0.0014052038   0.10455958 -0.065262719    1.3008847    1.3255035   0.22521792  0.066666667    1.5182204        1e-10 5.6304479e-12    17.760576    2.4859368    30.403515 0.0096520417 -0.089316836 0.0010621453   0.20544502  -0.25266633   0.89572933 
  319000    4.2466074    1.2700211    2.9765863  -0.15475815   0.84677107   0.99122504   0.75689347   -1.2465374            1    1.4685618    2.0945607     2.116122   0.19500254 0.0090468131  0.087867733  0.037319989    1.3088193    1.3381887   0.22826917  0.066666667    1.5222023        1e-10 5.7067292e-12    17.523173    2.4961299    30.403515 -0.0040961453  -0.10403692 0.0081835023   0.16815544    1.1362248    1.5586059 
  320000    4.2445779    1.2644181    2.9801597  -0.15955563   0.84303534   0.99161598   0.75058535   -1.2465374            1    1.4456444    2.0842579    2.0967843   0.15589108  0.013664841  0.041216884 -0.039073054    1.2872333      1.31522   0.23245433  0.066666667    1.5191591        1e-10 5.8113581e-12    17.207681    2.4952574    30.403515 0.0057380184   -0.1145397  0.021139846   0.17650957   0.61065341    3.2530786 
  321000    4.2547666     1.272181    2.9825856  -0.16367153   0.84821113   0.98382873   0.76384065   -1.2465374            1    1.5038535    2.1452017    2.1033475   0.26301122  0.022088024 -0.061900283 -0.0065924753    1.3426448    1.3744532    0.2353194  0.066666667    1.5224475        1e-10 5.882985e-12    16.998174    2.4956382    30.403515 -0.0046913325  -0.11280637  0.012040977   0.19239695  -0.42413203    1.9548561 
  322000    4.2895515    1.2817858    3.0077657  -0.16006115   0.85461504    1.0109366   0.75734289   -1.2465374            1    1.3427822    1.9977146    2.0173982  0.013233928 0.0040780816  0.008288546  0.019595851    1.1829449    1.2098166   0.23922933  0.066666667    1.5144244        1e-10 5.9807333e-12    16.720358    2.5092086    30.403515 -0.004233019  -0.10785455 0.0050795704     0.219808    1.1777468  -0.55679237 
  323000    4.2689497    1.2828884    2.9860613  -0.16323368   0.85535015    1.0224096   0.75138621   -1.2465374            1    1.4958711     2.089182    2.1357453   0.26268606  -0.01121592  0.033519489 -0.016193682    1.3372909    1.3613964   0.24385295  0.066666667     1.510171        1e-10 6.0963237e-12    16.403328    2.5035852    30.403515 -0.0011933947 -0.094144811 -4.962363e-05   0.21390744  -0.22825583  -0.57843286 
  324000    4.2890107    1.2836731    3.0053377  -0.16253794   0.85587332    1.0032609    0.7641691   -1.2465374            1    1.3477389    1.9936649     2.011718  0.037833923 0.0073839289  -0.04888163 -0.094044991    1.1864609    1.2157829   0.24738139  0.066666667    1.5067405        1e-10 6.1845348e-12    16.169365    2.4837736    30.403515 -0.004495875   -0.1025572  0.010388824    0.1602053  -0.80174667    1.8685885 
  325000    4.2336525    1.2550143    2.9786383  -0.16167712   0.83676543   0.98905258   0.74200444   -1.2465374            1     1.501286    2.1498887    2.1075919   0.24637734 -0.0022714996 -0.042867717 -0.0093758355    1.3446858    1.3711987   0.25335803  0.066666667    1.5007508        1e-10 6.3339507e-12    15.787935    2.4929197    30.403515 -0.0048217434  -0.10812215 0.0082038638   0.21586633   -1.0829959   -2.9897443 
  326000     4.281339    1.2811871    3.0001519   -0.1633287   0.85421587   0.99265377    0.7680888   -1.2465374            1    1.4127935    2.0530984    2.0523759   0.13290626 -0.0049785864  0.083013966  0.012758195    1.2506883    1.2822326   0.25811244  0.066666667    1.5141588        1e-10 6.452811e-12    15.497122    2.4807448    30.403515 -0.0073676397 -0.094180696  0.013684283   0.24168616    -2.460237   -1.8315839 
  327000    4.2649664    1.2800309    2.9849354  -0.16474614   0.85344497     1.018101   0.75097857   -1.2465374            1    1.3876839     2.041127    2.0289176  0.093007201  0.019269245  0.063031327 -0.032282328    1.2291898     1.253776   0.26105297  0.066666667    1.5196878        1e-10 6.5263243e-12    15.322561    2.4894312    30.403515  0.014628947  -0.10506563 -0.001456669   0.20681586  -0.74885093   -5.5918895 
  328000    4.2491568    1.2657015    2.9834553  -0.16459846     0.843891    1.0126617   0.73885867   -1.2465374            1     1.354491    2.0113535    2.0157441  0.036375507 -0.011674655    0.1334911 0.0023429456    1.1985548    1.2212985    0.2654204  0.066666667    1.5145865        1e-10 6.6355101e-12    15.070431    2.5018537    30.403515 0.00073072201 -0.078940855  0.015575548   0.20612598   0.25626068   -1.5412877 
  329000     4.248182    1.2634123    2.9847697  -0.16523516   0.84236468   0.98400681   0.75423869   -1.2465374            1    1.5772974    2.1786426     2.180663   0.37258666  0.005656992   0.11253687  0.077477328    1.4181152    1.4478738   0.27211835  0.066666667    1.5182073        1e-10 6.8029588e-12    14.699486     2.504091    30.403515 -0.0059652511  -0.11754794 -0.0025368254   0.21045228  -0.58318245    1.3163252 
  330000    4.2620637    1.2687109    2.9933528  -0.16074572   0.84589749   0.99473953   0.75328509   -1.2465374            1    1.4158679    2.0429192     2.086935   0.11774949 0.0035321775  0.043326916 -0.048791223     1.256887    1.2850326    0.2761383  0.066666667    1.5045476        1e-10 6.9034576e-12    14.485495     2.507199    30.403515 -0.0028011157  -0.09860474  0.002575755   0.19053153  -0.46094913   0.43516197 
  331000    4.2968159      1.28785    3.0089659  -0.16534987   0.85865824    1.0312933   0.75122018   -1.2465374            1    1.3965382    2.0395816    2.0488776   0.10115535  0.007529311  0.044466167 -0.0037887233     1.237993    1.2608951   0.28064228  0.066666667    1.5068565        1e-10 7.0160571e-12     14.25302    2.4753703    30.403515  0.003301561 -0.077000117 -0.0031513482   0.18312432   -2.7730348  -0.10803973 
  332000    4.2741799    1.2863163    2.9878636  -0.17188403   0.85763564    1.0057727   0.76546465   -1.2465374            1    1.4088109    2.0372566    2.0510712   0.13810495 -0.0022974907  0.048420214  -0.05399512    1.2472595    1.2765245   0.28452893  0.066666667    1.5004343        1e-10 7.1132232e-12    14.058325    2.5012516    30.403515 -0.0051110871  -0.10898994 0.0052231631   0.19274099     -2.71034   -1.7949667 
  333000    4.2647688    1.2598687    3.0049001  -0.15676214   0.84000204    1.0071472   0.73598204   -1.2465374            1    1.4606745    2.1004028    2.0847666   0.19685413 -0.00050372383  0.055608836  0.017367313    1.3053454    1.3282073   0.28847988  0.066666667    1.4976047        1e-10 7.211997e-12    13.865785    2.4863014    30.403515 0.0074103644  -0.10314417  0.012915742   0.15039276   -2.2003894  -0.77816615 
  334000     4.288057    1.2751184    3.0129386  -0.16245544   0.85016961    1.0077374   0.75212004   -1.2465374            1    1.4192705    2.0655752     2.064913   0.12732342 0.0049851325  0.085331075  0.004042761    1.2605355    1.2867257   0.29545985  0.066666667     1.484997        1e-10 7.3864961e-12    13.538219    2.4783304    30.403515 0.0023980415  -0.13045643  0.018041956   0.17913226   -2.4925258   0.27418787 
  335000       4.2464    1.2623097    2.9840903  -0.16531247   0.84162957   0.99230421   0.74787435   -1.2465374            1    1.5662461    2.1554531    2.1709222   0.37236319 0.0094607092  0.058367844 -0.014850721    1.4084071    1.4357312   0.30107777  0.066666667    1.4791858        1e-10 7.5269442e-12    13.285604    2.4910688    30.403515 0.0028869415    -0.110889 -0.015347339   0.20567321   -1.5674616   0.87428829 
  336000     4.222778    1.2604297    2.9623483  -0.17055911   0.84037607   0.99877766   0.74180517   -1.2465374            1    1.4321306    2.0688226    2.0681229   0.15944637 -0.0054507117  0.098933357  0.035876894    1.2755725    1.3007642   0.30586041  0.066666667    1.4818782        1e-10 7.6465102e-12    13.077861    2.5016818    30.403515 -0.0021893538  -0.11217146 -0.0004139288    0.2217696   -1.5326788   0.18035532 
  337000    4.2304147    1.2727989    2.9576158  -0.17477331   0.84862312   0.98592698   0.76320183   -1.2465374            1    1.3866949    2.0254378    2.0669578  0.067688949 -0.0053643918    0.1017029 0.0009413699     1.225621    1.2570187   0.31001065  0.066666667    1.4832936        1e-10 7.7502662e-12    12.902783    2.5001024    30.403515 0.0029073773  -0.10932907 0.00043341408   0.17678978   -1.2456735  -0.20360354 
  338000    4.2449694    1.2626177    2.9823517  -0.17349272   0.84183495   0.98245058   0.75434857   -1.2465374            1    1.4437143    2.0707609     2.063949   0.19643293 -0.0086902313      0.12434  0.035076701    1.2845089    1.3144953   0.31659673  0.066666667    1.4677816        1e-10 7.9149184e-12    12.634369    2.5090732    30.403515 -0.0012223469 -0.088577653  0.010857107   0.18521902   -1.4139099    0.2568041 
  339000    4.2666635    1.2794679    2.9871956  -0.17081513    0.8530696    1.0008793   0.76110177   -1.2465374            1    1.4250093    2.0671036     2.056185   0.15173932  0.011219697   0.20612169  0.011140284    1.2643786    1.2933665   0.32232952  0.066666667    1.4528496        1e-10 8.0582379e-12    12.409661    2.4979598    30.403515   0.00085717  -0.10320662 -0.011228622   0.19449675   -1.9053456    2.1556471 
  340000    4.2240813    1.2569469    2.9671345  -0.16611229   0.83805395    1.0094481   0.73138567   -1.2465374            1    1.4663118    2.1080274    2.0890169   0.20189112 -0.0024676222   0.10808199 -0.017916271    1.3119528     1.333542   0.32860235  0.066666667    1.4496711        1e-10 8.2150588e-12    12.172767    2.4809706    30.403515  0.010213168  -0.10147251 -0.001178448   0.20254944   -1.3582408   0.76731542 
  341000    4.2714368    1.2680542    3.0033827  -0.16029354   0.84545961   0.99319649   0.75353588   -1.2465374            1    1.4653146    2.0897959     2.104991   0.20115685 -0.0028463475  0.096529563  0.072590386    1.3062807    1.3346823   0.33343605  0.066666667    1.4518362        1e-10 8.3359012e-12    11.996303    2.4860291    30.403515 0.0019176354  -0.10784857 -0.0066457566   0.17083606   -1.2356814   -1.9790852 
  342000    4.2896778    1.2828785    3.0067993  -0.16878041   0.85534353   0.99711248   0.76714074   -1.2465374            1     1.502732    2.1353533    2.1205343   0.25230833 0.0082876257  0.060865536  0.041914039    1.3408268    1.3715846   0.33982082  0.066666667    1.4382213        1e-10 8.4955206e-12    11.770909    2.4790795    30.403515 0.0070681216 -0.086881577 -0.013445439   0.20804014   -1.1885267 -0.010384663 
  343000    4.2396866     1.257152    2.9825347  -0.16135611   0.83819071    1.0013872   0.73663121   -1.2465374            1    1.4643481    2.1015135    2.0999176   0.19161309 -0.017303541 -0.039649398  0.083163441    1.3088819    1.3326384   0.34638992  0.066666667    1.4186053        1e-10 8.6597479e-12     11.54768    2.4846162    30.403515 -0.0025246233 -0.084958734 0.00089357198   0.17539984  -0.34416444   -2.6110404 
  344000    4.2595463    1.2814131    2.9781332  -0.17252211    0.8543665    1.0108022   0.75702321   -1.2465374            1    1.4678238    2.0903646    2.0927115   0.22039513 -0.010937698  0.028872184  0.083337625    1.3080539    1.3348758   0.35495344  0.066666667    1.4072926        1e-10 8.873836e-12    11.269084    2.5010225    30.403515 0.0012340062 -0.097202543 0.0052541798   0.23304997   -0.2860372  -0.36075284 
  345000    4.2384405    1.2515189    2.9869216  -0.17302515   0.83443496   0.98570522    0.7403073   -1.2465374            1    1.3655392     2.042643    2.0088773  0.045097381  0.011712015  0.022774321 0.0014249499    1.2092972    1.2358922   0.35994341  0.066666667    1.4178389        1e-10 8.9985852e-12    11.112858    2.4925938    30.403515   0.01159112 -0.086642938 0.0017308463   0.17482268  -0.46868777    1.2975746 
  346000    4.2770445    1.2765097    3.0005348  -0.16521221   0.85109723   0.99279946   0.76293528   -1.2465374            1    1.3380716    2.0111649    1.9929704  0.010079662  0.021734003  0.091720319  0.016101434     1.177054    1.2074915   0.36696418  0.066666667    1.3968758        1e-10 9.1741046e-12    10.900246    2.5098404    30.403515 -0.0040511618  -0.10013438 -0.0039816302      0.17835  -0.24497837   -2.6537686 
  347000    4.2861654    1.2838022    3.0023632  -0.17858999    0.8559594    1.0169355   0.75578675   -1.2465374            1    1.4015849    2.0666714    2.0087382   0.12934509  0.001508905   0.12849621  0.053268383     1.242076    1.2678302    0.3741159  0.066666667    1.3784133        1e-10 9.3528975e-12    10.691874     2.488091    30.403515 0.0034842342 -0.095820544 -0.0034954391   0.20261741  -0.64834282  -0.52638521 
  348000    4.2218342    1.2479144    2.9739197  -0.17626323   0.83203169   0.97269911   0.74451135   -1.2465374            1    1.4675285    2.1093547    2.0856814   0.20754936 0.0078977059  0.047766041 -0.042912735    1.3103992    1.3395921   0.38057934  0.066666667    1.3747455        1e-10 9.5144834e-12    10.510292    2.5047447    30.403515 0.00046126711 -0.089395771 0.0052438998   0.17305051   -2.6401176    1.8151831 
  349000    4.2476041    1.2807437    2.9668604  -0.17339474   0.85392019    1.0139822   0.75431687   -1.2465374            1    1.4160027    2.0713824    2.0666449   0.10998069  0.012999368  0.031220657  0.021519591     1.256804    1.2826364   0.38782407  0.066666667    1.3742774        1e-10 9.6956017e-12    10.313955    2.4862354    30.403515 -0.0014709593  -0.11611457 0.0054662845   0.19308306   -1.0946417   -1.3527352 
  350000    4.2235749    1.2755325    2.9480424   -0.1732515   0.85044572     1.002434   0.75587337   -1.2465374            1    1.5804786    2.2007086    2.1868594   0.35386767  0.012531386  -0.06281396 -0.0046213521    1.4209514    1.4486312   0.39351065  0.066666667    1.3645999        1e-10 9.8377663e-12    10.164909    2.4875793    30.403515 0.0056951811  -0.11643416 -0.0050260046   0.20581426    1.0448657     2.147678 
  351000    4.2639576    1.2624452    3.0015124  -0.16952396   0.84171993    1.0034774   0.74105788   -1.2465374            1    1.5380845    2.1472946    2.1650492   0.30190967  0.013020016 -0.061743522  0.067697934    1.3816841    1.4060999   0.39984183  0.066666667    1.3549901        1e-10 9.9960458e-12    10.003956    2.4817789    30.403515 -0.0031032546  -0.12004268 -0.0086769772   0.22674089  0.025718561     2.459042 
  352000     4.251633    1.2664097    2.9852233  -0.17590481    0.8443632    1.0024496   0.74598943   -1.2465374            1    1.4788368    2.0887052    2.1109162    0.2368889 -0.014798043 -0.030101205 -0.057874898    1.3213956    1.3469874    0.4089547  0.066666667    1.3422168        1e-10 1.0223868e-11    9.7810343    2.4932375    30.403515 -0.002899483  -0.09385906 0.0077617089   0.17752279    1.3942982   -1.9300413 
  353000    4.2726643    1.2881806    2.9844837  -0.17280757    0.8588787    1.0043691   0.76835731   -1.2465374            1    1.2820495    1.9608192    1.9821348 -0.096805446 -0.011788697 -0.027608199 -0.044516073    1.1198876    1.1499477    0.4150333  0.066666667    1.3374359        1e-10 1.0375832e-11    9.6377809    2.5149039    30.403515 0.0036922435   -0.1223868 -0.0095325971   0.18354277   0.11616463   -2.7120026 
  354000    4.2481232    1.2684134    2.9797099  -0.18224776   0.84569911   0.99498009   0.75281313   -1.2465374            1    1.5281546    2.1435759    2.1496847   0.29120331  0.015867804 0.00067014847 -0.0068634055    1.3692733    1.3972877    0.4213928  0.066666667    1.3178886        1e-10 1.053482e-11    9.4923312    2.4882232    30.403515 -0.004177525  -0.09883837 0.0034310355   0.20396709 -0.0061402948    2.4774186 
  355000    4.2495644    1.2801508    2.9694136  -0.17594976   0.85352488    1.0027826   0.76065476   -1.2465374            1    1.4028196    2.0425252    2.0500201   0.11591359 -0.0052110949  0.025210163  0.037846566    1.2422833    1.2709264   0.42921926  0.066666667    1.3097687        1e-10 1.0730482e-11    9.3192462    2.4847137    30.403515 0.0087865938  -0.12626039 -0.0089862366   0.16940106   0.91534174    1.4941511 
  356000    4.2299963    1.2669809    2.9630154  -0.17260299     0.844744   0.99448503   0.75157115   -1.2465374            1    1.3824109    2.0596514    2.0290888  0.058492347 0.00041373329  0.011964362 -0.049550567    1.2237916     1.251609   0.43696105  0.066666667    1.2999905        1e-10 1.0924026e-11     9.154134    2.4933487    30.403515 -0.0085744961  -0.10440015 -0.0089020884   0.19700858   -1.2110043  -0.24230352 
  357000    4.2255893    1.2624798    2.9631095  -0.18368713   0.84174298    1.0176956   0.73223448   -1.2465374            1    1.4080024    2.0424055    2.0738561   0.10774572 0.0048718956 -0.056365351 -0.033754688    1.2534642    1.2741478   0.44547777  0.066666667    1.2868508        1e-10 1.1136944e-11    8.9791238    2.4780412    30.403515 -0.0011493176   -0.1200918 0.0097651767   0.18940428  -0.14830785   0.33355486 
  358000    4.2481961    1.2665332    2.9816629  -0.17752421   0.84444554   0.98978901   0.75401321   -1.2465374            1    1.4234827    2.0658816      2.06013   0.14443641 -0.011173383  -0.07697746 -0.028983926    1.2643481    1.2932985   0.45539902  0.066666667    1.2697685        1e-10 1.1384975e-11     8.783506    2.4828322    30.403515 -0.0046868792  -0.10294906  0.010986223   0.18714085  -0.06743983   -1.7981802 
  359000    4.2199867    1.2689837     2.951003  -0.18703439   0.84607936    1.0150261   0.74093764   -1.2465374            1     1.441544    2.1003623    2.0718118   0.15245782 -0.00069427355 -0.056861776  -0.02492496     1.285169    1.3080405   0.46467314  0.066666667    1.2544468        1e-10 1.1616829e-11    8.6082014    2.5026004    30.403515 -0.0079866284 -0.092589321 -0.0066591849   0.20027645  -0.26369348   -1.4217045 
  360000    4.2130429    1.2565082    2.9565347  -0.17503603    0.8377615   0.99981804   0.73691237   -1.2465374            1    1.5350106    2.1576378    2.1701651   0.27722884 -0.019602267 -0.028127363  0.019383489    1.3794851    1.4035073   0.47308185  0.066666667    1.2509668        1e-10 1.1827046e-11    8.4551965    2.4752423    30.403515 0.0039340679 -0.096159058 0.0064638545   0.20114531    0.7410448  -0.81055016 
  361000    4.2209359    1.2699609     2.950975  -0.18644112   0.84673089   0.99883448   0.75208602   -1.2465374            1     1.329146    1.9911937    2.0027955 -0.0065510693  0.016030186  0.064253088 -0.013736751    1.1704182    1.1977721   0.48341232  0.066666667    1.2482594        1e-10 1.2085308e-11    8.2745098     2.502609    30.403515 0.0059729222  -0.10182485 0.0038445473   0.22824778  -0.90811077  -0.62026749 
  362000     4.216323    1.2642706    2.9520524  -0.18185506   0.84293695    0.9879276   0.75272424   -1.2465374            1    1.4597525    2.1063785    2.0950364   0.17784259 -0.016792608   0.05587416  0.041564855    1.3008899    1.3298131   0.48791729  0.066666667    1.2373499        1e-10 1.2197932e-11    8.1981107    2.5011512    30.403515 0.0069083979  -0.12870541  0.003557274   0.16597462   0.86726242  -0.48356047 
  363000     4.273689    1.2823601    2.9913289   -0.1800358   0.85499792    1.0135602    0.7563294   -1.2465374            1    1.4883083    2.1139886      2.10896   0.24197638  0.012627198   0.09265812 -0.045821207    1.3286849    1.3549976   0.49920224  0.066666667    1.2436322        1e-10 1.2480056e-11    8.0127846    2.5208849    30.403515 0.00016711702  -0.12489877 -0.0070635011   0.18236006   0.20605007   -1.8532602 
  364000    4.2129192    1.2707036    2.9422156  -0.17775303   0.84722606   0.98419002   0.76201635   -1.2465374            1    1.5351025    2.1609634    2.1640333    0.2803109 -0.0040178162   0.10210457 0.00051992468    1.3742788    1.4056548   0.50476546  0.066666667    1.2419136        1e-10 1.2619137e-11    7.9244724    2.4886416    30.403515 -0.0032105758     -0.12166 0.0054248066   0.18180042    0.1801701  -0.47156275 
  365000    4.2570148    1.2845781    2.9724367  -0.16634968   0.85647672     1.028752   0.74926251   -1.2465374            1    1.5770653    2.1997068    2.1670873   0.36440174 0.0055418815   0.03481435  0.066284555    1.4189333    1.4417565   0.51486588  0.066666667    1.2338666        1e-10 1.2871647e-11    7.7690135    2.5037507    30.403515 -0.003099778  -0.13009229 -0.0032644932   0.18627161    2.1038987     3.291777 
  366000    4.2234446    1.2650408    2.9584038  -0.18899548   0.84345049    1.0069306   0.74171513   -1.2465374            1    1.4305168     2.075284    2.0753266   0.14093973 -0.017066064  0.015453676 -0.036462148    1.2739777     1.298078    0.5188815  0.066666667    1.2215886        1e-10 1.2972037e-11    7.7088893    2.4856592    30.403515 0.0030229771  -0.12888016  0.014908826    0.1828296   0.79184113  -0.60298191 
  367000    4.2472813      1.27823    2.9690513  -0.17763815    0.8522442     1.015978   0.75035231   -1.2465374            1    1.4229087    2.1006355    2.0457138   0.12237687  -0.02162131 -0.030214645 -0.0067960258    1.2645467      1.28928   0.53091752  0.066666667    1.2151177        1e-10 1.3272938e-11     7.534127    2.4868247    30.403515 -0.015151075  -0.13118853 -0.012680533   0.19019958  -0.40526703   -1.6150438 
  368000    4.2190526    1.2778676     2.941185  -0.18303125   0.85200258    1.0011336   0.75921112   -1.2465374            1    1.4694627    2.1082323    2.1183162   0.18183967 -0.012456012  0.029478625  0.019928504    1.3092311    1.3377864   0.54079948  0.066666667    1.2121926        1e-10 1.3519987e-11    7.3964568    2.4907571    30.403515  0.004915325  -0.11915441 -0.0084490226   0.22796598  -0.17410919   -1.3702093 
  369000    4.2397217     1.268611    2.9711107  -0.18237653   0.84583085    1.0076445   0.74513449   -1.2465374            1     1.504067     2.143233    2.1281683   0.24079961 -0.0084024818 -0.061683361 -0.019693615    1.3468062    1.3715343   0.54331741  0.066666667        1.211        1e-10 1.3582935e-11    7.3621789    2.4815789    30.403515 0.0094869662   -0.1172085 -0.0013563136   0.17481341  -0.10582748   0.22992303 
  370000    4.2058118    1.2635888     2.942223  -0.18735546   0.84248236    1.0055329   0.74101461   -1.2465374            1    1.5920715     2.204831    2.2003887   0.37099469 0.0051619163  -0.12220479 -0.0046768543    1.4356802    1.4598166   0.55226883  0.066666667    1.2035839        1e-10 1.3806721e-11    7.2428495    2.4854002    30.403515 -0.00086503373  -0.11097968 0.0084844729   0.19717757   0.11042202    2.3806456 
  371000    4.2178241    1.2770993    2.9407248  -0.18181515   0.85149034    1.0095317   0.75314585   -1.2465374            1     1.445391    2.1042699    2.1061975   0.12570563 -0.016254793  -0.11008004 0.0070298935    1.2864394    1.3126101   0.55925713  0.066666667    1.2012288        1e-10 1.3981428e-11    7.1523451    2.5175399    30.403515 -0.012434596  -0.14542564 -0.00079183585   0.15097427    2.5796137   -5.5831523 
  372000    4.2088344    1.2639287    2.9449057  -0.19356185   0.84270904   0.98622218   0.75341708   -1.2465374            1    1.4562035    2.0910338    2.0952382   0.18233847 0.0057078876   -0.1562885  -0.02204082    1.2971947    1.3264885   0.56846493  0.066666667    1.2062976        1e-10 1.4211623e-11    7.0364938    2.4756978    30.403515 0.0024903196  -0.14437005  0.011239493   0.17515693    2.6356051   -1.6768232 
  373000    4.1908877    1.2614572    2.9294305  -0.19566108   0.84106117    1.0268254   0.72543793   -1.2465374            1    1.6297118    2.2294864    2.2433957   0.41625337  0.005277649 -0.082584441  0.039418159     1.476608    1.4946564   0.58093629  0.066666667    1.1986218        1e-10 1.4523407e-11    6.8854366    2.5298484    30.403515 -0.012185782  -0.13808687 -0.0023981193   0.21605509  0.068191961    1.2816429 
  374000    4.2254476    1.2793867    2.9460609  -0.19070303   0.85301545    1.0134241   0.75319596   -1.2465374            1    1.4647899    2.0890435    2.1010435    0.2042828 0.0080314169   -0.0390618  0.011228956    1.3058278    1.3314971   0.58712713  0.066666667     1.192302        1e-10 1.4678178e-11    6.8128346    2.4794519    30.403515 -0.012398098  -0.14693342 -0.015846521   0.20586442   0.53260325  -0.25943282 
  375000    4.2016484    1.2585644     2.943084  -0.18436567   0.83913242   0.99825892   0.74010953   -1.2465374            1    1.6661537    2.2789347     2.229497    0.4900294 0.0019934029 -0.042188462 0.0044285896    1.5099535    1.5348555   0.59161585  0.066666667    1.1835293        1e-10 1.4790396e-11    6.7611441    2.4907436    30.403515 -0.0069949133  -0.12901202 0.00092160325    0.1875338   0.03919639    1.1149736 
  376000    4.2020322    1.2780221    2.9240101  -0.18891626   0.85210564    1.0207623    0.7471458   -1.2465374            1    1.4910507    2.1410203     2.140086   0.19204575 0.0028387481 -0.029926519 -0.031519998    1.3333654    1.3567927   0.60316168  0.066666667    1.1839646        1e-10 1.5079042e-11     6.631721    2.4819744    30.403515 -0.0038047248  -0.16306918   0.01146687   0.19076113   -2.5184943   -1.1370676 
  377000    4.1910186    1.2664764    2.9245422  -0.19912087   0.84440765   0.98880359   0.75456582   -1.2465374            1    1.4774429    2.1196247    2.1119753   0.20072878 -0.010934887 -0.030840541  0.021180582    1.3181917    1.3473884   0.61035512  0.066666667    1.1873175        1e-10 1.5258878e-11    6.5535618    2.4957606    30.403515 -0.012297728  -0.13823939 0.0060193545   0.19393621    -1.968127  -0.10756881 
  378000    4.2150702    1.2807172     2.934353  -0.19421978   0.85390255    1.0222692   0.74912373   -1.2465374            1    1.6567968    2.2310202    2.2571214   0.48224891 -0.0026693839 -0.004392939   0.01960692    1.4986941    1.5223406   0.62059468  0.066666667     1.193765        1e-10 1.5514867e-11    6.4454307    2.4973768    30.403515 -0.0087943674  -0.12547364 0.0028184148   0.19764973   -1.3203653     2.901351 
  379000    4.1853954    1.2759013    2.9094941  -0.20858338   0.85069159    1.0205391   0.74498933   -1.2465374            1    1.4226874    2.0744725    2.0667816   0.12680798 0.0094107132 -0.059295093 -0.047820323    1.2654572    1.2884587   0.62791949  0.066666667    1.1993586        1e-10 1.5697987e-11    6.3702434    2.4900667    30.403515 -0.0096179705  -0.14898376 -0.0060483087   0.21275081  -0.54758074   0.10495822 
  380000    4.2000347    1.2742023    2.9258324  -0.20052426   0.84955882    1.0132789   0.74767497   -1.2465374            1    1.5152748    2.1500537    2.1354149   0.26035564 0.00077799205  -0.18281306 0.0051960622    1.3574778     1.382001   0.63483153  0.066666667    1.2015414        1e-10 1.5870788e-11    6.3008842    2.5110059    30.403515 -0.0084471229  -0.14407609 -0.0054502128   0.18897489   0.62488786   -1.2092135 
  381000    4.2068417    1.2739558    2.9328858  -0.19866954   0.84939449    1.0027868   0.75394696   -1.2465374            1    1.5341851    2.1695982    2.1620475    0.2709097  0.013730485  -0.10478638 -0.013128292    1.3750645    1.4022914   0.64159894  0.066666667    1.1968179        1e-10 1.6039973e-11    6.2344243    2.4961713    30.403515  0.004521315  -0.14820412 -0.0073890163   0.20679887    1.9063372   -1.7883157 
  382000    4.2162232    1.2778384    2.9383848  -0.19642955   0.85198312    1.0094704   0.75398402   -1.2465374            1    1.5074581    2.1283062    2.1387934   0.25527465 -0.0070529741  -0.14662406  0.044147008    1.3483296    1.3746853   0.64144414  0.066666667    1.1933719        1e-10 1.6036104e-11    6.2359288    2.4809522    30.403515 -0.016251127  -0.15416766  0.012583421   0.17990224    3.2570741   0.67163072 
  383000    4.1977593    1.2723131    2.9254463  -0.21108841   0.84829918   0.99998494   0.75391498   -1.2465374            1    1.6138719    2.2008542    2.2436966     0.397065 -0.00032457948 -0.076998483 -0.0092993862     1.454758    1.4823467   0.64775822  0.066666667    1.1919185        1e-10 1.6193955e-11    6.1751436    2.4886589    30.403515 -0.0061692421  -0.18004628 0.0082797294   0.17572243   0.66191906   0.62640979 
  384000    4.1833387    1.2569386    2.9264001  -0.19816083   0.83804846   0.98392571   0.74728237   -1.2465374            1    1.5976992    2.2155981     2.204915   0.37258461 0.0064039977 -0.060195187  -0.06900611    1.4399852    1.4682863   0.65521909  0.066666667    1.1965367        1e-10 1.6380477e-11    6.1048283    2.4902946    30.403515 0.0036400759  -0.16565644 -0.0081552425   0.19816714   -0.3183074    1.9913952 
  385000    4.1898514    1.2768719    2.9129796  -0.19751538    0.8513387    1.0174155    0.7479865   -1.2465374            1    1.3982479    2.0600496    2.0629961  0.071697911 0.0068213214 -0.057868729  -0.06491646    1.2403852    1.2644301    0.6579407  0.066666667    1.1908984        1e-10 1.6448518e-11    6.0795752    2.4851038    30.403515 0.0074826057  -0.19443835 0.0093498348   0.18478709  -0.43927273  -0.28751164 
  386000    4.1929592    1.2743102    2.9186491  -0.20586039   0.84963073    1.0013339   0.75523589   -1.2465374            1    1.6909274    2.3124108    2.2436124   0.51675883 0.0092313456 -0.043371061  0.025048348    1.5315347    1.5592247   0.66439696  0.066666667    1.2131481        1e-10 1.6609924e-11    6.0204972    2.4999954    30.403515   0.01095863  -0.16646307  0.003157665   0.22437012   -1.4134457    3.8644892 
  387000    4.1849503    1.2762452    2.9087052  -0.20582836   0.85092087   0.99864281    0.7590074   -1.2465374            1     1.562547    2.1837324    2.1980947   0.30581381 -0.0079764742 -0.022111014 -0.021181376    1.4023584    1.4311983   0.66208697  0.066666667    1.2050821        1e-10 1.6552174e-11    6.0415024    2.4987094    30.403515 0.0096372175  -0.16947958 0.00087346288   0.18364377   -1.3568426    2.8221175 
  388000    4.1609511    1.2449392    2.9160119  -0.21253463   0.83004797   0.99454252   0.72767813   -1.2465374            1    1.5497581    2.1651987    2.1852135   0.29886217 0.0068938401 0.00022821882  0.047237648    1.3961816    1.4189488   0.65965946  0.066666667    1.2111738        1e-10 1.6491487e-11    6.0637348    2.4819908    30.403515 -0.014090715  -0.18062621 -0.017982953   0.21806356   0.34993285    3.2378082 
  389000    4.1898656     1.256005    2.9338606  -0.20204093   0.83742599   0.98171895   0.74764713   -1.2465374            1    1.4234404    2.0840372    2.0686794   0.11760467 -0.013217044  -0.02496908  0.030178847    1.2656494    1.2943177   0.67254946  0.066666667    1.2017283        1e-10 1.6813736e-11     5.947518    2.5042132    30.403515 -0.016057654  -0.15500379  0.010091548    0.1694968    2.0259577 -0.093462307 
  390000    4.1903908    1.2490323    2.9413585  -0.19756269   0.83277702   0.98022051   0.74103393   -1.2465374            1    1.6101318    2.2099303    2.2338547   0.38661036 -0.013385015  0.004605909   0.04660449    1.4537364    1.4812061   0.67495456  0.066666667    1.2039497        1e-10 1.6873864e-11    5.9263249    2.4855668    30.403515 -0.010549957  -0.18982244 -0.0062751153   0.18022096    1.3363316    1.6268067 
  391000    4.1869256    1.2812943    2.9056314  -0.21846999   0.85428729     1.013976   0.75491667   -1.2465374            1     1.597619    2.1851975    2.2416875   0.36597189  0.017281532 -0.028659992  -0.07926038    1.4382937    1.4642535   0.67876339  0.066666667    1.2125028        1e-10 1.6969085e-11    5.8930698    2.4896324    30.403515 -0.0017051802  -0.18468424 -0.0058811179    0.1605646    1.7042238   0.92735607 
  392000    4.1805584    1.2631472    2.9174112  -0.21530689   0.84218797   0.99326065   0.74818478   -1.2465374            1    1.5510054    2.1612037    2.1665724   0.32524001 -0.0086414172 -0.094263872  0.024365114    1.3931009    1.4203646    0.6756313  0.066666667    1.2144234        1e-10 1.6890782e-11    5.9203888    2.4881013    30.403515  0.011015399  -0.15523291  0.019151735   0.19895104    1.5297792   0.58772619 
  393000     4.168114    1.2458202    2.9222938  -0.21338409   0.83063542   0.98409229   0.73514439   -1.2465374            1    1.6520402    2.2367141    2.2423045   0.47710207 -0.014266048 -0.042743405  0.087440785    1.4968879    1.5226053   0.68246022  0.066666667    1.2151393        1e-10 1.7061505e-11    5.8611475    2.5006735    30.403515 0.00065600411  -0.16296563  0.013165985    0.2218698   0.10788164    1.2522413 
  394000    4.1535143     1.256976    2.8965383  -0.22574806   0.83807336   0.99887137    0.7380086   -1.2465374            1    1.5503872     2.181541    2.1719271   0.29769359  0.013447996  0.032130545 -0.018143415    1.3946304    1.4190085    0.6749586  0.066666667    1.2048767        1e-10 1.6873965e-11    5.9262894    2.4819371    30.403515 -0.015776235  -0.18387193  0.007472768   0.20373333 -0.031775195    3.0279353 
  395000    4.2052444    1.2619458    2.9432986  -0.21180209   0.84138693   0.98468766   0.75222711   -1.2465374            1    1.4635862    2.0983747    2.1068146   0.18556933 -0.00020277986   0.03006823 -0.021929707    1.3048285     1.334073   0.67523662  0.066666667    1.2177449        1e-10 1.6880915e-11    5.9238494    2.4974368    30.403515 -0.0072447396  -0.17331388 -0.00023289554   0.14932231   0.62547719   0.12654746 
  396000    4.1732236    1.2737906     2.899433  -0.21419157   0.84928435    1.0060352   0.75174376   -1.2465374            1    1.5833939    2.1919082    2.2076019   0.35067168  0.016060928   0.10003257 -0.060623365    1.4247383    1.4510729   0.68494192  0.066666667    1.2216797        1e-10 1.7123548e-11    5.8399112    2.4869128    30.403515 -0.0017500711  -0.20259987  0.014642393   0.17573924   -1.1139127    2.9164907 
  397000    4.1860116     1.273984    2.9120276  -0.20586364   0.84941324    1.0021903   0.75434911   -1.2465374            1    1.5558768     2.189982     2.180366    0.2972825  0.012903984 -0.0050513278  0.030166943    1.3966713    1.4240615   0.68641736  0.066666667    1.2235134        1e-10 1.7160434e-11    5.8273585    2.5054422    30.403515 -0.0010696591  -0.17417504 -0.0061325731   0.19803026   0.75541866    2.3196071 
  398000    4.1528063    1.2455856    2.9072207  -0.21751141   0.83047898   0.97755846   0.73896234   -1.2465374            1    1.5031614    2.1436754    2.1485135   0.21729517 -0.0050376357 -0.092432059 -0.023846224    1.3472032    1.3745858   0.68872237  0.066666667    1.2221683        1e-10 1.7218059e-11    5.8078555     2.498048    30.403515 0.0067490055  -0.16961067 -0.00088319906   0.17742943    1.1578612   0.12200574 
  399000    4.1725619     1.259032    2.9135299  -0.21069787   0.83944419   0.97844241   0.75296538   -1.2465374            1    1.7062606    2.2987723    2.3145459   0.50546343 -0.0071574844 -0.0053167867 -0.018682241    1.5473471    1.5775688   0.68536397  0.066666667    1.2221786        1e-10 1.7134099e-11     5.836315    2.4999027    30.403515 -0.0084781337   -0.2037005 0.0059868595   0.18074239  -0.70528439   0.35545465 
  400000     4.139862    1.2497985    2.8900635   -0.2146214   0.83328785   0.99473392   0.73281839   -1.2465374            1    1.5826708    2.1842952    2.2166629   0.34705435  0.010032121 -0.074831321 -0.011721241    1.4280093    1.4518362   0.68810942  0.066666667    1.2222686        1e-10 1.7202735e-11     5.813029    2.4851186    30.403515 -0.0076719835  -0.17604666 0.00019412704   0.18215381  -0.17134721   0.18941204 
  401000    4.1726051    1.2646473    2.9079578  -0.22021343   0.84318814   0.99876984    0.7463751   -1.2465374            1    1.5312475    2.1761619    2.1576875   0.25989314  0.020178446  -0.13127012  0.049112987    1.3737249    1.3998821   0.69077795  0.066666667    1.2267019        1e-10 1.7269449e-11    5.7905728    2.4838811    30.403515  0.016655797  -0.17785016  0.018531258   0.23195261    1.2372375   0.90209816 
  402000    4.1990386    1.3056717    2.8933668  -0.21507721   0.87054067    1.0133528   0.78169039   -1.2465374            1     1.615574    2.2419831    2.2415229   0.36321586 -0.0024458167  -0.11247927  0.010659847    1.4505981    1.4822905   0.69481313  0.066666667    1.2258401        1e-10 1.7370328e-11    5.7569436    2.5103153    30.403515 -0.015918859  -0.23392662 -8.5855669e-05   0.18757241   0.63375549   0.42398181 
  403000    4.1557381     1.262537    2.8932011  -0.20430937   0.84178111   0.99686285    0.7452794   -1.2465374            1    1.5668822    2.1917827     2.210838   0.29802582 -0.014235334  -0.10298376 -0.020152167    1.4095908    1.4357676   0.69475459  0.066666667    1.2220661        1e-10 1.7368865e-11    5.7574287     2.492807    30.403515 -0.019022412  -0.18480467 0.0060497018    0.1948876    1.9689447    1.2039109 
  404000    4.2054311    1.2871982    2.9182329  -0.20972409   0.85822367    1.0284759   0.75227052   -1.2465374            1     1.637788    2.2414373      2.23859   0.43333663 -0.009091777 -0.063496099 -0.067982228    1.4790212    1.5025154   0.69608593  0.066666667    1.2263302        1e-10 1.7402148e-11     5.746417     2.491378    30.403515  0.012543755  -0.17950132 0.0060029729   0.16243139    1.3182735    1.6955631 
  405000    4.1819042    1.2687153    2.9131889  -0.20316013   0.84590042   0.98466981   0.75956533   -1.2465374            1    1.4744848    2.1349216    2.1085163   0.18001651 -0.013137058  -0.10351064  0.038302427    1.3141784    1.3449739   0.69403251  0.066666667     1.223261        1e-10 1.7350813e-11    5.7634188    2.5066595    30.403515 0.0068649745  -0.18225897 -0.0021091941   0.19067321    2.3405984  -0.15538336 
  406000    4.1907971    1.2828668    2.9079304  -0.21199242   0.85533574    1.0180326   0.75409059   -1.2465374            1    1.6447329    2.2536049     2.244153   0.43644081  0.015637866  -0.15164063 -0.063769652     1.485582     1.510834   0.69126276  0.066666667    1.2291033        1e-10 1.7281569e-11    5.7865116    2.4707046    30.403515 -0.0030018941  -0.21004926 -0.0035844585   0.17793153    1.5990027  -0.28314727 
  407000    4.1764932    1.2637733    2.9127199  -0.20807371    0.8426054   0.99193798   0.74968673   -1.2465374            1     1.657269    2.2551782    2.2727438   0.44388511 -0.00092842911 -0.092838261  0.013962734    1.4990475    1.5268022   0.70413565  0.066666667    1.2384276        1e-10 1.7603391e-11    5.6807236    2.5137764    30.403515 -0.0009972017  -0.19453392 -0.0032705809   0.21777722 0.0042021688   0.92431423 
  408000    4.1640079    1.2589128    2.9050951  -0.21619774   0.83936474    1.0012272   0.73863683   -1.2465374            1    1.4787802    2.1212649    2.1137284   0.20134719  0.018756188  -0.11968138  0.011976461    1.3228907    1.3470915   0.69658733  0.066666667    1.2450657        1e-10 1.7414683e-11    5.7422807    2.4769552    30.403515 -0.0072428056  -0.17020873 -0.0055795758   0.17721879    1.2735717  0.082772062 
  409000    4.1563627    1.2642577    2.8921049  -0.22337626   0.84292839   0.98964669     0.751639   -1.2465374            1    1.7076444    2.2788414    2.3163996   0.52769216 0.0032725631 -0.059223958 -0.041047579    1.5490109     1.577479   0.70266748  0.066666667    1.2473399        1e-10 1.7566687e-11     5.692593    2.4891837    30.403515 -0.0059237677  -0.21180947 0.0089010664   0.19041896  -0.96975512    2.1043393 
  410000    4.1903266    1.2777179    2.9126088  -0.20249853   0.85190279     1.011182   0.75278694   -1.2465374            1    1.5061404    2.1408817    2.1416975   0.23584206 0.0049792079  0.016227451  0.017385302    1.3472646    1.3731425   0.70054836  0.066666667    1.2380481        1e-10 1.7513709e-11    5.7098128     2.489151    30.403515 -0.0059178145  -0.17274888  -0.00705397   0.22385233   -2.0204194   0.69052149 
  411000    4.1345183    1.2288086    2.9057097  -0.21153683   0.81929314   0.96928198   0.72596144   -1.2465374            1     1.633146    2.2732241    2.2205414   0.40567258 -0.012086408 -0.049255845  0.024116603    1.4799317    1.5056591   0.69842267  0.066666667    1.2425307        1e-10 1.7460567e-11    5.7271909    2.4689897    30.403515  0.010619854  -0.21141046 0.0011184757   0.19222972  -0.28796242    2.2163466 
  412000    4.1620437    1.2716755    2.8903682  -0.21336757    0.8478741    1.0103689   0.74675359   -1.2465374            1    1.5431519    2.1839358    2.1737438   0.27177615 0.0058429708  0.082974415 -0.021873448    1.3855495     1.410261   0.69629571  0.066666667     1.259308        1e-10 1.7407393e-11    5.7446856    2.4888017    30.403515 -0.0077768139   -0.1855116 -0.014264136   0.19689065   -2.5365334    4.3349836 
  413000    4.2072448    1.2780025    2.9292423  -0.20770773   0.85209254    1.0198837   0.74767208   -1.2465374            1     1.579328    2.2007682    2.2031839   0.33403195  0.004679901  0.077948283 -0.041573851    1.4215317    1.4451856   0.69919621  0.066666667    1.2450905        1e-10 1.7479905e-11    5.7208548    2.4869963    30.403515 -0.0029703636  -0.18778454 0.00075542012   0.20005203  -0.30567004    2.6767104 
  414000     4.181343    1.2865009    2.8948421  -0.22224071   0.85775873    1.0092724   0.76348341   -1.2465374            1     1.570721     2.199213    2.1691716   0.34377855  0.003672045   0.10618609 0.0068696477    1.4095877    1.4379743   0.70511905  0.066666667    1.2550999        1e-10 1.7627976e-11     5.672801    2.4897635    30.403515 -0.010508297  -0.18476798 -0.0019847719   0.22541888   -1.4669411    1.0576332 
  415000    4.1542909    1.2692982    2.8849927  -0.21071346   0.84628905   0.99248905   0.75532325   -1.2465374            1    1.5803224    2.2105269    2.2008863   0.32955415 -0.018193618   0.13834859 -0.0095334465    1.4209113    1.4497831   0.70496716  0.066666667     1.244714        1e-10 1.7624179e-11    5.6740232    2.4929561    30.403515 -0.015571927  -0.21198566 0.0030219597   0.24889677   -1.4277076 -0.0019138413 
  416000      4.14905    1.2445286    2.9045214  -0.21321318   0.82977422   0.97969599   0.73648613   -1.2465374            1    1.6604766    2.2617783    2.2824825   0.43716908 -0.0015329979   0.11279773 -0.021243068    1.5050411    1.5316199   0.70261864  0.066666667    1.2382549        1e-10 1.7565466e-11    5.6929887     2.477018    30.403515  0.013818936  -0.18371947 0.0037224505   0.17575911   0.02092455    1.7219601 
  417000    4.1933929    1.2739717    2.9194212  -0.21862717   0.84940507   0.98616639   0.76432202   -1.2465374            1    1.5269665     2.150079    2.1566353   0.27418511 0.0098949016   0.10409809  0.030762575    1.3656562    1.3972588   0.70010994  0.066666667    1.2464187        1e-10 1.7502748e-11    5.7133884    2.4966448    30.403515  0.010194432   -0.2320982 -0.0022288107   0.15442383   -1.0477215  -0.35816123 
  418000    4.1729377    1.2640566    2.9088811  -0.21706169   0.84279427   0.99031752   0.75100321   -1.2465374            1    1.5564265    2.1807775    2.1750438   0.31345834 -0.0055919423  0.057237118  0.049431142    1.3979272    1.4261729   0.70060589  0.066666667    1.2396064        1e-10 1.7515147e-11    5.7093439    2.5023064    30.403515 -0.011919126  -0.18692831 0.00013600533   0.17828781   -1.6407403   0.12379666 
  419000     4.154414     1.249402    2.9050119  -0.22325702   0.83302354    1.0044904   0.72630903   -1.2465374            1    1.6143385    2.2290714    2.2127452   0.40119877 0.0079283211 -0.027814482 -0.019313468    1.4610508    1.4822207   0.69391099  0.066666667    1.2440147        1e-10 1.7347775e-11    5.7644281    2.4759574    30.403515 0.0085967823  -0.18046158  0.017842691   0.17808239   -1.5187374    1.2716472 
  420000     4.126966    1.2489045    2.8780615  -0.21516995   0.83269181    1.0022284   0.72718024   -1.2465374            1    1.5310523    2.1583503    2.1706836   0.26412304  0.022940629  -0.13353595 -0.034432881    1.3775808    1.3992321   0.69355163  0.066666667    1.2379219        1e-10 1.7338791e-11    5.7674149    2.5194141    30.403515  0.003042342  -0.20654526 0.0063753072   0.17206273   -1.0442831   -1.4718734 
  421000    4.1763588     1.277187    2.8991718  -0.21661884   0.85154882    1.0096362   0.75317567   -1.2465374            1    1.6353394    2.2540484    2.2243704   0.42759924 0.0095056629  0.033195715  0.063850097    1.4763815    1.5025447   0.70100153  0.066666667    1.2406876        1e-10 1.7525038e-11    5.7061217    2.5074383    30.403515 -0.003597434  -0.17604042 -0.0040974465   0.18950398   -2.6196134  -0.29954335 
  422000    4.1509952    1.2471391    2.9038562  -0.21483427   0.83151472    1.0020444   0.72538399   -1.2465374            1    1.6516948    2.2481191    2.2466283   0.46033704 0.00073810837 -0.029756053  0.011099674    1.4986024    1.5198987   0.69494695  0.066666667    1.2491441        1e-10 1.7373674e-11     5.755835    2.4722295    30.403515 -0.0043265299  -0.21303061  0.005635751   0.18883057   0.75010383 0.0056739004 
  423000    4.1559173    1.2524235    2.9034938  -0.22845092   0.83503807    0.9896908   0.73880255   -1.2465374            1    1.4715435    2.1161187    2.1055363   0.19297569 -0.010574213 0.0075418886 -0.00088439527    1.3156191    1.3413723   0.70512529  0.066666667    1.2574518        1e-10 1.7628132e-11    5.6727508    2.4849476    30.403515 -0.015128798  -0.20198883  0.012211455   0.18540703   0.18688106  -0.40543871 
  424000    4.1619637    1.2622991    2.8996645  -0.21369316   0.84162253    1.0113299   0.73600603   -1.2465374            1    1.7117808    2.3065567    2.3102152   0.51857048 0.00073048942  0.021025956  0.027974422    1.5564466    1.5787634    0.7064446  0.066666667    1.2581252        1e-10 1.7661115e-11    5.6621567    2.4915001    30.403515 -0.00084747881  -0.18556914 0.0089680847   0.20479395   0.14786737   0.55865115 
  425000    4.1843022     1.283456    2.9008462  -0.20619554   0.85572859    1.0084719    0.7606866   -1.2465374            1    1.5535379    2.1996072    2.1744548   0.28655158 -0.0013647722  0.033135962  0.062395228    1.3929948    1.4208964   0.70560458  0.066666667    1.2557604        1e-10 1.7640115e-11    5.6688974    2.5007279    30.403515 -0.0050185219  -0.19220412 -0.025832652   0.20609414   0.01093628  -0.33205036 
  426000    4.1501127    1.2492385    2.9008742  -0.21253498   0.83291448   0.98204557   0.74011969   -1.2465374            1    1.6476909    2.2409472    2.2551504   0.44697517 0.0049420243  0.027431711 -0.0085779215    1.4914885    1.5185252   0.70309165  0.066666667    1.2416499        1e-10 1.7577291e-11    5.6891587    2.4839915    30.403515 -0.00094100855   -0.2088288 -0.012179795    0.1997517   0.47066851    1.3845984 
  427000    4.1898766    1.2737954    2.9160811  -0.21321965   0.84928753   0.99637226   0.75777088   -1.2465374            1    1.4082647    2.0715971    2.0709394  0.082257685 -0.019388659  0.059144888 -0.012409474    1.2483371    1.2772147   0.70182557  0.066666667    1.2425098        1e-10 1.7545639e-11    5.6994218    2.5064742    30.403515 -0.010126881  -0.22204349 -0.0064051117   0.18891661  0.082222176   -2.0481584 
  428000    4.1614872    1.2688479    2.8926392  -0.21466059   0.84598886   0.98586582   0.75896354   -1.2465374            1    1.5694789    2.1901718    2.2175593   0.30070548 0.0059082314 -0.043795361  0.025685333    1.4092995    1.4398107   0.70751433  0.066666667    1.2326357        1e-10 1.7687858e-11    5.6535958    2.4931056    30.403515 0.00058263026  -0.16294883 0.0031815237   0.19867753  -0.74756348  -0.57497921 
  429000    4.1865455    1.2683622    2.9181833  -0.22862957   0.84566501   0.98125837    0.7613092   -1.2465374            1    1.5412501    2.1608013    2.1526972   0.31025176 0.0085331566  0.014198027  0.021586142    1.3805757    1.4121879   0.71236242  0.066666667    1.2409484        1e-10 1.7809061e-11    5.6151193    2.5059762    30.403515 0.00092049598  -0.20311135 0.0091080702   0.18407107  -0.58335271    3.5001833 
  430000    4.1822818     1.263135    2.9191468  -0.21206968   0.84217984   0.99250181   0.74864451   -1.2465374            1    1.6108488     2.239717    2.2168923   0.37593721  0.021573267 -0.012198044  0.012035707    1.4528473    1.4803079    0.6984397  0.066666667    1.2295473        1e-10 1.7460992e-11    5.7270513     2.472834    30.403515 0.0018533742  -0.19651588 -0.00016821455   0.19486285   -0.1713439  -0.31538646 
  431000    4.1696978    1.2613038     2.908394  -0.21592476   0.84095888   0.99029176   0.74803974   -1.2465374            1    1.4984649    2.1045959      2.14687   0.24392893 0.0058306135 -0.040070912 -0.0081683807     1.340591    1.3682146   0.71223828  0.066666667    1.2379358        1e-10 1.7805957e-11     5.616098    2.5079233    30.403515 -0.0060783556  -0.16984958  0.001207107   0.19789609  0.081854835    1.5795878 
  432000    4.1634793    1.2643786    2.8991006  -0.20621823   0.84300901    1.0090933   0.73965068   -1.2465374            1    1.5257907    2.1533789    2.1714594   0.25253388 0.00032303471  0.030371079 -0.079174513    1.3696873    1.3930675   0.69440957  0.066666667    1.2392068        1e-10 1.7360239e-11    5.7602893    2.4881074    30.403515 -0.0063254918  -0.18702542 -0.010214873    0.1647968    1.1272994  0.046377885 
  433000    4.1714368    1.2629784    2.9084584  -0.20888038   0.84207542   0.99860356   0.74467236   -1.2465374            1    1.5717225     2.192691    2.2024114   0.32006522  0.018959014  0.023057673  0.046584875    1.4145593     1.440379    0.7019046  0.066666667    1.2411821        1e-10 1.7547615e-11    5.6987801    2.4966889    30.403515 0.0078505538  -0.21885785  0.014265132   0.20012533    1.8945601    1.0073076 
  434000    4.1631479    1.2681147    2.8950332  -0.21119196   0.84549998   0.99745057   0.75095024   -1.2465374            1    1.6484354    2.2743678    2.2572481   0.41369032  0.011687474 0.0046661578 -0.011320112    1.4899472    1.5172435   0.70615763  0.066666667    1.2407791        1e-10 1.7653941e-11    5.6644577    2.5060502    30.403515 0.0087057097  -0.15565175 0.00029783173   0.18610354     1.782277 -0.0074710223 
  435000    4.1875172    1.2741605    2.9133568   -0.2147948   0.84953092    1.0051904   0.75267051   -1.2465374            1     1.518529    2.1472687    2.1419372   0.26638114  0.016415736  0.033400643 -0.0053010148    1.3596778    1.3863192    0.7019514  0.066666667    1.2467636        1e-10 1.7548785e-11    5.6984002    2.5075374    30.403515  0.014337439  -0.17754844 -0.0065081974   0.18711022    1.6954013 -0.069884147 
  436000    4.1672352    1.2586937    2.9085414  -0.21930651   0.83921867   0.99829635   0.74022622   -1.2465374            1    1.5366295    2.1559647    2.1913666   0.26255725 -0.0038297893  0.083375938  0.015419143    1.3804047    1.4053264   0.70314523  0.066666667    1.2505327        1e-10 1.7578631e-11    5.6887252    2.4909883    30.403515 -0.012445131   -0.1585561 -0.011489875   0.21628159  0.021698442   0.48198818 
  437000    4.1537541    1.2539131     2.899841  -0.21528126   0.83603126   0.99667488   0.73606237   -1.2465374            1     1.773536    2.3509365    2.3411908   0.62848078  0.015499605  0.085977395 -0.007245364    1.6181899    1.6424462   0.70050353  0.066666667    1.2517093        1e-10 1.7512588e-11    5.7101782    2.4979829    30.403515 -0.016389018  -0.17765312 -0.014557766   0.17792738  -0.87852168   0.67178585 
  438000    4.1892375    1.2756478    2.9135896  -0.21435687    0.8505226   0.99190084   0.76256246   -1.2465374            1    1.5082656    2.1670661    2.1384779   0.21925284  0.016908802  0.085473621   0.03401093    1.3473267    1.3778037   0.70510708  0.066666667    1.2516685        1e-10 1.7627677e-11    5.6728972    2.5026698    30.403515 0.00088563874  -0.18162821 -0.028154263   0.17569038  -0.50513103  0.099368167 
  439000    4.1610615    1.2738199    2.8872416  -0.21748579   0.84930382    1.0055591   0.75207202   -1.2465374            1    1.5895079    2.2034647    2.2180596   0.34699939  0.027072567   0.14206245  -0.01034039     1.430783    1.4572495   0.70375168  0.066666667    1.2546436        1e-10 1.7593792e-11    5.6838231    2.4816062    30.403515 -0.0077855002  -0.18181986 -0.0035289673    0.1694803   -1.3181761   0.26909011 
  440000    4.1802139     1.277663    2.9025509  -0.21830146    0.8518662    1.0166204   0.74933832   -1.2465374            1    1.5996883    2.2224782    2.2209894   0.35559731 0.0047452262   0.10638557 0.0013778853    1.4415403    1.4659751   0.70661849  0.066666667    1.2453122        1e-10 1.7665462e-11    5.6607633    2.4844571    30.403515 -0.0052626075  -0.21491729 0.0089161656   0.21754226   -1.5360246  0.017167474 
  441000    4.1897006    1.2715925    2.9181081  -0.21260962   0.84781876   0.99692979   0.75503906   -1.2465374            1     1.625173    2.2408548    2.2549744   0.37968972   0.01602518  0.083372376 -0.0064994057    1.4658219    1.4940496   0.70631403  0.066666667    1.2490988        1e-10 1.7657851e-11    5.6632034    2.4796767    30.403515 0.0083431657  -0.19050908 -0.0077941198   0.14768481   -2.0743098    3.4155851 
  442000    4.1509952    1.2577638    2.8932314  -0.22079785   0.83859861   0.99097551   0.74378202   -1.2465374            1    1.6372513    2.2322843    2.2345649   0.44490458 -0.0095914627 -0.020730339 0.0050725525    1.4802759     1.506911   0.70946223  0.066666667    1.2437595        1e-10 1.7736556e-11    5.6380732    2.4771504    30.403515 0.0035120166  -0.18792327 -0.0026011095   0.20084487  -0.87381351    4.4273702 
  443000    4.1812151    1.2524111    2.9288039  -0.22194937   0.83502982   0.99307723   0.73667872   -1.2465374            1    1.5610612    2.1808929      2.19568   0.30661057 -0.0061906434 -0.024080646 -0.0066297356     1.405585    1.4304445   0.70529817  0.066666667    1.2450345        1e-10 1.7632454e-11    5.6713603    2.5177887    30.403515 -0.0065541911  -0.17118131 0.0046627919   0.18943252   0.50482923    0.9715035 
  444000    4.1916483    1.2646136    2.9270347  -0.21073744   0.84316568    1.0140835   0.73679513   -1.2465374            1    1.6651017    2.2567917    2.2588258   0.47968766  0.010627326  0.052510258  0.013754145     1.509601    1.5317221   0.70440508  0.066666667    1.2442433        1e-10 1.7610127e-11    5.6785507     2.488974    30.403515 0.0017213027  -0.18557207 0.0039314891   0.22027186 -0.032798532    1.8047046 
  445000    4.1854792    1.2731254    2.9123538  -0.21711118   0.84884077    1.0021088   0.75347056   -1.2465374            1    1.5206999    2.1754956    2.1422557   0.24434833 -0.006336962  0.039149375  0.029337583    1.3616798    1.3888953   0.70682513  0.066666667    1.2532389        1e-10 1.7670628e-11    5.6591083    2.4916892    30.403515 -0.0075804811  -0.18024075 0.00083074049   0.21620785 -0.045141616   -1.0918387 
  446000    4.1845052    1.2792775    2.9052277  -0.21557656   0.85294264    1.0108376   0.75468962   -1.2465374            1    1.5917428     2.237404    2.1996774   0.33814679 -0.0040995139  0.055639558 0.00080295228    1.4324654    1.4587901    0.7076994  0.066666667    1.2522462        1e-10 1.7692485e-11    5.6521173    2.4909522    30.403515 0.0065443385  -0.21533835 0.0032118808   0.16732109   -1.4497326  -0.35143413 
  447000    4.1833897    1.2833251    2.9000646  -0.20899196   0.85564131   0.99857171   0.76671475   -1.2465374            1    1.5286269    2.1710328    2.1680617   0.24678624  0.016894027 0.0098924441  -0.03039928    1.3668116    1.3972876   0.70233709  0.066666667    1.2467386        1e-10 1.7558427e-11    5.6952709    2.4950926    30.403515 -0.006091742  -0.20206334 0.0017162962   0.20375917   -1.0157979   -1.2524885 
  448000    4.1663362    1.2653698    2.9009664  -0.21735317   0.84366984   0.99209154   0.75131901   -1.2465374            1    1.6181501    2.2219613    2.2201778   0.41231123  0.010062639  0.003434441 -0.026106873    1.4595841    1.4876631   0.70345257  0.066666667    1.2490055        1e-10 1.7586314e-11    5.6862398    2.4728667    30.403515 0.0070989283  -0.19170988 0.0007431861   0.18571439   -1.6819109    1.9122478 
  449000    4.1582924    1.2679025    2.8903899  -0.22400804   0.84535846     1.004247   0.74648497   -1.2465374            1    1.6075853    2.2320241    2.2158857   0.37484614 -0.0064003235 -0.0066528362   0.04141198    1.4500395    1.4754995   0.70678329  0.066666667    1.2608132        1e-10 1.7669582e-11    5.6594433    2.4860609    30.403515 -0.0055251731   -0.1708587 -0.010789072   0.17521707    1.3910561   -2.3052839 
  450000    4.1668087    1.2612685    2.9055401  -0.22039441   0.84093537   0.98992032   0.74823305   -1.2465374            1    1.4949313    2.1295488    2.1564703   0.19877478   0.00169961 -0.037413245  0.044269662    1.3370166    1.3647299   0.70433531  0.066666667    1.2642888        1e-10 1.7608383e-11    5.6791132    2.4927176    30.403515 0.00044620561  -0.17506494  0.012573137   0.23028422   0.78382486 -0.047062487 
  451000    4.1215992    1.2484047    2.8731945  -0.22132325   0.83235858    1.0016258    0.7270148   -1.2465374            1    1.6251267    2.2403521    2.2274211   0.40760704 -0.0065447222 -0.0099866884 -0.0046574532    1.4716902    1.4933857    0.7031568  0.066666667    1.2653355        1e-10 1.757892e-11    5.6886316    2.4858134    30.403515 -0.0031785735  -0.20521608 0.0074602508    0.1917305    0.2060125  0.075091585 
  452000    4.1995287    1.2957159    2.9038127  -0.21821337   0.86390276    1.0038505   0.77683645   -1.2465374            1     1.561819    2.1725661    2.2169852   0.29590568 0.0013112963 -0.015182679 0.00022644227    1.3978675    1.4297854   0.70788949  0.066666667    1.2669182        1e-10 1.7697237e-11    5.6505995    2.5172953    30.403515 0.00073491042  -0.16438685 0.0086799624   0.16501906 -0.096235721     1.173794 
  453000    4.1497772    1.2549815    2.8947957  -0.21724353   0.83674359    1.0058053   0.73152864   -1.2465374            1    1.7120842    2.3121255    2.3023741   0.52175308 -0.016558318  0.072854901  0.043534527     1.557695    1.5797935   0.70087819  0.066666667    1.2703645        1e-10 1.7521955e-11    5.7071258    2.4872374    30.403515 -0.0072795034   -0.1895098 0.00018344296   0.16699854   -1.0611397      3.59122 
  454000    4.1542856    1.2601422    2.8941434  -0.21615999   0.84018439    1.0045173   0.73791705   -1.2465374            1    1.6123338     2.218847     2.215298   0.40285647 -0.011047065  0.041091059  0.073340932    1.4565963    1.4802125   0.69942108  0.066666667    1.2622628        1e-10 1.7485527e-11    5.7190155    2.4775861    30.403515 -0.0068754286   -0.1742544  0.001282461   0.20839123  -0.87612285    1.4781798 
  455000    4.2003602      1.28446    2.9159002  -0.21161068   0.85639797    1.0121327   0.75949182   -1.2465374            1    1.4626315    2.1287233     2.110502   0.14866925   0.01589105 -0.069801303   0.01544188    1.3023406    1.3295085   0.69767257  0.066666667     1.274163        1e-10 1.7441814e-11    5.7333485    2.4852405    30.403515  0.016546993  -0.19507499 -0.0036435133   0.19497765   -0.6353017    1.6373954 
  456000    4.1785338    1.2691913    2.9093424  -0.21823383   0.84621779    1.0069222   0.74621279   -1.2465374            1    1.6563331     2.261782    2.2512455   0.45597193 -0.017195606 -0.095160317 -0.064735484    1.4988448    1.5238955   0.70294289  0.066666667    1.2548664        1e-10 1.7573572e-11    5.6903627    2.5009897    30.403515 -0.0059486345  -0.20224663  0.015086458   0.17933444   0.21606364    3.2313721 
  457000    4.1785973    1.2708979    2.9076995  -0.21542639   0.84735564   0.99720817   0.75411375   -1.2465374            1    1.5886732    2.2149652    2.2090045   0.34204993 0.0044454555 -0.019647598  -0.07658607    1.4295174    1.4575132   0.69793432  0.066666667    1.2558758        1e-10 1.7448358e-11    5.7311983    2.4770467    30.403515 0.0049202702  -0.22385653 -0.0061061981    0.1881935   -1.1663185    2.7206614 
  458000    4.1831536    1.2882439    2.8949098  -0.21923148   0.85892085    0.9976379   0.77262064   -1.2465374            1    1.6655676     2.268023    2.2722911   0.45638882 -0.0039130361 -0.097661317  0.035619818    1.5025059    1.5343511    0.6989714  0.066666667    1.2561526        1e-10 1.7474285e-11    5.7226948    2.4749618    30.403515 0.0032555633  -0.21629689 -0.014856506   0.21205089  -0.05156586     1.220699 
  459000    4.1581665    1.2685715    2.8895951  -0.21349969   0.84580451     1.005565   0.74638771   -1.2465374            1    1.6388606    2.2480409    2.2331774    0.4353634 0.0099002165  -0.13063796 -0.023595706    1.4813353    1.5066014   0.70090467  0.066666667      1.26531        1e-10 1.7522617e-11    5.7069102    2.4871948    30.403515 -0.003594325  -0.19517326 0.0031106843   0.20917494    1.7935361    0.1872731 
  460000     4.139851    1.2648084    2.8750425  -0.23128857   0.84329555    1.0067882    0.7415524   -1.2465374            1     1.593025    2.2178045    2.2038656   0.35740487 -0.00032473433 -0.082825105 -0.018686315    1.4365202     1.460605   0.70524327  0.066666667     1.258459        1e-10 1.7631082e-11    5.6718017    2.4863198    30.403515 0.0099415876   -0.1555283 0.0084267682   0.20157984   0.76014292     2.847035 
  461000     4.178553    1.2772416    2.9013114  -0.21982794   0.85158522    1.0027223   0.75754353   -1.2465374            1    1.5268726    2.1603808    2.1590723   0.26116471  0.018249764    -0.104744 -0.032783091    1.3669929    1.3949873   0.70799168  0.066666667    1.2510131        1e-10 1.7699792e-11    5.6497839    2.4983902    30.403515 0.0064966435  -0.18675749 -0.0024358196   0.20264059    2.3905386   -1.0002072 
  462000    4.1826002    1.2799754    2.9026248  -0.22058346   0.85340797    1.0073783   0.75760088   -1.2465374            1    1.6853337    2.2708626    2.2851463   0.49999211  0.020187301 -0.051227782 -0.023580824    1.5254419     1.552836   0.70037047  0.066666667    1.2525457        1e-10 1.7509262e-11    5.7112631    2.4876227    30.403515 0.0084788786  -0.22846717  -0.01251596   0.18437041      1.40746  0.098407548 
  463000    4.1624786    1.2554902    2.9069884  -0.21107172   0.83708273   0.98136669   0.74730941   -1.2465374            1    1.4676932    2.1143082    2.1239512   0.16482006 -0.0064828508 -0.0025623021   0.03473313    1.3099734    1.3386168   0.69696479  0.066666667    1.2487962        1e-10 1.742412e-11    5.7391708    2.4811871    30.403515 -0.0059625715   -0.2168888 -0.001694208    0.1908445   0.55316519    -1.582161 
  464000    4.1842969    1.2627004    2.9215965  -0.20990099   0.84189005    0.9892207   0.75021886   -1.2465374            1    1.6434505    2.2495161    2.2518364   0.42899916 -0.019061381 -0.00063996338  -0.02098631    1.4851167    1.5133411   0.69446508  0.066666667    1.2389433        1e-10 1.7361627e-11    5.7598289     2.497358    30.403515 -0.0075208556  -0.19290319 -0.00021333946   0.20506773  -0.74100487    2.4600274 
  465000    4.1661272    1.2568285    2.9092987  -0.21259888   0.83797502   0.98457648   0.74675759   -1.2465374            1    1.5497465    2.1546229    2.1763775    0.3182391 0.0002815413 -0.038648306 0.0040897465    1.3921432    1.4202479    0.7006024  0.066666667    1.2342784        1e-10 1.751506e-11    5.7093724    2.5161492    30.403515  0.010242756  -0.17515161 0.00029065697   0.17277185  -0.73436629   0.66762369 
  466000    4.1913832    1.2822359    2.9091473  -0.22083815   0.85491512    1.0061838     0.760792   -1.2465374            1    1.5855362    2.2091812    2.1906869   0.35674036  -0.01281451  -0.12183433  -0.02707126    1.4249709    1.4531956   0.69756443  0.066666667     1.233447        1e-10 1.7439111e-11    5.7342373    2.4903352    30.403515 -0.0039533498  -0.15403395 -0.00049477594   0.17638688  -0.66222557   0.82241348 
  467000     4.159283    1.2635455    2.8957375  -0.20848915    0.8424535    1.0066338   0.74028164   -1.2465374            1    1.5135233    2.1664142    2.1604813   0.21367452 0.0043187353 -0.031190481  0.091001521    1.3572868    1.3811236   0.70080011  0.066666667    1.2346077        1e-10 1.7520003e-11    5.7077616    2.4765378    30.403515 0.0055091855  -0.14717873 -0.011435105   0.16796566  -0.57778977    1.4275161 
  468000    4.1607886    1.2614292    2.8993594  -0.21837148   0.84104253    1.0091117   0.73644689   -1.2465374            1    1.5909934    2.2042942    2.2203821   0.34830378 -0.015435765  -0.12879394 -0.049664728    1.4355661    1.4582677   0.70011984  0.066666667    1.2441244        1e-10 1.7502996e-11    5.7133076    2.5133622    30.403515 0.0035238069  -0.17405692 0.0076743927   0.16560899     1.539624  -0.22691918 
  469000    4.1971227     1.293344    2.9037787  -0.21974029   0.86232128     1.039099   0.75230208   -1.2465374            1    1.5099019      2.14134    2.1710013   0.21736453 -0.0038668735 -0.040101258 -0.012218436    1.3511284    1.3732321   0.69751493  0.066666667    1.2378669        1e-10 1.7437873e-11    5.7346443    2.4888962    30.403515 -0.014204328  -0.18723707  0.011855421   0.18127919  0.016081753   0.58586961 
  470000    4.1398893    1.2706801    2.8692092  -0.21916426   0.84721043    1.0042655   0.74947984   -1.2465374            1    1.5412228    2.1876611    2.1795923   0.25641508 -0.023336997  -0.13661403  0.044651208     1.383045    1.4091346   0.69867292  0.066666667    1.2400602        1e-10 1.7466823e-11    5.7251396     2.477797    30.403515 0.0036655594  -0.20972438 -0.0046291978   0.15210921   0.61748903  -0.36246096 
  471000    4.1583153    1.2615547    2.8967606  -0.21910407   0.84112617    1.0099613   0.73605316   -1.2465374            1    1.6133606     2.237572    2.2146958   0.38781414  0.004844254   -0.1111368  0.014481053    1.4580165    1.4805233   0.70399758  0.066666667     1.240941        1e-10 1.7599939e-11    5.6818377     2.517538    30.403515 -0.0068462822  -0.20119866  0.003783526   0.17718831   0.10642788    2.0503045 
  472000    4.1909856    1.2677938    2.9231918  -0.20933989     0.845286    1.0109685   0.74217848   -1.2465374            1    1.4944881    2.1493982    2.1224879   0.21157798 -0.011494176  -0.11072691 0.0094343186    1.3378512    1.3615182   0.69537821  0.066666667    1.2491532        1e-10 1.7384455e-11    5.7522654    2.4933402    30.403515 0.0092111848  -0.21558276 -0.0015794502   0.19257872  -0.62876066   0.67830928 
  473000    4.1841263    1.2708755    2.9132508  -0.22016786   0.84734071   0.98973634   0.75874598   -1.2465374            1    1.6921115    2.2958191    2.2668261   0.51368933 -0.0029060224  -0.16456284  0.016697622    1.5319781    1.5619343   0.70359958  0.066666667    1.2569034        1e-10 1.758999e-11    5.6850517    2.4978341    30.403515 0.0093129988  -0.16923694  -0.01431573   0.19488569   0.33932225    2.3846181 
  474000    4.1798563    1.2676957    2.9121605  -0.21558525   0.84522063   0.98785849   0.75647458   -1.2465374            1    1.6858076    2.2764883    2.2916433   0.48929113 -0.00045782751  -0.02860476 -0.012131614    1.5261535    1.5558773   0.70012388  0.066666667    1.2602176        1e-10 1.7503097e-11    5.7132747     2.489189    30.403515 -0.019942867  -0.22615249 0.0090292759   0.20446432   0.36244836    4.6873439 
  475000    4.1517007    1.2316098    2.9200909   -0.2053848   0.82116076   0.97533711   0.72521972   -1.2465374            1    1.5659082    2.1899629    2.1874758   0.32028588 -0.0079844551 0.0034088852   0.02614373    1.4128505    1.4376248    0.7051331  0.066666667    1.2508244        1e-10 1.7628327e-11    5.6726879    2.5062487    30.403515 -0.001619183  -0.17117566 0.0069105924   0.19278723   -0.5863303    1.8077267 
  476000    4.1955247    1.2776467     2.917878  -0.20673369   0.85185535    1.0188943   0.74790359   -1.2465374            1    1.6436368    2.2607088    2.2424116   0.42778994 -0.0067996338  -0.11987484  0.030078286    1.4857916    1.5096245   0.70029178  0.066666667    1.2507125        1e-10 1.7507295e-11    5.7119048    2.4882341    30.403515   0.01005713  -0.21710243 0.0051382304   0.17098586    1.3959547    2.6661155 
  477000    4.1902066    1.2698768    2.9203298  -0.20583811   0.84667486   0.99239468   0.75600837   -1.2465374            1     1.527596    2.1616613    2.1466536   0.27447315 -0.017475698 -0.086460202  0.011439891    1.3680403    1.3970691   0.70074367  0.066666667    1.2625561        1e-10 1.7518592e-11    5.7082214    2.4873482    30.403515 0.0048386107  -0.18921538 -0.00013536551   0.22041819   0.18503292 -0.093804977 
  478000    4.1659626    1.2727137    2.8932489  -0.21282658   0.84856632   0.99007042   0.76052741   -1.2465374            1     1.700339    2.2765275    2.2889022    0.5355872 -0.0012580797 -0.077113071 -0.0087706366    1.5398295    1.5701178   0.69766127  0.066666667    1.2723112        1e-10 1.7441532e-11    5.7334414    2.4968269    30.403515 -0.00084868015  -0.20299131 -0.0043779863   0.18455567 -0.043360843    4.9141749 
  479000    4.1891032    1.2766878    2.9124154   -0.2185631     0.851216    1.0067023   0.75446381   -1.2465374            1    1.5326684     2.167881    2.1563329   0.27379138 -0.0082121744  -0.12308506 -0.017431767    1.3734387    1.4002597   0.70101345  0.066666667    1.2656867        1e-10 1.7525336e-11    5.7060246    2.5165322    30.403515 -0.0043422094  -0.20229326  0.010239484   0.16842788   0.71171375    1.4086474 
  480000    4.1869632    1.2775048    2.9094584  -0.20323341   0.85176071    1.0057317   0.75595296   -1.2465374            1    1.6399357    2.2453928     2.264728   0.40968621 0.0071743803 -0.061671391 -0.070794458    1.4803917    1.5076546   0.70255732  0.066666667    1.2633572        1e-10 1.7563933e-11    5.6934856    2.4975823    30.403515 0.0022151305   -0.2016959 0.00094011776   0.18606915   -1.0955681    1.7828118 
  481000    4.1546258    1.2634988    2.8911271  -0.22573795   0.84242237   0.98023873    0.7566806   -1.2465374            1    1.6315227    2.2223271    2.2530622   0.41917895  0.013183536  -0.11900888  0.043150795    1.4718252    1.5025947   0.69579902  0.066666667    1.2598405        1e-10 1.7394975e-11    5.7487865     2.506058    30.403515 -0.0021265375  -0.19836917 -0.0026819356   0.18445242   0.16040028    1.9235272 
  482000    4.1894768    1.2785118    2.9109649  -0.21645328   0.85243215    1.0176341   0.74962531   -1.2465374            1    1.6047761    2.2223009    2.1823317   0.40969567 -0.0035044615 -0.014970583  0.036304868    1.4465675    1.4709295   0.69714628  0.066666667    1.2658545        1e-10 1.7428657e-11    5.7376767    2.5081324    30.403515 0.0035359816  -0.19264694 -0.0066796968   0.20140379   0.63937332    1.8334707 
  483000    4.1828378    1.2900293    2.8928085  -0.21569964   0.86011125    1.0059597   0.76936692   -1.2465374            1    1.5372199    2.1831844    2.1644131   0.26406218  0.018227252  0.036901768 -0.0081676171    1.3748449    1.4049088   0.70360861  0.066666667    1.2568994        1e-10 1.7590215e-11    5.6849787    2.4995427    30.403515 0.0065142131  -0.20328863 -0.0044429181   0.22827526  -0.26247489   0.34352649 
  484000    4.1604657    1.2721907     2.888275  -0.21930074   0.84821762   0.99391181   0.75756737   -1.2465374            1     1.507997    2.1502333      2.14302   0.23073789 0.0087365753  0.048408813  0.029783715    1.3481123    1.3772706   0.70245251  0.066666667    1.2651482        1e-10 1.7561313e-11    5.6943351     2.504127    30.403515 0.00059761813  -0.16985544 -0.0030822965   0.17277762  -0.56327525   -2.0308301 
  485000    4.1586343    1.2633641    2.8952702  -0.20806251   0.84233258   0.99018571   0.75033585   -1.2465374            1    1.6417498    2.2428276    2.2659468   0.41647494 -0.0023668439  0.087148807  0.006340115    1.4833913    1.5115134   0.69458526  0.066666667    1.2624302        1e-10 1.7364632e-11    5.7588322    2.5144253    30.403515 -0.006890556  -0.18721718 0.0016693076   0.19763133  -0.71883248    3.5530679 
  486000    4.1742689    1.2717233    2.9025456  -0.21135328     0.847906    1.0089227   0.74770665   -1.2465374            1    1.6898246    2.2842447    2.2703543   0.51487461 -0.0080897928  0.053490348 0.0029264553     1.532021    1.5571238   0.69696834  0.066666667    1.2560984        1e-10 1.7424209e-11    5.7391416    2.4844661    30.403515 -4.0493324e-05  -0.23199985 -0.018680637   0.21411044    -1.885985    1.5416511 
  487000    4.1479831    1.2597253    2.8882577  -0.21676798   0.83990646    1.0006666    0.7398656   -1.2465374            1    1.5160516     2.154057    2.1395829     0.254515 -0.0080861908   0.10279183  -0.00659751    1.3599029    1.3844368   0.70037057  0.066666667    1.2538553        1e-10 1.7509264e-11    5.7112622    2.4938514    30.403515 0.0037570755   -0.1948147 -0.0058064646   0.21183973   -2.4142371  -0.17934116 
  488000    4.1754631    1.2738521    2.9016111  -0.21575388   0.84932532    1.0021565   0.75422744   -1.2465374            1    1.5843879    2.1845321    2.2189951   0.34963669  0.010098104  0.071155295  -0.07437524    1.4252081    1.4525771   0.69948539  0.066666667    1.2573138        1e-10 1.7487135e-11    5.7184897    2.4864439    30.403515 -0.0013665038  -0.19308634 -0.0068104723   0.20871374    -1.518921   0.96596128 
  489000    4.1764929    1.2666548    2.9098381  -0.21539642   0.84452662    0.9939747    0.7515363   -1.2465374            1    1.6251048    2.2478661    2.2142485   0.41319989 -0.0055940847   0.11778472  0.056720125     1.466493    1.4943701    0.6996862  0.066666667    1.2658833        1e-10 1.7492155e-11    5.7168485    2.4921673    30.403515 0.0016803556   -0.2117737 -0.004379101    0.2087133   -1.0743449    2.6831503 
  490000    4.2023945    1.2814842    2.9209103  -0.21424643   0.85441393   0.99380154   0.76769505   -1.2465374            1    1.5037823    2.1592138    2.1516892   0.20044375 -0.006593726  0.023556117 -0.016867106    1.3417601    1.3730703   0.70224594  0.066666667    1.2615912        1e-10 1.7556149e-11    5.6960101    2.4811231    30.403515 -0.0017070957  -0.19170665 -0.011897981   0.16916486 -0.039238536    2.0709449 
  491000    4.1785872    1.2689862     2.909601  -0.22575377   0.84608104    1.0049685   0.74720835   -1.2465374            1    1.5443406    2.1843512    2.1547384   0.29393232 0.00010456939  0.047888441 -0.023856898    1.3866422      1.41216    0.7091691  0.066666667    1.2780846        1e-10 1.7729228e-11    5.6404037    2.4959136    30.403515 0.0094737525  -0.17741451 -0.0074854716   0.19105343   0.81548266    2.7800202 
  492000    4.2030551    1.2921896    2.9108654  -0.20453638   0.86155164    1.0182723   0.76403199   -1.2465374            1     1.660952    2.2321698    2.2959719   0.45471432 -0.0021651689 0.0012262419  0.048323656    1.4997029    1.5270215   0.70384742  0.066666667    1.2772537        1e-10 1.7596185e-11    5.6830499    2.5171736    30.403515 0.0057741731  -0.19015805 0.0046628008   0.17180945   0.52973023    2.9228309 
  493000    4.1410008    1.2594323    2.8815685  -0.21417271   0.83971109   0.99118659   0.74545643   -1.2465374            1    1.5200013     2.158275    2.1419303   0.25979864 -0.014234337  0.026606668  0.028071418    1.3626726    1.3896333   0.69831296  0.066666667    1.2898433        1e-10 1.7457824e-11    5.7280908    2.4685147    30.403515 -0.0055930791  -0.16819337  0.012582268   0.22286622  -0.31642982   -1.1465337 
  494000    4.1961058    1.2752337    2.9208721  -0.20205956   0.85024648   0.99959177   0.75732121   -1.2465374            1    1.5498334     2.184966     2.159907   0.30462725 -0.0051066501 0.0084564391 -0.015103432    1.3900007    1.4183599    0.6985919  0.066666667     1.281481        1e-10 1.7464798e-11    5.7258035     2.477055    30.403515 -0.012454537  -0.19068466 0.0006770361   0.17409015   0.49070527    1.7659564 
  495000    4.1935044     1.283815    2.9096895  -0.20615792   0.85596793    1.0120721   0.75883149   -1.2465374            1    1.7320947    2.3302667     2.299024   0.56699344   0.01364324 -0.025098918  0.031180921    1.5719432    1.5989797   0.70122293  0.066666667    1.2706714        1e-10 1.7530573e-11      5.70432    2.4926372    30.403515 0.00023536139  -0.20531583  0.012025359   0.18484156   0.38731159    1.9519825 
  496000    4.1393971    1.2529286    2.8864686  -0.21873859   0.83537482   0.98774838   0.74055975   -1.2465374            1    1.5318715    2.1643989    2.1609735   0.27024195 0.0097837089  -0.10827256 -0.009231223    1.3755762    1.4019557    0.7023752  0.066666667    1.2834056        1e-10 1.755938e-11    5.6949619    2.4962823    30.403515 0.00059943012  -0.21621829 0.0085316837   0.18029727   0.17694205    2.3267231 
  497000     4.140816    1.2611151    2.8797008  -0.22558027   0.84083308   0.99719954   0.74353056   -1.2465374            1    1.5139591    2.1227996    2.1661196   0.25295819 -0.0072568894  -0.12074305  0.016907305    1.3570369    1.3828003    0.7070964  0.066666667    1.2760705        1e-10 1.767741e-11    5.6569373    2.4959588    30.403515 0.00080825919  -0.19315835 0.00039415659   0.18631294   0.45795877    2.2750987 
  498000    4.1917414      1.27864    2.9131014  -0.21410821   0.85251759   0.98758931   0.76848805   -1.2465374            1    1.6236384    2.2416356    2.2444475   0.38483205 -0.041286703   -0.1093692  0.032080387    1.4614489    1.4937436   0.70445441  0.066666667    1.2732074        1e-10 1.761136e-11    5.6781531    2.5010416    30.403515 0.0047211424  -0.16669045 0.0075547834   0.19303477   0.20899149  -0.39142363 
  499000    4.1895344    1.2598224     2.929712   -0.2180219   0.83997121   0.98536897   0.74950427   -1.2465374            1    1.4564453    2.0938896     2.109659   0.16578719  0.014374884  -0.05123146 -0.010586052    1.2982623    1.3268424   0.70756358  0.066666667    1.2660187        1e-10 1.7689089e-11    5.6532022    2.4973118    30.403515 -0.00096556757   -0.2112146 0.0015014708   0.18790729   0.52764913     2.018516 
  500000    4.1705777    1.2754717    2.8951059  -0.22301506    0.8504052   0.99101868   0.76292165   -1.2465374            1    1.6324485    2.2425871    2.2397853   0.41497316 0.0076424098  -0.12849951 0.0015072716    1.4714338    1.5021026   0.69908684  0.066666667    1.2703984        1e-10 1.7477171e-11    5.7217498     2.479998    30.403515  0.012785276  -0.20232992 -0.0033433647   0.19790472    1.9578563  0.064312684 
  501000    4.1836198    1.2498633    2.9337564  -0.21281009    0.8333311   0.97515364    0.7450911   -1.2465374            1     1.578594    2.1747767    2.1888777   0.37212754  0.025581727  -0.05009223 -0.086877787    1.4213424    1.4503348   0.69919017  0.066666667    1.2619148        1e-10 1.7479754e-11    5.7209043    2.4868225    30.403515  0.012744395  -0.19631633 0.00012872115   0.19247289    2.3879583   0.65967682 
  502000    4.1683834    1.2570386    2.9113448   -0.2150512   0.83811513   0.98826733   0.74468489   -1.2465374            1    1.6527117    2.2623256    2.2362844    0.4595251 0.0036532906 -0.073708663 -0.023737501    1.4955458    1.5227277   0.70172499  0.066666667    1.2597257        1e-10 1.7543125e-11    5.7002388    2.5054079    30.403515 -0.0046347058  -0.18377243 -0.00065784929   0.16758753    0.6653962  0.051441371 
  503000    4.1878662    1.2754581    2.9124081   -0.2231455   0.85039611   0.99389777   0.76111264   -1.2465374            1    1.5608118    2.1707945    2.1808921   0.33074888 -0.0034452148 -0.059646166 -0.065553978    1.4001789    1.4300872   0.70445924  0.066666667    1.2617357        1e-10 1.7611481e-11    5.6781142     2.500177    30.403515 0.0081519814  -0.22297412 -0.0041896922   0.18404267   0.41134455   -1.1238336 
  504000    4.1779876    1.2672813    2.9107063  -0.23470729   0.84494429   0.99163406   0.75367303   -1.2465374            1    1.6393595    2.2220516    2.2244962   0.47153073 -0.0026192858 -0.048711389 -0.020581183    1.4802967    1.5089327   0.70631892  0.066666667    1.2573787        1e-10 1.7657973e-11    5.6631642    2.4954409    30.403515 -0.00089537906   -0.1997816 0.0027643983   0.21184658    1.8560587  0.051838331 
  505000     4.186575    1.2933836    2.8931914  -0.21718923   0.86234769    1.0211449   0.76353403   -1.2465374            1    1.6334483    2.2460814     2.213635   0.44062863  0.004773646  -0.02928017  0.060878966    1.4723044      1.49914   0.70386711  0.066666667    1.2617821        1e-10 1.7596678e-11    5.6828909    2.4818088    30.403515 0.0043443561  -0.21530662 2.6930142e-05   0.19958139   0.48661248   0.63679225 
  506000    4.1488289    1.2570797    2.8917492  -0.21692789   0.83814253    1.0097887   0.73131716   -1.2465374            1    1.6622246      2.27471    2.2645583   0.44740541 0.0020096606  -0.03917458 -0.021453643      1.50788    1.5294099   0.70211902  0.066666667    1.2635971        1e-10 1.7552975e-11    5.6970398    2.4833959    30.403515 0.0061335157  -0.22385515 0.00031711425   0.19412765   0.29858157    2.4509821 
  507000    4.1791932    1.2705284    2.9086649  -0.21053435   0.84710926    1.0102886   0.74556202   -1.2465374            1    1.5794898     2.211808    2.2183116   0.30834984  0.004835028 -0.015427937  -0.04146352    1.4221388    1.4466094   0.70134248  0.066666667    1.2732244        1e-10 1.7533562e-11    5.7033476    2.4887547    30.403515 -0.00027897186   -0.2060766 -0.00011103707   0.17970758    0.3571857    0.5701682 
  508000    4.1428882    1.2692686    2.8736196  -0.21566946   0.84626932    1.0034997   0.74842932   -1.2465374            1    1.7164335    2.3393929    2.2981485    0.5117591 0.0057773645  -0.10359608 -0.027542732    1.5584774     1.584446    0.7011966  0.066666667    1.2725191        1e-10 1.7529915e-11    5.7045342    2.4923042    30.403515 -0.0052887934  -0.17635501 -0.012883314   0.17005804  -0.25204152    1.0976564 
  509000    4.1563324      1.27107    2.8852624   -0.2195997   0.84747038    1.0050655   0.74940332   -1.2465374            1    1.5874923    2.2129345    2.2224591   0.32708335   0.00399606 -0.073181529 -0.0022882362    1.4293306    1.4552989   0.70352366  0.066666667    1.2687289        1e-10 1.7588091e-11    5.6856652    2.4898013    30.403515 -0.0019651868  -0.19961464 -0.0053044901   0.21283005   -1.3068703   0.86026625 
  510000    4.1777541    1.2730059    2.9047482  -0.21931858   0.84876114    1.0158323    0.7447888   -1.2465374            1    1.5659329    2.2000865    2.1579382   0.33977407 0.0068836234 -0.069396156 -0.019511507    1.4087451    1.4323234   0.70831289  0.066666667    1.2685932        1e-10 1.7707822e-11    5.6472218    2.5008902    30.403515 -0.00025516448    -0.233849 0.0017096546   0.18923805   -1.1862359    1.6186805 
  511000    4.1739665     1.278303    2.8956635  -0.21383059   0.85229291   0.99226488   0.76520947   -1.2465374            1    1.6565201    2.2801093    2.2797366   0.40971437 -0.0017307172 -0.090699647 -0.031942574    1.4950225    1.5260103   0.71008662  0.066666667     1.264851        1e-10 1.7752165e-11    5.6331156    2.4863612    30.403515 -0.0032104024  -0.17208773 0.0065410816   0.20682572  -0.86491689    3.7340505 
  512000    4.1717672    1.2838916    2.8878756  -0.20853227   0.85601906    1.0049138   0.76337556   -1.2465374            1    1.5592177    2.1873344    2.2007539   0.28956479  0.001458187 -0.027415054  0.027961492    1.3981071    1.4270442   0.70779781  0.066666667    1.2616321        1e-10 1.7694945e-11    5.6513314    2.5171998    30.403515 0.0015398008  -0.20282392 0.0033084583   0.18727558    -0.428702  -0.44934517 
  513000    4.1764242    1.2760828    2.9003414  -0.21966107   0.85081261    1.0136998    0.7494481   -1.2465374            1    1.6248232    2.2463832    2.2129797   0.41510668 -0.016081657 0.0048824399  0.017041687    1.4666521    1.4914941   0.70954245  0.066666667    1.2662095        1e-10 1.7738561e-11    5.6374358    2.5017966    30.403515  0.012647721  -0.18180105 0.00026763327     0.224342  -0.30588424   0.94839652 
  514000    4.1686857    1.2731458    2.8955399  -0.22093942   0.84885441    1.0059167   0.75111962   -1.2465374            1    1.4879672    2.1262761    2.1069557   0.23066984 -0.011649306  0.064720434 -0.0046746909    1.3294433    1.3556618   0.69459235  0.066666667    1.2655293        1e-10 1.7364809e-11    5.7587735    2.4803664    30.403515 0.0001581504  -0.18609493 -0.0049822759   0.21318897  -0.73063979   -1.5790144 
  515000    4.1603832    1.2630719    2.8973113  -0.21687296   0.84213775     0.977038   0.75821327   -1.2465374            1    1.6332102    2.2299316    2.2566833   0.41301569 -0.0026481339   0.19609571  0.029838363    1.4731891    1.5047031   0.70335674  0.066666667    1.2651755        1e-10 1.7583919e-11    5.6870145    2.4915172    30.403515 0.0027133336  -0.17842627 0.0062414207   0.21239164    -1.220233    2.1857274 
  516000    4.1840814    1.2445911    2.9394903  -0.21833315    0.8298159   0.98656407   0.73227359   -1.2465374            1    1.6403151    2.2689733    2.2401062   0.41186592 -0.0097279498   0.21113067 -0.038210434    1.4857687    1.5105551    0.6982639  0.066666667    1.2715562        1e-10 1.7456597e-11    5.7284932    2.4837203    30.403515 0.0052634801  -0.18207802 -0.0066992607   0.16001551  -0.77432209    1.9370261 
  517000    4.1778298    1.2723755    2.9054543  -0.21506332   0.84834081   0.99529095   0.75690788   -1.2465374            1    1.6093488    2.2104321    2.2224362   0.39517818 -0.0078485457    0.1938166 -0.0092442596    1.4496033     1.478441   0.70333424  0.066666667    1.2725253        1e-10 1.7583356e-11    5.6871965    2.4832238    30.403515  0.004824231  -0.21578322 0.0083893764   0.17082045   -1.0972314    1.3202972 
  518000    4.1877018    1.2789506    2.9087512  -0.22205463   0.85272467    1.0113971   0.75398714   -1.2465374            1     1.446963    2.0713515    2.1138621   0.15567523  0.024579221   0.17902151 -0.037264704    1.2878338    1.3139367   0.70095991  0.066666667    1.2714241        1e-10 1.7523998e-11    5.7064605    2.4795916    30.403515 0.0072332478  -0.17561384 0.0012315112   0.15665187  -0.79044005  -0.20807228 
  519000    4.1981251    1.2867426    2.9113825  -0.21597511   0.85791989    1.0007449    0.7690594   -1.2465374            1    1.6391059    2.2579467    2.2400717   0.41929942 -0.0023171276  0.041417132  0.044417293    1.4767958    1.5074808    0.7003134  0.066666667    1.2797043        1e-10 1.7507835e-11    5.7117285    2.4748435    30.403515  0.013221874  -0.20051374 -0.0066266416    0.1915787  -0.90767572    2.8019714 
  520000    4.1939787    1.2738224    2.9201562  -0.20941773   0.84930554   0.99045772   0.76148608   -1.2465374            1    1.7382968    2.3109893    2.3264044   0.57749671 -0.014502061 -0.035270538 -0.033770338     1.577585    1.6080247   0.70151628  0.066666667    1.2747736        1e-10 1.7537907e-11    5.7019347    2.4914067    30.403515 0.0016443636  -0.14539236 0.0013605309    0.2047859   -1.4924912    3.1738297 
  521000    4.1413694    1.2557212    2.8856482  -0.22325518   0.83723676   0.99323448   0.74016342   -1.2465374            1     1.494295    2.1613831    2.1393865   0.18211546 -0.0093621081  0.013740495 -0.011444889    1.3380834    1.3636577    0.7067192  0.066666667    1.2690301        1e-10 1.766798e-11    5.6599566    2.4950627    30.403515 -0.004108902  -0.22680119 -0.010722722   0.18715562    0.3062923    2.0709648 
  522000    4.1885299    1.2765681    2.9119619  -0.21874306   0.85113615   0.98963338   0.76497158   -1.2465374            1    1.5960625    2.1978302    2.2089068   0.38145046 2.8939708e-05  0.019097769 -0.081435619    1.4346151    1.4658988   0.71097714  0.066666667    1.2732445        1e-10 1.7774428e-11    5.6260599    2.4864703    30.403515 0.0019317743  -0.17259714 -0.00096165637   0.18686027    -0.974279    3.3413668 
  523000    4.2166452    1.2949261    2.9217191  -0.21103215   0.86337617    1.0056384   0.77486736   -1.2465374            1    1.5769816    2.2250227    2.1813316   0.32459048 0.0012458045 -0.057174036  0.038619195    1.4134457    1.4447128   0.70697326  0.066666667     1.269329        1e-10 1.7674332e-11    5.6579226    2.4999352    30.403515 -0.018806795  -0.17648082 -0.00089353265     0.164361   0.25113648    0.4587397 
  524000    4.1774773    1.2805747    2.8969026  -0.20929299   0.85380755   0.98314435   0.77335226   -1.2465374            1    1.5585687    2.1805666     2.190594   0.30454566 0.0068931692 -0.031182529   0.05726806    1.3953526    1.4292585   0.71105307  0.066666667    1.2743728        1e-10 1.7776327e-11    5.6254592    2.5121686    30.403515 0.0030166049  -0.22853504 0.0083531161   0.18580058   0.43664545  -0.92351845 
  525000    4.1937949    1.2768005    2.9169944  -0.22133609   0.85129113   0.99320024   0.76300029   -1.2465374            1    1.4817676    2.1341865    2.1374448   0.17367158 -0.021362448 -0.0068585367 -0.042215879    1.3207363    1.3511348   0.71326191  0.066666667    1.2749522        1e-10 1.7831548e-11    5.6080381    2.5003416    30.403515  0.010998206  -0.20004908 0.0023419211   0.19034031   -1.7462711  -0.48256995 
  526000    4.2160406    1.2784723    2.9375683  -0.21563954   0.85240578    1.0123283   0.75288912   -1.2465374            1    1.6007497    2.2107699    2.2312849   0.36019416 -0.0091418758 -0.035520715 -0.038023929    1.4418523     1.467601   0.70297472  0.066666667    1.2721095        1e-10 1.7574368e-11     5.690105    2.4917745    30.403515 -0.0073943617  -0.18598521  0.018741507   0.19807681  -0.13574354    1.2728329 
  527000    4.2054565      1.27589    2.9295665  -0.21459266   0.85068406    1.0137104   0.74923281   -1.2465374            1    1.7166415    2.2953037    2.3063838   0.54823709 -0.007631209 -0.030656929  0.016846643    1.5585158    1.5833111   0.70369381  0.066666667    1.2754511        1e-10 1.7592345e-11    5.6842905    2.4828613    30.403515 0.0044095097  -0.20407509 -0.013563499   0.20505704  -0.24382683    3.2730035 
  528000    4.1730938    1.2662276    2.9068662   -0.2182081   0.84424176    1.0160386   0.73732356   -1.2465374            1    1.4287067    2.0786601    2.0904777   0.11698227 0.0093053391  0.096963983   0.05735741    1.2730944      1.29507   0.70514542  0.066666667    1.2710193        1e-10 1.7628636e-11    5.6725888    2.5229554    30.403515 0.00098478797  -0.17666308 0.0076286986   0.20333702  -0.75076542    2.2163199 
  529000     4.153576    1.2541627    2.8994132  -0.22146491   0.83619765   0.98282964   0.74496089   -1.2465374            1    1.6345649    2.2515854    2.2291957   0.42291363   0.01147526  0.059380889 -0.089696118    1.4773408    1.5052961   0.69912082  0.066666667    1.2718547        1e-10 1.7478021e-11    5.7214717    2.4861777    30.403515 0.0028891836  -0.16495128  -0.01218841   0.18199255  -0.83519298    3.7184905 
  530000    4.1574861    1.2666232    2.8908629  -0.22150751   0.84450553    1.0102465   0.74136141   -1.2465374            1    1.5307178    2.1463097    2.1657724   0.28007148 -0.0056745302   0.12213098 -0.081343982    1.3742534     1.397843   0.69599987  0.066666667    1.2675399        1e-10 1.7399997e-11    5.7471275    2.4825923    30.403515  0.012836059  -0.20106084 -0.015374246   0.19796865   -1.7607667    1.3887888 
  531000    4.2001933    1.2686032    2.9315901    -0.206548   0.84582568    1.0083561   0.74468261   -1.2465374            1    1.5876557    2.2075279    2.2243657   0.33107343 0.0072271261  0.056054755 -0.00030532342    1.4304903    1.4550294   0.69395491  0.066666667    1.2752292        1e-10 1.7348873e-11    5.7640632    2.4922846    30.403515 -0.0057844284  -0.20892031 0.0077651202   0.17495957   0.11252065    2.0957317 
  532000     4.153962    1.2627242    2.8912378  -0.21062504   0.84190593   0.99996522   0.74354861   -1.2465374            1     1.583765    2.2149653    2.2021033   0.33422639 -0.0034663972  0.019319775  0.026089881    1.4268389    1.4522424   0.70179242  0.066666667    1.2804668        1e-10 1.7544811e-11    5.6996911    2.4925705    30.403515 0.0042285445  -0.16478243  0.012821505   0.20849827  0.024098988    2.4748709 
  533000    4.1752001    1.2830686    2.8921315  -0.20996968   0.85547029    1.0087767   0.76007737   -1.2465374            1    1.5393552     2.172706    2.1633029   0.28205685 -0.003049859  0.027654699 -0.043732627    1.3789408    1.4066737   0.69750571  0.066666667     1.282009        1e-10 1.7437643e-11    5.7347201    2.4825783    30.403515 -0.0025771731  -0.20260522 -0.011922542   0.19580405   0.49212096    1.1608126 
  534000    4.1655456    1.2665107    2.8990349  -0.22284623   0.84443051    1.0067084   0.74344457   -1.2465374            1     1.556763    2.1918768     2.197305   0.28110719 0.00093010487  0.028618633 0.0011258019    1.3998589    1.4243534   0.69997894  0.066666667    1.2745483        1e-10 1.7499473e-11    5.7144577    2.4826336    30.403515  0.005561911  -0.16025077 0.0061910594   0.19173909    1.4700489    2.9779103 
  535000    4.1841489    1.2751887    2.9089602  -0.21279342   0.85021648   0.99880785   0.75776105   -1.2465374            1    1.5923439    2.2106432    2.2223585   0.34403009  0.011173438  0.032632756 -0.0044649109    1.4324184    1.4609736   0.69601836  0.066666667    1.2866934        1e-10 1.7400459e-11    5.7469749    2.4813575    30.403515 -0.0079008373  -0.19361357 -0.0092155079   0.17989623  -0.16756914    1.5976007 
  536000    4.1724465    1.2535319    2.9189146  -0.20650153   0.83577708   0.97523919   0.74900854   -1.2465374            1     1.489961    2.1305134    2.1371526   0.20221689 -0.0088600354  0.047478455 0.0083768412    1.3318826    1.3616905   0.70466169  0.066666667    1.2740839        1e-10 1.7616542e-11    5.6764829    2.5098209    30.403515  0.018328353  -0.17443688 0.0021127408   0.19840873   -1.1708753   -2.2214638 
  537000    4.1665436    1.2580469    2.9084967  -0.20703866   0.83878741    1.0011215   0.73776548   -1.2465374            1     1.603071     2.234076    2.2294036   0.34573344 -0.0077508685 0.0016449013 -0.045346941    1.4473655    1.4713963   0.70032329  0.066666667    1.2761405        1e-10 1.7508082e-11    5.7116478    2.4762553    30.403515 0.0067633028  -0.16643468   0.01540015   0.20155317  -0.35414709     3.595779 
  538000    4.1910756     1.289433    2.9016426   -0.2058184   0.85971369    1.0143661   0.76348263   -1.2465374            1    1.6597191    2.2613912     2.263488   0.45427802 -0.0043596201 -0.051241033  0.040161335     1.498586    1.5263024   0.70338641  0.066666667    1.2766036        1e-10 1.758466e-11    5.6867746    2.5041317    30.403515 0.0027965231  -0.23037275 -0.005383999   0.19543415  -0.25587744    1.8508713 
  539000    4.1649298    1.2498357    2.9150941  -0.21900588   0.83331268   0.98896533    0.7364537   -1.2465374            1    1.3967449    2.0531269    2.0660503  0.071057528 -0.0024550986 -0.019088087 -0.062756269    1.2413162    1.2666691    0.6943566  0.066666667    1.2793659        1e-10 1.7358915e-11    5.7607287    2.5071258    30.403515 -0.006219485  -0.18511856 0.0090425073   0.20462607   -1.0806833    1.1483333 
  540000    4.1789209    1.2742106    2.9047103   -0.2139548   0.84956433   0.99900287   0.75658082   -1.2465374            1    1.5840787    2.1982939    2.1855629   0.36837923 0.0027618088 -0.049559555 -0.032330708    1.4244022    1.4526826   0.69582196  0.066666667    1.2843025        1e-10 1.7395549e-11     5.748597     2.485762    30.403515 0.0075772782  -0.18392022  0.004942275   0.23133925  -0.44998555    3.1918669 
  541000    4.1890681    1.2657562     2.923312  -0.22287228   0.84392746    1.0175752   0.73585573   -1.2465374            1    1.7037731    2.2729142    2.3059472   0.53245794 -0.012359037 -0.0040516521 -0.014587275    1.5484707    1.5699343   0.69134336  0.066666667    1.2871306        1e-10 1.7283584e-11     5.785837    2.4751529    30.403515 -0.013940917  -0.19949987 -0.010537914   0.21067589   -1.5843286     4.458696 
  542000    4.1678709    1.2476134    2.9202576  -0.20031533   0.83183096    1.0062782   0.72325886   -1.2465374            1    1.5833565     2.232631    2.2086473   0.30879114 0.0040751038  0.013549367  0.055812778    1.4307126    1.4510035   0.69504229  0.066666667    1.2810651        1e-10 1.7376057e-11    5.7550455     2.477051    30.403515   0.01511904  -0.18913188  0.010865103   0.17103534   0.05368902      4.40042 
  543000    4.1623556    1.2527768    2.9095787  -0.22372369   0.83527364    0.9962185   0.73511689   -1.2465374            1    1.5380291    2.1463858    2.1730891   0.29461231  0.032373717 0.0080014938 -0.060912413    1.3828825    1.4069992   0.69354039  0.066666667    1.2843752        1e-10 1.733851e-11    5.7675084    2.5021629    30.403515 -0.0014867858  -0.19536829 -0.010448093   0.17686717  -0.10378098    1.3752113 
  544000    4.1406766     1.244168    2.8965087  -0.20363655   0.82953381    1.0084885   0.71815224   -1.2465374            1    1.5841018    2.2224379    2.1861155   0.34375188   0.01289766  0.076084835  0.015644592    1.4325356    1.4514581   0.69645632  0.066666667    1.2846104        1e-10 1.7411408e-11    5.7433609    2.4711231    30.403515 -0.013689302  -0.18106666   0.01101323    0.1834985  0.032033674  -0.53014427 
  545000    4.1362848    1.2488866    2.8873982  -0.22086995   0.83267987   0.99931594   0.72897587   -1.2465374            1    1.5487042    2.1822371    2.1595757   0.30429977  0.004641191 -0.0017238015 0.0053438342    1.3948537     1.417267   0.70017489  0.066666667    1.2851586        1e-10 1.7504372e-11    5.7128584    2.4856234    30.403515 -0.0069041805  -0.18076946 0.00074909063   0.20252319 -0.065983241 -0.063234428 
  546000    4.1621151    1.2645684    2.8975467  -0.21132116   0.84313552    0.9886862   0.75257383   -1.2465374            1    1.5845756    2.2233687    2.2058376    0.3245205 -0.012760884  0.013796635  0.028218495    1.4257448    1.4545365   0.70039108  0.066666667     1.286587        1e-10 1.7509777e-11     5.711095    2.5093667    30.403515 -0.010956054  -0.16548733 -0.0097256155   0.20941328   0.79644192    1.0503215 
  547000    4.1592617    1.2457715    2.9134903  -0.21422755    0.8306029   0.97244777   0.74234851   -1.2465374            1    1.6757887    2.2724631    2.2664726   0.48843032 -0.013244485  0.075888183 -0.0064734432    1.5191159    1.5478854   0.69644423  0.066666667    1.2793829        1e-10 1.7411106e-11    5.7434606    2.4937955    30.403515 -0.0011182559  -0.19881159 0.0035105132   0.20610788    0.9315313    1.4503362 
  548000    4.1715904    1.2608996    2.9106909  -0.21810451   0.84068937    1.0047741   0.73857679   -1.2465374            1     1.637719     2.249075    2.2586223   0.40545976 -0.0055285933    0.1559908 0.0006343868    1.4818423    1.5055639   0.69339589  0.066666667    1.2822451        1e-10 1.7334897e-11    5.7687103    2.4974636    30.403515 0.0019312086  -0.20282058 0.0075415126   0.18329994   -2.5382763    2.5982181 
  549000    4.1432989    1.2499748     2.893324  -0.21561104   0.83340544    0.9862349    0.7383059   -1.2465374            1    1.5186001    2.1530965    2.1622481   0.24045577 -0.0038313445   0.13621982 -0.016307735    1.3627805    1.3888834   0.70046392  0.066666667    1.2834578        1e-10 1.7511598e-11    5.7105011    2.5036895    30.403515 0.0064848775  -0.18357909  -0.00466449   0.16906511   -2.4665141   0.65966661 
  550000    4.1676682    1.2732757    2.8943925  -0.22098336   0.84894101   0.99477015   0.75820679   -1.2465374            1    1.5688916    2.1871484    2.2015462   0.31798029 0.0019336885   0.17294216 -0.056487801     1.408872    1.4380523   0.70730325  0.066666667    1.2880562        1e-10 1.7682581e-11    5.6552829    2.4968843    30.403515   0.01853602  -0.20176869 -0.0038884513   0.17914772   -3.5257775    2.3646599 
  551000    4.1425944    1.2573514    2.8852429   -0.2206115    0.8383237   0.99417162    0.7413439   -1.2465374            1    1.6028015    2.1923972    2.2236582   0.39234912 -0.011657729  0.047272203  0.017460626    1.4463408    1.4720409    0.7007772  0.066666667    1.2888404        1e-10 1.751943e-11    5.7079483    2.4875231    30.403515 -0.0011866035   -0.2142276 0.0051780076   0.17834318   -2.2784566  0.081911985 
  552000    4.1603981    1.2653156    2.8950825  -0.21941055   0.84363372     1.006476   0.74229591   -1.2465374            1    1.5298255    2.1788749    2.1622047   0.24839695 -0.0036576052   0.13844991  0.070152199    1.3731638    1.3974465   0.69400383  0.066666667    1.2912623        1e-10 1.7350096e-11    5.7636569    2.4686156    30.403515 0.00026036974  -0.17486981 -0.012892256   0.14941623   -1.1682514   0.20410855 
  553000     4.178966    1.2724104    2.9065556  -0.21779402    0.8483641    1.0133246   0.74570706   -1.2465374            1      1.56775    2.1788987    2.1661348   0.35821654  0.013497002 -0.035307083 -0.030796048    1.4103684    1.4344703   0.69698329  0.066666667    1.2967306        1e-10 1.7424582e-11    5.7390185    2.4844737    30.403515  0.008920497  -0.19593952 0.0030210683   0.22008474    1.6766486   -1.1378801 
  554000    4.1939652    1.2636316    2.9303336  -0.20728488   0.84251093    1.0011937   0.74376518   -1.2465374            1    1.5530469    2.1819552    2.1966605   0.28052513 0.0035118221  0.040091467  -0.04295834    1.3960752    1.4213627   0.69452839  0.066666667    1.3008301        1e-10 1.736321e-11    5.7593038    2.4848664    30.403515 0.0079153991  -0.23245821 -0.012364775    0.1859615   0.66527724    0.3963709 
  555000    4.2162722    1.2786456    2.9376266  -0.20684831   0.85252131    1.0018419   0.75961181   -1.2465374            1    1.5522456    2.1766133     2.164484   0.31563941 0.0036315346   0.17476407 -0.048818905    1.3919294    1.4204761   0.69162369  0.066666667    1.3071654        1e-10 1.7290592e-11    5.7834918    2.4903267    30.403515 -0.0046671557  -0.17739778 -0.016437584   0.19681186  -0.99428984 -0.095296491 
  556000    4.1559765    1.2603599    2.8956166   -0.2173201   0.84032955   0.97106588   0.75899972   -1.2465374            1    1.5573891    2.1808774    2.1720411   0.31924879 -0.0021815391   0.17432502 -0.071943986    1.3972021    1.4296675   0.69666555  0.066666667     1.314306        1e-10 1.7416639e-11     5.741636    2.4903221    30.403515  0.017053619  -0.20809313 -0.00059547437   0.18586335   -1.4943012  -0.78152942 
  557000    4.1465901    1.2453143    2.9012757  -0.21753606   0.83029811   0.98445137   0.73437305   -1.2465374            1    1.5381595     2.181358    2.1506779   0.28244265  0.013489904  0.057969897 -0.031268157    1.3831699    1.4086774   0.70204187  0.066666667    1.3208377        1e-10 1.7551047e-11    5.6976659    2.4820243    30.403515 0.0079895109  -0.19471298  0.007581226   0.19003454   -1.2808113   -2.3164479 
  558000    4.1753549    1.2706813    2.9046737  -0.21610771   0.84721121    1.0136154   0.74365427   -1.2465374            1    1.6395775    2.2415649    2.2433631   0.43380454 0.0095367225  0.082425637 -0.019881111    1.4826291    1.5062595   0.69783746  0.066666667     1.310928        1e-10 1.7445936e-11    5.7319938    2.4752688    30.403515 0.0050128268  -0.17496639 0.0058216894   0.18308974  -0.92367181    1.3086028 
  559000    4.2045861    1.2918876    2.9126985   -0.2075016   0.86135025    1.0141074   0.76630062   -1.2465374            1    1.7318748    2.3190102    2.2998729   0.57674131 0.00018480786  0.051842205 -0.024218096    1.5701469    1.5984921   0.70376356  0.066666667    1.3055928        1e-10 1.7594089e-11     5.683727    2.4938106    30.403515 0.0049744873  -0.20080949 0.0093640124   0.21224186   0.67497173    2.5172141 
  560000    4.1753687    1.2697635    2.9056052  -0.20636671   0.84659927   0.99429506   0.75470133   -1.2465374            1    1.4911446    2.1323993     2.144636   0.19639857 -0.0053962232  0.034551872  0.022050859    1.3318648    1.3603678   0.70253495  0.066666667    1.3009064        1e-10 1.7563374e-11    5.6936669    2.4773387    30.403515 -0.0077967068  -0.20596169  0.016489259   0.19964524  -0.40983138   -3.2785239 
  561000    4.1485561    1.2633373    2.8852188  -0.22530856   0.84231468   0.99753033   0.74572961   -1.2465374            1    1.5685735    2.1772715     2.185962   0.34248689  0.015167144 -0.035689631  0.033728574    1.4111871    1.4373711   0.70411518  0.066666667    1.3090353        1e-10 1.760288e-11    5.6808887    2.5072907    30.403515  0.005454554  -0.20562247 0.0033029596   0.16688778   -1.3497861  -0.12333275 
  562000    4.1839183    1.2812507    2.9026676  -0.21929971   0.85425826   0.99131783   0.76899018   -1.2465374            1    1.6904392    2.2423839    2.2991944    0.5297394 -0.015507385 -0.070107145 0.0027592503    1.5281437     1.560054   0.70349093  0.066666667     1.301778        1e-10 1.7587273e-11    5.6859298     2.491484    30.403515 -0.011779945  -0.18314304  0.011877161   0.17411788  -0.65312019    1.8831637 
  563000    4.1713253    1.2643614    2.9069639  -0.21454344   0.84299753   0.99327459   0.74949032   -1.2465374            1    1.5934483     2.218962    2.1855896    0.3757934 -0.0074703348 -0.089753183 -0.030821481    1.4352683    1.4628057   0.70769087  0.066666667     1.303733        1e-10 1.7692272e-11    5.6521854    2.4955981    30.403515 -0.0076175397  -0.18821898 -0.010656369   0.17350084   -1.7164485   0.51136524 
  564000    4.1933501    1.2706499    2.9227003  -0.21413658   0.84719027    1.0064767   0.74806911   -1.2465374            1    1.6574798    2.2468443    2.2655962   0.45999874 -0.0097595777  -0.12056152 -0.029899882    1.4995997    1.5251007   0.70770385  0.066666667    1.3003434        1e-10 1.7692596e-11    5.6520817    2.5289634    30.403515 -0.0013941815  -0.19139421 0.0076161832   0.20425246   -1.7488274   0.30499701 
  565000     4.187825    1.2897267    2.8980983   -0.2199372   0.85990952     1.010901   0.76596003   -1.2465374            1    1.5950931    2.2208642    2.2142171   0.35019782 0.0034275707  -0.17355077  0.028298688    1.4334371    1.4621321   0.70300976  0.066666667    1.2951814        1e-10 1.7575244e-11    5.6898214    2.4895222    30.403515  0.012542539  -0.20085095 -0.0014370952   0.23331153  -0.81131199   -1.2152682 
  566000    4.1520988    1.2646444    2.8874545  -0.21751728   0.84318617    1.0165547   0.73528832   -1.2465374            1    1.6590411    2.2605265    2.2480617   0.46853507  0.012896912 -0.047555536  0.019382302    1.5038584    1.5253365   0.70761591  0.066666667    1.3046138        1e-10 1.7690398e-11    5.6527842    2.5392177    30.403515 0.0034378954  -0.18558914 -0.0031689867   0.17117878  -0.10539275    1.6997619 
  567000    4.2037429    1.2873619     2.916381  -0.20751429   0.85833283    1.0151898   0.76072764   -1.2465374            1     1.652626     2.259444    2.2623981   0.43603578 -0.012912567  -0.10355139  0.028002003    1.4920743    1.5191009   0.70151094  0.066666667    1.3026128        1e-10 1.7537773e-11    5.7019781    2.4767285    30.403515 -0.010938842  -0.16801652 -0.018737278   0.21890175   0.26115077    2.6760488 
  568000     4.185405    1.2729521    2.9124529  -0.21411542   0.84872527    1.0055152   0.75116022   -1.2465374            1    1.6336003    2.2512209    2.2258236   0.42375641  0.010956554 0.0048645728   0.04321896    1.4750678    1.5013477   0.70150082  0.066666667    1.2950232        1e-10 1.753752e-11    5.7020603    2.4948682    30.403515 -0.0087388715  -0.20463124 0.0058272571   0.21440333  -0.61652306   0.50305758 
  569000    4.1679292    1.2590452     2.908884  -0.21339263     0.839453   0.99749088    0.7411086   -1.2465374            1    1.5986489    2.1944789    2.2297142   0.37175359  0.012718541 -0.013577096 -0.026583104    1.4422378    1.4674517   0.69685567  0.066666667    1.3000808        1e-10 1.7421392e-11    5.7400695    2.4736147    30.403515 -0.0012123592  -0.16068998 -0.00081069099   0.21095367       1.9835    1.6852136 
  570000    4.1422166    1.2407132    2.9015034  -0.21852869   0.82723037   0.99344033   0.72379099   -1.2465374            1    1.6736849    2.2688115    2.2769885   0.47525478  0.029235111 -0.049497102 -0.067695732    1.5209287    1.5430205   0.69630667  0.066666667    1.2930828        1e-10 1.7407667e-11    5.7445953    2.4858153    30.403515 0.0054764584  -0.20786772 0.00089307768   0.17117542  0.093079036    3.6323364 
  571000    4.1608046     1.255234    2.9055706  -0.21994908   0.83691194   0.98438532   0.74515094   -1.2465374            1    1.4256518    2.0911377    2.0797154   0.10610231  0.019722016 -0.073024324 -0.015291525    1.2683876    1.2961784   0.69822784  0.066666667    1.2980346        1e-10 1.7455696e-11     5.728789       2.4789    30.403515 0.0080230909  -0.15680753  0.012877296   0.24125434  0.051236919   0.75733456 
  572000    4.1901383     1.261139    2.9289993  -0.20970036   0.84084899   0.97584193   0.75686653   -1.2465374            1    1.7055224    2.2899709    2.3051558   0.52144043 -0.012589803 -0.041659493 -0.020723469    1.5457856    1.5771726   0.70105602  0.066666667    1.2898025        1e-10  1.75264e-11    5.7056781    2.4844362    30.403515 0.0017347415   -0.1875576 -0.00012759088   0.18814224  -0.09841681    1.8416026 
  573000    4.1702605     1.273213    2.8970476  -0.22572864   0.84889918    1.0131215   0.74670228   -1.2465374            1    1.4396599    2.1004308    2.0872675    0.1312813 0.0018848561  -0.19796975  0.017063767    1.2820682    1.3064068   0.70191672  0.066666667    1.2987329        1e-10 1.7547918e-11    5.6986817    2.5005411    30.403515 -0.003181257  -0.18364269 0.0050634958   0.20207538  -0.20264736  -0.10837215 
  574000    4.1850186    1.2652147    2.9198038  -0.20258198   0.84356647   0.99176685   0.75135355   -1.2465374            1    1.5852251    2.2409932    2.1843256   0.33035639  0.009345547  -0.13151019 -0.023860339    1.4266518    1.4547807   0.69766643  0.066666667    1.2955754        1e-10 1.7441661e-11    5.7333989     2.496554    30.403515 -0.0041812779     -0.19399 0.0011483584   0.18065392   0.38335138  -0.51991679 
  575000    4.1989415     1.277001    2.9219405  -0.21158391   0.85142479    1.0208186   0.74600544   -1.2465374            1    1.5215072    2.1311566    2.1608336   0.27253125 -0.0027543376  -0.12809022  -0.03491238    1.3640626    1.3872418   0.70144093  0.066666667    1.2912667        1e-10 1.7536023e-11    5.7025471    2.4820479    30.403515 0.0062473026  -0.18695839 -0.0068328817   0.20715014  0.038507375   -1.7618399 
  576000    4.1594219    1.2709761    2.8884458  -0.22396779   0.84740778    1.0140175   0.74372273   -1.2465374            1      1.57885    2.1851014    2.1912214   0.36022723 -0.00032441153 -0.099577366  0.022731877    1.4218872    1.4454792   0.70002773  0.066666667    1.2947734        1e-10 1.7500693e-11    5.7140594    2.4865045    30.403515 0.0074760397  -0.20554411 0.0077275341   0.20019452  -0.59682195      3.44773 
  577000    4.1765005    1.2720353    2.9044651  -0.20863502     0.848114    1.0190679    0.7417218   -1.2465374            1    1.5384977    2.1615886    2.1765301   0.27737442 0.0035374527 -0.057022894 -0.027678586    1.3819572    1.4044626   0.69724764  0.066666667    1.3030532        1e-10 1.7431191e-11    5.7368426    2.4767698    30.403515  0.013027353   -0.1726802  0.011737971   0.19994342     1.029354    1.1672753 
  578000    4.2131171    1.2714524    2.9416648  -0.20978882   0.84772533    1.0015739   0.75199314   -1.2465374            1    1.5634567    2.2013606    2.2031427    0.2858667 -0.012724084   0.11833671 0.0098648141    1.4047484    1.4317225    0.7089232  0.066666667    1.2867113        1e-10 1.772308e-11    5.6423601    2.4860592    30.403515 -0.0038195317  -0.17685905 0.0061158544   0.19826378  -0.60486551    1.6410622 
  579000    4.1630014    1.2786304     2.884371  -0.22774566   0.85251121    1.0012765   0.75994776   -1.2465374            1    1.5318144    2.1520291    2.1836017   0.25981234 -0.015781541  0.062926123   0.02767014    1.3714273    1.4001193   0.71808248  0.066666667    1.2926794        1e-10 1.7952062e-11    5.5703908    2.4998879    30.403515  0.009113621   -0.1753964 0.0017863259   0.19442451   0.24228985    2.1276906 
  580000    4.1892196     1.276817    2.9124026  -0.21554273   0.85130216   0.99984498   0.75887718   -1.2465374            1     1.577371    2.2124551    2.2099805   0.30967747 0.0019985794   0.10576479  0.025953343    1.4172099    1.4458642   0.71447691  0.066666667    1.2980041        1e-10 1.7861923e-11    5.5985015    2.5015088    30.403515 -0.0055473192  -0.21795132 -0.0068683947   0.19850282  -0.35352475   0.10352591 
  581000    4.1744221    1.2598171     2.914605  -0.22196158   0.83996762     1.010435   0.73387719   -1.2465374            1    1.5745107    2.2127047    2.1787832   0.33204427 -0.0020882254  0.074706331 -0.053601792    1.4196258     1.441611    0.7046456  0.066666667    1.3017117        1e-10 1.761614e-11    5.6766125    2.4764305    30.403515  0.014105803  -0.16561384 -0.0038658101   0.20318426   -1.2832758    2.0226332 
  582000    4.1958061    1.2739983    2.9218078  -0.21291928    0.8494228   0.99646271   0.75793411   -1.2465374            1    1.5246587    2.1624676    2.1495172   0.26199125 0.0082610483 -0.0074009431 -0.067921087    1.3646966    1.3935968   0.70920458  0.066666667    1.3003407        1e-10 1.7730114e-11    5.6401215    2.4928325    30.403515  0.012724949  -0.19558559 -0.0038384311    0.1520966  -0.40542614    -1.206348 
  583000    4.1885942     1.294068    2.8945262  -0.21621313   0.86280404    1.0194265   0.76534582   -1.2465374            1    1.5792001    2.1939636    2.2345854   0.30905138 -0.0061047442 -0.068639417  0.040392391    1.4176738    1.4451178   0.70582026  0.066666667    1.2946694        1e-10 1.7645507e-11    5.6671651      2.49158    30.403515   0.00760271  -0.21200487 -0.0059602758   0.18549866   0.99651375   0.39201728 
  584000    4.1706653    1.2688011    2.9018642  -0.21608148   0.84595762    1.0078819   0.74519235   -1.2465374            1    1.5517516     2.170542     2.191599   0.29311369  0.016274794  0.020674435  0.089738376    1.3944786    1.4191877   0.70392214  0.066666667    1.2900258        1e-10 1.7598053e-11    5.6824467    2.4803994    30.403515 -0.0021106263  -0.18409859 -0.0030137372   0.18132356   -1.0934363  -0.12309502 
  585000     4.179752    1.2684255    2.9113265  -0.21819859    0.8457072    1.0082499    0.7445565   -1.2465374            1    1.6944733    2.2945394     2.287698   0.50118262 -0.00011015461 -0.0027474089 -0.0054435674    1.5373346    1.5618611   0.70377091  0.066666667    1.3039156        1e-10 1.7594273e-11    5.6836677    2.4687935    30.403515 0.0060037413  -0.19098822 -0.0020146631   0.19834766   0.27999739  -0.33259476 
  586000    4.1755923    1.2811581    2.8944341  -0.22413581   0.85419653    1.0184979   0.75195129   -1.2465374            1    1.5153738    2.1738137    2.1469381   0.22536962 0.0081427481 -0.059391183 -0.013054031    1.3566744    1.3814136   0.70312809  0.066666667    1.3082729        1e-10 1.7578202e-11    5.6888639    2.4801712    30.403515 -0.0027019405  -0.17620739 -0.002708019   0.16511596   -0.1121973    0.7138686 
  587000    4.1813518    1.2709623    2.9103895  -0.21437915   0.84739855   0.98811591   0.75984975   -1.2465374            1    1.6453751    2.2305119    2.2296028    0.4760107 0.0061732223 -0.038676422 0.0061264692    1.4850087     1.515411    0.7095893  0.066666667    1.3067155        1e-10 1.7739733e-11    5.6370636    2.4843703    30.403515  0.010481884  -0.19819732  0.016378337   0.20199359    0.8677246    1.4925597 
  588000    4.1922273    1.2817137    2.9105136  -0.21655321   0.85456697    1.0064285   0.76007433   -1.2465374            1    1.6847544    2.2521801    2.2882442   0.51383884  0.006317279  0.059281909 -0.0049169421    1.5243406    1.5523817   0.70683474  0.066666667    1.3111755        1e-10 1.7670868e-11    5.6590314    2.4823758    30.403515 0.0089257897  -0.20698813  0.010174575   0.20241858   0.77278529     1.999692 
  589000    4.1757339     1.275876    2.8998579  -0.22424388   0.85067475   0.99036611   0.76376591   -1.2465374            1    1.5946704    2.2151637    2.2078885   0.36095891  0.016799625  0.049609088  0.033847087    1.4334775    1.4644103   0.70124076  0.066666667    1.3122516        1e-10 1.7531019e-11     5.704175    2.4898344    30.403515 -0.0025931142  -0.18283099 -0.0068192329   0.16477833  -0.13660127   0.96439468 
  590000    4.1706872    1.2771529    2.8935343   -0.2255438   0.85152611    1.0177299   0.74809479   -1.2465374            1    1.5263584    2.1524379    2.1625585   0.26407885  -0.01205022  0.041112022  -0.07673832    1.3684729    1.3924993   0.70436126  0.066666667    1.3088865        1e-10 1.7609032e-11     5.678904    2.4765256    30.403515 -0.013801477   -0.2432517 0.0049131495   0.18309078  0.057146916  -0.73957415 
  591000    4.1663286    1.2833741    2.8829546  -0.21717703   0.85567396    1.0165874   0.75554031   -1.2465374            1    1.6225704    2.2733054     2.227371   0.36703466 0.0089218472  0.055531675 -0.00096924893    1.4631135    1.4888615   0.70557771  0.066666667    1.3058095        1e-10 1.7639443e-11    5.6691133    2.4801783    30.403515 -0.00099201191  -0.18466583 0.0022909519   0.18001023  0.057878823     0.993424 
  592000    4.1724713    1.2642957    2.9081756  -0.21681458   0.84295372   0.98156349    0.7567176   -1.2465374            1    1.4590138    2.0861706    2.1168331   0.17403765  0.012778896 -0.021587635  0.011686651    1.2993084    1.3299115   0.70228572  0.066666667    1.3060241        1e-10 1.7557143e-11    5.6956875    2.4806129    30.403515 0.0012106042  -0.18561122  0.010432459   0.16947638  -0.33119207    3.9611149 
  593000    4.1631596    1.2764752    2.8866844  -0.22204683   0.85107425   0.99679784   0.76040618   -1.2465374            1    1.5418322    2.1729303       2.1615   0.29106611 0.0090689576  0.031883982 -0.028854193    1.3813483    1.4107261   0.70551246  0.066666667    1.2972245        1e-10 1.7637812e-11    5.6696376    2.4949137    30.403515 0.0024939507  -0.20293516 -0.0047092706   0.20518179   -1.1483305    4.1455696 
  594000    4.1547981     1.265275    2.8895231  -0.22576345   0.84360665    1.0146664   0.73714771   -1.2465374            1    1.5569417    2.2003639    2.1840864   0.28637477 0.0055999763 -0.00035250916 -0.012693316    1.4013666    1.4234855   0.69864603  0.066666667    1.2916575        1e-10 1.7466151e-11    5.7253599    2.4973352    30.403515  0.001798203  -0.14372892 -0.016058397   0.19114467  -0.66353024    6.3745228 
  595000    4.1414387    1.2677277    2.8737109   -0.2256788   0.84524195    1.0076908   0.74414963   -1.2465374            1    1.5847149    2.1786931    2.2000691   0.37538242 -0.0093655789  0.062143736 -0.020118163     1.427662    1.4521761   0.70879682  0.066666667    1.2947974        1e-10 1.7719921e-11    5.6433662    2.4931396    30.403515 0.0070338148  -0.20761047  0.011650006     0.193086   -1.7594343    4.2665999 
  596000    4.1637562    1.2678685    2.8958877  -0.20480834   0.84533583    1.0110342   0.74221844   -1.2465374            1    1.6416207    2.2566164    2.2604417   0.40780392 -0.018236212 0.0067633513 -0.032944497    1.4849753    1.5086422   0.70520156  0.066666667    1.2959686        1e-10 1.7630039e-11    5.6721372    2.5117809    30.403515 0.0082824065  -0.16573848 -0.00050124769   0.18801675  -0.83931987    4.2612583 
  597000    4.1858638    1.2779231    2.9079407  -0.22170946   0.85203962    1.0104699   0.75345287   -1.2465374            1    1.6239728    2.2385231    2.2491935   0.38420178 -0.0068656307  0.073957673 -0.056021509    1.4649564    1.4910685   0.70987523  0.066666667    1.3058928        1e-10 1.7746881e-11    5.6347931    2.4903947    30.403515 -0.0036485719  -0.17353013 0.00030863792   0.18665655   -1.2611714    5.5520792 
  598000    4.1740489    1.2584929     2.915556  -0.21670564   0.83908477   0.98189192   0.75023216   -1.2465374            1    1.4050405    2.0700091    2.0800234  0.065088917 -0.0025858447 -0.013559343 -0.021272948    1.2467039     1.275895    0.7036843  0.066666667    1.3004924        1e-10 1.7592107e-11    5.6843673    2.4915785    30.403515 0.0094824651  -0.21751665 -0.00085538979   0.18657699   0.58908377   -1.8351968 
  599000    4.1733244    1.2791955     2.894129  -0.21101412   0.85288794    1.0201013   0.74882768   -1.2465374            1    1.7235747    2.2998402    2.3334848   0.53739901 -0.0023610736 -0.0041862604  0.018498566    1.5655345    1.5894036   0.70101259  0.066666667    1.2900662        1e-10 1.7525315e-11    5.7060316     2.487975    30.403515 0.0088043205  -0.19369261  0.011449765   0.18249345    1.2979181    3.5718673 
  600000    4.1779469    1.2711904    2.9067565  -0.21242309   0.84755064     1.026736   0.73602846   -1.2465374            1    1.5654526    2.1904002    2.1828976   0.32306013 -0.0079255362  0.068775779 -0.018999801    1.4101137    1.4304089   0.69666562  0.066666667    1.2997982        1e-10 1.741664e-11    5.7416354    2.4835841    30.403515 0.0049647278  -0.20265886 -0.0084180574   0.18968836   0.77270922    3.1369458 
  601000    4.1463358    1.2508792    2.8954566  -0.21881867   0.83400843   0.99094441   0.73634979   -1.2465374            1     1.580336    2.2115223    2.1903699   0.33911568 -0.0031668983 -0.041728573 0.0040531391    1.4249292    1.4499998     0.707292  0.066666667    1.2876508        1e-10  1.76823e-11    5.6553729    2.4924852    30.403515 -0.0063223138  -0.22206735 -0.003149449   0.23115322    1.1053066    1.0725619 
  602000    4.1601785    1.2473961    2.9127824  -0.21515546   0.83168609   0.98193821   0.73819246   -1.2465374            1    1.5894079     2.188123    2.2075701   0.37253062 0.0041925068 -0.023932157 -0.086639651    1.4336122    1.4602563   0.70236772  0.066666667     1.293875        1e-10 1.7559193e-11    5.6950226    2.5046613    30.403515 0.0040553415  -0.18513095 -0.0096188671    0.2009268  -0.55015828    1.0917623 
  603000    4.1372558    1.2572795    2.8799763   -0.2190841   0.83827572   0.99216387   0.74251725   -1.2465374            1    1.6031518     2.224321    2.2020853   0.38304925 -0.018413485 0.0028938744 -0.0062585187    1.4464435    1.4726553   0.70346525  0.066666667    1.2979087        1e-10 1.7586631e-11    5.6861373    2.4814562    30.403515 0.00030277651  -0.15108097 -0.019064392   0.21495147   0.67543287    1.5493421 
  604000    4.1504997    1.2488617     2.901638  -0.22812555   0.83266326    1.0063472   0.72456701   -1.2465374            1     1.641385    2.2404125    2.2403614   0.44338094 -0.00038019936  0.030687849 0.0039364334     1.488465    1.5090229   0.69815204  0.066666667     1.295503        1e-10 1.7453801e-11     5.729411    2.4868724    30.403515 -0.011788241  -0.16900578  0.016011967   0.21002283    1.9683897     1.781319 
  605000    4.1836298    1.2804286    2.9032012  -0.21999064   0.85371011    1.0131937   0.75446719   -1.2465374            1    1.4539373    2.1166744    2.0965659   0.14857177 -0.0038951374  0.015602888  0.019050098    1.2947069    1.3206748    0.7013711  0.066666667    1.2948482        1e-10 1.7534278e-11    5.7031149    2.4996894    30.403515 -0.0051881198  -0.18622483  0.012386966   0.18801721   0.10351914   -0.8373131 
  606000    4.1800546    1.2600749    2.9199797  -0.21096472   0.84013956   0.98600296   0.74938247   -1.2465374            1    1.6377053    2.2176661    2.2351803   0.46026936 6.9019406e-05  -0.18444668  0.070436802     1.479548    1.5080191   0.70334456  0.066666667    1.2938002        1e-10 1.7583614e-11     5.687113    2.4877755    30.403515 -0.0097837793  -0.21152676 -0.004988372   0.17300201    2.2499812    1.3212047 
  607000     4.145832    1.2661847    2.8796473   -0.2181464   0.84421319    1.0190104   0.73542516   -1.2465374            1    1.5837893    2.2075334    2.2067029   0.33713162 0.0096119757  -0.16216749  -0.01554185    1.4285777    1.4497617   0.69280144  0.066666667    1.2989174        1e-10 1.7320036e-11      5.77366    2.4737204    30.403515  0.015352323  -0.16925988  0.016582143   0.18680145    2.1739015    3.3422385 
  608000    4.1709561    1.2490788    2.9218773  -0.21494975   0.83280802    1.0072923   0.72421302   -1.2465374            1    1.5219657    2.1543411    2.1502251   0.26133081 -0.015975094 -0.027075284  0.071618748    1.3691204    1.3894793   0.69350832  0.066666667    1.2930348        1e-10 1.7337708e-11    5.7677751    2.4997292    30.403515 -0.0048103993  -0.17296789   0.01221472   0.14694279    1.0617575  -0.67471225 
  609000    4.1787769     1.255089    2.9236879  -0.20542447   0.83681524   0.98096582     0.747125   -1.2465374            1    1.4265595    2.0654037    2.0945984   0.11967633 -0.0045332385  0.037399076 -0.00080690774    1.2688786    1.2975358    0.6956054  0.066666667    1.2764496        1e-10 1.7390135e-11    5.7503866    2.4949706    30.403515 -0.0073624404  -0.20759718 -0.0096273109   0.21514556    1.4462589   -2.7373238 
  610000    4.1895655     1.278317    2.9112485  -0.20830371   0.85230221   0.99510743   0.76345308   -1.2465374            1    1.6539934    2.2638936    2.2487729   0.44931362 -0.011000449   0.13034071 -0.044366862    1.4928665    1.5231097   0.69771601  0.066666667    1.2707631        1e-10  1.74429e-11    5.7329916    2.5215627    30.403515  0.006689622   -0.2199029 0.0099041524   0.18924613  -0.82629976   -1.4742689 
  611000    4.2015159      1.27198    2.9295359  -0.20928026   0.84807712   0.97729101   0.76769743   -1.2465374            1    1.5350251    2.1433367    2.1783938   0.28334485 -0.026352252  0.017009439 -0.0032013208    1.3730024    1.4064848   0.69854458  0.066666667    1.2791528        1e-10 1.7463614e-11    5.7261915    2.4997511    30.403515 -0.00098927365  -0.18373888 0.00045923519   0.19376795   0.16602267    1.9682982 
  612000    4.1667879    1.2618945    2.9048934   -0.2245207    0.8413527    1.0053723   0.73928081   -1.2465374            1     1.616898    2.2146588    2.2254233   0.41061197 0.0090010496  0.070739268 -0.040656782    1.4608727    1.4846642   0.70284238  0.066666667    1.2868713        1e-10 1.7571059e-11    5.6911765    2.5037924    30.403515 -0.0025426417  -0.20057828 0.0035863381   0.21408073   -2.2262488  -0.98773141 
  613000    4.1848537     1.276384    2.9084697  -0.21630253   0.85101343   0.99532886   0.76122292   -1.2465374            1    1.4460711    2.1109955    2.1086245   0.11859334 0.00071757106 -0.0054356466 -0.011482056    1.2854149    1.3151583   0.70146465  0.066666667    1.2841705        1e-10 1.7536616e-11    5.7023543    2.5049454    30.403515 -0.0046141147  -0.16543674 -0.0038802485   0.17799022  -0.93982634    1.7830727 
  614000    4.1790796    1.2889479    2.8901317  -0.21075706   0.85939026    1.0279719   0.75447839   -1.2465374            1    1.6940895     2.261233    2.3097877   0.51124793 -0.0048124491  0.040394324  0.012661088    1.5348568    1.5588833   0.70236049  0.066666667    1.2828028        1e-10 1.7559012e-11    5.6950812    2.4695223    30.403515 -0.0087334263  -0.22542989 -0.0021744209   0.19714471  -0.52435066  -0.97597816 
  615000     4.190253    1.2755858    2.9146672  -0.21357132   0.85048127   0.99313293   0.76172753   -1.2465374            1    1.6473113    2.2313421    2.2524293   0.45816253 -0.008427914  0.035571164 0.0071365826    1.4865486    1.5166873   0.69671615  0.066666667    1.2928914        1e-10 1.7417904e-11     5.741219    2.4973812    30.403515 0.0060037306  -0.18102307 -0.0020545198    0.1928751   -1.2487741    1.3070527 
  616000    4.1688649     1.276761    2.8921039  -0.20378361    0.8512648    1.0054178   0.75534355   -1.2465374            1    1.3724727    2.0409977    2.0838905 -0.0074701819  0.015440124  0.010989361  0.013173276    1.2130573    1.2402329   0.69935516  0.066666667    1.2877038        1e-10 1.7483879e-11    5.7195546    2.5001638    30.403515 0.0031988495  -0.17738305 0.0069433243   0.19845612  -0.57592424   -4.0485536 
  617000    4.1909129    1.2663274    2.9245855  -0.21610137   0.84430831    1.0009292   0.74684783   -1.2465374            1    1.5746331     2.185154    2.1910515   0.34769375  0.003189745  0.023904567  0.026064402    1.4170107    1.4429837   0.69788549  0.066666667    1.2873044        1e-10 1.7447137e-11    5.7315993    2.4780003    30.403515 -0.011798778  -0.16356404 -0.0065372839   0.17195157  0.035572053   -1.4058631 
  618000    4.1568029    1.2461356    2.9106673  -0.21299672   0.83084567   0.97395787   0.74180151   -1.2465374            1    1.7129426    2.2952753    2.3127784   0.53077405 0.0062293721 -0.090926586  0.029238894    1.5563852    1.5848406   0.69909464  0.066666667    1.2973062        1e-10 1.7477366e-11     5.721686    2.4889157    30.403515 -0.0024760476  -0.16849897 -0.0049955841   0.18382871   0.20063383     3.748757 
  619000    4.1770242    1.2622311    2.9147931  -0.20830957   0.84157716    1.0008867   0.74244062   -1.2465374            1    1.4795223    2.1402346    2.1171344    0.1811978 -0.012763069 -0.053284259 -0.00047985741      1.32283    1.3478784   0.69660609  0.066666667    1.2961323        1e-10 1.7415152e-11    5.7421261    2.4873183    30.403515  0.011240731  -0.19737613 0.0078814242   0.16714445    -1.103065  -0.40708475 
  620000    4.1785699    1.2759915    2.9025783  -0.20282415   0.85075176   0.98952752   0.76441354   -1.2465374            1    1.7191543    2.3322913    2.2778369    0.5473346 -0.0010121928  0.030764188 0.0090785193    1.5578247    1.5890045   0.70301755  0.066666667     1.298496        1e-10 1.7575439e-11    5.6897584     2.511857    30.403515  0.009651832   -0.2211594  0.010260381   0.18798263  -0.52972616    1.6078298 
  621000    4.2025727    1.2830287     2.919544  -0.21783442   0.85544372     1.004413   0.76275366   -1.2465374            1    1.5387369    2.1856535     2.149871   0.28068624 0.0012854544  0.052691605 -0.074011431    1.3777576    1.4066293   0.69401631  0.066666667    1.2940502        1e-10 1.7350408e-11    5.7635533    2.4928215    30.403515 -0.00029492238  -0.17879432 -0.0032982124   0.17142077    0.2269536   0.48115078 
  622000    4.1649087    1.2797902    2.8851186  -0.21792072   0.85328445    1.0073364   0.75742648   -1.2465374            1    1.5979581    2.2123783    2.2075104   0.37398549 0.0013067578   0.10402978 0.0031408704    1.4381031    1.4654659   0.69625113  0.066666667    1.2946625        1e-10 1.7406278e-11    5.7450536     2.491362    30.403515  0.006758823  -0.14358637 0.0051598852   0.21728021  -0.97408317    1.2540381 
  623000    4.1820537    1.2714214    2.9106323  -0.21007515   0.84770469   0.98329406   0.76335171   -1.2465374            1    1.6066623    2.2114016    2.2534704   0.35511505 -0.0030737932   0.13923093 -0.019184102    1.4455568    1.4773324   0.69357905  0.066666667    1.2993258        1e-10 1.7339476e-11    5.7671869    2.4895764    30.403515 0.0054475727  -0.18571117 -0.00052752541   0.19842691  -0.28648487    1.1692781 
  624000    4.2076402    1.2774662     2.930174  -0.20999418   0.85173498    1.0047111    0.7565472   -1.2465374            1    1.5064653    2.1604398    2.1235316   0.23542448 0.0029292321  0.012367076 -0.049822035    1.3467959    1.3743185    0.6906527  0.066666667    1.3000923        1e-10 1.7266317e-11    5.7916229    2.4844521    30.403515 0.0085521638  -0.16384875 0.0036937198   0.19498978   -0.2093497   0.97805441 
  625000    4.1553635    1.2597042    2.8956593  -0.20853082    0.8398924   0.99624529   0.74259817   -1.2465374            1    1.6485052    2.2570948    2.2724904   0.41593044 0.0091237746   0.10910596  0.015409299    1.4917798    1.5174719   0.69587175  0.066666667     1.309294        1e-10 1.7396794e-11    5.7481856    2.4964156    30.403515 -0.017169134  -0.20735633 -0.0033201758    0.1733724   -1.2924631  -0.16014233 
  626000     4.172934    1.2771051    2.8958289  -0.21084241   0.85149422   0.99927342   0.75954515   -1.2465374            1    1.5677593    2.1799536    2.1890918   0.33423263 -0.018560231  0.041662842 -0.027086529    1.4074572    1.4363277   0.69966726  0.066666667    1.2948678        1e-10 1.7491682e-11    5.7170032    2.4913143    30.403515  0.010350579  -0.16687827 0.0039156698   0.22626002   0.43671491    1.9715276 
  627000    4.1870083    1.2782325    2.9087758  -0.21837847   0.85224592    1.0035382   0.75810761   -1.2465374            1     1.535364    2.1607015    2.1716863   0.27370416  0.017800444   0.11268438  0.066924275    1.3753653    1.4033714   0.69975183  0.066666667    1.2979391        1e-10 1.7493796e-11    5.7163123    2.4902339    30.403515 -0.00056496891  -0.17985556 -0.0010347837   0.14925402   -1.3977736  -0.60227928 
  628000    4.1801424    1.2756535     2.904489  -0.21758248   0.85052635   0.98909885   0.76431476   -1.2465374            1    1.5521187    2.1946841    2.1679871   0.29368484 -0.009039504 -0.052504926  0.030072007    1.3908099    1.4220253   0.70303104  0.066666667    1.3027184        1e-10 1.7575776e-11    5.6896492    2.4982442    30.403515 0.0018087126  -0.18159191 -0.0099975974   0.19478403  -0.23022202   -0.5360199 
  629000    4.1760717    1.2527877     2.923284  -0.22746823    0.8352809   0.99221348    0.7376246   -1.2465374            1    1.5538636    2.1783301    2.1577153   0.32554555 -0.010931104 -0.054529109 -0.017857948    1.3981878    1.4233606   0.71001237  0.066666667    1.3059078        1e-10 1.7750309e-11    5.6337047    2.5004981    30.403515 -0.0027347567  -0.15605816 0.0062119934   0.17340145  -0.24780235   0.48700741 
  630000    4.1751449    1.2780637    2.8970812  -0.21428185   0.85213332    1.0065957   0.75601941   -1.2465374            1    1.5325944    2.1644399     2.172375   0.26096835 -0.015045776  0.072420697  0.039992063    1.3730364    1.4001997   0.70315213  0.066666667    1.2996521        1e-10 1.7578803e-11    5.6886694    2.4941491    30.403515 -0.0087152682  -0.15765069 0.0058693308   0.18199534  -0.34462999   0.85493357 
  631000    4.1572458    1.2558209    2.9014249  -0.21560008   0.83730321   0.99237684   0.74080578   -1.2465374            1    1.6384723    2.2502254    2.2286924   0.43649919 -0.0044553334     0.109299 -0.0095136408    1.4821252    1.5079478    0.7025995  0.066666667    1.3021685        1e-10 1.7564988e-11    5.6931438    2.4917545    30.403515  0.012336482  -0.17626694 0.0050765049   0.19585505  -0.13080302  0.045794462 
  632000    4.1721325    1.2630744    2.9090581  -0.20811307   0.84213943   0.97745453   0.75795642   -1.2465374            1    1.6104072    2.2123852    2.2376928   0.38114367 -0.0016729426   0.13243787 0.0095904156    1.4504404    1.4818454   0.70597493  0.066666667    1.3047296        1e-10 1.7649373e-11    5.6659236    2.4902588    30.403515 0.0064032967  -0.18981365 0.0086555513   0.20863447   -0.5976302   0.93785021 
  633000    4.1766052    1.2651363    2.9114689  -0.21074619   0.84351416    1.0055284   0.74269238   -1.2465374            1    1.5272151    2.1695386    2.1505898   0.26151681 -0.0021733927  0.069265472 -0.001899051    1.3704697    1.3949607   0.69649427  0.066666667    1.3079488        1e-10 1.7412357e-11     5.743048    2.4708244    30.403515 -0.0034217642  -0.20190539  0.019833788   0.20933536   -1.2790937    2.4818804 
  634000    4.1657024     1.274789    2.8909135  -0.21805514   0.84994996   0.99741732   0.75819497   -1.2465374            1    1.6784822     2.277859    2.2611322   0.49645546 -0.0020003731  0.054748874 -0.027019299    1.5184651    1.5472947   0.70413882  0.066666667    1.3154931        1e-10 1.760347e-11    5.6806981    2.4821509    30.403515 0.0030559353  -0.21067721 0.0072729736   0.19299638   -1.0152082   0.41794202 
  635000    4.1654206    1.2663513    2.8990694  -0.21015418   0.84432425    1.0017026    0.7463917   -1.2465374            1    1.7001682    2.2837512    2.3049356   0.51181778 -0.0020939237  0.047643501   0.04036713    1.5426421    1.5684171   0.70818774  0.066666667    1.3161815        1e-10 1.7704693e-11    5.6482198     2.507561    30.403515 -0.0039171323  -0.20194868 -0.0043679186      0.20689   -1.2676995    6.4785383 
  636000     4.168541    1.2674217    2.9011193  -0.21165216   0.84503793    1.0127409   0.74067117   -1.2465374            1    1.6097987    2.2388867    2.2235457   0.36696382  -0.01531464   0.10584547  0.053559736      1.45348    1.4765958   0.70627191  0.066666667    1.3001532        1e-10 1.7656798e-11    5.6635411     2.493045    30.403515 -0.0043155479  -0.17922552 0.0052752496   0.20255783  -0.81774787    4.2151739 
  637000    4.1769039    1.2713438    2.9055601  -0.21843055   0.84765295   0.99107143   0.75842084   -1.2465374            1    1.6427747    2.2399684    2.2497505   0.43860535 -0.0050165169  0.055608684  0.017840714    1.4827099    1.5124219   0.69878632  0.066666667    1.2967121        1e-10 1.7469658e-11    5.7242105    2.5024347    30.403515  0.012224415   -0.2094289 -0.0090421762   0.14383824   0.22316014    3.1162686 
  638000    4.1622238    1.2737737    2.8884501  -0.21411305   0.84927305    1.0016156   0.75447969   -1.2465374            1    1.5510789    2.1788925    2.1973063   0.27703773 0.00091904258  0.072514766  0.040701886    1.3918458    1.4193392   0.71155565  0.066666667    1.3021931        1e-10 1.7788891e-11    5.6214858    2.5066049    30.403515 -0.0084186259  -0.21278548  0.002468797   0.17309781   -1.3562843   0.74658132 
  639000    4.1864372    1.2821811    2.9042561  -0.20734962   0.85487861    1.0054289   0.76120317   -1.2465374            1    1.5004971    2.1359621    2.1374808   0.22804849  0.010979228 0.0045904877 -0.060845839    1.3398451    1.3682559   0.71006173  0.066666667    1.2950004        1e-10 1.7751543e-11     5.633313    2.4971894    30.403515 0.0064383056  -0.18177693 0.0041002414   0.18146504    2.1116558   0.91733182 
  640000    4.1624077    1.2623001    2.9001075  -0.22827978   0.84162319    1.0063814   0.73909103   -1.2465374            1    1.6810085    2.2756755    2.2729717   0.49437819 -0.0057071205  0.026861306 -0.010845159    1.5250232    1.5486419   0.71212862  0.066666667    1.2882609        1e-10 1.7803216e-11    5.6169628    2.4978135    30.403515 -0.0094764077  -0.18412555 0.0053988137   0.19157282    1.8307789     4.583096 
  641000     4.141616    1.2521117    2.8895043  -0.21988374   0.83483015   0.98841258   0.73926161   -1.2465374            1    1.7010398    2.2948409    2.3023742   0.50590446  0.018988115   0.12258383  0.084808472    1.5450186    1.5710367   0.71673557  0.066666667    1.2927583        1e-10 1.7918389e-11    5.5808588    2.5116901    30.403515  0.013624983  -0.19880996  0.012620354   0.17259091   0.13696067    2.9870846 
  642000    4.1562263    1.2740306    2.8821958  -0.21471176    0.8494443    1.0010415    0.7551155   -1.2465374            1    1.4587763    2.1084109    2.1010958   0.16682229  0.011316934  0.082230733  0.072892595    1.2994091    1.3271122   0.70603337  0.066666667    1.2890052        1e-10 1.7650834e-11    5.6654546    2.4864475    30.403515 -0.0056415367  -0.22905751 0.00058327449   0.21616132    1.9418733   -2.1292386 
  643000    4.2122153    1.2686928    2.9435225  -0.20179376   0.84588542   0.98978153   0.75635534   -1.2465374            1    1.5771344    2.1768878    2.1930167   0.36149876 -0.013167415  0.096364324  0.018049825    1.4175055    1.4469512   0.70592115  0.066666667    1.2950912        1e-10 1.7648029e-11    5.6663552     2.486844    30.403515 0.0065787799  -0.21098052 0.0064631236   0.21151998 -0.076802465   0.90043985 
  644000    4.1485186    1.2660784    2.8824402   -0.2275304   0.84414228   0.98625799   0.75572146   -1.2465374            1    1.6506872    2.2410813    2.2522743   0.45870589 -0.0093597552 -0.021217726  0.053744627     1.491192    1.5209674   0.70911759  0.066666667    1.2987411        1e-10 1.772794e-11    5.6408134    2.4857779    30.403515 0.0034758463  -0.18238633 -0.003157253   0.21409826   0.34449727    1.7297771 
  645000    4.1908261    1.2852035    2.9056226  -0.21643022   0.85689375     1.000677   0.76743593   -1.2465374            1    1.6533396    2.2483118    2.2632216   0.44848532  0.011031329  0.016796646  0.041300425    1.4913721    1.5217233   0.70952565  0.066666667    1.3041301        1e-10 1.7738141e-11    5.6375693    2.4859994    30.403515 -0.0050901436  -0.18161235  0.013028585   0.17020607  0.077686407    -1.636056 
  646000    4.1907209    1.2694749     2.921246  -0.21011081   0.84640685   0.99786561   0.75216379   -1.2465374            1    1.5242095    2.1895622    2.1459563   0.23711008  0.019133834   0.02602296 -0.0054369405    1.3654653    1.3929631   0.71731262  0.066666667    1.3006409        1e-10 1.7932815e-11    5.5763692    2.5055221    30.403515 -0.00029481523  -0.22281034 -0.0071613752   0.16943773   -1.0402241  -0.52369271 
  647000    4.1727578    1.2734099    2.8993479  -0.21602884   0.84903051   0.99011505   0.76125315   -1.2465374            1    1.6390571     2.229566    2.2629837    0.4246218 -0.0094509013 -0.0062033173  0.011123424    1.4783945    1.5088301   0.71679452  0.066666667    1.3071458        1e-10 1.7919863e-11    5.5803998    2.4809405    30.403515 -0.007178757  -0.17490901 0.0066408976   0.19600905   -1.4908251    1.0473786 
  648000     4.158014       1.2525     2.905514  -0.21445956   0.83508904    0.9765227    0.7470917   -1.2465374            1    1.5695018    2.1937641    2.1738549   0.34088629 -0.014961423 -0.013090678 -0.039126069    1.4118279    1.4410625   0.71130043  0.066666667    1.2944982        1e-10 1.7782511e-11    5.6235028    2.4854077    30.403515  0.014407005     -0.18896 -0.0042043914   0.20816342    1.2029027    2.0502389 
  649000    4.1522632      1.24813    2.9041331  -0.21241832   0.83217545   0.97269896   0.74474481   -1.2465374            1    1.6196202    2.2483267    2.2366385   0.37389541 -0.0028492251 -0.047849291  0.012431481    1.4624417    1.4916839   0.70595734  0.066666667    1.2946818        1e-10 1.7648933e-11    5.6660648    2.4996666    30.403515 -0.0032249452   -0.2044583 -0.015466416   0.16887531    3.7983892    2.7483759 
  650000    4.1623401    1.2879581     2.874382  -0.22122506   0.85873035    1.0215005   0.75744014   -1.2465374            1    1.6744024    2.2721177    2.2654426   0.48564708 0.0050003515  0.058212411 -0.0029657106    1.5145446    1.5400473   0.70502375  0.066666667     1.302393        1e-10 1.7625594e-11    5.6735678    2.4902443    30.403515 0.0015028455  -0.17930502 0.0066720246   0.20186247    1.9885828  -0.18010834 
  651000    4.1784015     1.262967    2.9154345  -0.21189231   0.84206782    0.9978212   0.74514759   -1.2465374            1    1.5713477    2.1909925    2.2064632   0.31658756 0.0030431168  0.076247038  0.044730406    1.4140842    1.4401071   0.71067241  0.066666667    1.3063001        1e-10 1.776681e-11    5.6284724    2.4832068    30.403515 -0.013649518   -0.2002371 0.0015541651   0.19783097   0.88499275   0.51840183 
  652000    4.1518549    1.2569697    2.8948852  -0.21029786   0.83806921   0.97949947   0.75007451   -1.2465374            1    1.6343028     2.263785    2.2470478   0.39207563 -0.0065727532  0.061846429 -0.026261602    1.4759995     1.505472   0.71252081  0.066666667    1.3189962        1e-10 1.781302e-11    5.6138711    2.4797397    30.403515 0.0015468272  -0.18485779 0.0088597103   0.21653903   0.29910067    0.9354477 
  653000    4.1548858      1.25307    2.9018159  -0.23173406   0.83546908   0.97626138    0.7478715   -1.2465374            1    1.5530836    2.1628864    2.1807983   0.31556614 0.00037332071    0.1781195 -0.0031124735    1.3952452    1.4246787   0.71339961  0.066666667    1.3140356        1e-10 1.783499e-11    5.6069557    2.5102552    30.403515 0.0053666175  -0.17422671  0.016086508   0.17461671   -2.4220665    1.3791649 
  654000     4.156639    1.2712217    2.8854173  -0.22704065   0.84757153    1.0068511   0.74845473   -1.2465374            1    1.6390757    2.2360477    2.2383014   0.44287794 -0.0085434021   0.21311841  0.014106224    1.4811142    1.5066474    0.7070112  0.066666667    1.3199956        1e-10 1.767528e-11     5.657619    2.5005121    30.403515 -0.0063662022   -0.1904201 -0.0053944217   0.23168524   -2.0854029    2.8688257 
  655000    4.1825428    1.2717538     2.910789   -0.2183216   0.84792631   0.98641395   0.76176716   -1.2465374            1    1.5867975     2.217991    2.2098842   0.33251738 0.0093242389   0.16766807 -0.011302949    1.4260264    1.4570573   0.70891146  0.066666667    1.3138396        1e-10 1.7722787e-11    5.6424536    2.4862045    30.403515 0.0040301672  -0.24204031 0.0051541244     0.168197  -0.50530009    2.4679905 
  656000    4.1929286    1.2766948    2.9162338  -0.21789775   0.85122063    1.0003931   0.75840325   -1.2465374            1    1.7070298    2.2759127    2.3072047   0.53797197   0.01967638   0.15726718 -0.0092566144    1.5469687    1.5754509    0.7030845  0.066666667    1.3259762        1e-10 1.7577112e-11    5.6892166    2.4857241    30.403515 -0.0071446847  -0.20908859 0.0034300026   0.19723695    -2.502443   -1.7775938 
  657000    4.2104325      1.30866    2.9017725  -0.21331846   0.87253305    1.0219104   0.77959163   -1.2465374            1    1.5353106    2.1711389    2.1716945   0.26309828 -0.0061776226  0.092375593 -0.047896884    1.3707776    1.4009015   0.70107139  0.066666667    1.3165573        1e-10 1.7526785e-11    5.7055531    2.4717224    30.403515  0.006008648  -0.17880302 0.0080494765   0.21520327  -0.46913837   -1.9786278 
  658000    4.1785835    1.2771431    2.9014404  -0.20992777   0.85151956    1.0100665   0.75286002   -1.2465374            1    1.6361319    2.2526974    2.2418195   0.41387896 -0.0058196127  0.033161841 0.0082561648    1.4772407    1.5032807    0.7022993  0.066666667    1.3210488        1e-10 1.7557482e-11    5.6955774     2.484738    30.403515 -0.00032995511  -0.17919451 0.0044152271    0.1732892   -1.5605561  -0.94344134 
  659000    4.1942556    1.2816616     2.912594  -0.22277693   0.85453218    1.0053929   0.76066321   -1.2465374            1    1.4469849    2.0826822    2.1112854   0.14698723 0.0060330488 -0.029635007 -0.030211405    1.2864468    1.3147484   0.69656603  0.066666667    1.3240547        1e-10 1.7414151e-11    5.7424564    2.4955083    30.403515 0.0038135175   -0.1897955 -0.0040467599   0.14802508  -0.76084379   0.80226898 
  660000    4.1948869     1.272407    2.9224799  -0.20715024   0.84836184    1.0114066   0.74689871   -1.2465374            1    1.6866864    2.2796921    2.2766954   0.50367183 -0.011504965  0.099901031 -0.0056495632    1.5290534     1.553659   0.69866718  0.066666667    1.3270352        1e-10 1.7466679e-11    5.7251867    2.4887991    30.403515  -0.01954503   -0.1892521 0.00013276288   0.17849965    0.1389949    3.4174043 
  661000    4.1546577    1.2723412    2.8823165  -0.21410009   0.84831796    1.0084286   0.74868335   -1.2465374            1    1.5804887    2.2164037     2.215965    0.3090973 0.0051411632  0.062659852 -0.0077272222    1.4224789    1.4478529   0.70241869  0.066666667    1.3128689        1e-10 1.7560467e-11    5.6946093    2.4908754    30.403515 6.1070365e-05  -0.17581543   0.00349735   0.17589026  -0.66237499    1.9663806 
  662000    4.1588179    1.2552313    2.9035866  -0.21552243   0.83691012    0.9964684   0.73761776   -1.2465374            1    1.5421371    2.1738057    2.1807211   0.27188444 -0.0015650055   0.17095487 -0.016129717    1.3864627    1.4110744   0.70698296  0.066666667     1.315629        1e-10 1.7674574e-11     5.657845    2.4835986    30.403515 0.0042428022  -0.23848206 0.0086285046   0.19013106  -0.49955298   0.86843548 
  663000    4.2034174    1.2739346    2.9294828  -0.20686298   0.84938034   0.99565089    0.7583711   -1.2465374            1    1.6332278    2.2428013    2.2321827   0.42469941  0.011841988  0.093919919  0.012520476    1.4731735    1.5022726   0.69899006  0.066666667    1.3182494        1e-10 1.7474752e-11     5.722542    2.4962947    30.403515 0.0053173112  -0.15480459 0.0042715467   0.20472899  -0.74429159    1.3221282 
  664000    4.1835758    1.2895099    2.8940659  -0.21411314   0.85976494    1.0090345   0.76688853   -1.2465374            1    1.4499757    2.1048322    2.0924162   0.15267856 0.0012084743    0.0981696 -0.024035343    1.2881237    1.3172602   0.70510408  0.066666667    1.3192925        1e-10 1.7627602e-11    5.6729214    2.4763201    30.403515  0.011102955  -0.18717731 -0.010299511   0.17542504   0.18490663   -1.0698383 
  665000    4.1915984    1.2805472    2.9110513  -0.21397309   0.85378917    1.0066813   0.75865411   -1.2465374            1    1.6588643    2.2531623    2.2696617   0.45376911  0.017956718 -0.037144124    0.0958848    1.4987503    1.5264584   0.70526001  0.066666667    1.3163577        1e-10  1.76315e-11    5.6716671     2.498458    30.403515 -0.0083977678  -0.15527507  -0.01075716   0.18060517   -0.1590456      2.94692 
  666000    4.1826188    1.2878318     2.894787  -0.21781781   0.85864609    1.0046415   0.76780991   -1.2465374            1    1.7041178    2.2757632    2.3117372   0.52485304 -0.020326065 -0.061852411 -0.043677403    1.5420714    1.5719801   0.70769113  0.066666667    1.3035966        1e-10 1.7692278e-11    5.6521833    2.4793377    30.403515  0.011338036  -0.19101686 0.0019545841   0.19390331  0.067837413   0.71978646 
  667000    4.1661228    1.2637093    2.9024135  -0.21595396   0.84256274   0.98863125   0.75167824   -1.2465374            1     1.533143    2.1696689    2.1793584   0.25040157 -0.0014424097 -0.073865469 -0.023617572    1.3745012    1.4031111   0.69581552  0.066666667    1.3101029        1e-10 1.7395388e-11    5.7486502    2.4986788    30.403515 -0.0065262153  -0.17982687 -0.0025050821   0.17186888    2.6475233   -1.0148733 
  668000    4.1535896    1.2585857    2.8950038  -0.21580155   0.83914665   0.98650354   0.74745863   -1.2465374            1    1.5525295    2.1670636    2.1948429   0.29568202 -0.0043341236 -0.072084661  0.017348901    1.3947782    1.4227775   0.70015293  0.066666667    1.3107032        1e-10 1.7503823e-11    5.7130376     2.522068    30.403515  0.017993278  -0.21104882 -0.0068441825   0.20361039    1.3417107  -0.79755828 
  669000    4.1986699    1.3022434    2.8964265  -0.22021094   0.86825485    1.0102814   0.77989376   -1.2465374            1     1.592282    2.1922578    2.2189892   0.36559904 0.0038391997 -0.033456593 0.0064109652    1.4276853    1.4594025   0.70026861  0.066666667    1.3083117        1e-10 1.7506715e-11    5.7120938    2.4864778    30.403515 0.0048831477  -0.17438733 -0.0087657268   0.19652402   0.45766178    1.8006784 
  670000    4.1827989    1.2669957    2.9158033  -0.20910547   0.84475388    1.0120639   0.74063196   -1.2465374            1    1.7170251    2.3078821    2.2967209   0.54647237 -0.029189219 -0.005289664  0.016550612    1.5607146    1.5839112   0.70360768  0.066666667     1.302499        1e-10 1.7590192e-11    5.6849863    2.4814965    30.403515 -0.0049925047  -0.20925319 -0.013038399    0.2002554    1.3564308    1.1094961 
  671000    4.1739914    1.2760314      2.89796  -0.21835592   0.85077836    1.0249179   0.74240131   -1.2465374            1     1.449731    2.1018122    2.0957346   0.15164624 0.0044767467 -0.013954999   0.07570483    1.2930471    1.3149264   0.69936458  0.066666667    1.3086572        1e-10 1.7484114e-11    5.7194776    2.4882034    30.403515 0.0080655681   -0.1587366 0.0059409107   0.18802371 -0.040330921    -2.464227 
  672000    4.1748608    1.2810044    2.8938564  -0.22866575   0.85409405    1.0089942   0.75770763   -1.2465374            1    1.5666901    2.2096317    2.1625139   0.32792454 -0.013216808 -0.031818911 -0.0073413329    1.4067757    1.4339799    0.7044158  0.066666667     1.303715        1e-10 1.7610395e-11    5.6784643    2.4873312    30.403515 -0.0061342145  -0.21472892  0.016212153   0.19834787   0.68005418    -2.736359 
  673000    4.1706857     1.285564    2.8851217  -0.21967335   0.85713408    1.0108903   0.76146108   -1.2465374            1    1.6443943     2.239288    2.2701668   0.42372813 -0.0097064147 -0.080868462 -0.036381159    1.4836878    1.5114347   0.70122255  0.066666667    1.3018894        1e-10 1.7530564e-11    5.7043231    2.4933612    30.403515 0.00022527082  -0.14594891 -0.014027726   0.18563221    1.1266127    2.2502313 
  674000    4.1476116     1.255567    2.8920447  -0.21673385   0.83713393   0.98642128    0.7442425   -1.2465374            1    1.4779685    2.1198138    2.1231136    0.1909781 -0.016538657 -0.017069596 0.0093357198     1.320896    1.3482273   0.70923517  0.066666667    1.3099314        1e-10 1.7730879e-11    5.6398782    2.5041139    30.403515 -0.0080734185  -0.18128017 0.0074288511   0.21545328    1.8165954   -3.8513419 
  675000    4.1595505    1.2574349    2.9021156  -0.22151404   0.83837936   0.99974327   0.73796199   -1.2465374            1    1.5566132    2.1761696    2.1992665   0.29440349 -0.0075648981  -0.11950899 -0.036676359    1.4008662    1.4251198   0.71638959  0.066666667    1.3203857        1e-10 1.790974e-11     5.583554    2.5070997    30.403515 1.2236018e-05   -0.1456797 0.0028873122   0.17395557    3.0188254  -0.95560613 
  676000    4.1174308    1.2449072    2.8725236   -0.2214527   0.83002669   0.98728801   0.73216461   -1.2465374            1    1.7586233    2.3187267    2.3650647   0.59207844  0.017393562  0.033197482   0.01294479    1.6040998    1.6287681    0.7135224  0.066666667    1.3151346        1e-10 1.783806e-11    5.6059908    2.5142086    30.403515 -0.0003618596  -0.17231157 0.0037097597    0.1701574  -0.07821777    4.1006708 
  677000    4.1772125    1.2560756    2.9211369  -0.21829206   0.83747304   0.99561519   0.73906333   -1.2465374            1     1.612519    2.2237365    2.2069892   0.40683124 -0.012093818   0.12563563 -0.062921687    1.4565396    1.4815685   0.71233827  0.066666667    1.3212295        1e-10 1.7808457e-11    5.6153097    2.4947126    30.403515 0.00052478874  -0.24637395 -0.0082166012   0.20677562  0.064986732    2.5813478 
  678000    4.1938015    1.2738125    2.9199891  -0.21386624   0.84929889   0.99924292   0.75600032   -1.2465374            1    1.5701442    2.2006427    2.1907792   0.31901078  -0.01349302    0.2486342  0.019672609    1.4105902    1.4387166   0.71044785  0.066666667    1.3103748        1e-10 1.7761196e-11    5.6302514    2.4955729    30.403515 -0.0072790875  -0.19819794 -0.00046768991   0.19922527  -0.29589759    2.5574339 
  679000    4.1442873    1.2610444    2.8832429  -0.22937728   0.84078595   0.98804177   0.74916121   -1.2465374            1    1.5959668    2.2124279    2.1932021   0.38227025 -0.008995308   0.17171001  0.035251042    1.4378562    1.4660124   0.70881016  0.066666667    1.3089416        1e-10 1.7720254e-11      5.64326    2.4806949    30.403515 -0.0024347706  -0.16326192 -0.00085960715   0.17179464   -1.2265206    2.3161125 
  680000    4.1354649    1.2514404    2.8840245  -0.21054682   0.83438258   0.99588327   0.73387927   -1.2465374            1    1.5608012    2.1674529    2.2068618   0.30808881 0.0094850132   0.10160173 -0.018883506    1.4059158    1.4298154   0.71093839  0.066666667    1.3030258        1e-10 1.777346e-11    5.6263666    2.5079988    30.403515 -0.011366473  -0.19825128  0.015970161   0.20062477   -0.4290909    2.8199912 
  681000    4.1530982    1.2647868    2.8883114  -0.21449378   0.84328114   0.99972467   0.74593102   -1.2465374            1    1.6447714    2.2326604    2.2762811   0.42537269  0.011868287  0.070075175 -0.0031304146    1.4873425    1.5132804   0.71591431  0.066666667    1.3101199        1e-10 1.7897858e-11    5.5872608    2.5197287    30.403515 0.0036760665  -0.20755426 0.00029267264   0.19644296   -1.2003459    1.0893301 
  682000    4.1579069    1.2597302    2.8981768  -0.22038041   0.83990971   0.99966637   0.74049424   -1.2465374            1    1.6164299    2.2131888    2.2063387   0.42976206 -0.0086684117  0.062680868  0.027472133    1.4601484    1.4849465   0.71052169  0.066666667    1.3166933        1e-10 1.7763042e-11    5.6296662    2.4938596    30.403515 0.0051535283  -0.21378964 0.0086586472   0.21536165   -1.9784296    2.1903664 
  683000    4.1644639    1.2517801    2.9126838  -0.20791391   0.83460906    1.0070792   0.72726963   -1.2465374            1    1.6037891    2.2313295    2.2139739   0.36606401 0.0084523409  0.017856779 -0.0065065658    1.4502988    1.4713308    0.7032583  0.066666667    1.3060984        1e-10 1.7581457e-11    5.6878106    2.4793961    30.403515 0.0089533311  -0.18045093  0.014915931   0.15902531  -0.42333446    1.1857138 
  684000    4.1602893     1.269927    2.8903623  -0.22650277   0.84670833    1.0007679   0.75084446   -1.2465374            1    1.5458315    2.1629915    2.1631415   0.31136155 -4.2054559e-06  -0.14353923 -0.019879936    1.3873657    1.4142033   0.70652128  0.066666667    1.3139017        1e-10 1.7663032e-11    5.6615422    2.4959806    30.403515  0.016167505  -0.20800926 -0.0019071765   0.16687734    1.3465537    2.4982446 
  685000    4.1839838    1.2727568     2.911227   -0.2185993   0.84859504    1.0053324   0.75106275   -1.2465374            1    1.5817885    2.1875763    2.1998519   0.35793707   0.01573724 -0.022018395  0.083707936    1.4232765    1.4495599   0.70858595  0.066666667    1.3111899        1e-10 1.7714649e-11    5.6450456    2.4765406    30.403515  0.011322587  -0.20708598 -0.0031600922   0.22201949  -0.90730794    3.0017769 
  686000    4.1640918    1.2656062    2.8984857  -0.21172051   0.84382745    1.0069142   0.74233733   -1.2465374            1     1.575826    2.2231676     2.199914   0.30439642 -0.0017961326   0.12041622 -0.031666737    1.4191556    1.4433894   0.70432502  0.066666667    1.3089543        1e-10 1.7608126e-11    5.6791962    2.4777548    30.403515 0.0057358407  -0.18778566 0.0046717577   0.20158951   0.15977705    1.8741414 
  687000    4.1356548    1.2517452    2.8839097  -0.22022236   0.83458578   0.97844931   0.74507405   -1.2465374            1    1.5840402    2.1941301     2.215584   0.34240643 -0.017138827   0.10104984 0.0076159754    1.4267922    1.4553475   0.70783008  0.066666667    1.3161128        1e-10 1.7695752e-11    5.6510737    2.4897271    30.403515 -0.0066561285  -0.22380328 0.0087237488   0.19012476  -0.31843749   0.62936486 
  688000    4.1866521    1.2864828    2.9001693  -0.21649424   0.85774671   0.99585137   0.77182793   -1.2465374            1     1.652606    2.2403678    2.2709574   0.44649279 0.00011682653  0.092148184  0.018732102    1.4897116    1.5216245   0.70704517  0.066666667     1.319257        1e-10 1.7676129e-11    5.6573472      2.48532    30.403515  0.013581892  -0.21585341 -0.0057048683   0.20154928  -0.24617948    1.3838914 
  689000    4.1603318    1.2764145    2.8839172  -0.21990103   0.85103379    1.0012477   0.75756733   -1.2465374            1    1.5498232    2.1583069    2.2108351   0.28032759 0.0020463233   0.10166577 -0.023150119    1.3899385    1.4181319    0.7086375  0.066666667    1.3178607        1e-10 1.7715937e-11     5.644635    2.5048673    30.403515 0.0032877244   -0.1921675 0.00093176564   0.19226227 -0.087578143   -0.1080206 
  690000    4.1869845    1.2800784    2.9069062  -0.21730585    0.8534766     1.031329   0.74278614   -1.2465374            1    1.6388791    2.2370321     2.249311   0.43029419 -0.016621734  0.072010665 -0.0030073276     1.482114    1.5032313   0.70348834  0.066666667    1.3135112        1e-10 1.7587208e-11    5.6859507    2.5057592    30.403515 0.0067652971   -0.1728295 -0.014146975    0.1770873  -0.59397823    2.3230898 
  691000    4.1473008    1.2515964    2.8957044  -0.21426604   0.83448661   0.99204681   0.73643905   -1.2465374            1    1.5669945    2.1769425    2.1953018   0.32873929 -0.015325199  -0.00678554 -0.034474775    1.4115689    1.4365134   0.69819376  0.066666667    1.3277506        1e-10 1.7454844e-11    5.7290687    2.4868032    30.403515 0.0072794384   -0.1853451 -0.006265351   0.16931919  -0.51990807    1.4683735 
  692000    4.1589789    1.2648805    2.8940985  -0.20913186   0.84334359     1.013697   0.73732481   -1.2465374            1    1.5874508    2.2135022    2.2011354   0.34771481  0.013426398 -0.057453217  0.086900725    1.4318383    1.4541221   0.70151247  0.066666667    1.3166369        1e-10 1.7537812e-11    5.7019657    2.4927563    30.403515 -0.0043100572  -0.18476803 0.0048993901   0.21927803  0.052473941  0.038803856 
  693000    4.1835092    1.2647666    2.9187427  -0.20353788   0.84326765    1.0042865   0.74306617   -1.2465374            1     1.477813    2.1128441    2.1204961   0.20009887 -0.011933267 -0.067427242  0.033563642    1.3209888     1.345722    0.6965803  0.066666667     1.314643        1e-10 1.7414508e-11    5.7423387    2.4852061    30.403515 0.0046049624  -0.18136237 0.0031056554   0.17304468   -1.2053389  -0.76718235 
  694000    4.1817484    1.2563965     2.925352  -0.20801155   0.83768698   0.98597241   0.74542004   -1.2465374            1    1.6399407    2.2569361    2.2447527   0.41813321 -0.0086093822 -0.038666411  0.014522885    1.4826197    1.5102585   0.69856466  0.066666667    1.3007683        1e-10 1.7464117e-11    5.7260268    2.4964551    30.403515 -0.005015094  -0.21198682 0.0070260671   0.21035711    0.3590482    1.7149458 
  695000    4.1676086    1.2893321    2.8782765  -0.21402481    0.8596464    1.0256243   0.75635725   -1.2465374            1    1.6061663    2.2107274    2.2596045   0.34816684 -0.010576188 -0.096721989 0.0019878742    1.4465369    1.4712688   0.69427296  0.066666667    1.3091201        1e-10 1.7356824e-11    5.7614227    2.4926852    30.403515  0.011931442  -0.16807231  0.011940204   0.16725784     0.959033    3.0843595 
  696000    4.1343259    1.2530729     2.881253  -0.21542297   0.83547104   0.97699111   0.74741991   -1.2465374            1    1.4848938    2.1416612    2.1344301   0.17859009 0.0053500427  -0.19314098 0.0097395513    1.3271507    1.3563929   0.69885052  0.066666667    1.3166413        1e-10 1.7471263e-11    5.7236847    2.4920818    30.403515 -0.013758197  -0.17056313 0.00087080525   0.18581868    2.4541022    2.6004438 
  697000    4.1459814    1.2605855    2.8853959  -0.22006644   0.84047998   0.97483369   0.75689583   -1.2465374            1    1.5540221    2.1942061    2.1866422   0.28121809 -0.00088949601  -0.16898026 -0.031252773    1.3942791     1.425805   0.69212743  0.066666667    1.3098134        1e-10 1.7303186e-11    5.7792826    2.4757105    30.403515  0.010819476  -0.19605736  0.011511031   0.17191473    1.3388012    1.9158149 
  698000    4.1461371    1.2477829    2.8983543  -0.21106098   0.83194397   0.99401784   0.73108303   -1.2465374            1    1.6640802    2.2355729    2.2724603    0.4842073 0.0024066048 -0.098762714  0.026257798     1.509785    1.5333398   0.69834644  0.066666667    1.2982065        1e-10 1.7458661e-11    5.7278161    2.4953187    30.403515 -0.0041450055  -0.22815478 0.0093332572   0.23782488  -0.26430092    2.4117849 
  699000    4.1944417    1.2725395    2.9219023  -0.20900534   0.84845013    1.0008488   0.75362163   -1.2465374            1    1.5228839    2.1622898     2.157704   0.24865794 0.0098436745 -0.064900642  0.046826451    1.3638319    1.3912451   0.68696621  0.066666667    1.2952537        1e-10 1.7174155e-11    5.8227027    2.4832154    30.403515  0.019096936  -0.19059524  0.010749908   0.17844853   -2.0849692    1.8923549 
  700000    4.1413095    1.2390951    2.9022144  -0.21984204   0.82615153   0.98472096   0.72747357   -1.2465374            1    1.5966721    2.1954354    2.2251183   0.36946244  0.012377464 -0.076660333  0.010728081    1.4431386    1.4671545   0.68678667  0.066666667    1.2923031        1e-10 1.7169667e-11    5.8242249    2.4817424    30.403515 -0.004079714  -0.16534698 0.0064561757    0.1690132   -1.1026135   0.47948471 
  701000    4.1610058    1.2670725    2.8939333  -0.21832859   0.84480514   0.99431569   0.75177592   -1.2465374            1    1.6308156    2.2306508    2.2294594   0.43233679 0.0036342887 -0.046549558 -0.046752379    1.4721532    1.5000361   0.69283498  0.066666667    1.2976301        1e-10 1.7320874e-11    5.7733806    2.4965323    30.403515 -0.0017739419  -0.19104097 0.0046920637   0.18698844  -0.83746041  -0.67405116 
  702000    4.1524621    1.2477985    2.9046636  -0.20760385   0.83195442   0.97938903   0.74021672   -1.2465374            1    1.6186704      2.21538    2.2234635   0.41716756 0.0021872085   0.03503446  0.018923678    1.4624475    1.4898541   0.69711425  0.066666667    1.3007162        1e-10 1.7427856e-11    5.7379404    2.4874342    30.403515 0.00021317218  -0.19847361 0.0071913289     0.222604   0.30108947  -0.59361072 
  703000    4.1632468    1.2566214    2.9066253  -0.21516757   0.83783698   0.99628315   0.73923785   -1.2465374            1    1.5908106    2.1967318    2.2081439   0.36755601  0.013603029 -0.021052909  0.016732573    1.4347943    1.4597722   0.70517326  0.066666667    1.3077689        1e-10 1.7629332e-11    5.6723648     2.518266    30.403515 0.0043174348  -0.19978818  0.011796559   0.20475475    1.6366541   -2.0954383 
  704000     4.175571    1.2623652    2.9132058  -0.20682963    0.8416666    1.0069763   0.73879077   -1.2465374            1     1.590186    2.2311858    2.2211083   0.31826392 -0.0053626688  0.016714705 0.0082077716    1.4342641    1.4577412    0.7060278  0.066666667    1.3117721        1e-10 1.7650695e-11    5.6654993    2.5075503    30.403515 -0.0032389697  -0.18352329 -0.0011709635   0.18381809  -0.59545563   -1.6823921 
  705000      4.17127    1.2766872    2.8945828  -0.22409016    0.8512156   0.99327134   0.76283337   -1.2465374            1    1.5772099    2.1936886    2.1870252   0.35091601 -0.014356493 -0.0017767255 -0.072050778    1.4162138    1.4465678   0.69919388  0.066666667    1.3226822        1e-10 1.7479847e-11    5.7208738    2.5022071    30.403515  -0.01623883  -0.20779669 -0.021769269   0.18517364   0.26148571   -1.8372766 
  706000    4.1623284    1.2632796    2.8990488  -0.20983281   0.84227621   0.99110346    0.7496724   -1.2465374            1    1.6581005    2.2489834    2.2556287   0.46968925  -0.01761299 -0.094216526  0.027211703     1.499882    1.5277434   0.69856853  0.066666667      1.30262        1e-10 1.7464213e-11    5.7259952    2.4819282    30.403515 -0.012408757  -0.19014804 -0.004748918   0.20220363  -0.91851557   0.77856589 
  707000    4.1733251    1.2684618    2.9048633  -0.20946374   0.84573143   0.99523198   0.75270862   -1.2465374            1     1.577396    2.1843636    2.2046525    0.3431718 -0.0024355359  -0.13065212 0.0004910373    1.4185367    1.4464959   0.70148747  0.066666667    1.3119196        1e-10 1.7537187e-11    5.7021689    2.5027373    30.403515 -0.0060897546  -0.19302055 -0.0024574003   0.22455661   -1.6572602  -0.15085075 
  708000    4.1447674    1.2527841    2.8919833  -0.22297432   0.83527849   0.97952607   0.74552754   -1.2465374            1    1.5570416    2.1805532    2.1820968    0.3084748   0.01071035  -0.11337708  -0.02397561    1.3996979    1.4282073   0.69692324  0.066666667    1.3142832        1e-10 1.7423081e-11     5.739513    2.4878278    30.403515 0.0071438186  -0.20296258 -0.0027865187   0.21942581  -0.75792018   -1.1930197 
  709000     4.153142     1.270905     2.882237  -0.21561442   0.84736037    1.0076253   0.74762944   -1.2465374            1    1.5715418    2.1994108    2.1935454   0.32166931  0.017757484 -0.083083319 -0.025279759    1.4137545    1.4390117   0.70280478  0.066666667    1.2903334        1e-10 1.7570119e-11    5.6914809     2.511631    30.403515 -0.0018638796   -0.1695264 -0.008791465   0.15897506   0.09142257   0.15469699 
  710000    4.1769659    1.2820852    2.8948807  -0.21822059   0.85481461   0.99811648   0.76565641   -1.2465374            1    1.4262148     2.068985     2.073318   0.13634121  -0.01429575  -0.14828106 -0.010732568    1.2646229    1.2949353   0.69476747  0.066666667    1.3070331        1e-10 1.7369187e-11     5.757322     2.465996    30.403515 0.0063464745  -0.23983672  9.35722e-05   0.17820587    1.7627054     1.107993 
  711000    4.1669128    1.2728612    2.8940516   -0.2186724   0.84866462   0.99894929   0.75515365   -1.2465374            1    1.6392339    2.2395934     2.245179   0.43292933 -0.0082356891  -0.14389881 -0.060580463    1.4798586    1.5078449   0.69611918  0.066666667    1.3165575        1e-10 1.740298e-11    5.7461425    2.5001265    30.403515   0.01259438   -0.2039935 -0.0011279637    0.1867609    1.5329112    3.7808673 
  712000    4.1901224    1.2581684    2.9319541  -0.21592179   0.83886837    1.0042222   0.73596455   -1.2465374            1    1.6002948    2.2363145    2.2140595    0.3505105   0.02077138   -0.1029255  0.033249656    1.4449694    1.4682123   0.70552756  0.066666667    1.3100368        1e-10 1.7638189e-11    5.6695163    2.4896727    30.403515  0.004323213  -0.19176498 -0.002371847   0.22423286    2.3083971     2.884774 
  713000    4.1532555     1.268404    2.8848515   -0.2150928   0.84569287    1.0082069   0.74456001   -1.2465374            1    1.6994697    2.2848249    2.2840237   0.52956066 0.0095295608 -0.011527901  0.041754314    1.5423302    1.5668631   0.69910745  0.066666667    1.3087658        1e-10 1.7477686e-11    5.7215812    2.4728956    30.403515 -0.015923223  -0.21558006 0.0078136854   0.24435494    2.1802208    2.3459864 
  714000    4.1857188    1.2858166    2.8999022  -0.21299645   0.85730249   0.99246885   0.77321479   -1.2465374            1    1.5832009    2.2024089    2.2107829   0.33641104  0.004543428 0.0049047646 -0.052310442    1.4200138    1.4526643   0.70002383  0.066666667     1.309093        1e-10 1.7500596e-11    5.7140912     2.490461    30.403515 0.00022146851  -0.17815242  0.014295165   0.21107131    1.0778412    2.0226074 
  715000    4.1848925    1.2879601    2.8969324  -0.20737793   0.85873168    1.0101069   0.76454281   -1.2465374            1    1.5937073     2.186275    2.2238073   0.37103953 0.00045888898 -0.097632854 -0.00095363165    1.4323504    1.4608507   0.69382042  0.066666667    1.3069308        1e-10 1.7345511e-11    5.7651806    2.4826476    30.403515 0.0083141338  -0.23581618 -0.0077069252   0.21073459    2.2545231  -0.27929521 
  716000    4.1516917     1.260488    2.8912037  -0.21949787     0.840415   0.99343365   0.74519878   -1.2465374            1    1.4453804    2.0914335    2.0921388   0.15256895 -0.0080026448  0.059949548 -0.044372751    1.2881061    1.3147169   0.69100232  0.066666667    1.3056957        1e-10 1.7275058e-11    5.7886926    2.4956143    30.403515 -0.005496045  -0.17845602 0.00078688328   0.17481113   0.54441028    -1.401319 
  717000    4.1548485    1.2549227    2.8999258  -0.20790593   0.83670438   0.99625901   0.73741426   -1.2465374            1      1.73018     2.323876    2.3040406    0.5626233  0.015019573   0.01097564 -0.016952945    1.5745486    1.5991448   0.69118347  0.066666667    1.2914982        1e-10 1.7279587e-11    5.7871754    2.4832343    30.403515 -0.0033015902  -0.17105128 0.0084502431   0.18596488   0.54075556  0.036133232 
  718000    4.1937959    1.2860407    2.9077552  -0.21377586   0.85745194    1.0069851   0.76441084   -1.2465374            1    1.5899458    2.1784197    2.2035216   0.38789629  0.012256273 -0.058337078 -0.022378229    1.4286168    1.4574999   0.69055935  0.066666667     1.300616        1e-10 1.7263984e-11    5.7924059    2.4921041    30.403515 -0.0013473508  -0.20342721 -0.0027833648   0.21206986    1.2280834   0.53357922 
  719000    4.1591266    1.2603507    2.8987759  -0.21621888   0.84032343   0.99429394   0.74451398   -1.2465374            1    1.5598722    2.1991746    2.1889908   0.29145111 -0.011636469 -0.088948189  0.066902638    1.4027424    1.4290955   0.70189956  0.066666667    1.3115457        1e-10 1.7547489e-11    5.6988211    2.4948653    30.403515 0.0014205676  -0.21575585 -0.0041869154   0.20635469  -0.50458116    3.6499441 
  720000    4.1507613    1.2690672    2.8816941   -0.2213248   0.84613507   0.99615054   0.75279142   -1.2465374            1     1.710849     2.304708    2.2924277   0.53541135  0.031686511 -0.022392342 -0.012271939    1.5519723    1.5798281   0.69945317  0.066666667    1.3112284        1e-10 1.7486329e-11    5.7187531     2.506825    30.403515  0.012355214   -0.1668255 -0.0092296943   0.19690873   0.03808059   0.62345273 
  721000     4.164412    1.2485233    2.9158887  -0.21071479   0.83243768   0.97703522   0.74246814   -1.2465374            1    1.5539707    2.1849897    2.1673672   0.30955521 -0.017308789 0.0063365007 -0.0057105332    1.3972727     1.425464   0.69135655  0.066666667    1.3048235        1e-10 1.7283914e-11    5.7857266    2.4891985    30.403515 0.0053740746  -0.21087903 0.0081894139    0.1517838  -0.89775212  -0.63064754 
  722000    4.1740989    1.2573253    2.9167737  -0.21180128   0.83830625   0.99718224   0.73943934   -1.2465374            1    1.6222705    2.2436832    2.2210266   0.40210168 0.0073158809 -0.029743852  0.027348953    1.4662117    1.4911139   0.69817166  0.066666667    1.2978437        1e-10 1.7454292e-11      5.72925    2.4860383    30.403515 0.0090973375  -0.20154223 -0.010569741   0.18217483     -1.59224   0.19793797 
  723000    4.1443036    1.2493073    2.8949963  -0.21940975   0.83296037    1.0033913   0.72689143   -1.2465374            1     1.367995     2.025558    2.0337134  0.044713543 -0.0023940409 -0.023384324 -0.022824339    1.2145844    1.2360217   0.70721548  0.066666667    1.2963522        1e-10 1.7680387e-11    5.6559848    2.5145655    30.403515 -0.0060998306  -0.20059288 -0.0074614066   0.21975811  -0.17267411   -1.4551874 
  724000    4.1956692    1.2699325    2.9257366  -0.20737954     0.846712     1.019041   0.73946259   -1.2465374            1    1.7488319    2.3332186    2.3166224   0.59665475 0.0019022067  0.065197673  0.065249179    1.5927682    1.6148003    0.6977591  0.066666667     1.296931        1e-10 1.7443978e-11    5.7326375    2.4860096    30.403515 0.0024883266  -0.17714974 -0.00014212694    0.1571458  -0.62960514    4.3883987 
  725000    4.1698858    1.2732904    2.8965954  -0.20784581   0.84895081   0.98778262   0.76257736   -1.2465374            1    1.4893314    2.1323842    2.1440296   0.19158026 0.00086684149  0.016776099  -0.01729927    1.3283893    1.3594111   0.69750363  0.066666667    1.2966615        1e-10 1.7437591e-11    5.7347372    2.4938211    30.403515 -0.020900021  -0.26093961  0.010954301   0.20472455    1.1825181  -0.64132654 
  726000    4.1699037    1.2646953    2.9052084   -0.2091367   0.84322016     1.002556   0.74406754   -1.2465374            1    1.5665318    2.2056286    2.1889093   0.30505752 0.0011684754  0.017126461 -0.0042704737    1.4094962    1.4346684   0.69524206  0.066666667    1.2885067        1e-10 1.7381052e-11    5.7533918    2.4914987    30.403515 0.00056701866  -0.17025801 -0.0038042413   0.23682815   0.11671478   -0.6318263 
  727000     4.168904    1.2654729    2.9034311  -0.21482585   0.84373859    1.0006548   0.74609399   -1.2465374            1    1.6486354    2.2578366     2.229925   0.45814469 -0.0026857986  0.029494531 -0.0086970418    1.4911722    1.5170221   0.69294634  0.066666667    1.2921702        1e-10 1.7323659e-11    5.7724527    2.4731512    30.403515  -0.01041666  -0.17236026 0.0064824652    0.2119768   0.15434034   0.67244942 
  728000    4.1266381    1.2506879    2.8759502  -0.21904529   0.83388086    0.9955398   0.73327884   -1.2465374            1    1.5407037    2.1639611    2.1779025   0.28024746  0.010744441  0.041732383 -0.0015754875    1.3859451    1.4097631   0.69912967  0.066666667    1.2859361        1e-10 1.7478242e-11    5.7213993     2.484862    30.403515 -0.0061678696  -0.17342603 -0.0019339825   0.19329005   0.33798625   -1.8907664 
  729000    4.1637376    1.2527187    2.9110189  -0.22129586   0.83523488      1.00611   0.72888952   -1.2465374            1    1.5612119    2.1926034    2.1791169    0.3119153 -0.012966157 -0.026199913 -0.066161817    1.4073796     1.428881   0.69738344  0.066666667    1.2908473        1e-10 1.7434586e-11    5.7357255    2.4832762    30.403515 -0.014295536  -0.19410879 -0.0065667828   0.20729135  -0.49363296  -0.19912747 
  730000     4.172264     1.264439     2.907825  -0.21654866   0.84304927    1.0039133   0.74294424   -1.2465374            1    1.6160249    2.2380005    2.2123946   0.39767957 -0.018127943 -0.0030846462 -0.046072504    1.4592264     1.483983   0.70562191  0.066666667    1.2868175        1e-10 1.7640548e-11    5.6687583    2.4988797    30.403515 0.0050334498  -0.18687598 0.0037423781   0.19192859  -0.50030416    0.8615404 
  731000    4.1814517    1.2786516    2.9028001  -0.21074655   0.85252534    1.0302028   0.74194373   -1.2465374            1    1.6327242    2.2484899    2.2479907   0.40169207 0.00093640918  0.051300275  0.066207894    1.4761369    1.4972245   0.70524491  0.066666667    1.2841581        1e-10 1.7631123e-11    5.6717885    2.4818331    30.403515 -0.0085685363  -0.23900965 -0.011298861   0.20255003   -1.1708275  -0.87979126 
  732000     4.145013     1.277005     2.868008  -0.22273125   0.85142749    1.0032208   0.75697679   -1.2465374            1    1.7008831    2.2818549    2.2984904   0.52230392 0.0036719336  0.060800831  0.020393899     1.541123    1.5689323   0.71297473  0.066666667    1.2879873        1e-10 1.7824368e-11     5.610297    2.4766597    30.403515 0.0011433288  -0.19896444  0.010061675   0.18828139  -0.92993282   0.74181921 
  733000    4.1607795    1.2655112    2.8952683  -0.21948893   0.84376413   0.99718106   0.74830028   -1.2465374            1    1.5275018    2.1828042    2.1348519   0.26484921 0.0045294028    0.0532052 -0.069177176    1.3695729    1.3963454   0.71098907  0.066666667    1.2919928        1e-10 1.7774727e-11    5.6259655    2.4853824    30.403515 -0.0012982859  -0.20197374  0.013607985   0.16214347   0.41252274    -1.927136 
  734000     4.127641    1.2426157    2.8850253  -0.22854438   0.82849881   0.99901662   0.72237499   -1.2465374            1    1.5958403    2.2138025     2.212598   0.36112037 -0.0030563724  0.042211291 -0.0082088174    1.4433829    1.4644424   0.70795767  0.066666667    1.2933881        1e-10 1.7698942e-11    5.6500553    2.4830931    30.403515 -0.0089173276  -0.18755796 -0.0081618558   0.19346162    2.2022179  -0.25805749 
  735000    4.1466788    1.2634736    2.8832052  -0.22214189   0.84240558    1.0134607    0.7359493   -1.2465374            1      1.54064    2.1744204    2.1784947    0.2690049  0.017666598 0.0011165764  -0.04030122    1.3853178    1.4073424    0.7049031  0.066666667    1.2912896        1e-10 1.7622578e-11    5.6745388    2.4902025    30.403515 -0.011130527  -0.17399167 0.0046788024   0.19326218    2.6051493   -2.0235735 
  736000    4.1802045    1.2622491    2.9179554  -0.20400243   0.84158917   0.99324549   0.74722215   -1.2465374            1    1.5777686    2.2019343    2.1858549   0.34551678 -0.0065287031  -0.10621995   0.04324636    1.4200673    1.4471299    0.7054629  0.066666667     1.288366        1e-10 1.7636573e-11    5.6700359    2.4894486    30.403515  0.013269059  -0.18719253 -0.005711263   0.22561546    2.2124593     1.599441 
  737000    4.1870876    1.2906574    2.8964302  -0.22648575   0.86053005    1.0301468   0.75497334   -1.2465374            1    1.5919315    2.2036397    2.2017877   0.37036711 -0.015861409 0.0049839281 0.00036509101    1.4325942    1.4564392   0.70275632  0.066666667    1.2965031        1e-10 1.7568908e-11    5.6918734    2.5050401    30.403515 -0.00027790461  -0.17580066 -0.014563581   0.17479762  -0.28237623  0.093146752 
  738000    4.1483231    1.2533581     2.894965  -0.21798839   0.83566118   0.96923873   0.75255988   -1.2465374            1    1.5458358    2.1731184    2.1840896   0.28029952 -0.013838304 -0.066414983 -0.053960834    1.3870079    1.4183546   0.70467883  0.066666667    1.2902696        1e-10 1.7616971e-11    5.6763448    2.4853049    30.403515 0.0053592154  -0.21459757 -0.0021098622   0.20952442    0.4932876   -3.0369305 
  739000    4.1670128       1.2687    2.8983128  -0.21352559   0.84589025    0.9731114   0.76675206   -1.2465374            1    1.5655011    2.1908855    2.1590111   0.34660657  0.012026843  -0.01908749  0.035554019    1.4036779    1.4375105   0.69884366  0.066666667    1.2972941        1e-10 1.7471092e-11    5.7237408    2.4837686    30.403515 0.0096363803  -0.17306521 -0.015332707   0.20296626   0.38892595  -0.84581302 
  740000    4.1646973    1.2731834    2.8915138  -0.22097913   0.84887949    1.0176848   0.74382644   -1.2465374            1    1.5340292    2.1729344     2.170051   0.25910215 -0.033791413  -0.16173813  0.018031412    1.3770445     1.400176   0.69642658  0.066666667    1.2979181        1e-10 1.7410664e-11    5.7436062    2.4933563    30.403515 0.0032512265  -0.15848766  0.014549667   0.16384974  -0.23916545  -0.31769471 
  741000    4.2064144    1.2766725    2.9297419  -0.20252502   0.85120578   0.99620952   0.76098634   -1.2465374            1    1.5631355     2.185805    2.1803334   0.32326803 -0.012338307   -0.1442402  -0.06646232    1.4025292    1.4321068   0.69272854  0.066666667    1.3016929        1e-10 1.7318214e-11    5.7742676    2.4996048    30.403515 -0.00017163811  -0.20669506 0.0016100112   0.18159491    1.1023934    1.8770981 
  742000    4.1425694    1.2479716    2.8945979  -0.21403074   0.83206978   0.99123842   0.73301941   -1.2465374            1    1.6910068    2.2969803     2.255698   0.52034217 0.0030494845  0.015454011 0.0016775754     1.536303     1.560632   0.69788247  0.066666667    1.3023958        1e-10 1.7447062e-11    5.7316241    2.4852249    30.403515 2.3387442e-05  -0.18769185  0.016885009    0.2301057   0.60807248    1.5032603 
  743000    4.2051044    1.2951094    2.9099949  -0.21722722    0.8634984    1.0245919   0.76325392   -1.2465374            1    1.5500449    2.1373018    2.1908961   0.32193681 0.0096189625 -0.032842853  0.027213785      1.38896    1.4152832   0.69704845  0.066666667    1.3007518        1e-10 1.7426211e-11     5.738482    2.4822569    30.403515 0.0027589206  -0.19133963 0.0081960691   0.19141227   -0.1703488    1.0585718 
  744000    4.1948898     1.287022    2.9078678  -0.21180329   0.85810622     1.016093   0.75979686   -1.2465374            1    1.4469225    2.1141323    2.0994594   0.12717573  0.011028594 -0.090585278 -0.0069758449    1.2865672    1.3132786   0.70204046  0.066666667    1.3122225        1e-10 1.7551011e-11    5.6976773    2.4868931    30.403515 -0.0049929559  -0.18413192 -0.0010166138   0.20187809    1.1735152    -1.405753 
  745000    4.1727721     1.270137    2.9026351  -0.22313825   0.84684833    1.0125632   0.74372091   -1.2465374            1    1.6094389    2.2178117      2.21892   0.39158515 -0.0045826401 -0.0050570521 -0.016648306    1.4524765    1.4762594   0.70402996  0.066666667    1.2982448        1e-10 1.7600749e-11    5.6815764    2.5004765    30.403515 0.0033995605  -0.17964244 -0.011938162   0.17767158     1.298104    3.5174163 
  746000    4.1740697    1.2594696    2.9146002  -0.22369032   0.83973595    0.9979588   0.74127633   -1.2465374            1    1.5391847    2.1539108    2.1822629   0.28138038  0.017866798 -0.078324194 -0.0067623123    1.3827382     1.407926   0.70332247  0.066666667    1.2972222        1e-10 1.7583062e-11    5.6872917    2.5063705    30.403515 0.0026757209  -0.17421142 0.00038306209   0.21194603    1.5178782    3.0852286 
  747000    4.1425541    1.2479672    2.8945869  -0.21562545   0.83206687   0.98191078    0.7388277   -1.2465374            1    1.5075403    2.1654197    2.1093168   0.24788445  0.014512282 -0.065289269  0.058411787    1.3516106    1.3783924   0.70919859  0.066666667     1.290035        1e-10 1.7729965e-11    5.6401691    2.5000433    30.403515 -0.00037285395  -0.20810245 0.0082055303   0.25462567    1.6626135     1.308566 
  748000    4.1601351    1.2597248    2.9004103    -0.221574   0.83990614    1.0016879   0.73922861   -1.2465374            1    1.5542273    2.1972554    2.1777938   0.28763263 -0.010409208 -0.063920884 -0.049722092     1.398213    1.4224781   0.69929959  0.066666667    1.2921678        1e-10 1.748249e-11    5.7200091    2.5004477    30.403515 -0.0049301547  -0.15532729 0.0032914806   0.18308912    1.3740249    3.9100338 
  749000    4.1669031    1.2561944    2.9107087  -0.20244422   0.83755227   0.99046175   0.74240358   -1.2465374            1    1.6506283    2.2376635    2.2614812   0.45274021 -0.0036475641 -0.055177079 -0.020972119    1.4939439    1.5203556    0.6960521  0.066666667    1.2944672        1e-10 1.7401302e-11    5.7466963    2.4938206    30.403515 0.00015695609  -0.19250758 -0.00074433134   0.23990257   0.23903455    3.4757752 
  750000    4.1321204    1.2483047    2.8838157  -0.21584957   0.83229187   0.98199504   0.73914046   -1.2465374            1    1.5787005    2.2054541    2.1773583   0.35328902 -0.00032344408  0.010168735 -0.017145025    1.4227048    1.4495414   0.69602169  0.066666667    1.3026746        1e-10 1.7400542e-11    5.7469474    2.4950437    30.403515 0.0042713431  -0.19096756  0.012450073   0.19926312  0.014804081    3.7985471 
  751000    4.1709976    1.2556848    2.9153128  -0.21419001   0.83721249   0.99914501   0.73644056   -1.2465374            1    1.5343182    2.1769613    2.1503926   0.27560059 0.0024422556 -0.070703591  0.015528215    1.3788923    1.4029034   0.69708238  0.066666667    1.2952192        1e-10 1.742706e-11    5.7382027    2.5017025    30.403515  0.027030817  -0.19054169 -0.00082305198    0.1916255    1.4760716    2.6284076 
  752000    4.2049559    1.3003102    2.9046457  -0.21490719   0.86696591    1.0363035   0.76158427   -1.2465374            1    1.6536124    2.2666469    2.2557764   0.43841404 -0.025720976 -0.058541661 0.00066082306      1.49288    1.5173104   0.68869991  0.066666667    1.2948905        1e-10 1.7217498e-11    5.8080449    2.4796905    30.403515 0.0013608537  -0.18099977 -0.0021192867   0.18829835   0.59409097    4.1378894 
  753000    4.2057148    1.2822455    2.9234693  -0.22021192   0.85492152    1.0042575   0.76200285   -1.2465374            1    1.5492362    2.1637258    2.1759415   0.30804124 -0.0069324629 -0.050122999  0.065547994    1.3884154     1.417149   0.70233835  0.066666667    1.2825746        1e-10 1.7558459e-11    5.6952607    2.5090959    30.403515 -0.0064694158  -0.17540915 -0.020075056    0.2127717  -0.53747312    2.4096925 
  754000    4.2159917    1.3022069    2.9137848  -0.21552813   0.86823054    1.0245755   0.77094617   -1.2465374            1    1.5129905    2.1518883    2.1342472   0.25283598 -0.018466181   -0.0335965  0.032103353    1.3502822     1.378231   0.70149414  0.066666667     1.282429        1e-10 1.7537354e-11    5.7021146     2.494547    30.403515 -0.015582644  -0.18844843  0.014856593   0.20707056   -1.3796866 -0.098558509 
  755000    4.1675364    1.2612463    2.9062902  -0.21178001   0.84092053     1.001328   0.74109968   -1.2465374            1    1.5689017    2.2018106    2.1904094   0.31448496 0.0025124688  0.018811322 0.0012257984    1.4124924    1.4371998   0.69884457  0.066666667    1.2808043        1e-10 1.7471114e-11    5.7237334    2.4916719    30.403515 -0.002428083  -0.20209168 0.0097240951    0.2076558   -2.3839015   -0.3009518 
  756000    4.1545518    1.2699697    2.8845822  -0.21296025   0.84673677   0.99919658   0.75186991   -1.2465374            1    1.5753905    2.1969411    2.1789139   0.35031648 0.0010362628  0.075723157 -0.029163921    1.4167082     1.443969   0.69930061  0.066666667    1.2891746        1e-10 1.7482515e-11    5.7200007    2.4893803    30.403515 0.0025186714  -0.21692583 0.0024403179   0.20232011   -2.2413608    2.4107681 
  757000    4.1690185    1.2635791    2.9054393  -0.20737008   0.84247595   0.99302123   0.74880149   -1.2465374            1    1.7184347    2.2922285    2.3041906   0.55888502 -0.0037864007  0.063507574  0.013804151       1.5604    1.5878254   0.69305793  0.066666667    1.2816602        1e-10 1.7326448e-11    5.7715233    2.4781498    30.403515 -0.001979833  -0.19797642 -0.00039175165   0.20053784  -0.30096176    3.2224653 
  758000    4.1976225     1.290931    2.9066915  -0.21217951   0.86071246    1.0041064    0.7714979   -1.2465374            1    1.5346739    2.1720339    2.1545538   0.27743388  0.018652564  0.032850683 -0.045293067    1.3718491    1.4026066   0.70038058  0.066666667    1.2818216        1e-10 1.7509515e-11    5.7111806    2.4862135    30.403515 -0.0069265959  -0.21677647 -0.0096568687   0.19487023  -0.16052866   -1.3780881 
  759000    4.1803354    1.2727067    2.9076287  -0.21234327   0.84856161   0.98818723   0.76169338   -1.2465374            1    1.5037394    2.1572913    2.1174239   0.23650301 -0.019448016 -0.014345523 -0.019583768    1.3429839    1.3737659   0.70417237  0.066666667    1.2777429        1e-10 1.7604309e-11    5.6804273    2.5166808    30.403515 0.0030330243  -0.18519949 -0.012176354   0.18732338    1.0269427   -1.1873199 
  760000    4.1722684    1.2712065    2.9010619  -0.21836206   0.84756139   0.99925001   0.75317528   -1.2465374            1    1.6669474    2.2668009    2.2623529    0.4716884 0.0075533979 -0.046873234 -0.038488371    1.5079896    1.5355188   0.70512189  0.066666667    1.2786792        1e-10 1.7628047e-11    5.6727781    2.4775569    30.403515  0.011287761  -0.19176327 0.00083289575   0.17834741   0.74812191    2.6040725 
  761000    4.1889799    1.2756677    2.9133122  -0.21091133   0.85053583   0.99589127   0.76009709   -1.2465374            1    1.5460438    2.1718788    2.1920665   0.27418624 0.0025543843 -0.032469299  0.083108514    1.3856252    1.4150571   0.71449559  0.066666667    1.2754316        1e-10 1.786239e-11    5.5983551    2.4928858    30.403515  0.010557535  -0.23314439 -0.015035337   0.20255824   0.71387596  -0.77921449 
  762000    4.1561079    1.2541831    2.9019248  -0.21433781   0.83621124    1.0106756   0.72762926   -1.2465374            1    1.6638954    2.2584797    2.2576057   0.47560092 -0.012341385  0.074446186 -0.042447554    1.5103292    1.5309641   0.70573679  0.066666667    1.2807366        1e-10 1.764342e-11    5.6678355    2.4804011    30.403515 -0.0072330827  -0.21915336 -0.014654172   0.20470963   -1.1094451    3.0211012 
  763000    4.1429629     1.256057     2.886906  -0.21459358   0.83746063    1.0116006     0.729081   -1.2465374            1    1.5361657    2.1777769    2.1750004   0.25571968 -0.0015873721   0.18297448  0.026198741     1.382293    1.4031127    0.7107801  0.066666667    1.2786907        1e-10 1.7769503e-11    5.6276195    2.5018545    30.403515  0.014584595  -0.20166335 -0.0078718576   0.17181034   -1.7400534  -0.15101435 
  764000    4.1524918    1.2515554    2.9009364  -0.21875679   0.83445927   0.98334899   0.74181518   -1.2465374            1    1.5400637    2.1523991    2.2048191   0.26297275  0.013514622   0.05765142 -0.056768093    1.3835034    1.4107265   0.71483515  0.066666667    1.2726748        1e-10 1.7870879e-11    5.5956957     2.506439    30.403515 0.0061947929  -0.17227585 0.00023486914   0.18640107  -0.51612291   0.37183728 
  765000    4.1816947    1.2786515    2.9030432  -0.21372017   0.85252526    1.0180189   0.74953666   -1.2465374            1    1.6221441    2.2449465    2.2274245   0.39406129  0.021203196  0.024412742 -0.00085847837    1.4639543    1.4882469   0.70887163  0.066666667    1.2668544        1e-10 1.7721791e-11    5.6427706    2.4812185    30.403515 0.0075627387  -0.20840058  0.016203253   0.19225164  -0.78068551    1.2456979 
  766000     4.173772    1.2818931    2.8918789  -0.21731346   0.85468655   0.99906091   0.76485994   -1.2465374            1    1.5726669    2.2122537    2.2121136   0.29363321  0.015556294  -0.10208695 -0.019570809     1.411243    1.4412632   0.70963985  0.066666667     1.273616        1e-10 1.7740996e-11    5.6366621     2.492595    30.403515 0.0062012681  -0.20898794 -0.0080433496   0.15895203  -0.73398095    3.8073984 
  767000    4.1581828    1.2698745    2.8883083  -0.22086448   0.84667329   0.98661284   0.75960909   -1.2465374            1    1.5275892     2.171523    2.1471206   0.26412378   0.02038862  -0.11023487    0.0166186    1.3672735    1.3978227   0.71459953  0.066666667    1.2600101        1e-10 1.7864988e-11    5.5975408    2.4863631    30.403515 0.0019538807  -0.20159637 0.0020139782   0.17893174  -0.51327152    2.6055831 
  768000    4.1675914    1.2742666    2.8933248  -0.21283181   0.84960166   0.99747034    0.7575965   -1.2465374            1    1.6729054    2.2982458    2.2692902   0.45118023 0.0055828867  -0.11879645 0.0053007681    1.5130145    1.5417109   0.70726402  0.066666667    1.2691764        1e-10 1.7681601e-11    5.6555966    2.5005646    30.403515   0.01615152  -0.21806626 -0.007905383   0.20666541 0.0068105508    1.9077195 
  769000     4.183725    1.2829084    2.9008166  -0.21234921    0.8553635   0.99669022   0.76743631   -1.2465374            1     1.564697    2.1912314    2.1887112   0.31414843 -0.0027011211  -0.18190349 -0.031257146    1.4027295    1.4336052   0.71046535  0.066666667    1.2713827        1e-10 1.7761634e-11    5.6301127    2.4903259    30.403515 -0.010405425  -0.18893046  0.013833384   0.21483903    2.1369245   0.86195737 
  770000    4.1585957    1.2672135    2.8913823  -0.21049598   0.84489909   0.98470599   0.75791725   -1.2465374            1    1.5654334    2.1854195    2.2202664   0.29061443 0.0018035564  -0.22068265  0.034537899    1.4054749    1.4359178   0.70700366  0.066666667    1.2727564        1e-10 1.7675092e-11    5.6576793    2.4911798    30.403515 -0.0028521295  -0.16184756 0.0013671062   0.16731608    1.8297458  -0.36157046 
  771000    4.1762149    1.2680109     2.908204  -0.20902792   0.84543076   0.99802967   0.75047699   -1.2465374            1    1.6194176    2.2363937    2.2224139   0.39944514  0.015046697 -0.0078192257 -0.052817881    1.4610293    1.4881495   0.70570815  0.066666667    1.2898248        1e-10 1.7642704e-11    5.6680654     2.478724    30.403515 -0.0095296157   -0.1841601  0.015464979   0.18094241   -1.0237326    1.8118371 
  772000    4.2090114    1.2895235    2.9194879  -0.21291481   0.85977405    1.0298932   0.75390408   -1.2465374            1    1.4865789     2.112668    2.1333717    0.2136971  0.012106308 -0.041844187  0.011796485    1.3274673      1.35112   0.70581864  0.066666667    1.2893665        1e-10 1.7645466e-11    5.6671781    2.4713287    30.403515 0.0027677628  -0.20816114  -0.01325218   0.20968747    1.0432626   -2.1478729 
  773000     4.159586    1.2606749    2.8989111  -0.21255553   0.84053958   0.98214402   0.75243675   -1.2465374            1    1.6532378    2.2473525    2.2554361   0.45692485 -0.017123671   0.02338405  0.061244554    1.4944359    1.5240592   0.70356954  0.066666667    1.2879437        1e-10 1.7589239e-11    5.6852944    2.4699069    30.403515 -0.0049182944  -0.17374545 -0.0019828047    0.2001959  -0.11814401   0.57275384 
  774000    4.1663708    1.2681858     2.898185  -0.21762901   0.84554737    1.0022124   0.74805958   -1.2465374            1    1.5443317    2.1741464    2.1631223   0.29572629  0.015199787   -0.1039702 -0.040116611    1.3864536    1.4125135   0.70798819  0.066666667     1.278233        1e-10 1.7699705e-11    5.6498117    2.5010678    30.403515 0.0052876421  -0.15359207 -0.0029892159   0.18771162   0.43120268    2.2845574 
  775000    4.1640113    1.2645184    2.8994928  -0.21656754   0.84310221    1.0071356     0.741022   -1.2465374            1    1.6774642    2.2749161    2.2632487   0.49422788 -0.0014133647 -0.0084109914  0.059956477    1.5210714    1.5449985   0.71434319  0.066666667    1.2717074        1e-10 1.785858e-11    5.5995494    2.4964387    30.403515 -0.0084877261  -0.23333974 0.0056312864   0.22071467  -0.69273821    3.5564057 
  776000    4.1525027    1.2553809    2.8971219  -0.21691858   0.83700985   0.98460004   0.74517607   -1.2465374            1    1.5561698    2.2190883    2.1696708   0.27975022 -0.0018780018 -0.027412809 -0.0062151514    1.3989002    1.4266681   0.71118782  0.066666667    1.2604198        1e-10 1.7779695e-11    5.6243933    2.4828234    30.403515  0.012332297  -0.22408515 -0.028459046   0.16979649  -0.88996765    4.0527585 
  777000    4.1548373    1.2819641    2.8728732   -0.2233888   0.85473386     1.012305   0.75668297   -1.2465374            1    1.5566544    2.1833316    2.1917286   0.29490313 -0.0094060433  0.023727049  0.016358987    1.3969564    1.4235088   0.70544849  0.066666667    1.2644485        1e-10 1.7636212e-11    5.6701518    2.5024854    30.403515  0.001770583  -0.19517826  0.012117607    0.1762982  -0.84024248    1.3692443 
  778000    4.2275428    1.2903572    2.9371856  -0.21548155   0.86032987    1.0168103   0.76295968   -1.2465374            1    1.5497949    2.1705355    2.1867694   0.29207987 -0.016671126  -0.10483569   0.11227847    1.3887722    1.4160567   0.70273484  0.066666667    1.2680597        1e-10 1.7568371e-11    5.6920474    2.4814922    30.403515 -2.9436968e-05  -0.19725952 -0.0038618187   0.14751454  0.096825719    1.2597229 
  779000    4.1790707     1.278661    2.9004097  -0.22664173   0.85253162   0.99645597   0.76298509   -1.2465374            1    1.5415195    2.1582626    2.1728069   0.29348897 -0.0013267036 -0.080389144 -0.0077634575    1.3804914    1.4104584   0.70919176  0.066666667    1.2618931        1e-10 1.7729794e-11    5.6402235    2.5132454    30.403515  0.004909388  -0.19835017 0.0054906225     0.207628  0.077346896    1.8406658 
  780000    4.1516113    1.2679579    2.8836534  -0.22268677   0.84539544    1.0020333   0.74792459   -1.2465374            1    1.7917515    2.3821057    2.3289646   0.66418415 -0.0062572691  -0.10651577 -0.0085810205    1.6339019    1.6599569   0.70751804  0.066666667    1.2643518        1e-10 1.7687951e-11    5.6535661    2.4796979    30.403515  0.002306147  -0.17594466 -0.011581368   0.20875319   0.55289795    4.1726143 
  781000    4.1816893    1.2677659    2.9139234  -0.21452148   0.84526742   0.99761835   0.75046816   -1.2465374            1    1.4717983    2.1124644    2.1261726   0.17675805 0.0044766193 -0.038886487 -0.0088952036    1.3134119    1.3405844   0.70751706  0.066666667    1.2755627        1e-10 1.7687927e-11    5.6535739    2.5034252    30.403515 0.0079241091  -0.20907319  0.008808938   0.20164362   0.40306672    1.4710715 
  782000    4.1376428    1.2539592    2.8836836  -0.22740495   0.83606198   0.99572122   0.73670657   -1.2465374            1    1.6217105    2.2484029    2.2311891   0.38553942 0.0014446932  0.025381857  0.033762994    1.4662284    1.4907461     0.702126  0.066666667    1.2765175        1e-10 1.755315e-11    5.6969831    2.4945211    30.403515 0.0082678905  -0.22916641 -0.0011587727   0.19622239   0.83446984   0.73928226 
  783000     4.168322    1.2767684    2.8915536  -0.22368542    0.8512697    1.0108229   0.75198301   -1.2465374            1    1.5860638    2.1845532    2.2084805   0.36515751 -0.014556963 0.00017371977  -0.01771541    1.4273576    1.4531131   0.69576649  0.066666667    1.2687998        1e-10 1.7394162e-11    5.7490553    2.4743614    30.403515 0.0058064547  -0.20389651  0.013440947   0.20715124    1.0831431    0.4389461 
  784000    4.1577926    1.2484035    2.9093891  -0.21315237   0.83235776   0.98209281   0.73918649   -1.2465374            1    1.6285541     2.227999    2.2103259   0.44733735  0.028304415 -0.089550869 0.0051542047    1.4725486    1.4993822   0.70389728  0.066666667    1.2684849        1e-10 1.7597432e-11    5.6826473    2.5130712    30.403515 -0.0056297764   -0.1793699  0.011337345   0.20374015    1.3398447    2.1082672 
  785000    4.1456978    1.2554403    2.8902575  -0.21612374   0.83704945    1.0048735   0.73260586   -1.2465374            1    1.6395324    2.2408419    2.2602866   0.41746872 -0.0016050525  -0.13198708  0.015069971    1.4849158    1.5073642   0.69742315  0.066666667    1.2615245        1e-10 1.7435579e-11     5.735399    2.4864925    30.403515 0.0019828698  -0.20234024 0.0032640744   0.18121053    1.8243096  -0.26876359 
  786000    4.1602326    1.2760155    2.8842171  -0.21501881   0.85076773    1.0000356   0.75789078   -1.2465374            1    1.5416698    2.1783242    2.1695034   0.27718192  0.024557117 -0.085727334 0.0045979951    1.3817168    1.4101379   0.70215299  0.066666667    1.2621001        1e-10 1.7553825e-11    5.6967641    2.4951924    30.403515 -0.0080017644  -0.17216951 -0.011387757   0.18723982   0.80321327   0.36912844 
  787000    4.1743137    1.2603449    2.9139688  -0.21121317   0.84031955    1.0189144   0.72916416   -1.2465374            1    1.6341179    2.2397594     2.234575   0.42801912  0.012896391   -0.1378217 -0.00087944323    1.4802276    1.5001029   0.70497964  0.066666667    1.2558666        1e-10 1.7624491e-11    5.6739227     2.491885    30.403515  0.018281888   -0.1844219 0.0087956976   0.19306793    2.0630756   -1.1875483 
  788000    4.1722927    1.2572196    2.9150731  -0.21419716    0.8382358   0.98582762   0.74640121   -1.2465374            1    1.6786272    2.2923958    2.2374904   0.50599527 -0.006665787  -0.11159657   0.01411553    1.5210991     1.548964   0.70037812  0.066666667    1.2653205        1e-10 1.7509453e-11    5.7112007    2.4983576    30.403515 -0.0082758847  -0.20174346 -0.011108889   0.22446519   0.58726247   0.62277627 
  789000    4.1663208    1.2673679    2.8989529  -0.22101054   0.84500207   0.99868337   0.74937367   -1.2465374            1    1.5788551    2.1726605    2.1758111   0.38809366 -0.024147823 -0.092408175 -0.0085748749    1.4206996    1.4475011   0.70086363  0.066666667    1.2573998        1e-10 1.7521591e-11    5.7072444    2.4994244    30.403515 -0.005748946   -0.2138946 0.0024311377   0.19053695  -0.20227628   0.45020629 
  790000    4.1794599    1.2838791    2.8955807  -0.21487377   0.85601073    1.0130662   0.75828142   -1.2465374            1    1.6234291    2.2261477    2.2340551   0.41008465 0.00015311344   -0.0461082  0.033409791    1.4633937    1.4901834   0.69643472  0.066666667    1.2592785        1e-10 1.7410868e-11    5.7435391    2.5025972    30.403515 -0.012023634  -0.18962221 0.0075121383   0.19277551   0.90319115   -1.4326206 
  791000    4.1673979    1.2737859    2.8936119  -0.21359771    0.8492812    1.0005984   0.75512684   -1.2465374            1    1.5699615    2.2056157    2.1691442    0.3351247 -0.0012311255  0.028039735 -0.0074445722    1.4105919    1.4383556   0.70059761  0.066666667    1.2564326        1e-10 1.751494e-11    5.7094114    2.4875181    30.403515 0.0072868946  -0.20007787 -0.017039423   0.19557572   0.23319915    3.2096776 
  792000    4.2067923    1.2988207    2.9079717  -0.21490048    0.8659728     1.024129   0.76755925   -1.2465374            1    1.6350467    2.2507445    2.2508725   0.40352303  0.011696766 -0.0038752374 -0.058406678    1.4730532    1.5003458   0.70275491  0.066666667    1.2583108        1e-10 1.7568873e-11    5.6918848    2.5308549    30.403515 0.0031706077  -0.15494254 0.0024772084   0.18643718   0.27101529   -1.4933053 
  793000    4.1608402    1.2654349    2.8954053   -0.2129265   0.84371327   0.98855594   0.75359291   -1.2465374            1    1.6140299    2.2363797    2.2208271   0.38488294 -0.0092361017  0.063227281  0.038585759     1.454984    1.4840079    0.6937314  0.066666667    1.2672552        1e-10 1.7343285e-11    5.7659204    2.4822671    30.403515 0.00017954742  -0.15209362 -0.0066460932   0.17447679    0.4246336    1.1156923 
  794000     4.182031     1.253155     2.928876  -0.21955982   0.83552579   0.99989257   0.73323652   -1.2465374            1    1.4622653    2.1022446    2.1231615   0.16138973  0.044104009  0.066420241  0.018373382    1.3075156    1.3307522    0.7017967  0.066666667    1.2708251        1e-10 1.7544917e-11    5.6996563    2.4865658    30.403515 -0.010169383  -0.20275487 -1.5405139e-05   0.16417399   0.25747358    0.7755352 
  795000    4.1789252     1.266348    2.9125772  -0.20977732   0.84432205    1.0009016   0.74688736   -1.2465374            1    1.5859325    2.1974336    2.2216033   0.33876065 0.0010921754 -0.043766405 -0.023674507    1.4283018    1.4542868   0.70489147  0.066666667    1.2790678        1e-10 1.7622287e-11    5.6746324    2.4858768    30.403515 -0.010401091  -0.18115279 0.0029961927   0.23071147   0.69554204     0.806802 
  796000    4.1585795    1.2748483    2.8837312  -0.21699884   0.84998954   0.99764952   0.75811451   -1.2465374            1    1.6692306    2.2704056    2.2713742   0.46591211 -0.016114222 -0.024937933 -0.0078402861    1.5092305    1.5380126   0.69959574  0.066666667    1.2729883        1e-10 1.7489893e-11    5.7175877    2.4778297    30.403515 -0.015478986  -0.19018415 0.0015100909   0.17480294 -0.086982908    4.4309709 
  797000     4.185098    1.2969923    2.8881058  -0.21921597   0.86475374    1.0219263     0.766953   -1.2465374            1    1.6376226    2.2663886    2.2509947   0.39548447 -0.0016274848 -0.035931587    0.0624543    1.4757571    1.5032115    0.7065577  0.066666667    1.2735467        1e-10 1.7663943e-11    5.6612503    2.4882256    30.403515 -0.0093301556  -0.17425458 -0.0035000133   0.19416536  -0.28984008    2.9913486 
  798000     4.218377    1.2923288    2.9260482  -0.20909244   0.86164444   0.99599322   0.77806703   -1.2465374            1    1.5887842    2.1970114    2.2093465   0.35999457 -0.00017285211  -0.13245271 -0.0088408862     1.424573     1.457784   0.70360171  0.066666667    1.2880333        1e-10 1.7590043e-11    5.6850345    2.4927537    30.403515 -0.0068940843  -0.21874637 -0.0090111457   0.19845175   0.53275859    1.5878952 
  799000    4.1944877    1.2593308     2.935157  -0.22023371    0.8396434   0.99406287   0.74355404   -1.2465374            1    1.5973787    2.1816575    2.2089913   0.40148729 0.00097789515 -0.053269924 -0.0029093395    1.4404515    1.4666324   0.70884112  0.066666667    1.2931076        1e-10 1.7721028e-11    5.6430135    2.5020828    30.403515 -0.0028946229  -0.20069419  0.022800172   0.18442696  -0.35193764   0.91878624 
  800000    4.1650105    1.2627322    2.9022783  -0.21454186   0.84191127    1.0115296   0.73635031   -1.2465374            1    1.5465704    2.1827122    2.1691049   0.28789422   0.01304866 -0.088682806 -0.0060347622    1.3911636    1.4135268   0.70170634  0.066666667    1.3002396        1e-10 1.7542658e-11    5.7003903    2.4867401    30.403515    0.0185844  -0.19855203 -0.0097940408   0.21172678  -0.14304367   -3.5241637 
  801000    4.1768631    1.2669706    2.9098926  -0.21332811   0.84473713    1.0007622   0.74764802   -1.2465374            1    1.5982965    2.2149097    2.2002119   0.37976804 0.0025038332  -0.11202464   0.03477071    1.4405053    1.4666691   0.69859949  0.066666667    1.2949455        1e-10 1.7464987e-11    5.7257414    2.4942517    30.403515 -0.0034518748  -0.20628643  0.011127697   0.20189793   0.23790153    2.1616967 
  802000    4.1941912    1.2716237    2.9225675  -0.21082569   0.84783957     1.001055   0.75250201   -1.2465374            1    1.5399777    2.1410055    2.1862818   0.29264583 -0.023488892 -0.027573466 -0.0098805163     1.381162    1.4083118   0.69856781  0.066666667    1.2876996        1e-10 1.7464195e-11     5.726001    2.4928537    30.403515 0.0033170473  -0.17826305 0.0025495491     0.196273  -0.14482802   0.64106193 
  803000     4.167422    1.2694572    2.8979648  -0.21542187   0.84639507   0.99869326   0.75162887   -1.2465374            1    1.5246015    2.1361118    2.1569703   0.28072227 -0.010447197 -0.024754971  0.027667664    1.3659701    1.3932462   0.70396682  0.066666667    1.2931943        1e-10 1.7599171e-11     5.682086    2.5138404    30.403515 0.0072876505  -0.21994733 0.0018691392   0.21504009    0.6917482    2.0738228 
  804000    4.1226554    1.2414855    2.8811699  -0.21259756   0.82774531   0.96362681   0.74320682   -1.2465374            1    1.6495096     2.251984    2.2701841   0.42636058   0.01175331  -0.03179402 -0.033148191    1.4926556    1.5227664   0.69660183  0.066666667    1.2906105        1e-10 1.7415046e-11    5.7421612    2.4784167    30.403515 0.0022611313  -0.17121577 -0.0065613926   0.17201186   0.42513899    5.8290372 
  805000    4.1798435    1.2679683    2.9118751  -0.20445348    0.8454024   0.99932122   0.74962604   -1.2465374            1    1.4764951    2.1485148    2.1159258   0.16504453 -0.002081178  0.070640702  0.017884088    1.3182864    1.3450571   0.69607738  0.066666667    1.2801512        1e-10 1.7401934e-11    5.7464876    2.4953472    30.403515 -0.0076558638   -0.1844235 0.0070135425    0.1756935    -1.124811   0.59957638 
  806000    4.1794099    1.2559516    2.9234584  -0.21516085   0.83739036   0.99842538   0.73717778   -1.2465374            1    1.6606583    2.2342123    2.2663839   0.48137869 0.0061849473  -0.01388568  0.052460919    1.5050768    1.5293382   0.69631563  0.066666667    1.2758776        1e-10 1.7407891e-11    5.7445214      2.49745    30.403515 -0.0027600804  -0.17371686 -0.012157379   0.16590782    -1.047544    2.8891099 
  807000     4.148348    1.2696557    2.8786923  -0.21494688   0.84652745   0.99759119   0.75253058   -1.2465374            1    1.4879066    2.1420018    2.1464033    0.1753147 -0.013285576  0.044828419 -0.062989468    1.3290849    1.3566962   0.69527058  0.066666667    1.2816623        1e-10 1.7381765e-11    5.7531558    2.4860316    30.403515 0.0006783813  -0.19448276  0.004436389   0.17163133  -0.74598154   0.92706566 
  808000    4.1702272    1.2678796    2.9023476  -0.21468368   0.84534322    1.0103267   0.74267131   -1.2465374            1    1.6708864    2.2988542    2.2560002   0.45780479  0.002523099 -0.016410779 -0.033542257    1.5141455     1.538001   0.70182546  0.066666667    1.2877603        1e-10 1.7545637e-11    5.6994227    2.4765416    30.403515 -0.021509052  -0.20970477 -0.0091817636   0.19831422    -1.239961    4.0092436 
  809000    4.1650352    1.2829916    2.8820436   -0.2154178   0.85541895    1.0190613   0.75358459   -1.2465374            1    1.4592596    2.1205986    2.1247846   0.13239576  0.014591942 -0.085615929 -0.017443877    1.3002155    1.3252254   0.70675021  0.066666667    1.2896885        1e-10 1.7668755e-11    5.6597082    2.4785092    30.403515 0.00087480047  -0.21161161 0.0036222842   0.18971122   0.19723928   -0.8736384 
  810000    4.1462382     1.271958    2.8742802  -0.22397443   0.84806244    1.0058708   0.74986256   -1.2465374            1    1.7544307    2.3324308    2.3346231   0.59623817 -0.0076495813 -0.055433653   0.02228171    1.5961721    1.6221313    0.7112036  0.066666667     1.287535        1e-10 1.778009e-11    5.6242685    2.4995079    30.403515  0.011315484  -0.18541869 0.0088193685   0.17225635   0.29934918    6.0546832 
  811000    4.1273556    1.2431452    2.8842103  -0.21543904    0.8288519   0.99614662   0.72473677   -1.2465374            1    1.5785634     2.195816    2.2159869   0.32388709  0.018283623 -0.095735613 -0.053042673    1.4256075     1.447543   0.71424104  0.066666667    1.2922468        1e-10 1.7856026e-11    5.6003503    2.5105339    30.403515 -0.0059957065  -0.21115126 -0.018343246   0.20914394   0.91868043    2.2188833 
  812000    4.1618286    1.2705659    2.8912627  -0.21380607   0.84713432    1.0108727    0.7452387   -1.2465374            1    1.4306458    2.1008421    2.0755899   0.11550556 -0.0063665836  -0.10450624 -0.039724866    1.2733631    1.2976886   0.70748984  0.066666667     1.286593        1e-10 1.7687246e-11    5.6537915      2.50325    30.403515 0.0026850392  -0.19544223 -0.013557292   0.16882716   0.87941406   -2.0786435 
  813000    4.1952272    1.2607029    2.9345244   -0.2251959   0.84055822     1.001443   0.74043981   -1.2465374            1    1.6094723    2.1943704    2.2183749   0.41567148 0.0085155603  0.014694076 -0.018494115    1.4532023    1.4777553    0.6997772  0.066666667    1.2760335        1e-10 1.749443e-11     5.716105    2.4725593    30.403515  0.002432693  -0.18579639 0.0023626519   0.20553796    1.1023549    1.7101646 
  814000    4.1858341    1.2709223    2.9149117  -0.19939985   0.84737192   0.99804543    0.7536184   -1.2465374            1    1.5695638    2.2148199    2.2161159   0.27775544 -0.0067975739  0.051843037 -0.037479488    1.4105125    1.4382937   0.70573795  0.066666667    1.2862022        1e-10 1.7643449e-11    5.6678261    2.4859917    30.403515 -0.00099425507  -0.22132956  0.011830108    0.2155816    1.6232213   0.17070418 
  815000    4.1550239    1.2717679     2.883256   -0.2221087   0.84793572    1.0095504   0.74736373   -1.2465374            1    1.6341303    2.2573382    2.2247673   0.42028533  0.013329141   0.11686167 -0.00013182453     1.476399    1.5013469   0.71265917  0.066666667    1.2925798        1e-10 1.7816479e-11    5.6127812     2.488227    30.403515 0.0034626767  -0.19277108 0.0024368558   0.18881138    1.5679802    2.6124586 
  816000    4.1493493    1.2716626    2.8776867  -0.21046412   0.84786552    1.0347057   0.73157287   -1.2465374            1    1.5593225    2.1822325    2.2081075    0.2876275  0.017059202   0.10445741 0.0088887775    1.4049239    1.4232306    0.7110533  0.066666667    1.2872343        1e-10 1.7776333e-11    5.6254573    2.5132615    30.403515  0.015169288  -0.24519046 -0.0067249534   0.17851669    2.9423948    1.2171756 
  817000    4.1589046    1.2654889    2.8934157  -0.21654099   0.84374929    1.0087702   0.74105378   -1.2465374            1    1.5671702     2.211561    2.1753137    0.3146358  0.016288513   0.04153062  0.039138972    1.4107706    1.4344894   0.71032086  0.066666667    1.2780619        1e-10 1.7758021e-11     5.631258    2.5120484    30.403515 -0.0029767359   -0.1961708  0.014806451   0.21937906    2.3559475    1.2619617 
  818000    4.1492335    1.2655833    2.8836502  -0.21829329   0.84381222    1.0005551   0.74627561   -1.2465374            1     1.511875    2.1600305    2.1354425     0.240152 -0.0049526179  0.085289242   0.11345948    1.3543734    1.3802748   0.70942717  0.066666667    1.2789207        1e-10 1.7735679e-11    5.6383518    2.4904692    30.403515   0.01014308   -0.1827378 0.00029781045   0.17246576  -0.82325119  -0.88587355 
  819000    4.1357482    1.2571372     2.878611  -0.22754147   0.83818086   0.99706695   0.73930764   -1.2465374            1    1.5561962    2.1585773    2.1769325   0.33307872 0.0033079908   0.05881315  0.056681818    1.4001652    1.4250548   0.70856247  0.066666667    1.2708189        1e-10 1.7714062e-11    5.6452326     2.472439    30.403515 0.0034804921   -0.1978166  0.012107131   0.19356135  -0.72494372    2.7217911 
  820000    4.1317797    1.2623143    2.8694653  -0.22573644   0.84163266    1.0110285   0.73621033   -1.2465374            1    1.6036676    2.2145873     2.230166   0.36624955 -0.00021546946  0.031556208 -0.052018764    1.4482903    1.4706899   0.70820648  0.066666667    1.2644141        1e-10 1.7705162e-11    5.6480703    2.4801441    30.403515 0.0094117267  -0.17614744 -0.00063412434   0.18517577   -1.5847446    2.8122183 
  821000    4.1621402    1.2765487    2.8855915  -0.21648433   0.85112323    1.0170091   0.74788999   -1.2465374            1    1.5636056    2.1986342    2.1974011   0.29478147 -0.005593098 -0.0082578498 -0.016070212    1.4057633    1.4298412   0.70714456  0.066666667    1.2706606        1e-10 1.7678614e-11    5.6565521    2.4870695    30.403515  0.013308875  -0.19035052 -0.0051006259   0.18553619   -1.4056391  -0.82785923 
  822000    4.1641293    1.2644059    2.8997234  -0.21148167    0.8430272   0.99347389   0.74941429   -1.2465374            1    1.6174096    2.2408204    2.2190198   0.39238858 0.0031927285   0.12599721  -0.03398594    1.4592456    1.4867408   0.70988208  0.066666667    1.2735138        1e-10 1.7747052e-11    5.6347386     2.504698    30.403515  -0.00215715  -0.16084931  0.012045534   0.21395621   -1.4711008 -0.073541882 
  823000    4.1507123    1.2749967    2.8757156  -0.21555047   0.85008845    1.0071037   0.75238317   -1.2465374            1    1.5338483    2.1887155    2.1569749   0.25585451  0.014417163 -0.018131284  0.010861893    1.3750577    1.4013868   0.70368753  0.066666667    1.2802274        1e-10 1.7592188e-11    5.6843412    2.4991461    30.403515 -0.0012821465  -0.22436681 -0.0055905083   0.17369548   0.87493002   0.18881142 
  824000    4.1738806    1.2715136     2.902367  -0.21236427   0.84776616   0.99132584   0.75844607   -1.2465374            1    1.6985124    2.2983486    2.2858119   0.51137667  0.008931826 -0.036893672  0.053260697    1.5384422    1.5681261   0.70755196  0.066666667    1.2783802        1e-10 1.7688799e-11    5.6532951    2.4949876    30.403515 0.0085215976  -0.20893808 0.00059383184   0.20534782   0.61411751     4.388515 
  825000    4.1708062    1.2848515    2.8859547  -0.21775365   0.85665901    1.0194815   0.75533581   -1.2465374            1    1.5646915    2.1970905    2.1867833   0.31020068 -0.025176958  0.017948317 -0.042855743    1.4052778     1.430602   0.70865644  0.066666667    1.2774741        1e-10 1.7716411e-11    5.6444841    2.4958548    30.403515 0.0047322962  -0.21752472 -0.0057738724   0.19789293    1.2002442    2.4968092 
  826000    4.1673355    1.2676082    2.8997273  -0.22962555   0.84516225   0.99858972   0.74969208   -1.2465374            1    1.6281346    2.2375177      2.22321   0.42367601  0.014600287 0.0093021734  0.018344981    1.4699119    1.4967929   0.70708075  0.066666667    1.2711012        1e-10 1.7677019e-11    5.6570625    2.4975981    30.403515 0.0018865247   -0.1989593 0.0056738357    0.1722981    1.0392178    1.8556952 
  827000     4.148808    1.2793669    2.8694411  -0.22152185   0.85300221     1.004026   0.75903138   -1.2465374            1    1.4596416    2.0855708     2.126478   0.16687614 -0.010390458  0.059262695 -0.0023534734    1.2994479    1.3275849   0.70682943  0.066666667    1.2660841        1e-10 1.7670736e-11    5.6590739    2.4836892    30.403515 -0.00073028635  -0.19393789 -0.0036041206   0.22555878  -0.19259649  -0.29342158 
  828000     4.155048    1.2685075    2.8865405   -0.2234049   0.84576187   0.99311191   0.75407927   -1.2465374            1    1.5465526    2.1723832    2.1846213   0.28265328 -0.019720029  0.037609694 -0.051398248     1.387404    1.4159314   0.71146416  0.066666667    1.2617617        1e-10 1.7786604e-11    5.6222088    2.4800394    30.403515 -0.0092223675  -0.19879572 0.0094796661   0.20865818   0.91551929    1.7428542 
  829000    4.1653331    1.2691536    2.8961795  -0.22657055   0.84619264   0.97434789   0.76647238   -1.2465374            1    1.5884048     2.223099    2.2116105   0.33050475 -0.0075821545 -0.00067636347 -0.00036803439    1.4266406    1.4602515   0.71531923  0.066666667    1.2490087        1e-10 1.7882981e-11     5.591909    2.4998889    30.403515 0.0064191877  -0.19675644 -0.0035691366    0.2211752  -0.60977835 -0.036181743 
  830000    4.1933044    1.2825604     2.910744  -0.21619292   0.85513147    1.0099337   0.75880624   -1.2465374            1    1.5808599    2.2170279    2.2045478   0.32100408 0.00036662584 -0.013017384  0.047144294    1.4207137    1.4480262   0.70680147  0.066666667    1.2466546        1e-10 1.7670037e-11    5.6592978    2.4824189    30.403515 -0.0018293809  -0.19192943  0.004155079   0.16981665   -1.7118736   0.82979154 
  831000    4.1502095    1.2562512    2.8939582   -0.2136969   0.83759015   0.98591765   0.74529697   -1.2465374            1    1.7289533    2.2978983    2.3077215   0.58124003 0.0068661356  0.023198717  0.062582887    1.5716582    1.5992783   0.71264396  0.066666667    1.2501216        1e-10 1.7816099e-11     5.612901    2.5035627    30.403515 0.0077161428  -0.21372247 -0.0003853938   0.20713045   -1.2124922    2.0635388 
  832000    4.1916229    1.2895221    2.9021008  -0.22303699   0.85977311    1.0153673   0.76295512   -1.2465374            1     1.629227    2.2427197    2.2364077   0.40855361 -0.012094508 -0.036935425   0.01867332    1.4682052    1.4956786   0.71979106  0.066666667     1.253218        1e-10 1.7994776e-11    5.5571682    2.4962941    30.403515 -0.0047541962  -0.21228251 0.0034579978   0.22405682   0.63787759    1.8428688 
  833000    4.1900645     1.295022    2.8950425  -0.21809405   0.86344009    1.0213294   0.76519242   -1.2465374            1    1.7033738    2.2773771    2.3089564   0.52378774 -0.0083981252  0.010257214 -0.062502724    1.5418798    1.5690412   0.71582878  0.066666667    1.2474902        1e-10 1.789572e-11    5.5879284    2.4924801    30.403515 -0.019185633  -0.20044687  0.012119173   0.23552166   0.15889235    2.6886293 
  834000    4.1169647    1.2439152    2.8730495   -0.2247294   0.82936523    0.9974031   0.72478706   -1.2465374            1    1.6182642    2.2433485    2.2243252   0.38711896 -0.0018853186 -0.040431162  0.047514217    1.4652978    1.4870786   0.71909846  0.066666667    1.2588837        1e-10 1.7977461e-11    5.5625206     2.501078    30.403515  0.015103634  -0.20198327 -0.00065951088   0.20589435    1.8158898    2.4353273 
  835000    4.1430736    1.2472585    2.8958151  -0.21531116   0.83159438   0.98953863   0.73330698   -1.2465374            1    1.5181974    2.1667365    2.1676407   0.22021502 -0.0076008031  0.037510154 -0.023400387    1.3634329    1.3880462   0.71025318  0.066666667    1.2598181        1e-10 1.775633e-11    5.6317946    2.4807131    30.403515  -0.00502227   -0.1851227 -0.00049469187   0.18098121   0.40538816   -1.0584365 
  836000    4.1681037    1.2813956    2.8867081   -0.2163317   0.85435488    1.0170852    0.7530887   -1.2465374            1    1.6501336    2.2532321    2.2832242   0.41394463 -0.0071962817 -0.041194971 -0.010347755    1.4911941    1.5163593   0.71169954  0.066666667    1.2505685        1e-10 1.7792489e-11    5.6203492    2.4925921    30.403515 -0.017109447  -0.19154744  0.012644222   0.16871106   0.77471041   0.31906741 
  837000     4.159719    1.2582834    2.9014356  -0.22464895    0.8389451   0.98946853   0.74528365   -1.2465374            1    1.6202823    2.2167516    2.2383785   0.40571674 -0.018285413   0.01645552  0.093919717    1.4629901    1.4901403   0.70800099  0.066666667    1.2569699        1e-10 1.7700025e-11    5.6497096    2.4845164    30.403515  0.001835166   -0.1847416  0.010720126   0.18400975    1.7038822   0.26039914 
  838000    4.1195571    1.2442624    2.8752947  -0.22025344   0.82959676   0.98134131   0.73517268   -1.2465374            1    1.6175172    2.2255155     2.205249   0.42178707 -0.006036935 -0.050781836  0.046583296    1.4623589    1.4884441    0.7090027  0.066666667    1.2598305        1e-10 1.7725067e-11    5.6417275     2.470698    30.403515 -0.009053571   -0.2406799  0.023865017   0.19131786   0.56310248   0.95538684 
  839000    4.1487857    1.2446554    2.9041303  -0.22321244   0.82985875   0.98291717   0.73461591   -1.2465374            1    1.6049094    2.2247033    2.2135832   0.37644167 -0.0075188775 -0.075606674  0.055790809    1.4498686     1.475629   0.71065239  0.066666667    1.2693265        1e-10 1.776631e-11    5.6286309    2.4816066    30.403515  0.001637147  -0.21426781  0.016032345   0.18042474    2.4830482    3.9604941 
  840000    4.1474793    1.2551884    2.8922909  -0.22114122   0.83688152   0.98743051   0.74320378   -1.2465374            1    1.6619831    2.2659884    2.2612983   0.45866281 0.0048535414  -0.09941764 -0.028231931    1.5051299    1.5321092    0.7099766  0.066666667    1.2733539        1e-10 1.7749415e-11    5.6339885    2.4725927    30.403515  0.022333654  -0.18857313 0.0054327649   0.16777617    2.7234154   0.59820285 
  841000    4.1753664    1.2878696    2.8874968  -0.22440737   0.85867133    1.0120865   0.76321116   -1.2465374            1    1.4789083    2.1192912    2.1441854   0.17324846  0.034769533 -0.093125769  -0.03601365    1.3178325    1.3457915   0.71465855  0.066666667      1.27052        1e-10 1.7866464e-11    5.5970785    2.5047488    30.403515 -0.0027555553  -0.17284724 -0.0020766463   0.18661037    1.7322982    2.1630701 
  842000    4.1800472     1.283582    2.8964652  -0.22200272   0.85581262     1.012389   0.75838189   -1.2465374            1    1.6173372     2.227768    2.2245955   0.39964802  0.014806536  0.056395399  0.021573137    1.4572806    1.4841805   0.71031525  0.066666667     1.273365        1e-10 1.7757881e-11    5.6313024    2.4941018    30.403515 -0.015104264  -0.17858137 -0.009643277   0.19847916   0.54930034    1.1597359 
  843000    4.1883988     1.298388    2.8900108  -0.21837416   0.86568431    1.0243958   0.76692466   -1.2465374            1    1.5585347    2.1846619     2.184857   0.30608526  0.021434278 0.0085815382 -0.027706329    1.3966751    1.4237988   0.70485876  0.066666667    1.2735762        1e-10 1.7621469e-11    5.6748958    2.4835371    30.403515 -0.007232047  -0.17785378  0.017399514   0.17695304   0.40983194     3.749929 
  844000    4.1510555    1.2635436    2.8875119  -0.21658398   0.84245227    1.0143663   0.73546072   -1.2465374            1    1.5269205    2.1550483    2.1578102   0.26790287 0.0064872148 -0.062800142  -0.04440603    1.3717014    1.3935037   0.70612069  0.066666667    1.2762505        1e-10 1.7653017e-11     5.664754    2.4865641    30.403515 -0.0015163212  -0.19493298 -0.00054665123   0.18937956   0.53527458    3.1149193 
  845000    4.1715313    1.2635336    2.9079977  -0.22572717   0.84244559   0.99302761   0.74874823   -1.2465374            1    1.6850563    2.2900102    2.2742992   0.49085951   0.01085381  0.023592766  0.015712253    1.5270329    1.5544462   0.71310165  0.066666667    1.2723204        1e-10 1.7827541e-11    5.6092984    2.5062609    30.403515 -0.001828661  -0.20167329 -0.0019831672   0.18173775  -0.64924436    2.8604283 
  846000    4.1670568    1.2657806    2.9012762  -0.21750532   0.84394375   0.98461645   0.75642217   -1.2465374            1    1.6386256    2.2369375    2.2596992   0.41924013 0.0054983692 -0.044772097 0.0059413465    1.4789826    1.5091218   0.70936321  0.066666667     1.269861        1e-10 1.773408e-11    5.6388602    2.4777015    30.403515 0.0019546998  -0.17856136 -0.00045880117   0.22664557   -1.1569693    1.3399459 
  847000    4.1770208    1.2828284    2.8941924  -0.22233428   0.85531015    1.0110041   0.75842924   -1.2465374            1    1.6108886    2.2317251    2.2218771   0.37906369  0.011599866  -0.10881796 0.00025550892     1.450822    1.4779141   0.70942236  0.066666667    1.2673569        1e-10 1.7735559e-11    5.6383901    2.4781757    30.403515 0.0007502681  -0.15564691  0.010971315   0.25190323    1.3163249   0.58576082 
  848000    4.1496692    1.2807309    2.8689383  -0.22649617   0.85391168     1.023493   0.74837589   -1.2465374            1    1.6786008    2.2708919    2.2838573   0.48105322 -0.0048446567 -0.040736169 0.0064582535     1.520656    1.5439837    0.7167195  0.066666667    1.2616946        1e-10 1.7917988e-11    5.5809839    2.4880068    30.403515 -6.0703143e-05  -0.19096888 -0.0025587564   0.21890099   0.33434227  -0.23447031 
  849000    4.1660319    1.2772609    2.8887711  -0.23348373   0.85159808   0.99590213   0.76181476   -1.2465374            1    1.6842881    2.2797921    2.2750653   0.49800691 -0.015190678 -0.048465039  0.065426827     1.523507    1.5532999   0.72100136  0.066666667    1.2585299        1e-10 1.8025034e-11    5.5478398    2.5172634    30.403515 -0.0072611279  -0.21380521 -0.0096118992   0.18494712    2.0584142    2.9815871 
  850000    4.1304578    1.2571346    2.8733232  -0.21988116   0.83817913   0.97906543   0.75052344   -1.2465374            1    1.6283229    2.2242437    2.2506506   0.41007438 -0.0033157836  0.043351927 -0.023866661    1.4699248    1.4995492   0.71391637  0.066666667    1.2593198        1e-10 1.7847909e-11    5.6028971    2.4836353    30.403515 0.0081335257  -0.20159844 0.0093550063   0.18118349   0.36260184  -0.09486836 
  851000    4.1616891    1.2840246    2.8776646  -0.21639121   0.85610768    1.0100476   0.76032004   -1.2465374            1    1.6694569     2.266645    2.2617874   0.47993829 -0.001688225 -0.092823344   0.02346677    1.5089912    1.5366082   0.70952858  0.066666667    1.2657583        1e-10 1.7738214e-11     5.637546    2.4821094    30.403515 -0.0020116719  -0.21570436 0.0051003506    0.2015612   0.91100589   0.58276702 
  852000     4.192965    1.2692705    2.9236945  -0.22183435    0.8462706    1.0023089   0.74917354   -1.2465374            1    1.5832532    2.1901156    2.1930211   0.36662287   -0.0167157 -0.066772599 0.0081544757      1.42514    1.4514223   0.70186474  0.066666667     1.267857        1e-10 1.7546618e-11    5.6991038    2.4794252    30.403515 -0.0053035759    -0.171113 0.0039742078   0.18783114     1.130731     3.968701 
  853000     4.168051    1.2670576    2.9009934  -0.21717161   0.84479516   0.98426994   0.75802028   -1.2465374            1    1.6661688    2.2710805     2.265338   0.46208803 -0.010384419 -0.031076912 -0.019876492    1.5061885    1.5367106   0.70219022  0.066666667    1.2766505        1e-10 1.7554755e-11    5.6964621    2.5046165    30.403515 -0.0091349418  -0.19849916 -0.0027987267   0.17834552  -0.57905279  -0.32929097 
  854000    4.1870146    1.2720113    2.9150033   -0.2075125   0.84809796   0.98344238    0.7638977   -1.2465374            1    1.5249269    2.1536679    2.1498384   0.27127448 -0.0070244937  0.024885302 -0.031976188    1.3637062    1.3955775   0.69296743  0.066666667    1.2637651        1e-10 1.7324186e-11    5.7722771     2.472919    30.403515 -0.0081669213  -0.17039457 0.0061348578   0.20146767   -1.6599147   0.81192873 
  855000    4.2022228    1.2888726    2.9133502  -0.21118428   0.85934006    1.0139828   0.76311499   -1.2465374            1    1.5575736    2.1567387    2.2035017   0.31248029 -0.0026203165   0.08307563 0.0062006079     1.396518    1.4242073   0.70107688  0.066666667    1.2664204        1e-10 1.7526922e-11    5.7055083    2.4893975    30.403515 0.0061274121  -0.19094035 -0.0043926709    0.1776636  -0.35457393  0.057035471 
  856000    4.1645783    1.2728439    2.8917344  -0.21970514   0.84865312    1.0025926   0.75286443   -1.2465374            1    1.6516549    2.2628907    2.2488366   0.44323743 0.0020189103   0.12352886  0.037105359    1.4927628    1.5197867   0.71126877  0.066666667    1.2706287        1e-10 1.7781719e-11    5.6237532    2.4879463    30.403515 -0.0012446611  -0.19616688   0.01336513   0.22934447  -0.51199869   0.22913141 
  857000    4.1718897    1.2799994    2.8918903  -0.21311931   0.85342393    0.9955677   0.76498722   -1.2465374            1    1.6422565    2.2689158    2.2479973   0.40985637  0.013304087  0.051695481 -0.045551955    1.4808058    1.5113123   0.70848047  0.066666667    1.2660966        1e-10 1.7712012e-11    5.6458861    2.4747417    30.403515 -0.005233135  -0.20136622 -0.013022629   0.21608462  0.016348772    2.1071717 
  858000    4.1610833     1.274127    2.8869563  -0.21084083   0.84950858   0.97496142   0.77147304   -1.2465374            1    1.5220821    2.1493259    2.1691986   0.24772172 -0.0004553637  0.044937679 -0.016006859    1.3592626    1.3938481   0.70488807  0.066666667    1.2598322        1e-10 1.7622202e-11    5.6746598    2.4912677    30.403515 -0.00061112999  -0.22683967 -0.0065988026   0.19546963   0.52550462   0.60380824 
  859000    4.1962168    1.2716878    2.9245291  -0.21596176   0.84788227     1.002611   0.75160158   -1.2465374            1    1.5834323    2.2009049    2.1984936   0.35089836 -0.019281553 0.0056623928 -0.0075497524    1.4248067    1.4515617   0.70089512  0.066666667    1.2696751        1e-10 1.7522378e-11     5.706988    2.4921604    30.403515 -0.020408835  -0.20968587 0.0019533118    0.1826862   -0.5559839  -0.86252687 
  860000    4.1587495    1.2620073    2.8967421  -0.22385066   0.84142796    1.0020089   0.74149909   -1.2465374            1    1.5919531    2.2186955    2.1979542   0.35920954   0.00475671  -0.15774942  0.039500835    1.4354596    1.4601617   0.70373542  0.066666667    1.2667359        1e-10 1.7593385e-11    5.6839544    2.4950851    30.403515  0.011360114  -0.18871921  -0.01586157   0.18781414  -0.66306785    4.1269229 
  861000    4.1371256    1.2496471    2.8874785  -0.21743116   0.83318692   0.96583264   0.75066593   -1.2465374            1    1.6118991    2.2394455      2.21895   0.37730187 -0.0072313572 -0.090287709 0.0026342223     1.453471    1.4848659   0.70493049  0.066666667    1.2660204        1e-10 1.7623262e-11    5.6743184     2.500001    30.403515  -0.01932141  -0.20504767   0.01666048   0.18701755  -0.21523382    2.1478275 
  862000    4.1855734    1.2648364     2.920737   -0.2076933   0.84331423    1.0169141   0.73527223   -1.2465374            1    1.4742958    2.1107706    2.1184812   0.19363552 -0.016752277 -0.086984957  0.014753914    1.3191165    1.3405439   0.70318935  0.066666667    1.2630606        1e-10 1.7579734e-11    5.6883683    2.4864079    30.403515 0.0025203306  -0.18249832 -0.011451212   0.20364616    0.5874339  -0.33658021 
  863000    4.1604058    1.2569727    2.9034331  -0.20968766   0.83807118   0.97796364   0.75103483   -1.2465374            1    1.5491914    2.1611691    2.1642226   0.32218249 -0.0020219854  0.013017451 -0.00017018063    1.3906854    1.4205626   0.69837511  0.066666667    1.2601913        1e-10 1.7459378e-11     5.727581    2.5034962    30.403515 -0.00072429686  -0.16770989 -0.0075521743   0.19599318     1.887189   -1.9060073 
  864000    4.1874108    1.2843928    2.9030179  -0.21653766   0.85635323    1.0051177   0.76379101   -1.2465374            1    1.6326612    2.2500283    2.2092936   0.43866181  0.036000167 -0.047329242  0.024384005     1.471463    1.5004609   0.70122322  0.066666667    1.2633985        1e-10 1.7530581e-11    5.7043177    2.5015595    30.403515 0.00021928267  -0.20841632 0.00025499946   0.20505138    2.8487224   0.27045127 
  865000    4.1862671    1.2796256    2.9066415  -0.21999129   0.85317474    0.9975069   0.76337418   -1.2465374            1    1.5783751    2.1828206    2.2095541   0.34275041 -0.00080416074 -0.026970079 0.0023163201    1.4172648    1.4471758   0.69554788  0.066666667    1.2681223        1e-10 1.7388697e-11    5.7508622    2.4785305    30.403515 0.0051377378  -0.18209272 -0.017666422   0.17776407    1.4319643   0.63869788 
  866000    4.1378984    1.2479015    2.8899969  -0.21249436   0.83202308   0.99748055   0.72905348   -1.2465374            1     1.602107    2.2220241    2.2160178   0.36827903 0.0036819411 -0.093577934 -0.061693385    1.4482401    1.4709112   0.70467773  0.066666667    1.2641844        1e-10 1.7616943e-11    5.6763536    2.4801626    30.403515  0.017691987  -0.18496373 -0.009123533   0.18923359    2.4549399   0.06200522 
  867000    4.1693089    1.2641046    2.9052043  -0.21635739   0.84282632   0.99808809   0.74621258   -1.2465374            1    1.5420126    2.1719097    2.1734238   0.28070427 -0.0063045302 -0.074337931 -0.030479008    1.3845243    1.4107369   0.70135807  0.066666667    1.2612726        1e-10 1.7533952e-11    5.7032209    2.4919614    30.403515 -0.015182355  -0.17323387 -0.0080520561     0.195194   0.87090233     1.832802 
  868000    4.1570136    1.2592704    2.8977432   -0.2175523   0.83960316   0.99629649   0.74209673   -1.2465374            1    1.6090762    2.2110786    2.2311189   0.38503101 -0.017592911 0.0011843774  0.015945184    1.4524566    1.4780361    0.7013033  0.066666667     1.263466        1e-10 1.7532582e-11    5.7036663    2.4894618    30.403515 -0.020782893  -0.20135409 0.0014395467   0.14986381   0.44386049    1.1309467 
  869000    4.1459126     1.260625    2.8852876  -0.21352053   0.84050629    1.0009841   0.74064149   -1.2465374            1    1.6862694    2.2806089    2.2648766   0.51332259 0.0011599281   0.05075434 -0.015908905    1.5299569    1.5546127   0.70768668  0.066666667    1.2627496        1e-10 1.7692167e-11    5.6522189    2.4965439    30.403515 0.00048969279  -0.22431649 0.0021105601   0.19092802    0.3734139    2.9573991 
  870000    4.1623695      1.26041    2.9019595  -0.21338835   0.84036298   0.99268833   0.74557882   -1.2465374            1    1.6960674    2.2923475    2.2452015   0.55065306 0.0037303267   0.14829874 -0.0040714271    1.5387128    1.5655019   0.70023474  0.066666667    1.2513541        1e-10 1.7505868e-11    5.7123701    2.4782245    30.403515 0.0066524861  -0.19852196 -0.013413744   0.19967302    -1.557926     3.191851 
  871000    4.1164737    1.2450031    2.8714706  -0.21864971   0.83009062   0.97694494   0.73871424   -1.2465374            1    1.4830629    2.1456257    2.1294945   0.17406848 -0.019898107  0.050349566 0.0067178202    1.3271571    1.3545681   0.70347491  0.066666667    1.2576407        1e-10 1.7586873e-11    5.6860592    2.4949543    30.403515 0.0039762512  -0.20241035  0.016012812    0.1829123  -0.62692665   0.31548876 
  872000    4.1534334    1.2573443    2.8960891  -0.21942348   0.83831895   0.99345745   0.74178126   -1.2465374            1    1.6013878    2.2034264    2.2008545   0.39988242 -0.00074142482   0.15234897 0.0096276617    1.4448347    1.4707211   0.69903116  0.066666667    1.2653119        1e-10 1.7475779e-11    5.7222056    2.4743916    30.403515 -0.0037455026  -0.18972435 -0.0033676789   0.22215977   -2.5886726     5.119207 
  873000    4.1571548    1.2853598     2.871795   -0.2247704   0.85699793    1.0076201   0.76327807   -1.2465374            1    1.5315476    2.1797229    2.1394801   0.27543998 -0.014195151   0.14280367 -0.043633149    1.3704577    1.3990182    0.7041982  0.066666667     1.262298        1e-10 1.7604955e-11     5.680219    2.4829352    30.403515 -0.019333106  -0.21665384 0.0057822673   0.21060139   -2.5955452    3.3098349 
  874000    4.1366632    1.2466777    2.8899855  -0.22071858    0.8312071   0.99714841   0.72793584   -1.2465374            1    1.6007333    2.2057222    2.2053812   0.39109659  0.010385633   0.14042792  0.035553395    1.4471024    1.4695812   0.71333599  0.066666667    1.2651309        1e-10  1.78334e-11    5.6074557    2.5140926    30.403515 -0.0013010718  -0.19818302   -0.0124546   0.23939323  -0.82995889    2.8929553 
  875000    4.1733209    1.2698151    2.9035058  -0.20746451   0.84663373    1.0024423   0.74967986   -1.2465374            1    1.5395769    2.1850695    2.1633316    0.2703297 -0.0012129853  0.074090209 -0.025188216    1.3813569    1.4077285   0.70732788  0.066666667    1.2552776        1e-10 1.7683197e-11     5.655086    2.4851742    30.403515 -0.012436545   -0.2274814 0.0024759161   0.18782406   0.44537313     2.675214 
  876000     4.143589    1.2424566    2.9011325  -0.21722538   0.82839274   0.96529617   0.74321749   -1.2465374            1    1.5086112    2.1635353    2.1422616   0.22003655  0.026906592   0.06008137 -0.030074877     1.351755    1.3816485   0.69820735  0.066666667    1.2627978        1e-10 1.7455184e-11    5.7289571    2.4905463    30.403515 0.0053777963  -0.17125799 -0.012689379   0.17134052    1.3281381    2.7843828 
  877000    4.1641601    1.2741781    2.8899821  -0.22142357   0.84954266    1.0107411   0.74923035   -1.2465374            1    1.5489394     2.189366     2.168851   0.28860128   0.02383165  0.033322903 -0.048310012    1.3908142    1.4159995   0.70930892  0.066666667    1.2704749        1e-10 1.7732723e-11    5.6392918    2.4879148    30.403515 -0.0051878871   -0.2052786 9.0321925e-05   0.21073249    1.6296442    2.3716522 
  878000    4.1522304     1.260128    2.8921023  -0.21626104   0.84017495    1.0035759   0.73848837   -1.2465374            1    1.6358995    2.2329209    2.2471956   0.42758187  -0.01315317  0.019629336 0.0031090876    1.4800414    1.5039019   0.70410931  0.066666667    1.2707593        1e-10 1.7602733e-11    5.6809361    2.4840477    30.403515 -7.7306222e-05  -0.16154583 -0.0028512967    0.2193602    1.0268319    3.6517838 
  879000    4.1803842    1.2799035    2.9004807  -0.22210949   0.85336001   0.99410303   0.76579625   -1.2465374            1    1.5212599    2.1596348     2.136605   0.26753982 0.0044884695 -0.014846952 -0.072188882    1.3596385    1.3905083   0.70089504  0.066666667    1.2726855        1e-10 1.7522376e-11    5.7069886    2.4788771    30.403515 -0.0069593616  -0.18675448 -0.0012547468   0.16347619    2.8524899  -0.68306278 
  880000    4.1570762    1.2559309    2.9011453  -0.22030687   0.83737657     1.004476   0.73338465   -1.2465374            1    1.6392161    2.2393594    2.2704556    0.4078333 0.0023861407   0.08465644  0.025231116    1.4844351    1.5071002   0.71360496  0.066666667    1.2679518        1e-10 1.7840124e-11    5.6053422    2.4957669    30.403515 0.0035284612  -0.18374204 0.0040213932   0.16174509   0.43835016    0.7406096 
  881000    4.1527957    1.2566282    2.8961674  -0.21760851   0.83784152    1.0016665   0.73589031   -1.2465374            1    1.6069455    2.2218185    2.2235261   0.37549192 0.0036442027 0.0028939489 -0.0086914484    1.4516357    1.4751991   0.71204593  0.066666667    1.2759644        1e-10 1.7801148e-11    5.6176151    2.4954142    30.403515 -0.0028872863  -0.17809232 -0.001570825   0.19829607    1.0306849    3.9550774 
  882000    4.1930914    1.2711662    2.9219252   -0.2062795   0.84753452    1.0090767   0.74700763   -1.2465374            1    1.6043354    2.2298583     2.208799   0.37434897 -0.0055066587  0.073932726 -0.036273683    1.4466793    1.4716144   0.70028296  0.066666667    1.2671475        1e-10 1.7507074e-11    5.7119768    2.4748489    30.403515 -0.0051534433  -0.16808982  0.011155963   0.19647628    1.6796871    3.2122359 
  883000    4.1689315    1.2721846     2.896747  -0.21297527    0.8482135    1.0016312   0.75274991   -1.2465374            1    1.5646089    2.1835172    2.2111002   0.29920925 -0.029081901 -0.0070419843  0.017758519    1.4057409    1.4328671    0.7081461  0.066666667    1.2647108        1e-10 1.7703652e-11    5.6485519    2.4891831    30.403515 0.0087919093  -0.19839619 -0.0087827274   0.17410048   0.39462689  -0.35293816 
  884000     4.175423    1.2715986    2.9038244  -0.20744869   0.84782284   0.99489187   0.75631572   -1.2465374            1    1.5762441     2.209814     2.198485   0.32043323 0.0070933448 -0.047287125 0.00071221075    1.4166235    1.4453887   0.70620447  0.066666667    1.2682251        1e-10 1.7655112e-11    5.6640819    2.4983419    30.403515 -0.0027722407  -0.21967171 0.0037846035   0.17141699   0.58428583   0.50355834 
  885000    4.1447304    1.2713362    2.8733942  -0.22890127   0.84764788    0.9975909   0.75434965   -1.2465374            1    1.5268483    2.1583379    2.1675086   0.25469826 0.0053465421 -0.014411286 -0.066966267    1.3676426    1.3956379   0.70331522  0.066666667     1.253141        1e-10 1.758288e-11    5.6873503    2.4866303    30.403515 -0.0028771638   -0.2066664   0.00661682   0.21192274   0.70020194  -0.45198053 
  886000    4.1576349    1.2673395    2.8902955  -0.21549273   0.84498309    1.0040199   0.74601714   -1.2465374            1    1.6670174     2.255734    2.2864829   0.45883542 -0.0017697455   0.04459308 -0.0037949443    1.5095704    1.5349615   0.70188759  0.066666667    1.2509528        1e-10 1.754719e-11    5.6989183     2.491072    30.403515 0.0036559928  -0.18595093 0.0043176934   0.17695685   0.65379584    1.5706931 
  887000    4.1453506    1.2600717     2.885279   -0.2210627   0.84013738   0.99478718   0.74390456   -1.2465374            1    1.5386918    2.1616384    2.1687842   0.28565284  0.010493202 0.0046026477  0.020355433    1.3816907    1.4078503   0.70259523  0.066666667    1.2647828        1e-10 1.7564881e-11    5.6931784    2.4880089    30.403515 -0.0094653989  -0.19398383 0.0063285027   0.17823113    1.2992791   0.99588486 
  888000    4.1577689    1.2498807    2.9078882  -0.20604216   0.83334267   0.98648742   0.73804663   -1.2465374            1    1.6046018    2.2168882    2.2119489   0.38496819 -0.0066101549 -0.022254668  0.038890038    1.4488369    1.4748518   0.70232596  0.066666667    1.2729178        1e-10 1.7558149e-11    5.6953611    2.5059404    30.403515 -0.018728984  -0.20935373 -0.0022342145   0.17749508   0.69214352   -1.2746698 
  889000    4.1756534     1.264707    2.9109464  -0.21907685   0.84322794    1.0034564   0.74351905   -1.2465374            1    1.6415849     2.255395    2.2494519   0.41990789 -0.029142041 -0.0029559203 -0.021837215    1.4846651    1.5096031    0.7096941  0.066666667    1.2605396        1e-10 1.7742352e-11    5.6362312    2.5054414    30.403515  0.011797716  -0.19589835 -0.0030347538   0.19344664   0.83761776    1.5961939 
  890000    4.1572105    1.2594149    2.8977955  -0.22169508   0.83969951   0.99696463   0.74183674   -1.2465374            1     1.645361    2.2312494    2.2731252   0.43170846 -0.007436167  0.048469671 0.0011101828    1.4887963    1.5142331   0.70621589  0.066666667    1.2648265        1e-10 1.7655397e-11    5.6639904    2.4833559    30.403515 -0.003103684  -0.19373776  0.013799683   0.20610328  -0.71935006    2.6937738 
  891000    4.1697236    1.2684909    2.9012327  -0.22166322   0.84575078    1.0129197   0.74171696   -1.2465374            1    1.5433899    2.1622623    2.1803724   0.28753504 -0.0077324489  0.014530484  0.010737082    1.3868505    1.4101634   0.71000894  0.066666667    1.2634972        1e-10 1.7750223e-11    5.6337319    2.5054629    30.403515 -0.010517581  -0.21010785 0.0037866166   0.22600817   0.49650585   -2.5966347 
  892000    4.1746746    1.2600328    2.9146419  -0.20481161   0.84011145    1.0183777   0.72916078   -1.2465374            1    1.5820871       2.1999    2.2126236   0.33373761 -0.004925122 -0.048250351  0.022268366    1.4281976    1.4481427   0.71151966  0.066666667    1.2640678        1e-10 1.7787991e-11    5.6217702    2.5018501    30.403515 0.0030809125  -0.20894008 -0.0086992889   0.21345118    1.1156894   -1.3454972 
  893000    4.1790049    1.2743761    2.9046288  -0.22018348   0.84967468    1.0286626   0.73827592   -1.2465374            1    1.6170139    2.2252821    2.2185469   0.40721262 -0.002335229 -0.048986614 -0.067905824    1.4612006    1.4817168   0.71343116  0.066666667    1.2740565        1e-10 1.7835779e-11    5.6067077    2.5119319    30.403515 -0.015827027  -0.18664047 -0.0059348042   0.23524961   -1.5520384    1.5238656 
  894000    4.1897051    1.3032845    2.8864206  -0.22052269   0.86894899    1.0169199   0.77688346   -1.2465374            1    1.6095195    2.2404823    2.2171744   0.37090169 0.0052244047 -0.047776096  0.030361692    1.4455581    1.4757668   0.70794318  0.066666667    1.2741084        1e-10 1.7698579e-11     5.650171    2.5031511    30.403515 0.0051908768  -0.22676173 0.0032824392   0.18467583   -1.6034904   -1.4354529 
  895000    4.1761324    1.2720104     2.904122   -0.2158294   0.84809738   0.98690198   0.76174073   -1.2465374            1    1.5636623    2.1783724     2.183636   0.32897842 -0.0044912301   0.12902558 -0.002503016    1.4028967    1.4338578   0.70781988  0.066666667    1.2624552        1e-10 1.7695497e-11    5.6511552    2.4982714    30.403515 -0.0058097033  -0.19282036 0.0040911938   0.19117305   -4.0484387     1.755605 
  896000    4.1293707    1.2344178    2.8949529  -0.22474091   0.82303299   0.96788416   0.73290377   -1.2465374            1    1.6993411    2.2865274    2.3001658   0.51133002 -0.0019042428  0.055853458 -0.021448355    1.5446616     1.572038   0.70792705  0.066666667    1.2694016        1e-10 1.7698176e-11    5.6502997    2.4886789    30.403515 -0.00071862079  -0.17274589 -0.012956598   0.17700874   -2.5084777     1.449718 
  897000    4.1760914    1.2886773    2.8874141  -0.22372116   0.85920981   0.99779308   0.77299302   -1.2465374            1     1.505741    2.1578396      2.13861   0.22077356 -0.022226429  0.040245903 -0.067986261    1.3426007    1.3745041   0.70936768  0.066666667    1.2741782        1e-10 1.7734192e-11    5.6388247    2.4846437    30.403515 0.0076112055  -0.19681808 -0.0037927098   0.16196688    1.0335581    2.2876533 
  898000    4.1673759    1.2643981    2.9029778  -0.21429795   0.84302197   0.98954707     0.751853   -1.2465374            1    1.6236573    2.2404085    2.2185252   0.41203834 0.0042026074    0.1359012 -0.021312011    1.4649786     1.493505   0.70552363  0.066666667    1.2738687        1e-10 1.7638091e-11    5.6695479    2.5056128    30.403515 0.0071357079  -0.19340524  0.011380108   0.16416436   0.88811832    1.1227291 
  899000    4.1521677    1.2483568    2.9038108  -0.20999876   0.83232667   0.99370726   0.73189785   -1.2465374            1    1.5536729    2.1747311    2.1859785   0.30030918  0.014416745   0.15380796  0.096914896    1.3992058    1.4229734   0.70550592  0.066666667    1.2742502        1e-10 1.7637648e-11    5.6696902    2.5026607    30.403515 -0.0035953375  -0.17560156 0.0042627766   0.21649024    1.4294559   -2.5611759 
  900000    4.1956684    1.2864767    2.9091917   -0.2139379   0.85774259    1.0138306   0.76061653   -1.2465374            1    1.7149494    2.3107371    2.3162365   0.51787476  0.018889548  0.079177863  0.044830407    1.5544212    1.5816032   0.70546443  0.066666667    1.2700424        1e-10 1.7636611e-11    5.6700236    2.4999016    30.403515 -0.0048318232  -0.18392049 -0.0069406084   0.22186096  -0.12011326    2.5613798 
  901000    4.1866446    1.2732037    2.9134409   -0.2110295   0.84889302   0.98722447   0.76283138   -1.2465374            1    1.6316028    2.2081468    2.2460767   0.44058473 -0.011661235    0.1158596 -0.029201235    1.4706071    1.5017559   0.70329102  0.066666667    1.2672719        1e-10 1.7582275e-11     5.687546     2.494016    30.403515 -0.0035753608  -0.17639257 -0.0025342117   0.20642495   -1.8385536    3.5173493 
  902000    4.1551465    1.2472809    2.9078656  -0.20847846    0.8316093   0.99894358   0.72746999   -1.2465374            1    1.6156803    2.2047686    2.2377605   0.40451174 -0.0061042944 0.0066542276  0.052114205    1.4621476     1.484292   0.70487436  0.066666667      1.27012        1e-10 1.7621859e-11    5.6747702    2.5091061    30.403515   0.00366048  -0.20611261 0.0058477557   0.18452468    1.3498868   0.48361269 
  903000    4.1981632    1.2936559    2.9045073  -0.21658369   0.86252926     1.009616   0.77101365   -1.2465374            1    1.5028532    2.1452515    2.1578492   0.20545902 0.0027686877 0.0029120893 -0.025545794    1.3401307    1.3700613   0.70253824  0.066666667    1.2738063        1e-10 1.7563456e-11    5.6936403    2.4829446    30.403515 -0.0088208682  -0.23601206   0.01618239   0.19920214   -1.6278798  -0.39793977 
  904000    4.1703317    1.2633192    2.9070124   -0.2112929   0.84230266    1.0092107   0.73843086   -1.2465374            1    1.6785231     2.282231    2.2413338   0.51200459 0.0018328444  0.010488504  0.032887361    1.5226772    1.5457845   0.70508686  0.066666667    1.2732479        1e-10 1.7627172e-11    5.6730599    2.4970853    30.403515 -0.00089058656   -0.2168714 0.0027989276   0.18379164   -2.1050155    2.4485233 
  905000    4.1658879    1.2714272    2.8944607   -0.2186499   0.84770858    1.0134046   0.74459306   -1.2465374            1    1.5751005    2.2009186      2.19128   0.33310289 -0.0083629792 -0.041734878  0.010492068     1.417954    1.4418102    0.7062721  0.066666667    1.2690059        1e-10 1.7656802e-11    5.6635396    2.5026912    30.403515  -0.01128245  -0.19675635  0.012019902   0.21062754   -1.5402206    1.8762006 
  906000    4.1743812    1.2891134    2.8852678  -0.22206039    0.8595006    1.0133677   0.76375892   -1.2465374            1    1.5316529    2.1776714    2.1581867   0.25910058  0.030393822   0.12011006 0.0047583686    1.3704614    1.3983675   0.70703085  0.066666667    1.2650979        1e-10 1.7675771e-11    5.6574617    2.4826079    30.403515 0.0071708359  -0.21411744 -0.011127981    0.1752255   -3.5560357   0.65360553 
  907000    4.1706625    1.2637313    2.9069312  -0.22228099   0.84257738    1.0129188   0.73656594   -1.2465374            1    1.6007415    2.1907435    2.2125666   0.39891439 -0.0024962727   0.14339257  0.014268399    1.4452891    1.4675151   0.70767089  0.066666667    1.2725615        1e-10 1.7691772e-11     5.652345    2.4875297    30.403515 -0.0068231515  -0.19420151 0.0022361638   0.18714553  -0.22934305   0.79852312 
  908000    4.1802566    1.2738576     2.906399  -0.21757722   0.84932899    1.0098651   0.74942938   -1.2465374            1    1.5614932    2.1641315    2.1786177   0.34173041  0.011732848  0.090099185   0.02029018     1.403326    1.4286685   0.69903992  0.066666667    1.2697547        1e-10 1.7475998e-11    5.7221339     2.482173    30.403515 -0.010031395  -0.15819609 -0.007017168   0.18525264   -1.0079021    0.8770874 
  909000      4.15914    1.2815309     2.877609  -0.21434963   0.85444508    1.0001421   0.76379417   -1.2465374            1    1.5918348    2.1950402    2.2387763   0.34168792  0.015094278   0.11384895  0.031632887    1.4306359    1.4602889   0.70818756  0.066666667    1.2730088        1e-10 1.7704689e-11    5.6482212    2.5182276    30.403515 -0.0056627071  -0.19128338 0.0059508753   0.21219403   0.12755066   -2.4091688 
  910000    4.1539555    1.2602659    2.8936896  -0.22088624   0.84026685    1.0013507   0.74002435   -1.2465374            1    1.5638221    2.1925842    2.1853026   0.31357945   -0.0102359   0.13470867  -0.03561919    1.4076398    1.4321172   0.70416968  0.066666667    1.2846605        1e-10 1.7604242e-11     5.680449    2.5024256    30.403515 -0.0016118797  -0.19586132 0.0058024488    0.1699153    2.4761877    1.6386341 
  911000     4.159588    1.2643912    2.8951968  -0.22019911   0.84301738   0.99030374     0.751374   -1.2465374            1    1.7165273    2.2822887    2.3178965   0.54939652 0.0048655558   0.09146577  0.044622786    1.5579497    1.5862754   0.70307257  0.066666667    1.2859433        1e-10 1.7576814e-11    5.6893132     2.494955    30.403515 -0.00065448096  -0.15099839 0.0078675752   0.18784929  -0.37339751    2.2903872 
  912000    4.1448692    1.2665324    2.8783369  -0.21628032   0.84444498    1.0021457   0.74631159   -1.2465374            1    1.5249757    2.1832437    2.1581101   0.23357336 -0.0040082934    0.1226165   0.03216421    1.3674665    1.3931663   0.69733179  0.066666667    1.2812824        1e-10 1.7433295e-11    5.7361503    2.4913518    30.403515 0.0062272019   -0.1857621 0.0055193809   0.20071643   -1.1718961    1.9450167 
  913000    4.1617875    1.2617745     2.900013  -0.21312058   0.84127271    0.9885914   0.74960886   -1.2465374            1    1.6424337    2.2634491     2.245967   0.41788508 0.0036573746   0.16360284 -0.045614374    1.4842286    1.5124071   0.69571427  0.066666667    1.2712292        1e-10 1.7392857e-11    5.7494868    2.4850256    30.403515  0.001999164  -0.19836782 0.0021555742   0.19910389  -0.78551916    3.5720703 
  914000    4.1879658    1.2586758      2.92929   -0.2020423   0.83920669    1.0085565   0.73381263   -1.2465374            1    1.5995784    2.2100319     2.205142   0.38356126  -0.01229039  0.052352519 -0.017589439    1.4447071    1.4669258   0.69271401  0.066666667    1.2739516        1e-10 1.731785e-11    5.7743887    2.4837763    30.403515 0.0059206981  -0.19063241 -0.004938058   0.16591928   -2.2583817    3.2029559 
  915000    4.1604471    1.2609549    2.8994923  -0.20915602   0.84072626    1.0104663   0.73508924   -1.2465374            1    1.5291108    2.1474993    2.1737702   0.26606286 -0.00081339233 -0.055213523 -0.038554435    1.3739701     1.396207   0.69947379  0.066666667    1.2733662        1e-10 1.7486845e-11    5.7185845    2.4921784    30.403515 -0.0016196164  -0.20829753 0.00053459989   0.20197625   0.14400429    2.6843793 
  916000      4.21442    1.2832808    2.9311392  -0.20792216   0.85561177   0.99844797    0.7667439   -1.2465374            1    1.5196489    2.1518485    2.1746934   0.23240489 -0.023669679 -0.0061664712 -0.041887073    1.3578275    1.3883259   0.69156351  0.066666667    1.2737879        1e-10 1.7289088e-11    5.7839952    2.4879435    30.403515 -0.0053742256  -0.18363038 -0.012209308   0.18128679   -2.1806667    3.7897901 
  917000    4.2150551    1.2819844    2.9330707  -0.20966507    0.8547474    1.0105797   0.75778019   -1.2465374            1    1.6678369     2.272153     2.286819   0.44453875 -0.00049564821 -0.064307901 -0.032493519    1.5079073    1.5349182   0.70014237  0.066666667    1.2756276        1e-10 1.7503559e-11    5.7131237    2.5020884    30.403515 0.00053056156  -0.21439957 0.00097888606   0.17952189  -0.84669839    5.1362983 
  918000    4.1661111    1.2670808    2.8990302  -0.20532081   0.84481066   0.99842402   0.74922457   -1.2465374            1    1.5464125    2.1952381    2.1767769   0.26722258 -0.0084851333 -0.0051910962 -0.0096961572    1.3882885    1.4150926   0.69231614  0.066666667    1.2748549        1e-10 1.7307904e-11    5.7777073     2.478282    30.403515 0.0069357485  -0.17417779 0.0078062589   0.16366618   0.32524811     1.306675 
  919000    4.1775919    1.2685299     2.909062  -0.21385277   0.84577682    1.0033585   0.74771785   -1.2465374            1     1.639775    2.2591273    2.2179205   0.44227709 -0.013278172  0.073641948 -0.001989302     1.481969     1.507806   0.69460336  0.066666667    1.2704111        1e-10 1.7365084e-11    5.7586822    2.4706854    30.403515  0.012733728  -0.19023945 -0.012976341   0.20014241   -1.1258429    1.4336499 
  920000    4.1727951    1.2684311    2.9043639  -0.21254635   0.84571094    1.0004779   0.74940607   -1.2465374            1    1.4629022    2.1104428    2.1202925   0.15797122 -0.013378945 -0.034242442  0.037095828    1.3047399    1.3313121   0.69701377  0.066666667    1.2665133        1e-10 1.7425344e-11    5.7387676     2.489018    30.403515 -0.001387221  -0.18782563  0.016427349   0.17751219    1.7167961   -2.3755563 
  921000    4.1485823    1.2362468    2.9123354  -0.21223453   0.82425248   0.99330589   0.71904053   -1.2465374            1    1.7211405    2.3189607    2.2674281   0.57703289 0.0075364656  0.045281104 -0.010874506    1.5693869    1.5904938   0.69589174  0.066666667    1.2626902        1e-10 1.7397294e-11    5.7480205    2.4836698    30.403515 -0.011627643  -0.19007725 0.0016890611     0.198725    1.1376679    3.1961699 
  922000    4.1755311    1.2692136    2.9063175  -0.22108726   0.84623264   0.99978389   0.75068551   -1.2465374            1    1.5130194     2.149726    2.1610902   0.22824186 0.00094063989 -0.069247468 -0.0048878917    1.3545871    1.3815206   0.69403627  0.066666667    1.2780748        1e-10 1.7350907e-11    5.7633875    2.4881594    30.403515 0.0014585554  -0.22087652 0.0032515895   0.17021683   0.88741198    1.7393328 
  923000    4.1706349    1.2674993    2.9031356  -0.21734902   0.84508966    0.9932171   0.75292246   -1.2465374            1    1.5985297    2.1906154     2.215282   0.38969162  0.018540332 -0.088949778 -0.014917929    1.4396253    1.4678946   0.69968945  0.066666667    1.2763685        1e-10 1.7492236e-11    5.7168219     2.495098    30.403515 -0.024516277  -0.21285987 -0.0053811172    0.1937787    1.0207027   -1.0780023 
  924000    4.1597855    1.2732862    2.8864993  -0.21395917   0.84894798   0.99465685   0.75828872   -1.2465374            1    1.4865615    2.1546803     2.107983   0.19702135 -0.013134194 -0.087294596 -0.0028279034    1.3265246    1.3557371   0.70486892  0.066666667    1.2795372        1e-10 1.7621723e-11     5.674814    2.5095456    30.403515 0.0033240115  -0.19404205     0.012756   0.18173603   0.28290078    0.5468695 
  925000    4.1921357    1.2674446    2.9246911   -0.2179537    0.8450532   0.99042384   0.75460405   -1.2465374            1    1.6464656    2.2244667    2.2480137   0.46691652  0.014981232  0.010343925 -0.028194616    1.4872063    1.5161979   0.70258993  0.066666667    1.2770376        1e-10 1.7564748e-11    5.6932214    2.4819446    30.403515 -0.014392464  -0.24046941 0.0080519794   0.17679856 -0.025482291   0.94271937 
  926000    4.1890377    1.2742416    2.9147961  -0.21882262   0.84958499    1.0031865   0.75400709   -1.2465374            1    1.5300522    2.1648512    2.1437519   0.28155338 0.0023067693   0.10960389 -0.0029930015    1.3709188    1.3981058   0.69677177  0.066666667    1.2893115        1e-10 1.7419294e-11    5.7407607    2.4990612    30.403515 -0.0066776138  -0.20301728 0.0037293147   0.19473115 -0.093886337  -0.98517869 
  927000    4.1430764    1.2421611    2.9009153  -0.21188631   0.82819573   0.99030713   0.72731076   -1.2465374            1    1.6149628     2.217225    2.2338021   0.39386117 -0.0099573262   0.21730505  0.017951975    1.4614637    1.4847104   0.69996803  0.066666667    1.2900974        1e-10 1.7499201e-11    5.7145467    2.4923573    30.403515 -0.00026543208  -0.16941208 -0.0011892162   0.21043233   -2.5869871    1.4946851 
  928000    4.1406657    1.2602791    2.8803866   -0.2242526   0.84027567   0.97990586   0.75340316   -1.2465374            1    1.4479495    2.1094968    2.0967583   0.13759347  0.008924211   0.12539446  0.015135033    1.2889437    1.3190653   0.69738328  0.066666667    1.3057241        1e-10 1.7434582e-11    5.7357268     2.493301    30.403515 -0.00044078596  -0.20351008 0.0014177721   0.19333825   -1.6018212    1.3264528 
  929000    4.1591656    1.2553471    2.9038185  -0.21511031   0.83698732   0.99812568   0.73671027   -1.2465374            1    1.6487269    2.2627668    2.2306793   0.45273469  0.002041325   0.10406123  0.039634317    1.4932441    1.5174463   0.69651432  0.066666667    1.2904439        1e-10 1.7412858e-11    5.7428826    2.4901474    30.403515 0.0068965022  -0.20072176 -0.0034828837   0.20398448   -1.1670657   0.80401737 
  930000    4.1624188    1.2723437    2.8900751   -0.2154711   0.84831963    1.0138796   0.74528896   -1.2465374            1    1.5594866     2.184951    2.1745153   0.31899341 -0.0038154143 -0.019640094 -0.0048779585    1.4021932    1.4261338   0.69673094  0.066666667     1.284251        1e-10 1.7418274e-11    5.7410971    2.4930641    30.403515 -0.0044696172  -0.20331619 -0.0010731238   0.19007766   0.97650763  0.082215663 
  931000    4.1862767    1.2999002    2.8863765  -0.21632887   0.86669259     1.024263   0.76864422   -1.2465374            1    1.5633948    2.1641412    2.1992267    0.3268165 -0.023342671 -0.079474393 -0.033385153    1.4011723    1.4286764    0.6931427  0.066666667    1.2842626        1e-10 1.7328567e-11    5.7708175    2.4875956    30.403515 -0.0076588004  -0.17062753 0.0021648659   0.17076863   0.76558969    1.1187381 
  932000    4.1820673    1.2756498    2.9064175  -0.20408414    0.8505239   0.98266467   0.76832059   -1.2465374            1    1.7190427    2.2917012    2.3072674   0.55815954 0.0086554618 -0.066768261 0.0080958585    1.5568885    1.5897956   0.69588699  0.066666667    1.2882049        1e-10 1.7397175e-11    5.7480597    2.4823918    30.403515  0.011443026  -0.17475648   0.01338063   0.21396797  -0.65952603    3.3480574 
  933000    4.1726638    1.2637596    2.9089042  -0.22345121   0.84259626   0.99230144   0.74944538   -1.2465374            1    1.4932757    2.1027397    2.1213484   0.25573902 0.0060540542   0.02768989  0.037156008    1.3351051    1.3627611   0.69860955  0.066666667    1.2939613        1e-10 1.7465239e-11    5.7256589    2.4847057    30.403515 0.0049793709  -0.22568429 -0.0057764532   0.20206651     1.634403  -0.31022039 
  934000    4.1853908     1.289988    2.8954029  -0.21739286   0.86008372     0.991825   0.77813102   -1.2465374            1    1.6713772    2.2648196    2.2605647   0.48874733 0.0062372632  0.075610553  0.031223347    1.5071525    1.5409253   0.70773064  0.066666667    1.2945804        1e-10 1.7693266e-11    5.6518678    2.5089445    30.403515  0.010821727  -0.18112991 -0.0086766279   0.17826987  0.053060681    1.4575156 
  935000    4.1973087    1.2739003    2.9234084  -0.21131554   0.84935743    1.0069618   0.75128495   -1.2465374            1    1.5402833    2.1571604    2.2047641   0.25892528 -0.0060978451  0.013951069  0.019445509    1.3817245    1.4078404   0.70528317  0.066666667    1.2894947        1e-10 1.7632079e-11    5.6714808    2.4937394    30.403515 0.0032162306  -0.18579787 -0.011954763   0.20209904  -0.61456927    1.3614793 
  936000    4.1892776    1.2692289    2.9200487  -0.20835394   0.84624285   0.97579852   0.76564984   -1.2465374            1    1.5858495    2.1968325    2.2164101   0.34430586 -0.014461535 -0.041883971 -0.085532042     1.424259    1.4575055   0.69754197  0.066666667    1.2813571        1e-10 1.7438549e-11     5.734422    2.4867991    30.403515 -0.0021161583  -0.18850757  0.013924614   0.16761668    1.3335942   -0.1392736 
  937000    4.1285323    1.2373924    2.8911399  -0.21812386   0.82501625   0.97934669   0.72897984   -1.2465374            1    1.6287849     2.238127    2.2402964    0.4079314  0.004918857  0.099955426 0.0020661201    1.4749336    1.4999742   0.69931508  0.066666667    1.2774141        1e-10 1.7482877e-11    5.7198824    2.4984128    30.403515 0.0024321364  -0.20707294  0.020312469   0.21181371   -2.6563869   0.55119864 
  938000     4.199795    1.2864467    2.9133483  -0.20820797   0.85772261    1.0349617   0.74741511   -1.2465374            1    1.5734595    2.2023869    2.2024874   0.31550408 0.0044895289  0.021812734  0.015567716    1.4157174    1.4373339   0.70302303  0.066666667    1.2717042        1e-10 1.7575576e-11     5.689714    2.5082839    30.403515 -0.0038038225  -0.16822984 0.0078521071   0.22902223   -2.0525018   -1.2250218 
  939000    4.1813306    1.2606579    2.9206727  -0.22285957   0.84052826   0.99986138   0.74137685   -1.2465374            1      1.67374    2.2349509    2.2761521   0.51011709 0.0022930956  0.087244486  0.022534559    1.5172723    1.5422311   0.70026336  0.066666667    1.2871937        1e-10 1.7506584e-11    5.7121367    2.4694356    30.403515 0.0060555521  -0.19601491 -0.0047900675   0.20526017   -1.1603645   0.24963455 
  940000    4.1622597    1.2652138    2.8970458   -0.2109209   0.84356585   0.99689645   0.74815576   -1.2465374            1    1.5903849    2.1827724    2.2340648   0.35431759 -0.0047202077   0.06233309 -0.033265836    1.4324865    1.4592659   0.70321402  0.066666667      1.29516        1e-10 1.7580351e-11    5.6881687    2.5065721    30.403515 -0.010387003  -0.22262684 -0.0020577049   0.20377128  -0.31641059    2.9981734 
  941000    4.1568761    1.2555816    2.9012945  -0.22089843    0.8371437   0.99459979   0.73916148   -1.2465374            1    1.5507453    2.1861613    2.1482215   0.31785301 -0.022247155 -0.012047875  0.010308582    1.3947451    1.4199283   0.70774937  0.066666667    1.2965839        1e-10 1.7693734e-11    5.6517182     2.482236    30.403515 0.00020614185  -0.20542924 -0.0043997339   0.23842337    1.0638863   -0.6495685 
  942000    4.1568556    1.2510773    2.9057784  -0.21680762   0.83414048   0.99126203   0.73636623   -1.2465374            1    1.6694901    2.2685778    2.2708812   0.46901129 -0.0081289909  0.069612091 -0.018619614    1.5140799    1.5391122   0.70384164  0.066666667      1.29168        1e-10 1.7596041e-11    5.6830965    2.4870283    30.403515 0.0020021172  -0.20436211 0.0035090546   0.20101995  -0.14507746   0.65342146 
  943000    4.1627527    1.2824713    2.8802814  -0.21147299   0.85507207    1.0209075   0.75187088   -1.2465374            1    1.5606415    2.2000512    2.2031315   0.27874171 -0.0019420992  0.014900466  0.010554106     1.401959    1.4263644   0.70274217  0.066666667    1.2833982        1e-10 1.7568554e-11     5.691988    2.5010562    30.403515   0.01157639  -0.20028689 0.0035306354   0.19617495   0.72697747 -0.038950667 
  944000    4.1647153    1.2716851    2.8930301  -0.21756942   0.84788052    1.0020968   0.75191924   -1.2465374            1    1.5989217    2.2036119    2.2279532   0.36519998     0.016972 -0.032246188   0.01647854     1.440229    1.4671187   0.70359244  0.066666667     1.284081        1e-10 1.7589811e-11    5.6851094    2.4999057    30.403515 0.0044745817  -0.17178605 -0.013242792   0.19661078    1.0318931    1.2366648 
  945000    4.1602276    1.2673475      2.89288  -0.21984655   0.84498849   0.99154886   0.75379787   -1.2465374            1    1.5771323     2.217396    2.1996078   0.31439297 0.0039253639   0.01777135  0.030816518    1.4180431    1.4467166   0.70219997  0.066666667    1.2811594        1e-10 1.7554999e-11    5.6963831     2.478685    30.403515 0.0044568665  -0.17989954 -0.0070575091   0.19844286   -1.0646763    1.3619009 
  946000    4.1722382    1.2700922    2.9021461  -0.21554537   0.84681843    1.0080107   0.74650947   -1.2465374            1    1.5721784    2.1948357    2.1809382   0.34076111 0.0027952755 -0.0023841494 -0.031509565    1.4146274    1.4395975   0.70605866  0.066666667    1.2840863        1e-10 1.7651466e-11    5.6652517    2.4917064    30.403515 0.0011620588  -0.16436721 -0.0062926292   0.19971255     1.461137    1.9582893 
  947000    4.1631325    1.2774183    2.8857142  -0.21598423   0.85170303    1.0180699    0.7481701   -1.2465374            1    1.5523306    2.1655304    2.1616933   0.32976804 -0.0058544715   0.13754962 -0.018121253    1.3944291    1.4184267   0.70117886  0.066666667    1.2862711        1e-10 1.7529471e-11    5.7046786    2.4656632    30.403515 0.0026925023  -0.17385541  0.027107843   0.16398057   -1.0471693    3.3644638 
  948000    4.1788154    1.2717581    2.9070573  -0.22699431   0.84792915   0.99902095   0.75391505   -1.2465374            1    1.5710071    2.1889383    2.1945775   0.32950548  0.015253406   0.10588919 -0.063600727    1.4118932    1.4396087   0.70069066  0.066666667    1.2840726        1e-10 1.7517267e-11    5.7086532    2.4848904    30.403515   -0.0139196  -0.16943542 -0.0047477429   0.16002181   -1.1567858    1.0493425 
  949000    4.1746551    1.2781028    2.8965523  -0.21616486   0.85215945    1.0024485   0.75864634   -1.2465374            1    1.6249022    2.1944127    2.2763686   0.40392538 0.0093994575 0.0019541066  0.029001383    1.4647898     1.493053   0.70430365  0.066666667    1.2954362        1e-10 1.7607591e-11    5.6793685    2.4873148    30.403515   0.01332059  -0.20046611 -0.0042011845   0.22883892    0.4987704    2.3669725 
  950000    4.1645138    1.2772834    2.8872305  -0.21226815   0.85161306     1.013063   0.75114435   -1.2465374            1    1.5670722    2.1763517    2.2190884   0.30577664  0.022038301  0.014488594  0.013176742    1.4085431    1.4338269   0.70057802  0.066666667    1.2898146        1e-10 1.751445e-11    5.7095711    2.4772065    30.403515 0.0027725059  -0.18646831 -0.0045675189   0.20214829   -1.2787958   0.42834387 
  951000    4.1872165    1.2822331    2.9049834   -0.2203333   0.85491322   0.99515056   0.76766486   -1.2465374            1     1.700317    2.2785833    2.2895055   0.53286222 -0.004865215 -0.042220181 0.0039365245    1.5383012    1.5694276   0.70464394  0.066666667    1.2851939        1e-10 1.7616098e-11    5.6766259    2.4884014    30.403515 -0.00075158491  -0.24034004 -0.0039365159   0.18648815   -0.1661998    2.0819628 
  952000    4.1892287    1.2616507     2.927578  -0.21290958   0.84119019    0.9838371   0.75243779   -1.2465374            1    1.5819363    2.1887977    2.2073082   0.34970303  0.014012604  0.018834344 -0.016135996    1.4231342     1.452535     0.702372  0.066666667    1.2874152        1e-10  1.75593e-11    5.6949878    2.4757574    30.403515 0.00013693325  -0.19381546 -0.0097574722   0.19598879  -0.61815594    1.4571661 
  953000    4.1831412    1.2667709    2.9163702  -0.21775775   0.84460405    0.9986733    0.7487338   -1.2465374            1    1.6358661    2.2552979    2.2153795   0.43692075 -0.0020980503  0.038504044  0.023643302    1.4778457    1.5045134   0.69888357  0.066666667     1.282898        1e-10 1.7472089e-11     5.723414    2.4754246    30.403515  0.012597308  -0.20674205  0.004472135    0.1842636  -0.98238041   0.33231635 
  954000    4.1698123    1.2918646    2.8779477  -0.21863269   0.86133493    1.0204672   0.76231232   -1.2465374            1     1.596346    2.2280275     2.229751    0.3312594 -0.0073466346  0.066725191  0.035493128    1.4354598    1.4621268   0.71097718  0.066666667    1.2860778        1e-10 1.7774429e-11    5.6260596    2.5106547    30.403515 -0.00094745405  -0.17239293 0.0027968528   0.17273386   -1.5609784    2.0931082 
  955000     4.147062     1.242007     2.905055  -0.21191341     0.828093   0.98087427   0.73302257   -1.2465374            1    1.6890045    2.2553948    2.2940322    0.5175865 0.0036115898  0.079650982 -0.010539655       1.5343    1.5599929   0.71514198  0.066666667    1.2845068        1e-10 1.7878549e-11    5.5932949    2.5022796    30.403515  0.010161211  -0.20067537 0.0013834647   0.18380532  -0.94692679    1.6652214 
  956000    4.1376314    1.2495408    2.8880906  -0.22612897   0.83311607   0.96962497   0.74818751   -1.2465374            1    1.5671012    2.1759421    2.1774681   0.34789354 -0.0079416696  0.064219123  0.016233276    1.4091962    1.4395692   0.71656929  0.066666667    1.2817982        1e-10 1.7914232e-11    5.5821538    2.4886432    30.403515 -0.00058949142  -0.20853707 -0.013384719   0.18844047  -0.26397907    1.1910954 
  957000    4.1534007    1.2727223    2.8806784  -0.23007035   0.84857204     1.018718   0.74268344   -1.2465374            1    1.5516639    2.1706253    2.1824511   0.30191524 0.0062184359 -0.019359346  0.022676379    1.3949204    1.4176748   0.72027638  0.066666667    1.2928319        1e-10 1.800691e-11    5.5534238    2.4950576    30.403515 -0.0046605664   -0.1812066 -0.0028867084    0.1664294   0.34455041   0.74888203 
  958000    4.1594398    1.2678884    2.8915515  -0.22618832   0.84534907    0.9928344   0.75358208   -1.2465374            1    1.5302036    2.1651014    2.1654026    0.2601068  0.014220989  0.006806585 -0.048786387      1.37116    1.3996189   0.71732803  0.066666667    1.2776641        1e-10 1.7933201e-11    5.5762494    2.5091985    30.403515  0.011295312  -0.19592377 -0.0024126595   0.21102806  -0.50383943   -1.2681594 
  959000    4.1920681    1.2896112     2.902457  -0.22065653   0.85983248    1.0128481   0.76462148   -1.2465374            1     1.690257    2.2681835    2.2892992   0.51328845 -0.0040818576  0.057312809  0.022521238    1.5288836      1.55704    0.7092093  0.066666667    1.2880859        1e-10 1.7730233e-11    5.6400839    2.4948402    30.403515 0.0072490305  -0.20808062 0.0023226994   0.18930109  -0.06063301    2.0876341 
  960000     4.159207    1.2843538    2.8748531  -0.22638452   0.85632723   0.99720904   0.76867747   -1.2465374            1     1.539239    2.1816392    2.1811067    0.2549712 0.0097645767  0.007407616  -0.04067363    1.3770095    1.4080789   0.70357376  0.066666667    1.2779656        1e-10 1.7589344e-11    5.6852603    2.4715274    30.403515 -0.017641203   -0.2028552 -0.010156174   0.16409029  -0.68065802    1.5643004 
  961000    4.1878033    1.2760818    2.9117215  -0.22586039   0.85081195    1.0001531   0.75788936   -1.2465374            1    1.6964756    2.2581496    2.2925891   0.53868804 0.0068396133  0.060944654 -0.051040989    1.5365229    1.5649282   0.70649574  0.066666667    1.2946559        1e-10 1.7662394e-11    5.6617468    2.4803529    30.403515 0.0061299107  -0.18757115 -0.020985866   0.20992365    -1.219014    3.4358545 
  962000    4.1483635    1.2641196    2.8842439  -0.22117097   0.84283631   0.99489817   0.74821678   -1.2465374            1    1.4852749    2.1207989    2.1268069    0.2082189 -0.00047018065  0.075897656 -0.0079637152    1.3273636    1.3544187   0.70658038  0.066666667    1.2972729        1e-10 1.7664509e-11    5.6610686    2.4929742    30.403515 0.0036126806  -0.20032189 -0.0028667449   0.16616455   0.83620723    1.4892581 
  963000    4.1701481    1.2824832    2.8876649  -0.21743529   0.85507997    1.0136615   0.75639949   -1.2465374            1    1.5645548    2.1800042     2.211476   0.30218404 0.0011535681    0.1093974  -0.04575113    1.4049165    1.4312307   0.70433426  0.066666667    1.2894461        1e-10 1.7608357e-11    5.6791217    2.4964578    30.403515 -0.0094257478  -0.18780537 0.0076516581   0.16113107  -0.51750751   0.30074285 
  964000    4.1556493    1.2635593      2.89209  -0.21904364   0.84246272   0.99621039   0.74679252   -1.2465374            1    1.6706665    2.2747073    2.2733274   0.46396471 -0.0071939848  0.069320964 0.0068298967    1.5130558    1.5396377   0.70305066  0.066666667    1.2815257        1e-10 1.7576266e-11    5.6894904    2.4752729    30.403515 0.0072556483  -0.18398133 -0.019328166   0.20438915   -1.3651758    3.4985315 
  965000    4.1734196    1.2795019    2.8939177  -0.20675959   0.85309227    1.0059437   0.75798244   -1.2465374            1     1.554708    2.1810896    2.1808643   0.30217014 -0.011498461 -0.049723155  0.011862575    1.3947357     1.422399   0.70851265  0.066666667    1.2873795        1e-10 1.7712816e-11    5.6456296    2.5002377    30.403515 0.0086681112  -0.20967628 0.0073071327    0.2046945  -0.16294948   -1.2015659 
  966000    4.1917713    1.2660899    2.9256814  -0.20849803   0.84414997   0.98400988   0.75713496   -1.2465374            1    1.7176675    2.2952741    2.2950586   0.56266984 -0.0083922736   0.13602782 0.0021779724    1.5578741    1.5882435   0.69987749  0.066666667    1.2858188        1e-10 1.7496937e-11     5.715286    2.4779433    30.403515 -0.0070125369  -0.18936411 0.0065223211   0.19322792   -1.9432367   -1.0340184 
  967000    4.2146088    1.2769353    2.9376735  -0.20584624   0.85138098   0.99616004   0.76130159   -1.2465374            1    1.4621606    2.0837098    2.1230524    0.1797195 -0.0068138274   0.10409947 -0.022971377    1.3014877    1.3311384   0.69634141  0.066666667     1.284486        1e-10 1.7408535e-11    5.7443086    2.4940769    30.403515 0.0052863219  -0.16292028 0.0032919938   0.18469667   -1.8917539   -1.5501712 
  968000    4.1773751    1.2712466    2.9061285  -0.21832377    0.8475881    1.0094717   0.74684845   -1.2465374            1     1.486752    2.1165937    2.1337691   0.20989327 -0.0059565878  0.010372983  -0.05089031    1.3291295     1.353979   0.70375756  0.066666667    1.2835196        1e-10 1.7593939e-11    5.6837755    2.4831115    30.403515 -0.0065703763  -0.18287879 -0.0048887384   0.17966146  -0.92725701   0.95059099 
  969000    4.1734375    1.2721877    2.9012498  -0.20918918    0.8482156   0.99553011   0.75655557   -1.2465374            1    1.6520103     2.266993      2.23953   0.44950796 0.0033769753 -0.087329999 -0.057241683    1.4923392     1.521071   0.70965665  0.066666667    1.2903464        1e-10 1.7741416e-11    5.6365286    2.4839947    30.403515 -0.0026644519  -0.20972047 -0.0036912802   0.17643472  -0.43716444   0.19771217 
  970000    4.1681362    1.2723087    2.8958275  -0.21632046   0.84829625    1.0082926   0.74873288   -1.2465374            1    1.4305054    2.0792796     2.101556    0.1106806 -0.010516666  -0.14634773  -0.06440428    1.2724852    1.2978875   0.70545756  0.066666667    1.2914186        1e-10 1.7636439e-11    5.6700789    2.4844593    30.403515 -0.0029461772  -0.21938004  0.013523545   0.18071494    1.1125016  -0.33971143 
  971000    4.1579247    1.2699007     2.888024  -0.22439912   0.84669079    1.0006599   0.75088331   -1.2465374            1    1.4705959    2.1184557    2.1077228   0.18560929 0.0044704356  -0.10497092 -0.0048578763    1.3121219    1.3389819   0.70112092  0.066666667    1.2937953        1e-10 1.7528023e-11      5.70515    2.4858335    30.403515   0.01846667  -0.17814549  0.010922267   0.19416867   0.55202888   0.40807236 
  972000    4.1690962    1.2752102     2.893886  -0.22982553   0.85023078   0.99528149   0.75998191   -1.2465374            1    1.6334935      2.24028     2.238621   0.42157939 -0.0025939338  0.044302372  0.028059653    1.4730992    1.5025869   0.70891112  0.066666667    1.2959238        1e-10 1.7722778e-11    5.6424563    2.4955129    30.403515 -0.00029151185  -0.18060883  0.014438774   0.19507648   0.65849924    0.9466565 
  973000    4.1431742    1.2425767    2.9005975  -0.21385387   0.82847283   0.98780072   0.72932259   -1.2465374            1     1.530775    2.1604623    2.1631339   0.26872898 -0.0019374731 -0.026142298 -0.016001697    1.3768514    1.4008524   0.70134494  0.066666667    1.3037822        1e-10 1.7533624e-11    5.7033276    2.4866735    30.403515 0.0057624917  -0.21360731  -0.02126259   0.18066748   0.20417378    3.4130936 
  974000    4.1713341    1.2638587    2.9074753  -0.21022364   0.84266236    1.0233963   0.73017427   -1.2465374            1    1.6733215    2.2756317    2.3004923   0.44384057 0.0033748618  0.012841508 0.0069738379    1.5192181    1.5387171   0.70376998  0.066666667    1.3001085        1e-10 1.7594249e-11    5.6836753    2.5006281    30.403515 -0.00030271896  -0.13788959  0.012574369   0.19680827   0.29284299    3.2474102 
  975000    4.1862627    1.2670747     2.919188   -0.2242704    0.8448066   0.98108883   0.76002133   -1.2465374            1    1.4694134    2.0912582    2.0981781   0.21880381 -0.013789809  0.053790467 -0.055398077    1.3090108    1.3403735   0.70027582  0.066666667    1.3027205        1e-10 1.7506895e-11     5.712035    2.4721312    30.403515 -0.009338402  -0.18090457 0.0030826078   0.18918886 -0.064827901    1.9818923 
  976000    4.1708644    1.2803075    2.8905569  -0.20831027   0.85362935    1.0194318    0.7504485   -1.2465374            1    1.6055161    2.2207872    2.2574415    0.3383197 0.0002264717   0.13079649  0.030906712    1.4471338    1.4714331   0.70688612  0.066666667    1.3074712        1e-10 1.7672153e-11    5.6586201    2.4946761    30.403515  0.016171065  -0.20329529  0.010643479   0.17356875   -1.3680509  -0.12668558 
  977000    4.1844035    1.2837892    2.9006143  -0.22308918   0.85595075    1.0245923     0.751001   -1.2465374            1    1.5780457    2.1931164    2.1891421   0.35187842 0.0048621821   0.03031074 -0.045229092    1.4195468    1.4432839   0.70604619  0.066666667     1.304775        1e-10 1.7651155e-11    5.6653518    2.4939323    30.403515 0.0043309243  -0.19041837 -0.0014262997   0.18231117  -0.71777118   0.86764055 
  978000    4.1437596    1.2506636     2.893096  -0.21553733   0.83386469     1.007871   0.72556772   -1.2465374            1    1.5987514    2.2313451    2.2184309   0.34647819 -0.012544604  0.057245519 -0.0077020257    1.4456202     1.466189   0.70664644  0.066666667    1.3009034        1e-10 1.7666161e-11    5.6605394    2.4814904    30.403515 -0.0074085999  -0.19080261 -0.0032438621   0.21371967  -0.89567758    2.2901063 
  979000    4.1739349    1.2770904    2.8968446  -0.22286383   0.85148439     1.020884   0.74606141   -1.2465374            1    1.5491314    2.1871196    2.1510411   0.30923343  0.015133419  0.040433567  0.064277398     1.391675    1.4148574   0.70243723  0.066666667    1.3136462        1e-10 1.7560931e-11     5.694459    2.4770507    30.403515 -0.0055984638  -0.20543999 -0.008685943   0.18879572   -1.1410273    1.5673322 
  980000    4.1691852     1.267908    2.9012772  -0.22330913   0.84536214    0.9943967   0.75262967   -1.2465374            1    1.5328006    2.1472021    2.1659093   0.28529026 -0.0034236288  0.047667522 -0.008025567     1.373958    1.4020104   0.70513803  0.066666667    1.3136163        1e-10 1.7628451e-11    5.6726482    2.4944382    30.403515 -0.0078168484  -0.18522238 -0.0033122494   0.20501207  -0.28333096    2.2277652 
  981000     4.143464     1.254074    2.8893901  -0.22253361   0.83613849   0.97969442   0.74681873   -1.2465374            1    1.5525512    2.1808078    2.1945526   0.28229308  0.007325241  0.013697541 -0.0054970054    1.3949349    1.4236947   0.71052464  0.066666667    1.3063793        1e-10 1.7763116e-11    5.6296429    2.5151841    30.403515 -0.0040422816  -0.16485781 0.0043441086   0.20053423   0.87222368    2.4551633 
  982000    4.1647768    1.2525532    2.9122236  -0.20913537   0.83512454   0.98971418   0.73892835   -1.2465374            1    1.6315855    2.2433604    2.2354686   0.41592739 0.0043180672 -0.055235862 -0.031120103    1.4756345    1.5014111   0.69805411  0.066666667    1.3048648        1e-10 1.7451353e-11    5.7302148    2.4817977    30.403515 -0.00029419482   -0.1922205 -0.0041527825   0.19875319    1.2295403    3.3551598 
  983000    4.1915892    1.2744969    2.9170923  -0.22543576   0.84975521   0.98724044   0.76422109   -1.2465374            1    1.4081862    2.0680952    2.0687697  0.087693841 0.0073837904 -0.067883888  -0.07711112    1.2468972    1.2783373   0.70262698  0.066666667    1.3151355        1e-10 1.7565675e-11    5.6929211     2.486937    30.403515 0.0068673828  -0.17784542 -0.0080585622   0.20852927    1.4430281   -1.5607045 
  984000    4.1831322    1.2730082    2.9101239  -0.21006729   0.84876269    1.0000596   0.75462092   -1.2465374            1    1.6368077    2.2467769    2.2596087   0.40403756 -0.0072869081 -0.069170577 -0.076373458    1.4775448    1.5052727   0.70212183  0.066666667     1.312737        1e-10 1.7553046e-11     5.697017    2.4992396    30.403515 -0.00096863819  -0.15624721  0.015106088   0.20778129    1.8796536    3.7052133 
  985000    4.1722005    1.2842558    2.8879447  -0.21235046   0.85626187   0.99776092   0.76822744   -1.2465374            1    1.6674642    2.2748607    2.2673362   0.46019585 0.0047962879 -0.040112956  0.010957998    1.5053297    1.5362315   0.70309135  0.066666667    1.3087979        1e-10 1.7577284e-11    5.6891611    2.4865828    30.403515 0.0055813828  -0.19229069 0.0051404629    0.2107401   0.45207476     3.304923 
  986000    4.1689458    1.2764227    2.8925232  -0.22229958   0.85103921   0.99844433    0.7593232   -1.2465374            1    1.5135106    2.1545193    2.1755334     0.210479  0.011188387 -0.076565545  0.043585885    1.3532553     1.382188   0.70495391  0.066666667    1.3064551        1e-10 1.7623848e-11    5.6741298    2.5264069    30.403515 0.0028513908   -0.2053079  0.021711532   0.21127664   0.49971841   -0.1706833 
  987000    4.1533514    1.2545712    2.8987802  -0.21608449   0.83647001   0.99883273   0.73542984   -1.2465374            1    1.5864577     2.192921    2.1978992   0.36855275 -0.0070896367  -0.16432311 0.0065560144    1.4312451     1.455084   0.70592646  0.066666667    1.3040592        1e-10 1.7648162e-11    5.6663126    2.5060701    30.403515 -0.00062615149  -0.19903378 0.0048036102   0.15533755 -0.0046081399    1.8247154 
  988000      4.16259     1.265834     2.896756  -0.22114963   0.84397934    1.0121213   0.73933884   -1.2465374            1    1.5106193    2.1629633    2.1447501   0.22414462 -0.0018314569  0.023480414  0.056263234    1.3545818    1.3774979   0.70149043  0.066666667    1.3114568        1e-10 1.7537261e-11    5.7021448    2.4896518    30.403515 0.0085523802  -0.20428704 -0.0044282945   0.16878076   -2.3897123    1.1728755 
  989000    4.2095197    1.2856094    2.9239103  -0.21360313   0.85716435   0.99975764   0.76844815   -1.2465374            1    1.5861872    2.2119702     2.185608    0.3609833  0.007455439  0.031892367 -0.016218731    1.4240061    1.4546918     0.711665  0.066666667     1.306053        1e-10 1.7791625e-11    5.6206221    2.4996589    30.403515  -0.01340568  -0.18371392 -0.0014207151   0.21054142  -0.13401255     1.844442 
  990000    4.1672328    1.2744968     2.892736  -0.22344833   0.84975515     1.008146   0.75119257   -1.2465374            1    1.6004843    2.2121486    2.2252937   0.36401051 0.0052744533  0.064214845 -0.049781332     1.441945    1.4678857   0.70250376  0.066666667    1.3159645        1e-10 1.7562594e-11    5.6939197    2.4827078    30.403515  0.012890575  -0.21057865 -0.0066584652   0.19426974 -0.027150611    1.2203655 
  991000    4.1602905    1.2735705    2.8867199  -0.21951753   0.84913758   0.99592942   0.75780344   -1.2465374            1    1.6596232     2.269732    2.2510394   0.45809823  0.024067875   0.13201949 -0.011630755    1.4996887    1.5286314   0.69781795  0.066666667    1.3253756        1e-10 1.7445449e-11     5.732154     2.476641    30.403515 0.0034802347  -0.19507184 0.0073683605   0.19009875    1.0016698  -0.03097295 
  992000    4.1726782    1.2888234    2.8838548  -0.21877791   0.85930725    1.0106325   0.76514962   -1.2465374            1     1.597231    2.2421621    2.2286306   0.32090027 -0.013094158  0.041925601 -0.006814712     1.435746    1.4643053   0.70349209  0.066666667    1.3299586        1e-10 1.7587302e-11    5.6859203    2.4979189    30.403515 -0.0044730047  -0.20348412 -0.0075244851   0.16519932    1.1266683   0.47982794 
  993000    4.1462197    1.2623772    2.8838425  -0.21641844   0.84167457      0.96865   0.76268879   -1.2465374            1    1.6701604    2.2526361    2.2851768   0.47266827 -0.016226843 -0.0097865568 -0.018553799    1.5091948    1.5427566   0.70388971  0.066666667     1.329672        1e-10 1.7597243e-11    5.6827085    2.4931004    30.403515 0.0017267902  -0.20683547 -0.001246131   0.23146066   0.68917765    2.3571867 
  994000    4.1568769    1.2593438    2.8975331    -0.211851   0.83965208   0.99498941   0.74299072   -1.2465374            1    1.5442679    2.1526381    2.1598218   0.32034381 -0.019242771 -0.091078827 -0.016617766    1.3874596    1.4133997   0.70624538  0.066666667    1.3243908        1e-10 1.7656135e-11    5.6637539    2.5079657    30.403515 -0.0052405906  -0.21778266 -0.002571811   0.21537426   0.93875493    2.2105026 
  995000     4.158013    1.2569012    2.9011118  -0.21572039   0.83802352   0.97361201   0.75366942   -1.2465374            1    1.5165498    2.1678221    2.1467299   0.23509743 0.0046266047 -0.053845876  0.060206238    1.3574877    1.3884933   0.69829224  0.066666667    1.3340051        1e-10 1.7457306e-11    5.7282607    2.4863438    30.403515 -0.0063360199  -0.16921058 0.0075792606   0.20912432   -2.1278341 -0.058139527 
  996000    4.1759977    1.2583411    2.9176567  -0.20871825   0.83898352    1.0052237   0.73552732   -1.2465374            1    1.5467492    2.1647315    2.1703806   0.30513551 -0.0053834548 -0.081131427 -0.046251235    1.3915161     1.414535   0.69748117  0.066666667    1.3348859        1e-10 1.7437029e-11    5.7349218    2.5022852    30.403515 -0.010049154  -0.20951654 0.0020416279   0.21357383  -0.95911876    3.3852747 
  997000    4.1561082    1.2736835    2.8824247  -0.20829375   0.84921288    1.0192914   0.74336639   -1.2465374            1    1.5828644    2.2259677    2.2029249   0.31970053  0.017136631 -0.087990266 -0.066902603    1.4259768    1.4487998   0.70561731  0.066666667    1.3319349        1e-10 1.7640433e-11    5.6687952    2.5041621    30.403515 0.0060186391  -0.19144551 -0.0026909698   0.19132663 -0.064819568   0.55292333 
  998000    4.1857888    1.2690512    2.9167376  -0.22119135   0.84612435    1.0053813   0.74702137   -1.2465374            1    1.5460335    2.1590628     2.190791   0.28824668 0.0030562931 -0.016921803  0.017704306    1.3883745    1.4137985   0.70257407  0.066666667    1.3265847        1e-10 1.7564352e-11    5.6933499    2.4871458    30.403515  0.012196457   -0.2124351 0.0061011557   0.16625444   -1.1661269   0.79890086 
  999000    4.2044854    1.2886247    2.9158608  -0.21195068   0.85917474    1.0208032   0.75859609   -1.2465374            1    1.4451001    2.1034067    2.1051871    0.1267065 -0.006394587 -0.035807922 -0.0022733303    1.2849983    1.3108367    0.7023337  0.066666667    1.3156612        1e-10 1.7558342e-11    5.6952984    2.4810866    30.403515 -0.010943375  -0.17912076  0.011108285   0.17671595   0.98230415    3.1405309 
 1000000    4.1733241    1.2663876    2.9069365  -0.22169135   0.84434842    0.9893685   0.75411762   -1.2465374            1    1.6466275    2.2451646    2.2323851   0.46233292 -0.0033690809  -0.13209112  0.024972314    1.4874709    1.5164987   0.69637012  0.066666667    1.3138446        1e-10 1.7409253e-11    5.7440718    2.4859088    30.403515 -0.0012327287  -0.20440325 -0.016339569   0.19626808     3.244802    4.7245115 
Loop time of 1053.81 on 1 procs for 700000 steps with 9376 atoms

Performance: 286957.808 tau/day, 664.254 timesteps/s
99.3% CPU use with 1 MPI tasks x 1 OpenMP threads

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 107.19     | 107.19     | 107.19     |   0.0 | 10.17
Bond    | 246.97     | 246.97     | 246.97     |   0.0 | 23.44
Neigh   | 313.3      | 313.3      | 313.3      |   0.0 | 29.73
Comm    | 18.235     | 18.235     | 18.235     |   0.0 |  1.73
Output  | 1.4582     | 1.4582     | 1.4582     |   0.0 |  0.14
Modify  | 345.94     | 345.94     | 345.94     |   0.0 | 32.83
Other   |            | 20.71      |            |       |  1.97

Nlocal:    9376 ave 9376 max 9376 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Nghost:    1676 ave 1676 max 1676 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Neighs:    13316 ave 13316 max 13316 min
Histogram: 1 0 0 0 0 0 0 0 0 0

Total # of neighbors = 13316
Ave neighs/atom = 1.42022
Ave special neighs/atom = 6.92833
Neighbor list builds = 90883
Dangerous builds = 0
#undump      comp

unfix abeads_cdz
unfix bbeads_cdz
unfix tbeads_cdz

###############
# Shearing    #
###############

#--- Keep only thermostat on walls ---#
unfix lang_melt

#variable    vtop equal (v_Wall_v/2)
#variable    vbot equal -(v_Wall_v/2)
velocity    twout set $(v_Wall_v/2) 0.0 0.0  units box
velocity    twout set 5.0000000000000001822e-11 0.0 0.0  units box
velocity    bwout set -$(v_Wall_v/2) 0.0 0.0  units box
velocity    bwout set -5.0000000000000001822e-11 0.0 0.0  units box


#--- Number Density profiles ---#

compute         sabeads abeads chunk/atom bin/1d z lower ${binres} units reduced # Check bound keyword to maybe only bin melt area
compute         sabeads abeads chunk/atom bin/1d z lower 0.001 units reduced 
fix             abeads_sdz abeads  ave/chunk ${Neverys} ${Nrepeats} ${Nfreqs} sabeads density/number file abeads_sdz
fix             abeads_sdz abeads  ave/chunk 100 ${Nrepeats} ${Nfreqs} sabeads density/number file abeads_sdz
fix             abeads_sdz abeads  ave/chunk 100 1000 ${Nfreqs} sabeads density/number file abeads_sdz
fix             abeads_sdz abeads  ave/chunk 100 1000 100000 sabeads density/number file abeads_sdz
compute         sbbeads bbeads chunk/atom bin/1d z lower ${binres} units reduced # Check bound keyword to maybe only bin melt area
compute         sbbeads bbeads chunk/atom bin/1d z lower 0.001 units reduced 
fix             bbeads_sdz bbeads  ave/chunk ${Neverys} ${Nrepeats} ${Nfreqs} sbbeads density/number file bbeads_sdz
fix             bbeads_sdz bbeads  ave/chunk 100 ${Nrepeats} ${Nfreqs} sbbeads density/number file bbeads_sdz
fix             bbeads_sdz bbeads  ave/chunk 100 1000 ${Nfreqs} sbbeads density/number file bbeads_sdz
fix             bbeads_sdz bbeads  ave/chunk 100 1000 100000 sbbeads density/number file bbeads_sdz
compute         stbeads tbeads chunk/atom bin/1d z lower ${binres} units reduced # Check bound keyword to maybe only bin melt area
compute         stbeads tbeads chunk/atom bin/1d z lower 0.001 units reduced 
fix             tbeads_sdz tbeads  ave/chunk ${Neverys} ${Nrepeats} ${Nfreqs} stbeads density/number file tbeads_sdz
fix             tbeads_sdz tbeads  ave/chunk 100 ${Nrepeats} ${Nfreqs} stbeads density/number file tbeads_sdz
fix             tbeads_sdz tbeads  ave/chunk 100 1000 ${Nfreqs} stbeads density/number file tbeads_sdz
fix             tbeads_sdz tbeads  ave/chunk 100 1000 100000 stbeads density/number file tbeads_sdz

#--- Temperature and Velocity profiles ---#
compute        eall all chunk/atom bin/1d z lower ${binres} units reduced
compute        eall all chunk/atom bin/1d z lower 0.001 units reduced
#compute        biasT all temp/profile 1 1 1 xyz 100 100 100
fix            temp_prof   all ave/chunk ${Neverys} ${Nrepeats} ${Nfreqs} eall temp file temp_sz
fix            temp_prof   all ave/chunk 100 ${Nrepeats} ${Nfreqs} eall temp file temp_sz
fix            temp_prof   all ave/chunk 100 1000 ${Nfreqs} eall temp file temp_sz
fix            temp_prof   all ave/chunk 100 1000 100000 eall temp file temp_sz
#fix            temp_bias   all ave/chunk ${Neverys} ${Nrepeats} ${Nfreqs} eall temp bias biasT file tempb_sz
fix            vel_prof_x_s all ave/chunk ${Neverys} ${Nrepeats} ${Nfreqs} eall vx vy file velp_sz
fix            vel_prof_x_s all ave/chunk 100 ${Nrepeats} ${Nfreqs} eall vx vy file velp_sz
fix            vel_prof_x_s all ave/chunk 100 1000 ${Nfreqs} eall vx vy file velp_sz
fix            vel_prof_x_s all ave/chunk 100 1000 100000 eall vx vy file velp_sz
#--- Ave s_bot and p_bot ---#

fix             fc_ave all ave/time ${Neverys} ${Nrepeats} ${Nfreqs} v_sbot v_pbot file fc_ave.dump
fix             fc_ave all ave/time 100 ${Nrepeats} ${Nfreqs} v_sbot v_pbot file fc_ave.dump
fix             fc_ave all ave/time 100 1000 ${Nfreqs} v_sbot v_pbot file fc_ave.dump
fix             fc_ave all ave/time 100 1000 100000 v_sbot v_pbot file fc_ave.dump

#--- Dumps ---#
#dump           shear all image ${Ndump_s} stg3.*.jpg type type zoom 2 view 60 120 bond none none

#--- Run Shear ---#
timestep    ${Tstep}
timestep    0.005
run         ${Nshear}
run         1000000
WARNING: Inconsistent image flags (src/domain.cpp:784)
Per MPI rank memory allocation (min/avg/max) = 10.6 | 10.6 | 10.6 Mbytes
Step TotEng KinEng PotEng E_pair Temp c_melTemp c_wallTemp v_Fcatom v_Pcomp2 Press Pxx Pyy Pzz Pxy Pxz Pyz c_melPress c_wallPress v_melDens v_surfcov v_aveRg v_Wall_v2 v_srate v_D v_bwzmax Zhi c_fbwall[1] c_fbwall[3] c_ftwall[1] c_ftwall[3] v_sbot v_pbot 
 1000000    4.1733119    1.2663753    2.9069365  -0.22169135   0.84434028    0.9893685    0.7541044   -1.2465374            1    1.6466247    2.2451646    2.2323851   0.46232456 -0.0033690809  -0.13209112  0.024972314    1.4874709    1.5164959   0.69637012  0.066666667    1.3138446        1e-10 1.7409253e-11    5.7440718    2.4859088    30.403515 -0.0012327287  -0.20440325 -0.016339569   0.19626808     3.244802    4.7245115 
 1001000    4.1607385    1.2666512    2.8940873  -0.21590372   0.84452421    1.0170519   0.73715062   -1.2465374            1    1.5040081    2.1493017    2.1225898   0.24013267 -0.0024764633 -0.050175603 -0.036923871    1.3484323    1.3702381   0.70646599  0.066666667    1.3025143        1e-10 1.766165e-11    5.6619852    2.4886114    30.403515  0.010562791  -0.19714071 -0.0024933204   0.17496968    2.4941625    1.7752978 
 1002000    4.1870622    1.2867091     2.900353  -0.22094791    0.8578976    1.0247017   0.75409326   -1.2465374            1    1.5747791     2.178466    2.1950344   0.35083693  0.011405278  0.028166256  0.039559462    1.4156276     1.440003   0.70944104  0.066666667    1.3362517        1e-10 1.7736026e-11    5.6382416    2.4785678    30.403515 0.0054792924  -0.19849314 -0.0020734025   0.22167658   0.69087985    2.4846328 
 1003000    4.1601678    1.2733579      2.88681  -0.21545563    0.8489958    1.0124637   0.74726903   -1.2465374            1     1.496605    2.1473537     2.145129   0.19733222  0.011481578    0.1184716 -0.026776766    1.3388937    1.3634385   0.70225261  0.066666667    1.3527016        1e-10 1.7556315e-11     5.695956    2.4839191    30.403515 -0.002855441  -0.19862024 -0.0056812417   0.19446615  -0.81502044    0.7264219 
 1004000    4.1903056    1.2666659    2.9236397  -0.21413251   0.84453404   0.98876474    0.7547952   -1.2465374            1    1.5417991    2.1696843    2.1735317   0.28218128  0.024527599   0.13727234 -0.038650155    1.3824994    1.4117496   0.69558761  0.066666667    1.3918264        1e-10 1.738969e-11    5.7505337    2.5174768    30.403515  0.005446037  -0.19978732 -0.0039645742   0.19795364 -0.033415043    4.2936565 
 1005000    4.1608392    1.2568684    2.9039708  -0.21227596   0.83800164    0.9887044   0.74422827   -1.2465374            1    1.5180269    2.1417526    2.1494612   0.26286704 -0.014646262   0.15274045  0.053625237    1.3609574    1.3879854    0.6999436  0.066666667    1.3547932        1e-10 1.749859e-11    5.7147462    2.4877907    30.403515 0.0067329348  -0.18720335   0.01225571   0.21280999   -1.4891784    1.8458556 
 1006000    4.1660133    1.2702021    2.8958111  -0.22040301   0.84689173    1.0051605   0.74840476   -1.2465374            1    1.5638238    2.2032352    2.1667549   0.32148144 -0.0062947578  0.058534689 -0.0083997984    1.4058729    1.4316179   0.71566091  0.066666667    1.3280676        1e-10 1.7891523e-11    5.5892392    2.4957422    30.403515 0.0093099255  -0.20173626 -0.0035994959   0.23388332   -2.5304248   0.88259743 
 1007000    4.1523919     1.273132    2.8792599  -0.21877772    0.8488452    1.0048969   0.75174023   -1.2465374            1    1.6513088    2.2714891    2.2487945    0.4336427 -0.026676826  0.056205578  0.013068738    1.4926539    1.5191375   0.70448614  0.066666667    1.3543375        1e-10 1.7612154e-11    5.6778974    2.4864603    30.403515 -0.0059271481  -0.23710446 0.0082517411   0.23612844   0.53361983   0.38930136 
 1008000    4.1692141    1.2717126    2.8975016  -0.21393256    0.8478988    1.0112541   0.74624204   -1.2465374            1    1.5923204    2.2102597    2.2209837    0.3457177 -0.017643745  0.040215634  0.019105408    1.4348259     1.459313   0.70289594  0.066666667    1.3660136        1e-10 1.7572398e-11    5.6907428    2.5223161    30.403515  0.007870635   -0.1773609 0.0075876459   0.17640318   0.29909273    1.1937095 
 1009000    4.1809362    1.2742971    2.9066391  -0.20941386   0.84962201   0.98683459   0.76425777   -1.2465374            1    1.7345375    2.3232047     2.311889   0.56851886 0.0056850395  0.057920267 -0.0022636029    1.5732408     1.604742   0.70695757  0.066666667     1.326847        1e-10 1.7673939e-11    5.6580482    2.4931523    30.403515 -0.00096381536  -0.19151498 -0.0025410732   0.17470068   0.04655121      5.32336 
 1010000    4.1624329      1.27342    2.8890129  -0.21844399   0.84903719    1.0054416   0.75171243   -1.2465374            1     1.589992    2.2390289    2.1907491    0.3401979  0.011606206  -0.15955585  -0.07254637    1.4313429     1.457749   0.71333737  0.066666667    1.3369288        1e-10 1.7833434e-11    5.6074449    2.4771652    30.403515 -0.0049334719  -0.21608309 -0.0016937752   0.20025629    1.6660647    1.4042618 
 1011000    4.1721205    1.2731528    2.8989676  -0.20804251    0.8488591    1.0199012   0.74241207   -1.2465374            1    1.4564793    2.1033694    2.1222086   0.14385995  0.025715034   0.14713547 -0.015950913    1.2997931    1.3223346   0.70306433  0.066666667    1.3577883        1e-10 1.7576608e-11    5.6893798    2.4820213    30.403515  -0.01579561  -0.18586224 0.0059492077   0.19229075  -0.82264017    1.2629944 
 1012000    4.1591332    1.2725435    2.8865896  -0.21929113   0.84845286   0.99736449   0.75579753   -1.2465374            1    1.6344778    2.2429921    2.2220745   0.43836686 -0.017435774  0.048740671 -0.014663684    1.4749666    1.5032973   0.70742512  0.066666667    1.3518266        1e-10 1.7685628e-11    5.6543087    2.5035546    30.403515 0.0099800676  -0.20712408 -0.011004601   0.22930443    0.4325912  -0.81719947 
 1013000    4.1649504    1.2674975    2.8974529  -0.21537723   0.84508847    1.0010872   0.74801585   -1.2465374            1    1.5263591    2.1598612    2.1677061   0.25150982  0.010352727  0.066900615  0.042571852    1.3684902    1.3946889   0.71469139  0.066666667    1.3587167        1e-10 1.7867285e-11    5.5968213     2.515214    30.403515 0.00054842523  -0.18016938  0.007533271   0.17455161  -0.65006662    3.2337232 
 1014000    4.1965106    1.2701202    2.9263904  -0.21201297   0.84683711   0.99100115   0.75714021   -1.2465374            1     1.704297    2.2896199    2.3064256    0.5168455 -0.00016053327  0.043360173  0.046309019    1.5445024    1.5739534   0.69965916  0.066666667    1.3475152        1e-10 1.7491479e-11    5.7170694    2.4765405    30.403515  -0.02212636  -0.21223221  0.010964738   0.17794987   -1.6670624    0.7378086 
 1015000    4.1613839    1.2775348    2.8838491  -0.22023254   0.85178073    1.0067878   0.75532726   -1.2465374            1    1.5692183    2.2043022    2.1938659   0.30948678 0.0083146475  0.048722772 -0.024873674    1.4098064    1.4367983   0.69926898  0.066666667    1.3979369        1e-10 1.7481725e-11    5.7202594    2.4921723    30.403515 0.00066265171  -0.19123169 0.0017757296   0.21761959   -1.3281493   0.10138632 
 1016000     4.169748    1.2762085    2.8935394  -0.21779471   0.85089645     1.002811   0.75637009   -1.2465374            1    1.7026101    2.2889113    2.2897771   0.52914182  0.012950818 -0.035512632  0.034273047     1.542978    1.5707131    0.7061616  0.066666667    1.3826013        1e-10 1.765404e-11    5.6644258    2.5045579    30.403515  0.012821894   -0.1973168  0.014767178   0.18093095   0.99711634     1.892653 
 1017000    4.1711335     1.286585    2.8845485  -0.22165705   0.85781486    1.0218229   0.75575303   -1.2465374            1    1.6704874    2.2549592    2.3057021    0.4508009 -0.0023805053 -0.052296313 -0.001105192    1.5109856    1.5360899   0.71699055  0.066666667    1.3683005        1e-10 1.7924764e-11    5.5788741    2.4887665    30.403515   0.01703008  -0.20435596 -0.0021953007   0.23250503    1.3560061   -1.0892562 
 1018000    4.1526797    1.2495009    2.9031788   -0.2103292   0.83308947   0.99599285   0.73171178   -1.2465374            1    1.4464635    2.1286648    2.0879234   0.12280229 -0.0092798074  0.068151614  0.048039017    1.2920356    1.3154634   0.70364764  0.066666667     1.369183        1e-10 1.7591191e-11    5.6846634    2.4812841    30.403515 -0.0037791668  -0.19771859 0.0065755196   0.20076529   0.75295774    -1.319457 
 1019000    4.1641488    1.2513157    2.9128331  -0.21873945   0.83429946    0.9860725   0.73985845   -1.2465374            1    1.6755051    2.2828919    2.2504991   0.49312412  0.011689152  0.061775447 -0.010111889    1.5193578    1.5458097   0.69313483  0.066666667    1.4277818        1e-10 1.7328371e-11     5.770883    2.4857264    30.403515 0.0026244228  -0.17617743 0.0086718418   0.19898074  -0.93526447    3.4602984 
 1020000    4.1678749     1.273447    2.8944279  -0.21067354    0.8490552    1.0027937   0.75339183   -1.2465374            1    1.5486733    2.1748889    2.1829596   0.28817149 -0.006809062  0.062766235 -0.032199897    1.3896699    1.4167787   0.69464563  0.066666667     1.386623        1e-10 1.7366141e-11    5.7583317    2.4787787    30.403515 -0.010670662  -0.17760422 -0.0060804717   0.13479946  -0.19174944    1.2164499 
 1021000     4.174571    1.2763064    2.8982646  -0.22444712    0.8509617    1.0138246   0.74961232   -1.2465374            1    1.6469787    2.2526076    2.2318079   0.45652055 -0.0003192467  0.021059508 -0.039426216    1.4887729    1.5136332   0.70855972  0.066666667    1.3985707        1e-10 1.7713993e-11    5.6452545    2.4783409    30.403515 -0.0013049946  -0.19544336 -0.0031132016    0.2287314   -1.3371694     4.147887 
 1022000    4.1757448    1.2628552    2.9128896  -0.20756786   0.84199327   0.99546413    0.7464955   -1.2465374            1    1.4212965    2.0984559    2.0557251   0.10970842 0.0024590771 -0.0074648951 -0.013348853    1.2637485    1.2903659   0.70507427  0.066666667    1.3861044        1e-10 1.7626857e-11    5.6731612    2.4942032    30.403515 -0.0097132456  -0.20177993 0.0020023446   0.17235099  0.021185702   -1.2833265 
 1023000    4.1725884    1.2744705     2.898118  -0.21464991    0.8497376    1.0057503   0.75265707   -1.2465374            1     1.592588    2.2118967    2.2114368   0.35443052 -0.011522448 0.0020166901 -0.00066348021    1.4337396    1.4603045   0.69995701  0.066666667    1.3711752        1e-10 1.7498925e-11    5.7146366    2.4846253    30.403515 0.0060109667  -0.21515744 0.0093030892   0.16054739   -1.3552549  -0.54994231 
 1024000    4.1892978    1.2692662    2.9200317  -0.21245515    0.8462677   0.98804249   0.75805971   -1.2465374            1    1.5254141    2.1743948    2.1353238   0.26652352 -0.0028712743 -0.053029746  0.035746599    1.3654254    1.3954596   0.70925661  0.066666667    1.3704304        1e-10 1.7731415e-11    5.6397077    2.5083368    30.403515 -0.0016231371  -0.19162194  0.012392169   0.20027183    -0.558248    4.0833157 
 1025000    4.1527159    1.2740417    2.8786742  -0.21335207   0.84945172    1.0208996    0.7427519   -1.2465374            1     1.712347    2.3052524    2.3029226   0.52886578 -0.017414696 0.0030584241 -0.016675754     1.555589    1.5780709   0.71037073  0.066666667    1.3694899        1e-10 1.7759268e-11    5.6308626    2.4850563    30.403515 -0.0061199984  -0.18262615 0.0017786887   0.19244984   0.73095703    3.0583429 
 1026000     4.181495    1.2825062    2.8989888  -0.20979728   0.85509534    1.0154759   0.75529371   -1.2465374            1    1.4837214    2.1360039    2.1338661   0.18129428  0.010013242 -0.089879705  0.042335521    1.3243165    1.3501587    0.6962862  0.066666667    1.3626594        1e-10 1.7407155e-11    5.7447641     2.477682    30.403515 0.0061853498  -0.23412883 0.0018182293   0.20179867    1.4875545    1.4653087 
 1027000    4.1576666    1.2564713    2.9011953  -0.21097785   0.83773689    1.0077769   0.73191241   -1.2465374            1    1.5765969    2.2045782    2.2086848   0.31652775 0.0076997992  0.024588152  0.021849029    1.4221267    1.4440468   0.69912798  0.066666667    1.3588346        1e-10  1.74782e-11    5.7214131    2.4993351    30.403515 0.0027096061  -0.21455757 -0.0077185433   0.18287241  -0.75781827   0.94663795 
 1028000    4.1829491     1.265584    2.9173651     -0.21944   0.84381267    1.0072807   0.74208492   -1.2465374            1    1.6197005    2.2490377    2.2097653   0.40029836 -0.010371172  -0.10237922 -0.020070803    1.4630833    1.4872156   0.70855972  0.066666667    1.3544709        1e-10 1.7713993e-11    5.6452546    2.4914142    30.403515 -0.0013216659  -0.19753294 -0.016662121   0.19824262    1.0297089    3.6092618 
 1029000    4.1548109    1.2611867    2.8936241  -0.21412475   0.84088085    1.0021171   0.74054347   -1.2465374            1    1.4918522    2.1091128    2.1561423   0.21030151 0.0039077885 -0.099826875   -0.1142827    1.3355604    1.3600466   0.70168999  0.066666667    1.3537114        1e-10 1.754225e-11    5.7005231    2.4865675    30.403515 0.0025224758  -0.19958088 -0.00095765585   0.21251528    1.4886967   0.85589503 
 1030000    4.1426934    1.2514223    2.8912711  -0.20884739   0.83437054    1.0076584   0.72652143   -1.2465374            1    1.7689004    2.3590858    2.3099438   0.63767155 -0.013223125 -0.039562684  0.040539965    1.6155679    1.6363659   0.68961991  0.066666667    1.3706726        1e-10 1.7240498e-11    5.8002966    2.4835319    30.403515 -0.0081329598  -0.16703348 -0.013976965   0.16419643  -0.04148192     2.954824 
 1031000    4.1587113    1.2754883    2.8832229  -0.21773717   0.85041626    1.0174361   0.74647617   -1.2465374            1     1.498327    2.1398936    2.1365969    0.2184905 -0.0050973874 -0.0092930574  0.031642005    1.3407831    1.3645065   0.70477653  0.066666667    1.3785004        1e-10 1.7619413e-11    5.6755579    2.4917326    30.403515 -0.0092176733  -0.20173124  0.003376727   0.18853599   0.22601178   0.73336587 
 1032000    4.1963942    1.2848793    2.9115148   -0.2110564   0.85667758     1.011956   0.76005588   -1.2465374            1    1.7316924    2.3159613    2.3022732   0.57684266  0.021451574   0.02300907  0.025817255    1.5712825    1.5985927   0.70940358  0.066666667    1.3793533        1e-10 1.773509e-11    5.6385393    2.4840806    30.403515 0.0016198925  -0.20669868 0.0099618509   0.21718124   0.10257859     3.194823 
 1033000    4.1847408    1.2720035    2.9127373  -0.21895837   0.84809282    1.0167775   0.74311478   -1.2465374            1    1.5762635    2.2227248    2.1723144   0.33375138 0.0035317116 -0.0093580565 0.0056345936     1.419429    1.4425296   0.69606402  0.066666667    1.4104971        1e-10  1.74016e-11    5.7465979    2.4885714    30.403515 -0.011557411  -0.20432112 -0.0088641048   0.18387149   0.95716957     3.986209 
 1034000    4.1799066    1.2764545    2.9034521  -0.21479987   0.85106042    1.0161109   0.74834776   -1.2465374            1    1.5846935    2.1905047    2.1825855   0.38099022  0.023671421  0.077246434  0.017567736    1.4267546    1.4510473   0.69129665  0.066666667    1.4336508        1e-10 1.7282416e-11    5.7862279    2.4886807    30.403515 -0.00024514263  -0.18612424 0.0070519977   0.20071562    -0.386608    0.1103579 
 1035000    4.1835761    1.2674473    2.9161288  -0.22009177   0.84505498    1.0187827   0.73693361   -1.2465374            1    1.5785321    2.1942927    2.2049799   0.33632372 -0.0051336381  0.025883394 -0.036857339    1.4230021    1.4445345   0.70793349  0.066666667    1.4399725        1e-10 1.7698337e-11    5.6502483    2.5082861    30.403515  0.018200007  -0.18558752 -0.00055505533    0.1747962   0.48357435  0.017481043 
 1036000    4.1929758    1.2932314    2.8997444  -0.21876404   0.86224621     1.030763   0.75737526   -1.2465374            1    1.5339689    2.1508285    2.1561427   0.29493555 0.0062326566 -0.020338428 -0.024829846    1.3741247    1.3983956    0.7184985  0.066666667    1.4155703        1e-10 1.7962463e-11    5.5671654    2.4944635    30.403515 -0.013341312  -0.19076457  0.013511286   0.19691475   0.81253155  -0.78721722 
 1037000    4.1971388    1.2675007     2.929638  -0.21477594   0.84509062    1.0051578   0.74548254   -1.2465374            1    1.6404849    2.2631491    2.2264121    0.4318935 0.0025727883 -0.026625311 -0.026159934    1.4831507    1.5082793   0.69912247  0.066666667    1.4451424        1e-10 1.7478062e-11    5.7214582    2.4761039    30.403515  0.012197184  -0.19850599 0.00086847199   0.17899812   -1.2512656   0.21692278 
 1038000    4.1809683    1.2724018    2.9085665  -0.21407843   0.84835832   0.99129955   0.75942375   -1.2465374            1    1.5371764    2.1859118    2.1552984   0.27031898  0.016536171  0.053799219 -0.043378293    1.3768999    1.4067935   0.70013718  0.066666667    1.4510187        1e-10 1.750343e-11    5.7131661    2.5225864    30.403515 0.0023571577  -0.18826974 0.00032708392   0.19251078    -1.061966   0.54788414 
 1039000    4.1597987    1.2629984    2.8968002   -0.2180277   0.84208877   0.99736005   0.74546899   -1.2465374            1    1.6217746    2.2197754    2.2349193   0.41062908 0.0051766854  0.062746997  0.073980558    1.4644433    1.4905946   0.70671823  0.066666667    1.4285483        1e-10 1.7667956e-11    5.6599644    2.5022277    30.403515 -0.0056493053  -0.19462446 -0.0071071524   0.19458742  -0.91467348     2.091258 
 1040000    4.1736545    1.2746696    2.8989849  -0.21594777   0.84987037     1.015307   0.74691683   -1.2465374            1    1.5201127    2.1489975    2.1736513   0.23768944  0.018118533 -0.039477698  0.017631139    1.3624758    1.3865723   0.70841866  0.066666667    1.4548466        1e-10 1.7710467e-11    5.6463786    2.4745263    30.403515 8.2391411e-05  -0.19702893 -0.0018298804   0.16192655     0.727382    1.1722142 
 1041000    4.1912066    1.2786363    2.9125703  -0.21643168    0.8525151    1.0156511    0.7509958   -1.2465374            1    1.5564187    2.1671283    2.1742977   0.32783001 0.0019102972 0.0020488779  0.078497019    1.3979209    1.4228329   0.69881305  0.066666667    1.4662328        1e-10 1.7470326e-11    5.7239916    2.4872074    30.403515 0.0036265976  -0.20443001 -0.00029456388   0.16744104    0.2343402    1.4753812 
 1042000    4.1712262    1.2749819    2.8962443  -0.21304824   0.85007859    1.0041946   0.75418014   -1.2465374            1    1.6290402    2.2282054    2.2494466   0.40946855  0.019293123  0.026535731  0.030487227    1.4698703    1.4969613   0.69498994  0.066666667    1.4679493        1e-10 1.7374749e-11     5.755479    2.4987788    30.403515 -0.0015303985  -0.19544563 -0.016137237   0.22002819    1.0682485   0.79217752 
 1043000    4.1818916    1.2861336     2.895758  -0.21310421   0.85751386    1.0174443   0.75799314   -1.2465374            1    1.5423899    2.1640169    2.1724653   0.29068749 0.0026123949 -0.043510599  0.030921366    1.3824153    1.4085683   0.70754843  0.066666667    1.4514854        1e-10 1.7688711e-11    5.6533233     2.486349    30.403515 -0.0056136228  -0.18485292 -0.0021823525    0.2158219   0.83899627    1.3339649 
 1044000    4.1856302     1.280525    2.9051052   -0.2143783   0.85377441    1.0111329   0.75585589   -1.2465374            1    1.7504099    2.3181191    2.3201919   0.61291888 -0.014029868 0.0046688171  0.010515619    1.5908864    1.6174185   0.71385674  0.066666667    1.4656849        1e-10 1.7846418e-11    5.6033652    2.4959772    30.403515 0.0032151343  -0.20938255  0.015813875   0.20907402  -0.40166502    3.3343011 
 1045000    4.1713367     1.278466    2.8928707  -0.21403154   0.85240159    1.0197918   0.74823102   -1.2465374            1     1.614413    2.2361248     2.231849   0.37526521 0.0014862663 -0.013671154 -0.048280735    1.4564987    1.4802826   0.71112075  0.066666667    1.4622971        1e-10 1.7778019e-11    5.6249237    2.4881496    30.403515 0.00080059658  -0.19956964 -0.00097830177   0.17435813    -1.453734    1.7538426 
 1046000    4.1510625     1.252999    2.8980634  -0.20940955   0.83542179     1.003953    0.7305372   -1.2465374            1    1.6884334    2.3014021    2.2876085   0.47628973 -0.013107291  -0.02629399 -0.004873598    1.5342534    1.5563863   0.70227875  0.066666667     1.473261        1e-10 1.7556969e-11     5.695744    2.4861389    30.403515 0.0021312457  -0.17808016 -0.0036372019   0.23142662    0.4125021    2.0471525 
 1047000    4.1537498     1.258827    2.8949229  -0.22305577   0.83930749    1.0035237   0.73711272   -1.2465374            1     1.575255    2.1670455    2.1791699    0.3795497  0.015842075  0.029272493  0.020516103    1.4196873    1.4432644   0.70488241  0.066666667    1.4648719        1e-10 1.762206e-11    5.6747054    2.5023066    30.403515 0.0054161215    -0.225244 -0.0014435956   0.19214009   0.17743421    1.9113085 
 1048000    4.1569832    1.2830996    2.8738836  -0.22337369   0.85549097    1.0192865   0.75356114   -1.2465374            1    1.6641644    2.2783386    2.2419016   0.47225294 -0.013397733 -0.021072408  -0.04835754    1.5051252    1.5301005    0.7133331  0.066666667     1.495041        1e-10 1.7833328e-11    5.6074784    2.4948487    30.403515 0.0057735731  -0.19466775 -0.018232044   0.20710772   -1.4426609    1.3655501 
 1049000    4.1779454    1.2811364     2.896809  -0.23183433   0.85418205    1.0029957   0.76158878   -1.2465374            1    1.4341015     2.086987     2.083451   0.13186658 0.0069273461  0.068749824   0.03796553    1.2733681    1.3021803   0.70317134  0.066666667    1.4779222        1e-10 1.7579283e-11     5.688514    2.4892279    30.403515 -0.011903086    -0.178145 0.0059165599   0.20239975  -0.63911445   -2.8655396 
 1050000    4.1607005    1.2741616    2.8865389   -0.2151066   0.84953165    1.0044905   0.75310787   -1.2465374            1    1.5227417     2.168402    2.1504675   0.24935567 0.0042500469  0.063901416 0.0010039332    1.3637982    1.3906239   0.69749758  0.066666667    1.4938163        1e-10 1.743744e-11    5.7347869    2.5112694    30.403515 0.0095687203  -0.17567531 -0.0015436841   0.18496533    1.5486203   -1.5153819 
 1051000    4.1642244    1.2841767    2.8800477  -0.21663395   0.85620912    1.0235829   0.75204948   -1.2465374            1    1.5920552    2.2139672    2.2345481   0.32765037 0.0052159212 -0.044750813  0.018542227    1.4333351    1.4574262   0.70578797  0.066666667    1.4612302        1e-10 1.7644699e-11    5.6674245    2.5076798    30.403515 0.0064770885  -0.18623553  0.016423002   0.16842292    2.0567186    3.9490712 
 1052000     4.205447     1.292943     2.912504  -0.22518276   0.86205395    1.0125844   0.76839212   -1.2465374            1    1.5224637    2.1623583    2.1650908   0.23994211 0.0022430407  0.089364173 -0.00050217631    1.3602944    1.3892813    0.7168647  0.066666667    1.4760321        1e-10 1.7921617e-11    5.5798535    2.4997195    30.403515 -0.0058342226  -0.21229813 -0.0005630749   0.23714083    3.2141906   -1.7601282 
 1053000    4.2024588    1.2697483    2.9327106  -0.21404685   0.84658914    1.0019549   0.74991126   -1.2465374            1    1.5493428    2.1800765    2.1466788    0.3212732 -0.0040779991  0.092032359 -0.0053999454    1.3910739    1.4175585   0.70177166  0.066666667    1.4804528        1e-10 1.7544292e-11    5.6998597    2.5156491    30.403515 -0.0040891049  -0.21702751 -0.002607386   0.17064392    1.9227629    3.7603275 
 1054000    4.1664977    1.2630831    2.9034145  -0.21915593   0.84214525    1.0108847   0.73713204   -1.2465374            1    1.5845452    2.2318742    2.1974794   0.32428196  0.021294223 -0.051623713   0.01893338    1.4289734    1.4515864   0.69558188  0.066666667    1.4433429        1e-10 1.7389547e-11    5.7505811    2.5072623    30.403515 0.00074467016  -0.15904323 -0.0053724549   0.16008905   0.69052992     2.471643 
 1055000    4.1939872    1.2807925    2.9131947  -0.20908281   0.85395277    1.0112998   0.75604145   -1.2465374            1     1.565559    2.1823541    2.1877498   0.32657313 -0.0019734964 -0.0050585843 -0.0018042286    1.4059963    1.4325456   0.70142076  0.066666667     1.457035        1e-10 1.7535519e-11    5.7027112    2.4925046    30.403515 0.0073633176  -0.20371066 0.0035390878   0.21951672   -1.4026444    6.4644867 
 1056000    4.1781002    1.2751644    2.9029359  -0.22072307   0.85020025    1.0296283   0.73852726   -1.2465374            1    1.5819279    2.1812557     2.200324   0.36420406 -0.010511319 -0.089078498  0.019809622    1.4260616    1.4465038   0.70893557  0.066666667    1.4355809        1e-10 1.7723389e-11    5.6422617    2.4963939    30.403515 -0.0040486798  -0.21960264 0.0031019292   0.22146323  -0.47620547    1.8357962 
 1057000    4.1661926    1.2639637    2.9022289  -0.21384452   0.84273236   0.99906215   0.74545302   -1.2465374            1    1.5538202    2.1724935    2.1863045   0.30266256 -0.012915307 -0.047257213  0.014582733    1.3964922    1.4224164   0.70132349  0.066666667    1.4543369        1e-10 1.7533087e-11    5.7035021     2.483549    30.403515 0.0064557745  -0.17698225 -0.00049582672   0.19820145   -1.4483351    0.6703698 
 1058000    4.1538487    1.2584915    2.8953572  -0.21784562   0.83908385    1.0119568   0.73149411   -1.2465374            1     1.603734    2.2224504    2.2151945   0.37355703  0.014645237  -0.14695142  0.016196316     1.449352    1.4706341   0.70011091  0.066666667    1.4535888        1e-10 1.7502773e-11    5.7133805    2.4998627    30.403515  0.016287737  -0.19372726 -0.0012228283   0.20160631   -1.3398116    2.1906402 
 1059000    4.1584647    1.2656272    2.8928375  -0.21878878   0.84384145    1.0069895   0.74231315   -1.2465374            1    1.6709061    2.2748147    2.2529095   0.48499415 -0.0058554327 -0.041928671 -0.035553051    1.5142408    1.5384596   0.71059832  0.066666667    1.4503718        1e-10 1.7764958e-11    5.6290592    2.4664614    30.403515 -0.0016381776  -0.22549828  0.010523922   0.17544758   0.36347481    2.3306411 
 1060000    4.1670773    1.2581965    2.9088808  -0.21183594   0.83888713     1.009788   0.73252636   -1.2465374            1    1.5441882    2.1805542    2.1604085   0.29160188 -0.0079409718   0.10819985 -0.025786409    1.3895884    1.4113736    0.7095014  0.066666667    1.4308721        1e-10 1.7737535e-11     5.637762    2.5008321    30.403515 -0.027431927  -0.21668757 0.0059634235   0.18511234  -0.68034205    1.2571504 
 1061000    4.1351196    1.2568588    2.8782608  -0.21448833   0.83799522    0.9966186   0.73928568   -1.2465374            1    1.6622764    2.2864863    2.2649722   0.43537089 -0.0022372636 -0.078750014  0.034888402    1.5062501     1.531194    0.7059725  0.066666667    1.4270611        1e-10 1.7649313e-11    5.6659431    2.5039562    30.403515 0.0011898109  -0.23576493 -0.012501437   0.19326005 -0.091717927   0.77179579 
 1062000    4.1589214    1.2587038    2.9002176  -0.22112232   0.83922537   0.98163681    0.7506194   -1.2465374            1    1.5360832     2.183715    2.1438072   0.28072743 0.0055574637 -0.016543175  0.035909637    1.3776649    1.4069713   0.71016244  0.066666667    1.4494753        1e-10 1.7754061e-11    5.6325142    2.4870003    30.403515 0.0048092683  -0.20285617  0.012678594    0.2278668   -0.3800268    1.7532324 
 1063000    4.1485011    1.2685633    2.8799378  -0.22061997   0.84579907   0.98624592   0.75841856   -1.2465374            1     1.600805    2.2238423     2.236286   0.34228684  0.027283361  0.018719056  0.092689816    1.4407407    1.4710869   0.70793085  0.066666667    1.4642576        1e-10 1.7698271e-11    5.6502693    2.4871239    30.403515 -0.010824923  -0.21305289 -0.010240056    0.1764955   0.50810925   0.19003789 
 1064000    4.1802719    1.2661708    2.9141011  -0.21853952   0.84420393    1.0015281   0.74630512   -1.2465374            1    1.6453069    2.2299568    2.2916955   0.41426859 -0.0089588153  0.016435903 -0.018490186    1.4877991    1.5135788   0.70640432  0.066666667    1.4850867        1e-10 1.7660108e-11    5.6624795    2.4847453    30.403515  0.001075731  -0.16959832 0.0086812891   0.20610955  -0.34411036    3.2225441 
 1065000    4.1700126    1.2668624    2.9031502  -0.21950357   0.84466502   0.99825595   0.74909288   -1.2465374            1     1.700728    2.2820924    2.3170914   0.50300011 0.00064611282  0.070482134 -0.080215132    1.5426318    1.5694302   0.70415032  0.066666667    1.4783024        1e-10 1.7603758e-11    5.6806052    2.4736898    30.403515 0.0091495089  -0.18091276  0.011740924   0.17388285  -0.60448923    1.9940361 
 1066000    4.1679112    1.2717104    2.8962007  -0.22198121   0.84789739   0.99839588   0.75425304   -1.2465374            1    1.6224232    2.2319293    2.2368762   0.39846413 -0.020020568  0.092736289 -0.0029382563     1.463238     1.491107   0.70932042  0.066666667    1.4858357        1e-10 1.7733011e-11    5.6392004    2.5112936    30.403515 0.0058671406  -0.15137213 0.0036120464   0.20053303    0.2372555   0.65834022 
 1067000    4.1630139    1.2680692    2.8949447  -0.21341154   0.84546963     1.003238   0.74729424   -1.2465374            1    1.5805114    2.1954764    2.2038891   0.34216862   0.01348206 -0.007044572 0.0014802216    1.4227948    1.4485583   0.69797113  0.066666667     1.479199        1e-10 1.7449278e-11    5.7308961    2.4867327    30.403515 -0.0082115176  -0.20896693 -0.0026364971   0.20088053     0.505838 -0.010632098 
 1068000    4.1557572    1.2864537    2.8693035  -0.21575441   0.85772728     1.009867   0.76306183   -1.2465374            1    1.5784253     2.203029    2.2049884   0.32725852 -0.0070655089  0.021590409 -0.0083951715     1.417381    1.4456003   0.70603721  0.066666667    1.4833334        1e-10 1.765093e-11    5.6654238    2.4958004    30.403515 0.0033924734  -0.17958923  0.009125713   0.22210849   0.34799241   0.19689401 
 1069000    4.1730989    1.2818325    2.8912665   -0.2085512   0.85464612    1.0168047   0.75373634   -1.2465374            1    1.6150296    2.2266386    2.2350128   0.38343729 0.0046254076  -0.01749856  0.029778337    1.4559534    1.4812921   0.70847452  0.066666667     1.461428        1e-10 1.7711863e-11    5.6459335     2.507631    30.403515 -0.006743327  -0.24176742 -0.0034451051   0.17587741   0.80451697  -0.67148949 
 1070000    4.1885618    1.2961773    2.8923845  -0.22042042   0.86421035     1.021012   0.76664064   -1.2465374            1    1.6328549    2.2408014    2.2356445   0.42211869 -0.00018856809 -0.054855619 0.0080538597    1.4710552     1.498564   0.70409357  0.066666667    1.4738562        1e-10 1.7602339e-11    5.6810631    2.4912978    30.403515 -0.00016101724  -0.18363505  -0.00137815   0.15705512  -0.52098548   0.37084279 
 1071000    4.1755033    1.2848207    2.8906826  -0.21670765    0.8566385    1.0187344    0.7557681   -1.2465374            1    1.6334248    2.2506707    2.2588641   0.39073948 0.0047951422  0.026900773 -0.0036998768    1.4739198    1.4994335   0.70698645  0.066666667    1.4665816        1e-10 1.7674661e-11    5.6578171    2.5014602    30.403515 -0.0019668455  -0.21405653 -0.0034062834   0.20026613   0.42337058   0.43263157 
 1072000    4.1608013    1.2594843    2.9013169  -0.21616522   0.83974579    1.0040284   0.73750968   -1.2465374            1    1.5783365     2.201016    2.2015491   0.33244428 0.00019834835  0.075296132  0.060177741    1.4226849    1.4462794   0.70064481  0.066666667    1.4405542        1e-10 1.751612e-11    5.7090268    2.5010079    30.403515 0.0016117443  -0.18123792 0.0029395291    0.1740327   -2.1989997  -0.62457277 
 1073000    4.1779209    1.2746595    2.9032613  -0.21879837   0.84986366   0.99850296    0.7573783   -1.2465374            1    1.4914379    2.1290887    2.1386756   0.20654945 -0.011779427    0.0374246 -0.073475236    1.3315931    1.3601076   0.70372706  0.066666667    1.4395705        1e-10 1.7593176e-11    5.6840219    2.4884423    30.403515 -0.011608884   -0.1827726 0.0019998104   0.15967384    -1.226944  -0.73078581 
 1074000     4.178288    1.2890526    2.8892355  -0.21859981   0.85946003   0.99116223   0.77753159   -1.2465374            1    1.5918982    2.2065493    2.2406594   0.32848585 -0.0089248469  0.010290175  0.014075338       1.4278    1.4615334   0.70687599  0.066666667     1.458259        1e-10  1.76719e-11    5.6587012    2.4830832    30.403515 0.0035001284  -0.21363283 0.0035940817    0.1842856  -0.72016291    0.7930819 
 1075000    4.1728815    1.2914303    2.8814512  -0.20947028   0.86104537    1.0241137   0.75956973   -1.2465374            1     1.584111    2.2138386    2.2256115   0.31288284 0.0023600975  0.045209197  0.080090299    1.4238037    1.4494122    0.7100721  0.066666667    1.4731962        1e-10 1.7751802e-11    5.6332308    2.4965005    30.403515 -0.0050578578   -0.1621764 -0.0060090494   0.18554814 -0.068855113    1.5391123 
 1076000    4.1509205    1.2690245     2.881896  -0.21587856   0.84610656    1.0064107     0.746351   -1.2465374            1    1.6593084    2.2688619    2.2425622   0.46650115 -0.011044553 -0.017376987 -0.054806259    1.5017909     1.526938   0.70670003  0.066666667    1.4518818        1e-10 1.7667501e-11    5.6601102    2.5019696    30.403515  0.010207939   -0.1876886 0.0028442856   0.20788096    0.9225771     3.979192 
 1077000    4.1752383    1.2803938    2.8948446  -0.22563989   0.85368689    1.0015439   0.76168969   -1.2465374            1    1.5266238    2.1596707    2.1538103   0.26639036 0.0019160536    0.1340623 -0.005274428    1.3658691    1.3948935   0.70985527  0.066666667    1.4784256        1e-10 1.7746382e-11    5.6349515     2.484757    30.403515 -0.0041309596  -0.18735029 0.0078316371   0.20159057  -0.93796219    1.8206181 
 1078000    4.1783048    1.2764548      2.90185  -0.21366716   0.85106064    1.0144091   0.74940867   -1.2465374            1    1.6622287    2.2664066    2.2587154   0.46156401  0.013253223  0.050974967  0.044572334    1.5040659    1.5288063   0.70871544  0.066666667    1.4659003        1e-10 1.7717886e-11    5.6440142    2.4850532    30.403515 0.0027305208  -0.20236789 0.0086867553   0.18304121   0.96873952    2.0978645 
 1079000    4.1826671    1.2791259    2.9035412  -0.21743956   0.85284159    1.0021421    0.7599447   -1.2465374            1    1.6523735    2.2220184    2.2799568   0.45514534 -0.012564766 -0.006863376  0.030258895    1.4919871    1.5205646   0.70223031  0.066666667    1.4666048        1e-10 1.7555758e-11    5.6961369    2.4957096    30.403515 -0.010970266  -0.18249275 -0.014988335   0.15563392    1.7305951    3.5000166 
 1080000    4.1583859    1.2581185    2.9002674  -0.21342989   0.83883513   0.99379132   0.74241115   -1.2465374            1    1.5588347    2.2020272    2.1645952   0.30988174 -0.0021526958  0.005079286 -0.011526333    1.4021487    1.4281241   0.69999214  0.066666667    1.4650513        1e-10 1.7499804e-11    5.7143499    2.4791438    30.403515 0.0047082314  -0.21611977 -0.0034918604    0.1716561   0.94760722   -1.0384029 
 1081000    4.1579841     1.267255     2.890729  -0.21665446   0.84492681    1.0107343    0.7417413   -1.2465374            1     1.644469    2.2410471    2.2561556   0.43620427  0.013197181  0.020424538  -0.03230868    1.4879244    1.5115299   0.70239185  0.066666667    1.4505318        1e-10 1.7559796e-11    5.6948269    2.4872485    30.403515 0.0026163696  -0.16540199 -0.0015374356   0.19562137  -0.56905987    2.2509462 
 1082000    4.1738643     1.270225    2.9036392  -0.21475369   0.84690702    1.0039402   0.74919005   -1.2465374            1    1.5069826    2.1531417    2.1552882   0.21251784  0.017034766  0.035581463  0.039258154    1.3488659    1.3749371   0.71221056  0.066666667    1.4672368        1e-10 1.7805264e-11    5.6163166    2.4960538    30.403515 0.0041940586  -0.22223419 -0.010764367     0.174873   -2.3752881   0.71285472 
 1083000    4.1508562    1.2609515    2.8899047  -0.22717833   0.84072398    1.0144821   0.73258291   -1.2465374            1    1.6514878    2.2540011    2.2410187   0.45944368 0.0088134089  -0.08165278  0.066506159    1.4968761    1.5180559   0.71113633  0.066666667    1.4222247        1e-10 1.7778408e-11    5.6248005     2.496034    30.403515 -0.0063535925  -0.18029144 -0.010036263   0.19114833   0.15696241    1.1084204 
 1084000    4.1990294    1.2998669    2.8991625  -0.21085731   0.86667037    1.0001686   0.78362386   -1.2465374            1    1.4876926    2.1153584    2.1581081   0.18961117  0.015677449 -0.077000077 0.0086260813    1.3223086    1.3561432   0.70390881  0.066666667    1.4243202        1e-10 1.759772e-11    5.6825543    2.4981288    30.403515 0.0037253463  -0.16648538 -0.013890409   0.17166032  -0.91294241     -2.06365 
 1085000    4.1639181    1.2822011    2.8817171  -0.23289299   0.85489188    1.0084545   0.75933917   -1.2465374            1    1.6116967    2.2053234    2.2199069   0.40985965 0.0025684518 -0.015518172  0.036059191     1.451438    1.4790575   0.70004009  0.066666667    1.4382067        1e-10 1.7501002e-11    5.7139585     2.485277    30.403515 -0.0073693779  -0.20958893 0.0056217016   0.17443856   -1.1321345   0.48746774 
 1086000    4.1769361    1.2868348    2.8901013  -0.22812712   0.85798138    1.0211967   0.75641356   -1.2465374            1    1.5526743    2.1777606    2.1738329    0.3064294 0.0087367493  0.024584858 -0.022799893    1.3930331    1.4183592   0.71782093  0.066666667    1.4283625        1e-10 1.7945523e-11    5.5724204    2.5087224    30.403515 0.0069087448  -0.15578095   0.01772988   0.18312691  -0.87268995  -0.14328372 
 1087000    4.1485776    1.2506781    2.8978996  -0.21540321   0.83387431    0.9838055   0.74058107   -1.2465374            1    1.5118816    2.1593793    2.1463525   0.22991313 -0.011901681  -0.11957406  0.053764242    1.3555819    1.3824844   0.70795174  0.066666667    1.4396984        1e-10 1.7698794e-11    5.6501026    2.4974325    30.403515 0.0012066906   -0.1887424 -0.00020348672   0.17693446    1.1072554   0.21808617 
 1088000    4.1474339    1.2675652    2.8798687  -0.21403818    0.8451336   0.98237188   0.75975257   -1.2465374            1    1.5163524    2.1490198    2.1511323   0.24890514 -0.003187724 -0.014508959 0.0015525745    1.3560065    1.3871438   0.69989436  0.066666667    1.4288922        1e-10 1.7497359e-11    5.7151482    2.4842292    30.403515 -0.012080651  -0.17456007 -0.0038697779   0.18667012    1.1038502  0.037056327 
 1089000    4.1492179    1.2418457    2.9073722  -0.20985021   0.82798547   0.97153849    0.7386661   -1.2465374            1    1.5386755    2.1774617    2.1716545    0.2669104 -0.0029537598  0.049210295 -0.017078712    1.3827799    1.4108918   0.70151369  0.066666667    1.4371059        1e-10 1.7537842e-11    5.7019558    2.4622959    30.403515  0.010858829  -0.17329858 0.0053300767   0.21465339   0.61751512   0.83379039 
 1090000    4.1585871    1.2587564    2.8998307  -0.21474903   0.83926046    0.9785418   0.75260517   -1.2465374            1    1.6787823      2.24636    2.2827361   0.50725085 -0.0070219222 -0.0025604709 -0.023641395    1.5199449    1.5500775   0.71483243  0.066666667     1.416577        1e-10 1.7870811e-11     5.595717    2.4993546    30.403515 -0.012629598  -0.18075861 -0.0039459661   0.20098111    0.3486088    3.0025647 
 1091000     4.124839    1.2555134    2.8693257  -0.22116738   0.83709819   0.99097361   0.74134745   -1.2465374            1    1.6103996    2.2234228    2.2349694   0.37280653 -0.0036808802   0.21654467 -0.028848313    1.4539381    1.4800596   0.70751597  0.066666667    1.4117417        1e-10 1.7687899e-11    5.6535827    2.4867464    30.403515 0.0022005421  -0.19669521 -0.0083822078   0.19003201   -1.8938045    2.0243637 
 1092000    4.1593313    1.2769812    2.8823501  -0.22041988    0.8514116    1.0111852   0.75198758   -1.2465374            1    1.5892562    2.2079445      2.21476   0.34506416 -0.0034450951  0.020717953 -0.056451518    1.4305491    1.4562579   0.70636861  0.066666667    1.4071009        1e-10 1.7659215e-11    5.6627658     2.488811    30.403515 -0.015070137  -0.17926841 -0.0089124942   0.17568699  0.077206402    2.4091864 
 1093000    4.1558706    1.2556254    2.9002452  -0.21683065   0.83717289    1.0003768   0.73560861   -1.2465374            1    1.5582335    2.1703304     2.178568   0.32580207 0.0034058586  0.020518704  0.024126506    1.4029832    1.4266567   0.70677756  0.066666667    1.4299263        1e-10 1.7669439e-11    5.6594893    2.4695328    30.403515 0.00067786731  -0.17016472 -0.0018863538   0.19619774    1.3302079    7.2410733 
 1094000    4.1479544    1.2689341    2.8790203  -0.22298399   0.84604629    1.0058462   0.74660493   -1.2465374            1    1.5812091    2.1921591    2.1975984   0.35386976 0.00088840074 -0.0021417669  0.056972875     1.423638     1.448913   0.70417697  0.066666667    1.4223022        1e-10 1.7604424e-11    5.6803903    2.4834657    30.403515 0.0023821434  -0.21728436  0.015552608   0.17658344 -0.084293451    3.2027638 
 1095000    4.1841967    1.2675137    2.9166829  -0.22191615   0.84509928    1.0129791   0.74062233   -1.2465374            1     1.502344    2.1318689    2.1437748   0.23138835 -0.0074337454  -0.12967618 -0.010622946    1.3460355    1.3691097   0.70362135  0.066666667    1.4228933        1e-10 1.7590534e-11    5.6848758    2.4809159    30.403515 0.0079616622  -0.22493556 0.0038061696   0.17904393   0.26699434   0.28683806 
 1096000    4.1613358     1.275432    2.8859038  -0.22274443   0.85037871    1.0102305   0.75090579   -1.2465374            1    1.6226721    2.2542581     2.218768   0.39499018 -0.019596317 -0.056645659  0.055588247    1.4641933    1.4897993   0.70899847  0.066666667    1.4242317        1e-10 1.7724962e-11    5.6417611    2.5002006    30.403515 0.0078373905  -0.18889278 -0.0078562083   0.19430943   0.94209786    1.5125213 
 1097000    4.1749505    1.2819612    2.8929893  -0.22143624   0.85473194     1.017113   0.75368353   -1.2465374            1    1.5717208    2.2100607    2.1721662   0.33293563 0.0068161564 -0.063363698  0.034279328    1.4126558    1.4379428   0.70227922  0.066666667    1.4085106        1e-10 1.7556981e-11    5.6957402    2.5019473    30.403515 0.0090650399  -0.17717004 0.0015954044   0.15619031   0.46945406  -0.44815499 
 1098000    4.1670893    1.2913609    2.8757284  -0.21951512   0.86099912    1.0179797   0.76331738   -1.2465374            1     1.674142    2.2670695    2.2629324   0.49242407 -0.0087748894  0.067141495 -0.017399258    1.5130437      1.54025   0.70650573  0.066666667    1.4030331        1e-10 1.7662643e-11    5.6616668     2.493972    30.403515  0.011075435   -0.1825993 -0.00067331836   0.19073911 -0.040210005   0.65227551 
 1099000    4.1600047    1.2522211    2.9077836  -0.21311446    0.8349031   0.99391206   0.73595274   -1.2465374            1    1.3897553    2.0679065    2.0486708  0.052688581 0.0042006424 -0.027895108 -0.0045667877    1.2344323    1.2590288   0.70882072  0.066666667    1.4067262        1e-10 1.7720518e-11    5.6431759    2.4928322    30.403515 0.0036163196   -0.1848967 0.0032547322   0.16140844   0.65405324   -1.2290163 
 1100000    4.1564484    1.2743812    2.8820671  -0.21822733   0.84967811    1.0117413   0.74882688   -1.2465374            1    1.6956967    2.2874309     2.292737    0.5069221  0.018722047  0.080853765 -0.039550205    1.5376566    1.5626252   0.70400927  0.066666667    1.4609932        1e-10 1.7600232e-11    5.6817434    2.4934295    30.403515  0.010852365  -0.20383197 0.0059879184   0.16830457   -1.4997712  -0.74517591 
 1101000    4.1813516    1.2796977     2.901654  -0.21287776   0.85322277   0.99889801    0.7625852   -1.2465374            1    1.5690777    2.1811179    2.1830388   0.34307643 0.0032945044 -0.056504796 -0.0078053445     1.408134    1.4376954   0.69527188  0.066666667    1.4479128        1e-10 1.7381797e-11    5.7531451    2.4872216    30.403515  0.012311057   -0.1698599  0.013856646    0.2047799  0.067293883  -0.24370615 
 1102000    4.1742859    1.2687659      2.90552  -0.21925804   0.84593414    0.9889228    0.7569696   -1.2465374            1    1.6129464     2.208279    2.2445433   0.38601699 -0.0030109371  0.054461959 0.0061662633    1.4531879    1.4828762   0.70341095  0.066666667    1.4216522        1e-10 1.7585274e-11    5.6865762    2.4894857    30.403515 -0.012945564  -0.19282959  0.011483236   0.20365581  -0.51536412    2.5003484 
 1103000    4.1505135     1.261655    2.8888586  -0.21902319   0.84119304    1.0084244   0.73711952   -1.2465374            1    1.6610025     2.259154    2.2474896   0.47636379 0.0061503755 -0.0029387869 -0.020784236    1.5054333    1.5283672   0.70827711  0.066666667    1.4155608        1e-10 1.7706928e-11    5.6475071    2.4838651    30.403515 -0.0084401249  -0.20193294 -0.015662476   0.19742954   -1.0243351    2.7135613 
 1104000    4.2015365    1.3000006    2.9015359  -0.22021697   0.86675948    1.0122645   0.77623031   -1.2465374            1    1.5102355     2.136693    2.1523341   0.24167945 -0.0018622247 -0.054304592  0.028458327     1.346412    1.3770952   0.71096778  0.066666667    1.4150402        1e-10 1.7774194e-11     5.626134    2.5083388    30.403515 0.0023939468  -0.17430556 0.0049268062   0.19616454    1.1281557   0.84662649 
 1105000    4.1609856    1.2676814    2.8933042  -0.21331747   0.84521109    0.9956796   0.75158495   -1.2465374            1     1.590308    2.2144656      2.21349   0.34296859 -0.0064167909 -0.0099092856 -0.034455497    1.4316859    1.4593491   0.70183802  0.066666667    1.4531878        1e-10 1.7545951e-11    5.6993207    2.4865872    30.403515 -0.0064607272  -0.16148267 -0.0035957569   0.19037994   0.57496933    2.4791992 
 1106000    4.1470416    1.2490251    2.8980166  -0.21847774    0.8327722   0.98476152   0.73819613   -1.2465374            1    1.5973854    2.1743222    2.2084427   0.40939126  -0.01473603 -0.077920444 0.0090646877     1.441589    1.4678625     0.703369  0.066666667    1.4459294        1e-10 1.7584225e-11    5.6869154    2.4843277    30.403515 -0.0076402085   -0.1826999 0.0067147472   0.22638059    0.3866781  -0.31810788 
 1107000    4.1695529    1.2725606    2.8969922  -0.21230999   0.84846425   0.99975327   0.75432733   -1.2465374            1    1.5391282     2.194649    2.1677561   0.25497948 0.00039998789  -0.16684225  0.062127902    1.3799273    1.4076335    0.7114888  0.066666667    1.4556674        1e-10 1.778722e-11     5.622014     2.496802    30.403515 0.0045054153  -0.19298951 -0.0029449877   0.19076058  -0.16261409    3.0410405 
 1108000     4.163446    1.2911548    2.8722913  -0.22470143   0.86086168     1.028202   0.75672368   -1.2465374            1    1.6526797    2.2369153    2.2641569   0.45696693 0.0015307186 -0.043786435  0.039441599     1.492973    1.5174432    0.7064748  0.066666667    1.4291045        1e-10 1.766187e-11    5.6619146    2.4992512    30.403515 -0.0086674208  -0.21896799  -0.01559592   0.21888145   0.20229809    2.1174345 
 1109000    4.1544534    1.2684026    2.8860508  -0.21580167   0.84569195     1.007836   0.74478967   -1.2465374            1    1.6957032    2.2800342    2.2784616   0.52861372 -0.0031032018 -0.0028991531 -0.012273943    1.5385152    1.5631453   0.69750774  0.066666667    1.4400284        1e-10 1.7437693e-11    5.7347034      2.47631    30.403515 -0.019819524  -0.19180207 0.0030761365   0.17601425   0.81282333    4.7383349 
 1110000    4.1658319    1.2802563    2.8855757  -0.22398871   0.85359522    1.0169473   0.75194143   -1.2465374            1    1.5363695    2.1558001     2.172813   0.28049537 0.0022777024  -0.12884649 -0.048540347    1.3776721    1.4026133   0.71019954  0.066666667    1.4273461        1e-10 1.7754989e-11    5.6322199    2.5057742    30.403515 0.0029865253  -0.18507859 -0.0001154054   0.19706792   0.43638131   0.62655587 
 1111000    4.1862209    1.2716381    2.9145828  -0.22057405   0.84784915    1.0138721    0.7445299   -1.2465374            1    1.6097329    2.2027605    2.2198471   0.40659098 -0.0052278598  -0.13925014  -0.10522657    1.4525997    1.4763811   0.71218344  0.066666667    1.4235334        1e-10 1.7804586e-11    5.6165305    2.4966491    30.403515 -0.013886303  -0.18515066 -0.0035953994   0.18251439   0.53575325    2.6264929 
 1112000    4.1656054    1.2596774    2.9059281  -0.20908371    0.8398745   0.99802311   0.74146116   -1.2465374            1    1.5595397    2.1717819     2.196461   0.31037609 0.0036427898  0.014133388 -0.015183184    1.4030542    1.4282725    0.7038044  0.066666667    1.4278288        1e-10 1.759511e-11    5.6833972    2.4844531    30.403515 -0.0052104328  -0.15897697 -0.0060111561   0.17378697 -0.064580807    2.1129693 
 1113000    4.1999002     1.282884    2.9170162  -0.20942338   0.85534721    1.0227711   0.75115616   -1.2465374            1    1.5741004    2.1956316    2.2035864   0.32308299 0.0086056758 -0.043240429 0.0091031763    1.4155687    1.4395781   0.70828294  0.066666667    1.4215402        1e-10 1.7707073e-11    5.6474606    2.5103217    30.403515 0.0050527131  -0.14980285 -0.0026963398   0.18725863   -0.3042185  -0.78113309 
 1114000    4.1758642    1.2805979    2.8952663  -0.22126837     0.853823    1.0185009     0.751343   -1.2465374            1    1.6039749    2.2251059    2.2087331   0.37808576 -0.021568757  -0.10224819 -0.0013215023    1.4454038    1.4700143   0.70509342  0.066666667    1.4067301        1e-10 1.7627335e-11    5.6730072    2.4828036    30.403515 -0.0089479794  -0.22370067 0.0060409649   0.17197048   0.79768516   0.98300005 
 1115000    4.1789125     1.281909    2.8970034  -0.21275709   0.85469719    1.0155492   0.75460163   -1.2465374            1    1.5509166    2.2084035    2.1768374    0.2675088  0.016711442  0.018019909   0.03844585    1.3916578    1.4173442   0.70370565  0.066666667    1.3880422        1e-10 1.7592641e-11    5.6841948    2.4875183    30.403515  0.003323903  -0.18609998 0.00091850253   0.20309424   -1.1449486    1.0394808 
 1116000    4.1530786    1.2509516    2.9021271  -0.21994083   0.83405666     1.005538   0.72733329   -1.2465374            1    1.6830533    2.2620097    2.2706075   0.51654262 -0.00082884144 -0.0099294257  -0.03065645    1.5295495    1.5507977   0.70184007  0.066666667    1.3877437        1e-10 1.7546002e-11    5.6993041    2.4875699    30.403515 -0.0068083386  -0.17312142 0.0024987222   0.16121259     1.107938   0.28870676 
 1117000    4.1561001    1.2800885    2.8760116  -0.20394026   0.85348338     1.003883   0.75990157   -1.2465374            1     1.686225     2.295601    2.2988044   0.46426952 0.0049282763  -0.06735829  0.037482312    1.5258476    1.5541871   0.70452814  0.066666667    1.3980595        1e-10 1.7613203e-11    5.6775589    2.5017335    30.403515 -0.0050729842  -0.15758598 0.0016600233   0.20669916    2.1450187    2.1542216 
 1118000    4.1448378    1.2631967    2.8816411  -0.22318519   0.84222095    1.0062367   0.74015162   -1.2465374            1    1.5513318    2.1941372    2.1532726   0.30658551 0.0070186907 -0.076736072 -0.074880805    1.3951227    1.4189843   0.71368543  0.066666667    1.3998068        1e-10 1.7842136e-11    5.6047102     2.501219    30.403515 -0.0012013042  -0.19822002 0.0061482292   0.21387884    2.0837156   -1.5626108 
 1119000    4.1507794    1.2633638    2.8874156  -0.21748729   0.84233235    1.0016976   0.74316124   -1.2465374            1    1.6755542    2.2845467    2.2916992   0.45041682 -0.0091700049 -0.089958296 -0.0064682601    1.5187099    1.5438038   0.71031856  0.066666667    1.3849306        1e-10 1.7757964e-11    5.6312762    2.4996255    30.403515 -0.0029616335  -0.18188026 0.0017326404   0.19732092    2.1226907    1.1902222 
 1120000    4.1427695    1.2641847    2.8785847    -0.213109   0.84287973   0.99149827    0.7504061   -1.2465374            1    1.6621799    2.2553124    2.2776132   0.45361414  -0.01415444  -0.13252857  0.054509348    1.5038066    1.5317709   0.69611706  0.066666667    1.3914368        1e-10 1.7402927e-11      5.74616    2.4956574    30.403515 -0.018514091  -0.17992833 -0.015285423   0.21830723    1.1669918  -0.76343271 
 1121000    4.1475615    1.2658933    2.8816682  -0.22780586    0.8440189    1.0034917   0.74478107   -1.2465374            1    1.6218032    2.2152492    2.2483339   0.40182647 0.0075548464 -0.027526928 0.0023200726     1.464617    1.4898167   0.70153077  0.066666667    1.4111782        1e-10 1.7538269e-11    5.7018169    2.4804881    30.403515 -0.013182584  -0.17012321 4.7013365e-05   0.20244029  -0.48774452   0.31430951 
 1122000    4.1898094    1.2891518    2.9006576  -0.21649123    0.8595262    1.0111214   0.76520038   -1.2465374            1    1.6293567     2.255665    2.2329202   0.39948487 0.0021985735 -0.030195881 0.0067141042     1.467861    1.4963667   0.71536765  0.066666667    1.4207841        1e-10 1.7884191e-11    5.5915305    2.5159298    30.403515 0.0098891213  -0.21481124 -0.0059457917   0.19170401  -0.84462925   -1.0483475 
 1123000    4.1884895    1.2867302    2.9017593  -0.21367079   0.85791164    1.0069757   0.76516294   -1.2465374            1    1.6470055    2.2660113    2.2089835   0.46602171 -0.016505793 0.0064296999  0.018124367    1.4855177    1.5145608   0.70280142  0.066666667    1.3807063        1e-10 1.7570036e-11    5.6915081    2.4783293    30.403515 -0.0019610015   -0.1947524 -0.011734583   0.20010408   -1.9671403  -0.71335068 
 1124000    4.1753408    1.2657767    2.9095641  -0.21633087   0.84394114    1.0070224   0.74245447   -1.2465374            1    1.5798417    2.1873408    2.2013438   0.35084033 0.0052748383   0.18505408  0.016816098    1.4231465    1.4473908    0.6966837  0.066666667    1.3637256        1e-10 1.7417093e-11    5.7414864     2.499759    30.403515 -0.0016318856  -0.15639839 -0.0048462456   0.18306483   -1.7192661  -0.73062715 
 1125000    4.1581355    1.2612241    2.8969114  -0.21751405   0.84090578   0.99412555   0.74556429   -1.2465374            1    1.7056463    2.2926498    2.2882332    0.5360559  0.016358531  0.055119975  0.016283283    1.5482948    1.5748918   0.70227956  0.066666667      1.35547        1e-10 1.7556989e-11    5.6957374    2.4794792    30.403515 0.0053851747  -0.20957428 -0.0074908513   0.20243172  -0.88361502    2.8121676 
 1126000    4.1573829    1.2629236    2.8944593  -0.21494029    0.8420389    1.0074859   0.73907759   -1.2465374            1    1.6058149    2.2285503    2.2111472   0.37774719 -0.013683854 -0.093448572 -0.026430028    1.4498325    1.4733031   0.71263963  0.066666667    1.3560512        1e-10 1.7815991e-11    5.6129351    2.4882536    30.403515 0.0020144843  -0.18234398  0.007149181   0.19176124  -0.53447204    2.2969437 
 1127000    4.1769838    1.2802526    2.8967312  -0.22013921   0.85359276    1.0155951   0.75278018   -1.2465374            1    1.5460979    2.1787462    2.1589106   0.30063691 -0.037382849  0.051880281 -0.057139131    1.3872235    1.4125196   0.70520481  0.066666667    1.3759884        1e-10 1.763012e-11    5.6721111    2.4862865    30.403515 -0.0042796739  -0.19169162 0.0011480516   0.19225196  -0.28730567    1.7860246 
 1128000    4.1522376    1.2687502    2.8834874   -0.2137533   0.84592371    1.0085512   0.74472019   -1.2465374            1    1.5240026    2.1603874    2.1501486   0.26147196  0.018590618  0.021471849 0.0046365451    1.3668293    1.3913507   0.70688436  0.066666667    1.4043329        1e-10 1.7672109e-11    5.6586342    2.4845508    30.403515 -0.0050556788  -0.22290689   0.00239302   0.19159768   0.73879161   0.66196372 
 1129000    4.1562266    1.2768903    2.8793363  -0.22809595   0.85135102    1.0057822   0.75525638   -1.2465374            1    1.4885913    2.1387342    2.1242999   0.20273982  0.012461716   0.11264418 -0.016820545    1.3291943    1.3563036   0.71132711  0.066666667    1.4032163        1e-10 1.7783178e-11     5.623292     2.483045    30.403515 -0.0079578445  -0.17804591 -0.0088971205   0.19570973  -0.34913917  -0.22663511 
 1130000     4.187759    1.2806269    2.9071321  -0.21999169   0.85384234   0.99284447   0.76736358   -1.2465374            1    1.5562605    2.1971645    2.1737959   0.29782104 0.0096286459  0.080101343 -0.035578346    1.3943083    1.4256744    0.7091425  0.066666667     1.397979        1e-10 1.7728563e-11    5.6406152    2.4940514    30.403515 -0.015371659  -0.17703726 0.00049806756   0.22391789   0.11814899   0.17699968 
 1131000    4.1478999    1.2605604    2.8873394  -0.21357399   0.84046326    0.9923363     0.745961   -1.2465374            1    1.6352926    2.2229772    2.2542082    0.4286925 -0.021485051  0.068402557  0.015856575    1.4778575    1.5047734   0.69726181  0.066666667    1.4041667        1e-10 1.7431545e-11    5.7367261    2.4774825    30.403515 -0.0039086533  -0.21008586 -0.0061626685   0.18693929  -0.66079837    1.1588219 
 1132000    4.1469828    1.2622677    2.8847152  -0.21287635   0.84160154   0.99762446   0.74451324   -1.2465374            1    1.5737008     2.203882    2.2043228   0.31289754  0.014071068  0.060841949  0.007345876    1.4165712    1.4424861   0.70280792  0.066666667    1.4003614        1e-10 1.7570198e-11    5.6914555    2.4964323    30.403515 0.0049830186  -0.15549609 -0.007844582   0.21402777  -0.23977145  -0.11195216 
 1133000    4.2006008    1.2835716    2.9170292  -0.22217218   0.85580569    1.0003272   0.76588756   -1.2465374            1    1.5328388    2.1435892     2.171386   0.28354117  -0.01229596  0.024978059 0.0076570299    1.3711981    1.4012686   0.71398962  0.066666667    1.3937911        1e-10 1.784974e-11    5.6023224    2.4935505    30.403515 -0.017522626  -0.18991562 0.0019525686   0.16484882  -0.41086918   0.56833523 
 1134000    4.1916983    1.2806521    2.9110462  -0.21249341   0.85385911   0.99168036   0.76811628   -1.2465374            1    1.5206576    2.1539228    2.1591276   0.24892231  0.013396763   0.03263175  0.020849864    1.3585465    1.3902246   0.71583228  0.066666667    1.3385556        1e-10 1.7895807e-11    5.5879011    2.5049882    30.403515 -0.001888844   -0.2207154 -0.00038389801   0.19657667 -0.074892138   0.46202032 
 1135000    4.1411556    1.2512385    2.8899171  -0.21236494   0.83424797   0.97388033   0.74737306   -1.2465374            1    1.7160827    2.2991469     2.324913   0.52418827 -0.012755468  0.074729284   0.01099548    1.5583495     1.587991   0.69647872  0.066666667    1.3570355        1e-10 1.7411968e-11    5.7431762    2.4904021    30.403515  0.014875472  -0.21284462 0.0058623804   0.17781517  -0.78904754   -0.1281863 
 1136000     4.156909    1.2572843    2.8996247  -0.20492648   0.83827894   0.98604393   0.74633644   -1.2465374            1     1.466406    2.1147869    2.1073512   0.17707981  0.001497094  0.037066132  0.032984099    1.3088916    1.3367144    0.7009802  0.066666667     1.376243        1e-10 1.7524505e-11    5.7062953    2.5076933    30.403515 -0.015661792  -0.17326361 -0.025912419   0.18245752   -1.1096425   0.24839349 
 1137000    4.1645931    1.2715266    2.8930665  -0.22261095   0.84777481   0.99988074   0.75312866   -1.2465374            1    1.5906808    2.1999451    2.2262314   0.34586599 0.0094775494 -0.038191242 -0.014105618    1.4317329    1.4591693   0.71103741  0.066666667     1.378918        1e-10 1.7775935e-11     5.625583    2.4923769    30.403515 0.0086215527  -0.19506469 -0.0060766281   0.18322607   -1.3877073  -0.11752233 
 1138000    4.1730607    1.2778396    2.8952211  -0.21309503   0.85198391   0.99868721   0.76070543   -1.2465374            1    1.7551179    2.3465608    2.3260877   0.59270535 0.0072430137  0.065236473  -0.02973558    1.5945709    1.6237634   0.71211611  0.066666667    1.3781054        1e-10 1.7802903e-11    5.6170615    2.4914771    30.403515 0.0055226352  -0.20020155  0.007264534   0.18054208   -0.9069068    3.0565371 
 1139000    4.1689815     1.273085    2.8958965  -0.21705773   0.84881386   0.99500049   0.75785683   -1.2465374            1    1.4281679    2.0786444    2.0993721   0.10648711  0.020828074  0.048058461  0.016684445    1.2682221    1.2972983   0.69637851  0.066666667    1.3692443        1e-10 1.7409463e-11    5.7440026    2.4969841    30.403515 0.0058228323  -0.20773169 -0.0091486438   0.20320825  -0.57959853    1.3372619 
 1140000    4.1496266    1.2547616     2.894865  -0.21587663   0.83659693    1.0028995   0.73310147   -1.2465374            1    1.4915598    2.1204646    2.1546433   0.19957137 -0.0059781537  0.096129257 0.00080910893    1.3368386    1.3596512   0.70025721  0.066666667    1.3723646        1e-10 1.750643e-11    5.7121868    2.5119695    30.403515  0.013156972  -0.17339027  0.010367426   0.17676133  -0.77502194    1.1021494 
 1141000    4.1503354     1.262674    2.8876615  -0.21496557   0.84187244    1.0068122   0.73922717   -1.2465374            1    1.5863952    2.2215365    2.2194605   0.31818854 -0.001818784  0.051602863 -0.0043526625    1.4303812     1.453972   0.71201234  0.066666667    1.3695216        1e-10 1.7800309e-11    5.6178801    2.5025753    30.403515 -0.0063531211  -0.18729558 -0.017914442   0.20958336  -0.61265493    1.5527746 
 1142000    4.1645396    1.2794192    2.8851204  -0.21265638   0.85303713    1.0205212   0.74880821   -1.2465374            1    1.5306043    2.1592457    2.1903498   0.24221731 0.0090137132 -0.042141615 -0.058374987    1.3725682     1.396378   0.71374735  0.066666667    1.4082464        1e-10 1.7843684e-11     5.604224    2.5137017    30.403515  -0.01799143  -0.19753452 0.0086595392    0.1968837 -0.033709202   -0.3247442 
 1143000    4.1789528    1.2674816    2.9114712  -0.21758909   0.84507789   0.99183765   0.75376304   -1.2465374            1    1.6455614    2.2520094    2.2418032   0.44287158 0.0094634572 0.0081578115  0.053702084    1.4864796    1.5151078   0.70074667  0.066666667    1.4098864        1e-10 1.7518667e-11    5.7081969    2.4850427    30.403515 0.0058465466  -0.19058565 -0.0082896468   0.17742805   -1.6040567    3.3558281 
 1144000    4.1697047     1.260708    2.9089967   -0.2082394   0.84056166   0.99022653   0.74743555   -1.2465374            1    1.5488235    2.1582262    2.1801164   0.30812795  0.014231932   0.10408487  0.072130506    1.3910771    1.4185818   0.70296315  0.066666667    1.4162736        1e-10 1.7574079e-11    5.6901987    2.4832992    30.403515 -0.0083775571  -0.20926619 -0.00065069093   0.18658574   -1.4595109   -1.3643687 
 1145000    4.1924169    1.2931078    2.8993091  -0.22235237   0.86216384   0.99401045   0.78014586   -1.2465374            1    1.5363447    2.1913716    2.1380121   0.27965033 7.5125402e-05  0.040046108 -0.042319663    1.3716948    1.4056053    0.7164363  0.066666667    1.4077161        1e-10 1.7910907e-11    5.5831901    2.5021457    30.403515 0.0060326999  -0.19525666 0.00097864963   0.19812986   -1.2932335    -1.093239 
 1146000     4.138287    1.2545577    2.8837292  -0.22401661   0.83646104    1.0061157   0.73087651   -1.2465374            1    1.5750783    2.2101394     2.200349   0.31474647 -0.012348753 -0.012375853  0.014099726    1.4208267    1.4427467   0.71022055  0.066666667    1.4119504        1e-10 1.7755514e-11    5.6320533    2.5023475    30.403515 0.0091119086  -0.18183787 -0.00038872616   0.17999262  -0.73841881    1.6434999 
 1147000    4.1767593    1.2653466    2.9114126  -0.22333094    0.8436544   0.99553272   0.74914939   -1.2465374            1     1.473237    2.1276851    2.1142884   0.17773728 -0.010519844  0.034179777 -0.00048926203    1.3151289    1.3422973   0.70717653  0.066666667    1.4317318        1e-10 1.7679413e-11    5.6562963    2.4881353    30.403515 0.0094504835  -0.21970803 0.0060123645   0.20359791  -0.67651141    -1.275587 
 1148000    4.1325077     1.242425    2.8900827  -0.21691354   0.82837167   0.98571845   0.73045606   -1.2465374            1    1.6240745    2.2366754    2.2152148   0.42033318 0.00052107606 -0.054893345 -0.033024453    1.4699116    1.4944257   0.70133867  0.066666667    1.4312762        1e-10 1.7533467e-11    5.7033786    2.4955772    30.403515  0.012278744  -0.16802746 -0.020356877   0.19093026    1.0906737    1.1513361 
 1149000    4.1634234    1.2719862    2.8914372  -0.22099874   0.84808129   0.99896764   0.75419524   -1.2465374            1    1.6799541    2.2453724    2.2917412   0.50274857 0.0032164857 -0.023506175 -0.019880015     1.520781    1.5485627   0.70395178  0.066666667    1.4373573        1e-10 1.7598795e-11    5.6822073    2.4769811    30.403515 -0.0071117049  -0.20081074 0.0032818902   0.18137488    2.5310881     1.714915 
 1150000    4.1378377    1.2609006    2.8769371  -0.22254975   0.84069007    1.0087068   0.73612703   -1.2465374            1    1.6488484    2.2397761    2.2561822   0.45058702  0.018529558 -0.0019283944 -0.034341911    1.4934887    1.5161761   0.71110641  0.066666667    1.4227848        1e-10 1.777766e-11    5.6250372     2.498664    30.403515 -0.014920285  -0.19739968  0.010283792   0.17781997    1.5644089    2.8053022 
 1151000    4.1638844    1.2658972    2.8979872  -0.21154055   0.84402152    1.0014779   0.74604033   -1.2465374            1    1.6414866    2.2469015    2.2281088   0.44944948 0.00066251737 -0.075996939  0.061734379    1.4840347     1.509765   0.70588122  0.066666667    1.4167233        1e-10 1.764703e-11    5.6666758    2.5057702    30.403515 0.0099679647  -0.19963277 0.0029030936   0.19337939    1.2829028    3.7552618 
 1152000    4.1488904    1.2613781    2.8875123  -0.22523534   0.84100844   0.98542686   0.75115201   -1.2465374            1    1.5564694    2.1850878    2.1911004   0.29322006  0.023144624  0.085981192 -0.024614872    1.3979387     1.426859   0.70517812  0.066666667    1.4199257        1e-10 1.7629453e-11    5.6723257    2.4862362    30.403515 0.00024439579  -0.14464306 0.00053681954    0.2087799  -0.84926893    1.1328441 
 1153000    4.1669856    1.2627887     2.904197  -0.22321296   0.84194891   0.99489553   0.74677784   -1.2465374            1     1.559294    2.1829832    2.1778709   0.31702804 0.0033038736 0.0069891768  0.052749097    1.4016865    1.4284382   0.70766954  0.066666667    1.4159684        1e-10 1.7691738e-11    5.6523558     2.477458    30.403515 0.0067678683  -0.18493534 -0.0063679004   0.18848046  -0.17141978   0.10464578 
 1154000    4.1538701    1.2621908    2.8916793  -0.21587015   0.84155028    1.0147234   0.73377389   -1.2465374            1    1.5443171    2.1711029     2.174483   0.28736531 -0.0052203954 -0.023181197  0.031413713     1.389454    1.4108534   0.71114576  0.066666667    1.3809975        1e-10 1.7778644e-11     5.624726    2.4996064    30.403515 0.0078209614  -0.18065885 -0.0034298047   0.19821722   0.53075902   -3.1579666 
 1155000    4.1699768    1.2723647     2.897612  -0.21166722   0.84833363    1.0105466   0.74738886   -1.2465374            1    1.6032365    2.2059532    2.2151404   0.38861575 -0.030456979 -0.066060387 -0.003094007    1.4454999    1.4703221   0.70196272  0.066666667    1.3665664        1e-10 1.7549068e-11    5.6983083     2.488115    30.403515 -0.0048819725  -0.21106969 -0.0085017346   0.17899724 0.0032513362 -0.029228508 
 1156000    4.1532817    1.2576711    2.8956106  -0.21709069   0.83853683    1.0061318   0.73423625   -1.2465374            1    1.6013256    2.2298377    2.1896474   0.38449167 0.0059465028 0.00057870876  0.051327741    1.4463649    1.4689919    0.7018438  0.066666667    1.3697276        1e-10 1.7546095e-11    5.6992738    2.4851865    30.403515 -0.0082677623  -0.20711323 0.0094567038   0.16707646   0.71199784    4.0183385 
 1157000    4.1815508      1.26875    2.9128009   -0.2197326   0.84592353    1.0010567   0.74939048   -1.2465374            1    1.6770977    2.2686254     2.276158   0.48650961 0.0090206713 -0.0040779983  0.010478204    1.5189387    1.5454315   0.71225835  0.066666667    1.3910959        1e-10 1.7806459e-11    5.6159398    2.4858399    30.403515 0.0041426168  -0.20575089 0.0079031482   0.21230253    1.2738958    3.1646885 
 1158000    4.1559184    1.2724014     2.883517  -0.22670762    0.8483581    1.0028829   0.75220463   -1.2465374            1    1.5443667     2.165113    2.1720936   0.29589341 -0.0011496825 -0.031502572 0.00076579822    1.3856138    1.4124603   0.70628925  0.066666667     1.388112        1e-10 1.7657231e-11    5.6634021    2.4941985    30.403515 -0.0055007192  -0.19863157 -0.00014181099   0.18277736    2.1693149   0.82361733 
 1159000    4.1183518    1.2343533    2.8839984  -0.21891526   0.82298998   0.95977652   0.73788664   -1.2465374            1    1.6326048    2.2441342    2.2317347   0.42194555  0.029045863 -0.0046504342  0.019202148    1.4768737    1.5063681   0.70246074  0.066666667    1.3806749        1e-10 1.7561519e-11    5.6942684    2.5061906    30.403515 -0.0068572959  -0.15179038 0.0011872624   0.18123424    2.2591072     2.343705 
 1160000    4.1530502    1.2732967    2.8797536  -0.21644669   0.84895498    1.0012169   0.75421184   -1.2465374            1    1.5082871    2.1485616    2.1530773    0.2232224 6.4388118e-05   0.01029971  0.039407796    1.3491106    1.3765999   0.70584611  0.066666667    1.4062907        1e-10 1.7646153e-11    5.6669576    2.4910481    30.403515 -0.0049575866  -0.18447618 0.0073622104   0.18807188    2.3306158 -0.069209916 
 1161000    4.1854804    1.2909683    2.8945122  -0.21868241   0.86073731    1.0126921   0.76618764   -1.2465374            1     1.622183    2.2529872    2.2172169   0.39634485 0.0050288717 -0.0094515172 -0.056317939     1.460479    1.4889864   0.71040496  0.066666667    1.4128474        1e-10 1.7760124e-11    5.6305913    2.4907535    30.403515  0.010349923  -0.19236692 0.0047657833   0.18396843  0.096293242    1.2498843 
 1162000    4.1798324    1.2858915    2.8939409  -0.21014629   0.85735245    1.0112578   0.76158658   -1.2465374            1    1.5739175    2.2043155    2.2127468   0.30469019 -0.018917738  0.027101626 -0.0087171795    1.4131845    1.4409096   0.70198195  0.066666667    1.4317089        1e-10 1.7549549e-11    5.6981522    2.4753359    30.403515  0.023430747  -0.22657503 -0.0025217805   0.16341921    -2.163133    1.6501527 
 1163000    4.1363747    1.2537757     2.882599  -0.21442194   0.83593964      1.00146   0.73293153   -1.2465374            1    1.6295319    2.2188692    2.2437212   0.42600512 -0.018870087   0.12226674 -0.063362187    1.4748466    1.4978126   0.70729213  0.066666667    1.3996415        1e-10 1.7682303e-11    5.6553718    2.4985384    30.403515  0.008508423  -0.17862352 -0.018534424   0.18182987   -3.5337136    2.2233088 
 1164000    4.1628306    1.2617731    2.9010575  -0.21389931   0.84127178    1.0007599   0.74202389   -1.2465374            1    1.5880338    2.2021949    2.2396199   0.32228673   0.01030331  0.051813064 -0.081633175    1.4314296    1.4564067   0.71156156  0.066666667     1.403134        1e-10 1.7789039e-11    5.6214391    2.4901117    30.403515 0.0060999129  -0.17618417 0.0017428692   0.19760323  -0.60764642    3.9302746 
 1165000     4.160275    1.2828835    2.8773916  -0.21277619   0.85534686    1.0067116   0.76116393   -1.2465374            1    1.5989627    2.2499269    2.1832579   0.36370327  0.010484291 -0.077944534 -0.00064077979    1.4383189    1.4665527   0.71343873  0.066666667    1.4042397        1e-10 1.7835968e-11    5.6066482    2.4864645    30.403515  0.011958377  -0.18605491 -0.00078464293   0.20441284    1.1509672    3.9957728 
 1166000    4.1462853    1.2535651    2.8927202  -0.21953987   0.83579922   0.98053721   0.74574273   -1.2465374            1    1.5063415    2.1685607     2.135838   0.21462578 0.0037803614 0.00015179542 -0.0088976304    1.3489524    1.3773742   0.70881593  0.066666667    1.4131238        1e-10 1.7720398e-11    5.6432141    2.4729207    30.403515 0.0071311537  -0.21388197 -0.001803218   0.18078909  0.089412898    1.0019699 
 1167000     4.102856    1.2334779     2.869378  -0.21879586   0.82240634   0.98133456   0.72350413   -1.2465374            1    1.5324965    2.1706446    2.1636992   0.26314571 0.0017398381 -0.043583251 -0.0090777203    1.3798008    1.4034243   0.70409744  0.066666667    1.4156438        1e-10 1.7602436e-11    5.6810318    2.4770241    30.403515 -0.010715767  -0.17789507 -0.012821191   0.21342497    3.1180895    2.9498958 
 1168000    4.1384664    1.2439298    2.8945365  -0.21838969   0.82937502   0.97953062   0.73594115   -1.2465374            1    1.6367699    2.2517865    2.2464706   0.41205261 0.0004466533 -0.042732508   0.10401082    1.4814494     1.507935   0.70675812  0.066666667    1.4231072        1e-10 1.7668953e-11    5.6596449    2.4991083    30.403515 0.0094097797  -0.15394609  0.011710335   0.20333238    1.6191024    3.3714439 
 1169000    4.1342829    1.2443164    2.8899666  -0.21950579   0.82963272   0.98525508   0.73279198   -1.2465374            1    1.4970089    2.1334601      2.14273   0.21483655 -0.010538446 0.0056542466  -0.01572233     1.342353     1.367421   0.70819563  0.066666667    1.4104094        1e-10 1.7704891e-11    5.6481569    2.4898525    30.403515 -0.0023151398  -0.20144323 -0.0032634566   0.18588928    1.0877041   -1.1139508 
 1170000    4.1714466    1.2672761    2.9041706  -0.21972412   0.84494082   0.99768049   0.74989924   -1.2465374            1    1.5323703    2.1702064    2.1656955   0.26120905 -0.0087457453  0.033590333  0.026754457     1.374104    1.4011482   0.71965583  0.066666667    1.4381933        1e-10 1.7991396e-11    5.5582125    2.4902876    30.403515 0.0012983132  -0.18437988 -0.0022144581   0.18197981    1.6176389    2.4705077 
 1171000    4.1737383    1.2692694    2.9044689   -0.2146451   0.84626988   0.98217529    0.7617197   -1.2465374            1    1.6015009    2.2368153    2.2033214   0.36436611 -0.0040744535 -0.096314377  0.012892879    1.4407399    1.4723182   0.70764667  0.066666667    1.4276609        1e-10 1.7691167e-11    5.6525384    2.4974493    30.403515 -0.00081895359  -0.20844504  -0.01249298    0.2121607    1.5578006   0.39001384 
 1172000    4.1454489    1.2550147    2.8904342  -0.21723251   0.83676571   0.98809131   0.74260397   -1.2465374            1    1.6795957     2.265188    2.2787938   0.49480522 0.0077280137  -0.10980788   0.02063096     1.522869    1.5496348   0.69675639  0.066666667    1.4519786        1e-10 1.741891e-11    5.7408874    2.4897755    30.403515  0.013723066   -0.1683488 -0.010603012   0.17062697    0.4489396    2.3368223 
 1173000    4.1427455    1.2671607    2.8755848  -0.21535413    0.8448639   0.99964258   0.74855159   -1.2465374            1    1.6431519    2.2624461    2.2506096   0.41640001 -0.010889165 -0.056810104  0.063186618    1.4851699    1.5116717   0.70001178  0.066666667    1.4463726        1e-10 1.7500295e-11    5.7141895    2.4930985    30.403515 -0.0096007552  -0.18485143 -0.0045420464    0.1558693    1.0266893    1.3944035 
 1174000    4.1887645    1.2692907    2.9194739  -0.21605647   0.84628405     1.001312   0.74981667   -1.2465374            1    1.5780202    2.1922802    2.1669066    0.3748739 -0.0096160474  -0.11784809  0.034057279    1.4197713    1.4463205    0.7084126  0.066666667    1.4541677        1e-10 1.7710315e-11     5.646427    2.4949086    30.403515 0.0035466082  -0.17572688  0.015271123   0.20622819   0.91545331   0.44101487 
 1175000    4.1942016    1.2831065    2.9110951  -0.21328512   0.85549557    1.0002844    0.7654108   -1.2465374            1    1.6179851    2.2274613    2.2336026   0.39289148 0.00033235743  -0.14035577  0.059553213    1.4564451    1.4864205   0.71229128  0.066666667    1.4591364        1e-10 1.7807282e-11    5.6156801    2.5216664    30.403515 -0.007436601  -0.21307793 -0.00034001398   0.18584779    1.4093748     1.632258 
 1176000     4.170599    1.2607455    2.9098536  -0.20840506   0.84058662   0.99722069   0.74311728   -1.2465374            1    1.6251118    2.2305724    2.2504615   0.39430158 -0.032441231 -0.016648103  0.062246892    1.4682768    1.4939502   0.69852187  0.066666667    1.4551427        1e-10 1.7463047e-11    5.7263776    2.4861848    30.403515 0.0054472751  -0.18193914 0.0030748894   0.19477168     0.341631   0.11188871 
 1177000    4.1675328     1.265489    2.9020438  -0.21972432   0.84374931   0.99216634   0.75140141   -1.2465374            1    1.6703144    2.2820254    2.2776577   0.45126024 0.0059458186  0.036432313 -0.009241852     1.511731    1.5398176   0.69740252  0.066666667    1.4607654        1e-10 1.7435063e-11    5.7355686    2.5067393    30.403515 0.0010980335  -0.17681988 0.0016422664   0.18339943   0.84124605    2.2891953 
 1178000    4.1816425    1.2771319    2.9045106  -0.22245937   0.85151208      1.00722   0.75462182   -1.2465374            1    1.6116144    2.2467456    2.2040536   0.38404395 -0.0090213878 -0.056405022 -0.021277202    1.4523513    1.4791375   0.70944021  0.066666667    1.4571535        1e-10 1.7736005e-11    5.6382483    2.4948373    30.403515 -0.013245951  -0.16808731 -0.010312939   0.19713369    1.8382444    1.6141209 
 1179000    4.1763949     1.280764    2.8956309  -0.21495896   0.85393377    1.0095261   0.75711594   -1.2465374            1    1.6226098    2.2425769    2.2526947   0.37255785 0.0069727135  0.026224697  0.018383787    1.4628204    1.4898297   0.71337223  0.066666667    1.4908365        1e-10 1.7834306e-11    5.6071709    2.4755605    30.403515 -0.0052222671   -0.2235314 -0.00087754385   0.21955016   0.54227919    2.3990675 
 1180000    4.1815362     1.275104    2.9064322  -0.21614718   0.85016003     1.002463   0.75539148   -1.2465374            1    1.6119732    2.2108308     2.215454   0.40963481 0.0095280773  0.057196899  0.043132156    1.4525477    1.4801221   0.69995281  0.066666667    1.5030116        1e-10 1.749882e-11    5.7146709    2.4838994    30.403515 0.00051666839  -0.17743566 0.0041915128   0.21103167   0.27750902    2.4103159 
 1181000    4.1432645    1.2640047    2.8792598  -0.22021035   0.84275972    1.0139674   0.73620844   -1.2465374            1    1.4829715     2.113473     2.137261   0.19818045 0.0067951979  0.071665133  0.020593353    1.3275946    1.3496072   0.69977114  0.066666667    1.4949431        1e-10 1.7494278e-11    5.7161546    2.4944739    30.403515 -0.00058593776  -0.19837619 -0.0014898352   0.21297713  -0.77018262  -0.13317574 
 1182000    4.1706208    1.2876858     2.882935  -0.22530011   0.85854874    1.0350337   0.74871134   -1.2465374            1    1.5047794    2.1402369    2.1183832   0.25571798 -0.0060930426   0.13229522 -0.010560066    1.3467637    1.3686443   0.70725548  0.066666667     1.499685        1e-10 1.7681387e-11    5.6556649    2.4888153    30.403515 -0.0079992827  -0.23169548 0.0078466434   0.22555854   -1.6720026    1.0376853 
 1183000     4.168737    1.2869675    2.8817695  -0.22627607   0.85806986    1.0110467   0.76288276   -1.2465374            1     1.605847    2.2090507    2.2217145    0.3867759 -0.0013676805  0.020287842  0.013746218    1.4448405    1.4728669   0.70407456  0.066666667    1.5022288        1e-10 1.7601864e-11    5.6812165    2.4884043    30.403515 0.0040295915  -0.19217805 -0.0072032573   0.18650821    1.9393683   0.77719296 
 1184000    4.2108968    1.2903337    2.9205632   -0.2245648   0.86031419     1.003245    0.7713882   -1.2465374            1    1.4816239    2.1061312    2.1277603   0.21098025  0.013945987 -0.014722226 -0.046746017    1.3188223    1.3496699   0.70668836  0.066666667    1.4899878        1e-10 1.7667209e-11    5.6602036    2.5003601    30.403515 -0.007007833  -0.19007414 0.0076606744   0.18304225   0.20197007    -1.922136 
 1185000    4.1824705    1.2813929    2.9010776  -0.21549557   0.85435305    1.0063088   0.75980167   -1.2465374            1    1.6426411     2.250177    2.2441894     0.433557   0.01239501 -0.054856868  -0.03927277    1.4822849    1.5102842   0.70352718  0.066666667    1.4885941        1e-10 1.758818e-11    5.6856367    2.4861938    30.403515 -0.0025206945   -0.1965573 -0.012969386   0.17858474  -0.14595968    1.5920911 
 1186000    4.1950207    1.2793346    2.9156861  -0.21374626   0.85298073    1.0221459   0.74770409   -1.2465374            1    1.7127326      2.28447    2.3019958   0.55173194 0.0034631994  -0.18268181  0.062010703    1.5549295    1.5782926   0.69876542  0.066666667    1.4733435        1e-10 1.7469135e-11    5.7243818     2.486232    30.403515 -0.0007324129  -0.16115018 -0.0049806273   0.19912615    1.3624017    3.5149375 
 1187000      4.15793    1.2620667    2.8958632  -0.22115935   0.84146758    1.0109028   0.73602066   -1.2465374            1    1.3960043    2.0301736     2.061911  0.095928302 -0.0094434967 -0.096640591  0.024585146     1.240667    1.2630431   0.70090359  0.066666667    1.4779397        1e-10 1.752259e-11     5.706919    2.4794484    30.403515 -0.0048057465  -0.17005794 -0.0042634574   0.21662968    1.4911822   -1.5746535 
 1188000    4.1843037    1.2709197     2.913384  -0.21693111   0.84737017    1.0075371   0.74770032   -1.2465374            1    1.6208634     2.219683    2.2205389   0.42236835 -0.010843023 -0.024911038 -0.033642378    1.4630611    1.4883449    0.6983064  0.066666667    1.4528677        1e-10 1.745766e-11    5.7281445    2.4916082    30.403515 -0.0058756817  -0.15738316  0.013480798   0.19053516    1.7064162   -3.7704027 
 1189000    4.1844419    1.2706876    2.9137543  -0.21804876   0.84721543   0.99228856   0.75695206   -1.2465374            1     1.544694    2.1792022    2.1701431    0.2847366 -0.0020707225 -0.068753955  0.061496859    1.3849391     1.414181   0.69680324  0.066666667    1.4521081        1e-10 1.7420081e-11    5.7405015    2.4972682    30.403515 -0.0037138145  -0.20701148 -0.0013103785   0.19125398    2.0173806  -0.96227342 
 1190000    4.2023467    1.2724156    2.9299312  -0.21068154   0.84836752   0.99899822   0.75464085   -1.2465374            1    1.7198778    2.3246051    2.2785394   0.55648899 0.0099825316  0.023850702  0.020235871    1.5606107    1.5884824   0.70827493  0.066666667    1.4334094        1e-10 1.7706873e-11    5.6475245    2.5015262    30.403515 -0.0082327903  -0.21086373 -0.014975797   0.17958206   0.35652435    1.6991537 
 1191000    4.1766274    1.2632347    2.9133927  -0.20759608   0.84224628    1.0094856   0.73816801   -1.2465374            1    1.6133835    2.2136753    2.2422343   0.38424077 -0.0015816847 -0.022338004 -0.023940677     1.457593    1.4806087   0.70592067  0.066666667    1.4365381        1e-10 1.7648017e-11    5.6663591    2.4896987    30.403515  0.010070927  -0.22191197 0.0078418757   0.18471024    1.0984283    4.5203796 
 1192000    4.1778093    1.2910369    2.8867724  -0.21735024   0.86078306     1.025579   0.75823068   -1.2465374            1    1.6151536    2.1993607    2.2394552   0.40664487 -0.0032758214 -0.049999821 -0.024537336    1.4551289    1.4802621   0.70005061  0.066666667    1.4649821        1e-10 1.7501265e-11    5.7138726    2.5041106    30.403515 0.00064858265  -0.18627423  0.015883991   0.20849298    1.2014386    3.5180788 
 1193000    4.1945567    1.2844675    2.9100892  -0.22118992   0.85640303    1.0154373   0.75744061   -1.2465374            1    1.4844241    2.1261433    2.1017933   0.22533574  0.011379306 -0.086632789 -0.0054459744    1.3245661    1.3508665   0.69489713  0.066666667    1.4765286        1e-10 1.7372428e-11    5.7562477    2.4691829    30.403515 0.00090344128  -0.18323003 0.0018860249    0.1680931 -0.088469417    1.3845357 
 1194000    4.2164149    1.2906077    2.9258072  -0.21465824   0.86049691    1.0295349   0.75530086   -1.2465374            1    1.6170166    2.2420489     2.237418   0.37158288  0.014853515 -0.089583578  0.042389546    1.4576102    1.4816047    0.7114163  0.066666667    1.4558763        1e-10 1.7785408e-11    5.6225869    2.5032738    30.403515 0.0038106408  -0.17867121 -0.00078180578   0.19382121 -0.068235866  -0.36313754 
 1195000    4.1916292    1.2719633    2.9196658   -0.2098042   0.84806602      1.01025   0.74713923   -1.2465374            1    1.6265798    2.2408606    2.2192276    0.4196513 0.0091843183  0.024433546  0.050682639     1.468896    1.4937045     0.704262  0.066666667    1.4607173        1e-10 1.760655e-11    5.6797044    2.4823335    30.403515 -0.0019002087  -0.16805613 -0.00083482052   0.19636366  -0.87349308   0.87407793 
 1196000    4.2128881    1.2921545    2.9207336  -0.20999338   0.86152825    1.0227578   0.76119861   -1.2465374            1    1.6278363    2.2394717    2.2298944   0.41414274 -0.010389816  0.053339895 -0.0013487202    1.4671852    1.4933158   0.70434269  0.066666667    1.4618079        1e-10 1.7608567e-11    5.6790538    2.4865288    30.403515 0.0015912156  -0.20766261 0.0094520613   0.19501968    -0.818826    1.8063905 
 1197000    4.1938504    1.2945571    2.8992933  -0.22934105   0.86313013    1.0233372   0.76343798   -1.2465374            1    1.5549201    2.1543464    2.1634131   0.34700068 -0.013674062  0.029316476 0.0099976805    1.3937963    1.4203234   0.70221595  0.066666667    1.4392406        1e-10 1.7555399e-11    5.6962534     2.493112    30.403515 0.0087923913  -0.18640834 -0.0063640176   0.16830273   -1.5510915    1.1889974 
 1198000    4.1686322    1.2625338    2.9060985  -0.21954593   0.84177895    1.0155375   0.73363777   -1.2465374            1    1.5986232    2.2100049    2.2208213   0.36504329  0.002391837  0.022034634  0.009819911    1.4437888    1.4650524   0.70170315  0.066666667    1.4166347        1e-10 1.7542579e-11    5.7004162    2.4959229    30.403515 0.0096696003  -0.19611937 0.0027533108   0.18905453    1.0696209    4.1965162 
 1199000    4.1933348    1.2904616    2.9028732  -0.22082509   0.86039952    1.0123161   0.76587356   -1.2465374            1    1.6176016    2.2319409    2.2134523   0.40741163     0.015259   -0.1710488  0.031318493    1.4559639    1.4844545   0.70025157  0.066666667    1.3943626        1e-10 1.7506289e-11    5.7122328    2.4972663    30.403515 0.0049685265  -0.20428558 0.0021925087   0.15167167    2.3958193    2.1329574 
 1200000    4.1995015     1.269101    2.9304005  -0.21584721   0.84615757    1.0070007   0.74606609   -1.2465374            1    1.6148195    2.2311601    2.2083267   0.40497174 0.0011738225 -0.036808962 -0.077608445    1.4573622    1.4823716   0.70595408  0.066666667    1.3956157        1e-10 1.7648852e-11    5.6660909     2.482754    30.403515 0.00021714516  -0.19408139 -0.0041397075   0.19415857    2.9168104    2.5035557 
 1201000    4.1571418    1.2693905    2.8877513  -0.21993122   0.84635062    1.0374469    0.7274053   -1.2465374            1    1.5685404    2.1911478    2.1983652   0.31610817 -0.017683293  0.042348425 0.0099566339    1.4150214    1.4320879   0.70652066  0.066666667     1.391433        1e-10 1.7663016e-11    5.6615471    2.4982197    30.403515 -0.008595562  -0.18184423 -0.005818958   0.20438307    1.6957839    1.1922017 
 1202000    4.1640301    1.2740078    2.8900223  -0.21137982   0.84942912    1.0308457   0.73651675   -1.2465374            1     1.562241     2.203345    2.1945432    0.2888347 -0.0083499465  -0.11964977  0.014296472     1.406799    1.4266567   0.70447709  0.066666667    1.3857656        1e-10 1.7611927e-11    5.6779703    2.4975289    30.403515 -0.0095265206  -0.15911395 -0.0083719486   0.20246805    1.4824218  -0.73290405 
 1203000    4.1879512    1.2871578    2.9007934  -0.20780688   0.85819671    1.0207875   0.75701815   -1.2465374            1    1.6420049    2.2328595    2.2641859   0.42896925 -0.0082597742 -0.090531575  0.047081407    1.4822361    1.5077436   0.70388566  0.066666667    1.3821714        1e-10 1.7597142e-11    5.6827411    2.5085125    30.403515 -0.018212643   -0.1945851 -0.0012115036   0.18429646  -0.56211593   0.67483731 
 1204000    4.1836501    1.2703776    2.9132725   -0.2071304   0.84700873    1.0392934   0.72732295   -1.2465374            1    1.6451121    2.2450428    2.2533395   0.43695388 -0.0029474489 -0.029815213  0.019637383    1.4916105    1.5084167   0.70715812  0.066666667    1.4112654        1e-10 1.7678953e-11    5.6564436    2.5195149    30.403515 -0.013160811   -0.1944833 -0.027625623   0.20356368  -0.65512646    2.0595512 
 1205000    4.1854782    1.2879857    2.8974925  -0.21649963    0.8587487    1.0101097   0.76456871   -1.2465374            1    1.5842652     2.197066    2.2250708   0.33065886  0.007290779  -0.10653949  0.031937839    1.4229029    1.4514083    0.6989813  0.066666667    1.4141479        1e-10 1.7474533e-11    5.7226137    2.4764658    30.403515 -0.0067764659  -0.18718477 -0.001254817   0.21172377   0.83262977    2.7959834 
 1206000    4.1832088    1.2604192    2.9227896  -0.21811538   0.84036912    1.0025091   0.73946842   -1.2465374            1    1.5164979    2.1573008    2.1408887   0.25130403 -0.0078005101 -0.00050329809 -0.024581555    1.3604329    1.3846406   0.70250216  0.066666667    1.4191286        1e-10 1.7562554e-11    5.6939327    2.4912176    30.403515  0.016315591  -0.20250022 0.00038259515   0.17387002   -1.5421234   0.13656467 
 1207000    4.1770144    1.2709485    2.9060659  -0.21804248   0.84738935    1.0170577    0.7417982   -1.2465374            1    1.5062367     2.143963    2.1465177   0.22822944 -0.0047803328 -0.083177134  0.011672085    1.3496801     1.372466   0.70903852  0.066666667    1.4123186        1e-10 1.7725963e-11    5.6414424    2.5201311    30.403515 -0.0015680255  -0.21006532 -0.0024034278   0.16395749    0.7014181  -0.40203541 
 1208000      4.16801    1.2814025    2.8866075  -0.21810002   0.85435946    1.0162763   0.75360027   -1.2465374            1    1.6330706    2.2323991    2.2465958   0.42021707 0.0033735595  -0.18880741   0.01276891    1.4740232    1.4994027   0.70765568  0.066666667    1.4031986        1e-10 1.7691392e-11    5.6524664    2.5038819    30.403515 -0.0027531827   -0.1845528 -0.011012981   0.17882712    2.4859467     2.047982 
 1209000    4.1553467    1.2689122    2.8864345  -0.21289595   0.84603169    1.0110159   0.74335943   -1.2465374            1    1.6235425    2.2442127    2.2369189    0.3894959 8.8546473e-05  0.022613188 -0.0091824667    1.4666564    1.4905664   0.70549685  0.066666667    1.4067339        1e-10 1.7637421e-11    5.6697631    2.5015938    30.403515 -0.0002807685   -0.1963052 -0.0077221283   0.18434074  0.088583496    2.8193498 
 1210000    4.1669403    1.2745657    2.8923746  -0.21806289    0.8498011    1.0170879   0.74569451   -1.2465374            1    1.5911541    2.2002973    2.2180184   0.35514666 -0.011202503 -0.079929625  0.038127291    1.4337752    1.4573794   0.70660331  0.066666667    1.3948705        1e-10 1.7665083e-11    5.6608849    2.4897876    30.403515 -0.010533714  -0.19804381  0.010828602   0.15837925   0.80343742    1.8781184 
 1211000    4.1555805    1.2759915     2.879589  -0.22931131   0.85075171    1.0261344   0.74159993   -1.2465374            1    1.5877588    2.1977064    2.2014861   0.36408393 0.0036236739  0.079347624  0.026501041     1.431244    1.4527942   0.71019542  0.066666667    1.3869673        1e-10 1.7754886e-11    5.6322526    2.4959014    30.403515 0.0020163534  -0.17553029 -0.0028074652   0.21357555  -0.60739742   0.70553423 
 1212000    4.1511416    1.2672609    2.8838807  -0.22544294   0.84493072     1.007575   0.74371654   -1.2465374            1    1.5634021    2.1898326    2.1703816   0.32999212 -0.0067456864 -0.029580873 -0.018661309    1.4064406    1.4308786   0.70006494  0.066666667    1.4108888        1e-10 1.7501624e-11    5.7137556    2.5161239    30.403515 0.0045781824  -0.16804486 -0.0038246291   0.20216988  -0.24299119   -1.2941492 
 1213000    4.1841831    1.2801998    2.9039833  -0.22327896   0.85355755   0.99986042    0.7625289   -1.2465374            1    1.6678111    2.2618887    2.2448305   0.49671418 0.0041439475 -0.085499724  0.025469772    1.5068793    1.5363023   0.70191369  0.066666667    1.4046258        1e-10 1.7547842e-11    5.6987063    2.5225406    30.403515  -0.01730939  -0.20375881 0.0076933151   0.17087019  -0.43138689    2.1034835 
 1214000    4.1419406    1.2697534    2.8721872  -0.22947726   0.84659253    1.0234551   0.73651777   -1.2465374            1    1.5772388    2.1935708    2.2139567   0.32418903 0.0077341885 -0.067819535 -0.027075968    1.4217967    1.4426267    0.7047791  0.066666667    1.4178327        1e-10 1.7619478e-11    5.6755372    2.4916294    30.403515 -0.0014515344  -0.17677639   0.00292896   0.17093045     1.061652   0.25197211 
 1215000    4.1709383    1.2734337    2.8975046   -0.2138496   0.84904634     1.014913   0.74582469   -1.2465374            1     1.439912     2.108467    2.0952023   0.11606663 -0.0067821822  0.078067325   0.01648343    1.2825055    1.3064233    0.7091057  0.066666667    1.4119224        1e-10 1.7727642e-11     5.640908    2.4898859    30.403515 -0.012699324  -0.20360448 -0.0076806852   0.19367602  -0.06746509  -0.65627348 
 1216000    4.1456896    1.2642561    2.8814335  -0.22235101   0.84292729   0.99940968   0.74555288   -1.2465374            1    1.5000381    2.1531284    2.1293241   0.21766183   0.01429161  0.059882854 -0.055352356     1.342689    1.3685885   0.70609359  0.066666667    1.3864663        1e-10 1.765234e-11    5.6649714    2.4893772    30.403515 -0.0018643392  -0.18493746 -0.014301842    0.2302762  0.037325775   -1.6260291 
 1217000    4.1279795     1.246286    2.8816936   -0.2134567   0.83094593   0.98647816   0.73416159   -1.2465374            1    1.7639667    2.3425534    2.3622964   0.58705023 -0.018166889  -0.03644986  0.038196702    1.6090218     1.634218   0.69502709  0.066666667    1.3905977        1e-10 1.7375677e-11    5.7551713    2.4741189    30.403515 -0.012666532  -0.16495275 0.0013940849   0.18259785   0.24410647    3.6012628 
 1218000    4.1560703    1.2745423     2.881528  -0.22245276   0.84978552    1.0107609   0.74961225   -1.2465374            1    1.6822753    2.2624484    2.2937348   0.49064278   0.00344654 0.0010034895 -0.0027861442    1.5240695    1.5493328   0.70340045  0.066666667    1.3960764        1e-10 1.7585011e-11    5.6866611    2.4776461    30.403515   0.00471038  -0.23610906  -0.01761433   0.20802299   -0.3767756    2.7593084 
 1219000    4.1725599    1.2839665    2.8885934  -0.21647179   0.85606896    1.0184237   0.75503717   -1.2465374            1    1.5472774    2.1755837    2.1649148   0.30133355  0.014989477 -0.0091286056 -0.018317211    1.3879267     1.413327   0.71204974  0.066666667    1.4251465        1e-10 1.7801243e-11    5.6175851     2.509489    30.403515 -0.0085994892   -0.1991583 0.0058416103   0.20063867   0.58120123   0.27710239 
 1220000     4.154201    1.2781618    2.8760392  -0.21446567   0.85219877    1.0047338   0.75728601   -1.2465374            1    1.6014306    2.2189677    2.2021782   0.38314582 0.0058999245 -0.036385456  -0.03989132    1.4416052    1.4692808   0.70717243  0.066666667     1.412201        1e-10 1.7679311e-11    5.6563291    2.4925508    30.403515  0.010120915   -0.1926939 0.0041452209   0.18748227   0.37897385    3.0908322 
 1221000    4.1773714    1.2826919    2.8946795  -0.22453661   0.85521914    1.0034668   0.76297878   -1.2465374            1    1.4398423    2.0925851    2.0858136   0.14112822  0.010309995 -0.036612768 -0.012475597    1.2788155    1.3078592   0.70177429  0.066666667    1.4053576        1e-10 1.7544357e-11    5.6998383    2.4890128    30.403515 -0.0018670513   -0.1728777  0.010498033   0.18998959   0.86824598   0.68316414 
 1222000    4.1272476    1.2472226     2.880025   -0.2182246   0.83157044    0.9919454    0.7317682   -1.2465374            1    1.6069698    2.2155472    2.2073191   0.39804313 -0.011155519 -0.034400605 -0.024828976      1.45253     1.476502   0.71221884  0.066666667    1.4225319        1e-10 1.7805471e-11    5.6162513    2.4906357    30.403515 -0.0033649714  -0.22405704  0.007023001   0.22328705     -0.46276 0.00087256398 
 1223000    4.1625451     1.255684    2.9068611  -0.21041609   0.83721197   0.99536271   0.73879685   -1.2465374            1     1.429022    2.0876723    2.0778543   0.12153943 -0.015135754   -0.1151988 -0.0047879842    1.2730988    1.2981047   0.70798427  0.066666667    1.4519931        1e-10 1.7699607e-11     5.649843    2.4955429    30.403515 -0.0041234692  -0.17100694 -0.00043039839   0.19348988  -0.47281619    1.1720762 
 1224000      4.16305     1.264638    2.8984119  -0.22512783   0.84318194   0.99677382   0.74760896   -1.2465374            1    1.5745536    2.1964328    2.1757522   0.35147583 -0.010496759   0.07598098  0.006703346    1.4167706    1.4434508   0.70795126  0.066666667    1.4429241        1e-10 1.7698782e-11    5.6501065    2.5089421    30.403515 -0.014403143  -0.20615907 -0.011399882   0.18201706   -1.2448488   0.72165167 
 1225000    4.1759128    1.2731172    2.9027957  -0.22275951   0.84883531    1.0166508    0.7443991   -1.2465374            1    1.6442963    2.2393633    2.2596698   0.43385566 -0.0082232778  -0.03079894 -0.036625143    1.4871907     1.510579   0.70435388  0.066666667    1.4420551        1e-10 1.7608847e-11    5.6789635     2.480698    30.403515 -0.016572401  -0.19121397 0.00074213959    0.1857768   0.32656146   0.60619678 
 1226000    4.1407195    1.2545213    2.8861982  -0.21635925   0.83643673    1.0072252   0.73014561   -1.2465374            1    1.5815252    2.1777832     2.213354   0.35343851 -0.0037388046  -0.18199207 -0.038593658    1.4274279    1.4490477    0.7036666  0.066666667    1.4218165        1e-10 1.7591665e-11    5.6845103    2.4840954    30.403515 0.0049335987  -0.17024539 -0.0053210204   0.19665134    1.0414125   -1.5378557 
 1227000    4.1512627    1.2581533    2.8931094  -0.21460579   0.83885834   0.98604552   0.74727604   -1.2465374            1    1.5027773    2.1412883    2.1216967   0.24534707 -0.014378884 -0.079313018  -0.06583377    1.3450646    1.3730855   0.70414727  0.066666667    1.4270572        1e-10 1.7603682e-11    5.6806299    2.4882831    30.403515 -0.001264456  -0.17751097 0.0048963252    0.2450201   0.17892699  -0.90404839 
 1228000    4.1961593    1.2923589    2.9038003  -0.21393261   0.86166453    1.0092122    0.7698615   -1.2465374            1    1.7066052    2.2922295    2.2970094   0.53057667  0.024315712   -0.0391158 -0.016241038    1.5441258    1.5738664    0.7059529  0.066666667    1.4267966        1e-10 1.7648823e-11    5.6661004    2.4820297    30.403515 -0.010997841   -0.2125635 -0.0077745904   0.21579499    0.8482927    2.5283042 
 1229000    4.1602211     1.281052     2.879169  -0.22061027   0.85412579     1.000244   0.76321232   -1.2465374            1    1.6668288     2.292869    2.2521086   0.45550879 0.0018410833 -0.010321458  0.035430459    1.5057527    1.5352695   0.70541479  0.066666667    1.4178537        1e-10 1.763537e-11    5.6704227      2.48342    30.403515 -0.011001631  -0.20737741  0.016129995   0.20304669   0.80927302    2.7181069 
 1230000     4.173811    1.2630644    2.9107466  -0.21623758   0.84213277    1.0153666   0.73431866   -1.2465374            1     1.386877     2.046511    2.0245702  0.089549663 -0.026497801  0.055434253 0.0057123108    1.2318989    1.2533286   0.70072826  0.066666667    1.4032833        1e-10 1.7518207e-11    5.7083469     2.486732    30.403515 -0.0096882347  -0.19946499 -0.017626865   0.21989105   0.20048963   0.14420938 
 1231000    4.2017265    1.2715179    2.9302086  -0.21589294   0.84776904    1.0049432   0.74996436   -1.2465374            1    1.5846135    2.2058297    2.1970521   0.35095881 0.0070417563   0.15921095 -0.026460631    1.4263334    1.4524362    0.7031863  0.066666667    1.3900856        1e-10 1.7579657e-11     5.688393    2.4996657    30.403515 -0.0072323489   -0.1914435 0.0049006189   0.16266133   -1.6525976    2.7024473 
 1232000    4.1878256    1.2815345    2.9062912  -0.20817922   0.85444743    1.0080705   0.75885694   -1.2465374            1    1.5420156     2.167551    2.1834205   0.27507541 -0.0077423664 -0.0092163537  -0.03861381    1.3818588     1.409427   0.70782449  0.066666667    1.3858614        1e-10 1.7695612e-11    5.6511184    2.4859364    30.403515  0.012194455   -0.1860198 0.0027849197   0.20255258  -0.50174592    2.5602943 
 1233000    4.1656771    1.2880801    2.8775971  -0.21767342   0.85881165    1.0139067   0.76230456   -1.2465374            1    1.5047624     2.150649    2.1578367   0.20580138 0.0087807439   0.10561655 -0.0042768631    1.3438779    1.3714061   0.70727002  0.066666667    1.4016113        1e-10 1.7681751e-11    5.6555486    2.4966019    30.403515 -0.0035276925  -0.19382724 0.0013955438   0.17865932   -1.2526636   0.32480388 
 1234000    4.1687722    1.2627478    2.9060244   -0.2139879   0.84192168    1.0017082   0.74248795   -1.2465374            1    1.6636119    2.2373741    2.2628137   0.49064793    0.0133836 -0.057234309  0.010613554    1.5069097    1.5318601   0.69951725  0.066666667    1.3898769        1e-10 1.7487931e-11    5.7182293    2.4810014    30.403515 0.0032911124  -0.17574799 0.0057772115    0.1736414  -0.30152439    4.8452133 
 1235000    4.1330241     1.238363    2.8946612  -0.21508688   0.82566337     1.005406   0.71379014   -1.2465374            1    1.6536204     2.260217     2.254497   0.44614724 -0.008780676 -0.011842287 0.0056490395    1.5029749    1.5213822   0.70944004  0.066666667    1.3893573        1e-10 1.7736001e-11    5.6382496    2.4922138    30.403515 0.0079390068  -0.20932166 -0.00058293412   0.21933436  -0.69878295   0.88459802 
 1236000    4.1447901    1.2516402    2.8931498  -0.21939257   0.83451583   0.98897142   0.73840308   -1.2465374            1    1.5747936    2.1987086    2.1965038   0.32916824 3.3082774e-05 -0.066720671  0.031791533    1.4189535    1.4447169   0.70586076  0.066666667    1.3878924        1e-10 1.7646519e-11      5.66684    2.4798498    30.403515 6.2888341e-05  -0.19563433 0.0076642087   0.19972779    1.2607202    2.2755637 
 1237000    4.1863135    1.2634969    2.9228166  -0.21193876   0.84242113   0.99132893   0.74976715   -1.2465374            1    1.6145303    2.2319018     2.222212   0.38947719 0.0060041485 -0.0015253457 -0.061883184    1.4562918    1.4841436   0.70482733  0.066666667    1.3712755        1e-10 1.7620683e-11    5.6751489    2.4813491    30.403515  0.014600036  -0.15923356 -0.0051223906   0.19269248   0.69664154   0.12530724 
 1238000    4.1712451     1.261603    2.9096421  -0.21039601   0.84115839   0.99967173   0.74251799   -1.2465374            1    1.5501352    2.2103311    2.1813623   0.25871226 -0.010794097  0.029944693 -0.048834319    1.3934267    1.4186512   0.70047005  0.066666667    1.3900006        1e-10 1.7511751e-11    5.7104511    2.4782112    30.403515 -0.014449963  -0.16604833 -0.0030179736   0.19943264  -0.66400151    2.9980401 
 1239000    4.1581651    1.2357971    2.9223679  -0.22023985   0.82395264   0.97739533    0.7284693   -1.2465374            1    1.6740513    2.2576556    2.2486131   0.51588533 -0.0059893271 -0.032904801   0.11088347    1.5203078    1.5454973   0.70201397  0.066666667    1.3819435        1e-10 1.7550349e-11    5.6978923    2.4959237    30.403515 0.0031053198  -0.20809451 0.0018648643   0.16343166  -0.95339411    5.5492553 
 1240000     4.143121    1.2680033    2.8751177  -0.21438664   0.84542572    1.0181246   0.73794554   -1.2465374            1    1.4335365    2.0960046     2.103423   0.10118176 -0.0076359089 -0.007105971 0.0080236958    1.2777929    1.2996254   0.70856189  0.066666667    1.4072503        1e-10 1.7714047e-11    5.6452373    2.4767898    30.403515  0.009366486  -0.15831112 -0.0072467432   0.17460403 -0.077502376    1.0112999 
 1241000    4.1605772    1.2719877    2.8885895  -0.21889069   0.84808226    1.0147471   0.74436298   -1.2465374            1    1.7034301     2.279339    2.3085877   0.52236357 -0.0019117147   0.07301981 0.0019276408    1.5463321    1.5699632   0.70911123  0.066666667    1.3930945        1e-10 1.7727781e-11    5.6408639    2.4841742    30.403515   0.00976631  -0.21379822 -0.0011669985   0.18350436  -0.74857502    1.3675603 
 1242000    4.1539608     1.274563    2.8793977  -0.22143833   0.84979932    1.0008605   0.75580463   -1.2465374            1    1.5184431    2.1556525    2.1655094   0.23416735 -0.013037836   0.11641857  0.051602208    1.3589304    1.3868027   0.69567776  0.066666667      1.40361        1e-10 1.7391944e-11    5.7497885    2.4771386    30.403515 0.0059038465  -0.18712227 -0.0029000606   0.18912096   -1.5168992   0.45086424 
 1243000    4.1760255    1.2711232    2.9049023  -0.21681797   0.84750586    1.0058452   0.74897497   -1.2465374            1    1.6802082     2.277355    2.2662511   0.49701846 -0.0046380674 -0.044227415  0.037473075    1.5221369    1.5479122   0.70190901  0.066666667    1.4057745        1e-10 1.7547725e-11    5.6987444     2.484843    30.403515 0.0087525862  -0.20236122 -0.0075867417   0.16731325   0.58372037    1.5848073 
 1244000    4.1789548    1.2896183    2.8893365  -0.22347403   0.85983724    1.0128144   0.76465024   -1.2465374            1    1.6235862    2.2333788    2.2066375   0.43074223 0.0013718216  -0.10304008  0.095648993    1.4622066    1.4903735     0.716366  0.066666667    1.3987661        1e-10 1.790915e-11    5.5837379    2.5215039    30.403515 0.0054676823  -0.19510389 -0.017128933   0.21066284    0.5497217    3.4213904 
 1245000    4.1650083    1.2849388    2.8800695  -0.21542451   0.85671725    1.0267928   0.75087395   -1.2465374            1    1.5655532    2.1780299    2.1790272   0.33960257 0.0057202313  0.018383048 -0.039904032    1.4070812    1.4305021   0.71022387  0.066666667    1.3956742        1e-10 1.7755597e-11     5.632027    2.4900538    30.403515 -0.0086689195  -0.19299449 -0.0044687684   0.20710863   -1.4409659    2.0011048 
 1246000    4.1636693    1.2634743     2.900195  -0.21166467   0.84240605   0.99758963   0.74584097   -1.2465374            1     1.606157    2.2131414    2.2319544   0.37337515  0.025318695  0.021639596  0.048126647    1.4487471    1.4749468   0.69551954  0.066666667    1.4239203        1e-10 1.7387989e-11    5.7510965    2.4821524    30.403515 -0.0010066823  -0.20313889 0.0021569559   0.19181493  -0.48326377    1.2606287 
 1247000    4.1643591     1.283756    2.8806031  -0.21893691   0.85592863    1.0273293   0.74925932   -1.2465374            1    1.7346929     2.318287    2.3151865   0.57060517  0.011915188   0.12301902   0.01227507    1.5765616    1.5995711   0.69992247  0.066666667     1.443204        1e-10 1.7498062e-11    5.7149187    2.4867222    30.403515 0.0096751458   -0.2105254 0.0050609974   0.17202694  -0.26929713     1.323695 
 1248000    4.1917393    1.2778154    2.9139239  -0.21663372    0.8519678    1.0195099    0.7477025   -1.2465374            1    1.5066709    2.1384195    2.1393398   0.24225349 -0.0049305801  0.013606985 -0.058495212    1.3488682    1.3725776    0.7093279  0.066666667    1.4401055        1e-10 1.7733197e-11     5.639141    2.5174086    30.403515 -0.0082555087  -0.19279164 -0.0091643165   0.18194147  -0.06950701  -0.71355377 
 1249000    4.1638537     1.273165    2.8906887   -0.2194459   0.84886718    1.0230392   0.74046954   -1.2465374            1    1.6666809    2.2647936    2.2571617   0.47808749 -0.020755783  0.013168891  0.011356298    1.5104047    1.5321234   0.70082545  0.066666667    1.4300816        1e-10 1.7520636e-11    5.7075553    2.4803573    30.403515  -0.00324368  -0.17059465 0.0053274258   0.18230301    1.0794414   -0.1677426 
 1250000    4.1977049    1.2818115    2.9158935   -0.2169206   0.85463212    1.0100269   0.75793757   -1.2465374            1    1.5692862    2.2021608       2.1836   0.32209786  0.022229505  -0.15145965  0.031398779    1.4093234    1.4364402   0.69962924  0.066666667    1.4047837        1e-10 1.7490731e-11     5.717314    2.4941741    30.403515 0.0098587977  -0.20680679  0.013317096   0.16175479   0.61606717    1.0342035 
 1251000     4.195706    1.2980549    2.8976511  -0.21197886   0.86546222    1.0171143   0.77110198   -1.2465374            1    1.6724959    2.2873554    2.2507616   0.47937073  0.013483924  -0.09069481  0.060361611    1.5097547    1.5387177   0.70632142  0.066666667    1.4213983        1e-10 1.7658036e-11    5.6631441    2.4884747    30.403515 -0.00027074633   -0.1718499  0.006794474   0.18169328 -0.017698091    3.3393438 
 1252000    4.1825295    1.2720549    2.9104746  -0.21665345   0.84812704    1.0143337   0.74469331   -1.2465374            1    1.6764089    2.2829465    2.2836062   0.46267407 -0.0058545652 -0.053335568  0.018876122    1.5192413    1.5429965   0.70811237  0.066666667    1.4222795        1e-10 1.7702809e-11     5.648821    2.4998433    30.403515  -0.01178203  -0.20908419 -0.0041191649   0.18672295  -0.47977257   0.33872625 
 1253000      4.19252    1.2870487    2.9054713  -0.20748132   0.85812397    1.0190998    0.7579519   -1.2465374            1    1.4891488    2.1394375    2.1402164   0.18779243 0.0075174656 -0.012049109 -0.0095208512    1.3291829    1.3551094   0.70160759  0.066666667    1.4250135        1e-10 1.754019e-11    5.7011926     2.491162    30.403515 0.0035331348  -0.17576372  0.011421746   0.17296787    0.7660527  -0.17769212 
 1254000    4.1693602    1.2665496    2.9028106   -0.2124538   0.84445646     1.010712   0.74099165   -1.2465374            1    1.6524378    2.2323295    2.2549234   0.47006061 0.0069503193 -0.065369018  0.088587622    1.4960514    1.5195017   0.69876272  0.066666667    1.4363224        1e-10 1.7469068e-11    5.7244039    2.4814731    30.403515 -0.0051471926  -0.17200493  0.015123259   0.17880271    2.5705037  -0.73532701 
 1255000    4.1692497     1.273896    2.8953537   -0.2251907   0.84935458    1.0144136    0.7466363   -1.2465374            1    1.5219451    2.1504409    2.1630075   0.25238692 -0.0093068948 0.0046416417  0.011174745    1.3643674    1.3885222    0.7107371  0.066666667     1.418117        1e-10 1.7768428e-11      5.62796    2.4861161    30.403515 0.0088648675   -0.2003961  0.008316811   0.19306303    2.2572101     -1.69081 
 1256000    4.1598897    1.2661031    2.8937866  -0.21848836   0.84415878    1.0133829   0.73884392   -1.2465374            1    1.5159705    2.1360401    2.1385601   0.27331134 -0.011603677   0.12860351 -0.084614522    1.3600374    1.3826831   0.70827947  0.066666667    1.4412579        1e-10 1.7706987e-11    5.6474883    2.4816132    30.403515 -0.00087696322  -0.20165647   0.01104734   0.21272948  -0.92734288   -0.3662888 
 1257000    4.1396044    1.2660133    2.8735911  -0.21724238   0.84409889    0.9949293   0.75024703   -1.2465374            1     1.726313     2.323668    2.2945704   0.56070046  0.010506625 -0.015537726   0.02074114    1.5679732    1.5954527   0.70607507  0.066666667    1.4439363        1e-10 1.7651877e-11      5.66512    2.4952005    30.403515 0.0073649743  -0.20698649 0.0029348333   0.17749191  -0.20048909 -0.064131454 
 1258000    4.1526512    1.2649698    2.8876814  -0.21734888   0.84340317   0.99830238   0.74701548   -1.2465374            1    1.7061454    2.3106536    2.2823065   0.52547617 0.00088325964 -0.011272167 -0.027061888    1.5484877    1.5748415   0.70946451  0.066666667    1.4187196        1e-10 1.7736613e-11    5.6380551     2.481467    30.403515 -0.0014251612  -0.17875304 -0.0012243168   0.20289588   0.36145368 -0.048934253 
 1259000    4.1409951    1.2564116    2.8845834  -0.21025269    0.8376971    1.0009759   0.73608624   -1.2465374            1    1.5727995    2.2024917    2.2022884   0.31361845 -0.012063732 -0.023973656 -0.0069378146    1.4174484     1.441144   0.70387557  0.066666667    1.4257249        1e-10 1.7596889e-11    5.6828226    2.4992023    30.403515 -0.0061902403  -0.19204297 -0.012041398   0.19105542   0.59334692  -0.62606986 
 1260000    4.1728906    1.2675849    2.9053058  -0.22131678   0.84514671   0.99386802   0.75260942   -1.2465374            1    1.6411368    2.2448092    2.2475738    0.4310274  0.012388261  -0.04091581  0.022878469    1.4822985    1.5104162     0.710332  0.066666667    1.4233712        1e-10  1.77583e-11    5.6311697    2.5096241    30.403515 0.0088391767  -0.19626965 0.0039770029   0.21399254    1.6521639      1.08121 
 1261000     4.134729    1.2555303    2.8791986  -0.21912173    0.8371095   0.99754826   0.73726847   -1.2465374            1    1.6453628    2.2570845    2.2630812   0.41592275  0.017383611  -0.03183064  0.090828242    1.4897622    1.5141581   0.71509072  0.066666667    1.4391119        1e-10 1.7877268e-11    5.5936959    2.5107062    30.403515  0.020539176  -0.22038529 -0.016093845   0.18293879    1.0876719   0.08098686 
 1262000    4.1520486     1.266741    2.8853076  -0.21519499   0.84458409   0.98995102   0.75413717   -1.2465374            1    1.5528797    2.1796693    2.1875876   0.29138224 0.0090200107  0.051876512 -0.044741948    1.3937189    1.4226742    0.6988996  0.066666667    1.4443843        1e-10 1.747249e-11    5.7232827    2.4740765    30.403515 -0.0089820948  -0.15977038   0.01106648   0.19095014   -1.3551378    1.7327547 
 1263000    4.1590946    1.2618114    2.8972831  -0.22616479   0.84129736    1.0074464   0.73789841   -1.2465374            1    1.6063592    2.2014706    2.2020887   0.41551829 -0.00028064411  0.011693073 -0.024160965    1.4506256    1.4738526   0.70397104  0.066666667     1.447877        1e-10 1.7599276e-11    5.6820519    2.4853398    30.403515 -0.012741383  -0.17936046 -0.0032339054   0.17663061   -1.3739953    4.9701687 
 1264000    4.1409889    1.2699142    2.8710747  -0.21957873   0.84669978    1.0007752   0.75082605   -1.2465374            1    1.5054372    2.1598748     2.137019   0.21941775  0.012342714  -0.08364157  0.032662344    1.3469752     1.373808   0.70447942  0.066666667    1.4303708        1e-10 1.7611985e-11    5.6779515    2.4936642    30.403515 0.0063320928  -0.21619165 -0.026312071   0.20165953  -0.19174578  -0.54140465 
 1265000    4.1687988    1.2735016    2.8952972  -0.21304961   0.84909165   0.98952264   0.76172161   -1.2465374            1    1.6976713    2.2773521    2.2940263   0.52163546 0.0039948463   0.03723437 -0.001851739    1.5369098    1.5675221   0.70382977  0.066666667    1.4310741        1e-10 1.7595744e-11    5.6831924     2.488606    30.403515 -0.0028463816  -0.20956641 0.00061428462    0.2117831  -0.29658573    2.9893744 
 1266000    4.1875735    1.2551938    2.9323797  -0.21001307   0.83688514    0.9813562   0.74699519   -1.2465374            1    1.5972306    2.1972454    2.2331469   0.36129937 0.0022181159 0.0092209782 -0.036019202    1.4395771    1.4681555   0.69929032  0.066666667     1.403334        1e-10 1.7482258e-11    5.7200849    2.4892317    30.403515 -0.0035165978  -0.18456239 -0.0079412792   0.16491811  -0.44594214    1.9931108 
 1267000    4.1581896    1.2552992    2.9028904  -0.21576963   0.83695542   0.99267877   0.74005302   -1.2465374            1    1.5972767    2.2353804     2.192289    0.3641608 -0.012740369  0.057306092 -0.031270628    1.4410884    1.4667125   0.70548816  0.066666667    1.4072993        1e-10 1.7637204e-11    5.6698329    2.5068595    30.403515 -0.0031367783  -0.21221306 0.0072885116   0.21202624 -0.055729603  -0.73015727 
 1268000    4.1524579    1.2762424    2.8762155  -0.22681104   0.85091903    1.0081386   0.75308657   -1.2465374            1    1.6510043    2.2577069     2.263386    0.4319199 -0.010241028 -0.076246432  0.032092976    1.4920652    1.5184066    0.7138275  0.066666667    1.4195335        1e-10 1.7845687e-11    5.6035947    2.5052309    30.403515 -0.0020790549   -0.1672627 0.0061717175   0.16456382    1.8853424   0.63968587 
 1269000    4.1561596     1.276834    2.8793256  -0.22180929   0.85131346    1.0072274   0.75429476   -1.2465374            1    1.6286625    2.2167669     2.259784   0.40943661   0.00315546 -0.046575835 -0.0098860853    1.4694685    1.4961847   0.70705078  0.066666667    1.4101252        1e-10 1.767627e-11    5.6573023    2.4880661    30.403515 0.0035469024  -0.18804394 0.0094446449   0.21318641    1.3087201    1.0989237 
 1270000     4.198756     1.279405    2.9193511  -0.21507616   0.85302762   0.99479431   0.76482583   -1.2465374            1    1.4623856    2.1048086    2.1211494    0.1611988 -0.0015606041 -0.013881379  -0.01267763     1.300969    1.3315431   0.70074348  0.066666667    1.4075188        1e-10 1.7518587e-11     5.708223    2.4833778    30.403515 -0.002263655  -0.18470919 -0.0040266402   0.18223702   0.17144574  -0.38441976 
 1271000    4.1753719    1.2798076    2.8955643  -0.21865227    0.8532961    1.0023553   0.76054967   -1.2465374            1    1.5424189     2.164829    2.1730266   0.28940115  0.010968947 -0.025334355   0.11559769    1.3819048     1.410582    0.7039558  0.066666667    1.4216108        1e-10 1.7598895e-11    5.6821749    2.4750373    30.403515 0.0026421322  -0.18448393 -0.010570856   0.19230227   0.21097748    1.7690898 
 1272000    4.1937295    1.2747193    2.9190101  -0.20830962   0.84990354   0.99494579   0.75965989   -1.2465374            1    1.6076561    2.2157874    2.2324389   0.37474195 -0.0068608818  0.084201106 -0.031637303    1.4473298    1.4767937    0.6996358  0.066666667    1.4190996        1e-10 1.7490895e-11    5.7172603    2.4774222    30.403515  0.011932698  -0.18163755 0.0090499928   0.17501077   -1.2715776    3.0167464 
 1273000    4.1660452    1.2672505    2.8987947  -0.21837221    0.8449238    1.0183477   0.73699176   -1.2465374            1     1.548999    2.1725106    2.1837601   0.29072624 -0.010536877  0.021549455 0.0058190629    1.3934568    1.4150586    0.7033174  0.066666667    1.3933107        1e-10 1.7582935e-11    5.6873326    2.4814557    30.403515 -0.0020577371  -0.18448121 -0.010137963   0.18800092   0.19320067    1.1341812 
 1274000    4.1617572    1.2723306    2.8894266  -0.21941545   0.84831086   0.99493366   0.75708192   -1.2465374            1    1.4647622    2.1311751     2.091716   0.17139555 -0.0067034525 -0.024662961 -0.016959053      1.30498    1.3339014   0.71093863  0.066666667    1.3910957        1e-10 1.7773466e-11    5.6263647    2.5104262    30.403515  -0.01331459  -0.18542551 -0.017609096    0.2021668   -0.9573055   0.86907727 
 1275000     4.184956    1.2783942    2.9065618  -0.22313777   0.85235369    1.0008122   0.75998144   -1.2465374            1    1.6964458     2.284827    2.2742327   0.53027774 -0.0081257787 -0.0018954795   0.01983208    1.5360516    1.5648118   0.71183911  0.066666667    1.3973284        1e-10 1.7795978e-11    5.6192473    2.5132117    30.403515 -0.002894075   -0.2111582 -0.003702767   0.20470925  -0.26869075    4.0165474 
 1276000    4.1472241    1.2712778    2.8759463  -0.22007473   0.84760892    1.0085237   0.74747305   -1.2465374            1    1.6280481    2.2562548    2.2181386   0.40975071 -0.0098900379  -0.10070448 -0.025169386    1.4702937    1.4953998   0.70913406  0.066666667    1.3878832        1e-10 1.7728351e-11    5.6406824    2.5053195    30.403515 0.00099647579   -0.1884354  -0.01127321   0.18470018    0.9832861    2.8213675 
 1277000    4.1570586    1.2574105     2.899648  -0.21643359   0.83836311    1.0011084   0.73708487   -1.2465374            1    1.6285767    2.2253946     2.242049   0.41828645 0.0004407278  -0.22824349  0.042625778    1.4730148    1.4969037    0.7116488  0.066666667    1.3694398        1e-10 1.779122e-11      5.62075    2.5099248    30.403515 0.0058506573  -0.20963185 -0.011600777   0.23288582   0.57232966    4.1408562 
 1278000    4.1567202    1.2700171    2.8867032  -0.21722494   0.84676835   0.99265705   0.75599663   -1.2465374            1    1.4926447    2.1589739    2.1238354   0.19512481 0.0028973129   -0.1571566 -0.074915513    1.3330915    1.3620833   0.70004809  0.066666667    1.3991397        1e-10 1.7501202e-11    5.7138932    2.4789669    30.403515  -0.01797634  -0.20546469 -0.00084649538   0.22135014   0.74832069   -3.3084778 
 1279000    4.1482687    1.2790736    2.8691951  -0.21954502   0.85280669    1.0059417   0.75752012   -1.2465374            1    1.5634701     2.181908    2.1900164   0.31848584 -0.0022612832 -0.058062298 -0.060126423    1.4035953    1.4311614   0.70235247  0.066666667    1.4161214        1e-10 1.7558812e-11    5.6951462     2.472588    30.403515 -0.0016865356  -0.20130884 0.0083193718   0.18352009  -0.74828489   0.87383397 
 1280000    4.1783657    1.2711638    2.9072019  -0.22323197   0.84753293    1.0063921   0.74867807   -1.2465374            1    1.5856591    2.1768083    2.1989717   0.38119731  0.016541987 -0.073144239  0.042259592    1.4276505    1.4532912   0.71266906  0.066666667    1.4177048        1e-10 1.7816726e-11    5.6127033    2.4840427    30.403515 -0.0071463556  -0.18811538 -0.00065716634   0.18292022   0.52294523    1.5650308 
 1281000    4.1782491     1.276026    2.9022231   -0.2102157   0.85077476    1.0100455   0.75166402   -1.2465374            1    1.5717304    2.2224098    2.1916558   0.30112566  -0.01617656 -0.089235294  0.048984296    1.4130916     1.438882   0.70686045  0.066666667    1.4195262        1e-10 1.7671511e-11    5.6588256    2.5019578    30.403515 -0.0040164382  -0.18480417 -0.0095783555   0.21434236    2.3668719    1.3292338 
 1282000    4.1609619    1.2588346    2.9021273  -0.21701311   0.83931256    1.0043263   0.73662076   -1.2465374            1    1.4702091    2.1422864    2.1077092   0.16063181 -0.034495407 -0.035582158 -0.00034364292    1.3147452    1.3381129   0.70041755  0.066666667    1.4468792        1e-10 1.7510439e-11    5.7108791    2.5025187    30.403515 0.0089914694  -0.18532684  0.007274098   0.20465994    1.6990468    1.2582635 
 1283000    4.1756101    1.2769008    2.8987094  -0.21541157   0.85135798    1.0060596    0.7550948   -1.2465374            1    1.6234619    2.2520848     2.236857   0.38144382  -0.01054487 -0.028789542 -0.025928914     1.464099    1.4911377   0.71132171  0.066666667    1.4231388        1e-10 1.7783043e-11    5.6233347    2.5093042    30.403515 0.0010677445  -0.19372421 -0.012177902   0.21019211    1.4776785    1.8455315 
 1284000    4.1749509    1.2827855    2.8921654  -0.21437267   0.85528154    1.0061816   0.76138822   -1.2465374            1    1.5764898    2.1831067    2.2033261   0.34303658 -0.0066617998 -0.068568505  0.048996679    1.4157987    1.4441496   0.70906043  0.066666667    1.4284117        1e-10 1.7726511e-11    5.6412681    2.4854756    30.403515 -0.011821711  -0.18390289  0.017628723   0.21582639    2.4706425    1.9171529 
 1285000    4.1870952    1.2753012    2.9117939   -0.2079256   0.85029152   0.99180837   0.76224496   -1.2465374            1    1.4501651    2.0965459     2.108733   0.14521657 -0.0015288621 -0.0078435609  0.018535375    1.2892932    1.3197154   0.69935158  0.066666667    1.4458534        1e-10 1.7483789e-11    5.7195839    2.4977399    30.403515 -0.0022406276  -0.18426935   0.01354999   0.17449593  0.043796879 -0.096241054 
 1286000    4.1569466    1.2465145    2.9104321  -0.21909535    0.8310983   0.99121766   0.73145528   -1.2465374            1    1.5530133    2.1697753    2.1916722   0.29759235  0.012802041 -0.062366933 0.0039067663    1.3986395    1.4226412    0.7011368  0.066666667    1.4284932        1e-10 1.752842e-11    5.7050207    2.4789767    30.403515 0.0075003942  -0.18203338 0.00075768734   0.20128782  -0.16813597    2.1284247 
 1287000    4.1666368    1.2731895    2.8934473  -0.22186499   0.84888352     1.015498   0.74519578   -1.2465374            1    1.6101078    2.2111744    2.2178752   0.40127364 -0.013757398 -0.034881521 0.0062422507    1.4528341    1.4765422   0.71170877  0.066666667    1.4129806        1e-10 1.7792719e-11    5.6202764    2.4973332    30.403515 -0.010213884  -0.16453061 0.0017844128   0.21318283   0.16791936    1.2200903 
 1288000    4.1305053    1.2610509    2.8694544  -0.23255311   0.84079024    1.0065215   0.73765153   -1.2465374            1    1.4666288    2.1180016    2.1059432   0.17594169 -0.00033003785 -0.071918829  -0.03970189    1.3109474    1.3342439   0.71507833  0.066666667    1.4040575        1e-10 1.7876958e-11    5.5937928    2.4861658    30.403515 0.0086294917  -0.18791593 -0.011776281   0.18699838   0.85907764   -1.7734438 
 1289000    4.1518927    1.2853269    2.8665659  -0.22379765   0.85697597    1.0077296   0.76317415   -1.2465374            1    1.7172136    2.3032692    2.3257183   0.52265328  0.015401287  0.048290455 0.0042733169    1.5561455    1.5846697   0.70654961  0.066666667    1.3891154        1e-10 1.766374e-11    5.6613151    2.4892719    30.403515  0.012647541  -0.19317347 0.0078541219   0.20192199   0.34690436    1.5685273 
 1290000    4.1785635    1.2743138    2.9042498  -0.22205244   0.84963313   0.98987298    0.7623823   -1.2465374            1    1.5851493    2.1953111    2.2075931   0.35254354 0.0033298158   0.10629963 0.0076391357    1.4242483     1.454954   0.71002618  0.066666667    1.3784124        1e-10 1.7750654e-11    5.6335951    2.5083956    30.403515 -0.0012144488  -0.18919817  0.010523941   0.16191021  -0.17085212    1.8374699 
 1291000    4.1424176    1.2708661    2.8715515  -0.21592855   0.84733444    0.9964406   0.75455769   -1.2465374            1    1.5720702    2.1911505    2.2071009   0.31795911 -0.011744549 -0.093771542 -0.0083972651    1.4128206    1.4410111   0.70655081  0.066666667    1.3582512        1e-10 1.766377e-11    5.6613055     2.485811    30.403515 -0.0056069127  -0.19047942 0.0088938515   0.14908681     1.257499    1.0120742 
 1292000    4.1749229     1.293125    2.8817979  -0.22236315   0.86217531    1.0178856   0.76528539   -1.2465374            1    1.5863455    2.2011609    2.2012708   0.35660485 0.00046228302  -0.14543548 -0.0020918952    1.4248319    1.4524659   0.70838109  0.066666667    1.3554995        1e-10 1.7709527e-11    5.6466781    2.5083633    30.403515  0.013884248  -0.18906959 -0.012712762   0.18478543    1.5370997    2.6956698 
 1293000    4.1680194    1.2812871    2.8867323  -0.22163562   0.85428252    1.0021221   0.76229631   -1.2465374            1    1.4785145     2.134109     2.109789   0.19164567 0.0075554795  -0.12809481  0.017526442    1.3176318    1.3467082   0.70236282  0.066666667    1.3450301        1e-10 1.755907e-11    5.6950623    2.4760466    30.403515 -0.013531548  -0.20266635 -2.4789219e-05   0.20492202    1.0768525    1.7479061 
 1294000    4.1741605    1.2809365     2.893224  -0.21884187   0.85404878    1.0064064   0.75924691   -1.2465374            1    1.5511874     2.171361    2.1857793   0.29642202 -0.015180584   -0.0809959  0.018226779    1.3909483    1.4188176    0.7044841  0.066666667    1.3422005        1e-10 1.7612102e-11    5.6779138       2.4887    30.403515 -0.0099253474  -0.20288188 -0.0051847475   0.19947176   0.36498488  -0.60151004 
 1295000    4.1742961    1.2556212    2.9186749  -0.21459102    0.8371701   0.98904059   0.74266886   -1.2465374            1    1.7550009    2.3283249    2.3269181   0.60975961 0.0086551131 -0.010566622  0.021696241    1.5982605    1.6249151   0.70791084  0.066666667    1.3479694        1e-10 1.7697771e-11    5.6504291     2.479172    30.403515 -0.012315588  -0.18275252 -0.0039838864   0.20621407   -1.0314234    4.3299628 
 1296000    4.1703926    1.2779999    2.8923927  -0.22346961    0.8520908    1.0053387   0.75673372   -1.2465374            1     1.577884    2.1919937    2.1952458   0.34641252  0.012568505  0.022879098 0.0047364021    1.4181752    1.4456546   0.71001162  0.066666667    1.3731693        1e-10 1.775029e-11    5.6337106    2.5014193    30.403515 -0.012130981  -0.15996511 0.0011862546    0.1931324   -1.2621524   0.79428433 
 1297000    4.1605118    1.2626429    2.8978689  -0.20615229   0.84185172   0.99254653   0.74808397   -1.2465374            1    1.6450458    2.2419533     2.269315   0.42386905 -0.0096129314  0.026119739 0.0047624296    1.4871625    1.5144989   0.70946483  0.066666667    1.3918336        1e-10 1.7736621e-11    5.6380525    2.4879017    30.403515 -0.0057087275  -0.17814469 0.0010644444   0.17855895   0.24458734  -0.40454299 
 1298000    4.1316971    1.2404163    2.8912808   -0.2226594   0.82703238    1.0017089   0.71831656   -1.2465374            1    1.5742886    2.1900569    2.1735969     0.359212  0.012717182 -0.044702352 -0.0008188914    1.4226878    1.4425366   0.71079634  0.066666667    1.3985496        1e-10 1.7769908e-11     5.627491     2.500427    30.403515 -0.0024986591  -0.19900637 0.0096275735   0.19621349  -0.71440913   0.53036437 
 1299000    4.1592428    1.2475425    2.9117002  -0.21761453   0.83178374   0.97927626   0.74000992   -1.2465374            1    1.5765769    2.1928615    2.2018884   0.33498066 -0.0012255732  0.032670344 -0.035801049    1.4203977    1.4477754   0.69967414  0.066666667    1.3796183        1e-10 1.7491853e-11    5.7169471    2.4816562    30.403515 -3.6813693e-05  -0.20480515 0.0013659679   0.18809169  -0.93771857    1.0686013 
 1300000    4.1432253    1.2479244    2.8953009  -0.20680301   0.83203834   0.97624982   0.74230931   -1.2465374            1    1.5994348    2.2146874    2.2211778   0.36243912  0.019736498 -0.030545483 -0.0093569065    1.4427703    1.4710314   0.70468757  0.066666667     1.366195        1e-10 1.7617189e-11    5.6762744    2.5056359    30.403515 0.00089594728  -0.19109875 -0.0027987313   0.15446394 -0.0003374519    2.7647029 
 1301000     4.155384    1.2887497    2.8666344  -0.22661574   0.85925809    1.0148941   0.76241399   -1.2465374            1     1.570626    2.1525904    2.2176139   0.34167362    0.0167434 -0.021441019 -0.014116502    1.4097184    1.4371398   0.70924428  0.066666667    1.3469175        1e-10 1.7731107e-11    5.6398058    2.4753975    30.403515 0.0097078476  -0.20257972 -0.016089619   0.17516697   0.60508178    2.2198405 
 1302000    4.1561837    1.2691496    2.8870341   -0.2216948   0.84619002   0.99639125   0.75273061   -1.2465374            1    1.5795491    2.1842929    2.2202221   0.33413218 -0.0016160727 -0.010938161 -0.0014046917    1.4206852    1.4484965   0.70635684  0.066666667    1.3590364        1e-10 1.7658921e-11    5.6628602    2.4768162    30.403515 0.00066671624  -0.18682229   0.01202393   0.18160863    0.4870785    2.2928606 
 1303000    4.1560178    1.2575623    2.8984555  -0.21911245   0.83846428   0.99890347   0.73862321   -1.2465374            1    1.5504134    2.1566905    2.1657291   0.32882053 -0.0013357358 0.0026667819 -0.012526604    1.3945269    1.4190304   0.70195465  0.066666667    1.3610995        1e-10 1.7548866e-11    5.6983738     2.482454    30.403515 -0.0062762236  -0.17708049 -0.0039027483   0.19866274    1.8528738    2.2429315 
 1304000    4.1685511    1.2822418    2.8863093  -0.22553542   0.85491907   0.99795109   0.76592905   -1.2465374            1    1.8529574    2.3998219    2.4069767   0.75207355 -0.0052634839 -0.020304622 -0.046388248    1.6913079    1.7216997   0.70936419  0.066666667    1.3578116        1e-10 1.7734105e-11    5.6388524    2.4932608    30.403515 0.0083063139  -0.19199599 -0.011205401    0.1804721   0.63334639    3.6203632 
 1305000    4.1645123    1.2693823    2.8951301  -0.21772633   0.84634511   0.99041797   0.75670496   -1.2465374            1    1.4803434    2.1169496    2.1166511    0.2074294  0.021964635   0.01232914 0.00095462025    1.3206407    1.3500765   0.70459905  0.066666667    1.3708932        1e-10 1.7614976e-11    5.6769875    2.4871807    30.403515 -0.0063757509  -0.23057189 -0.011483169   0.19144226   0.59426988    2.0951121 
 1306000    4.1355653    1.2518951    2.8836703  -0.21650064   0.83468572   0.98333999    0.7421884   -1.2465374            1    1.6349295    2.2747362     2.234535   0.39551741 0.0078755198  0.075268675 -0.024150898    1.4782905    1.5055936   0.69553963  0.066666667    1.3807711        1e-10 1.7388491e-11    5.7509304    2.4832081    30.403515 -0.012665802  -0.18191115 -0.00098008519    0.1820372   0.33155632 -0.079179709 
 1307000    4.1369752    1.2387947    2.8981805  -0.22531142    0.8259512   0.97228475   0.73489865   -1.2465374            1    1.5550607    2.1605901    2.1683278   0.33626429 0.0026268938 -0.0078294997 -0.0083285811    1.3999603    1.4271789   0.70296196  0.066666667     1.376132        1e-10 1.7574049e-11    5.6902083    2.4934699    30.403515 0.0036416017  -0.18962612 -0.011137765   0.17970449  -0.58559441   0.37965712 
 1308000    4.1404033    1.2655751    2.8748281  -0.22095288   0.84380676   0.99396122   0.75037609   -1.2465374            1    1.5684279    2.1813222    2.1937851   0.33017657 0.0035989447  0.036937808 -0.0057832716     1.410061     1.437695   0.71098619  0.066666667    1.3598879        1e-10 1.7774655e-11    5.6259883    2.4916412    30.403515 0.0049500258   -0.1956472  0.008087752   0.17700566  0.089324265    1.5139523 
 1309000    4.1136023    1.2517755    2.8618268   -0.2092422   0.83460602   0.97907321   0.74471809   -1.2465374            1     1.554351    2.2032702    2.2038188   0.25596391 0.0032730384 -0.072943246  0.048330747    1.3971781    1.4255762   0.70911627  0.066666667    1.3583881        1e-10 1.7727907e-11    5.6408239    2.4847649    30.403515 -0.005815233  -0.20835875 -0.010263116   0.20573407    0.3917862   -1.3896268 
 1310000    4.1153113    1.2561711    2.8591402  -0.23159234   0.83753674   0.97705067   0.75073621   -1.2465374            1    1.5829826    2.2086702    2.2115024   0.32877523 0.0074061044 -0.0036471673  0.086376028    1.4245396    1.4544739    0.7084401  0.066666667    1.3566057        1e-10 1.7711003e-11    5.6462078    2.4896451    30.403515 6.8650783e-05  -0.17268773 0.0029129369   0.14619131   -1.0568059    2.1891824 
 1311000    4.1306873      1.25059    2.8800973  -0.21729693   0.83381561   0.97402501     0.746581   -1.2465374            1    1.4976367    2.1511649    2.1245187   0.21722655 -0.018213424 -0.066303106  0.013882928    1.3400707    1.3695259   0.70828957  0.066666667    1.3508013        1e-10 1.7707239e-11    5.6474078    2.4972221    30.403515  0.012308718  -0.19570211 0.0069690917   0.19239422   0.43618626  -0.50379017 
 1312000    4.1501993    1.2553351    2.8948641  -0.22168572   0.83697937   0.98387353   0.74557934   -1.2465374            1    1.5814541    2.1978185    2.1998188   0.34672503 -0.0084475986  0.045046232  0.030214899    1.4240995     1.452048   0.71191367  0.066666667    1.3587745        1e-10 1.7797842e-11    5.6186588    2.5120713    30.403515 -0.0074561238  -0.16525459  0.013796006   0.21155327  -0.96990169    1.6729923 
 1313000    4.1524784    1.2735475    2.8789309  -0.22584487    0.8491222   0.99975603   0.75539372   -1.2465374            1    1.5971549    2.2273159    2.2026397   0.36150909 -0.023440514 -0.020051441 -0.046407355     1.437729    1.4656598   0.71243355  0.066666667    1.3464916        1e-10 1.7810839e-11    5.6145587    2.4884935    30.403515 -0.0094866013  -0.19761688 0.0056835895    0.1988385   0.30340551    1.7652839 
 1314000    4.1446582    1.2617495    2.8829087  -0.21626243   0.84125605   0.99566085   0.74517612   -1.2465374            1    1.6267117    2.2501275     2.228944   0.40106349 0.0050837617 0.0095239721  0.059123088    1.4694421    1.4957552   0.70985768  0.066666667    1.3493706        1e-10 1.7746442e-11    5.6349324    2.5007814    30.403515 -0.0046523215  -0.17677129 -0.0050379273   0.20316142   0.86964867    0.3109445 
 1315000    4.1489897    1.2792084    2.8697813  -0.22236116   0.85289655    1.0015212   0.76042084   -1.2465374            1    1.5697965     2.206652    2.1705735   0.33216386 -0.0032191594 0.0037717926  0.061653267    1.4093095    1.4380692   0.69839129  0.066666667    1.3339673        1e-10 1.7459782e-11    5.7274483     2.482064    30.403515  0.012901777  -0.16056496 0.0044765621   0.16346308  -0.49002328   -1.3602385 
 1316000    4.1648803    1.2768216    2.8880586  -0.21888033   0.85130522   0.99938522   0.75916866   -1.2465374            1    1.4871094    2.1135696     2.158444   0.18931455 0.0085617518 -0.056890256 -0.040916936    1.3268867    1.3556631   0.70890955  0.066666667    1.3466068        1e-10 1.7722739e-11    5.6424688    2.4880779    30.403515 -0.0072917871  -0.18763241 0.00098199805   0.18863933  -0.30152221   -2.4476221 
 1317000    4.1719419    1.2704048    2.9015372  -0.20651218   0.84702686    1.0077566    0.7470062   -1.2465374            1    1.6531149    2.2673396    2.2585959   0.43340932 -0.017101914    0.0817251  0.083753608    1.4954592    1.5205675     0.707892  0.066666667     1.349102        1e-10  1.76973e-11    5.6505795    2.4851634    30.403515   0.01397747  -0.14571344 -0.0030297375   0.17380292   -1.4254828    1.1692663 
 1318000     4.169448    1.2765877    2.8928604  -0.23101987   0.85114924   0.99002268   0.76475022   -1.2465374            1    1.5605982    2.1643187     2.177234   0.34024183 0.0080749627  0.085580326  -0.06963908    1.3991975    1.4303833   0.69903008  0.066666667    1.3452918        1e-10 1.7475752e-11    5.7222144    2.4862373    30.403515 -0.00065375286  -0.17446312 -0.00039707068   0.16391074   -2.0924483    3.4638101 
 1319000     4.152568    1.2666993    2.8858687  -0.21884538   0.84455627    1.0140694   0.73906135   -1.2465374            1    1.5743279    2.1960431    2.1968712   0.33006944 0.0050880689  0.095215533 -0.081247178    1.4183489    1.4409502   0.69913068  0.066666667     1.377031        1e-10 1.7478267e-11     5.721391    2.4901235    30.403515 0.00025298206  -0.18954242 0.0019426919   0.19940912   -1.4019463    1.0226386 
 1320000    4.1455362    1.2806798    2.8648564  -0.22839144   0.85387759    1.0209118   0.74992918   -1.2465374            1    1.4960649    2.1319033    2.1415364   0.21475509  0.016234069  0.045052092 -0.049103627    1.3377923    1.3617873   0.70870175  0.066666667    1.3908179        1e-10 1.7717544e-11    5.6441232    2.5013027    30.403515 -0.011444056  -0.17115802  0.013897232   0.19657964      0.36629   0.40079815 
 1321000    4.1451776    1.2629824    2.8821952   -0.2224616    0.8420781    1.0002435   0.74365471   -1.2465374            1    1.5300762    2.1751677    2.1555653   0.25949566 0.00073157993 -0.013246451  0.029372419    1.3731278     1.398517   0.70276502  0.066666667    1.3557267        1e-10 1.7569126e-11    5.6918029    2.4922541    30.403515  0.007288279  -0.23457183 -0.0055697394   0.19338762   0.91039455    1.5591597 
 1322000    4.1550811     1.262812    2.8922691  -0.20531254   0.84196445    1.0050151   0.74049653   -1.2465374            1    1.7172499    2.2963537    2.3006061   0.55478978 -0.00026847556  -0.01177135 -0.027978312     1.560968    1.5850631   0.70370491  0.066666667    1.3753237        1e-10 1.7592623e-11    5.6842008    2.4844661    30.403515  0.010798156  -0.21145698 0.0010235809   0.20881882   -1.2922524    3.1942735 
 1323000    4.1520008    1.2576501    2.8943507  -0.22283407   0.83852283   0.99852139   0.73895637   -1.2465374            1    1.4379131     2.094965    2.0966888    0.1220856 -0.0056813017  0.012086119 0.0010885286    1.2819563    1.3065804   0.70314534  0.066666667    1.3821817        1e-10 1.7578633e-11    5.6887243    2.4847594    30.403515  0.003163967  -0.18071407 -0.0046337804   0.15121694  -0.02757302    1.6424235 
 1324000    4.1806597    1.2757022    2.9049576  -0.21340546   0.85055884   0.99828401   0.75864329   -1.2465374            1    1.7888894    2.3587581    2.3570444   0.65086573 -0.00028384962   0.12769188 -8.250922e-05    1.6287776    1.6575879   0.70241035  0.066666667    1.3844392        1e-10 1.7560259e-11    5.6946769    2.5213692    30.403515    0.0098534  -0.16621264 0.00052768168   0.18655155   -1.2553175    1.6442697 
 1325000    4.1746195    1.2723664    2.9022531  -0.20943317   0.84833474    1.0026626   0.75230396   -1.2465374            1     1.451209    2.1015604    2.0933907    0.1586757 0.0036433747  0.074085075  0.093619212    1.2924351    1.3193316   0.70586158  0.066666667    1.3848844        1e-10 1.764654e-11    5.6668334     2.508325    30.403515 -0.0028157363  -0.19011002  0.004236403   0.19280611   -1.0392072   -0.5729598 
 1326000    4.1557791    1.2700187    2.8857604  -0.22176405   0.84676946    1.0174863   0.74052478   -1.2465374            1    1.5058069    2.1577182    2.1503918   0.20931072  0.012821355   0.12176114 -0.017997185     1.349519    1.3719798   0.70899599  0.066666667    1.3876481        1e-10  1.77249e-11    5.6417808    2.4973447    30.403515 -0.006514978  -0.18027675 0.0061657038   0.19920577  -0.73853633   -2.7440478 
 1327000     4.172684    1.2721641    2.9005199   -0.2145933   0.84819987    1.0249162   0.73821652   -1.2465374            1    1.6380991    2.2632333    2.2347618   0.41630233 0.0030994735 -0.013560215 -0.068359315    1.4822984    1.5032948   0.70404486  0.066666667    1.3850435        1e-10 1.7601121e-11    5.6814562    2.4831682    30.403515 0.00042511109  -0.18404843 -0.018784973   0.16595673   0.31322946  -0.56685223 
 1328000    4.1962303    1.2825489    2.9136814  -0.21979459   0.85512381    1.0130462   0.75685411   -1.2465374            1    1.5959067    2.2189693    2.2010243   0.36772651 -0.014165603 -0.014505054 -0.038725815    1.4361725    1.4626636   0.69898666  0.066666667    1.3861088        1e-10 1.7474666e-11    5.7225699    2.4762556    30.403515 -0.0037501873  -0.18674329 0.0016076055    0.2085624    -1.196092  -0.65328616 
 1329000    4.1760238    1.2661092    2.9099145   -0.2190373   0.84416285   0.99894386   0.74784897   -1.2465374            1    1.4233853    2.0801339    2.0712282   0.11879379  -0.02122124 -0.015300946  0.032002716    1.2655516     1.291997   0.70809612  0.066666667    1.3997652        1e-10 1.7702403e-11    5.6489506    2.5028098    30.403515 -0.0014376562  -0.21504754 -0.0078438943   0.17743383   -0.7132598  -0.82125849 
 1330000    4.1974117    1.2834881    2.9139236   -0.2163994   0.85575004    1.0077206   0.76118962   -1.2465374            1    1.6462624    2.2485888    2.2727667   0.41743174 -0.011955227 -0.050269668 -0.020984354    1.4856132    1.5137198   0.70417141  0.066666667    1.3986987        1e-10 1.7604285e-11    5.6804351    2.4919089    30.403515 -0.0051045508   -0.1978177 0.0033662021   0.18627019  -0.50968825    1.9874817 
 1331000    4.1827345    1.2783621    2.9043724  -0.21796463   0.85233232    1.0084759    0.7551707   -1.2465374            1    1.5440828    2.1579875    2.1822015   0.29205947  0.017929107  -0.06583485 -0.021830659    1.3847039    1.4114408   0.70442075  0.066666667    1.3947442        1e-10 1.7610519e-11    5.6784244    2.4863085    30.403515  0.006709103  -0.17704746  0.011159273   0.18038041    1.1290776     1.087484 
 1332000    4.1667782    1.2670578    2.8997204  -0.22473633    0.8447953    1.0046018   0.74534963   -1.2465374            1    1.5408046    2.1545579    2.1683879   0.29946782 -0.00020705944 -0.008675213  0.019346131    1.3834984    1.4086721   0.70033141  0.066666667    1.4044453        1e-10 1.7508285e-11    5.7115816    2.4817127    30.403515 -0.016167322  -0.20065988 -0.015730569   0.18981211  -0.46582394  -0.77722839 
 1333000    4.1648394    1.2721688    2.8926706  -0.21079147   0.84820298    0.9989067   0.75443077   -1.2465374            1    1.6940795    2.3067138    2.2791837    0.4963411  0.004287289  0.032784219  0.063648113    1.5348568    1.5626961    0.7035615  0.066666667    1.3908671        1e-10 1.7589038e-11    5.6853594      2.47885    30.403515 0.00099087385  -0.16288921 0.0095493173   0.19513396    1.0071363   0.31008092 
 1334000    4.1833826     1.280937    2.9024456   -0.2169725    0.8540491    1.0002986   0.76305376   -1.2465374            1    1.4786658     2.107923    2.1067388   0.22133547 -0.0014312106 -0.052363025  0.067510806    1.3176231    1.3470993   0.71154618  0.066666667    1.3724269        1e-10 1.7788655e-11    5.6215606    2.4898424    30.403515 -0.0056417442  -0.21257938 -0.011473406   0.20376596    1.9746455   -2.2029945 
 1335000    4.1460492    1.2572654    2.8887838  -0.21405347   0.83826633    1.0000101   0.73761222   -1.2465374            1    1.5769824    2.1944185    2.2084323   0.32809649  0.025434091 -0.074826854  0.027339436    1.4213093    1.4454539   0.71016613  0.066666667    1.3966166        1e-10 1.7754153e-11    5.6324849    2.4963762    30.403515   0.00870516  -0.14927809 0.0078652555   0.18523418   0.78856526    1.2365676 
 1336000    4.1415387    1.2564951    2.8850436  -0.23101992   0.83775272    1.0063706   0.73281452   -1.2465374            1    1.6957153    2.2943403    2.2660389   0.52676679 -0.010259954  0.030532043 -0.027266714    1.5410547    1.5633502   0.70599653  0.066666667    1.4228692        1e-10 1.7649913e-11    5.6657503    2.4788762    30.403515 0.0014476437  -0.21033489  0.003446024     0.171687    -1.715238    -0.655644 
 1337000    4.1617297    1.2582391    2.9034906  -0.21949473   0.83891554   0.99621113   0.74103365   -1.2465374            1     1.573734    2.1801358    2.1796568   0.36140935  0.010533253 -0.015614416 -0.0044590566    1.4173387    1.4427051   0.70272565  0.066666667    1.4096699        1e-10 1.7568141e-11    5.6921218    2.4901683    30.403515 0.0033047002  -0.20200161 0.0051755829   0.18284153   0.13201586   0.83771817 
 1338000     4.174303    1.2755883    2.8987147  -0.20832353    0.8504829   0.98604469    0.7661476   -1.2465374            1    1.6241178    2.2136886     2.254932   0.40373277 -0.0013640201  0.021027076 0.0033402516    1.4624222    1.4944261   0.70349008  0.066666667    1.4137654        1e-10 1.7587252e-11    5.6859366    2.5014039    30.403515 0.0032160514   -0.2044805 -0.0065837505   0.17046378   -1.4089177  -0.18639626 
 1339000    4.1532414    1.2612877    2.8919537  -0.21971212   0.84094815    1.0073688   0.73737983   -1.2465374            1    1.5789086    2.1985314    2.1965086    0.3416859 -0.001064215   0.02906304 -0.068470307    1.4232845    1.4464123   0.71516559  0.066666667    1.4324818        1e-10 1.787914e-11    5.5931102    2.5103242    30.403515  0.019767467  -0.17096617  0.008318547   0.21623057   -2.1121519    2.4973403 
 1340000    4.1760117     1.269265    2.9067467  -0.22498964   0.84626692    1.0102964    0.7441897   -1.2465374            1    1.5604661    2.1963548    2.1660019   0.31904179 -0.0068519358 -0.063064796  0.047606464    1.4034048    1.4275847    0.7088957  0.066666667    1.4294653        1e-10 1.7722392e-11     5.642579    2.4826865    30.403515 0.00036968761    -0.227808 0.0045734703   0.19503134   -1.0669523    1.8491819 
 1341000    4.1328919    1.2441704    2.8887215  -0.20788122   0.82953542    1.0119065   0.71602475   -1.2465374            1     1.685241    2.2715599    2.2882267    0.4959365 -0.0033427099 -0.012302577 0.0056912182    1.5341239    1.5521478    0.7016157  0.066666667    1.4194792        1e-10 1.7540393e-11    5.7011267    2.5101978    30.403515 0.0052631926   -0.2022339  0.011610943   0.16186469   -1.1906112   0.89496281 
 1342000    4.1533766    1.2606355     2.892741  -0.21900922   0.84051334    1.0141234   0.73246447   -1.2465374            1    1.5519189    2.1838018    2.1606148   0.31134002 -0.0014452144 -0.061373515 -0.0032398774    1.3973321    1.4185341   0.70461221  0.066666667    1.4412242        1e-10 1.7615305e-11    5.6768815    2.5020685    30.403515   0.01531742  -0.21598354 -0.011851393   0.16928858    1.0394469   -0.1467851 
 1343000    4.1689857    1.2619718    2.9070139   -0.2149283   0.84140427   0.99175603   0.74785023   -1.2465374            1    1.7169318    2.2972288    2.2832801   0.57028633 0.0083464844 -0.0042859031 -0.029659021    1.5590979    1.5864889   0.71241679  0.066666667    1.4367189        1e-10 1.781042e-11    5.6146908      2.49268    30.403515 -0.0022071929  -0.19926005 0.0060568193   0.22191378  -0.72619806   0.84364085 
 1344000    4.1575152    1.2776515    2.8798636   -0.2295372   0.85185855    1.0189898   0.74784928   -1.2465374            1     1.519139    2.1523379    2.1589541   0.24612502 -0.004462451 -0.0087063943 -0.052295433    1.3613053    1.3851141   0.71057377  0.066666667    1.4040909        1e-10 1.7764344e-11    5.6292536    2.4854278    30.403515 -0.017714181  -0.19374503 0.0039579395   0.22267594  -0.07266619   0.49323546 
 1345000    4.1896173    1.2844577    2.9051596  -0.21362246   0.85639647   0.99332953   0.77120761   -1.2465374            1    1.5717133    2.1894807    2.2128748   0.31278428  0.013674872 -0.010942661  0.044661922    1.4089498    1.4410634   0.70003569  0.066666667    1.4139984        1e-10 1.7500892e-11    5.7139944    2.4864691    30.403515 0.0090830565  -0.17797726 -0.010967888   0.14299381  -0.21400822   -1.5048442 
 1346000    4.1422927    1.2584432    2.8838495  -0.22288599   0.83905161   0.98808536   0.74631855   -1.2465374            1    1.5912774    2.2122356    2.1809309   0.38066579 -0.023475413  0.028027792 -0.016879498    1.4337668    1.4613173   0.69839322  0.066666667    1.4016266        1e-10 1.745983e-11    5.7274325      2.48882    30.403515  -0.01430479   -0.1884614 0.0092013681    0.1688386   -3.0347315   0.35728889 
 1347000    4.1303634    1.2606527    2.8697107    -0.221657   0.84052479    1.0095317   0.73534463   -1.2465374            1      1.53279    2.1557337    2.1867245   0.25591169 0.0081568705  0.042698768  0.024014425    1.3775954    1.4000091   0.71546017  0.066666667    1.4130594        1e-10 1.7886504e-11    5.5908073    2.5071091    30.403515  0.003489165  -0.23181965 -0.00011197136   0.24502157   0.20508887  -0.33615577 
 1348000    4.1701085    1.2733156     2.896793  -0.22488544   0.84896761      1.01071    0.7483162   -1.2465374            1    1.6202606    2.2204169    2.2283715   0.41199332 0.0021410112 -0.030777393  0.017597084    1.4623283    1.4873247   0.71101478  0.066666667    1.3970579        1e-10 1.777537e-11    5.6257621    2.4995913    30.403515 0.0013711988  -0.19327165 0.0091048592   0.20577658    2.1168234   0.95831164 
 1349000    4.1626736    1.2637721    2.8989015  -0.21269119   0.84260462   0.99048874   0.75058863   -1.2465374            1    1.5011772    2.1426915    2.1510291   0.20981118  0.010642413  0.027479026 -0.0095006948    1.3427654     1.370901    0.6925308  0.066666667     1.409672        1e-10 1.731327e-11    5.7759164    2.4885265    30.403515 0.0083798411   -0.2024161 0.0023592221   0.19211035   0.12242996    2.0143576 
 1350000    4.1460654     1.277223    2.8688423  -0.22868207   0.85157284    1.0060435   0.75545365   -1.2465374            1     1.547794    2.1632412    2.1577074   0.32243336  0.014351967  0.020836013  0.066762639    1.3883554    1.4154719   0.70277866  0.066666667     1.408347        1e-10 1.7569467e-11    5.6916924    2.4770654    30.403515 0.0018106221  -0.22963052 0.0057840915     0.184833   0.79034737    2.9854874 
 1351000    4.1551992      1.27871    2.8764892  -0.21769927   0.85256424   0.99977869   0.76096731   -1.2465374            1    1.6571788     2.247806    2.2682387   0.45549154 -0.0091077258  0.069650217 0.0052788208    1.4965765    1.5256807   0.71558156  0.066666667    1.4060788        1e-10 1.7889539e-11     5.589859    2.5054468    30.403515 -0.012319308  -0.21467556 -0.001541591   0.21597776   -1.1215948     1.168153 
 1352000    4.1455339    1.2482875    2.8972464   -0.2105222   0.83228041   0.99535318   0.73079701   -1.2465374            1     1.525423    2.1434346    2.1542894   0.27854507  0.016380391  0.060464367 -0.044795232    1.3711882     1.394507   0.70697539  0.066666667    1.3956453        1e-10 1.7674385e-11    5.6579056    2.5051562    30.403515 0.0090512029  -0.18948472 0.0043657137   0.17156147 -0.053829991     4.308566 
 1353000    4.1808208    1.2780281    2.9027927  -0.22123456   0.85210959   0.99137285   0.76546779   -1.2465374            1    1.6642126    2.2574125    2.2487484   0.48647679 -0.020056511 -0.058126748 0.0025177061    1.5026605    1.5338201    0.7078943  0.066666667    1.4101415        1e-10 1.7697358e-11    5.6505611    2.4933389    30.403515  0.011422304  -0.18202637 0.00097626514   0.18191669  -0.74935693    2.7834618 
 1354000    4.1656397    1.2719897    2.8936501  -0.21026768   0.84808356   0.99069674   0.75935339   -1.2465374            1    1.5982733    2.2037677    2.2046799   0.38637218 0.0079783695 -0.093144022 -0.022323134    1.4380116    1.4679697   0.71088951  0.066666667    1.4004135        1e-10 1.7772238e-11    5.6267535     2.495226    30.403515 0.0012097429   -0.1963736 0.0037604046   0.19362515  -0.67199342   0.22716619 
 1355000     4.177621    1.2692127    2.9084083  -0.21240414   0.84623205    1.0009912   0.74993212   -1.2465374            1    1.6232407    2.2424523    2.2332889    0.3939809 -0.007552015  -0.13008762 0.0053367149    1.4649674    1.4915831   0.70230139  0.066666667    1.4040243        1e-10 1.7557535e-11    5.6955604    2.5057834    30.403515 -0.0077017155  -0.16533492 0.0037299235   0.16912501  0.012212137    3.0345894 
 1356000    4.1657952    1.2656184    2.9001768  -0.20832143   0.84383557   0.99676041   0.74867841   -1.2465374            1    1.6108609    2.2410781    2.2119153   0.37958927 -0.021233308 -0.053649359 0.00033681462    1.4528522    1.4797598   0.69917661  0.066666667    1.3895132        1e-10 1.7479415e-11    5.7210151    2.4913652    30.403515 -0.0096873164  -0.19175424  0.010045083   0.17901744   -1.3540216    1.1286947 
 1357000    4.1660119    1.2700833    2.8959286  -0.21940971   0.84681254   0.99845882   0.75245269   -1.2465374            1    1.5665653     2.190788    2.1844355   0.32447242  0.010885834  -0.02589172 -0.013430808      1.40776    1.4352408   0.70804851  0.066666667    1.3994078        1e-10 1.7701213e-11    5.6493304    2.4776754    30.403515 -0.0012812571  -0.19142408 0.0033526491   0.18854553   -1.4649817   0.47844332 
 1358000    4.1806436     1.294393    2.8862506  -0.21006322   0.86302068   0.99868252    0.7786252   -1.2465374            1     1.537818    2.1811849    2.1542833   0.27798577  0.010941357 -0.061933674  0.065964707     1.373489    1.4064641   0.70796885  0.066666667    1.3873896        1e-10 1.7699221e-11    5.6499661    2.5048562    30.403515 0.0035122543   -0.1982997 -0.016820401   0.18679159   0.99307427    3.8709503 
 1359000    4.1950974    1.2784691    2.9166283  -0.21064326   0.85240364    1.0049512   0.75748306   -1.2465374            1    1.6060343    2.2288036    2.2117363   0.37756311 -0.0054678822 -0.037844143 -0.014409518    1.4461674    1.4738559   0.70084212  0.066666667    1.3833573        1e-10 1.7521053e-11    5.7074195    2.4892556    30.403515 0.0093832966  -0.18126047 0.0030857649   0.18646866   0.37679952  -0.65114681 
 1360000    4.1791148     1.269553    2.9095617  -0.21758229   0.84645898    1.0118139   0.74355581   -1.2465374            1    1.5781702    2.1844521    2.2196632   0.33039525 -0.0071611673 -0.004593798  -0.01193092    1.4212426    1.4450892   0.70307209  0.066666667    1.3996383        1e-10 1.7576802e-11     5.689317    2.4814998    30.403515 -0.0098088194  -0.20537718 -0.0078274313   0.19266834  -0.42595471    1.1625784 
 1361000    4.1944921    1.2974936    2.8969985  -0.21154112   0.86508803    1.0208035   0.76819538   -1.2465374            1    1.6043886    2.2285054    2.2246589   0.36000143 0.0052094622  -0.15462784  0.022767622    1.4422608    1.4701251   0.70261737  0.066666667    1.4138508        1e-10 1.7565434e-11     5.692999    2.4865565    30.403515 -0.0055670384  -0.20738924 -0.010722503   0.18326245    2.3321556   0.67278192 
 1362000    4.1706507    1.2679212    2.9027294  -0.22282313   0.84537099   0.99595958   0.75167003   -1.2465374            1    1.5809643    2.1784252    2.1957926   0.36867505 -0.0098789185   0.11544017 -0.020849694    1.4223242    1.4499685    0.7018164  0.066666667    1.4321346        1e-10 1.754541e-11    5.6994963    2.5011336    30.403515  0.013560359  -0.23026328 0.0015499447   0.16825479  -0.47437361    2.6454623 
 1363000    4.1533996    1.2715774    2.8818222  -0.21993637    0.8478087    1.0099522    0.7469071   -1.2465374            1    1.5749109    2.2093612    2.1880416   0.32732991 0.0063821923  0.094956481  0.049621925     1.417276    1.4420747   0.69924277  0.066666667    1.4289586        1e-10 1.7481069e-11    5.7204739    2.4840938    30.403515 0.0081556122  -0.17619742  0.009896185   0.18741332  0.081174151   0.87747873 
 1364000    4.1686648    1.2736869    2.8949779  -0.21692677   0.84921518    1.0099231   0.74920846   -1.2465374            1    1.6015265    2.2153849    2.1956883   0.39350623 0.0097009656   0.13873527 -0.0017063382    1.4434059    1.4686941   0.71059919  0.066666667    1.4172961        1e-10 1.776498e-11    5.6290523     2.505783    30.403515 0.0015670333  -0.21378979 0.0049134139   0.20217746   -0.9733939    1.1943932 
 1365000    4.1816739    1.2671768     2.914497   -0.2200012   0.84487467    1.0057224   0.74478011   -1.2465374            1    1.6482968    2.2233436    2.2553275   0.46621924 -0.0016890256   0.05833406  0.029257601    1.4911108     1.516017   0.70632222  0.066666667    1.4043632        1e-10 1.7658055e-11    5.6631377    2.4946264    30.403515 0.0095047933  -0.15897097 -0.003229196   0.20081396  -0.60099051    2.4398965 
 1366000    4.1649325    1.2568737    2.9080588   -0.2153263   0.83800516   0.98936094   0.74382483   -1.2465374            1    1.6904099    2.2532707    2.3102454   0.50771358 0.0019080997   0.15605006  0.052159376    1.5334255     1.560282   0.70207502  0.066666667     1.388131        1e-10 1.7551875e-11    5.6973969    2.4975506    30.403515 -0.0038408194   -0.1974316 0.0022437967   0.19183562  -0.35939712    3.7039522 
 1367000    4.1555211    1.2649987    2.8905224  -0.22315551    0.8434224    1.0103094   0.73956392   -1.2465374            1    1.6373956    2.2500737    2.2194656   0.44264739 0.0090210121   0.11162946   0.03395351    1.4813105    1.5045124   0.70619967  0.066666667    1.3982546        1e-10 1.7654992e-11    5.6641205    2.4859771    30.403515 0.0059089081  -0.22155628  0.018487603   0.20171659  -0.72835847    1.1432345 
 1368000    4.1414553     1.257738    2.8837173  -0.20707447   0.83858146    1.0064199   0.73412918   -1.2465374            1    1.7226354    2.3185891    2.2991809   0.55013631 7.6765219e-05 -0.056654752    0.0130065    1.5676973    1.5902639    0.7072723  0.066666667    1.3860581        1e-10 1.7681807e-11    5.6555304    2.4994741    30.403515  0.015420276  -0.20167012     0.011062   0.19109416    1.0296956  -0.44121263 
 1369000     4.135638    1.2615954    2.8740426  -0.21696281   0.84115329   0.99792298   0.74359953   -1.2465374            1    1.4849279    2.1418298    2.1378321   0.17512186 -0.014342306 -0.069646635 0.0089328215    1.3279911    1.3536739   0.69643504  0.066666667    1.3832039        1e-10 1.7410876e-11    5.7435364    2.4848816    30.403515 0.0064120723  -0.16810421 -0.0011238363   0.17837638    1.8656098   0.81647576 
 1370000    4.1647437    1.2704195    2.8943242  -0.22180556   0.84703667    1.0080643   0.74683034   -1.2465374            1    1.6990498     2.274784    2.2911361   0.53122935 -0.010617286 -0.00082789518 -0.0048383728    1.5414311    1.5664619   0.69956398  0.066666667    1.3791182        1e-10 1.7489099e-11    5.7178473    2.4805181    30.403515 0.0017117311  -0.20634272 -0.0051791633   0.19798039 -0.015093099    1.5793503 
 1371000    4.1740133     1.277059    2.8969543  -0.22239128   0.85146348      1.01884    0.7473013   -1.2465374            1    1.5728452    2.1938939    2.1927957   0.33184601  0.020095589   0.04378992  0.059757345    1.4151271      1.43884   0.71037344  0.066666667    1.3904124        1e-10 1.7759336e-11    5.6308412    2.4954916    30.403515 -0.0065122556  -0.20797669 0.00045943047   0.18315388  -0.19950903   0.20063427 
 1372000     4.148056    1.2681831    2.8798729  -0.21292017   0.84554559    1.0009788    0.7488255   -1.2465374            1    1.4228683    2.0949195    2.0871244   0.08656086 -0.0051167561  0.093594603  0.037651713    1.2648285    1.2912123   0.69799603  0.066666667     1.363416        1e-10 1.7449901e-11    5.7306916    2.4899222    30.403515 0.0010366532    -0.171457 -0.0069112896   0.18010396   -1.2086414   0.06005056 
 1373000    4.1509517    1.2728608     2.878091  -0.22090747   0.84866437    1.0082292   0.74936996   -1.2465374            1     1.577986    2.1703921    2.2185215   0.34504437 -0.020585474  0.011686637 -0.052123571    1.4198314    1.4453764   0.70306986  0.066666667    1.3920879        1e-10 1.7576747e-11     5.689335    2.4825602    30.403515  0.008671481  -0.20245237 -0.0062121086   0.17511855   -1.7293056   0.13396495 
 1374000    4.1851146     1.271701    2.9134136  -0.21923628   0.84789112    1.0095801   0.74727281   -1.2465374            1    1.5330132    2.1583311    2.1615262   0.27918238 -0.0089858364 -0.011021496 -0.040891485    1.3753012     1.400226   0.71303965  0.066666667    1.3957858        1e-10 1.7825991e-11    5.6097862    2.5062874    30.403515 -0.0063163373  -0.17854647 -0.00015831293   0.24120818 -0.012163475    2.4755702 
 1375000    4.1734893    1.2881065    2.8853828  -0.21730025    0.8588293   0.99277964   0.77549969   -1.2465374            1    1.6568445     2.263816     2.240808   0.46590954  -0.01259663 0.0023399688  0.011988105    1.4931752     1.526267   0.69875235  0.066666667    1.4170673        1e-10 1.7468809e-11    5.7244888     2.479619    30.403515 0.0079948684  -0.16051242   0.02408835   0.19035499  -0.72078951    4.2901784 
 1376000    4.1722932    1.2747301    2.8975631  -0.21448228   0.84991071   0.99547046   0.75934454   -1.2465374            1    1.5135087     2.141719    2.1686228   0.23018432 -0.0087661804 -0.046721473  0.065517192    1.3532489    1.3825773   0.70220066  0.066666667    1.4044252        1e-10 1.7555016e-11    5.6963775    2.4642635    30.403515 -0.010932826  -0.14939811 0.0056874865   0.17255271    1.5631687    1.8379651 
 1377000    4.1769634    1.2526834      2.92428  -0.21864391   0.83521137   0.98430472    0.7424405   -1.2465374            1     1.485458    2.1146685    2.1164668   0.22523881 0.0053678935 -0.018512443 -0.0087479675    1.3287659    1.3559952   0.70841952  0.066666667    1.4154995        1e-10 1.7710488e-11    5.6463718    2.4829685    30.403515 0.00010517986  -0.19649172 0.0081140603   0.18513942    2.3433578    2.3679074 
 1378000    4.1458334    1.2738758    2.8719576  -0.22024444    0.8493411    1.0182416   0.74422877   -1.2465374            1    1.4987683    2.1471799    2.1599608   0.18916411 -0.0066290105 -0.037009485 -0.050110928    1.3416987    1.3648418   0.71189326  0.066666667    1.3940027        1e-10 1.7797332e-11    5.6188199    2.5228171    30.403515 -0.0016312587  -0.18445514  0.012385954   0.18427573    2.1989446   -0.1220906 
 1379000    4.1714438    1.2714728     2.899971  -0.21984597   0.84773894    1.0128137   0.74501055   -1.2465374            1    1.5885396    2.1760669    2.2231917   0.36636016 0.0076025944 -0.057580002 -0.0097578226     1.431305     1.455327    0.7060175  0.066666667    1.3883366        1e-10 1.7650437e-11    5.6655819    2.4861011    30.403515 -0.019293861  -0.19150623 0.0018605605   0.22852034    1.1364885  -0.54522876 
 1380000    4.1815776    1.2939589    2.8876187  -0.21785231   0.86273125    1.0185865   0.76575111   -1.2465374            1    1.4604547    2.1058242    2.1029454   0.17259455 -0.0026906892    0.0571425 0.0037285125    1.2988428    1.3264829   0.70139384  0.066666667    1.4189448        1e-10 1.7534846e-11    5.7029301    2.4772594    30.403515 0.0074726154  -0.20469955 -0.0020541631     0.226902  -0.56586357   -1.6708022 
 1381000    4.1354568    1.2557112    2.8797455  -0.21689126   0.83723013   0.99825257   0.73702536   -1.2465374            1     1.680231    2.2676706    2.2936812   0.47934119 -0.0051109859 -0.0026528639  0.029061007    1.5246817    1.5489337   0.71766075  0.066666667     1.401764        1e-10 1.7941519e-11    5.5736642    2.4919747    30.403515 -0.0027092015  -0.20107585   0.01336595   0.19732588   0.11218006    1.6326308 
 1382000    4.1487711     1.264106    2.8846651  -0.22177468   0.84282723     1.008099   0.73997523   -1.2465374            1    1.5779342     2.186096    2.2082054   0.33950114  0.016494308  0.022767327  0.066653655    1.4217623    1.4453417   0.71731449  0.066666667    1.4028164        1e-10 1.7932862e-11    5.5763547    2.4942187    30.403515 -0.0048008636  -0.17605085 0.0095171917   0.18206723  -0.55547762    3.2530125 
 1383000    4.1603283    1.2624139    2.8979145  -0.21214711   0.84169901   0.99448602   0.74662737   -1.2465374            1    1.5753073    2.2042614    2.1998593   0.32180104  0.006948783 -0.033565638 -0.0067392289    1.4177314    1.4445053   0.71105319  0.066666667    1.4221837        1e-10 1.777633e-11    5.6254582    2.5218449    30.403515  0.017215756  -0.14917422 0.00010878154   0.21678609  -0.54110008 -0.070720919 
 1384000     4.158062    1.2652019      2.89286   -0.2172203   0.84355792   0.99032802   0.75223635   -1.2465374            1    1.5852537    2.1709711    2.2053318   0.37945805 -0.0042756277 -0.020556842  0.062607378    1.4264941    1.4549986   0.70417704  0.066666667    1.4192615        1e-10 1.7604426e-11    5.6803897    2.4792234    30.403515 -0.010266367  -0.20867885 -0.021706856   0.19867456  -0.83383922   0.20247205 
 1385000    4.1593386    1.2765354    2.8828033  -0.21760455   0.85111434    1.0022758   0.75705736   -1.2465374            1    1.7174949    2.3211191    2.2994625   0.53190321 -0.0070634266 -0.0044318636  0.026967205    1.5577179    1.5856684    0.7096204  0.066666667      1.39817        1e-10 1.774051e-11    5.6368165     2.493357    30.403515 -0.017555855  -0.20822663 -0.0011181083   0.19963279  -0.52287275    1.6324948 
 1386000    4.2202753    1.2942376    2.9260378  -0.20774923   0.86291709   0.99698142   0.77951715   -1.2465374            1    1.5021911    2.1596866    2.1141024   0.23278441 0.0044267081  0.095392432  0.019698613    1.3376739    1.3710609   0.71062126  0.066666667    1.4110193        1e-10 1.7765531e-11    5.6288775    2.5010789    30.403515 0.0053566872  -0.19171029 -0.0075632307   0.22135528  -0.98134923   -2.5557487 
 1387000    4.1747626    1.2881896     2.886573  -0.22055974   0.85888468    1.0023477   0.76962677   -1.2465374            1    1.5816258    2.1996342    2.1885687   0.35667448 -0.0033262761   0.13103011  0.030406901    1.4191959    1.4497898   0.70261753  0.066666667    1.4186428        1e-10 1.7565438e-11    5.6929977    2.5034279    30.403515  0.013893531  -0.20467994 0.0013686032   0.21955097   0.55880472    3.1584994 
 1388000    4.1684335    1.2738597    2.8945738  -0.22462428   0.84933035    1.0096445   0.74956907   -1.2465374            1    1.6076084    2.2119852     2.227586   0.38325411 -0.017861711   0.11960937 -0.014487891    1.4494118    1.4748127   0.69455438  0.066666667    1.3889622        1e-10 1.736386e-11    5.7590883    2.4780933    30.403515 0.0059137302  -0.20356593 0.0062398912   0.17670924   0.95380964    1.0808157 
 1389000    4.1798244    1.2667693    2.9130551  -0.21458997   0.84460294   0.99858134   0.74878932   -1.2465374            1    1.6013181    2.2215695    2.2017193   0.38066563 -0.00078040103 -0.013219109  0.011984962     1.443286    1.4699775   0.70548075  0.066666667    1.3799323        1e-10 1.7637019e-11    5.6698925    2.4889786    30.403515  0.025255773  -0.19801998 0.0095242073   0.21133897    1.7310961    1.2797134 
 1390000     4.175667    1.2709755    2.9046914  -0.22574241    0.8474074   0.98719437   0.76043842   -1.2465374            1    1.5691036    2.2130597    2.1976005   0.29665054 0.0069433706 -0.081942895 -0.054073003     1.408613    1.4392607   0.70393295  0.066666667    1.3973939        1e-10 1.7598324e-11    5.6823593    2.4830444    30.403515 -0.0087595806  -0.18645231  0.015059438   0.19842641  -0.57262368    2.3179048 
 1391000    4.1647284    1.2701943    2.8945341  -0.22420385   0.84688654    1.0006529   0.75120549   -1.2465374            1    1.5824615     2.209468    2.1924654   0.34545101 0.0050962292   -0.1372251  0.014574814    1.4239194    1.4508484    0.7051164  0.066666667    1.3685877        1e-10 1.762791e-11    5.6728223    2.5072221    30.403515 -0.011346501  -0.20376416 0.00064036145   0.19685739  -0.70260235    1.1737134 
 1392000    4.1738368    1.2875644    2.8862724  -0.22823852    0.8584678    1.0224013   0.75645253   -1.2465374            1    1.5393831     2.179736    2.1614947   0.27691857  0.007149699 -0.048750901  0.036443853    1.3797337    1.4049095   0.70273195  0.066666667    1.3661055        1e-10 1.7568299e-11    5.6920708     2.485664    30.403515 -0.0017934979  -0.19047358 0.0088633718   0.18484061   -1.0410111     1.310872 
 1393000    4.1733331    1.2803814    2.8929517  -0.22646819   0.85367866    1.0020031   0.76139019   -1.2465374            1     1.576811    2.1714219    2.2135889    0.3454223 -0.011139123 -0.048273866 -0.033387902    1.4161195    1.4450204   0.70226692  0.066666667    1.3729795        1e-10 1.7556673e-11      5.69584     2.479925    30.403515 -0.014907645  -0.17939323 0.0032248803   0.18882762  -0.69047787    4.5704133 
 1394000    4.1342974    1.2485295    2.8857679  -0.21054259   0.83244179   0.99839383   0.72916405   -1.2465374            1     1.706537     2.300427    2.2887915    0.5303925 0.0073760778 -0.054913999  0.062591108    1.5526468     1.575221   0.70024603  0.066666667    1.3612953        1e-10 1.7506151e-11     5.712278    2.4943738    30.403515 -0.0039914495  -0.20508455 0.00083200003    0.1849551  -0.70468409    4.1816631 
 1395000    4.1540943    1.2595982    2.8944961  -0.21535811   0.83982168    1.0076015   0.73540612   -1.2465374            1    1.6331289    2.2141688    2.2651664   0.42005136   0.01733218  -0.01479024 -0.022347492    1.4779213    1.5006019   0.70606673  0.066666667    1.3637198        1e-10 1.7651668e-11    5.6651869    2.4896438    30.403515  0.016826978  -0.17905703 -6.0514905e-05   0.18402118   0.12633682    3.2502369 
 1396000    4.1618865    1.2654324     2.896454  -0.22494273   0.84371159    1.0032977   0.74440308   -1.2465374            1    1.4963714    2.1237174    2.1380978     0.227299  0.013295733  0.022897127 0.0088084557     1.339265    1.3644105   0.70923608  0.066666667     1.357621        1e-10 1.7730902e-11     5.639871    2.4838848    30.403515 -0.010687704  -0.20992686 0.00045518851   0.21827034   0.41078748   -2.3952717 
 1397000    4.1559211    1.2617022     2.894219  -0.20583439   0.84122449    1.0041211   0.73985244   -1.2465374            1    1.6664446    2.2728916    2.2734167   0.45302542 -0.0015829072  0.054870261 -0.028219077    1.5102986    1.5343754   0.70939401  0.066666667    1.3366755        1e-10 1.773485e-11    5.6386154    2.4992821    30.403515 -5.1660972e-05  -0.20380964 0.0038069944   0.19260557   -1.2794148   0.26325973 
 1398000    4.1528935    1.2636087    2.8892848  -0.21627708   0.84249567    1.0179645   0.73328877   -1.2465374            1    1.6213447    2.2255476    2.2286575   0.40982899  0.028990329 0.0074563996 -0.0079188141     1.466584    1.4874547   0.70050976  0.066666667    1.3602287        1e-10 1.7512744e-11    5.7101274     2.494966    30.403515 0.0047656337  -0.15989038 -0.0022161392   0.18117058  0.050817898  -0.68516036 
 1399000    4.1880753    1.2876726    2.9004028  -0.21038532   0.85853997    1.0143466   0.76158941   -1.2465374            1    1.5554624    2.1709464    2.1905246   0.30491621 0.0044929402   0.10451612 0.0037284413    1.3947288    1.4220482   0.70448079  0.066666667    1.3408218        1e-10 1.761202e-11    5.6779405    2.5018694    30.403515 -0.0056888749  -0.20965815  0.013108598   0.19366546   -1.4108227   0.28130132 
 1400000    4.1518075    1.2563876    2.8954199   -0.2119104   0.83768108    1.0018964    0.7354866   -1.2465374            1    1.6308666     2.252424    2.2287008   0.41147488  0.013060798 0.0079070915 -0.0096609474     1.475642    1.4990899   0.70586324  0.066666667    1.3136473        1e-10 1.7646581e-11    5.6668201    2.4858375    30.403515 0.0098746015  -0.21241978 -0.0062089043   0.19272666  -0.76501347    0.1714052 
 1401000    4.1627227    1.2653581    2.8973646  -0.21167829   0.84366205   0.99706219   0.74820864   -1.2465374            1     1.636928    2.2677528    2.2331506   0.40988059 0.00020110779   0.11535256 -0.035840987    1.4790184    1.5057872   0.70286834  0.066666667    1.3372428        1e-10 1.7571709e-11    5.6909662    2.5012056    30.403515 0.0030968681  -0.17971935 -0.0063838417   0.21626383  -0.51667508    3.2982515 
 1402000    4.1688461    1.2565865    2.9122596  -0.22285667   0.83781369   0.98787108   0.74444249   -1.2465374            1    1.6334302    2.2308164    2.2327454   0.43672884 0.0045258006 -0.014359757  0.009361456    1.4763155    1.5034983   0.70590737  0.066666667    1.3383224        1e-10 1.7647684e-11    5.6664658    2.4839159    30.403515 0.0074341897  -0.21131066  -0.00452666   0.22308165    1.5137499    2.0754293 
 1403000    4.1701702    1.2772606    2.8929097  -0.22294109   0.85159786    1.0251673   0.74357628   -1.2465374            1    1.5956244    2.2052392    2.2117402   0.36989378 0.0098632486 -0.036303558  0.010232078    1.4386925     1.460787   0.71214431  0.066666667    1.3641302        1e-10 1.7803608e-11    5.6168391    2.5037752    30.403515 0.00096209927  -0.19519794 -0.013796373   0.19846547   0.20684445    1.8807427 
 1404000    4.1572685    1.2706557    2.8866129  -0.21787825   0.84719412    1.0015062   0.75117301   -1.2465374            1    1.5293225    2.1676206    2.1714914   0.24885555  0.025006137   0.10902408 -0.010297967    1.3707873    1.3975972   0.70118042  0.066666667    1.3539091        1e-10 1.752951e-11    5.7046659     2.498258    30.403515 -0.0045588619  -0.17707564 -0.0056372269   0.20749655 -0.057285746  0.099662391 
 1405000    4.1720858    1.2540353    2.9180505  -0.21416396   0.83611269   0.99380748   0.73798154   -1.2465374            1    1.4873912    2.1276624    2.1125929    0.2219183    0.0115131  0.062877022 0.0097194358    1.3316401    1.3566785   0.69196865  0.066666667    1.3842011        1e-10 1.7299216e-11    5.7806087    2.4870816    30.403515 0.00086175795  -0.16534655 -0.0025236377   0.19292322   0.97577966 -0.031485712 
 1406000    4.1831432    1.2821095    2.9010337  -0.22024517   0.85483086    1.0042597   0.76185432   -1.2465374            1    1.4011118    2.0613008    2.0912252  0.050809579   0.01009971    0.1049046 -0.042597008    1.2403224    1.2690244   0.71039915  0.066666667    1.4044669        1e-10 1.7759979e-11    5.6306374     2.518856    30.403515  0.012466207  -0.17048729 0.0073744477   0.21345027   -1.0980907   -2.7379887 
 1407000    4.2031531    1.2945523    2.9086008  -0.22193684   0.86312693    1.0344117    0.7565311   -1.2465374            1    1.6979268    2.2600977    2.3045415    0.5291413 0.0080290874 0.0066436151  -0.01420676    1.5382608    1.5618736   0.70937764  0.066666667    1.4142324        1e-10 1.7734441e-11    5.6387456    2.4863807    30.403515 -0.0087428556  -0.20927637 0.00073185984   0.20028925   0.28646902    4.6277048 
 1408000    4.2117658    1.2875196    2.9242463  -0.20767408   0.85843793    1.0105151   0.76381158   -1.2465374            1    1.4686862    2.0728826    2.1528069    0.1803691 -0.020813398  0.028562574  0.023409727    1.3074836     1.335776   0.69812786  0.066666667     1.397991        1e-10 1.7453197e-11    5.7296094      2.49225    30.403515  -0.01163764  -0.21665091 0.0034847585   0.21970536    1.0103379    1.3826456 
 1409000     4.182043    1.2803115    2.9017315  -0.21543646   0.85363206    1.0089022   0.75701501   -1.2465374            1    1.5479628    2.1751342    2.1742794   0.29447479 -0.0076304798  0.060177469  0.001230692    1.3881947    1.4152647   0.69713464  0.066666667    1.3852133        1e-10 1.7428366e-11    5.7377725    2.4880245    30.403515 0.0047752731  -0.18343391 -0.011810124   0.18555075  -0.86249039   -0.1116655 
 1410000    4.1662855    1.2925386    2.8737469  -0.22184796   0.86178433     1.024953   0.76024628   -1.2465374            1    1.5340557    2.1714985    2.1733246   0.25734398  0.012184921 -0.029093548 -0.0031459048    1.3736056    1.3992465   0.71154033  0.066666667    1.3936415        1e-10 1.7788508e-11    5.6216069    2.4986818    30.403515 -0.0053402165  -0.17386226 -0.0020317956   0.19673574    1.4587947    1.2810889 
 1411000    4.1943239    1.2770815    2.9172423  -0.21531033   0.85147851   0.99166943   0.76425848   -1.2465374            1    1.6336966    2.2096646    2.2539672   0.43745792 -0.003253165   0.12219289 0.0039813626    1.4723997    1.5032651   0.70880749  0.066666667     1.374943        1e-10 1.7720187e-11    5.6432812    2.5062698    30.403515 0.0048246493  -0.19585714 0.0063388212   0.21090222  -0.50656315    1.7752255 
 1412000     4.170996    1.2688879    2.9021081  -0.21351287   0.84601548   0.99324816   0.75440606   -1.2465374            1    1.6046348    2.2215718    2.2126301   0.37970243 -0.026776429  0.026375337 -0.017777057    1.4454173    1.4739956   0.70280117  0.066666667    1.3905638        1e-10 1.7570029e-11    5.6915102    2.5152994    30.403515 -0.0020753615  -0.18959827 -0.011215375   0.17840846   0.55697488   -0.3098281 
 1413000     4.176544     1.269408     2.907136  -0.21177437   0.84636228   0.99789432   0.75207355   -1.2465374            1    1.4815957    2.1059664    2.1478133   0.19100753 0.0053035064 -0.070765749  0.018968198    1.3228705    1.3503455   0.70589974  0.066666667    1.3940421        1e-10 1.7647494e-11    5.6665271    2.5183383    30.403515 3.5438474e-05  -0.18917624 0.0070933629    0.2023045   0.18872138   0.22068223 
 1414000     4.154431    1.2629868    2.8914441   -0.2258906   0.84208103   0.99649978   0.74599254   -1.2465374            1     1.700344    2.3064218    2.2882442   0.50636606 -0.014479192 -0.071854178 -0.051722248    1.5429022    1.5692772   0.71292411  0.066666667    1.4030718        1e-10 1.7823103e-11    5.6106954    2.4947553    30.403515 -0.0016517415  -0.20583301 -0.011627524   0.18804464  -0.67851523    1.8344993 
 1415000    4.1590621    1.2655303    2.8935318  -0.20906957   0.84377686   0.99659829   0.74868412   -1.2465374            1    1.5257976    2.1567063    2.1613677   0.25931873 0.00097414488   -0.1008997 -0.026307272    1.3677877    1.3947178   0.70766977  0.066666667    1.4050719        1e-10 1.7691744e-11    5.6523539    2.4895152    30.403515 0.0060384419  -0.20192347 -0.0092888597   0.19463262  -0.13284081   -0.7111517 
 1416000    4.1652173    1.2763973    2.8888199  -0.21453667   0.85102233    1.0147489   0.74913471   -1.2465374            1    1.5661527    2.1755071    2.1927826   0.33016825 0.0053599561  0.058197565 -0.042588092    1.4080476    1.4326856   0.69862538  0.066666667    1.3925873        1e-10 1.7465634e-11    5.7255292    2.4863325    30.403515 -0.0067354675  -0.15585626 0.0031966046   0.16299291  -0.70189761  0.063328781 
 1417000    4.1527577    1.2686408    2.8841169  -0.21090263   0.84585075    1.0032908   0.74788002   -1.2465374            1    1.5563347    2.1777602    2.1898031   0.30144093  0.015024757 -0.033088716  0.044318829    1.3984945    1.4243747   0.70525049  0.066666667    1.3987082        1e-10 1.7631262e-11    5.6717437    2.4890997    30.403515 -0.019705738  -0.22813682 -0.00041608986   0.21039257   0.35412125   0.19789686 
 1418000    4.1400128    1.2693342    2.8706785  -0.23286805   0.84631307    1.0075027   0.74600566   -1.2465374            1    1.6109071    2.2171433    2.2372957   0.37828223 -0.0089060061  0.011431921  0.011785542    1.4534625    1.4783931   0.71130087  0.066666667    1.3946064        1e-10 1.7782522e-11    5.6234994    2.4941462    30.403515 0.0019244344  -0.18324466  0.014243324   0.17451131  -0.92913781    2.8255256 
 1419000    4.1652636    1.2825166     2.882747  -0.22527844    0.8551023    1.0131683   0.75674309   -1.2465374            1    1.5669715    2.1930446    2.1750443    0.3328256  0.020701755 -0.043877043 0.0098676732    1.4072608    1.4337123   0.70775951  0.066666667    1.4163567        1e-10 1.7693988e-11    5.6516372    2.4968757    30.403515  0.012885487  -0.19309343 -0.0049141371   0.22407884   -1.2299636    1.5587845 
 1420000    4.1806201    1.2700466    2.9105735  -0.20990153   0.84678802    1.0130762   0.74330329   -1.2465374            1    1.5430383    2.1658736    2.1756655   0.28757577 -0.0094252279  0.087975794 -0.035251587     1.386164    1.4097912   0.70115992  0.066666667    1.4139541        1e-10 1.7528998e-11    5.7048327    2.4884066    30.403515 -0.0017262791  -0.18392635 -0.00055618891   0.17497651   0.63203229  -0.46507462 
 1421000    4.1717088     1.278271    2.8934378  -0.21595933   0.85227154    1.0260824   0.74409958   -1.2465374            1    1.6605018      2.26857    2.2648528    0.4480827 0.0070528951  0.022023616 -0.008709318    1.5034595    1.5255441   0.70033334  0.066666667    1.4063014        1e-10 1.7508333e-11    5.7115659    2.4657857    30.403515 -0.0034902981  -0.16917466 -0.0012614074   0.21535702  -0.94024109    2.6223355 
 1422000    4.1719353    1.2791182    2.8928171  -0.21652151    0.8528364    1.0133915   0.75292556   -1.2465374            1    1.5617521    2.1970546    2.1883193   0.29988244 0.0066375511 -0.096936298 0.0032054048    1.4028471    1.4284636   0.70596267  0.066666667    1.3850677        1e-10 1.7649067e-11     5.666022    2.4890658    30.403515 0.0045884737  -0.20444263 -0.0058252414   0.19523397    0.1748991    0.5199183 
 1423000    4.1699472    1.2554263    2.9145209  -0.21428788   0.83704016    1.0025175   0.73405907   -1.2465374            1     1.560251     2.151166    2.1916054   0.33798152 -0.0089192139 -0.023777179 -0.052198513    1.4053277    1.4283927   0.70328437  0.066666667    1.3890455        1e-10 1.7582109e-11    5.6875998    2.5031516    30.403515 -0.0038254255  -0.21910813 0.0076769292   0.19393675   0.89327159    2.3582083 
 1424000    4.1632535    1.2689494     2.894304  -0.21395533   0.84605653   0.99671561   0.75231178   -1.2465374            1    1.7283062    2.3054633    2.3202498   0.55920551 0.0033998996  0.071056014 -0.014256664    1.5695307     1.597211   0.69877604  0.066666667    1.4030916        1e-10 1.7469401e-11    5.7242948    2.4760007    30.403515 -0.003123799  -0.21926618   -0.0110286   0.17142557   0.27013751    1.8149243 
 1425000    4.1823611    1.2598475    2.9225136  -0.20985464   0.83998794   0.99941606   0.74077723   -1.2465374            1    1.5387124    2.1637557    2.1659521   0.28642949  0.018528082 -0.041820741 -0.020918011    1.3823713     1.407262   0.70115833  0.066666667    1.3900717        1e-10 1.7528958e-11    5.7048456    2.4768567    30.403515 0.0089037362  -0.20249376 -0.013399954   0.20450463    2.4124194  -0.46503049 
 1426000    4.1730587       1.2724    2.9006587  -0.21054923   0.84835713   0.99732964   0.75566385   -1.2465374            1    1.6446784    2.2272631     2.272672   0.43409993 -0.0084795923 0.0091299397  0.039041591    1.4851954    1.5135024   0.70584323  0.066666667    1.3861815        1e-10 1.7646081e-11    5.6669808    2.4870584    30.403515 0.0050470933  -0.22588162 0.0065255941   0.18949225   0.79263702   -1.2809827 
 1427000    4.1438482    1.2624505    2.8813977  -0.22086989   0.84172345   0.99163706   0.74844253   -1.2465374            1    1.6890452    2.2796484    2.2847719   0.50271527 0.0034871608 0.0089892729 -0.044015852    1.5310863     1.558618   0.70810072  0.066666667    1.3447821        1e-10 1.7702518e-11    5.6489139    2.4987718    30.403515 0.0076327164  -0.17231938 -0.0069136603   0.19791128   -1.3132942    6.0612231 
 1428000     4.162522    1.2669343    2.8955877  -0.21008845   0.84471294    1.0004774   0.74778627   -1.2465374            1    1.6152452    2.2238501    2.2111209   0.41076464 -0.0014288847 -0.046667447   0.03122428    1.4574248    1.4836552    0.7009524  0.066666667    1.3890304        1e-10 1.752381e-11    5.7065216    2.5004267    30.403515 -0.0084059709  -0.20181615 5.0449223e-05   0.18072785   -2.1284844    2.4843034 
 1429000    4.1869008     1.264032    2.9228688  -0.21958945   0.84277789    1.0087193   0.73950857   -1.2465374            1    1.5961016    2.1871758    2.2289538   0.37217539 -0.015330269 -0.051941598   0.01751538    1.4400282    1.4634276   0.70334475  0.066666667    1.3812454        1e-10 1.7583619e-11    5.6871115    2.4847699    30.403515 0.0018138667  -0.21332091  0.011347011   0.18045208   -3.1008421    2.5790974 
 1430000    4.1812485    1.2869782    2.8942703  -0.21533175   0.85807697    1.0219312   0.75611102   -1.2465374            1    1.6420189    2.2393329    2.2418265   0.44489732 0.0053780899 -0.082157619   0.05653074    1.4824415    1.5076071   0.70461776  0.066666667    1.3987168        1e-10 1.7615444e-11    5.6768367    2.4932821    30.403515  0.011459658  -0.20026956 0.0061576643   0.20794057   -2.0181008    1.2014024 
 1431000    4.1871995    1.2785259    2.9086736  -0.21079325   0.85244153    1.0281726   0.74307292   -1.2465374            1    1.6060099    2.2079937    2.2498664   0.36016959 -0.018125034  0.078509969 -0.025597755    1.4491842    1.4707772   0.70073902  0.066666667    1.3752142        1e-10 1.7518476e-11    5.7082592    2.4746313    30.403515 -0.00034346998  -0.18843714 0.0068061638   0.17133512   0.31015949    1.5584317 
 1432000    4.1806898    1.2768815    2.9038082  -0.21932327   0.85134515   0.99360643   0.76283485   -1.2465374            1    1.6176282    2.2350841    2.1814724    0.4363281 -0.0084491488  0.036027425   0.12264324    1.4566318    1.4869419   0.70043019  0.066666667    1.3971066        1e-10 1.7510755e-11    5.7107761    2.4948945    30.403515 0.0069394642  -0.24511111 0.0012389007   0.21675087   0.14032428   0.40484377 
 1433000    4.1739843    1.2845778    2.8894065  -0.21266187   0.85647654    1.0264192   0.75071601   -1.2465374            1     1.477639    2.1278941    2.1273222   0.17770057 0.0029279776  0.079392435  0.086817613    1.3192002    1.3426369   0.70380941  0.066666667    1.3991087        1e-10 1.7595235e-11    5.6833568    2.4766976    30.403515 0.0017581805  -0.18854794 -0.001688553   0.19110339    0.3401816   -1.3976787 
 1434000    4.1891121    1.2781277    2.9109844  -0.22605673   0.85217605    1.0140173   0.75146359   -1.2465374            1    1.7530438    2.3316339    2.3314038   0.59609372 0.0059216756 0.00019265163 -0.0036407913    1.5944473     1.619673   0.71033052  0.066666667    1.4093532        1e-10 1.7758263e-11    5.6311814    2.4858394    30.403515 -0.0020835655  -0.19837505 -0.0063551659   0.18998113   0.20535895   0.51674081 
 1435000    4.1607659    1.2618319     2.898934  -0.21550181   0.84131102    1.0002252   0.74242084   -1.2465374            1    1.5150243    2.1533456    2.1529708   0.23875651 0.0022712281   0.02846482  0.048611865    1.3583362    1.3834675   0.70410817  0.066666667    1.4178093        1e-10 1.7602704e-11    5.6809453    2.5044993    30.403515 0.0053630365  -0.20340884 -0.0023379146   0.21486717  -0.85494723   -1.1084488 
 1436000     4.188344    1.2794051    2.9089389   -0.2109457   0.85302773   0.99945289   0.76192277   -1.2465374            1    1.6249359    2.2516174    2.2328934   0.39029691 -0.020063813  -0.13949411 -0.0072863048     1.464132    1.4934807   0.69781006  0.066666667    1.3948963        1e-10 1.7445252e-11    5.7322188    2.4743908    30.403515 -0.0011449846  -0.21232272 -0.0089790979    0.1851849    1.6857932  -0.19246146 
 1437000    4.2096382    1.2885966    2.9210416  -0.22046395   0.85915605    1.0103416   0.76508549   -1.2465374            1    1.5270962    2.1499514    2.1479746   0.28336255 -0.023056838 -0.061840637 0.0049461264    1.3656248    1.3942088   0.70424665  0.066666667    1.3880723        1e-10 1.7606166e-11    5.6798282    2.4898223    30.403515 0.0018054691  -0.19770281 0.0014678551   0.24723392 -0.062262732  -0.11313608 
 1438000    4.1766274     1.274527    2.9021004  -0.21923172   0.84977529    1.0199297   0.74388162   -1.2465374            1    1.6538934     2.249733    2.2576883   0.45425899 -0.015133217  -0.04510472  0.077372989    1.4968971    1.5197449   0.69608009  0.066666667    1.3977814        1e-10 1.7402002e-11    5.7464652    2.4733386    30.403515 0.00071948299  -0.20020428 -0.0077719954   0.22773922   -1.0370382   -1.6483324 
 1439000    4.1751796    1.2689698    2.9062099  -0.21608277   0.84607008    1.0191515   0.73835163   -1.2465374            1    1.4362381    2.0898065    2.0704751   0.14843272 -0.014245859  0.044813511  0.054444698    1.2804089     1.302192   0.70243538  0.066666667    1.3911358        1e-10 1.7560884e-11     5.694474    2.5118473    30.403515 -0.0056351974  -0.20512033 0.0015154144   0.18586432   -2.4858639   -3.5712193 
 1440000    4.2099887    1.2780565    2.9319322  -0.20666483   0.85212855   0.99971421   0.76030021   -1.2465374            1    1.7080324    2.3104156    2.2884811   0.52520059 0.0052998126  0.063643441  0.038803001    1.5475709    1.5765428   0.70403037  0.066666667    1.3789199        1e-10 1.7600759e-11    5.6815731    2.4852793    30.403515 0.0016222612  -0.18085597 -0.0017207961   0.16897385   -2.8981114    1.3249057 
 1441000    4.2000461    1.2735179    2.9265282  -0.21393523    0.8491025    1.0097067   0.74916045   -1.2465374            1    1.5486374    2.1717128    2.1594135   0.31478606 -0.0099637452  0.025598652 -0.035817254     1.390527    1.4158336   0.70513975  0.066666667    1.3746004        1e-10 1.7628494e-11    5.6726344    2.4991818    30.403515 0.0043815911  -0.17702605  0.010567767   0.17753078   0.58441137    1.2424392 
 1442000     4.159804    1.2592813    2.9005227  -0.20471046   0.83961039    1.0111832   0.73283103   -1.2465374            1    1.5642326    2.1829639    2.1962434   0.31349048 -0.00013183373   0.04173782  0.012593713    1.4095685    1.4312345   0.69904125  0.066666667    1.3712573        1e-10 1.7476031e-11     5.722123    2.4955694    30.403515 -0.0034918552  -0.19506926 -0.0077544597   0.20156022  -0.24504446   0.93409701 
 1443000    4.1758572    1.2712327    2.9046245  -0.21886758   0.84757887    1.0160916   0.74270793   -1.2465374            1    1.7053968    2.2679072    2.2952929   0.55299023 0.0070636634  0.039812863  0.061932067    1.5486482    1.5717531   0.70037449  0.066666667    1.3734246        1e-10 1.7509362e-11    5.7112303    2.5007026    30.403515  0.004887932  -0.17246019 -0.009232963   0.20902636  0.081293135    1.7076483 
 1444000     4.175833    1.2843624    2.8914706  -0.21990111   0.85633295    1.0087218   0.76151199   -1.2465374            1    1.4643702     2.131139    2.1115589   0.15041271 -0.0034483394 -0.054601151 -0.034929093     1.303653    1.3316959   0.70766354  0.066666667    1.3977239        1e-10 1.7691589e-11    5.6524037    2.5089491    30.403515 -0.0043015835  -0.22309065 0.0060544872   0.14456327    1.0081473   0.92655893 
 1445000    4.1792288    1.2790684    2.9001604  -0.21360137   0.85280325     1.027894   0.74383377   -1.2465374            1    1.5331562    2.1867018    2.1303103   0.28245642  0.024577766 -0.012940965 -0.040554711    1.3761699    1.3979602   0.70934115  0.066666667    1.3858485        1e-10 1.7733529e-11    5.6390356    2.5180348    30.403515 0.0063102772  -0.23233746 0.0097176219   0.18535442  -0.97710032    2.4401565 
 1446000    4.1652269    1.2770266    2.8882003  -0.20906708    0.8514419    1.0025179   0.75743824   -1.2465374            1    1.4831292    2.1247976     2.130449   0.19414105  0.010390663  0.069513611   0.04986116    1.3232718    1.3512709   0.69583404  0.066666667    1.3962492        1e-10 1.7395851e-11    5.7484972     2.498917    30.403515 0.0039902244  -0.19836728 -0.0080922637   0.18583587  -0.23886291    2.4160385 
 1447000    4.1987205    1.2710942    2.9276263  -0.20598738   0.84748654   0.98470442   0.76211864   -1.2465374            1    1.5810464    2.2039917    2.1554947   0.38365277 -0.006814446  0.019783597  -0.01668904    1.4202011     1.451531   0.69998733  0.066666667    1.4158054        1e-10 1.7499683e-11    5.7143892      2.49976    30.403515 0.0035927669  -0.22522825 -0.0072574288   0.19895726   -1.6110553    2.6179971 
 1448000    4.1941389    1.2954282    2.8987107  -0.20945539   0.86371095    1.0206258   0.76607064   -1.2465374            1    1.7236696    2.3021247    2.3358164   0.53306785 -0.0068755101  -0.11619125 -0.0094823626    1.5619903    1.5894296   0.71276102  0.066666667    1.4109225        1e-10 1.7819026e-11    5.6119792    2.4764675    30.403515 0.0013002452  -0.19975968 -0.0066574814    0.1920852 -0.029240974    3.0588454 
 1449000    4.1663634    1.2569209    2.9094425  -0.21300273   0.83803664   0.98710544   0.74528155   -1.2465374            1    1.4623984      2.11309    2.1238321   0.15027309 0.0071873712 -0.0062563775  0.082770931    1.3051066    1.3325672   0.70086429  0.066666667    1.4153126        1e-10 1.7521607e-11     5.707239    2.4659282    30.403515 0.0071518635  -0.24153712   0.01127924   0.19366061       1.3989  -0.36832726 
 1450000    4.1711773    1.2709225    2.9002548  -0.20789988   0.84737207   0.99777194   0.75378909   -1.2465374            1    1.6857889    2.2791042    2.2850913   0.49317108  0.014418722 -0.0069541841  0.019988824    1.5267016    1.5545547   0.69162524  0.066666667    1.4269791        1e-10 1.7290631e-11    5.7834789    2.4893265    30.403515 -7.2239089e-05  -0.19549385 -0.00075704514   0.17785128  -0.15824713  0.069036817 
 1451000    4.1749039    1.2708547    2.9040492  -0.21870614   0.84732684    1.0015414   0.75136649   -1.2465374            1    1.5485041    2.2007113    2.1619166   0.28288444 0.00079184918  0.083009593 -0.021834979    1.3899281    1.4167742   0.70722243  0.066666667     1.444889        1e-10 1.7680561e-11    5.6559292     2.508709    30.403515 -0.0092659707  -0.21358347 0.0011594382   0.20758752  0.097251522  -0.86742703 
 1452000    4.1799605    1.2892181    2.8907424  -0.21854498   0.85957044    1.0107042   0.76553219   -1.2465374            1    1.6902259    2.2736674    2.2882911   0.50871931 0.0063882784 -0.019505178 -0.0058603362    1.5286603    1.5572909   0.71282495  0.066666667    1.4320903        1e-10 1.7820624e-11    5.6114758    2.4835642    30.403515 -0.0024795214  -0.18452717 -0.0019156226   0.22763373    1.3368025  -0.42062564 
 1453000    4.1466445    1.2657887    2.8808558  -0.21947195   0.84394915    1.0005591   0.74649541   -1.2465374            1    1.6516233    2.2638409    2.2492888   0.44174024  0.024455386 -0.078359305  0.059919293    1.4940753    1.5200226   0.70334959  0.066666667    1.4145959        1e-10 1.758374e-11    5.6870723    2.4813546    30.403515 -0.0081166728  -0.17001954 -0.015584858    0.1902103    1.0387847    1.1245194 
 1454000    4.1733677    1.2666982    2.9066695  -0.21396876   0.84455552   0.97825446   0.76138012   -1.2465374            1    1.7282134    2.3310416    2.3147415   0.53885698 -0.0073097657 -0.038357208 -0.057152847     1.567524    1.5995463   0.70277996  0.066666667    1.4005613        1e-10 1.7569499e-11    5.6916819    2.5150356    30.403515 -0.0026386133  -0.19217886 0.00078702843   0.19500331  -0.42309486    2.2580062 
 1455000    4.1345524    1.2697701    2.8647823   -0.2096147   0.84660368     0.995038   0.75424549   -1.2465374            1    1.6570627     2.256682    2.2766749   0.43783124  0.002537549 -0.024325784 -0.014614652    1.4978791    1.5261882   0.70590303  0.066666667    1.4021303        1e-10 1.7647576e-11    5.6665007    2.4792826    30.403515 -0.016460439  -0.20153013 0.0071672739   0.18841163  -0.97844231  0.096454384 
 1456000    4.1735645    1.2745555     2.899009  -0.21545791    0.8497943    1.0046809   0.75341556   -1.2465374            1    1.6279977    2.2264394    2.2303313    0.4272225  0.013399795 -0.020356701 -0.010957321    1.4689892    1.4958549   0.70531045  0.066666667     1.423832        1e-10 1.7632761e-11    5.6712615    2.4849705    30.403515 -0.0022001955  -0.20590048 -0.0029855382   0.18425317   -1.3653699   -2.4085253 
 1457000    4.1696578     1.277886    2.8917718  -0.21720002   0.85201485     1.008872   0.75440847   -1.2465374            1    1.4733401    2.1162777    2.1261367   0.17760582 -0.009809348 -0.036303221 -0.0053981214     1.314122     1.340646   0.71016507  0.066666667    1.4096375        1e-10 1.7754127e-11    5.6324933    2.4836801    30.403515 0.0026901978  -0.19286435 0.0073872051   0.20961508  -0.96451362  0.072647388 
 1458000    4.1605762    1.2635197    2.8970565  -0.21255571   0.84243634    1.0174451   0.73351614   -1.2465374            1    1.6413458    2.2158475    2.2742509   0.43393916  0.002582274  0.051859126  0.029856444    1.4865371    1.5075241   0.70793302  0.066666667     1.399414        1e-10 1.7698326e-11     5.650252    2.5028719    30.403515 0.0058543017  -0.21116893 0.0019838545   0.19621887  -0.77231624  -0.20444006 
 1459000      4.17937    1.2754771    2.9038929   -0.2151996    0.8504088    1.0112449   0.75032244   -1.2465374            1    1.5814046    2.2029333    2.1936037   0.34767695 0.0099404479 -0.018465912  0.023978831     1.423049    1.4483984   0.70505347  0.066666667    1.3931622        1e-10 1.7626337e-11    5.6733286    2.4963745    30.403515 -0.0053727287  -0.19744994 0.0042207602   0.21784232    1.9237395   0.43338363 
 1460000    4.1423111    1.2611943    2.8811168  -0.22818621   0.84088588    1.0108779   0.73509187   -1.2465374            1    1.5589298    2.1906855    2.1755813    0.3105226 0.0076514463  0.024794132 0.0065892157    1.4037885    1.4259719    0.7112638  0.066666667    1.4169426        1e-10 1.7781595e-11    5.6237925    2.4885632    30.403515  0.012796633  -0.16677566 -0.0014859033   0.22364921   0.99434132   0.59230025 
 1461000    4.1623062    1.2590816    2.9032246  -0.20643834   0.83947724    1.0029314   0.73775739   -1.2465374            1     1.673549    2.2894428    2.2799731   0.45123124  0.014793484 -0.020007172  0.019493897    1.5178452    1.5416363   0.70432293  0.066666667    1.4403817        1e-10 1.7608073e-11    5.6792131    2.4838481    30.403515 -0.0057941172  -0.19750379 0.0010210788   0.19516176     2.418047     1.061036 
 1462000    4.1619791    1.2756378    2.8863413  -0.21887715   0.85051593    1.0022097   0.75612711   -1.2465374            1    1.6082651    2.2518069    2.2145696   0.35841885 -0.021064048   0.19444239  0.024427034    1.4486844    1.4764473   0.70564412  0.066666667    1.4173869        1e-10 1.7641103e-11    5.6685798    2.5076213    30.403515 -0.0084860505  -0.14125834 -0.0040405107   0.14254385   0.44062884    2.5345916 
 1463000    4.1506567    1.2634226     2.887234  -0.21896451   0.84237158    1.0060702   0.74049991   -1.2465374            1    1.6330963    2.2608464    2.2448296   0.39361304 -0.013703469  0.067209933 -0.041493297    1.4768137    1.5007708   0.70583263  0.066666667    1.4422036        1e-10 1.7645816e-11    5.6670658    2.4900961    30.403515  -0.01181774  -0.21251614 -0.0071974501   0.21787799 -0.064168974   0.12165151 
 1464000    4.1642066    1.2770828    2.8871238  -0.22287185   0.85147935    1.0098811   0.75291026   -1.2465374            1    1.6128807    2.2187906    2.2156243   0.40422733 -0.0045435527  0.035537978 -0.033163489    1.4539789    1.4800539   0.69872897  0.066666667    1.4478035        1e-10 1.7468224e-11    5.7246803    2.4874341    30.403515  0.012037384  -0.22351088 -0.0035446967   0.22225847   0.96462468   0.87733709 
 1465000    4.1768459    1.2711409     2.905705  -0.21913437   0.84751765   0.99176639   0.75776809   -1.2465374            1    1.5848133    2.1895056    2.2284849   0.33644939  0.022791749  0.044912697  0.015549898    1.4248862     1.454369   0.70298832  0.066666667    1.4152802        1e-10 1.7574708e-11     5.689995    2.4967826    30.403515 -9.2881409e-06  -0.15923126 -0.0044666673   0.19703353   -1.4537163   0.99668822 
 1466000    4.1476897    1.2558216    2.8918681  -0.21657635   0.83730368    1.0048148   0.73305517   -1.2465374            1    1.6100324    2.2397936    2.2079008   0.38240276 -0.0023220422  0.054376313 0.00033246947     1.455321    1.4778719   0.70414425  0.066666667    1.4146697        1e-10 1.7603606e-11    5.6806543    2.4996394    30.403515 -0.0010921495  -0.22291734 0.0017552321   0.18921997   0.23645154    2.9926924 
 1467000     4.165984    1.2541868    2.9117972  -0.21343939   0.83621373   0.99466836   0.73760906   -1.2465374            1    1.6625758    2.2453967    2.2729774   0.46935336 -0.0066149119  0.031245485  0.088726479    1.5069033    1.5317499   0.69389883  0.066666667    1.4284563        1e-10 1.7347471e-11    5.7645291    2.4876733    30.403515 -0.0045330325  -0.20333933 0.0022373935   0.18431613  -0.76486257     1.032475 
 1468000    4.1616499    1.2580137    2.9036362  -0.21669934   0.83876525    1.0091936   0.73269896   -1.2465374            1    1.4983817    2.1503669    2.1342861   0.21049222 -0.0082371329    0.1576255 -0.021623518    1.3437455    1.3656453   0.70364164  0.066666667    1.4207894        1e-10 1.7591041e-11    5.6847119    2.5118576    30.403515 0.0003627977  -0.16989146   0.01231102   0.21024143  -0.97712006      1.16962 
 1469000      4.17703    1.2843098    2.8927201  -0.21821142   0.85629789    1.0307156   0.74774842   -1.2465374            1     1.795002    2.3516097    2.3672854   0.66611088   0.01056881  0.042643867 -0.061643998    1.6371895    1.6594348   0.71447411  0.066666667    1.4315894        1e-10 1.7861853e-11    5.5985234    2.4933816    30.403515  0.019544581  -0.23416631 -0.00082553218   0.17887164   -1.0032787   0.76550321 
 1470000    4.1758698    1.2772124    2.8986574  -0.22190292   0.85156574    1.0049751   0.75610792   -1.2465374            1     1.525664    2.1434592    2.1464617   0.28707105 -0.010576099  0.011726812  0.069418884    1.3660873    1.3934824   0.71561327  0.066666667    1.4435652        1e-10 1.7890332e-11    5.5896113    2.4732083    30.403515 0.0044152695  -0.16366896 -0.00056184878   0.19171577   0.31645705   -0.3085843 
 1471000    4.1704735    1.2677622    2.9027113  -0.21501344   0.84526493    1.0091421   0.74328247   -1.2465374            1    1.6295993     2.223055     2.263856   0.40188693 -0.020285088  0.008586515   0.03845044    1.4727294    1.4968697   0.71305744  0.066666667    1.4544757        1e-10 1.7826436e-11    5.6096463    2.4858486    30.403515 -0.0039005209  -0.19927812 -0.0089622907   0.18381308    1.3608206    0.7734038 
 1472000    4.1600031    1.2740225    2.8859805  -0.22032513   0.84943895    1.0059524   0.75204633   -1.2465374            1    1.6193302    2.2354669    2.2294252   0.39309852 -0.012913245  0.063627608  0.023823687    1.4606107    1.4870201   0.70463553  0.066666667    1.4516582        1e-10 1.7615888e-11    5.6766936    2.4793167    30.403515 0.00059233058  -0.20251525 0.0055321181   0.18537994  -0.61129518    2.1992108 
 1473000     4.177542    1.2706983    2.9068437  -0.21732273   0.84722253    1.0058122   0.74853559   -1.2465374            1    1.5381945    2.1589819    2.1647591   0.29084247  0.002484861   0.18320894 -0.049697494    1.3802159    1.4059028   0.71391079  0.066666667    1.4479876        1e-10 1.784777e-11     5.602941    2.5007679    30.403515 -0.0017758938  -0.17592893 -0.003089566   0.20191376   -1.5548732    2.2979196 
 1474000    4.1681433    1.2592038    2.9089395  -0.21688668   0.83955871    1.0053321   0.73639352   -1.2465374            1     1.660505    2.2581193    2.2395828   0.48381289 -0.011046333  0.092725964 -0.026896501     1.505089    1.5282765   0.70597322  0.066666667    1.4449935        1e-10 1.7649331e-11    5.6659373    2.4818402    30.403515  -0.01274394  -0.19502168  0.016538536    0.2316126   -1.4627381   0.78209231 
 1475000    4.1214234      1.25271    2.8687134   -0.2237743   0.83522907   0.99915641   0.73321361   -1.2465374            1    1.5200197    2.1493735    2.1487534   0.26193212 -0.013864173  0.049515412 -0.0087041946    1.3652748    1.3886034   0.69877243  0.066666667    1.4434106        1e-10 1.7469311e-11    5.7243243     2.505638    30.403515 -0.0098517703  -0.16740663 0.0018152372   0.20864331   -3.3539011  -0.37013931 
 1476000    4.1702306     1.253403    2.9168276   -0.2114893   0.83569114   0.98475009   0.74294179   -1.2465374            1    1.5912184    2.2067682     2.225333    0.3415539 -0.0024655214 -0.052416995  -0.02609176    1.4344204    1.4616969   0.71098236  0.066666667     1.423061        1e-10 1.7774559e-11    5.6260186    2.5196874    30.403515 0.0038734078  -0.19111631 -0.0048682105   0.18002872  -0.55569553   0.36534867 
 1477000    4.1520471    1.2676796    2.8843675  -0.22606683   0.84520986    1.0083831   0.74366605   -1.2465374            1    1.5716461    2.1870229    2.1829126   0.34500269 -0.0029607331 -0.052490868 0.0001012986    1.4146952    1.4390163    0.7143677  0.066666667    1.4099944        1e-10 1.7859193e-11    5.5993573    2.4988161    30.403515 -0.0052549895  -0.21828293 0.0068790393   0.16274274    1.9293139   0.36186606 
 1478000    4.1660792    1.2612254    2.9048538  -0.21237808   0.84090665   0.99128296   0.74733723   -1.2465374            1     1.583263     2.212535    2.1869601   0.35029405 -5.1933764e-05  -0.12242265 -0.021252168    1.4255374    1.4528824   0.70934438  0.066666667    1.4156136        1e-10 1.7733609e-11    5.6390099    2.4783097    30.403515 0.0042385846  -0.16642066 -0.0042250588   0.21112602    1.2051067   0.16761979 
 1479000    4.1657843    1.2877131    2.8780712  -0.22121512   0.85856698    1.0105451   0.76400238   -1.2465374            1    1.6303343    2.2557825    2.2449844   0.39023615 -0.00030932783  0.030085325  -0.04913765    1.4690915    1.4974202   0.69592778  0.066666667     1.439694        1e-10 1.7398195e-11    5.7477228    2.4732135    30.403515 -0.00091704686  -0.20138607 -0.0033192623   0.17640011   -0.2002992    4.1145966 
 1480000    4.1697806    1.2659693    2.9038114  -0.21409936   0.84406953    1.0058336    0.7434038   -1.2465374            1    1.5623859    2.1710549    2.1909989   0.32510386 -0.0061616448  0.042399681   0.01555227    1.4054904    1.4300914   0.69846536  0.066666667    1.4469825        1e-10 1.7461634e-11    5.7268409    2.4813715    30.403515 -0.0064485997   -0.1728676 -0.004738706   0.17377696   0.14721626   -2.7926322 
 1481000    4.1641369    1.2724764    2.8916605  -0.21081265   0.84840806    1.0177895   0.74299585   -1.2465374            1    1.6196756    2.2446507    2.2431017   0.37127429  -0.02622246   0.11373786  0.046114332    1.4628662    1.4858086   0.71438433  0.066666667    1.4444024        1e-10 1.7859608e-11    5.5992269    2.5245858    30.403515 -0.0013938387  -0.20829579   0.01377013   0.21967767    -1.678784    0.6335939 
 1482000    4.1589534    1.2694258    2.8895276  -0.21747744   0.84637415     1.004433   0.74801788   -1.2465374            1    1.5754949    2.1786065    2.2197045   0.32817377  0.027483423 -0.044260296  0.023539911    1.4176256    1.4433847   0.70851466  0.066666667    1.4282476        1e-10 1.7712867e-11    5.6456136    2.5204547    30.403515  0.015175107  -0.22035674 0.0038903836    0.2163113   -1.2513325    1.1937632 
 1483000    4.1728574    1.2674212    2.9054362  -0.20626416   0.84503759    1.0025235   0.74703817   -1.2465374            1    1.6740035    2.2818687    2.2782516    0.4618902 -0.014209131  0.017022798 0.0043293786     1.516341    1.5421444   0.69184603  0.066666667     1.424675        1e-10 1.7296151e-11    5.7816332    2.4728501    30.403515 0.0033069362  -0.17159679 -0.0042237012   0.18787825   0.34755769  0.076179423 
 1484000    4.1700085    1.2699919    2.9000166  -0.21290838   0.84675158    1.0139205   0.74271793   -1.2465374            1    1.5145583    2.1379273     2.149517   0.25623058 -0.0085497327   0.10114315  0.027940376    1.3578076    1.3812002   0.70583409  0.066666667    1.4120014        1e-10 1.7645852e-11    5.6670541    2.4743306    30.403515 -0.0018199958  -0.21460556 -0.0073996053   0.20293083  -0.92945837   0.54267412 
 1485000    4.1698114    1.2900084     2.879803  -0.22067116   0.86009734    1.0282346   0.75546257   -1.2465374            1    1.5652843    2.1890692    2.1843121   0.32247156 -0.0011505925   0.14119616  0.057853344    1.4058438    1.4300435   0.70939205  0.066666667    1.4253079        1e-10 1.7734801e-11     5.638631    2.5053103    30.403515 -0.018111747  -0.24603394 0.0047740754   0.20083124  -0.78809437   -3.2780485 
 1486000    4.1811612     1.286031    2.8951302  -0.22281676   0.85744545     1.021093   0.75560823   -1.2465374            1    1.6345841    2.2287505    2.2524431   0.42255854  0.010197809 0.0098299764 -0.034755975    1.4751128    1.5002826   0.70443406  0.066666667    1.4018786        1e-10 1.7610852e-11    5.6783171    2.4888469    30.403515 0.0091807419  -0.20576115 0.0047720036   0.14884034   0.37857199    1.6554468 
 1487000    4.1635786     1.272366    2.8912125   -0.2110963   0.84833451    1.0056603   0.75043544   -1.2465374            1     1.567209    2.1809252       2.2139   0.30680193 -0.011668263 -0.008412917 -0.0091115711    1.4088295    1.4349373   0.70692301  0.066666667    1.4338322        1e-10 1.7673075e-11    5.6583248    2.5105122    30.403515 0.0050355229  -0.21084695 -0.0056234966    0.2166951  -0.37752899  -0.31670962 
 1488000    4.1804862    1.2896082     2.890878   -0.2241584   0.85983048    1.0172493   0.76187541   -1.2465374            1    1.5539488      2.15952    2.1825284   0.31979791 0.0049451617 0.0019773912 -0.047021326    1.3931548    1.4201528   0.70720219  0.066666667    1.4313089        1e-10 1.7680055e-11    5.6560911    2.4777345    30.403515 0.0023538205   -0.2123561 -0.0011759455   0.17985972  -0.33376776     2.880431 
 1489000    4.1565986    1.2543937    2.9022049  -0.21664795    0.8363517   0.99469037   0.73781931   -1.2465374            1    1.6646176    2.2744343    2.2559046   0.46351383 0.00048521218 -0.068136422 -0.012018618    1.5089007    1.5337888   0.71005375  0.066666667    1.4224569        1e-10 1.7751344e-11    5.6333764    2.4853348    30.403515 0.0048949994  -0.18200222  0.012696813   0.17836967  -0.40572144    4.8046083 
 1490000    4.1587512    1.2688758    2.8898755    -0.216958   0.84600741   0.99900151   0.75080746   -1.2465374            1    1.5657695    2.1863341    2.1913842   0.31959038  0.017370979 -0.072997113 0.0079607775    1.4073115    1.4343737   0.70736073  0.066666667     1.395808        1e-10 1.7684018e-11    5.6548234     2.494275    30.403515 -0.0088399792  -0.18668454 0.0028007271   0.22957088  -0.56253422   0.68540044 
 1491000    4.1554215    1.2639211    2.8915004  -0.21117538   0.84270396    1.0061069    0.7410166   -1.2465374            1    1.5339765    2.1611555    2.1719437   0.26883048  0.014238007 -0.043109735  0.023392418    1.3775849    1.4016461    0.7058968  0.066666667    1.4085981        1e-10 1.764742e-11    5.6665507    2.4891283    30.403515  -0.01350266  -0.20448005 -0.0072287689   0.20351159    2.2842028     1.977213 
 1492000     4.184828    1.2861916    2.8986363  -0.21609263   0.85755255    1.0245688   0.75361597   -1.2465374            1    1.5354584    2.1675054    2.1523898   0.28647998 0.0094380477 -0.016514462  0.038548341    1.3764076    1.4006997   0.70999842  0.066666667    1.4331203        1e-10 1.7749961e-11    5.6338154    2.5149316    30.403515 0.0003344016  -0.22563043 0.0004902882   0.15432374    2.2467156 -0.0058551815 
 1493000    4.1707277    1.2760611    2.8946666  -0.21006421   0.85079814    1.0188608   0.74620822   -1.2465374            1     1.689842    2.2739771    2.2843724   0.51117655 -0.0016590273   0.01995146  0.052837333    1.5323547    1.5558341   0.70656787  0.066666667    1.4351081        1e-10 1.7664197e-11    5.6611689    2.4768532    30.403515 -0.00086005186  -0.16502471  0.008518809   0.15410739    2.2186553    3.4867743 
 1494000    4.1774472     1.277708    2.8997391  -0.22439839   0.85189621    1.0096021   0.75376088   -1.2465374            1    1.5744824    2.2052964     2.195621   0.32252973   0.01552309  0.077023764  0.013510524     1.415401    1.4416922   0.70299998  0.066666667    1.4235423        1e-10   1.7575e-11    5.6899006     2.496478    30.403515 0.0087033756  -0.15880146 -0.0074997182   0.22524454   0.67083308    2.0340889 
 1495000    4.1450637    1.2686181    2.8764456  -0.21790895    0.8458356     1.004744    0.7469498   -1.2465374            1    1.5606232     2.173588     2.206417   0.30186474   0.02640445  0.048711535  0.015492161    1.4029794    1.4284721   0.70001933  0.066666667     1.418127        1e-10 1.7500483e-11    5.7141279    2.5199107    30.403515 0.0087014741  -0.19464933 -0.0067014902   0.16985479  -0.86337145  -0.43791485 
 1496000    4.1903434    1.2860178    2.9043256  -0.21865405   0.85743668    1.0113666   0.76165552   -1.2465374            1    1.4950949    2.1430883    2.1439894   0.19820716  0.022685873   0.20118793 -0.040205052    1.3343474    1.3620727   0.70431074  0.066666667     1.394303        1e-10 1.7607768e-11    5.6793114    2.5155669    30.403515 -0.0081469213  -0.17506603 0.00023818741   0.17969751   -1.5775681  -0.30512001 
 1497000    4.1749528    1.2590641    2.9158887   -0.2135389    0.8394656    1.0170432   0.72894399   -1.2465374            1    1.4130585    2.0853461    2.0475507   0.10627854 0.0021426483   0.14901304 -0.050018813    1.2592147    1.2792896    0.7088313  0.066666667     1.408192        1e-10 1.7720783e-11    5.6430916    2.5058822    30.403515  -0.00372543  -0.19306754 -0.0048685077   0.19274612    -1.001063   -1.0200771 
 1498000     4.148428    1.2549694    2.8934586  -0.21977685   0.83673551    1.0073056   0.73058055   -1.2465374            1    1.6419258    2.2428216    2.2465927   0.43636296 -0.012151972  0.044778903  0.066135198    1.4877366    1.5094377   0.70521533  0.066666667    1.4173868        1e-10 1.7630383e-11    5.6720264    2.4991134    30.403515 -0.00017837038  -0.19104716  0.014894563   0.17807981  -0.39031633    3.6617111 
 1499000    4.1808609     1.277734    2.9031269  -0.21313213   0.85191353   0.98842297   0.76698789   -1.2465374            1    1.6743876    2.2683677    2.2971459   0.45764925    0.0108035  0.049912375 -0.041867423    1.5125147    1.5443831   0.70503002  0.066666667    1.4003448        1e-10 1.762575e-11    5.6735173     2.505722    30.403515 -0.0051589734  -0.18235647 -0.0040860842   0.17972274   0.31324376     2.976587 
 1500000    4.1917414    1.2852118    2.9065296  -0.21294185   0.85689928    1.0030315   0.76597756   -1.2465374            1    1.5776081    2.1922388    2.2078216   0.33276382 0.0096697295 -0.010243198 -0.012102422    1.4159484    1.4456822   0.70760536  0.066666667    1.4130169        1e-10 1.7690134e-11    5.6528684    2.4908145    30.403515  0.003452373  -0.17564095 -0.0017050922   0.22278823   0.13226013    2.4059513 
 1501000    4.1815577    1.2899665    2.8915912  -0.21070029   0.86006943    1.0202572    0.7603888   -1.2465374            1    1.7004472    2.2976186    2.2716128   0.53211034 0.0093919799 -0.029009509 0.0081233078     1.539967    1.5662557   0.70560206  0.066666667    1.4214409        1e-10 1.7640051e-11    5.6689177    2.4802564    30.403515  0.010781677  -0.18310198 -0.0026958239   0.18555834 -0.029935588    2.3452207 
 1502000    4.1646321    1.2802056    2.8844266  -0.22337361   0.85356143    1.0113447   0.75537812   -1.2465374            1    1.4591562    2.1233992     2.108636   0.14543339 -0.0012117699  0.082042758 -0.038490816    1.2997335    1.3261369   0.70660032  0.066666667    1.4187049        1e-10 1.7665008e-11    5.6609089    2.4899115    30.403515 -0.0044589801  -0.20152447 -0.0038974841   0.19830254  -0.44334237   -2.3834799 
 1503000    4.1595631    1.2626053    2.8969578  -0.21329931   0.84182664    1.0087564   0.73794121   -1.2465374            1    1.5859935    2.1916948    2.2014612   0.36482449 -0.0034628809  0.034729199 -0.077107594    1.4302509    1.4533146   0.70093342  0.066666667    1.4418693        1e-10 1.7523336e-11    5.7066761    2.4903361    30.403515 -0.0072491599     -0.17794  -0.01705581   0.20843161   -3.2389681    0.4703925 
 1504000    4.1751433    1.2796219    2.8955215  -0.21491285   0.85317225    1.0115742   0.75460336   -1.2465374            1     1.633783    2.2378794    2.2429394   0.42053029  0.007918554 -0.016826872  0.011438338    1.4745239    1.5007335   0.70189923  0.066666667    1.4474449        1e-10 1.7547481e-11    5.6988237    2.4813931    30.403515 -0.002872081  -0.19194352 0.0020540025    0.1921477   -2.4064391    2.0964696 
 1505000    4.1513058    1.2675963    2.8837094  -0.21948464   0.84515435    1.0151101   0.73938368   -1.2465374            1    1.5603051    2.1757179    2.2018806   0.30331694 -0.0012572214   0.13262782 -0.066487593    1.4042581    1.4267906    0.7120069  0.066666667    1.4579756        1e-10 1.7800172e-11    5.6179231     2.493461    30.403515 0.0083036135  -0.21751815 -0.0046217271   0.17847469   -1.7955761   -1.1256278 
 1506000    4.1899871    1.2935736    2.8964135  -0.21304537   0.86247441    1.0029277   0.77509281   -1.2465374            1    1.6257882    2.2386373    2.2446056   0.39412151  0.015398145 0.0083691599 -0.014453616    1.4622047    1.4938759   0.70268317  0.066666667    1.4495342        1e-10 1.7567079e-11    5.6924659    2.4874556    30.403515 -0.0033679866  -0.15418965 0.0032429057   0.18526712  -0.94948095      1.69304 
 1507000    4.1570779    1.2722517    2.8848263  -0.22264322   0.84825825    1.0078987   0.74891662   -1.2465374            1    1.5339756     2.173773      2.16125   0.26690368 -0.0053684572 0.0021002032  0.033513963    1.3759166    1.4014095   0.69906413  0.066666667    1.4400822        1e-10 1.7476603e-11    5.7219357    2.4811543    30.403515 -0.006760614  -0.18357658 -0.0056244269   0.19256578  -0.28964082   -2.9575634 
 1508000    4.1720555    1.2704805     2.901575  -0.20877083   0.84707732    1.0261075    0.7356518   -1.2465374            1    1.7268635    2.2867818    2.3357725   0.55803625 -0.00099134844  0.054134109 -0.050774784    1.5716041    1.5919025   0.70470145  0.066666667    1.4152968        1e-10 1.7617536e-11    5.6761626    2.4833361    30.403515 -0.0078414238  -0.17810463 -0.029159961   0.19195566    1.0420831    1.9624135 
 1509000    4.1775344    1.2675624    2.9099719   -0.2117451   0.84513177   0.99893185   0.74942936   -1.2465374            1    1.5779597    2.2017752    2.2058035   0.32630025 -9.035692e-05   0.07522514  0.023341877    1.4197925     1.446573   0.71336995  0.066666667    1.4235199        1e-10 1.7834249e-11    5.6071888    2.5070529    30.403515 0.00095866592  -0.22546528 -0.028271734   0.22822469 -0.091572129    1.3155259 
 1510000    4.1722513    1.2890351    2.8832161  -0.21056966   0.85944842    1.0147736   0.76279805   -1.2465374            1    1.7492587    2.3381009    2.3195153   0.59016002     0.014574 0.0080306021  0.041238164    1.5882701    1.6157884   0.69811761  0.066666667    1.4320689        1e-10 1.745294e-11    5.7296936    2.4747446    30.403515 0.0061130139  -0.17213241 0.00091739514   0.17361733    1.4697955    1.6433424 
 1511000    4.1824316    1.2833185    2.8991131  -0.21559787   0.85563691    1.0123218   0.75813851   -1.2465374            1    1.5036082    2.1407492    2.1437839   0.22629158 0.0096953359   0.11956317  0.037797064     1.343603    1.3704604   0.70513799  0.066666667    1.4242842        1e-10 1.762845e-11    5.6726486    2.4980436    30.403515 -0.005858792   -0.1850477 -0.0043378378   0.20730917   0.55869543   -1.1081665 
 1512000    4.1684735    1.2770968    2.8913767  -0.22139032   0.85148872    1.0199048   0.74667865   -1.2465374            1    1.6386663    2.2471132    2.2583969   0.41048888 -0.0054434219  0.090878568  0.029669393    1.4810797    1.5045211   0.70502442  0.066666667    1.4321841        1e-10 1.7625611e-11    5.6735623    2.4933757    30.403515 -0.0037008712  -0.19734891 -0.012041919    0.1967399   -1.2735338    2.1544094 
 1513000    4.1830224    1.2722645    2.9107579   -0.2201895   0.84826683    1.0156019   0.74412992   -1.2465374            1    1.6360426    2.2548407    2.2456306   0.40765667 -0.010632581 -0.045123821 -0.0020769812    1.4789939    1.5024634   0.70774691  0.066666667    1.4175677        1e-10 1.7693673e-11    5.6517379    2.4955694    30.403515 0.0066764092  -0.20175777 -0.0036279143    0.1712997   0.47746258    1.3820437 
 1514000    4.1741653    1.2759161    2.8982491   -0.2245125   0.85070149    1.0040537   0.75527918   -1.2465374            1    1.4347919    2.0831194    2.0808668   0.14038941 0.0068005604 -0.015677987 -0.030895632    1.2753901    1.3027315   0.70307681  0.066666667    1.4467979        1e-10 1.757692e-11    5.6892788     2.479608    30.403515 -0.0043961238  -0.21029936 0.0033752295    0.1687757  -0.69270543   0.18663882 
 1515000    4.1697121    1.2796302     2.890082  -0.21894966   0.85317778    1.0180443   0.75058014   -1.2465374            1    1.6679901    2.2390848     2.268529   0.49635645  0.027901885 0.0036764751 -0.028930632      1.50958    1.5340896   0.71236715  0.066666667    1.4479243        1e-10 1.7809179e-11    5.6150821    2.5239592    30.403515 -0.0013104018  -0.17986521 0.0039298384   0.16497393    -1.104458    3.1910174 
 1516000    4.1604671    1.2701828    2.8902843  -0.21566837   0.84687885    1.0305824   0.73254079   -1.2465374            1    1.4882259    2.1214177    2.1149773   0.22828267 0.0070315543 -0.00050908841   0.04290389    1.3336231    1.3526763   0.70544685  0.066666667    1.4513561        1e-10 1.7636171e-11     5.670165     2.483779    30.403515 0.0080001044  -0.21846027  0.010488363   0.17714455  -0.29926713   -0.1297464 
 1517000    4.1780311    1.2733191     2.904712  -0.20996506   0.84896993    1.0185833    0.7434133   -1.2465374            1    1.6228921    2.2179725    2.2477956   0.40290823 -0.014481296 -0.014440482 -0.049308478    1.4659946    1.4889207   0.70915576  0.066666667    1.4705321        1e-10 1.7728894e-11    5.6405098     2.477016    30.403515 -0.016153078  -0.21484779 -0.0044598832   0.17827231    1.0834895     2.840253 
 1518000    4.1817356    1.2733683    2.9083673  -0.22037855   0.84900276    1.0062955   0.75112437   -1.2465374            1    1.5999142    2.2091834     2.216338   0.37422134  0.021384371 -0.039367348  0.055203584    1.4413893     1.467559   0.70398541  0.066666667     1.457418        1e-10 1.7599635e-11    5.6819359    2.5070406    30.403515 -0.010890144  -0.17540591 0.0089313676   0.19910102    0.9966169    2.6186703 
 1519000    4.1801974    1.2705055    2.9096919  -0.20931836   0.84709401     1.013398   0.74359946   -1.2465374            1    1.4635803    2.1062672    2.0846298   0.19984401  -0.00445059 -0.044391212 -0.029489774    1.3066436     1.330291   0.69570209  0.066666667    1.4721897        1e-10 1.7392552e-11    5.7495874     2.504426    30.403515 0.0062521849  -0.16451695  0.017055898   0.17865877   0.68860876    1.8437078 
 1520000     4.165664    1.2698203    2.8958437  -0.21005939   0.84663719     1.018175   0.73988084   -1.2465374            1    1.7263204    2.3467992    2.2810977   0.55106421 -0.0018480026 0.0059411921 -0.027595224    1.5701684    1.5924027   0.70986484  0.066666667    1.4541877        1e-10 1.7746621e-11    5.6348755    2.4986006    30.403515 -0.0014077301  -0.18460307 0.0013011025   0.21128114  -0.25882033    1.9785607 
 1521000     4.166279     1.272471     2.893808  -0.21656742   0.84840446    1.0242089   0.73898946   -1.2465374            1    1.5442028     2.185182    2.1698704   0.27755604 0.0069318689 -0.028511817 -0.016376296     1.388239    1.4094915   0.71073622  0.066666667    1.4618581        1e-10 1.7768405e-11     5.627967    2.4831603    30.403515 -0.011158014  -0.15066315 -0.023258424   0.22907049   0.72586739    1.2994664 
 1522000    4.1669645    1.2808901    2.8860745  -0.22367345   0.85401779    1.0001687   0.76308391   -1.2465374            1    1.5430022    2.1805994    2.1892172   0.25918994 0.00010062318 -0.021783324  0.045734264    1.3819532    1.4114528    0.7017392  0.066666667     1.458399        1e-10 1.754348e-11    5.7001233    2.4972603    30.403515 -0.0050101792   -0.1845811 0.0033057453   0.17368225  -0.74704391    2.3460891 
 1523000    4.1427203    1.2678832    2.8748372  -0.21258802   0.84534561    1.0153586   0.73953929   -1.2465374            1    1.6592519    2.2793704    2.2539045   0.44448081  0.019366141 -0.0047936132 -0.072355843     1.503172    1.5257046   0.70453459  0.066666667    1.4481195        1e-10 1.7613365e-11    5.6775069    2.4715629    30.403515 -0.010882699  -0.21758578 0.00052686575   0.18383294  -0.21590719    3.2883681 
 1524000    4.1851206    1.2742595    2.9108612  -0.21984303   0.84959692    1.0184329   0.74452485   -1.2465374            1    1.5287222    2.1436451    2.1504805   0.29204087  0.019592311  0.054075357 0.0081324414    1.3715901    1.3947706   0.70520849  0.066666667    1.4623169        1e-10 1.7630212e-11    5.6720815    2.4945022    30.403515 0.0024035213  -0.19443416 -0.0030947107   0.21035417   -1.3294876    1.7933889 
 1525000    4.1817064    1.2855383    2.8961681  -0.20604094   0.85711694    1.0067757    0.7639975   -1.2465374            1    1.6609308    2.2784212    2.2690446   0.43532664 -0.0045256351   0.19638857 -0.012724565     1.499689    1.5285124   0.70018259  0.066666667    1.4843047        1e-10 1.7504565e-11    5.7127956    2.4884734    30.403515 -0.0065498699     -0.18162 0.0032805944   0.18775977   -4.6538751    4.5116987 
 1526000    4.1814727     1.286389    2.8950837  -0.21273194   0.85768413     1.018056   0.75788832   -1.2465374            1    1.5122994    2.1533007    2.1480537   0.23554364 0.0087076692    0.1680867 -0.036772489    1.3523469    1.3783973   0.70976915  0.066666667    1.4759742        1e-10 1.7744229e-11    5.6356352    2.5157226    30.403515 -0.015428372  -0.20414847  0.011900369   0.23313606   -3.5338432    2.2434873 
 1527000    4.1871421    1.2918838    2.8952583  -0.22073937   0.86134774    1.0190272   0.76323048   -1.2465374            1     1.612159    2.2222801    2.2329968   0.38119994 0.0044523104  0.050181506 -0.024064276     1.451079    1.4781292   0.70268098  0.066666667    1.4944588        1e-10 1.7567024e-11    5.6924837    2.4708168    30.403515 -0.0063998287  -0.19194686 -0.016795064   0.18005625   -2.8888442    2.1065847 
 1528000    4.1809456      1.28524    2.8957055  -0.21140936   0.85691808    1.0249544   0.75234566   -1.2465374            1    1.5829561    2.2110368    2.1844149   0.35341657 0.0032452154   0.15014916   0.01347366    1.4241734    1.4481467   0.70322733  0.066666667    1.4695946        1e-10 1.7580683e-11     5.688061    2.4888427    30.403515 -0.011736113  -0.18652409 0.00070686678   0.15920442   -2.1780243    4.2831819 
 1529000    4.1776947    1.2765003    2.9011945  -0.22669138   0.85109095    1.0289064   0.74042314   -1.2465374            1    1.4730613     2.130272    2.0937976   0.19511448 0.0023150422  0.097426553 -0.057697721    1.3167949    1.3377322   0.70981724  0.066666667     1.455525        1e-10 1.7745431e-11    5.6352533    2.5084689    30.403515 -0.0020144365  -0.20533162 -0.012889056   0.16371667   0.14077909     1.749003 
 1530000    4.1919782     1.297713    2.8942652  -0.22024827   0.86523427    1.0278138   0.76406397   -1.2465374            1    1.5262923    2.1403907    2.1789568   0.25952931 0.0098523748   0.12944931 -0.051678756    1.3650364    1.3911068   0.70909728  0.066666667    1.4653172        1e-10 1.7727432e-11    5.6409749    2.4999904    30.403515 -0.0052671398  -0.17455776 -0.0041967786   0.20686957  -0.70425043   -2.1632449 
 1531000    4.1390438    1.2556632    2.8833806  -0.22845575   0.83719806    1.0167298   0.72545823   -1.2465374            1    1.5527519    2.1705265    2.1703122    0.3174171  0.010663219  0.059394129 -0.042747924    1.3996439    1.4190243   0.70840941  0.066666667    1.4965973        1e-10 1.7710235e-11    5.6464524    2.4922693    30.403515 0.0059413996  -0.16766266 -0.0043453157   0.18824549    1.6343742   0.41887726 
 1532000    4.1659548    1.2667103    2.8992445   -0.2175803   0.84456361   0.99744139    0.7494359   -1.2465374            1     1.655697    2.2372539    2.2770744   0.45276273 0.0063138801 0.0040370633  0.026614719    1.4975284    1.5245063   0.70569155  0.066666667    1.4607088        1e-10 1.7642289e-11    5.6681988    2.4955972    30.403515 -0.00017710294  -0.19910388 -0.010510437    0.1730036    1.7811081    1.1720819 
 1533000    4.1601868    1.2612118     2.898975  -0.22939189   0.84089754   0.99929246   0.74233088   -1.2465374            1    1.5492735    2.1500045    2.1856147   0.31220141 -0.012373492  0.040453746 -0.029776798    1.3926045    1.4178394   0.71244992  0.066666667    1.4598745        1e-10 1.7811248e-11    5.6144297    2.4960822    30.403515  0.015420558  -0.18143951 0.0048806711   0.25275483    1.5634184    1.4415492 
 1534000    4.1390564    1.2592444     2.879812  -0.23061348   0.83958579   0.98585685   0.74857454   -1.2465374            1    1.6768619    2.2570053    2.2750011   0.49857917 -0.005300166   0.12867726  0.049512111    1.5188751    1.5471949   0.70332882  0.066666667    1.4627619        1e-10 1.7583221e-11    5.6872403    2.4757811    30.403515  0.017136426  -0.19199648 -0.012739544   0.22775383    1.5350884     3.733125 
 1535000      4.16821      1.27656    2.8916501  -0.21911355   0.85113074   0.99643135   0.76072629   -1.2465374            1    1.6183375    2.2348565    2.2236356    0.3965205 -0.017327847   0.14750948  0.050292717    1.4577861    1.4872797   0.70298829  0.066666667    1.4622766        1e-10 1.7574707e-11    5.6899952    2.4987463    30.403515 -0.0014795668  -0.20732561 0.0032223606   0.18347139  -0.39554223   -1.2312752 
 1536000    4.1745232    1.2847229    2.8898002  -0.22602589   0.85657331    1.0141779   0.75850189   -1.2465374            1    1.5133049    2.1702009    2.1201404   0.24957353 -0.001494977   0.18463343 -0.022234419     1.353223     1.379913   0.70698632  0.066666667    1.4638154        1e-10 1.7674658e-11    5.6578181     2.511278    30.403515 -0.003759119  -0.18063251 -0.0073318152   0.17331834   -1.7659389    1.1245298 
 1537000    4.1916274      1.27378    2.9178474  -0.21009569   0.84927723    1.0088779   0.74996063   -1.2465374            1    1.5652922    2.1726189    2.1990016   0.32425615 0.0015035306   0.09957084 -0.026019371    1.4070129    1.4325973   0.70786971  0.066666667    1.4250079        1e-10 1.7696743e-11    5.6507574    2.4819022    30.403515 -0.0050222804  -0.17570254 -0.015153512   0.20716859   -1.8925928  -0.26425746 
 1538000     4.160251    1.2575895    2.9026615  -0.21987795   0.83848244   0.99646669    0.7401713   -1.2465374            1    1.5820426    2.1963839    2.1950355   0.35470822  -0.00777677   0.14415794 -0.0066432207    1.4258293    1.4509801   0.70699321  0.066666667    1.4214455        1e-10 1.767483e-11     5.657763    2.4946534    30.403515 -0.0016351847  -0.17444065 0.0040836812   0.19477548   -2.5993247    1.6990371 
 1539000    4.1898724    1.2760626    2.9138098  -0.21539589   0.85079913    1.0010402   0.75731569   -1.2465374            1    1.5337874    2.1341958     2.175744   0.29142226 0.0012606902  0.098696938 -0.038488594    1.3739558    1.4021234   0.70147685  0.066666667    1.4131346        1e-10 1.7536921e-11    5.7022552    2.5064411    30.403515 -0.012758894  -0.20865247  0.019079482     0.179338   -1.1961863     2.970387 
 1540000    4.1599753    1.2911091    2.8688662   -0.2159996   0.86083124    1.0316786   0.75450761   -1.2465374            1     1.492827    2.1462437    2.1494622   0.18277512  0.017839643  0.032926083 -0.021305975     1.333588    1.3571332   0.70375346  0.066666667    1.4023384        1e-10 1.7593837e-11    5.6838086    2.4937418    30.403515  0.005838679  -0.21843199  0.010432315   0.17909031 -0.021001525   0.17638408 
 1541000    4.1756013    1.2712108    2.9043905  -0.21336239   0.84756429    1.0072537   0.74819206   -1.2465374            1    1.6430246    2.2694166    2.2310066    0.4286508   0.01850672   0.01876068 -0.0027708593    1.4851186    1.5105434   0.70786992  0.066666667     1.406947        1e-10 1.7696748e-11    5.6507557    2.4856832    30.403515 -0.0027231618   -0.1621841 -0.0056296238   0.22422926   0.67736597    1.9425712 
 1542000    4.1731752    1.2749594    2.8982157  -0.21218374   0.85006363    1.0273787   0.73970748   -1.2465374            1    1.6093573    2.2283051    2.2157921   0.38397454 0.0074529849 -0.011759922 -0.043560292    1.4532419     1.474229   0.71040347  0.066666667    1.4214986        1e-10 1.7760087e-11    5.6306031    2.4932691    30.403515 -0.016896408  -0.19293499 -0.002838995   0.15939564   0.51475148   0.99057236 
 1543000     4.157998    1.2625571    2.8954409  -0.21445525    0.8417945    1.0119221   0.73591616   -1.2465374            1    1.6638223    2.2723044    2.2514461   0.46771635 -0.012545545 -0.030708288 -0.0079739549    1.5085071     1.530727   0.70569695  0.066666667    1.4376909        1e-10 1.7642424e-11    5.6681554    2.4937019    30.403515 -0.0095371163  -0.18411811 -0.0053810392   0.21171247    1.4700703    2.5827519 
 1544000    4.1618733    1.2821773    2.8796961  -0.22417556   0.85487602    1.0088079   0.75909318   -1.2465374            1    1.6638458    2.2612624    2.2545759    0.4756991 -0.010188639  0.026751655 -0.058638459    1.5036391    1.5311601   0.70697131  0.066666667    1.4309164        1e-10 1.7674283e-11    5.6579383    2.4745887    30.403515 -0.0054526069  -0.22656714 -0.0048133302   0.20063133   0.44888246  -0.10159052 
 1545000     4.145681     1.263844     2.881837  -0.21559551   0.84265253     1.004301   0.74205858   -1.2465374            1    1.6988876    2.3018224    2.2959389   0.49890137  0.010617739  0.027404185  0.039206041     1.542276    1.5667947   0.71078351  0.066666667    1.4133704        1e-10 1.7769588e-11    5.6275926    2.4871447    30.403515 0.0058892562  -0.19009021 -0.006509813   0.17019081   -1.2494412   -1.8579095 
 1546000    4.1537322    1.2857714    2.8679607  -0.21189969   0.85727239    1.0084126   0.76322974   -1.2465374            1     1.560433    2.2086894    2.1715513   0.30105839  0.015480215   0.10782133 -0.018019783    1.3993532    1.4277993   0.70096656  0.066666667    1.4093861        1e-10 1.7524164e-11    5.7064063    2.4796379    30.403515  -0.01051275   -0.1876894  0.013059162    0.2058702   -2.1601658   0.14838121 
 1547000    4.1576632    1.2785355    2.8791277  -0.21744952   0.85244791    1.0186152   0.74903948   -1.2465374            1    1.5988207    2.2105964    2.2226209   0.36324473 -0.0056764424  -0.03672155 -0.005142062    1.4407358    1.4648451   0.70614574  0.066666667    1.4263584        1e-10 1.7653643e-11     5.664553    2.5015132    30.403515  0.010611355  -0.17653611  0.010108116   0.20362268  -0.57681367   -1.5566656 
 1548000    4.1567468    1.2677441    2.8890027  -0.21505994    0.8452529    1.0027398    0.7472529   -1.2465374            1    1.5527177    2.1799794    2.1875901   0.29058355 -0.002175293   0.02973174 0.0044455324    1.3950098    1.4208301   0.71241407  0.066666667    1.4371277        1e-10 1.7810352e-11    5.6147122    2.5084933    30.403515 0.0017390467  -0.17986203 0.0021139807   0.21838183    -2.011152   0.52803018 
 1549000    4.1244143    1.2553053     2.869109   -0.2269653   0.83695946    1.0072266   0.73099328   -1.2465374            1    1.5284198    2.1563544    2.1525933   0.27631174 -0.028060275  -0.04898726  0.053628355    1.3741436    1.3959421   0.71636041  0.066666667     1.426173        1e-10 1.790901e-11    5.5837815    2.4878164    30.403515 -0.0088301454  -0.19364602 -0.0042113781    0.2358317  -0.22030899    3.0532536 
 1550000    4.1359618    1.2552935    2.8806683  -0.21535587   0.83695161     1.006239   0.73159605   -1.2465374            1    1.5498347    2.1722804    2.2092687   0.26795511 -0.0078902289 -0.045981961 -0.069246282    1.3954313    1.4174869   0.70585322  0.066666667    1.4286621        1e-10 1.7646331e-11    5.6669005    2.4790078    30.403515 8.0371826e-05    -0.170619 0.0090832895   0.20077919   0.78287143  -0.43042664 
 1551000    4.1344753    1.2476283     2.886847  -0.21336973   0.83184091   0.99577005   0.72982374   -1.2465374            1     1.558531    2.2296095    2.1540741   0.29190933 -0.024485978  0.081673167  0.023201761    1.4045016    1.4275601    0.6994442  0.066666667    1.4221712        1e-10 1.7486105e-11    5.7188265    2.4862758    30.403515 0.0030383675  -0.18338527 -0.0087965593    0.1673195  -0.46905298  -0.34338966 
 1552000    4.1579733    1.2454095    2.9125638  -0.21806524   0.83036154   0.98373107   0.73492491   -1.2465374            1    1.5111878    2.1356605    2.1417901    0.2561127 0.00061108019  0.037411614  0.016355537    1.3560817    1.3818004   0.71073771  0.066666667    1.4226801        1e-10 1.7768443e-11    5.6279552    2.5049284    30.403515  0.011945584  -0.18495202 -0.0075119381   0.19939862   0.85042703   0.38467603 
 1553000    4.1847116    1.2935648    2.8911468  -0.21939331    0.8624685    1.0141378   0.76809699   -1.2465374            1    1.5949097    2.2192866    2.2075029   0.35793954 -0.0079602282   0.11798381 -0.057850303    1.4328027     1.461523    0.7137335  0.066666667    1.4106329        1e-10 1.7843337e-11    5.6043327    2.5119482    30.403515  0.011192028  -0.18988138 0.0092173994   0.18836571   -1.0626183  -0.28511171 
 1554000    4.1638061    1.2783443    2.8854618  -0.21451566   0.85232045    1.0013922   0.75956602   -1.2465374            1    1.6033865    2.2119559    2.2244582   0.37374554 0.0057918443   0.13291782  0.034753335      1.44308    1.4716762   0.70263192  0.066666667    1.4112148        1e-10 1.7565798e-11    5.6928811    2.4869011    30.403515 0.00016311521  -0.20967592 0.0094297686   0.21549135   -2.1072606   0.13177948 
 1555000     4.162236    1.2647074    2.8975285  -0.22435853   0.84322823   0.98954176   0.75219115   -1.2465374            1    1.5039001    2.1515749    2.1342192   0.22590612 0.00082870725  0.046900314 -0.026188461      1.34515    1.3737484   0.70281348  0.066666667    1.4194768        1e-10 1.7570337e-11    5.6914105     2.496695    30.403515 -0.011935287  -0.16934688 -0.0053324224   0.18658704   0.16031962     2.046465 
 1556000    4.1588269    1.2647331    2.8940938  -0.21339938   0.84324536   0.98882195   0.75266754   -1.2465374            1    1.5933796    2.2076252    2.2024031   0.37011061 -0.0056637121  0.096548509 -0.012032207     1.434529    1.4633227   0.71232679  0.066666667     1.408424        1e-10 1.780817e-11    5.6154002    2.5095439    30.403515 0.0027882922  -0.21893934 -0.001849031   0.20004976   -0.9589581    2.6678234 
 1557000    4.1455638    1.2572405    2.8883234  -0.22202206   0.83824971   0.97494332   0.75320693   -1.2465374            1    1.6024841     2.193442    2.2407386   0.37327172 -0.0012002857  0.041957992 -0.050312926    1.4435197    1.4742525   0.70655155  0.066666667    1.4261048        1e-10 1.7663789e-11    5.6612996    2.5007032    30.403515 0.0019042696  -0.19034253 -0.0092586648   0.20786894   -1.5670775    2.8145191 
 1558000    4.1160868      1.24839    2.8676968  -0.21351302   0.83234878   0.98758941   0.73574642   -1.2465374            1    1.5040799     2.149219    2.1211039   0.24191675 -0.0066583982 -0.042618684 -0.021126647    1.3488005     1.374185   0.70682963  0.066666667    1.4184059        1e-10 1.7670741e-11    5.6590723    2.5075906    30.403515 -6.7564195e-05  -0.21524085 -0.0038357324   0.22496917   0.52960874    2.2161336 
 1559000      4.16992     1.282142    2.8877781  -0.22437318   0.85485249    1.0051196   0.76135352   -1.2465374            1    1.5994031    2.2179524    2.2261032   0.35415368 0.00016736792 -0.019294312  0.059125881    1.4387193    1.4672025   0.71755668  0.066666667    1.4157427        1e-10 1.7938917e-11    5.5744725    2.5399177    30.403515 0.0090024776  -0.17972639 0.0026134478   0.17456998  -0.77092708    1.5354446 
 1560000    4.1698243    1.2540432    2.9157811  -0.21974971   0.83611801   0.97254876   0.75123868   -1.2465374            1    1.5829836     2.220955    2.1840317   0.34396415 -0.012026834 -0.047544093  0.027685169    1.4244346     1.455067   0.71066083  0.066666667    1.4408708        1e-10 1.7766521e-11     5.628564    2.4781119    30.403515 0.0013573967  -0.15865627 0.0048568813   0.21623138 -0.093973189   0.33221756 
 1561000    4.1237085    1.2357661    2.8879424  -0.22362817   0.82393194   0.96836559   0.73406306   -1.2465374            1    1.5377493     2.166242    2.1638074   0.28319834 0.0036188498    -0.057204 -0.017311572    1.3828251    1.4103828   0.70810025  0.066666667    1.4334337        1e-10 1.7702506e-11    5.6489177    2.4734583    30.403515 0.0034890559  -0.19566394 0.0062391303   0.17311208   0.10069597    2.2205195 
 1562000    4.1489509    1.2580169    2.8909339  -0.21571018   0.83876742   0.98806162     0.745872   -1.2465374            1    1.6418708    2.2377923    2.2481928   0.43962739 -0.021734902  0.071459776 -0.0039874899    1.4844544    1.5119138   0.71624116  0.066666667    1.4593704        1e-10 1.7906029e-11    5.5847112    2.5137677    30.403515 -0.012141602  -0.15700159 0.0064699231   0.20392476     0.495078   0.38562115 
 1563000      4.15895    1.2661135    2.8928364  -0.21920484   0.84416572   0.97866926   0.76048882   -1.2465374            1    1.4597417    2.0928383    2.1337712   0.15261568 0.0007425645  0.013318478 -0.0051133295    1.2992404    1.3310201   0.71008059  0.066666667    1.4272008        1e-10 1.7752015e-11    5.6331634    2.4731299    30.403515  0.012974426  -0.20336217  0.024742341    0.2012637  -0.21818295   0.76890104 
 1564000    4.1508671    1.2607511    2.8901159  -0.21511675   0.84059041   0.98603176   0.75009642   -1.2465374            1    1.4776475    2.1239702    2.1471225   0.16184974  0.008191507  0.018516254 -0.059973331    1.3193395    1.3479575   0.70562738  0.066666667    1.4405968        1e-10 1.7640684e-11    5.6687143    2.4827336    30.403515 -0.0022092194   -0.1891435 -0.0024799761   0.19475041   -1.0345211    1.8260572 
 1565000    4.1509328    1.2666951    2.8842377  -0.22745643   0.84455344   0.97899418   0.76091575   -1.2465374            1    1.5240396    2.1505601    2.1518283   0.26973049 -0.021569708 -0.023463913 -0.016831143    1.3634482    1.3952753     0.708338  0.066666667    1.4465902        1e-10 1.770845e-11    5.6470216    2.5000827    30.403515 0.0061267626  -0.17383694 -0.0023725009   0.21222934    1.5872545    1.7940358 
 1566000     4.147969     1.252148     2.895821  -0.21872411   0.83485438    0.9764723   0.74674217   -1.2465374            1    1.7070668    2.2886313    2.2889619   0.54360724 -0.010778667 -0.0068875359 -0.019993764    1.5494667    1.5786341   0.71652427  0.066666667    1.4378307        1e-10 1.7913107e-11    5.5825046    2.5003512    30.403515 -0.0001671887  -0.17340838 0.00076631266   0.21059756   -1.4082115    4.9342809 
 1567000     4.141862    1.2513454    2.8905166  -0.22389224   0.83431924   0.98518878   0.74044129   -1.2465374            1    1.4336612    2.1148197     2.071437    0.1147269 -0.0021347593 -0.072961759 -0.059541021     1.277391    1.3040821   0.71367846  0.066666667    1.4444306        1e-10 1.7841961e-11    5.6047649    2.4985899    30.403515 -0.0025637991  -0.18443865 0.0030000878   0.17803332  0.007524181  -0.86033155 
 1568000    4.1521204    1.2666002    2.8855202  -0.21805933   0.84449017    0.9955631   0.75048723   -1.2465374            1    1.5721944    2.2029017    2.1814323   0.33224918 0.0025339908 -0.028157965 0.0072180082    1.4138039    1.4412508   0.70715173  0.066666667    1.4318517        1e-10 1.7678793e-11    5.6564947     2.494319    30.403515 0.0024385921  -0.19991402 -0.010773654   0.18822772  0.082537548     2.039321 
 1569000    4.1466953    1.2691229    2.8775725  -0.21909769   0.84617216    1.0157995   0.74060636   -1.2465374            1    1.5521217    2.1661724    2.1820657   0.30812691  0.006949482  0.050118974 0.0081355201    1.3958166    1.4185164   0.70959329  0.066666667    1.4331112        1e-10 1.7739832e-11    5.6370319      2.49748    30.403515 -0.0064702529  -0.20429393 -0.0026697193   0.17486736   -0.5106603  -0.46091605 
 1570000    4.1661533    1.2662888    2.8998645  -0.21413474   0.84428261   0.99151467   0.75267328   -1.2465374            1    1.6468233    2.2544535    2.2288294   0.45718686 -0.0052944893 -0.0084472007  0.012400847    1.4879714    1.5164121   0.71129579  0.066666667      1.41904        1e-10 1.7782395e-11    5.6235395    2.4840207    30.403515  0.011253989  -0.19213531 -0.013048667   0.21285563   0.73484647   0.66194925 
 1571000    4.1779379    1.2727678    2.9051701  -0.21818661   0.84860239    1.0129823   0.74630719   -1.2465374            1    1.5518236    2.1634264    2.1946134   0.29743079  0.028935141  0.062421534  0.002862566    1.3943153    1.4185888   0.71453135  0.066666667    1.4208249        1e-10 1.7863284e-11    5.5980749    2.4903804    30.403515 0.0051367264  -0.19489309 0.0032339373   0.14950234  -0.88758138     1.248915 
 1572000    4.1784191    1.2902549    2.8881642  -0.22529486   0.86026169    1.0123311   0.76564044   -1.2465374            1    1.4996927     2.152775    2.1270058    0.2192974 -0.015499844  -0.01404925   0.09382247    1.3381042    1.3665436   0.71390828  0.066666667    1.4327609        1e-10 1.7847707e-11    5.6029607    2.4937581    30.403515 -0.001153512  -0.17065516 0.0036880929   0.18934772  -0.83879535   -3.0124621 
 1573000    4.1269719    1.2329034    2.8940684  -0.21540667   0.82202327   0.97122068   0.72918528   -1.2465374            1    1.6409434     2.267509    2.2235421     0.431779  0.012094268  0.035250872 0.0063850048    1.4870487    1.5132014   0.70016462  0.066666667    1.4189442        1e-10 1.7504115e-11    5.7129422    2.4881659    30.403515  0.008081315   -0.2017436 0.0023942137   0.16361501   -2.1725469    2.5550908 
 1574000    4.1760761    1.2655172    2.9105589  -0.21975274   0.84376815   0.98171486   0.75794539   -1.2465374            1    1.5316729    2.1569147     2.138266   0.29983807  0.009770834 0.0018372734 -0.048438876    1.3717084    1.4025507   0.70143592  0.066666667    1.4186979        1e-10 1.7535898e-11    5.7025879    2.4873189    30.403515 -0.0019586001   -0.2044212  0.002508518   0.19042018   -1.3489199   -1.5376279 
 1575000    4.1594291    1.2957859    2.8636432  -0.23017773    0.8639494    1.0275267   0.76215708   -1.2465374            1    1.6292799    2.2382049     2.254592    0.3950427 -0.013582315  0.053605017 -0.029045931    1.4684265    1.4941322   0.72046173  0.066666667    1.3957164        1e-10 1.8011543e-11    5.5519951    2.4917045    30.403515 0.0086470773  -0.15481413 0.0081200617   0.21353311 -0.080752866 -0.085751475 
 1576000    4.1787845    1.2778001    2.9009843  -0.21167271   0.85195762    1.0149653   0.75051817   -1.2465374            1    1.5522922    2.1593825    2.2030705   0.29442359 -0.014378403   0.11812532  0.062108239    1.3938952    1.4187967   0.70706453  0.066666667    1.4029139        1e-10 1.7676613e-11    5.6571923    2.4863141    30.403515 0.0037397057  -0.16913807  0.011448657   0.17400323   0.73962267   -1.1673196 
 1577000    4.1518111    1.2518746    2.8999365  -0.21141426   0.83467208   0.97746706   0.74582629   -1.2465374            1    1.6537985     2.249639    2.2631069   0.44864955  0.012040234  0.043964378  0.043857604    1.4963917     1.525235   0.70022499  0.066666667    1.4079476        1e-10 1.7505625e-11    5.7124496    2.4880817    30.403515 -0.017750165  -0.20035067 -0.0016605994   0.18117134    1.3631162  -0.55577836 
 1578000    4.1754055    1.2770997    2.8983058  -0.21442354   0.85149058   0.99541711   0.76194252   -1.2465374            1    1.5631078    2.2082087    2.1833053   0.29780929 -0.0066181098 -0.0032476719  0.043200782    1.4022997    1.4321834   0.70888584  0.066666667    1.4153102        1e-10 1.7722146e-11    5.6426575    2.4729211    30.403515 -0.0021433893  -0.17402301 -0.0033790024    0.2014926    1.7387752  -0.23046703 
 1579000    4.1452381    1.2500731     2.895165  -0.21559862   0.83347096   0.99353858   0.73386059   -1.2465374            1    1.6167927    2.2591514    2.2013551   0.38987167 0.0072037024   0.12298679 -0.002465934    1.4619113    1.4861154    0.7121318  0.066666667    1.3977676        1e-10 1.7803295e-11    5.6169378    2.4763708    30.403515 -0.00052070902  -0.19448551  0.011019104   0.18225751  -0.73335196  -0.49028666 
 1580000    4.1323089      1.25728    2.8750289  -0.22420314   0.83827609   0.97558499   0.75284986   -1.2465374            1     1.600616    2.2290545    2.2206139   0.35217959 0.0083275096   -0.0592709 0.0049874913    1.4417269    1.4723001   0.70703108  0.066666667    1.4193859        1e-10 1.7675777e-11    5.6574599    2.4952462    30.403515 -0.0012638844   -0.1888295  0.014534406   0.20220628   -1.6233997   0.75180886 
 1581000    4.1409709    1.2513275    2.8896433  -0.21092188   0.83430735   0.98248338     0.742108   -1.2465374            1    1.7604699    2.3357564    2.3435149   0.60213836  0.010055503  0.079640574 -0.014500705    1.6038479    1.6312466   0.70386225  0.066666667    1.4067897        1e-10 1.7596556e-11    5.6829301    2.4792458    30.403515 -0.0025705045  -0.19402804  0.013309821   0.18305912   -2.3929195    3.0990558 
 1582000    4.1843025    1.2922966    2.8920059  -0.22640745   0.86162295    1.0099886   0.76931014   -1.2465374            1    1.4754447    2.1157709    2.1180868   0.19247644 -0.0029720073   0.12650479  0.037174213    1.3130817    1.3426037    0.7093267  0.066666667    1.3972953        1e-10 1.7733168e-11    5.6391505    2.4933004    30.403515 0.0030751209  -0.15550749 -0.011502348   0.18150081   -2.9062225   -2.6673074 
 1583000     4.187219    1.2776334    2.9095857  -0.21778806   0.85184644   0.98871875   0.76669464   -1.2465374            1    1.6847446    2.2838969    2.2716842   0.49865269 -0.016005236   0.13576178 0.0035161472    1.5229336    1.5547012   0.70767877  0.066666667    1.4021439        1e-10 1.7691969e-11     5.652282     2.489327    30.403515 0.00045306926  -0.19291367 -0.0081642418   0.16837774   -2.0136936    1.7169323 
 1584000    4.1446448    1.2711141    2.8735307  -0.22352146   0.84749976   0.99619972   0.75497619   -1.2465374            1    1.5203036    2.1731535    2.1642602    0.2234969 0.00026113799  0.031532149 -0.024628925    1.3609657    1.3892762   0.71090233  0.066666667    1.4122629        1e-10 1.7772558e-11     5.626652    2.5106073    30.403515 -0.0034808817  -0.20172722 0.0045008596    0.1887316  -0.78583683    1.5363917 
 1585000    4.1748148    1.2704427    2.9043722  -0.21861825   0.84705214   0.99495466   0.75502545   -1.2465374            1    1.7090807    2.3044026    2.2946681   0.52817143 0.0048503244 -0.046370336  0.017511725    1.5497325    1.5782171   0.70197048  0.066666667    1.4124408        1e-10 1.7549262e-11    5.6982453    2.4757679    30.403515 0.00035196273  -0.19835811 0.0016414301   0.20779263  -0.10018839    4.2684955 
 1586000    4.1643641    1.2511269    2.9132373  -0.20871888   0.83417354   0.99016042   0.73710641   -1.2465374            1    1.4955025    2.1165581    2.1518783   0.21807101 0.0070052111  -0.16587747 -0.035856592    1.3399361    1.3652695   0.70312436  0.066666667    1.4155926        1e-10 1.7578109e-11    5.6888941    2.4921662    30.403515 0.0095531668  -0.15842263 -0.0059236006   0.17272342   0.93034127    1.2668232 
 1587000    4.1918923    1.3032616    2.8886307   -0.2098279   0.86893374   0.99929292   0.78784391   -1.2465374            1    1.5629161    2.1860618    2.1947425    0.3079439 -0.0088341075   0.01535194 -0.0097881419    1.3966415    1.4314819   0.70953155  0.066666667    1.4160705        1e-10 1.7738289e-11    5.6375224    2.4977668    30.403515 -0.0026919599  -0.20261049 0.0086602617   0.25895379  -0.78253344  -0.60711577 
 1588000    4.1324469    1.2570164    2.8754305  -0.23347034   0.83810033    1.0032949   0.73529561   -1.2465374            1    1.6445858    2.2701029    2.2270668   0.43658765 -0.0027978423  -0.12735795 -0.0086635278    1.4894015    1.5126252   0.71079204  0.066666667    1.4144857        1e-10 1.7769801e-11    5.6275251    2.4912218    30.403515 -0.009787653  -0.21382048 -0.011870335     0.212289    2.2585941    3.3639867 
 1589000    4.1658346    1.2480727    2.9177619  -0.21024617   0.83213719   0.98488596   0.73708772   -1.2465374            1    1.5204826    2.1507742    2.1551277   0.25554573 0.0086676098 -0.027985137  0.044928603    1.3649201    1.3909433   0.70071407  0.066666667     1.431819        1e-10 1.7517852e-11    5.7084625    2.4963001    30.403515  0.021168389  -0.15206377 -0.016563578    0.2019935    2.0008641   0.13627148 
 1590000    4.1687696     1.274852    2.8939176   -0.2171251   0.84999201    1.0112731   0.74962824   -1.2465374            1    1.6886791    2.2783534    2.2700125   0.51767131 -0.003707645   0.07320435 -0.038861635    1.5304699    1.5556692   0.69821536  0.066666667    1.4210591        1e-10 1.7455384e-11    5.7288914    2.4950321    30.403515 0.0016870524  -0.18263642 -0.00031077611   0.18363681   0.44082231  -0.17186518 
 1591000    4.1763529    1.2843662    2.8919867  -0.22338499   0.85633548    1.0305074   0.74793922   -1.2465374            1    1.5623935    2.1825137    2.1872793   0.31738764 0.0036329464  -0.07476734 -0.027247907    1.4045409    1.4268538   0.70465427  0.066666667    1.4215117        1e-10 1.7616357e-11    5.6765426    2.4869192    30.403515 0.0011683598  -0.21869994 0.0088596811   0.20845999    2.9324542    2.7893266 
 1592000    4.1718494    1.2631745    2.9086749  -0.21694729   0.84220613    1.0056738   0.74047836   -1.2465374            1    1.6269928    2.2463946    2.2260081   0.40857574 -0.0093580575   0.10853786 0.0070330516    1.4707147    1.4947194   0.70612144  0.066666667    1.4228548        1e-10 1.7653036e-11     5.664748    2.4863853    30.403515 -0.0072751808  -0.20947215 -0.010462189   0.18305137    -1.878833    -0.761366 
 1593000    4.1905421    1.2763477    2.9141944  -0.21788751   0.85098923   0.99857121   0.75916299   -1.2465374            1    1.5350562    2.1819935    2.1530291   0.27014591 0.0066780912  0.037016636  0.008239108    1.3748347    1.4037169   0.70678907  0.066666667     1.424216        1e-10 1.7669727e-11    5.6593971    2.5088959    30.403515 -0.010393078  -0.18887003 -0.0029496112   0.19478209  -0.92102149   0.45344303 
 1594000    4.1785513    1.2675074    2.9110439  -0.21154025   0.84509507     1.006708   0.74452368   -1.2465374            1    1.5984504    2.2241995    2.1858431   0.38530849 -0.00076825703  0.021479279  0.047166797    1.4413185    1.4660409   0.69391714  0.066666667    1.4158956        1e-10 1.7347929e-11     5.764377    2.4905499    30.403515 0.0081363619  -0.19938531  0.014899113   0.17705443  -0.69260678   0.81728827 
 1595000    4.1664594    1.2928078    2.8736516  -0.21009088   0.86196377    1.0151444   0.76665035   -1.2465374            1     1.676097    2.2669345    2.3169127    0.4444439 0.0037179594 -0.056345434 -0.046979196    1.5142954     1.542578   0.69695461  0.066666667    1.4292263        1e-10 1.7423865e-11    5.7392547    2.4903874    30.403515 -0.00051301218  -0.20746978 -0.008282108    0.1908165  -0.18124914   0.98733968 
 1596000    4.1725531     1.274557    2.8979961  -0.21451963   0.84979531    1.0094466   0.75044719   -1.2465374            1    1.4244075    2.0776475    2.1041404  0.091434548 0.00081973813  0.096981612 -0.021711027    1.2660255    1.2916378   0.71591496  0.066666667    1.4082692        1e-10 1.7897874e-11    5.5872558    2.5097696    30.403515 -0.0030399996  -0.22034428 -0.0092135834   0.16916461  -0.15392452   -1.9235166 
 1597000    4.1793777    1.2961237     2.883254  -0.22451205   0.86417464    1.0110245   0.77280697   -1.2465374            1    1.7726576    2.3379428    2.3436382   0.63639181  0.013150015  0.022733007  0.016133179    1.6095566    1.6396804   0.71371565  0.066666667    1.4199484        1e-10 1.7842891e-11    5.6044729    2.4783192    30.403515 0.0032176383  -0.20269366  0.001189616   0.18963676    1.3450538    3.9807962 
 1598000    4.1744728    1.2789689    2.8955039  -0.21831841   0.85273686   0.99209588   0.76603549   -1.2465374            1    1.5351878     2.171621    2.1539625   0.27997996 0.0077276298 -0.021504819  0.025955243    1.3735159    1.4047002    0.7036772  0.066666667    1.4516689        1e-10 1.759193e-11    5.6844246    2.5123472    30.403515 0.0062150008   -0.2068282 0.0054432322   0.15575569   0.82484796    2.0349077 
 1599000    4.1453173    1.2590291    2.8862882  -0.21168587   0.83944225   0.98761514   0.74724575   -1.2465374            1    1.5938928    2.2158963    2.2136081   0.35217408 0.00012326513 0.0056901436 -0.015303467    1.4361865    1.4639946   0.70184306  0.066666667    1.4324923        1e-10 1.7546076e-11    5.6992798    2.4842672    30.403515 -0.0071356416  -0.17043996 -0.014063724   0.18507497  -0.13417438     5.341139 
 1600000    4.1633165     1.270165    2.8931514  -0.22118175   0.84686701    1.0114968   0.74441582   -1.2465374            1    1.5892135     2.190019    2.2127664   0.36485503  0.022747628 -0.041694238   0.10784513    1.4321044    1.4561742   0.71509045  0.066666667    1.4419637        1e-10 1.7877261e-11     5.593698    2.4804793    30.403515 0.0022855689  -0.21366126 -0.0025005559   0.18206999    1.0754893    1.9254449 
 1601000    4.1896384    1.2864247    2.9032137  -0.21655676   0.85770794   0.99464642   0.77251593   -1.2465374            1    1.5229781    2.1715446    2.1553542   0.24203537 -0.0090990731 -0.030270097 -0.062203207    1.3599384     1.392155   0.71005454  0.066666667      1.42797        1e-10 1.7751364e-11    5.6333701    2.4980606    30.403515 0.0071844834  -0.21550919 -0.0017822276   0.18707073 -0.098814825    1.2664063 
 1602000    4.1960068    1.2902548     2.905752  -0.22333994   0.86026161    1.0096047   0.76733946   -1.2465374            1    1.4757299    2.1305696    2.0865675   0.21005276 0.0012421408 -0.074500321 -0.012999542    1.3137828    1.3429395   0.69980416  0.066666667    1.4402338        1e-10 1.7495104e-11    5.7158849    2.4806813    30.403515  0.015204278  -0.20859073 -0.0073515438   0.20905002   0.20872662  -0.14687586 
 1603000    4.1615601    1.2789005    2.8826596  -0.21762997   0.85269125    1.0162916   0.75088262   -1.2465374            1    1.6880252    2.2709883    2.2919771    0.5011101  0.010024266 -0.077156698  0.087659178    1.5295513    1.5543552   0.71040597  0.066666667    1.3761649        1e-10 1.7760149e-11    5.6305833    2.5162827    30.403515 -0.0014847289  -0.16454027  0.011048246   0.19519612    1.1688945    1.9727176 
 1604000    4.1769235    1.2618874     2.915036   -0.2136314   0.84134803    1.0027503   0.74090727   -1.2465374            1    1.6462831      2.25289    2.2288986   0.45706081 -0.011369457  -0.13351789 -0.057413219    1.4899145    1.5143942   0.71320074  0.066666667    1.3855508        1e-10 1.7830019e-11    5.6085191     2.482585    30.403515 -0.0052308513  -0.18247801 0.0030843095   0.20275856  -0.13434106    1.9881272 
 1605000    4.1743042    1.2572033    2.9171009  -0.20989297   0.83822494    1.0015583   0.73658019   -1.2465374            1    1.4666665    2.1169507    2.0978539   0.18519487 0.0026985972  -0.12090672  0.041132379    1.3112111    1.3349343   0.70337246  0.066666667    1.3695749        1e-10 1.7584312e-11    5.6868874    2.4875348    30.403515 0.0010949441  -0.19213065 0.0042039358    0.2075447  -0.30406937    3.9593271 
 1606000    4.2050515    1.2943539    2.9106976  -0.21605858   0.86299466   0.99700127   0.77963071   -1.2465374            1    1.7123906    2.3054077    2.2994312   0.53233288 0.00035840061  -0.11277786 -0.069833968    1.5478494    1.5812578   0.70552409  0.066666667    1.3654644        1e-10 1.7638102e-11    5.6695442    2.4911685    30.403515 -0.012988465  -0.17765722 0.0018151794    0.2053288  -0.06088785    3.3241806 
 1607000    4.1729256    1.2718605    2.9010651  -0.22935401   0.84799744    1.0091703   0.74770081   -1.2465374            1    1.6256018    2.2165731     2.229873    0.4303593  0.014344234   0.12141486 -0.033788294    1.4677994    1.4928685   0.70794641  0.066666667    1.3731332        1e-10 1.769866e-11    5.6501452    2.4910389    30.403515 -0.003090736  -0.20227149 -0.011673752   0.20482094   -3.0910426    2.3925748 
 1608000    4.1759633    1.2685238    2.9074395  -0.20572407   0.84577271    1.0067002   0.74562858   -1.2465374            1    1.6205871    2.1999228    2.2314462   0.43039235 0.0010767518   0.11053254 0.0053551424    1.4632221    1.4881787    0.7092071  0.066666667    1.3955493        1e-10 1.7730177e-11    5.6401015    2.4878448    30.403515  0.005181143  -0.18347868 0.0042959807   0.21195399   -1.6845993    1.4666352 
 1609000     4.157471    1.2608043    2.8966667  -0.21912756   0.84062584    1.0014324   0.74055618   -1.2465374            1    1.6080356    2.2461226     2.227862   0.35012212 0.0013731001  0.052701509 0.0023342475    1.4517411      1.47632    0.7017957  0.066666667    1.4084958        1e-10 1.7544893e-11    5.6996644    2.4819596    30.403515 0.0065770325  -0.18282046 0.0043321594   0.21733761 -0.049775062    1.2617579 
 1610000    4.1644578     1.272368    2.8920898  -0.21898789   0.84833579   0.99807937   0.75516197   -1.2465374            1    1.5488394     2.172899    2.1784749   0.29514434 -0.0071672471  0.084304379    0.0855428    1.3894623    1.4175648   0.70039835  0.066666667    1.3915908        1e-10 1.7509959e-11    5.7110357    2.5016895    30.403515 0.0084773201  -0.19278284 -0.010149972   0.15689247  -0.41237818    3.4277912 
 1611000    4.1680001    1.2961555    2.8718446   -0.2161077   0.86419584    1.0547796   0.74557303   -1.2465374            1    1.5483735    2.1670045    2.1976956   0.28042028  0.028314802 -0.074932721 -0.020751209    1.3910202    1.4096413   0.70973963  0.066666667    1.3939192        1e-10 1.7743491e-11    5.6358696    2.4999433    30.403515 -0.0077177702  -0.20107767 -0.0028052097   0.20951975    1.5003542    2.2405251 
 1612000    4.1668346    1.2708587    2.8959759  -0.21664946   0.84732954    1.0185447   0.74077439   -1.2465374            1    1.5731593    2.2153038    2.1629377    0.3412362 0.0041287673   0.10926358  0.014884361    1.4168187    1.4391929   0.71103145  0.066666667    1.3783693        1e-10 1.7775786e-11    5.6256302    2.4872968    30.403515 0.0079684604  -0.20109318 -0.0012119077   0.20840821   0.27882474   0.24573516 
 1613000    4.1718779    1.2785466    2.8933314  -0.21650828   0.85245529    1.0293678   0.74235042   -1.2465374            1    1.4755615    2.1149003    2.1507205   0.16106365 -0.00053095951 -0.096317034 -0.026202168    1.3188883    1.3401716   0.70213951  0.066666667    1.4029872        1e-10 1.7553488e-11    5.6968735    2.4884249    30.403515 -0.0051485119   -0.1964276 -0.0050181701    0.1610921   0.83098711   0.17322936 
 1614000    4.1935893    1.2977191    2.8958702  -0.21714808   0.86523835    1.0216368   0.76792012   -1.2465374            1    1.3960856    2.0880227    2.0528985  0.047335577 0.0084520367 -0.099476761 -0.049968053    1.2340159    1.2617126   0.70267295  0.066666667    1.3961463        1e-10 1.7566824e-11    5.6925488    2.4953005    30.403515  0.013175265  -0.19941824 0.00022094977   0.16253814   0.32307508  -0.83217872 
 1615000    4.1590324    1.2671966    2.8918357  -0.20939325   0.84488787    1.0198224   0.73601434   -1.2465374            1    1.6627476    2.2530695    2.2793482     0.455825  0.011307864 -0.001721758  0.032252725    1.5074116    1.5286132   0.70351537  0.066666667    1.3612454        1e-10 1.7587884e-11    5.6857322    2.4926148    30.403515 -0.0078705756  -0.18454314 0.0059235639   0.18734453  0.027636824   -1.0678443 
 1616000    4.1921394    1.2932018    2.8989376  -0.22401612    0.8622265    1.0299137   0.75787256   -1.2465374            1    1.6718436    2.2646031    2.2660725   0.48485518 -0.015290522 -0.012864854   0.02402197    1.5118945    1.5363819   0.70195243  0.066666667    1.3795163        1e-10 1.7548811e-11    5.6983919    2.4777649    30.403515 0.0017704391  -0.15887543   0.01024805   0.16818853  -0.28082845  -0.48875299 
 1617000    4.1826281    1.2812405    2.9013876  -0.20927765   0.85425145    1.0167981   0.75309973   -1.2465374            1    1.5902955    2.2235907    2.2015713   0.34572457  0.013213629  0.071157452 -0.018335758    1.4313537    1.4565589   0.70400212  0.066666667    1.3868598        1e-10 1.7600053e-11     5.681801    2.4789317    30.403515 -0.00032334824  -0.14392669 0.0091907932   0.20475689   -1.3548203  -0.11248477 
 1618000    4.1640327    1.2689449    2.8950878  -0.21928806    0.8460535    1.0035278   0.74806146   -1.2465374            1    1.5330138    2.1818092    2.1604529   0.25677925 0.0058036855   0.14761613 0.0078585552    1.3751353    1.4010226   0.71233922  0.066666667    1.3938922        1e-10 1.7808481e-11    5.6153022    2.5158438    30.403515 -0.0017276801  -0.16732022 -0.0030463188   0.16750633   -1.2928363   -1.0415496 
 1619000     4.147938    1.2692593    2.8786788  -0.22139009   0.84626311    1.0260995   0.73433496   -1.2465374            1    1.6902918    2.2893131    2.2830095   0.49855267 -6.6754855e-05   0.09944439  0.015203789    1.5353102    1.5553318   0.71398606  0.066666667    1.4209114        1e-10 1.7849651e-11    5.6023503    2.4890096    30.403515 0.0062803449  -0.22094627 -0.0032562087   0.20016533   -1.0478119    1.7166055 
 1620000    4.1992473    1.2938293     2.905418  -0.21275747   0.86264486    1.0258667    0.7610738   -1.2465374            1    1.7201289    2.2943858    2.2949905   0.57101044 0.0075973989  0.036120396 -0.070042634    1.5595042    1.5851995   0.69822685  0.066666667    1.4225614        1e-10 1.7455671e-11    5.7287972    2.4698487    30.403515 -0.0071369535  -0.19513833 -0.00050601025   0.19041959   0.64959171    1.0390153 
 1621000    4.1709117    1.2873425    2.8835692  -0.21854034   0.85831987    1.0197617   0.75785741   -1.2465374            1    1.6693743     2.271586    2.2844885   0.45204847 0.0015381763 -0.012638239  0.051811349    1.5094284     1.535248   0.69871557  0.066666667    1.4116721        1e-10 1.7467889e-11    5.7247901    2.4833733    30.403515 0.0056775934  -0.18965224 0.0093143409   0.22106772    1.1560467   0.93546699 
 1622000     4.177801    1.2748602    2.9029408  -0.21548126   0.84999746    1.0174485   0.74578855   -1.2465374            1    1.5158867    2.1423054    2.1643005   0.24105412 -0.013687348  0.027015363 -0.057018547    1.3584879    1.3820645   0.70328704  0.066666667    1.4110876        1e-10 1.7582176e-11    5.6875781    2.4779045    30.403515 0.00082772234  -0.18313442  0.013977726   0.20242458   0.37424243   0.43838876 
 1623000    4.1663793     1.271817    2.8945623  -0.21674503   0.84796844    1.0152519   0.74386365   -1.2465374            1    1.5948006    2.2398853    2.1993418   0.34517478 -0.0066591979 0.0037170982  -0.04295229    1.4378081    1.4612674   0.70822494  0.066666667    1.3880811        1e-10 1.7705623e-11    5.6479231    2.4875367    30.403515 0.0058093576  -0.23088762   0.01591013   0.17374282    1.0121929     1.174138 
 1624000     4.181123    1.2620972    2.9190258  -0.21429308   0.84148787   0.99480788   0.74608402   -1.2465374            1    1.6033135     2.210244    2.1811153    0.4185811 -0.031834314 -0.087543197  0.019690558    1.4458523    1.4724692   0.70888909  0.066666667    1.3926891        1e-10 1.7722227e-11    5.6426316    2.5006571    30.403515 0.0024514476  -0.22353929 -0.0026345871   0.19917024   0.53065841    1.6947077 
 1625000    4.1916607    1.2754004    2.9162603  -0.20807223   0.85035763   0.99539852   0.76011489   -1.2465374            1    1.5528402    2.1759231    2.1618736   0.32072402 0.0018101173  0.062998066  0.037120082    1.3924179    1.4219183   0.70102422  0.066666667    1.4246275        1e-10 1.7525605e-11     5.705937    2.4949687    30.403515 -0.0014312485  -0.23181665 0.0058342272   0.21831806   -1.2099566  -0.86281742 
 1626000    4.2029494    1.2668895    2.9360599  -0.20771996   0.84468308   0.99647523   0.75023195   -1.2465374            1    1.5551393    2.1666521    2.1828034   0.31596237 -0.0015598606    0.1617749 -0.039334798    1.3968027    1.4240757   0.70453191  0.066666667    1.4142665        1e-10 1.7613298e-11    5.6775285    2.4841107    30.403515 -0.012398664  -0.17895416 -0.032135828   0.20635163   -1.2238741  -0.05439416 
 1627000     4.182822    1.2806798    2.9021422   -0.2290591   0.85387761    1.0087996   0.75747751   -1.2465374            1    1.4634117    2.1163819    2.1262683   0.14758492 -0.0069880089   0.13931555 0.0082178576     1.303546    1.3307271   0.71063399  0.066666667    1.3766846        1e-10 1.776585e-11    5.6287766    2.4862653    30.403515 0.0076011872  -0.20903649  0.020278763   0.17677095  -0.52904359  -0.71245755 
 1628000    4.1639175    1.2686008    2.8953167  -0.20946957   0.84582405    1.0119053   0.74246809   -1.2465374            1     1.734791    2.3089284    2.3255074   0.56993709 0.0072728595  0.038123347  0.056508951     1.578093    1.6016979   0.70020278  0.066666667    1.3802196        1e-10 1.7505069e-11    5.7126309    2.4767597    30.403515 -0.0065591178  -0.21744469  0.012672574   0.16271081   0.79781359    2.9233998 
 1629000    4.1784829    1.2691146    2.9093683  -0.22374268   0.84616663   0.99761767   0.75192835   -1.2465374            1    1.7268174    2.3039463    2.2998564   0.57664931 -0.0066012449   0.11983658  0.052448637    1.5681228    1.5956035   0.69429624  0.066666667    1.3647176        1e-10 1.7357406e-11    5.7612295     2.487354    30.403515 0.0013248823   -0.2060725 -0.0014780148   0.18481558   -0.1952778    1.1785808 
 1630000    4.1435238     1.259937    2.8835868  -0.20624835   0.84004759    1.0005669   0.74015689   -1.2465374            1    1.4571148    2.1226787    2.1398575   0.10880817 -0.023277322  0.098383994  -0.01165397    1.3009045     1.325513   0.69615561  0.066666667    1.3547563        1e-10 1.740389e-11    5.7458418    2.4887876    30.403515 0.0072682983   -0.1790607 -0.0023521621   0.18737137   -0.4960331   0.75484808 
 1631000    4.1695958    1.2590944    2.9105014  -0.21584712   0.83948578   0.97714151   0.75384362   -1.2465374            1     1.563796    2.1933152    2.1741697   0.32390324 -0.0029560637  -0.08827709   0.02679195    1.4046972    1.4352753   0.70718386  0.066666667    1.3512398        1e-10 1.7679597e-11    5.6562377    2.4815619    30.403515 0.0052328741  -0.16948614 0.0057833289   0.19718957 -0.033296481    2.1454652 
 1632000    4.1478714    1.2816469    2.8662245  -0.22312013    0.8545224    1.0172601   0.75325165   -1.2465374            1    1.6562424    2.2672226    2.2563178   0.44518678 -0.0083290785 0.0092980746 -0.023286068    1.4972685     1.522445     0.708327  0.066666667    1.3835244        1e-10 1.7708175e-11    5.6471093    2.4610852    30.403515   0.00695247  -0.18956511 0.0035118841   0.17608108   -2.6462614   0.20802519 
 1633000    4.1624557    1.2874229    2.8750328  -0.21721686    0.8583735    1.0168786   0.75974119   -1.2465374            1    1.5890805    2.2201003     2.209234    0.3379072 -0.0016251074   0.10238841  -0.03805196     1.428737    1.4553333   0.70409534  0.066666667    1.4124687        1e-10 1.7602384e-11    5.6810488    2.4736072    30.403515 0.00088395301  -0.19890121 -0.013071713   0.21953514   -1.0876882  -0.80869959 
 1634000    4.1288885    1.2402298    2.8886587  -0.21059749   0.82690807   0.97872097   0.73244094   -1.2465374            1    1.5569272    2.1940624    2.1851052   0.29161397 -0.017050641  -0.08628022    0.0251257    1.4023454    1.4281988   0.69885896  0.066666667    1.4100301        1e-10 1.7471474e-11    5.7236155    2.4975103    30.403515 -0.0020224553   -0.1928388 0.0070894889    0.2171377   0.31575782  -0.23110614 
 1635000    4.1932568    1.2837449     2.909512   -0.2175322    0.8559212    1.0092498   0.76051452   -1.2465374            1    1.6285965    2.2025758    2.2703283   0.41288533 0.0061030208 -0.079970173 -0.070871799    1.4680898    1.4958527   0.69616073  0.066666667    1.4218787        1e-10 1.7404018e-11    5.7457995    2.4737784    30.403515  0.007354454  -0.18500215 -0.0010610479   0.16769006   -1.4305781  0.011435265 
 1636000    4.1811419    1.2819293    2.8992126  -0.20863208   0.85471069    1.0219385   0.75064175   -1.2465374            1    1.6329601    2.2594952    2.2439955   0.39538971 -0.0041327653  0.040562114  0.034190308    1.4745371    1.4985474   0.70448224  0.066666667    1.4336586        1e-10 1.7612056e-11    5.6779288    2.5056187    30.403515 -0.0064985334  -0.17048215 -0.013429166    0.1632357  -0.93884744  -0.43807699 
 1637000    4.1632414    1.2614775    2.9017639  -0.22210036   0.84107472    1.0037268   0.73985501   -1.2465374            1     1.573509    2.1786798    2.1824095   0.35943783 0.00047722295  0.081155182 -0.0075848094    1.4173625    1.4414917   0.70725964  0.066666667    1.4321728        1e-10 1.7681491e-11    5.6556316    2.4928403    30.403515 0.0011698733  -0.20543254 0.0031942041   0.18978341   -0.4091761  -0.35150772 
 1638000    4.1602889    1.2510623    2.9092266  -0.21270811   0.83413048   0.99912101   0.73145225   -1.2465374            1    1.6867589    2.2768343    2.2959623   0.48748014  0.020146095   0.10520593 -0.020987986    1.5323858    1.5553473   0.69693347  0.066666667    1.4251475        1e-10 1.7423337e-11    5.7394288    2.4785545    30.403515  0.017755845  -0.20941644 0.0019786534   0.16326343  -0.43912596    2.0927736 
 1639000    4.1220581    1.2628719    2.8591862  -0.22485757    0.8420044    1.0258859    0.7275546   -1.2465374            1    1.4724259     2.114014    2.1275905   0.17567329 0.00072002086   0.11482117 0.0019180697    1.3188754     1.337494   0.70608948  0.066666667    1.4520611        1e-10 1.7652237e-11    5.6650044    2.5065353    30.403515 -0.019779619  -0.18142309 -0.00029236772   0.26257021   0.61322758   0.53422287 
 1640000    4.1589061    1.2710304    2.8878757  -0.21189444   0.84744398    1.0167094   0.74210392   -1.2465374            1    1.4878183    2.1351789    2.1566112   0.17166473 0.0057980753  0.079548145   0.01038267    1.3311971    1.3540933   0.70905989  0.066666667    1.4480958        1e-10 1.7726497e-11    5.6412725    2.4896491    30.403515 0.0055889956  -0.16367379  -0.01200696   0.17325639  -0.74877654   0.27377323 
 1641000      4.18633    1.2772785    2.9090514   -0.2070766   0.85160986    1.0242839   0.74414627   -1.2465374            1    1.5558968    2.1550499    2.2081375   0.30450317 0.00012008052  0.034628051 -0.020076252    1.3988447    1.4211757   0.71262515  0.066666667    1.4466265        1e-10 1.7815629e-11    5.6130491    2.5014971    30.403515 -0.0030104611  -0.19927289 0.00021443185   0.18716459  -0.96337732   -3.6426195 
 1642000    4.1638846    1.2709537    2.8929309  -0.22075419   0.84739288    1.0067027   0.74825717   -1.2465374            1    1.6464477    2.2571404    2.2485121   0.43369064 -0.0065786488  0.026708906  0.002467569    1.4885279    1.5140389    0.7065581  0.066666667    1.4411871        1e-10 1.7663953e-11    5.6612471    2.4799522    30.403515 -0.0097057315  -0.20452178 0.0034937006   0.19115135 -0.015488577    1.1121352 
 1643000    4.1688508    1.2603671    2.9084836  -0.21591071   0.84033437   0.99998133   0.74098734   -1.2465374            1    1.5602845    2.1588976    2.2118782   0.31007763 -0.0068350847 -0.019484886  0.070950519     1.403899    1.4287597   0.69621828  0.066666667    1.4215489        1e-10 1.7405457e-11    5.7453246    2.4850275    30.403515 -0.0038745957  -0.18675045 -0.0064521783   0.19213196   0.18967234  -0.42220642 
 1644000    4.1794742    1.2734037    2.9060705  -0.20688225   0.84902636     1.000483   0.75478504   -1.2465374            1    1.7427432    2.3112431    2.3538196   0.56316688 -0.0070775419 -0.037263162  0.063760346    1.5834457    1.6111525    0.7059125  0.066666667    1.4258386        1e-10 1.7647812e-11    5.6664247     2.489229    30.403515 0.0078798744  -0.19573611 -0.0023324391   0.21561455  -0.77253242  -0.39291903 
 1645000    4.1816705    1.2735541    2.9081164  -0.21647133    0.8491266    1.0116629   0.74798047   -1.2465374            1    1.4569224    2.1050305    2.0942348   0.17150183  -0.01033337 -0.069026586  -0.02163996     1.299061    1.3238612   0.71398293  0.066666667     1.427287        1e-10 1.7849573e-11    5.6023749    2.4997646    30.403515  0.010391087   -0.2017497 -0.0093628959   0.18725084  -0.42512149  -0.06460203 
 1646000    4.1592427    1.2689607     2.890282  -0.22494795   0.84606401    1.0072405   0.74576475   -1.2465374            1    1.6588475    2.2755161    2.2399029   0.46112354  -0.01751369 0.00013907341 -0.056099058    1.5014537     1.526368   0.70614754  0.066666667    1.4210991        1e-10 1.7653689e-11    5.6645386    2.4860146    30.403515 -0.00090390602  -0.16464746 0.0034156891   0.18806736   -0.9303803    1.1910868 
 1647000    4.1608733    1.2673106    2.8935626  -0.21812533   0.84496389   0.98990166   0.75478448   -1.2465374            1    1.6178518    2.2098196    2.2347958   0.40894011 -0.0027197312  -0.12372584 -0.031824514    1.4585544    1.4876528    0.7038149  0.066666667    1.4277426        1e-10 1.7595373e-11    5.6833125    2.4970158    30.403515 0.0090087701   -0.1852964 0.0027560085   0.20790219  -0.25374474 -0.081770322 
 1648000     4.166502    1.2740955    2.8924065  -0.21331013    0.8494876   0.99842483   0.75681649   -1.2465374            1    1.5004079    2.1399267    2.1234064   0.23789057   0.01010584 -0.050406457  0.015738604    1.3406817    1.3690879   0.70077452  0.066666667    1.4240356        1e-10 1.7519363e-11    5.7079701    2.4908042    30.403515 -0.001063042  -0.16614735 -0.0027674702   0.22789401    1.9625639   -1.6236999 
 1649000    4.1557461    1.2551879    2.9005582   -0.2188595   0.83688117   0.98629152   0.74391304   -1.2465374            1    1.7525643     2.329691    2.3177534   0.61024843 -0.0076586186 -0.079369525  0.018142837    1.5955613    1.6228401   0.71270996  0.066666667    1.4102172        1e-10 1.7817749e-11    5.6123813    2.5278113    30.403515 -0.0021007142  -0.21540774 -0.011353654   0.22163358    2.1569937    2.2996709 
 1650000    4.1637015    1.2633716    2.9003299  -0.21498646   0.84233759   0.98780509    0.7518276   -1.2465374            1    1.6440959    2.2617311    2.2451067   0.42544987  -0.01099318  -0.08018243   -0.0123304    1.4854225    1.5141727   0.70736628  0.066666667    1.4030185        1e-10 1.7684157e-11     5.654779    2.4903348    30.403515 0.0071898236  -0.22155747 -0.0013644736   0.18072072     3.162849     3.652303 
 1651000    4.1947478     1.274211    2.9205368  -0.20243904    0.8495646    1.0084824   0.75067357   -1.2465374            1    1.6018922     2.191479    2.2390184   0.37517923 0.0050462987  -0.10962425 -0.033701875    1.4434624    1.4692493   0.70152749  0.066666667    1.4190504        1e-10 1.7538187e-11    5.7018436    2.4903592    30.403515 -0.0028372383  -0.19695462  0.011303149   0.22205788    1.5188032   0.45150674 
 1652000    4.1648055    1.2728125    2.8919929    -0.205444    0.8486322   0.99752418   0.75598914   -1.2465374            1    1.6384514    2.2677809    2.2254091   0.42216411  0.008273027 -0.065774969  0.022435422    1.4788997    1.5072498   0.69574177  0.066666667    1.4406404        1e-10 1.7393544e-11    5.7492595    2.4841234    30.403515 -0.0087518512  -0.17646737 -0.0084740376   0.22235806     1.586164   0.25732311 
 1653000    4.1848729    1.2856835    2.8991893  -0.21679471   0.85721377    1.0094694   0.76247597   -1.2465374            1    1.5331303     2.185174    2.1505385   0.26367853 -0.0033575315   0.10690034  0.019937811    1.3722097    1.4003577   0.70650745  0.066666667    1.4431064        1e-10 1.7662686e-11     5.661653    2.4891492    30.403515  0.011433889  -0.21943449   0.01619407   0.18934211  -0.81513602   0.80231332 
 1654000    4.1844755    1.2796818    2.9047937  -0.21573935   0.85321219    1.0235099   0.74722981   -1.2465374            1    1.7285729    2.3152508    2.3090986   0.56136932 -0.0077958834 -0.033351389  0.036929261    1.5708699    1.5939535   0.70032085  0.066666667     1.427019        1e-10 1.7508021e-11    5.7116678    2.4805267    30.403515 -0.0071230215  -0.19492575 0.0034679827   0.18430181  -0.57025266     3.300252 
 1655000     4.164773    1.2840657    2.8807074  -0.21915206   0.85613508    1.0219632   0.75293867   -1.2465374            1    1.5039502    2.1482491    2.1448489   0.21875249  0.006582611 -0.0046138827 -0.021142035    1.3450423    1.3695342   0.70139561  0.066666667    1.4084877        1e-10 1.753489e-11    5.7029156    2.4784398    30.403515 0.00019312756  -0.20158379 0.0061491943     0.202525   -2.0426279   -1.5933313 
 1656000    4.1584297    1.2513542    2.9070755  -0.22290932   0.83432513   0.99920507   0.73171586   -1.2465374            1    1.4981532    2.1240536    2.1221188   0.24828719 -0.026633761 -0.030331273  0.025384496    1.3437245    1.3667306   0.69853433  0.066666667    1.4270248        1e-10 1.7463358e-11    5.7262755    2.4772068    30.403515  0.010163488   -0.2177836 0.0074891913   0.18054133  -0.85620642    2.3743946 
 1657000    4.1798992    1.2703983    2.9095009  -0.21608486   0.84702251    1.0157117   0.74204148   -1.2465374            1    1.6857173    2.2916201    2.2782196   0.48731207  -0.01534205 -0.0098769804  0.041967361    1.5291093    1.5521235   0.69736777  0.066666667    1.4308065        1e-10 1.7434194e-11    5.7358544    2.5008062    30.403515  0.014842022  -0.20537861 -6.9488313e-05   0.16472446   -1.3869702    4.2467784 
 1658000    4.1854233    1.2733925    2.9120309  -0.21330779   0.84901885    1.0150218   0.74571229   -1.2465374            1    1.5494635    2.1433427    2.1805972   0.32445048  0.010317854   0.13302435 -0.025162135    1.3920808    1.4159605    0.7030081  0.066666667    1.4214798        1e-10 1.7575202e-11    5.6898349    2.4755452    30.403515 -0.0050208373  -0.16648613 -0.009819943   0.20318157   -1.4203736    1.2905366 
 1659000    4.1736369    1.2703012    2.9033356  -0.21370459   0.84695782    1.0215007   0.73832873   -1.2465374            1      1.62668    2.2598701    2.2279402   0.39222964   0.01175971    0.0618059 -0.024371128    1.4708556    1.4923248    0.7079588  0.066666667    1.4202009        1e-10 1.769897e-11    5.6500463     2.507976    30.403515 -0.0059772594  -0.20963697 0.0085781281   0.16406023  -0.20603376    2.6716681 
 1660000    4.1870955    1.2740983    2.9129972  -0.21776516    0.8494895   0.99728018   0.75753293   -1.2465374            1    1.6016642    2.2210592    2.2127471   0.37118632 0.0049316575   0.10313012  0.043863292    1.4417868    1.4704947    0.7045903  0.066666667    1.4407392        1e-10 1.7614757e-11     5.677058    2.5009316    30.403515 0.0052276963  -0.21765029 0.0061616208   0.19661119    1.0211834   0.83296077 
 1661000    4.1683658    1.2814948     2.886871  -0.22265017   0.85442097    1.0192842   0.75182559   -1.2465374            1    1.5724418    2.2219757    2.1848793   0.31047029 -0.011528211   0.14271833  0.031026883    1.4137689    1.4383782   0.70272259  0.066666667    1.4526723        1e-10 1.7568065e-11    5.6921466    2.4848555    30.403515 0.00045348816  -0.18617827 0.0046356856   0.16926388  -0.32780546   0.68759762 
 1662000    4.1875312    1.2824456    2.9050856  -0.21975546   0.85505491    1.0121978   0.75727095   -1.2465374            1    1.6277081    2.2330405    2.2133967   0.43668725 -0.016077886   0.21073939   0.04925025     1.467886    1.4945766   0.70660051  0.066666667    1.4563825        1e-10 1.7665013e-11    5.6609073    2.4843202    30.403515 -0.016541219  -0.16529909 0.0058815313   0.19764218   -1.3336824   -1.1860869 
 1663000    4.1389031    1.2554922    2.8834109  -0.22239251   0.83708405     1.000828   0.73518322   -1.2465374            1    1.5995627    2.2071854    2.2139969    0.3775057 0.0098884166  0.023808107 -0.048696725    1.4444022    1.4679266   0.70479166  0.066666667    1.4692335        1e-10 1.7619792e-11     5.675436    2.5171777    30.403515 0.0036094735  -0.15784902  0.011346897   0.16165496    -1.204349   -2.5570871 
 1664000    4.1832076     1.253472    2.9297356   -0.2118898   0.83573714   0.99093698   0.73916078   -1.2465374            1      1.63377     2.236663    2.2400442   0.42460275   0.02234225 -0.024823547 -0.073050251      1.47777    1.5034348   0.69587624  0.066666667    1.4438945        1e-10 1.7396906e-11    5.7481485    2.4782404    30.403515 -0.010619499  -0.18200721 -0.0034579274   0.15495622  0.035547991    1.7389853 
 1665000    4.1314105    1.2424514     2.888959  -0.21837405   0.82838931   0.98322831   0.73203656   -1.2465374            1    1.6054227    2.2439816    2.2192472   0.35303944 0.0065068429   0.12671701 -0.023570421    1.4509263    1.4761015   0.70366641  0.066666667    1.4742486        1e-10 1.759166e-11    5.6845118    2.4899021    30.403515  0.022057326  -0.17241451 -0.0094106171   0.18693803   -3.1055142    1.1897894 
 1666000    4.1444445    1.2632663    2.8811782  -0.21976516   0.84226733   0.99278165   0.74861214   -1.2465374            1    1.5719954     2.189873      2.17788   0.34823322  0.014948366  -0.05648335 -0.038179898    1.4140007    1.4414176      0.70764  0.066666667    1.4430087        1e-10   1.7691e-11    5.6525917     2.504177    30.403515 0.0061163305  -0.21901058 0.0058412149   0.19732924  -0.80995149    1.6948313 
 1667000    4.1428763    1.2512323     2.891644  -0.21860833   0.83424384   0.99769968   0.73252206   -1.2465374            1    1.6200256    2.2202078    2.2154367   0.42443246 -0.0072305671  -0.11197783  0.044946546    1.4654267     1.488801   0.70233398  0.066666667    1.4361837        1e-10 1.755835e-11    5.6952961    2.4801878    30.403515 -0.013330036  -0.20713146 0.0012150459   0.20424808   0.88813119    2.3805444 
 1668000    4.1765789    1.2788314    2.8977475  -0.21604656   0.85264518    1.0063956   0.75697503   -1.2465374            1    1.5612139    2.1599031    2.1880971   0.33564159 -0.012703299  0.005422543  0.037374575    1.4014542    1.4288455   0.70780402  0.066666667    1.4377024        1e-10 1.7695101e-11    5.6512818    2.4914358    30.403515 0.00020801416  -0.22602308 -0.0020343426   0.21547434   -1.9411752    2.9745874 
 1669000    4.1843647    1.2782684    2.9060964  -0.22478846    0.8522698    1.0160784   0.75033132   -1.2465374            1    1.5312349    2.1439722    2.1564769   0.29325569 -0.0008960794 -0.089730885 -0.049828941    1.3728774     1.397593   0.70659618  0.066666667    1.4435634        1e-10 1.7664905e-11     5.660942    2.4985348    30.403515 -0.013668821  -0.21280563 -0.0011060443   0.19002478   0.59180595 -0.050226065 
 1670000    4.1616097    1.2750711    2.8865386  -0.20964969   0.85013806   0.98733707   0.76478237   -1.2465374            1    1.5649534    2.2097707    2.2072222   0.27786723  0.017336524   -0.1447159 -0.0096793362    1.4035459    1.4350917   0.70763639  0.066666667     1.442245        1e-10 1.769091e-11    5.6526205    2.5111187    30.403515 0.0033026451  -0.18285198 -0.0075399653   0.21495033   0.72485228    1.5504259 
 1671000    4.1774559    1.2653365    2.9121194  -0.21231924   0.84364765   0.99456517   0.74974141   -1.2465374            1    1.6032825    2.2153971     2.231476   0.36297456 0.00041783382 -0.027565631  0.046211571    1.4450495    1.4724702   0.70511709  0.066666667    1.4289838        1e-10 1.7627927e-11    5.6728167    2.4921389    30.403515 -0.0027431324  -0.20371674 0.0077945797   0.19391073   0.14092255    1.2314002 
 1672000    4.1722499    1.2928739     2.879376  -0.22491477   0.86200787    1.0086037   0.77079809   -1.2465374            1    1.6808881     2.291723    2.2618636   0.48907765 -0.018781201 -0.083947341  -0.03639235     1.518211    1.5482293   0.71575375  0.066666667    1.4272154        1e-10 1.7893844e-11    5.5885142     2.492596    30.403515 -0.0099541364  -0.18914695 -0.0081424105   0.22725411    1.5561167   0.89153265 
 1673000    4.1648925    1.2615739    2.9033187  -0.22700268   0.84113896   0.98467095   0.75183497   -1.2465374            1    1.3780845    2.0444713    2.0583184   0.03146391 0.0095331575  0.056542445  0.038922373    1.2194097    1.2485735   0.71488644  0.066666667    1.4149669        1e-10 1.7872161e-11    5.5952943      2.48583    30.403515 -0.0046399478  -0.17301409  0.006620189   0.17591337  -0.65038061  -0.93883224 
 1674000    4.1476715     1.266153    2.8815186  -0.22090308   0.84419203    0.9986896   0.74805479   -1.2465374            1    1.6594347    2.2547852    2.2621238     0.461395 -0.013095997  0.065384508 -0.0053892798    1.5015576    1.5280798   0.71350862  0.066666667    1.4065354        1e-10 1.7837716e-11     5.606099     2.509989    30.403515 -0.0060614464  -0.19269321  0.010355865   0.18560261  -0.37772401    2.2067365 
 1675000    4.1730643    1.2571001    2.9159643  -0.21497445    0.8381561   0.98511235   0.74671759   -1.2465374            1    1.7379515    2.3367631    2.3016605     0.575431 -0.0043511897  0.013790946 -0.021692261    1.5803567    1.6083825   0.70528148  0.066666667    1.4183217        1e-10 1.7632037e-11    5.6714945    2.4890375    30.403515  0.009664332  -0.16417143 0.0054151554   0.19375122  0.097705464    3.0017898 
 1676000    4.1242605    1.2595069    2.8647536  -0.21775227   0.83976086   0.99419641   0.74366151   -1.2465374            1     1.563355    2.2088959      2.19609   0.28507913 0.0083377927    0.0232499 -0.0072360642    1.4064051    1.4325911    0.7062627  0.066666667    1.4193294        1e-10 1.7656568e-11     5.663615    2.5083452    30.403515 0.00079737869  -0.19385133  0.012377111   0.20437804    -1.577142    2.5517355 
 1677000    4.1756944    1.2821367    2.8935577  -0.21675465   0.85484895    1.0161858    0.7544513   -1.2465374            1    1.5933984    2.2035624    2.2189943   0.35763838 -0.0059944192 0.0050318727  0.028160198    1.4341713    1.4597423   0.71201574  0.066666667     1.428065        1e-10 1.7800394e-11    5.6178533    2.4803126    30.403515 -0.0058151983   -0.2192439  0.014589395   0.20240699  -0.41670345 -0.0088434838 
 1678000    4.1666955    1.2774518    2.8892437  -0.22103117    0.8517254    1.0125708   0.75163349   -1.2465374            1    1.5496917    2.1770287    2.1704977   0.30154866 0.0076349899  -0.20930052  0.030482496    1.3910593    1.4165111   0.70994138  0.066666667    1.4352447        1e-10 1.7748534e-11     5.634268    2.5029318    30.403515 -0.009491507  -0.20184554 -0.00056159114   0.19202014    1.3724001    2.4265154 
 1679000    4.1492047    1.2482904    2.9009143  -0.20300334   0.83228236   0.97743776   0.74196513   -1.2465374            1     1.585055     2.212424    2.2006442   0.34209683  0.011134712 -0.046231752  0.020108498    1.4284632    1.4564954   0.69552801  0.066666667    1.4363353        1e-10  1.73882e-11    5.7510265    2.4837581    30.403515 0.0072829206  -0.18174083 0.0067356746   0.21325125   -1.0685795     1.703541 
 1680000    4.1692473    1.2779795    2.8912678  -0.22162962   0.85207719    1.0091057   0.75436404   -1.2465374            1    1.6437731    2.2620037    2.2225413   0.44677433  -0.01506361  -0.10593156 0.00019938563    1.4845644    1.5110483   0.69919915  0.066666667    1.4069777        1e-10 1.7479979e-11    5.7208308    2.4779536    30.403515 0.0065856407  -0.20310414 0.0017559807   0.15747086    2.2556905    1.5425112 
 1681000    4.1363365    1.2555093    2.8808272  -0.21458815   0.83709546    1.0078747   0.73081018   -1.2465374            1    1.6732325    2.2631054    2.2667066   0.48988559 0.0013540783    0.0990991 -0.047078065    1.5189949    1.5406696   0.71423319  0.066666667    1.4194414        1e-10 1.785583e-11    5.6004118     2.491886    30.403515 0.0046603578  -0.22331567  0.016032509   0.19453308   0.34568373    1.3693092 
 1682000    4.1582356    1.2602421    2.8979936    -0.220717     0.840251    0.9769345   0.75521487   -1.2465374            1    1.5309081    2.1648279     2.146765   0.28113148 0.0025094107 -0.030396272  0.019762677    1.3715199    1.4024147   0.71153331  0.066666667    1.4052984        1e-10 1.7788333e-11    5.6216624    2.4829241    30.403515 0.0071239393  -0.18818639 0.0045044513   0.16748824    1.3835671     2.673379 
 1683000    4.1510425     1.263326    2.8877166  -0.21433651   0.84230714   0.98255021   0.75505303   -1.2465374            1    1.6723354     2.259004    2.2736409   0.48436121 -0.0074552098 -0.091141607 0.0059946164    1.5129813    1.5431033   0.70202892  0.066666667    1.4390341        1e-10 1.7550723e-11     5.697771    2.5216249    30.403515 0.0050630627  -0.17472868  0.011426049   0.20861472   0.14527223    2.1728534 
 1684000    4.1656714    1.2661436    2.8995278  -0.22228621   0.84418578   0.98358461   0.75745813   -1.2465374            1    1.6663157    2.2608034    2.2535104   0.48463332 -0.0034638547  0.018927874 -0.016652282    1.5064541    1.5369476   0.70085598  0.066666667    1.4386506        1e-10 1.7521399e-11    5.7073067     2.483516    30.403515 -0.0061245957  -0.19822868 -0.0063357328   0.17402747   -1.2335544    5.1670664 
 1685000    4.1578012    1.2543351    2.9034662   -0.2181499   0.83631257   0.99853746   0.73535827   -1.2465374            1    1.5018201    2.1111405    2.1620601   0.23225976 0.0016617138 -0.00090153261 -0.0055446131    1.3466226    1.3704853   0.71784833  0.066666667    1.4383918        1e-10 1.7946208e-11    5.5722077    2.5000889    30.403515 0.00060519636  -0.18902338 -0.0025454371   0.17480468   0.84388857   0.24459274 
 1686000     4.171115    1.2774067    2.8937083  -0.21027467   0.85169531    1.0029697   0.75756805   -1.2465374            1    1.5938263     2.204742    2.2436547   0.33308226 -0.0088932835 -0.025103361 -0.043670759    1.4339415    1.4619085   0.71248155  0.066666667     1.446389        1e-10 1.7812039e-11    5.6141805    2.4963683    30.403515  0.024970035  -0.19535238  0.006170288   0.19139972   -1.0256068  -0.12406558 
 1687000    4.1363626    1.2657966     2.870566  -0.21883696   0.84395442    1.0142445    0.7379752   -1.2465374            1    1.5760029    2.2085677    2.2016278   0.31781323 0.00075983501 -0.081304405   0.01645117    1.4202531    1.4426022   0.69369988  0.066666667    1.4176603        1e-10 1.7342497e-11    5.7661824    2.4781703    30.403515 -0.0019455532  -0.16485966  -0.02357795   0.21027771    1.1007809   0.97546567 
 1688000    4.1647864    1.2717561    2.8930303  -0.21156365   0.84792787    1.0119762   0.74583921   -1.2465374            1    1.6425667    2.2387478    2.2248539   0.46409838 0.0026060019   0.10501676  0.049710101    1.4851572    1.5094643   0.69677713  0.066666667     1.436369        1e-10 1.7419428e-11    5.7407166    2.5057402    30.403515  0.015420355  -0.17742715 0.0012975957   0.21432325  -0.80859906    2.0438499 
 1689000    4.1651786    1.2787584    2.8864202  -0.21465634    0.8525965    1.0137782   0.75229512   -1.2465374            1    1.5884085    2.2051881     2.216936   0.34310145 0.0054874184 -0.054037327 0.0018802624    1.4296365    1.4550691   0.71508467  0.066666667    1.4185353        1e-10 1.7877117e-11    5.5937432    2.5042599    30.403515 -0.018515221   -0.2196466 -0.015824289    0.1849157  -0.50174899  -0.37782995 
 1690000    4.1716922    1.2720381    2.8996542  -0.22204045   0.84811585     0.996333   0.75589326   -1.2465374            1    1.6765749    2.2659192    2.2802041   0.48360147  0.022576737  0.027749992  0.040154414    1.5170435      1.54553   0.71325987  0.066666667    1.4070174        1e-10 1.7831497e-11    5.6080542    2.4755405    30.403515 -0.012648288  -0.16987443 -0.007294732   0.21200142    1.4575002  -0.37224667 
 1691000    4.1571882    1.2578533    2.8993349  -0.21486317   0.83865833   0.98981278   0.74460357   -1.2465374            1    1.5931786    2.2061819    2.2239993   0.34935455 0.0055587968  0.048606993  0.011811022    1.4360299    1.4629913   0.70821291  0.066666667     1.429701        1e-10 1.7705323e-11     5.648019    2.4976561    30.403515 -0.0097445623  -0.17624725 0.0051110974   0.15946395  -0.24830335   -1.8586787 
 1692000     4.169011     1.271132    2.8978791  -0.21362085   0.84751169    1.0012025    0.7518778   -1.2465374            1    1.5627394    2.2066171    2.1955937   0.28600747   0.01038831 -0.0060028577  0.050916603    1.4040555     1.431054   0.69680911  0.066666667    1.3996944        1e-10 1.7420228e-11    5.7404531    2.4782832    30.403515  0.020911365  -0.16770765 -0.004203415   0.18425674   0.59661482   -1.2591859 
 1693000    4.1777053    1.2767309    2.9009744  -0.22398574   0.85124473   0.99479168   0.76193317   -1.2465374            1    1.5116533    2.1426115    2.1528771   0.23947129 -0.019522483  -0.02119035   0.03028531    1.3508472    1.3808111   0.70464893  0.066666667    1.3968734        1e-10 1.7616223e-11    5.6765857    2.4917128    30.403515 -0.0012343656  -0.18033253  0.008245768   0.21137369  -0.47871072   0.15238289 
 1694000    4.1555384    1.2644452    2.8910932   -0.2200813   0.84305341   0.98508988   0.75468177   -1.2465374            1    1.5613119    2.1637801    2.1988335   0.32132218 0.0048478748  0.041204345  0.032102548    1.4020362    1.4317458   0.71977948  0.066666667    1.4128512        1e-10 1.7994487e-11    5.5572577    2.5052351    30.403515 0.0044806225  -0.20901867 0.0084782547   0.20843876   -1.5821522   0.91633443 
 1695000    4.1513655    1.2743368    2.8770287  -0.21253558   0.84964849    1.0035981   0.75385367   -1.2465374            1    1.7834795    2.3510432    2.3806047   0.61879053 -0.004433702   0.02290273  0.011324976    1.6243785     1.651479   0.71011273  0.066666667    1.4175713        1e-10 1.7752818e-11    5.6329084    2.4886913    30.403515 0.0099304832   -0.2127557  0.021428969   0.18200585  -0.69419666   0.52667975 
 1696000    4.1557272    1.2719802     2.883747  -0.21720297   0.84807726    1.0065355    0.7494724   -1.2465374            1    1.4458268    2.0899058    2.1005919   0.14698268 0.0089257903 -0.022139167 -0.0029929788    1.2876505      1.31344   0.70425957  0.066666667    1.4083069        1e-10 1.7606489e-11     5.679724    2.5012906    30.403515 0.00030249143  -0.19423642 -0.0045290195   0.16803109  -0.78054059   -1.0117549 
 1697000    4.1779952    1.2805527    2.8974424  -0.21535733   0.85379289    0.9936898    0.7667565   -1.2465374            1    1.4663153    2.0989269    2.1034521    0.1965668 0.0050614352 -0.0078061741 0.0065572439    1.3044912     1.335618   0.69714654  0.066666667    1.3989287        1e-10 1.7428663e-11    5.7376746    2.4825534    30.403515   0.01136665  -0.19450633 -0.006885175   0.23208253  -0.59832157  -0.16735282 
 1698000    4.1609518    1.2669746    2.8939772  -0.21249673   0.84473984      1.00283   0.74636378   -1.2465374            1    1.6867256    2.2605704     2.297439   0.50216722 -0.0072375402  0.075295395  0.034477777    1.5292054    1.5548261   0.70133381  0.066666667    1.3806954        1e-10 1.7533345e-11    5.7034182    2.4916031    30.403515 -0.0046662654  -0.16125601 0.0046503066    0.1824406  -0.68637594    5.4924108 
 1699000    4.1527306      1.25815    2.8945805  -0.22290686   0.83885616    1.0176726   0.72756236   -1.2465374            1    1.4109259    2.0367246    2.0815986   0.11445447 0.00014070894   0.12243547  -0.02290884    1.2573737    1.2770743   0.71297521  0.066666667    1.3960743        1e-10 1.782438e-11    5.6102932    2.4866706    30.403515 0.0028651361  -0.24033457 -0.0026144313   0.20669441  -0.13397105   0.94916008 
 1700000    4.1329565    1.2568838    2.8760728  -0.20905943   0.83801188   0.98949171   0.74375424   -1.2465374            1    1.5432667    2.1993699    2.1607047   0.26972557 -0.017072212  0.052596552   0.01559926    1.3862973    1.4131217   0.70984505  0.066666667    1.3853812        1e-10 1.7746126e-11    5.6350326    2.5114061    30.403515 0.0069678488  -0.21129532 -0.0030852323   0.19618081    1.2998633   -2.1167517 
 1701000    4.1608494    1.2690517    2.8917977  -0.21987352   0.84612472   0.99761656     0.751861   -1.2465374            1    1.6113233    2.2249785    2.2145677   0.39442376 0.0016592163 -0.099002709 -8.5328048e-06     1.452643    1.4801096    0.6989601  0.066666667     1.392439        1e-10 1.7474003e-11    5.7227873    2.4846822    30.403515  0.007796225  -0.20167632 0.0098569594   0.18977466 -0.079102372  -0.66532616 
 1702000    4.1401368    1.2610772    2.8790596  -0.21742276   0.84080782     1.002023   0.74048358   -1.2465374            1    1.4810476    2.1169949    2.1299018   0.19624627 -0.016275991   -0.1062545 -0.020905825    1.3247685    1.3492544   0.70259813  0.066666667    1.3703734        1e-10 1.7564953e-11    5.6931549    2.4989383    30.403515 -0.0032264388  -0.19029171 0.0066795534   0.21132853   0.43141899 -0.091030627 
 1703000    4.1354542    1.2488743    2.8865799  -0.22927326   0.83267165   0.97766355   0.74245638   -1.2465374            1    1.6709844    2.2627334    2.2227877   0.52743223 0.0068907221  -0.20429033  0.040403882    1.5142889    1.5423951   0.70378476  0.066666667    1.3784003        1e-10 1.7594619e-11    5.6835559    2.4847446    30.403515 0.0083756632  -0.20820683 -0.0041692426   0.17792834    1.1801306   0.64197667 
 1704000    4.1603493    1.2707137    2.8896356  -0.21274419   0.84723285   0.99029537    0.7582225   -1.2465374            1    1.6221959      2.23568     2.236737   0.39417087  0.022526444  -0.19284409  0.025694682     1.462173    1.4919452   0.71148821  0.066666667    1.3571399        1e-10 1.7787205e-11    5.6220187    2.4843613    30.403515 -0.0063892718  -0.21206605 0.0094484918   0.20972252   -1.1475487  -0.40558448 
 1705000    4.1230313    1.2301911    2.8928402   -0.2295504    0.8202149   0.97846368   0.72173574   -1.2465374            1    1.5527191    2.1878026    2.1573172   0.31303758  0.019504478 -0.073753396 -0.024226746    1.4003967    1.4240245   0.71076578  0.066666667    1.3808598        1e-10 1.7769144e-11     5.627733    2.4837678    30.403515 -0.0066327227  -0.16840197 -0.0058498812   0.21021877   0.28069461   0.29783602 
 1706000    4.1662984    1.2631987    2.9030998  -0.21362825   0.84222227   0.97610366   0.75893276   -1.2465374            1    1.5307621    2.1653764    2.1661316    0.2607782 -0.013333457  0.073027431  0.022403806    1.3705892    1.4023779   0.70814642  0.066666667    1.3977764        1e-10 1.770366e-11    5.6485494    2.5036113    30.403515  0.007994607  -0.17740711  -0.00158753   0.21403093   -1.1745834    3.2075235 
 1707000    4.1341515    1.2700674     2.864084  -0.22030512   0.84680194    1.0003153    0.7512785   -1.2465374            1    1.6258185    2.2447783    2.2248285   0.40784867 0.0038597151  0.089983656 0.0029717471     1.467261    1.4942498   0.70687888  0.066666667    1.3795761        1e-10 1.7671972e-11     5.658678    2.4798675    30.403515 0.0096579864  -0.16563671 -0.0048953828   0.17573769   0.20046311     2.981389 
 1708000    4.1384802    1.2542953    2.8841849  -0.22567175   0.83628604   0.97392701   0.75065252   -1.2465374            1    1.5626978    2.1676849     2.186555   0.33385344 0.0030315405  0.034924993 -0.0037843364    1.4042725    1.4345999   0.71122352  0.066666667    1.3819882        1e-10 1.7780588e-11     5.624111     2.486606    30.403515 -0.0054018497  -0.19619685 -0.014659214   0.19105349     1.070153    1.3280099 
 1709000    4.1517606    1.2519128    2.8998478   -0.2081812   0.83469759   0.98590036   0.74061204   -1.2465374            1    1.4938286    2.1409878    2.1413856   0.19911222 -0.010939444   0.20340232  0.059882791    1.3375223    1.3641559   0.71020923  0.066666667    1.3915186        1e-10 1.7755231e-11    5.6321431    2.4937076    30.403515 -0.006063783  -0.18010137 0.0093966444   0.22394979   -1.7322514  -0.19347361 
 1710000    4.1496945    1.2696675    2.8800271  -0.21730096   0.84653526   0.98717269   0.75903611   -1.2465374            1    1.7093398    2.2806502    2.3063347   0.54103457 -0.011764947 -0.037701375  0.039888666    1.5491451    1.5794997   0.70991635  0.066666667    1.3956797        1e-10 1.7747909e-11    5.6344667    2.4905319    30.403515 -0.0053751912  -0.19774164 0.0073133653   0.19793694      1.28101     1.959637 
 1711000      4.15313    1.2841873    2.8689427  -0.22363219   0.85621618   0.98131094   0.77840495   -1.2465374            1    1.5110445    2.1348937    2.1587394   0.23950026 -0.0083219161  0.052985052 -0.025381617     1.346762    1.3819754   0.71006607  0.066666667    1.3985985        1e-10 1.7751652e-11    5.6332786    2.5067568    30.403515 -0.008627127  -0.14594961  0.015221016   0.20004702   0.27581978    1.8006102 
 1712000    4.1359522    1.2537908    2.8821614  -0.21884386   0.83594971   0.98194513   0.74510961   -1.2465374            1    1.6027368    2.2178811    2.2165082   0.37382106  0.021741059   0.15655594 0.0010200825    1.4454813    1.4735843    0.7062679  0.066666667    1.3979029        1e-10 1.7656698e-11    5.6635733    2.5021353    30.403515 -0.0036260096  -0.18132118 0.0058213129   0.19649495  -0.57053751    3.8359109 
 1713000    4.1547731    1.2525793    2.9021938  -0.21507955   0.83514194     0.987101   0.74058514   -1.2465374            1    1.4313123    2.1027979     2.070225   0.12091405  0.017167676  -0.12531966  -0.02033195    1.2750117    1.3014817   0.70053057  0.066666667    1.3998618        1e-10 1.7513264e-11    5.7099578    2.4767454    30.403515  0.010658202  -0.17065665 -0.0029316737   0.16443426    1.4877051  -0.97385627 
 1714000    4.1469596    1.2662988    2.8806608  -0.22426559   0.84428923   0.99073829   0.75316786   -1.2465374            1     1.538126    2.1855133    2.1573603   0.27150428  0.017228996 -0.068377879 0.0066747905    1.3791698     1.407817   0.72164088  0.066666667    1.4015237        1e-10 1.8041022e-11    5.5429233    2.4952384    30.403515 -0.0064581982   -0.2286004  0.010189562   0.18669162   0.32642346   0.14572094 
 1715000    4.1475266    1.2688656     2.878661  -0.21874504   0.84600065    1.0037943    0.7478096   -1.2465374            1    1.5567624    2.1725284     2.191816   0.30594274 -0.013183862  -0.14387954 -0.0061203611    1.3989371    1.4247361   0.71592891  0.066666667     1.407495        1e-10 1.7898223e-11    5.5871469    2.4902338    30.403515  0.019375907   -0.1877565 0.0017942126   0.22251661   0.62874213    1.6588678 
 1716000    4.1871497    1.2746717    2.9124781  -0.21530208   0.84987177   0.99657195   0.75859488   -1.2465374            1    1.6687372    2.2553057    2.2703988   0.48050704 -0.019932433  -0.15979689  0.026931275    1.5086356    1.5376609   0.69733543  0.066666667    1.4197418        1e-10 1.7433386e-11    5.7361204    2.4789461    30.403515 0.0044306493  -0.17585227 -0.006048155   0.18482587    1.4331669    1.3721734 
 1717000     4.152014    1.2734638    2.8785502  -0.22102152   0.84906641    1.0114116   0.74803937   -1.2465374            1    1.5584766    2.1850587    2.2009851   0.28938583 -0.0098687404 -0.015704659 -0.027291888    1.4006027    1.4254484    0.7040353  0.066666667     1.423927        1e-10 1.7600883e-11    5.6815333    2.5234261    30.403515 -0.0029375853  -0.19651709 -0.012455653   0.18345055   0.77103575    1.2557714 
 1718000     4.173818    1.2721714    2.9016467  -0.21313119    0.8482047   0.99832003   0.75479919   -1.2465374            1    1.6340062    2.2621551    2.2211333   0.41873031 -0.00031686155 -0.096528186 -0.004419454    1.4747057       1.5027   0.70784249  0.066666667    1.3978777        1e-10 1.7696062e-11    5.6509747    2.4892809    30.403515 -0.004968232  -0.18356815 0.0038304163   0.19916292    1.8176515    5.0256453 
 1719000    4.1480147    1.2505666    2.8974481  -0.22091519   0.83379998   0.99848443   0.73131245   -1.2465374            1    1.4648792    2.1148885    2.1256176   0.15413151 -0.0073816824  -0.11887432 0.0058167355    1.3105356    1.3335514   0.70941584  0.066666667    1.4317601        1e-10 1.7735396e-11    5.6384419    2.4991881    30.403515 -0.0020430151  -0.19793695 -0.011536875   0.22435644    2.7697335    1.2693335 
 1720000    4.1681904    1.2838736    2.8843167  -0.21761527   0.85600705    1.0195546   0.75423188   -1.2465374            1     1.633806    2.2305679    2.2577749   0.41307514  -0.00141362  0.034493113  0.020621067    1.4746252    1.4997068   0.70639037  0.066666667    1.4487087        1e-10 1.7659759e-11    5.6625913    2.4872026    30.403515  0.013360495  -0.17732801 0.0075476315   0.18051712  -0.47259543    1.4848833 
 1721000    4.1756754    1.2853511    2.8903243  -0.21597862   0.85699213    1.0168815   0.75749691   -1.2465374            1    1.5733992    2.1845002    2.2006073   0.33509022  0.009967551 -0.043061841 -0.061129339    1.4135294    1.4396517   0.70412467  0.066666667    1.4426544        1e-10 1.7603117e-11    5.6808121    2.4894947    30.403515 -0.022487156  -0.17934241 0.0052282414   0.20498228    0.9493671    4.8352378 
 1722000    4.1568892    1.2741965    2.8826928  -0.21654662   0.84955492    1.0093548   0.75011417   -1.2465374            1    1.5634717    2.1854946    2.1745664   0.33035402 0.0016067485 -0.097746582  0.034581303      1.40516    1.4307141   0.70762528  0.066666667    1.4343233        1e-10 1.7690632e-11    5.6527093    2.4856541    30.403515 0.0081434881  -0.21149636 0.00063415964   0.18380009    1.0467209  -0.98278257 
 1723000    4.1645844    1.2607831    2.9038012  -0.21760763   0.84061175     1.006578   0.73732656   -1.2465374            1    1.6050001      2.21413    2.2105939   0.39027644 0.0054196965 -0.029012706  0.023728529    1.4493872    1.4726077   0.70663325  0.066666667    1.4204257        1e-10 1.7665831e-11     5.660645    2.5079536    30.403515 -0.0053905555  -0.18564332 -3.056872e-05   0.19500976  -0.31190052   0.82924619 
 1724000    4.1675766    1.2575361    2.9100405  -0.21393678   0.83844684   0.98510464   0.74719438   -1.2465374            1    1.6163621    2.2070326     2.210784   0.43126975  0.024254133  0.048979053 -0.029013244    1.4586666    1.4867941   0.69771513  0.066666667    1.4373016        1e-10 1.7442878e-11    5.7329988     2.481754    30.403515 -0.0054719788  -0.21921547 0.0072983535   0.17634625   0.26076635   0.49176612 
 1725000    4.1493508    1.2612735    2.8880774  -0.21754603   0.84093866   0.99805021   0.74317182   -1.2465374            1    1.6052021    2.2165551    2.2290234   0.37002791 0.0049470059  0.061664143 -0.037547962    1.4483556    1.4739314   0.70919379  0.066666667    1.4017231        1e-10 1.7729845e-11    5.6402073    2.4989868    30.403515 -0.00080056289   -0.1804955 -0.0050219419   0.20616311  -0.33874516   0.20617465 
 1726000    4.1673538    1.2705989    2.8967549   -0.2209097   0.84715629   0.99421311   0.75565666   -1.2465374            1    1.6602357    2.2661859    2.2531454   0.46137579 0.0018996567  0.085124004 0.0090062901    1.5007542    1.5294696   0.71245538  0.066666667    1.3994605        1e-10 1.7811385e-11    5.6143867    2.4892843    30.403515 0.0040866874  -0.16243566 0.0088436556   0.19250556  -0.61442818   -2.3241812 
 1727000    4.1768846     1.276716    2.9001686  -0.21427248   0.85123476   0.99981865   0.75878417   -1.2465374            1    1.6486263    2.2500954    2.2501537   0.44562974 -0.0033960477  0.087727212 -0.049224717    1.4884848     1.517123   0.70198243  0.066666667    1.4097917        1e-10 1.7549561e-11    5.6981483    2.4704757    30.403515 -0.00077770817  -0.17460975 0.0037031356   0.18116419  -0.69033347    3.5194086 
 1728000    4.1728152    1.2756901    2.8971251  -0.21430581   0.85055075    1.0074976   0.75288819   -1.2465374            1    1.6565579    2.2274615    2.2767657   0.46544643 -0.00016757536 -0.025046191 0.0022711205    1.4976607    1.5240445   0.70950573  0.066666667    1.4120453        1e-10 1.7737643e-11    5.6377276    2.4848268    30.403515 0.0064410379  -0.19399996 -0.006954068   0.19867419  -0.35921446   -0.7198549 
 1729000    4.1769164    1.2910847    2.8858317  -0.21717494   0.86081492    1.0195596   0.76203374   -1.2465374            1    1.6970379    2.2734939    2.3065218   0.51109799 0.0020178181   0.16057289 -0.017698211    1.5362106    1.5629381    0.7053759  0.066666667    1.4317233        1e-10 1.7634397e-11    5.6707353    2.4940466    30.403515 0.0036419999   -0.1884544 0.0066676472   0.20453173   -3.2052438    2.0427863 
 1730000    4.1332758     1.246897    2.8863789  -0.21370626   0.83135332   0.98673697   0.73466165   -1.2465374            1    1.4607053    2.1268843    2.1290565   0.12617504 -0.016193233  0.048648554  0.018648475    1.3056548    1.3309225   0.69890435  0.066666667    1.4274628        1e-10 1.7472609e-11    5.7232438    2.4821907    30.403515 0.0022649932  -0.20680581 0.0077553304   0.17444902   -1.7443729   -1.5483934 
 1731000    4.1681097    1.2635258    2.9045839  -0.21574411   0.84244037   0.98839031   0.75162974   -1.2465374            1    1.5998672    2.2009162    2.2022005   0.39648494 -0.0013419606  0.047949693  0.032821262    1.4412356     1.469867   0.70210408  0.066666667    1.4277874        1e-10 1.7552602e-11     5.697161    2.4883764    30.403515   0.02064866  -0.20029006  0.010521119   0.21682523  -0.61867203  -0.97734003 
 1732000    4.1433528    1.2520462    2.8913066  -0.20832355    0.8347865    1.0076086    0.7272277   -1.2465374            1    1.6357132    2.2520433    2.2634252   0.39167115 -0.0069186909 0.0063180582 -0.049881258    1.4822317    1.5031853   0.71224015  0.066666667     1.472281        1e-10 1.7806004e-11    5.6160833    2.4932847    30.403515  0.005687546  -0.19130078 0.0027062386   0.16526298  -0.33778629    -1.472927 
 1733000     4.155452     1.275549     2.879903  -0.21656502    0.8504567    1.0192829   0.74539092   -1.2465374            1    1.6410837    2.2711694     2.242862   0.40921976 -0.0099480258  0.011153826 0.0017600766    1.4837688    1.5070203    0.7105052  0.066666667    1.4755191        1e-10 1.776263e-11    5.6297969    2.5012595    30.403515 -0.0045410754   -0.2073532 -0.017991624   0.18807112  -0.88637191   0.56243647 
 1734000    4.1577432    1.2736287    2.8841145  -0.21621354   0.84917639    1.0064309   0.75132186   -1.2465374            1    1.5584467     2.185308    2.1951281   0.29490408 -0.025542786 -0.026853717 -0.0065938084    1.3998801    1.4260737   0.70167882  0.066666667    1.4864778        1e-10 1.754197e-11    5.7006139    2.4916805    30.403515 0.0055552013  -0.17281785  0.004152029   0.18262575   0.31118524 -0.065145503 
 1735000     4.183315    1.2792273    2.9040877  -0.21164006   0.85290918     1.022827   0.74716353   -1.2465374            1    1.5466968    2.1885734    2.1778838   0.27363315 -0.016326248 0.0055295291 -0.036534573    1.3890078    1.4121672   0.70327324  0.066666667    1.4633511        1e-10 1.7581831e-11    5.6876898    2.5155141    30.403515 -0.0088093424  -0.17783098 0.00073129408   0.20265493   0.62349274   0.46890674 
 1736000    4.1908146    1.2609809    2.9298337  -0.21536098    0.8407436    1.0088236   0.73614115   -1.2465374            1    1.4698532    2.1248258    2.0962521   0.18848163 0.0082609244  -0.16093348  0.081808996    1.3144904    1.3371654   0.70950044  0.066666667    1.4803246        1e-10 1.7737511e-11    5.6377696    2.4886576    30.403515  0.006855375  -0.23969775 0.0046770428   0.20775264    1.1468824    0.7295886 
 1737000    4.1963106    1.2783899    2.9179207  -0.20957958   0.85235087    1.0126947    0.7525716   -1.2465374            1    1.5909342    2.1924587     2.234223   0.34612101 -0.0007556303  0.013216641  0.078845286    1.4321039    1.4577373   0.70252783  0.066666667    1.4526551        1e-10 1.7563196e-11    5.6937246    2.4970106    30.403515  0.007703594  -0.17723341 -0.0042800882   0.18090031  -0.99888394    1.9003139 
 1738000    4.1717545     1.282869    2.8888855  -0.21556228   0.85533722    1.0066632   0.76117843   -1.2465374            1     1.556275     2.190602    2.1724043   0.30581866 0.0017293015 -0.030256322  0.014082606    1.3956282    1.4238714   0.70125749  0.066666667    1.4350748        1e-10 1.7531437e-11    5.7040389    2.4836144    30.403515 0.0024181718  -0.19026722  -0.01080882   0.18298667   -0.9707492    1.1228491 
 1739000    4.2072628    1.2968159    2.9104469   -0.2166784   0.86463612    1.0290262   0.76233738   -1.2465374            1     1.576091    2.1684657    2.2017889   0.35801853 0.0017683797 -0.071677727 -0.088081434    1.4151996    1.4407461   0.69974284  0.066666667    1.4356695        1e-10 1.7493571e-11    5.7163857    2.4859226    30.403515 0.0042230879  -0.15126103 -0.001381135   0.19004968   -1.2849718   0.83291226 
 1740000    4.1931726    1.2893095     2.903863  -0.21539513   0.85963136    1.0365817   0.74950416   -1.2465374            1     1.455528     2.137293    2.0970518   0.13223934 0.0038754468  -0.05128998 -0.047840823    1.2973451    1.3191894   0.70578248  0.066666667    1.4610581        1e-10 1.7644562e-11    5.6674685      2.48308    30.403515  0.009274263  -0.17592211 0.0042725734   0.20365714  -0.20830624   -1.4256621 
 1741000    4.2054871    1.2900635    2.9154236  -0.22093855   0.86013407    1.0095455   0.76716929   -1.2465374            1    1.5325455    2.1602689    2.1621253   0.27524224  0.007235355  0.062817867  0.015407953    1.3706343    1.3997628   0.70319467  0.066666667    1.4716609        1e-10 1.7579867e-11    5.6883252    2.4849937    30.403515  0.004958688  -0.16194495  0.012948542   0.21161292   -1.6829927   -1.1342919 
 1742000    4.1787148    1.2772342    2.9014807  -0.21934879   0.85158026    1.0194639   0.74710208   -1.2465374            1    1.5811586    2.1994912    2.1901509   0.35383357 -0.0094615472  0.089452138 -0.0048902861    1.4234825    1.4470713   0.69953254  0.066666667    1.4584576        1e-10 1.7488313e-11    5.7181043    2.4865247    30.403515 0.0093052164  -0.20394482 0.0038619673   0.19249594   0.51779779    1.2348093 
 1743000    4.1794206    1.2764873    2.9029333  -0.22151785    0.8510823    1.0322549   0.73832227   -1.2465374            1     1.568343    2.1909801    2.1769019   0.33714702 0.0064160737   0.05812548  -0.01086579      1.41252    1.4325734    0.7060428  0.066666667    1.4863614        1e-10 1.765107e-11    5.6653789     2.495371    30.403515 0.0040946267  -0.17547886 0.00031748457   0.18017538    1.7189271   0.80343769 
 1744000    4.1683726    1.2786898    2.8896829  -0.21681987   0.85255076    1.0301869   0.74199496   -1.2465374            1    1.6589136    2.2612595    2.2601578   0.45532352  0.022753686  0.010827792  0.033644833    1.5023155     1.523416   0.70265757  0.066666667    1.4614197        1e-10 1.7566439e-11    5.6926733    2.4877479    30.403515 0.0050271273  -0.19542181  0.002180201   0.19675895   0.13795146  -0.61689959 
 1745000    4.1731215    1.2644789    2.9086427  -0.20996824   0.84307584    1.0088639   0.73990213   -1.2465374            1    1.5506217     2.190911    2.1557355   0.30521866  0.012652238 -0.082778324 -0.021005551    1.3944653    1.4179287   0.69756246  0.066666667     1.443923        1e-10 1.7439061e-11    5.7342535    2.4827866    30.403515 0.00095395292  -0.20154909 -0.012059401   0.16293849  -0.23800876  -0.17159432 
 1746000    4.1444075    1.2596547    2.8847527  -0.22679271   0.83985938    1.0206287   0.72734876   -1.2465374            1    1.5795649    2.2115652    2.1887416   0.33838793 -0.0098818241  -0.11295848 -0.012539511    1.4260578    1.4453245   0.70964817  0.066666667    1.4314798        1e-10 1.7741204e-11     5.636596    2.5058135    30.403515 0.0046790827  -0.19314936 0.0018640964   0.19648444    1.0337131   0.89884616 
 1747000    4.1667867    1.2742939    2.8924927  -0.21349316   0.84961991    1.0000751   0.75600281   -1.2465374            1    1.7198238    2.3474259    2.2902312   0.52181427 -0.005445181 -0.058306864  0.015239711    1.5602693    1.5882867    0.7124602  0.066666667    1.4303953        1e-10 1.7811505e-11    5.6143487    2.4927849    30.403515 0.0069479224  -0.19955552  0.016991709   0.19616199   0.81030831    4.1651043 
 1748000    4.1661478    1.2717511    2.8943968  -0.21762143   0.84792447    1.0001955   0.75317547   -1.2465374            1    1.5656947    2.1844719    2.1765925   0.33601981 0.0091638281 -0.020530142    0.0252168    1.4067369    1.4341418   0.70125469  0.066666667    1.4067636        1e-10 1.7531367e-11    5.7040617     2.497694    30.403515 -0.005630506  -0.20068308 -0.013886733   0.21175576   0.23241678    2.0949972 
 1749000    4.1537474    1.2470787    2.9066688  -0.21341452   0.83147448    1.0078109   0.72172499   -1.2465374            1    1.5157164    2.1492848    2.1592912   0.23857318 0.0044818006 -0.005209122  0.029506246    1.3633962    1.3831619   0.70363579  0.066666667    1.4086593        1e-10 1.7590895e-11    5.6847592    2.4739152    30.403515 -0.0067720894  -0.18228732  0.007772455   0.21086554  -0.47277731   0.17882402 
 1750000    4.1618161    1.2745015    2.8873146   -0.2239977   0.84975827     1.021727    0.7427339   -1.2465374            1    1.5525748    2.1852109    2.1691599   0.30335359  0.026222535 -0.021396934 0.0015534964    1.3958207    1.4181899   0.71650064  0.066666667    1.4176453        1e-10 1.7912516e-11    5.5826886    2.4999415    30.403515  0.014807684  -0.17199509 0.0061954043   0.17888424  -0.56189967    1.8572348 
 1751000    4.1730058    1.2974173    2.8755885  -0.22114466    0.8650371    1.0188379   0.76933768   -1.2465374            1    1.5913031    2.2182237    2.2042248   0.35146086 -0.0086985139  0.077211222 -0.035961264    1.4289343    1.4572982   0.71120333  0.066666667    1.4455799        1e-10 1.7780083e-11    5.6242707     2.497022    30.403515 -0.010304935  -0.24187264 -0.0036880827   0.17089375  -0.60220939   0.81622667 
 1752000    4.1440813    1.2576525    2.8864289  -0.21562011   0.83852442   0.98768566   0.74571181   -1.2465374            1    1.5051882    2.1684165    2.1437804   0.20336771 -0.0016798437   0.11393737 -0.011402948    1.3478056    1.3752807   0.70449605  0.066666667    1.4372651        1e-10 1.7612401e-11    5.6778175     2.500216    30.403515 -0.010754204  -0.15271738 0.0050603681    0.1820723   0.35940469    3.3243057 
 1753000    4.1545136    1.2694756     2.885038  -0.22213799   0.84640737    1.0135568   0.74238583   -1.2465374            1    1.7528732    2.3238427    2.3419198   0.59285697 0.0021725572  -0.05423137  0.025005996    1.5961925    1.6195629   0.70355331  0.066666667    1.4212721        1e-10 1.7588833e-11    5.6854256    2.4970614    30.403515 -0.0019064022  -0.15824021 0.0048069342   0.17007651    2.1699896    1.9619637 
 1754000      4.16263    1.2816941     2.880936  -0.22959097   0.85455385    1.0203728   0.75136287   -1.2465374            1    1.4972453    2.1552607    2.1486977   0.18777767  0.012160196   0.12364584 -0.038715979    1.3386701    1.3630386    0.7152377  0.066666667    1.4303658        1e-10 1.7880943e-11    5.5925464    2.4886374    30.403515 0.0017843405  -0.19420376 -0.0032948677   0.18727866    0.4788004   -2.5044914 
 1755000    4.1439474    1.2528889    2.8910585  -0.22155805   0.83534837   0.97783182   0.74669685   -1.2465374            1    1.6863949     2.279823    2.2724868   0.50687485 0.0029700923  0.022980856 -0.0078556326    1.5288044    1.5577834   0.71028681  0.066666667    1.4066104        1e-10 1.775717e-11    5.6315279     2.482147    30.403515 0.0017486608  -0.18073024 -0.0044030496   0.19798571   0.86195304   -1.5045716 
 1756000    4.1502823    1.2591394    2.8911429  -0.21688639   0.83951583   0.99607041   0.74209585   -1.2465374            1    1.4707845     2.132739    2.1082192   0.17139541  0.010483386 -0.0073806402    0.0263845    1.3141651    1.3397742   0.71117332  0.066666667    1.4016953        1e-10 1.7779333e-11     5.624508    2.5007534    30.403515  0.021119519  -0.18833212 0.0044601407     0.161096    1.4681083   -1.6111144 
 1757000    4.1524248    1.2587845    2.8936403  -0.22879445    0.8392792   0.99497024   0.74239733   -1.2465374            1    1.5663391    2.1775706    2.1943337   0.32711295  0.012448445  0.046724228  0.049642158     1.409656    1.4354734   0.71394062  0.066666667     1.391547        1e-10 1.7848516e-11    5.6027068    2.4859201    30.403515 -0.0044834717  -0.17418695 -0.002438859   0.20854107   0.20035705  -0.06421705 
 1758000    4.1577791     1.292549    2.8652301  -0.21528903   0.86179126    1.0126887   0.76790065   -1.2465374            1    1.6163356    2.2360288    2.2438462   0.36913174 -0.0083625288 -0.030505793  0.016626811      1.45427    1.4831395   0.71262408  0.066666667    1.3925744        1e-10 1.7815602e-11    5.6130576    2.4856042    30.403515 0.0075747858  -0.17795405 -0.0047643001    0.1845037    1.9245546  -0.90165971 
 1759000    4.1536839    1.2699393    2.8837446  -0.22273059   0.84671648   0.99751858    0.7528827   -1.2465374            1    1.5645182    2.1833303    2.1880464   0.32217792 0.0086180321  0.037624446 -0.0085720981    1.4056222    1.4333174   0.70264739  0.066666667    1.3893135        1e-10 1.7566185e-11    5.6927558    2.4933376    30.403515 -0.0032067279  -0.18866035 0.0019580232   0.23003471    1.4924029   0.92135353 
 1760000    4.1942537    1.2779113    2.9163424  -0.21153484   0.85203175   0.98370913   0.77011749   -1.2465374            1    1.5654955    2.2002617    2.1829002   0.31332458  0.018719902   0.11693766 -0.028012523    1.4029621     1.436111   0.70982245  0.066666667    1.3799625        1e-10 1.7745561e-11     5.635212     2.479531    30.403515 -0.018513957   -0.1745091 0.0043109841   0.23042406   -0.5097979   -1.4226013 
 1761000    4.1754057    1.2716275    2.9037783  -0.21627089   0.84784207    1.0029978    0.7512953   -1.2465374            1    1.5827484    2.1984224    2.1926326   0.35719027  -0.01692328 -0.018425481  0.020548844    1.4241874    1.4508269    0.7146195  0.066666667    1.3873835        1e-10 1.7865487e-11    5.5973844    2.4943874    30.403515 -0.0060877306  -0.23610859 -0.0085596617   0.19505544   -2.6068269    2.9309692 
 1762000    4.1842827    1.2577706    2.9265121  -0.20929574   0.83860318   0.98253257    0.7490511   -1.2465374            1    1.5966771    2.2103021    2.2203026   0.35942676 -0.016028175 -0.009066122 -0.0076154781    1.4385898    1.4674474   0.70292657  0.066666667    1.3693261        1e-10 1.7573164e-11    5.6904948    2.5032071    30.403515  0.018668901  -0.17274119 9.5717786e-05   0.22034221   -3.1733547    3.2868879 
 1763000    4.1644804    1.2691048    2.8953756  -0.22166204    0.8461601    1.0046389   0.74754207   -1.2465374            1     1.620048     2.221591    2.2299056   0.40864754   0.01690631 -0.097061695 -0.013700287    1.4622792    1.4879107   0.70205981  0.066666667    1.3700185        1e-10 1.7551495e-11    5.6975203     2.493426    30.403515 -0.00047915771  -0.20285469  0.017081371   0.20177124   0.31589467    2.5546091 
 1764000    4.1767485    1.2586861    2.9180624  -0.21524898   0.83921356    1.0107504   0.73245654   -1.2465374            1    1.5797454    2.2131929    2.2052142   0.32082911  0.012896331 -0.014994083  0.049928566    1.4251603    1.4468043   0.70955276  0.066666667    1.3738919        1e-10 1.7738819e-11    5.6373539    2.5120735    30.403515  0.010991495  -0.17281701  0.023152354   0.18740097   0.22268161    3.3618674 
 1765000    4.1551325    1.2511542    2.9039783  -0.21912281   0.83419176    1.0008739   0.73045933   -1.2465374            1    1.5118783    2.1436787    2.1371451   0.25481111 -0.019429063  0.039779261 -0.038285803    1.3577148    1.3802362   0.70767443  0.066666667    1.3825087        1e-10 1.7691861e-11    5.6523167    2.4884045    30.403515 0.0046228176  -0.19560106 0.0046297798   0.16752544    1.2766382  -0.58419958 
 1766000    4.1730504    1.2642242    2.9088262  -0.21031322   0.84290604   0.99914308   0.74568453   -1.2465374            1    1.6766064    2.2922644    2.2600858   0.47746895    0.0138144   0.04957322 -0.024683877    1.5192296    1.5451919   0.70080862  0.066666667    1.3685522        1e-10 1.7520215e-11    5.7076924    2.4865228    30.403515 -0.0083082522  -0.18142694 -0.0075355318   0.17703698   0.85699784    2.7954315 
 1767000    4.1791379    1.2903156    2.8888224  -0.21620869   0.86030213    1.0215007   0.75999158   -1.2465374            1    1.5175125    2.1545168    2.1476811   0.25033948 0.0047458422   0.13057046 0.0069615781    1.3571161    1.3831574   0.69901592  0.066666667    1.3707251        1e-10 1.7475398e-11    5.7223303    2.4847498    30.403515  0.019263566  -0.21637327 0.0068952073   0.18560038  -0.66174657    1.6472219 
 1768000    4.1651988    1.2796149    2.8855839   -0.2182562   0.85316759    1.0146981   0.75264892   -1.2465374            1     1.671887    2.2714782    2.2710873   0.47309551 -0.015294352  0.073984402 -0.067301248    1.5130403    1.5384266   0.70791073  0.066666667    1.3491447        1e-10 1.7697768e-11      5.65043    2.4844249    30.403515 -0.0091391722  -0.19601801 -0.013422703   0.20476091  -0.19974454    1.3365843 
 1769000    4.1771136    1.2945639    2.8825497  -0.21868364   0.86313468    1.0062734   0.77407962   -1.2465374            1    1.5535082    2.1953629    2.1800341   0.28512775 0.0068326614   0.08444394  0.026405858    1.3901386    1.4211559   0.70413136  0.066666667    1.3546071        1e-10 1.7603284e-11    5.6807582    2.4722237    30.403515 0.0031267734  -0.21711106 0.0070011917   0.16606637  -0.81906585   0.12381205 
 1770000    4.1780167    1.2691026    2.9089142  -0.22054041   0.84615862    1.0082437   0.74529316   -1.2465374            1    1.6123051    2.2393152    2.1976539   0.39994621  0.026622605  0.064106304 -0.096513572    1.4550109    1.4796936   0.70522887  0.066666667    1.3556366        1e-10 1.7630722e-11    5.6719176    2.4864866    30.403515 0.0031301859   -0.1534715 0.0034169158   0.20214883  0.068930555    3.5371397 
 1771000    4.1828429    1.2916525    2.8911905  -0.22524216   0.86119349    1.0234802     0.760205   -1.2465374            1    1.6131171    2.2231929    2.2268621   0.38929638 -0.0020880226  0.046728856 -0.018314992    1.4526757    1.4785017   0.71432528  0.066666667     1.349606        1e-10 1.7858132e-11    5.5996898    2.5117074    30.403515 0.0047317368  -0.18341744 -0.0024430181   0.21663774    0.4096631    4.6369742 
 1772000    4.1843266    1.3008222    2.8835045  -0.22425866   0.86730728    1.0223025   0.77086391   -1.2465374            1    1.5069406    2.1345226    2.1509431   0.23535616  0.031642923    0.1497562  0.021654456    1.3442496      1.37248   0.70824398  0.066666667    1.3799256        1e-10 1.7706099e-11    5.6477713    2.4741242    30.403515 -0.00057908439  -0.23895894  0.016794026   0.21874608  -0.34198533   0.27893151 
 1773000    4.1762482    1.2843473    2.8919009  -0.21715004   0.85632285    1.0166158   0.75657601   -1.2465374            1    1.5597866    2.1853134     2.205253   0.28879345 -0.024318966 -0.014630565 0.0071000084    1.4001111     1.426074   0.69308405  0.066666667    1.4394773        1e-10 1.7327101e-11    5.7713058    2.4912092    30.403515 -0.0025697845  -0.15977073 0.0038142667   0.18791977   0.64981605   0.41286061 
 1774000    4.1968038    1.2917775    2.9050262   -0.2070748   0.86127689    1.0101144   0.76866998   -1.2465374            1    1.6127832    2.2309652    2.2325955   0.37478887  0.010428303  0.048493239  0.013363074    1.4505553    1.4799257   0.69977512  0.066666667    1.4261632        1e-10 1.7494378e-11     5.716122    2.4966149    30.403515 -0.00098780333  -0.21456245  0.003891743    0.1842368  -0.20366696    2.8602777 
 1775000    4.2110414     1.315793    2.8952484  -0.21388407   0.87728892    1.0330566   0.78036584   -1.2465374            1    1.7148634    2.3193883    2.3115115   0.51369043 0.0073570147 -0.032830082 -0.030655329    1.5501671    1.5789884   0.70942996  0.066666667     1.415878        1e-10 1.7735749e-11    5.6383297    2.4790171    30.403515 0.0014237781  -0.21378004  0.012260047   0.18531513   0.24191049     2.116147 
 1776000    4.1980635    1.2864364    2.9116272  -0.22222404   0.85771573    1.0201926   0.75660811   -1.2465374            1    1.6184048    2.2449788    2.2087577   0.40147796 0.0011847944 -0.085742808 -0.070350622    1.4587226    1.4842218    0.7071517  0.066666667    1.4280051        1e-10 1.7678793e-11    5.6564949    2.4888814    30.403515 -0.0028140333  -0.23729504 -0.0079401564   0.16128607    0.6224354    1.6444898 
 1777000    4.1592185    1.2611068    2.8981117  -0.20819652   0.84082753    1.0083665   0.73656226   -1.2465374            1    1.5299107    2.1476396    2.1739577   0.26813486  0.015490391  0.041994097 -0.046822795    1.3744592    1.3972831   0.69576739  0.066666667    1.4090452        1e-10 1.7394185e-11    5.7490478    2.4956771    30.403515 -0.0053941305  -0.18262584 0.0027174574   0.19967679   -1.1436223  -0.14985902 
 1778000    4.1708073    1.2708355    2.8999719  -0.21253537   0.84731401    1.0339144    0.7311707   -1.2465374            1    1.5735952    2.2223537    2.1933453   0.30508662 -0.0086750941  0.013375082 -0.081148095    1.4192815    1.4376073    0.6960102  0.066666667    1.4329582        1e-10 1.7400255e-11    5.7470422    2.4877054    30.403515 0.0034244211  -0.17615309 0.0055668306    0.1861655   0.11648005   -1.3584027 
 1779000     4.183068    1.2804356    2.9026324  -0.21444433    0.8537148    1.0246443   0.74733879   -1.2465374            1    1.5280218    2.1416645    2.1668614   0.27553957 0.0014810612  0.080166624 -0.080002603    1.3702959    1.3932533   0.70731012  0.066666667    1.4177286        1e-10 1.7682753e-11     5.655228    2.4962145    30.403515 5.0702237e-05  -0.19549507 -0.0025262945   0.17106399   -1.8898791   0.39911088 
 1780000    4.1794295     1.287357    2.8920725  -0.22295136   0.85832954    1.0091506   0.76448596   -1.2465374            1    1.5446961    2.2226187     2.147504   0.26396562 0.0087718503  0.079173356  0.014843826    1.3833512    1.4119654   0.70750717  0.066666667    1.4175872        1e-10 1.7687679e-11     5.653653    2.4974652    30.403515 -0.0042819516   -0.1833093 -0.006707551   0.17226312  -0.23759834    1.0454851 
 1781000    4.1498319    1.2730818      2.87675  -0.22020036   0.84881176    1.0052176   0.75148607   -1.2465374            1    1.4367916    2.1074781     2.087357   0.11553985   0.00352873 -0.033059016  0.053886365    1.2781904    1.3045782   0.70135701  0.066666667    1.3898708        1e-10 1.7533925e-11    5.7032296    2.5329637    30.403515 0.0083404531  -0.17854811 0.0032190443   0.18247764    2.5559249   0.36675618 
 1782000    4.1525396    1.2711385    2.8814011  -0.22074569   0.84751607    1.0190318   0.74077366   -1.2465374            1    1.7848346    2.3332046    2.3791384   0.64216071 -0.0054233589 -0.044245494   0.02455563    1.6284942    1.6508042    0.7029568  0.066666667    1.3948493        1e-10 1.757392e-11    5.6902501    2.4928561    30.403515 0.0032905829  -0.18170505 -0.010084812   0.17729126   0.85313683    1.6315231 
 1783000    4.1719807    1.2710205    2.9009602  -0.22203155    0.8474374    1.0126265   0.74463771   -1.2465374            1    1.5925009    2.2026229    2.2131163   0.36176333 -0.0040987853 0.0072698133 -0.014852503     1.435345    1.4593129   0.71983508  0.066666667    1.3846281        1e-10 1.7995877e-11    5.5568283    2.4937262    30.403515 -0.0047500808  -0.18514108 0.0082027552   0.19869497    2.4436211    1.2472505 
 1784000    4.1851679    1.2813053    2.9038626  -0.20486335   0.85429467    1.0024336   0.76212191   -1.2465374            1    1.7202322    2.3162616    2.3137998   0.53063523 -0.00083682784 -0.077696985 -0.031437745    1.5593862    1.5883849   0.70165841  0.066666667     1.395946        1e-10 1.754146e-11    5.7007797    2.4841588    30.403515 -0.0036600477  -0.21120848 -0.017040012   0.18299738   0.92256956    2.5655331 
 1785000    4.1952544    1.2754029    2.9198516   -0.2107109   0.85035927    1.0087096   0.75182206   -1.2465374            1    1.5619045    2.2022645    2.1821759   0.30127314  0.003407777  0.036356003  0.033667471    1.4032323    1.4292318   0.69861927  0.066666667    1.3980377        1e-10 1.7465482e-11    5.7255793    2.4886515    30.403515 0.0070805669  -0.17607739 -0.010939412   0.19928391  -0.64175544    1.0612399 
 1786000    4.1695995    1.2810102    2.8885893  -0.21477251   0.85409788    1.0036962   0.76101555   -1.2465374            1     1.490124    2.1608886    2.1445748   0.16490857 0.00038494658 -0.098306531  0.059589383    1.3295115    1.3581106   0.70694983  0.066666667    1.4003149        1e-10 1.7673746e-11    5.6581102    2.4796578    30.403515 0.0080186758   -0.2115236 -0.008727043   0.18364113    1.3871084   0.18654942 
 1787000    4.1718511     1.258434    2.9134171  -0.22290238    0.8390455   0.99766851   0.74033638   -1.2465374            1     1.639632    2.2530407    2.2264594    0.4393959 -0.0025234614   -0.1045688  0.053765828    1.4833839    1.5084115   0.70228632  0.066666667    1.3903967        1e-10 1.7557158e-11    5.6956826     2.503997    30.403515 0.0034903518   -0.2024347 0.0053934487   0.20170684  -0.28316961   0.24737149 
 1788000    4.1706651    1.2731654    2.8974997  -0.20535447   0.84886749    1.0107658   0.74811893   -1.2465374            1    1.5905895    2.2381004    2.2155853   0.31808293 -0.0017685661 -0.056629989 -0.047089545    1.4326989    1.4576463   0.70328488  0.066666667    1.4177126        1e-10 1.7582122e-11    5.6875956    2.4831466    30.403515 -0.0084724617  -0.19287459 -0.00043804048   0.18812881     1.196562    1.6979361 
 1789000    4.1815109     1.265508     2.916003  -0.21250646   0.84376196    1.0145171    0.7374929   -1.2465374            1    1.4364951    2.0891611    2.0751246   0.14519964 0.0069711662  -0.10390306  0.024508525    1.2808471    1.3030585   0.70280954  0.066666667    1.4207647        1e-10 1.7570238e-11    5.6914424     2.478341    30.403515 0.0076119412  -0.18759126 -0.00020791417   0.20224126    1.9198171  -0.69364798 
 1790000     4.190327    1.2939723    2.8963547  -0.21930582   0.86274019    1.0349378   0.75557541   -1.2465374            1    1.6147097     2.197241    2.2389974   0.40789077 -0.0034752969  -0.05896457  0.019505145    1.4552454    1.4785872   0.70092467  0.066666667    1.4292007        1e-10 1.7523117e-11    5.7067474    2.5076863    30.403515 -0.013859766  -0.16071707 -0.0026181675   0.18972886   0.44410948   -2.2856727 
 1791000    4.1979252    1.2769321    2.9209931  -0.21692634   0.85137884    1.0328147   0.73845482   -1.2465374            1    1.5788459    2.2012535     2.195882   0.33940232 -0.0051588297 -0.092678011 0.00041273268    1.4229949    1.4430027    0.7017543  0.066666667    1.3984581        1e-10 1.7543857e-11    5.7000007    2.4840362    30.403515 -0.00055510703  -0.19335539 -0.00065798668   0.22740773    1.8736322  -0.42477474 
 1792000    4.1888552    1.2726984    2.9161568  -0.21914511   0.84855612    1.0129864   0.74622951   -1.2465374            1    1.5696331    2.1800215    2.1876158   0.34126217 -0.00026959074 -0.031213667 -0.0012609095    1.4121413    1.4363979   0.71249333  0.066666667    1.4031627        1e-10 1.7812333e-11    5.6140876    2.4924689    30.403515 -0.00035535592  -0.17942566 -0.0015836833   0.16522031  -0.71963193    1.1087989 
 1793000    4.1674383    1.2663225    2.9011157  -0.21508806   0.84430507    1.0080691   0.74239299   -1.2465374            1    1.6057508    2.1972233    2.2321507   0.38787838 -0.0014754628  0.040709098  0.013736697    1.4490686    1.4731623   0.70427106  0.066666667    1.3986889        1e-10 1.7606776e-11    5.6796314    2.4993779    30.403515 -0.0072256137  -0.22151695 -0.0040366833    0.1763406   -1.1738022     2.331859 
 1794000    4.1904239    1.2699037    2.9205202  -0.20838279   0.84669279    1.0045993   0.74843152   -1.2465374            1    1.5342864    2.1720714    2.1452465   0.28554143 -0.0070542171   0.10267353 -0.0089489999    1.3763299    1.4021543   0.70246024  0.066666667    1.4118453        1e-10 1.7561506e-11    5.6942725    2.4886663    30.403515  0.016541094  -0.20225653 -0.0039703841   0.20470515   -1.0298409    2.8584964 
 1795000     4.184673    1.2891369    2.8955361  -0.21140023   0.85951629    1.0218856   0.75847599   -1.2465374            1    1.5887498     2.204774    2.2025321   0.35894319  0.011023155   0.07162905 -0.035117576    1.4286733     1.454344   0.70185318  0.066666667    1.3988658        1e-10 1.7546329e-11    5.6991977    2.4968641    30.403515 -0.0019860748  -0.19733783 0.0040605748   0.16596882   -1.8862952    1.4001359 
 1796000    4.1837666    1.2650055    2.9187611  -0.21124655   0.84342696   0.99614519   0.74839847   -1.2465374            1    1.5037257     2.151436    2.1370749   0.22266626  0.015134984  -0.10694817 -0.023364178    1.3457761    1.3727055    0.7069591  0.066666667    1.3780232        1e-10 1.7673978e-11    5.6580359    2.5001995    30.403515 -0.0051956805  -0.16648034 0.0060470412   0.19337341   0.44931727   -1.5425572 
 1797000    4.1243275    1.2571869    2.8671406  -0.21922595     0.838214    1.0175829   0.72657583   -1.2465374            1    1.5740743    2.1789528    2.2179274   0.32534282 -0.012545768 -0.068723501  0.013000379    1.4207304    1.4402345   0.70556266  0.066666667    1.4094127        1e-10 1.7639067e-11    5.6692342    2.4895694    30.403515 -0.011330141  -0.21764822 -0.0085424981    0.1747456   0.74068172   0.32237312 
 1798000    4.1799567    1.2691775    2.9107792   -0.2170526   0.84620858   0.99800672   0.75175399   -1.2465374            1    1.5716005    2.1913172    2.1814873   0.34199706  -0.00656402 -0.027020936  0.016669465    1.4129427    1.4403355   0.70673049  0.066666667    1.4068796        1e-10 1.7668262e-11    5.6598662    2.5166394    30.403515 0.0019065584  -0.16039744 -0.001267827   0.22958203   0.41368106   -1.3322141 
 1799000    4.1539279    1.2788818    2.8750461  -0.22407101   0.85267879    1.0081202    0.7559548   -1.2465374            1    1.6031306    2.2081052    2.2227233   0.37856338 -0.0098598137 0.0036846863  0.054018334    1.4435862    1.4705354   0.70242876  0.066666667    1.4318514        1e-10 1.7560719e-11    5.6945276    2.4879716    30.403515 0.0019664813  -0.18629132 -0.00024666214   0.15026284   0.61271937  -0.84054047 
 1800000    4.1741491    1.2724945    2.9016546  -0.21393292   0.84842018   0.99329051    0.7582834   -1.2465374            1    1.6168615    2.2331404    2.2224341   0.39501006 0.0051122415 -0.089285774    0.0224586    1.4568257    1.4862168   0.71065105  0.066666667    1.4181528        1e-10 1.7766276e-11    5.6286415    2.5188024    30.403515 -0.0087864664  -0.18875699 0.0037834307   0.19120377    1.3822981    2.0402574 
 1801000    4.1597397    1.2587739    2.9009659  -0.20582572   0.83927209   0.98816563   0.74662645   -1.2465374            1    1.5342654    2.1609332    2.1893859   0.25247709 -0.0077274499  0.053078877   0.10963548    1.3766898    1.4042948   0.70502355  0.066666667    1.4302558        1e-10 1.7625589e-11    5.6735693    2.4847673    30.403515  -0.00399218  -0.19984752 0.0058145241    0.2083478    1.9878579   0.64112702 
 1802000    4.1394122    1.2578942     2.881518  -0.21509855   0.83868556   0.99451334   0.74171838   -1.2465374            1    1.6507043    2.2422413    2.2362016   0.47366988 0.0046532072  0.079166476  0.055841638    1.4941645    1.5198987    0.7063521  0.066666667    1.3907804        1e-10 1.7658803e-11    5.6628981    2.4901082    30.403515  0.014898053  -0.19901269 -0.010217421    0.2091156   0.90507335    1.8523883 
 1803000    4.1530435    1.2645199    2.8885237  -0.21812217   0.84310316   0.98746057   0.75328512   -1.2465374            1    1.5757903    2.2023611    2.2020597   0.32295007 0.0087799309 -0.052208055  0.086172063    1.4168093    1.4459123   0.71174651  0.066666667    1.4339026        1e-10 1.7793663e-11    5.6199784    2.5048581    30.403515  0.011534881  -0.19818818 0.0037405212   0.19417344    1.9890388   -1.4688683 
 1804000     4.146131    1.2583657    2.8877652  -0.22661325   0.83899998   0.97020054   0.75738062   -1.2465374            1    1.5245487    2.1479904     2.173605   0.25205078 0.0092902368 -0.049239231  0.037004319    1.3647034     1.396941   0.71123765  0.066666667    1.4319779        1e-10 1.7780941e-11    5.6239993    2.5145914    30.403515 0.0028869297  -0.17162063 0.0046827007   0.18253265    1.1358766     2.336016 
 1805000      4.15128    1.2621962    2.8890838  -0.22357114    0.8415539    1.0087727   0.73748829   -1.2465374            1    1.6739108    2.2591078    2.2539309   0.50869366  0.013779923  0.094085327  0.033073419    1.5182637    1.5412297   0.70759604  0.066666667     1.432439        1e-10 1.7689901e-11    5.6529429    2.4920859    30.403515 0.0012790442  -0.20557739  0.010208498   0.19546467  -0.48299517    1.1874222 
 1806000    4.1469222     1.238734    2.9081882  -0.21285207   0.82591072   0.99838055   0.71856994   -1.2465374            1    1.4326994    2.0802309    2.0877416   0.13012567  0.022332046  0.014935888  0.029463143    1.2810451    1.3013852   0.70471529  0.066666667    1.4010786        1e-10 1.7617882e-11    5.6760511    2.4890101    30.403515 0.0091643552  -0.19463048 -0.0076560543   0.14603821    1.0099151  -0.90254137 
 1807000    4.1806469    1.2792142    2.9014327  -0.21431632   0.85290044    1.0046893   0.75845275   -1.2465374            1    1.6636503    2.2717727    2.2832953   0.43588279 0.0011476542  -0.13964281  0.061453346    1.5035787    1.5315063   0.70257066  0.066666667    1.4059478        1e-10 1.7564267e-11    5.6933775    2.4775122    30.403515 -1.4671735e-05  -0.19088356 -0.0012135366   0.17479139    1.5950636    1.8523952 
 1808000    4.1740205    1.2809423    2.8930782  -0.21727338   0.85405263    1.0046776   0.76033053   -1.2465374            1    1.6453755    2.2564108    2.2569664   0.42274918  0.014919158   0.11636423 -0.023617966    1.4849076     1.513233   0.71056068  0.066666667    1.4062835        1e-10 1.7764017e-11    5.6293574    2.4779624    30.403515 -0.0046705862  -0.17821006 0.0024919939   0.20549787    -1.707896  -0.69619594 
 1809000     4.176015    1.2860102    2.8900049  -0.22353469   0.85743155    1.0076745   0.76394811   -1.2465374            1    1.4265162    2.0865949    2.0693176   0.12363595 0.0096794337  0.016846173  0.016070898    1.2652848    1.2939796   0.70936369  0.066666667     1.388911        1e-10 1.7734092e-11    5.6388565    2.4877492    30.403515 -0.0088004332  -0.17614983 -0.0066961197   0.22463001   -1.9768839   -2.5758494 
 1810000    4.1458261    1.2509415    2.8948845  -0.21460928   0.83404998   0.98313366   0.74128494   -1.2465374            1    1.6787823    2.2643323    2.2787592   0.49325552 0.0076386773   -0.0512165 -0.047452742     1.522334    1.5494735   0.70281448  0.066666667    1.3916385        1e-10 1.7570362e-11    5.6914023    2.4798277    30.403515  0.015396061  -0.18422563 -0.0010318015   0.18725393 0.0047515451    2.2723026 
 1811000    4.1536821     1.264427     2.889255  -0.22548162   0.84304126   0.98961415   0.75184252   -1.2465374            1     1.615694    2.2045679    2.2114624   0.43105159 -0.0044490266  0.018776982 0.0021310427    1.4570175    1.4855328    0.7043072  0.066666667    1.4063351        1e-10 1.760768e-11    5.6793399    2.4806057    30.403515 -0.0082943309  -0.18471204 0.0075468556    0.2368137   -1.7678837    3.3793608 
 1812000    4.1429284    1.2535481    2.8893803  -0.20902526   0.83578787   0.97561497   0.74879187   -1.2465374            1    1.5858894    2.2123816    2.2313155   0.31397114 -0.015162756   0.14574632   0.11310815    1.4278568    1.4575695   0.71173172  0.066666667     1.389222        1e-10 1.7793293e-11    5.6200951    2.4812314    30.403515 -0.0017258636  -0.18085733 0.0073916106    0.1759817   -1.4998258    1.4938421 
 1813000    4.1500035    1.2395737    2.9104298  -0.23095264   0.82647061   0.97365555   0.73488756   -1.2465374            1    1.5182184    2.1215141    2.1631337   0.27000733 0.0070257408   0.12812724 -0.042934217    1.3631203    1.3901562   0.71201437  0.066666667    1.3772236        1e-10 1.7800359e-11    5.6178641    2.4992812    30.403515 -0.0015105998   -0.1780286 0.0049915555   0.21409343   -1.6068883  -0.87388854 
 1814000    4.1419499     1.257909    2.8840409  -0.22129089   0.83869547   0.99584477   0.74090471   -1.2465374            1    1.5588333      2.16362    2.1658128   0.34706705 -0.024558909   0.11193553 -0.054978546    1.4024652    1.4278526   0.69871835  0.066666667    1.3525304        1e-10 1.7467959e-11    5.7247674    2.4927188    30.403515 0.0012446731  -0.17457504 0.0055731274   0.19559916   -3.1341908    1.9453138 
 1815000    4.1551735    1.2730107    2.8821627  -0.21878405   0.84876434   0.98794308   0.76217464   -1.2465374            1    1.4768776    2.1251151     2.119861   0.18565681 0.0033057731  0.097234946 0.0050048744    1.3160205    1.3469362   0.70381282  0.066666667    1.3714449        1e-10 1.759532e-11    5.6833293    2.5039981    30.403515  -0.00886819  -0.20029273 -0.0041040913   0.21809374   -1.9745683   -1.3819301 
 1816000    4.1237946    1.2644744    2.8593202  -0.22423131   0.84307288    1.0102181   0.73905336   -1.2465374            1    1.5798486    2.2122536    2.1815295   0.34576282  0.011107723  0.051322402 -0.045961613    1.4238713    1.4469775   0.71384618  0.066666667     1.396187        1e-10 1.7846155e-11     5.603448    2.4827663    30.403515 -0.0048972984  -0.22120643 -0.0067247974   0.20792148   -1.5555948    3.7591944 
 1817000    4.1611912     1.269209    2.8919822  -0.21547544    0.8462296    1.0103752      0.74408   -1.2465374            1    1.5442964    2.1724839    2.1724508   0.28795471  -0.01221244  0.034382443   0.08050489    1.3872582    1.4114046   0.71104473  0.066666667    1.3946796        1e-10 1.7776118e-11    5.6255252    2.4932509    30.403515   -0.0189214  -0.21772629 -0.0045589337   0.19853287   0.21537702    3.0951229 
 1818000    4.1868505    1.2813741    2.9054764  -0.20840859   0.85434049    0.9962761   0.76603367   -1.2465374            1    1.6233467     2.205001    2.2743276    0.3907115 -0.0062515099 -0.027038443  0.016043835    1.4616752    1.4923093   0.70352201  0.066666667    1.3794275        1e-10 1.758805e-11    5.6856786    2.4900163    30.403515 -0.0057157619  -0.20876405 -0.0048098437   0.20237405     1.283769    3.3093853 
 1819000    4.1544475    1.2619824    2.8924651  -0.22265307   0.84141131   0.99555826    0.7454921   -1.2465374            1    1.6035964    2.2263639    2.1972961   0.38712908  0.006449805 -0.076982337  0.048165546    1.4462601    1.4726534   0.71085733  0.066666667    1.3920723        1e-10 1.7771433e-11    5.6270081    2.5029367    30.403515  0.011197023  -0.20777026 -0.0064051339   0.20747626   0.87073858    4.4567749 
 1820000     4.189856    1.2928069    2.8970491  -0.21421853   0.86196323    1.0047984   0.77309709   -1.2465374            1    1.5543074    2.2010955    2.1820688   0.27975799  0.029711336 -0.022610943  0.042749917    1.3911452    1.4221491   0.71208666  0.066666667     1.361161        1e-10 1.7802167e-11    5.6172938    2.4914345    30.403515 -0.0064029553  -0.18329754 -0.0034129444   0.19456965   0.88295305   0.48179719 
 1821000    4.1497266    1.2478761    2.9018505  -0.21415127   0.83200612   0.99697306   0.72934222   -1.2465374            1     1.614333    2.2314031    2.2299814   0.38161437 -0.00013961662  0.011718175  0.017549063    1.4604052    1.4832039   0.71171517  0.066666667    1.3760261        1e-10 1.7792879e-11    5.6202259    2.4803879    30.403515  -0.01171322  -0.19168408 -0.0052512678   0.19113961  -0.50337527    2.5772176 
 1822000    4.1691097    1.2773475    2.8917622  -0.21460937   0.85165585    1.0197119   0.74707018   -1.2465374            1    1.5810867    2.2150411    2.1814048   0.34681403 -0.0033354478 -0.0099549902  0.013440612    1.4234174    1.4469668   0.70453742  0.066666667    1.3895733        1e-10 1.7613436e-11    5.6774841    2.4877996    30.403515 -0.00089458462  -0.18696201 0.00071823236   0.17226444  -0.15183548    2.5277312 
 1823000    4.1703763    1.2716697    2.8987065  -0.21796684   0.84787026    1.0022842   0.75178577   -1.2465374            1    1.5958683    2.2240958    2.1976805   0.36582862 0.0016574254  0.028236704 -0.021143153    1.4372038    1.4640407    0.7026538  0.066666667    1.3978662        1e-10 1.7566345e-11    5.6927039    2.5015735    30.403515 -0.0073525615  -0.19209654 0.0086607719   0.19922375   -1.4494035    1.3606496 
 1824000    4.1775002    1.2848156    2.8926846  -0.22405972    0.8566351    1.0150623   0.75805104   -1.2465374            1    1.5057764    2.1345341    2.1435516   0.23924363 0.0063568948  0.092130219 -0.040116912    1.3457897    1.3722682    0.7089876  0.066666667    1.4017934        1e-10 1.772469e-11    5.6418476    2.4946923    30.403515 -0.0038730827  -0.20632282 0.0042248064   0.15737568   -1.5849421    2.3042508 
 1825000    4.1698908    1.2893431    2.8805477  -0.22960646   0.85965373    1.0276998   0.75507568   -1.2465374            1    1.4962268    2.1154614    2.1445771   0.22864185 -0.017388028   0.20025951 -0.022111734    1.3368679    1.3610563   0.71275614  0.066666667    1.4122303        1e-10 1.7818904e-11    5.6120176    2.5053349    30.403515  0.011450612  -0.21451831 -0.010285039   0.17972783   -2.3029402    2.3679704 
 1826000    4.1704044    1.2715099    2.8988945  -0.22083431   0.84776369    1.0143789   0.74407528   -1.2465374            1     1.690626    2.2637841    2.2810457   0.52704817 0.0026284239   0.20790941  0.029211035    1.5335888    1.5572076   0.70333343  0.066666667    1.3958075        1e-10 1.7583336e-11     5.687203    2.4785636    30.403515 -0.0067720267  -0.21048629  0.010196005   0.22064517   -1.1279271    2.5679801 
 1827000    4.1958496    1.2860898    2.9097599  -0.20851283   0.85748464    1.0003905   0.76857373   -1.2465374            1    1.6642763    2.2664579    2.2491982   0.47717271 -0.003475283   0.25564723 0.00055106499    1.5020687    1.5326977    0.7025661  0.066666667    1.3971569        1e-10 1.7564153e-11    5.6934144    2.5075022    30.403515  0.022560447  -0.21751223 0.0072610496   0.17189391   -1.1793011    3.3890074 
 1828000    4.1473074    1.2799018    2.8674056  -0.21956797   0.85335891    1.0134879   0.75371376   -1.2465374            1    1.5797558    2.2074806    2.2167281   0.31505872  0.012249857  0.076013694  0.021297005    1.4206844    1.4464546   0.70570998  0.066666667    1.4071422        1e-10 1.764275e-11    5.6680508    2.4991973    30.403515 -0.00018035923  -0.16318696 0.0012262872   0.20275366  -0.42235148  -0.51696728 
 1829000    4.1617944    1.2792842    2.8825102  -0.22198226   0.85294712     1.010896   0.75466052   -1.2465374            1    1.5284284    2.1608033    2.1488254   0.27565637  8.14206e-05  -0.13462144 -0.018128621    1.3691571    1.3954681   0.71059175  0.066666667     1.424637        1e-10 1.7764794e-11    5.6291112    2.5053974    30.403515 -0.0096347723  -0.18367062 -0.009261044   0.21687278    1.1380768  -0.21544013 
 1830000    4.1544675    1.2731609    2.8813066  -0.21782062   0.84886446    1.0219037   0.74117279   -1.2465374            1    1.6088096    2.2421925    2.2122666   0.37196979 -0.016826466 -0.032397352  -0.04206381     1.452385    1.4744015   0.71106816  0.066666667    1.4194084        1e-10 1.7776704e-11    5.6253398    2.5065881    30.403515  0.012325158  -0.17751543 -0.010860347   0.21446788    0.9895484   -2.8309301 
 1831000    4.1865437     1.294458    2.8920858  -0.21191231   0.86306402    1.0180894   0.76660112   -1.2465374            1    1.5757231    2.2020353    2.1993172   0.32581679 -0.010782767 -0.016966479 -0.029187402    1.4139318    1.4418167   0.70463085  0.066666667    1.3966061        1e-10 1.7615771e-11    5.6767313    2.4902718    30.403515 0.0047523905  -0.17479805 -0.011550656   0.21023701    1.2039194  -0.16360275 
 1832000     4.155531    1.2597982    2.8957328  -0.22044224   0.83995505    1.0012038   0.73960974   -1.2465374            1    1.6867183    2.2947659    2.2723264   0.49306273 0.0065818703 -0.079565182  -0.03291022    1.5306236    1.5550328    0.7029106  0.066666667    1.3876544        1e-10 1.7572765e-11    5.6906241       2.4653    30.403515 0.0057142528  -0.20084228  0.002498642   0.19254098    1.0457377    1.6126501 
 1833000    4.1623747    1.2767433    2.8856314  -0.21270015   0.85125298    1.0114873   0.75154183   -1.2465374            1    1.6226151    2.2311655    2.2503852   0.38629448   0.01885827 -0.047042459 -0.018847941     1.464002     1.489577   0.70803974  0.066666667    1.3788872        1e-10 1.7700994e-11    5.6494004    2.4760549    30.403515 -0.00049301592  -0.25285149 0.0026929336   0.19281711  -0.27126811    2.1075629 
 1834000    4.1627705    1.2622016    2.9005689  -0.20882544   0.84155749    1.0034857     0.740789   -1.2465374            1    1.5399349    2.1401416    2.1693754   0.31028777 -0.0053391996 -0.0054327533    0.0670137    1.3835913    1.4079493   0.69753316  0.066666667    1.3865841        1e-10 1.7438329e-11    5.7344944    2.4778237    30.403515 0.00027257855  -0.19854865 0.0017035325    0.1951389   0.33299066    1.9704494 
 1835000    4.1644443    1.2649395    2.8995048  -0.20806246   0.84338294   0.99193211   0.75095263   -1.2465374            1    1.4431925    2.1024471    2.0938351   0.13329529  0.010859164  0.086110795  0.018468763    1.2847038    1.3127265   0.69595502  0.066666667    1.3786794        1e-10 1.7398875e-11    5.7474979     2.489607    30.403515 0.0037176251  -0.18355455 0.0047595723   0.21065693   -1.0647621   -1.9033499 
 1836000    4.1843122    1.2828833    2.9014289  -0.22239611   0.85534678    1.0200456   0.75285403   -1.2465374            1     1.428108    2.0683634    2.0941758   0.12178477 -0.013972476 -0.064748046 0.0045815517     1.269218    1.2939442   0.70479117  0.066666667    1.3534438        1e-10 1.7619779e-11      5.67544    2.4950199    30.403515 -0.0047215193  -0.18984884 0.0065397675   0.13142155  -0.48687006 -0.094642351 
 1837000    4.1623745    1.2639607    2.8984137  -0.22161431   0.84273038    1.0088323   0.73936101   -1.2465374            1    1.5928849     2.221366    2.1849927   0.37229599 0.0013094504 -0.027659813 -0.018829054    1.4368426     1.460196   0.71641682  0.066666667    1.3801716        1e-10 1.7910421e-11    5.5833418    2.5144676    30.403515  0.011086213  -0.18575597 -0.0058058207   0.16054699   -1.0906863    3.2197444 
 1838000    4.1512559    1.2560837    2.8951722  -0.22173214   0.83747842    1.0037105     0.734027   -1.2465374            1    1.5738001    2.1758639    2.1972568   0.34827971  -0.00360089  0.043127669 -0.0086923389    1.4188836    1.4417849   0.70170821  0.066666667    1.3924729        1e-10 1.7542705e-11    5.7003751    2.4810074    30.403515  0.013060549  -0.18360615  0.001919421   0.16417191   -1.4738397    3.0186063 
 1839000    4.1502891    1.2617779    2.8885112  -0.22511375   0.84127502   0.98267043   0.75330258   -1.2465374            1    1.4684045     2.080802    2.1192165   0.20519503 -0.0015701949  0.082180577  -0.03103422    1.3094199    1.3391567     0.700527  0.066666667    1.4159297        1e-10 1.7513175e-11    5.7099869    2.4715074    30.403515 -0.0046484034   -0.1700403  -0.01386856   0.19278338  -0.32451221    2.1125031 
 1840000    4.1634598    1.2703304    2.8931294  -0.21541217    0.8469773   0.98620771   0.76035509   -1.2465374            1    1.6619263    2.2590585    2.2660735   0.46064687 -0.017441609 -0.0036994433 -0.0070552811    1.5014532    1.5322132   0.70251577  0.066666667    1.4068782        1e-10 1.7562894e-11    5.6938224    2.4861484    30.403515 0.0075479258   -0.2181207 0.0034117658   0.16503522   0.74578178    2.6583945 
 1841000    4.1599453    1.2761693     2.883776  -0.22259491   0.85087029   0.99685905   0.76003693   -1.2465374            1    1.4804011    2.1112119    2.1596907   0.17030055  0.010080235  -0.15865922 -0.040781628    1.3199951     1.349287   0.70546911  0.066666667    1.4112879        1e-10 1.7636728e-11     5.669986    2.4803193    30.403515   0.01291574  -0.15439202 -0.0028184078   0.23748676    1.1059946     1.589766 
 1842000    4.1284984    1.2652289    2.8632695  -0.23109498   0.84357593    1.0039121   0.74379995   -1.2465374            1    1.5626915     2.174085    2.1878059   0.32618356 -0.0093448772  -0.17855177  0.049375656    1.4057124    1.4306497   0.71676584  0.066666667    1.4191576        1e-10 1.7919146e-11    5.5806231     2.525857    30.403515  0.003865285  -0.22127712 0.0037924744   0.19640156  -0.12276601    1.0827744 
 1843000     4.161108    1.2626185    2.8984895   -0.2094212   0.84183547   0.98739969   0.75126511   -1.2465374            1    1.6589634    2.2650371    2.2447334   0.46711967  -0.02971249  0.050233581 -0.028403751    1.5004088    1.5290935   0.71107712  0.066666667    1.3852912        1e-10 1.7776928e-11    5.6252689    2.4879094    30.403515  0.016299274  -0.19060446 -0.0028125013   0.19148476  -0.78675081    3.5061806 
 1844000     4.170833    1.2811598    2.8896732  -0.21696737   0.85419761    1.0053755   0.76013097   -1.2465374            1    1.6315695    2.2554675    2.2353468   0.40389429 -0.00081785294 -0.058098764 -0.0012477811    1.4711438    1.4993353   0.70252154  0.066666667    1.3899956        1e-10 1.7563039e-11    5.6937756    2.4892752    30.403515 0.0021657069  -0.19967053 0.0036928674   0.20163356  -0.25121131     1.231755 
 1845000    4.1567636    1.2614772    2.8952864   -0.2156017   0.84107448    1.0010477   0.74152427   -1.2465374            1    1.6828591    2.2600528    2.2565011   0.53202333 -0.0025685011 -0.061575032 -0.0094195994    1.5263603    1.5511941   0.70962973  0.066666667    1.3996316        1e-10 1.7740743e-11    5.6367424     2.517921    30.403515 -0.013205616   -0.2025241  0.008130229   0.21087068   -0.4683037   -1.5062261 
 1846000    4.1400416    1.2704206    2.8696209  -0.22776917   0.84703744    1.0199961   0.73939565   -1.2465374            1    1.5829615    2.1739821    2.1947645   0.38013781 0.0068459231  0.023498039 -0.058079765    1.4269119    1.4488042   0.70916835  0.066666667    1.3923765        1e-10 1.7729209e-11    5.6404097    2.4995561    30.403515  0.011094265  -0.18023956  0.007923356   0.22999558   0.14307601    2.0113976 
 1847000    4.1475465    1.2584837    2.8890628  -0.21137814   0.83907863     1.005914   0.73525157   -1.2465374            1    1.4565682    2.0900942    2.1246732   0.15493721 -0.00036846605  0.044617759 -0.075804646    1.3013932    1.3242631   0.70748789  0.066666667    1.3703427        1e-10 1.7687197e-11     5.653807    2.5049911    30.403515 -0.00035062324  -0.21651732 0.0089542546   0.18971884  -0.92505674  -0.41528701 
 1848000     4.156216    1.2590166    2.8971994  -0.21582729   0.83943391   0.98626785   0.74807186   -1.2465374            1     1.619995    2.2456894    2.2194732   0.39482253  0.010130551  0.051428006  0.015383958    1.4621144     1.490274   0.69993836  0.066666667    1.3757162        1e-10 1.7498459e-11     5.714789    2.4693901    30.403515  0.013444324  -0.19570992 -0.0069854619    0.1732087  -0.91070055   0.54033226 
 1849000    4.1806519    1.2808182    2.8998337  -0.22029384   0.85396991   0.99199706   0.76809879   -1.2465374            1    1.5214849    2.1711086    2.1600941    0.2332519 0.00039105229  0.017289427 -0.020018053    1.3593775    1.3910103   0.70270756  0.066666667    1.3658463        1e-10 1.7567689e-11    5.6922683    2.4878066    30.403515  0.010182765  -0.18396558 -0.0064523259   0.19351758   -0.4933821   0.15238226 
 1850000    4.1498067    1.2599236    2.8898831   -0.2050091   0.84003869   0.99166867   0.74568783   -1.2465374            1    1.7471784    2.3402241    2.3339061   0.56740507 -0.0082972944   0.10622754 0.0073084239    1.5898009     1.616747   0.70420138  0.066666667    1.3963569        1e-10 1.7605035e-11    5.6801933    2.4902573    30.403515 0.00026360867  -0.23171636 0.0073497611   0.21431143  -0.31243736   -1.4376888 
 1851000    4.1620135    1.2662181    2.8957955  -0.21635345   0.84423541    1.0016732   0.74626581   -1.2465374            1    1.5227169    2.1341835    2.1783428   0.25562459 -0.0042738153  0.032800934 -0.007166227    1.3652174    1.3909697   0.71118558  0.066666667    1.3897626        1e-10 1.777964e-11     5.624411    2.5144473    30.403515 0.0025887566  -0.19785531 -0.0036276902   0.19984533   0.23770965   -2.2822409 
 1852000    4.1770911    1.2815888    2.8955023  -0.22272469   0.85448367   0.99744603     0.765537   -1.2465374            1    1.7263257    2.2998481    2.3122428   0.56688638  0.019972757  0.056267269  0.008974662     1.564759    1.5951345   0.70766616  0.066666667    1.3832313        1e-10 1.7691654e-11    5.6523827    2.4762375    30.403515 0.0074498924  -0.21876289 0.0057767157   0.18264831  -0.91326547     1.387465 
 1853000    4.1564919    1.2725077    2.8839842  -0.20588698   0.84842893    1.0039686   0.75164295   -1.2465374            1     1.676066     2.281544    2.2844356   0.46221851 0.0015871182 -0.011279963  0.027398926    1.5174317    1.5440169   0.69885327  0.066666667    1.4009221        1e-10 1.7471332e-11    5.7236621    2.4819831    30.403515 -0.002150405  -0.20891262  0.009928808   0.19022531  -0.33097427     1.712366 
 1854000     4.155788    1.2675788    2.8882092  -0.21195471   0.84514265     1.003214    0.7467784   -1.2465374            1    1.5734281    2.1920095    2.1969564   0.33131833  0.010366903  0.082698466 0.00093081593    1.4158204    1.4414782   0.70462908  0.066666667     1.393287        1e-10 1.7615727e-11    5.6767455    2.4754817    30.403515 -0.00061856726  -0.21047529 0.0015938388   0.19710272   -1.4178182    -1.103177 
 1855000    4.1257063    1.2569484    2.8687579  -0.21544932   0.83805495    1.0069643   0.73293519   -1.2465374            1    1.7465076    2.3418526    2.3499412   0.54772888  0.015328959 -0.066164353 -0.014418787    1.5918215    1.6140644   0.71153575  0.066666667    1.3996869        1e-10 1.7788394e-11    5.6216431    2.4892472    30.403515 0.00089658854  -0.20310523  0.013170819   0.20996556   0.28387593  -0.95617251 
 1856000    4.1507289    1.2428719     2.907857  -0.22417352   0.82866966   0.99260562   0.72664769   -1.2465374            1    1.6012026    2.2002428    2.2172875   0.38607732 -0.0098749459  -0.10449975 -0.056196999    1.4478434    1.4706479   0.70935911  0.066666667    1.4080957        1e-10 1.7733978e-11    5.6388928    2.4848062    30.403515  0.010723645  -0.20240886 -0.0022553045   0.20746443    0.9343451  -0.24630241 
 1857000    4.1672795    1.2760089    2.8912706  -0.20843362   0.85076333   0.99908986   0.75847304   -1.2465374            1    1.6107385    2.2477499    2.2224055   0.36206013   0.01899102 -0.022617769 -0.046003969    1.4506627     1.479331   0.72039622  0.066666667    1.4038024        1e-10 1.8009905e-11       5.5525    2.5379402    30.403515 -0.021261927  -0.20774823  0.010955614   0.18785633  -0.27730119   -1.0760542 
 1858000    4.1659597    1.2675132    2.8984465   -0.2244945   0.84509894    1.0032663   0.74667486   -1.2465374            1    1.5616143    2.1742932    2.1932223   0.31732749 0.0075319342 -0.0088734079 -0.017170871    1.4040285    1.4296575   0.71133623  0.066666667    1.3906699        1e-10 1.7783406e-11    5.6232199    2.4963677    30.403515 0.0077674353  -0.18848823 -0.0071742126   0.16643214   0.64598286   -1.0215199 
 1859000    4.1475364    1.2594569    2.8880795  -0.21253456   0.83972748   0.97931453   0.75288175   -1.2465374            1    1.6608516    2.2744675    2.2464781    0.4616092 0.0010437292   0.15218632 -0.054775409    1.5019558    1.5320451   0.71103744  0.066666667    1.3859211        1e-10 1.7775936e-11    5.6255828    2.5023593    30.403515 0.0045990528  -0.19514275 -0.012368426   0.18933049  -0.49894437 -0.095184507 
 1860000      4.13989    1.2653305    2.8745595  -0.22436066   0.84364363    1.0071645   0.74188291   -1.2465374            1    1.4200224    2.0679719    2.0874663   0.10462883  0.008255553   0.11601844 -0.024344916    1.2634479    1.2875528    0.7070812  0.066666667    1.3992559        1e-10 1.767703e-11    5.6570589    2.4813384    30.403515 0.00054081574  -0.19887416 -0.00039365759   0.21313261   -1.1353414  -0.46216049 
 1861000    4.1445109    1.2547328     2.889778  -0.20781286   0.83657779   0.98182447   0.74620442   -1.2465374            1    1.6177878    2.2252496    2.2258835   0.40223039 -0.021623104   0.13691115 0.0039336855    1.4603013    1.4886512   0.71371781  0.066666667    1.4000433        1e-10 1.7842945e-11    5.6044559    2.5063791    30.403515 -0.016107027  -0.18745296  0.010688074   0.19683922  -0.37747312    2.1265682 
 1862000    4.1369934    1.2657084     2.871285  -0.21950891   0.84389564     1.005976   0.74303275   -1.2465374            1    1.4155737    2.0878179    2.0745333  0.084369918 -0.012840141   0.10689182    0.0455644    1.2587565    1.2832605    0.7091214  0.066666667    1.4108519        1e-10 1.7728035e-11    5.6407831    2.4879828    30.403515 -0.018501472  -0.20018879 0.0014094326   0.16531146 -0.038468249    1.6872629 
 1863000    4.1491943    1.2564663    2.8927281  -0.21342203   0.83773352    0.9896363   0.74321224   -1.2465374            1    1.5728837    2.1895655     2.192112   0.33697357 -0.0054124414 0.0067457578 -0.017381869    1.4160286    1.4427196   0.70484067  0.066666667    1.3907387        1e-10 1.7621017e-11    5.6750414    2.5120861    30.403515 0.0050777256  -0.20494129 -0.0013321597   0.18391473  -0.33438989    1.4199915 
 1864000    4.1434889    1.2689083    2.8745806  -0.22231308   0.84602908   0.99082574    0.7559378   -1.2465374            1    1.7008261     2.292318    2.3023964   0.50776374 0.0021222176  0.036189793 -0.020318531    1.5412853    1.5705055   0.70921622  0.066666667    1.4265575        1e-10 1.7730406e-11    5.6400289    2.4842628    30.403515 -0.0067432233  -0.17813326 0.0073580792   0.17475597  -0.98862114   0.95367908 
 1865000    4.1725589    1.2907954    2.8817635  -0.21744812   0.86062204   0.99266694   0.77848023   -1.2465374            1    1.5632488    2.1936031    2.1834996   0.31264359 0.0016536458 -0.099230163  0.057945951    1.3989504    1.4326861      0.71365  0.066666667    1.4305362        1e-10 1.784125e-11    5.6049884    2.5002419    30.403515 -0.00033969989  -0.20862097 -0.0062089247   0.18605491  -0.56056152    2.5170001 
 1866000    4.1917476    1.2748784    2.9168692  -0.20853969   0.85000961   0.99990968   0.75673855   -1.2465374            1    1.6594581    2.2789408    2.2298305   0.46960298 -0.0040355302  0.079555236 -0.0098034937    1.4997483    1.5279428   0.69887346  0.066666667     1.439649        1e-10 1.7471837e-11    5.7234968    2.4728985    30.403515 -0.011331255  -0.18395552 -0.00038653082   0.17274478  -0.50448683    4.2720634 
 1867000    4.1647089    1.2690367    2.8956722  -0.21543386    0.8461147    1.0077892   0.74550509   -1.2465374            1    1.5928917    2.2158503    2.1945278   0.36829689 -0.0067209004 -0.045025843  0.029213761    1.4355527      1.46034    0.6993198  0.066666667    1.4451548        1e-10 1.7482995e-11    5.7198438    2.4728463    30.403515 -0.0003668242  -0.20520734 0.0071126201   0.16699814  -0.11972821     4.350695 
 1868000    4.1611573    1.2802535    2.8809039  -0.22519412   0.85359334    1.0069464   0.75817098   -1.2465374            1    1.5615073    2.1903433    2.1728441   0.32133453 -0.0019829932 -0.037638875 -0.045322045    1.4014952    1.4290665    0.7121317  0.066666667    1.4642326        1e-10 1.7803293e-11    5.6169385    2.5036984    30.403515 -0.000341704  -0.19543318 0.0027180832   0.23947082    1.4661699    1.3688081 
 1869000    4.1814241    1.2781368    2.9032873  -0.21509451   0.85218209   0.98945145   0.76678291   -1.2465374            1    1.4504241    2.0812556    2.1157412   0.15427539 -0.012434964 -0.0059557347  0.011575449    1.2885944    1.3202843    0.7093384  0.066666667    1.4777867        1e-10 1.773346e-11    5.6390574    2.5082767    30.403515  0.012181706  -0.20649613 -0.0018845122   0.19029332    1.7579511  -0.97658155 
 1870000    4.1756354    1.2843874     2.891248  -0.22061674   0.85634958    1.0004092    0.7667194   -1.2465374            1    1.5797567    2.2056143    2.1932164   0.34043932 -0.0052756377 -0.093299825 -0.019762885    1.4179404    1.4481756   0.70750264  0.066666667    1.4600753        1e-10 1.7687566e-11    5.6536891     2.490082    30.403515 0.0050797945  -0.21051055 7.4949652e-05   0.17379091    2.5159836  -0.41369264 
 1871000    4.1800835    1.2833743    2.8967093  -0.22095383   0.85567413    1.0232219   0.75140593   -1.2465374            1    1.5686569    2.1937809    2.1759618   0.33622795  0.012507894 -0.062121651 -0.0066439632    1.4100725    1.4340754   0.71167928  0.066666667    1.4765252        1e-10 1.7791982e-11    5.6205093    2.4793685    30.403515  0.018531724  -0.21102304 0.0083018847   0.20535337    2.4329962   0.78450431 
 1872000    4.1750961    1.2629132    2.9121829  -0.22323732   0.84203196    1.0043859   0.74099821   -1.2465374            1    1.5834881    2.2188559    2.1578592   0.37374926 0.00063023373  -0.11509149  -0.05531932    1.4271003    1.4513841   0.70556596  0.066666667    1.4568653        1e-10 1.7639149e-11    5.6692077     2.484257    30.403515 0.00089389323  -0.19002113 0.0040059934   0.17508681    1.0933327    2.3821087 
 1873000     4.181301    1.2843963    2.8969047  -0.21635428   0.85635556    1.0217872   0.75340626   -1.2465374            1    1.5827161    2.1982858     2.209361   0.34050155  0.033395887 -0.086766853 -0.014514592    1.4237096    1.4483233   0.69630712  0.066666667    1.4424447        1e-10 1.7407678e-11    5.7445915    2.4982763    30.403515 -0.010170353  -0.20068482   0.00386513   0.18114968   -1.2520556   0.96906033 
 1874000    4.1736969     1.277039    2.8966579  -0.21428607   0.85145014    1.0077243   0.75420696   -1.2465374            1    1.7298274    2.3207959    2.3320487   0.53663766 0.0094634642 -0.046510346 -0.025422223    1.5706519    1.5972843   0.70295804  0.066666667    1.3980619        1e-10 1.7573951e-11      5.69024    2.4828858    30.403515 0.0038220256  -0.17494633 -0.010281663    0.1855674   -1.4288334    1.0369993 
 1875000    4.1730931    1.2681364    2.9049567  -0.21757013   0.84551443    1.0056804   0.74584489   -1.2465374            1    1.4507774    2.1063609    2.0892232   0.15674816  0.018160633   0.10697423 -0.055387525    1.2933667    1.3185031   0.70658303  0.066666667    1.4247212        1e-10 1.7664576e-11    5.6610473    2.5004433    30.403515 -0.0043417417  -0.22140917 -0.021019377   0.17060503   -1.6786047    0.1442205 
 1876000    4.2014011    1.2927426    2.9086585  -0.21100448   0.86192034    1.0148999   0.76673216   -1.2465374            1    1.7568376    2.3262723    2.3490843   0.59515622 -0.0039846649 -0.005188662 0.0086672259    1.5950187    1.6233507   0.69791513  0.066666667    1.4311579        1e-10 1.7447878e-11    5.7313559    2.4894241    30.403515 -0.0051610181  -0.17126746 -0.0081211143   0.17675684   0.29165024    5.0929596 
 1877000    4.1973019    1.2912326    2.9060693  -0.21473237   0.86091354    1.0058977   0.77070796   -1.2465374            1    1.6302311    2.2600781    2.2328877   0.39772745 -0.014641185  -0.03537357  0.068534442     1.467573    1.4979282   0.70302826  0.066666667     1.438177        1e-10 1.7575707e-11    5.6896717    2.5068316    30.403515 0.0060809961  -0.17540078 -0.0091158604   0.16718338   0.99757707   0.33212092 
 1878000    4.1752741    1.2684492    2.9068248  -0.22226746   0.84572303    1.0159088   0.73980911   -1.2465374            1    1.5404468     2.159523    2.1525241   0.30929343 -0.0062698701 -0.074161824 -0.035033797      1.38431    1.4068272   0.70478508  0.066666667    1.4631412        1e-10 1.7619627e-11     5.675489    2.4698944    30.403515 -0.022844179  -0.20804763 0.0044128303   0.20575682    2.4412129    2.2887453 
 1879000    4.1771321    1.2807487    2.8963834  -0.21291449   0.85392354    1.0240787   0.74803009   -1.2465374            1      1.66267    2.2503372    2.2510019   0.48667083  -0.01118976 -0.010813113 0.0070064461    1.5047981    1.5279758   0.70212383  0.066666667     1.464246        1e-10 1.7553096e-11    5.6970008    2.4955321    30.403515  0.012414932  -0.22402202  0.012122035   0.19509348  -0.34397659    1.8303452 
 1880000    4.2123569     1.273302     2.939055  -0.20599296   0.84895852    1.0101328   0.74866116   -1.2465374            1    1.6947201    2.2807008    2.2734005   0.53005899  0.010642284   -0.0271114 -0.0052847681     1.536715    1.5618602   0.69570283  0.066666667    1.4282282        1e-10 1.7392571e-11    5.7495814    2.4835855    30.403515 -0.0042986852  -0.18688972 0.0013939011   0.16076271  0.065607709    2.9278992 
 1881000    4.1904486    1.2892155    2.9012331  -0.22047361   0.85956865    1.0356726   0.74996892   -1.2465374            1    1.4992712    2.1369274    2.1302183     0.230668  0.010562645 0.00088846448 0.0069133415    1.3409902    1.3630521   0.70263826  0.066666667    1.4257637        1e-10 1.7565956e-11    5.6928298     2.486632    30.403515  0.010463273  -0.19749102 9.4844665e-05   0.20699377  -0.63684996  -0.93015495 
 1882000    4.1883671     1.283343     2.905024  -0.21268052   0.85565329    1.0201298   0.75329913   -1.2465374            1    1.6272817    2.2258714    2.2514757   0.40449804  -0.00667478 -0.028163054 -0.016202386    1.4682978    1.4931069   0.69636581  0.066666667    1.4290068        1e-10 1.7409145e-11    5.7441074    2.4761613    30.403515 -0.00080951117  -0.19896011  0.012750646   0.16250253   0.66997727   0.11241295 
 1883000    4.1992327    1.2982319    2.9010008  -0.21886517   0.86558024    1.0252249   0.76623899   -1.2465374            1    1.5600929    2.1800154    2.1840653   0.31619815  0.012536976  -0.12791894  0.029549501    1.3983781     1.425248   0.69489285  0.066666667    1.4430021        1e-10 1.7372321e-11    5.7562831     2.483276    30.403515 0.0040367919  -0.15536453 0.00073643076   0.19712237    1.4724606     1.201506 
 1884000    4.1621654    1.2775034     2.884662  -0.21257601   0.85175976    1.0157667   0.74969756   -1.2465374            1    1.4824607    2.1396584    2.1335533   0.17417045 -0.0037442898  -0.13462943 0.0046324698    1.3242369    1.3488598   0.70203649  0.066666667    1.4082237        1e-10 1.7550912e-11    5.6977095    2.5024697    30.403515 -0.0015856661   -0.2084007 -0.0064470658   0.23682903    1.0294268   -2.0305726 
 1885000    4.1938933    1.2823285    2.9115648  -0.21917252   0.85497686    1.0249985   0.74916683   -1.2465374            1    1.6633981    2.2414577    2.2586205   0.49011622 -0.012622383 -0.012997972  0.044733722    1.5052863     1.528583    0.7028025  0.066666667    1.3838843        1e-10 1.7570062e-11    5.6914994    2.5031676    30.403515  0.010077046   -0.1959523 -0.0066701005   0.20134662    1.0592039    1.0062335 
 1886000    4.1405584    1.2659735    2.8745849  -0.21700162   0.84407237    1.0185395   0.73549003   -1.2465374            1    1.5471044    2.1750221    2.1932099   0.27308119 0.0051627783 -0.040472329 -0.010408314    1.3918791    1.4131388   0.70795067  0.066666667    1.3749364        1e-10 1.7698767e-11    5.6501112    2.4881456    30.403515  0.014096822  -0.17286492  0.012612335   0.18445757  -0.73169319    2.7432996 
 1887000     4.147167     1.251874     2.895293  -0.22054356   0.83467167   0.99903596    0.7323838   -1.2465374            1    1.6144411    2.2430491    2.1841187    0.4161554  -0.01807847  -0.05726225  0.036067416    1.4598714    1.4830407   0.70395501  0.066666667    1.3902845        1e-10 1.7598875e-11    5.6821813    2.4897015    30.403515 0.0035138692  -0.17660012 0.0038859528    0.2119924   0.16702021    3.9536978 
 1888000    4.1514847    1.2767652    2.8747195  -0.21711784   0.85126759    1.0099986   0.75249327   -1.2465374            1    1.4995278    2.1526687    2.1636083    0.1823064  0.001741565 -0.065409782  0.047207149     1.340714    1.3666855    0.7050935  0.066666667    1.3619326        1e-10 1.7627338e-11    5.6730065    2.5109136    30.403515 -0.0026199039  -0.19964988 0.00066329174   0.17468422 -0.039226007  -0.52056839 
 1889000    4.1802727    1.2690419    2.9112307  -0.21952751   0.84611821     1.012101   0.74282365   -1.2465374            1    1.6100939    2.2174449    2.2042212   0.40861569 -0.0054603003 -0.018323723 -0.019047311    1.4533209    1.4769751    0.7053274  0.066666667    1.3711203        1e-10 1.7633185e-11    5.6711252    2.4781361    30.403515 -0.012279194  -0.19041448 -0.00081767473   0.17898617   0.76167124    2.0070606 
 1890000    4.1601105    1.2794706    2.8806399  -0.21832907   0.85307138    1.0267004   0.74501287   -1.2465374            1    1.7308304    2.3125247    2.3111832    0.5687832 -0.0051145299 -0.031051245  0.058387848    1.5735953    1.5957913   0.70723781  0.066666667    1.3593823        1e-10 1.7680945e-11    5.6558062    2.4834117    30.403515 0.0050452298  -0.20121359 -0.0067241666   0.19611341    2.5706961 -0.071878444 
 1891000    4.1869845    1.2981985     2.888786  -0.22440018   0.86555796    1.0034726   0.77975898   -1.2465374            1    1.5933529    2.2152076     2.212998   0.35185302  0.005382461 -0.072386713 -0.0089161045    1.4287846     1.461369   0.70724784  0.066666667    1.3747916        1e-10 1.7681196e-11     5.655726    2.4951078    30.403515 -0.011640607  -0.21588724 -0.0046333778   0.19660085   0.08093724  -0.13822839 
 1892000    4.1634361    1.2769413    2.8864948  -0.21254282   0.85138501    1.0405743   0.73362904   -1.2465374            1    1.6116838    2.2239502    2.2365242   0.37457696 -0.013979808 0.0095909367 -0.0063178739    1.4568512    1.4748199   0.70122868  0.066666667    1.3902082        1e-10 1.7530717e-11    5.7042733    2.4987214    30.403515  0.012481203  -0.16875357 0.0065203716   0.16838203   -0.6628272   0.96805068 
 1893000    4.1731708    1.2581895    2.9149814  -0.20198101   0.83888244    1.0006217   0.73823125   -1.2465374            1    1.4706443    2.1322485    2.1159884   0.16369595  0.010137847 -0.089223336  0.040602368    1.3148405    1.3390353   0.69876077  0.066666667     1.369699        1e-10 1.7469019e-11    5.7244199    2.4963591    30.403515  0.005309758  -0.19133698 -0.0049698163   0.22149642    1.1296634   0.10968392 
 1894000    4.1614351    1.2815404    2.8798947   -0.2202977   0.85445143    0.9994997   0.76420481   -1.2465374            1    1.6006029    2.2090882    2.2356873   0.35703314 -0.0022109571   0.03622072 -0.0099726905    1.4393173    1.4691415   0.70740086  0.066666667    1.3762034        1e-10 1.7685022e-11    5.6545026    2.4985466    30.403515  0.011772776  -0.16416801 0.0062909095    0.2044466   -1.9051941    1.1589662 
 1895000    4.1620157    1.2744475    2.8875683  -0.21677726   0.84972229   0.99972591   0.75638666   -1.2465374            1    1.6000491    2.2112998    2.2271307   0.36171686 0.0078011153  0.050237937  0.082427379    1.4404136     1.468558   0.70126939  0.066666667     1.357495        1e-10 1.7531735e-11    5.7039421    2.4861318    30.403515 -0.00066003144  -0.16148956 -0.0071246989   0.21068032   -1.5559339   0.99507289 
 1896000    4.1608239    1.2664428    2.8943811   -0.2211446   0.84438528    1.0056337   0.74404093   -1.2465374            1     1.478386    2.1240585     2.129641   0.18145862  0.005336483  0.040932929 -0.010725086    1.3213561    1.3461179   0.70650179  0.066666667    1.3600699        1e-10 1.7662545e-11    5.6616984    2.5267991    30.403515  0.012646331  -0.17088166 -0.0088618284   0.17380015  -0.97729226  -0.31687503 
 1897000    4.1576838    1.2504004    2.9072834  -0.20796558   0.83368922   0.99125441   0.73563841   -1.2465374            1    1.6821768    2.2762156    2.2801444   0.49017028 -0.010578581 -0.095274313 -0.027681917    1.5269202    1.5517998    0.7079834  0.066666667    1.3774169        1e-10 1.7699585e-11      5.64985    2.4894196    30.403515 -0.0043794433   -0.1672219  0.005735783   0.21940237  0.042604966    2.2036813 
 1898000    4.1418983    1.2476159    2.8942824  -0.21513214   0.83183265   0.99688387    0.7291162   -1.2465374            1    1.5111102    2.1599429    2.1483406   0.22504697 0.0026656393 -0.092084481 -0.073084259    1.3572301    1.3799928   0.71258536  0.066666667    1.3703854        1e-10 1.7814634e-11    5.6133626     2.488566    30.403515  0.016285234  -0.22248248 -0.004388643   0.17979348    1.0465398  -0.14381109 
 1899000    4.1543027    1.2581053    2.8961974  -0.20936938   0.83882631   0.98308372   0.74906985   -1.2465374            1    1.6594606     2.254562    2.2570156   0.46680424 -0.0030931104 -0.016149833 -0.052351946    1.5013693    1.5301584   0.70262427  0.066666667    1.3564517        1e-10 1.7565607e-11    5.6929431    2.4713119    30.403515 0.0039225575  -0.17337452 -0.012323938   0.17125316    1.0895087   0.87951849 
 1900000    4.1712051    1.2761806    2.8950245  -0.21472638   0.85087778    1.0009152   0.75752126   -1.2465374            1    1.5160322    2.1443203    2.1578135   0.24596289 0.0026957271  0.036187255  0.021684813    1.3561572    1.3843846   0.69927238  0.066666667    1.3544945        1e-10 1.748181e-11    5.7202316     2.480341    30.403515 0.00016547587  -0.16661577 0.0069416497    0.1765607   0.23520193  0.040101855 
 1901000    4.1408216    1.2549468    2.8858748  -0.21781954   0.83672045     1.000744   0.73464532   -1.2465374            1    1.6785633    2.2922716    2.2446802   0.49873808 0.0042623913  0.097947896 -0.016043569    1.5235163    1.5469383   0.70807425  0.066666667    1.3556623        1e-10 1.7701856e-11    5.6491251    2.4994582    30.403515 -0.010950817  -0.18816921 -0.0068800216   0.19172194   -1.3193135   -1.3298623 
 1902000    4.1301752    1.2393536    2.8908215  -0.22616836   0.82632388   0.97723097   0.73242114   -1.2465374            1    1.5664596    2.1882112     2.203609   0.30755856 -0.0089910432 -0.019472291 -0.024213927     1.411882    1.4379272   0.72088407  0.066666667    1.3438683        1e-10 1.8022102e-11    5.5487424     2.513866    30.403515 0.0032618541    -0.191904 0.0030876288   0.21789833   0.33144666    1.9583157 
 1903000    4.1456239    1.2548697    2.8907543  -0.22366252   0.83666902   0.98894561   0.74191459   -1.2465374            1    1.5856558    2.1985672    2.2064183   0.35198201 -0.0041004121  0.015895961  0.034888585    1.4290746    1.4555826   0.70224944  0.066666667    1.3486363        1e-10 1.7556236e-11    5.6959818    2.4961476    30.403515 0.0085652051  -0.19361293  0.011829625   0.19181557   0.23091554    1.3757253 
 1904000    4.1622202    1.2651783    2.8970419  -0.21980447   0.84354216   0.99266648   0.75075343   -1.2465374            1    1.5582432    2.1942782    2.1815663   0.29888524   0.01144173 -0.022400801 -0.0087957728    1.3997966    1.4276806   0.70498957  0.066666667    1.3429313        1e-10 1.7624739e-11    5.6738428    2.4945876    30.403515 0.0076462089  -0.15771297  0.009032936   0.18794458    2.2822342    1.3347904 
 1905000    4.1544714    1.2637369    2.8907345  -0.21995559   0.84258114   0.98473075   0.75413891   -1.2465374            1    1.5657588    2.1947193    2.2015765   0.30098073 0.0052627425  0.092920185 -0.035587953    1.4065977      1.43624    0.7136635  0.066666667    1.3395697        1e-10 1.7841587e-11    5.6048824     2.490817    30.403515 -0.017276996  -0.18532821 -0.0030141373   0.18973069  -0.16520931    2.1352365 
 1906000    4.1476996    1.2617997       2.8859  -0.21718542    0.8412895    1.0004617   0.74223852   -1.2465374            1    1.6529282    2.2463251     2.262212   0.45024728 0.0019448137  -0.14219317 -0.044202257    1.4962786    1.5213402    0.7093084  0.066666667     1.343057        1e-10 1.773271e-11    5.6392959    2.4658767    30.403515 0.0012387023   -0.2005452 -0.0068283037   0.18923295    1.2584139     2.461825 
 1907000    4.1807959    1.2705623    2.9102337  -0.21945961   0.84713186   0.99901649   0.75262353   -1.2465374            1    1.5433273    2.1745788     2.163068   0.29233511  0.013419583 -0.053543242 -0.053836254     1.384486    1.4119295   0.70142151  0.066666667    1.3415157        1e-10 1.7535538e-11    5.7027051    2.4985817    30.403515  0.014202981  -0.18788375 0.0064417452   0.18242486   0.89733525    1.0435747 
 1908000    4.1781846     1.273043    2.9051416  -0.22390982   0.84878587    1.0072045   0.75020577   -1.2465374            1    1.5261659     2.154368     2.162548   0.26158152 -0.00028338722  0.087220723  0.017354371    1.3678348    1.3936911   0.70153077  0.066666667    1.3373444        1e-10 1.7538269e-11    5.7018169    2.4785135    30.403515 -0.0075943461  -0.20939673 -0.0030703507   0.17827059  -0.17974025   0.61172423 
 1909000    4.1387185    1.2575153    2.8812031  -0.22720857   0.83843299    1.0054505   0.73449229   -1.2465374            1    1.6273202    2.2198282     2.252315   0.40981732  0.018255401  -0.09052654  0.016731667    1.4723054    1.4950761   0.71267922  0.066666667    1.3405684        1e-10 1.781698e-11    5.6126233    2.4982283    30.403515 0.00037729394  -0.20462559 -0.0076221042   0.18333501   -1.1756034    3.9676989 
 1910000     4.142333    1.2402528    2.9020801   -0.2168261   0.82692343   0.98032063   0.73146895   -1.2465374            1    1.6086735    2.2472758    2.2192529   0.35949176 -0.016470176  0.049976774  0.036859206    1.4542969    1.4797347   0.71031144  0.066666667    1.3356687        1e-10 1.7757786e-11    5.6313327    2.5024788    30.403515 -0.0089294689  -0.17800154 -0.009373953   0.14752162  -0.79152332    4.3320651 
 1911000    4.1650974    1.2656739    2.8994235  -0.22008267   0.84387259   0.99139396   0.75208289   -1.2465374            1    1.5265351    2.1633904    2.1669633   0.24925148 0.0084795886  0.044392026 -0.031572896    1.3678078    1.3961398   0.70365542  0.066666667    1.3667964        1e-10 1.7591385e-11    5.6846006    2.4852243    30.403515 -0.0025978513   -0.1887138 0.0035599961   0.25946456   0.58898121    1.5990955 
 1912000    4.1478831    1.2606134    2.8872697  -0.21835371   0.84049855   0.98717649   0.74923389   -1.2465374            1    1.5841797    2.2081383    2.2003191   0.34408158 -0.010498956  0.027922086  0.018559164    1.4260537    1.4543391    0.7078159  0.066666667    1.3657933        1e-10 1.7695398e-11     5.651187    2.5055373    30.403515 -0.0023954114   -0.2169188 -0.009742846   0.17340661   0.62614591     2.972869 
 1913000     4.193213    1.2576879    2.9355251  -0.22031915   0.83854803   0.98637346   0.74656791   -1.2465374            1    1.6004504     2.202492    2.2072196   0.39163967 0.0023428831  0.080728598  0.032100809    1.4428871    1.4707155   0.71081376  0.066666667     1.384952        1e-10 1.7770344e-11    5.6273531    2.5094059    30.403515 -0.0072366803  -0.20558961  0.008146304     0.212668 -0.041758285    0.5142424 
 1914000    4.1587116    1.2632169    2.8954947  -0.21375386   0.84223442   0.99604017   0.74652798   -1.2465374            1    1.5641103    2.2137128    2.1651375   0.31348051 -0.013206917  -0.09663116  0.030289171    1.4065554    1.4331039   0.70783118  0.066666667    1.3947277        1e-10 1.769578e-11     5.651065    2.5178301    30.403515 0.0054895697  -0.18905927 0.0024872415   0.15462328   0.95421398    1.6455736 
 1915000    4.1777153     1.275302    2.9024133  -0.20856587     0.850292   0.98279481   0.76786302   -1.2465374            1    1.6041601    2.2289019    2.2200522   0.36352618 -0.0088550848 -0.091056707  0.025851859    1.4421025    1.4748959   0.70308039  0.066666667    1.4005775        1e-10 1.757701e-11    5.6892498    2.4804693    30.403515 0.0032509856  -0.21242409 -0.0068126487   0.20808577  -0.21314794   0.94993522 
 1916000    4.1366188    1.2432449     2.893374  -0.21292336   0.82891832   0.99557499   0.72520085   -1.2465374            1    1.6590423    2.2647829    2.2497776   0.46256635 -0.0018887274  -0.12106944 -0.010398832    1.5059885    1.5280971   0.70872457  0.066666667    1.4117003        1e-10 1.7718114e-11    5.6439415    2.4990348    30.403515 -0.0015141772  -0.20226802 0.0024816047   0.21096084  -0.70634835   0.89729651 
 1917000    4.1612592    1.2613652    2.8998941  -0.21539204   0.84099981   0.98982969   0.74839415   -1.2465374            1    1.6053133    2.2387527    2.1947749   0.38241218 -0.0048769973 -0.029508925  0.070095553    1.4473646    1.4751237   0.70812436  0.066666667    1.3969913        1e-10 1.7703109e-11    5.6487253    2.4833057    30.403515 -0.0044382196  -0.17603789 -0.0045949839   0.18713018   -1.2096379    2.6043597 
 1918000    4.1451784    1.2538899    2.8912885  -0.21522661   0.83601578   0.98892686   0.74086584   -1.2465374            1    1.6199942    2.2254773    2.2402857   0.39421975 0.0055316004 0.0058432531 -0.023513514    1.4636344    1.4899235   0.70641108  0.066666667    1.3853895        1e-10 1.7660277e-11    5.6624254    2.4863507    30.403515 -0.0015215432  -0.16149066  0.011344678   0.22184929  -0.26884901    2.6216614 
 1919000    4.1453732    1.2651883    2.8801849  -0.21918417   0.84354881   0.98956121   0.75269945   -1.2465374            1    1.5287842    2.1685974    2.1658482   0.25190714 0.0038507335 -0.044018726 -0.0047954739    1.3699269      1.39863   0.70498413  0.066666667    1.4008847        1e-10 1.7624603e-11    5.6738866    2.5122043    30.403515 -0.008141361  -0.20272921 0.0026364943   0.16206963  -0.41185636    3.2402298 
 1920000    4.1347007    1.2519403    2.8827604  -0.22039198   0.83471592   0.97674431   0.74634787   -1.2465374            1     1.719658    2.3005644    2.2911615   0.56724809  0.010263756 -0.063574869 -0.037692155    1.5621412    1.5911896   0.71302932  0.066666667    1.3924966        1e-10 1.7825733e-11    5.6098675    2.5087551    30.403515 0.0049766842  -0.21343732 0.0016539942    0.1843466   0.54894233    3.3077018 
 1921000     4.139054    1.2564582    2.8825957  -0.22179946   0.83772818   0.98277546   0.74747927   -1.2465374            1    1.3616927    2.0231909    2.0515275  0.010359637 0.0081408101 -0.044535679 -0.0099584063    1.2039371     1.232431   0.70299443  0.066666667    1.3739674        1e-10 1.7574861e-11    5.6899455    2.4896638    30.403515 0.0063946729  -0.16768189 0.0084294933   0.20823319  -0.92418722  -0.81500329 
 1922000     4.156684    1.2631093    2.8935746  -0.21508677   0.84216272   0.98765411   0.75163781   -1.2465374            1    1.6393169    2.2207081    2.2524341   0.44480851 0.0071842351 -0.086096992  0.091323135    1.4806836    1.5094135     0.707261  0.066666667    1.3857882        1e-10 1.7681525e-11    5.6556208    2.5051223    30.403515  -0.01390332   -0.1972475 0.0087789747   0.16954722  -0.39114696   0.18551378 
 1923000    4.1487967     1.257809    2.8909878  -0.21760745   0.83862875   0.98241012   0.74916892   -1.2465374            1    1.5383076    2.1784587     2.165088   0.27137625 -0.0031328204  0.019647797  0.001327899    1.3801954     1.409094   0.70947182  0.066666667    1.4254474        1e-10 1.7736796e-11     5.637997    2.4982379    30.403515 -0.0035049802  -0.19424858 -0.0097397738   0.21464396   0.62438035    1.9356858 
 1924000     4.144768    1.2607989    2.8839691  -0.21891898   0.84062229   0.99491299   0.74461335   -1.2465374            1    1.5968532    2.2163488    2.2179882   0.35622259 -0.026182594  0.061062867 -0.046196769    1.4397024    1.4659951   0.70135365  0.066666667    1.4407594        1e-10 1.7533841e-11    5.7032568    2.4698745    30.403515 0.0052919329  -0.21532493  0.002733286   0.20739417  -0.73284409     2.748567 
 1925000    4.1291427    1.2511647     2.877978  -0.21968476   0.83419876   0.98975412   0.73740057   -1.2465374            1    1.6779812    2.2780755    2.2706746   0.48519341 -0.010036371 -0.018425329 -0.027293762    1.5223527    1.5478016    0.7015767  0.066666667    1.4487895        1e-10 1.7539418e-11    5.7014436    2.4844918    30.403515 -0.0036907721  -0.15284218 -0.0043524915   0.19478507   -1.1726471    2.2711064 
 1926000    4.1553974    1.2628399    2.8925575  -0.22307804   0.84198309   0.98868329   0.75070481   -1.2465374            1    1.5634219    2.1765036    2.1940823   0.31967969 0.0056621743 -0.031936604  -0.05483347    1.4049855    1.4333831    0.7100394  0.066666667    1.4453171        1e-10 1.7750985e-11    5.6334902    2.4824945    30.403515 -0.0025085392  -0.17162732 0.0059803376   0.15964146  -0.71047876   0.29031196 
 1927000    4.1583239    1.2550296    2.9032943  -0.22501638   0.83677567   0.97214651     0.752557   -1.2465374            1    1.5269665    2.1775035    2.1466888   0.25670704 -0.0049622451  0.045250946 -0.028451981    1.3681392    1.3991028   0.70854396  0.066666667    1.4495209        1e-10 1.7713599e-11    5.6453801    2.4971647    30.403515 -0.010918425  -0.19201548  0.011755304   0.19949409   -1.1203731    3.1897979 
 1928000    4.1681707    1.2694978    2.8986729  -0.22673964   0.84642213    1.0003107   0.75066482   -1.2465374            1    1.6078028    2.2074438    2.2193481   0.39661653  0.012527358  -0.01006946 -0.025150482    1.4493749    1.4762347   0.71479488  0.066666667     1.452972        1e-10 1.7869872e-11     5.596011    2.5115824    30.403515 -0.017988561  -0.20292708  0.016000404   0.20083397    1.7565141    3.5581615 
 1929000    4.1613513    1.2776515    2.8836998  -0.22355211   0.85185851   0.99468383   0.76299679   -1.2465374            1    1.5605081    2.1780014     2.194631   0.30889189 -0.0022243808  -0.09596532  0.015176734    1.3994775    1.4296801   0.71196883  0.066666667    1.4387354        1e-10 1.7799221e-11    5.6182235    2.4994671    30.403515 -0.00089368171  -0.18601471 0.00064810194   0.16316941  -0.30358616    3.1642286 
 1930000    4.1601028    1.2667546    2.8933482  -0.22760557   0.84459316   0.98881138   0.75486211   -1.2465374            1    1.5297528    2.1498545    2.1615976   0.27780618 0.0039130212  -0.08247658 0.0014684709     1.370439    1.3996972   0.70466217  0.066666667    1.4430912        1e-10 1.7616554e-11     5.676479    2.4827622    30.403515  0.019489355    -0.206524 -0.015556918   0.21672985  -0.24750685  -0.28362725 
 1931000    4.1689379    1.2514236    2.9175144  -0.20719305   0.83437137   0.97976533   0.74390582   -1.2465374            1    1.5082094    2.1469014    2.1410043   0.23672244 -0.010912356 0.0061339447 -0.027749282    1.3512079    1.3793436   0.70421935  0.066666667    1.4329071        1e-10 1.7605484e-11    5.6800484    2.4956414    30.403515 -0.0046702328  -0.16221484 -0.00091860688   0.14430617    -1.212633  0.051694145 
 1932000    4.1475412    1.2636815    2.8838596  -0.22094892    0.8425442   0.99511534   0.74760724   -1.2465374            1    1.6173397    2.2245864    2.2068357    0.4205971 -0.0083093614  0.091658557 -0.024852438    1.4595571     1.486455   0.71092105  0.066666667    1.4164076        1e-10 1.7773026e-11    5.6265038    2.4961715    30.403515 0.0097566924  -0.21261184  0.014750631   0.20047507    -1.391982   -1.0039458 
 1933000    4.1423013    1.2657167    2.8765846    -0.225531   0.84390116    1.0083152   0.74158387   -1.2465374            1    1.5573506    2.1786087     2.189896   0.30354711  0.017504896  0.017885661 -0.040913567    1.4008392    1.4247297    0.7088235  0.066666667    1.4140247        1e-10 1.7720587e-11    5.6431538    2.4876137    30.403515 -0.014177943  -0.22717144 0.0020283954   0.19944275    1.2502305    1.6004596 
 1934000    4.1373575    1.2614015     2.875956  -0.21940428   0.84102406    1.0145926   0.73300119   -1.2465374            1    1.7321707    2.3052177    2.3123709   0.57892371    0.0197339 -0.014406731 -0.0029999124    1.5774707    1.5987242   0.70214027  0.066666667    1.4212134        1e-10 1.7553507e-11    5.6968674    2.4870832    30.403515 0.0048284463  -0.17649196  0.015915724   0.20055006   0.94241002    4.2581147 
 1935000    4.1783603    1.2636618    2.9146985  -0.21307947   0.84253103   0.99573367   0.74720051   -1.2465374            1    1.4606515     2.086765    2.1128701   0.18231947  0.013767174  0.096054289  0.020531603    1.3029547    1.3296855   0.69580832  0.066666667    1.4121515        1e-10 1.7395208e-11    5.7487097    2.5064863    30.403515 -0.0074584231  -0.19601091 0.0036482252   0.20568107 -0.054808112    2.0996074 
 1936000    4.1721155     1.284054    2.8880615  -0.22322759   0.85612728    1.0173643   0.75579206   -1.2465374            1    1.5106676    2.1239036    2.1388223    0.2692769 0.0050382138 -0.010653008  0.056071209    1.3511575    1.3768565   0.70699021  0.066666667    1.3951458        1e-10 1.7674755e-11     5.657787    2.5171005    30.403515 -0.0082997951   -0.1693391 0.0087784415   0.18969736    1.5789125   0.28586451 
 1937000    4.1506379     1.264523    2.8861149  -0.22240319   0.84310525    1.0061242   0.74165725   -1.2465374            1    1.6334035    2.2219541    2.2489225   0.42933386  0.010039839 -0.060941024  0.045289091    1.4768766    1.5010708   0.71231963  0.066666667    1.4163383        1e-10 1.7807991e-11    5.6154567     2.499039    30.403515 0.0047727031  -0.22035645 0.0093766333   0.16248635   -1.3802869   0.41525978 
 1938000     4.145574     1.259932     2.885642  -0.21955415   0.84004425   0.98723273   0.74846134   -1.2465374            1    1.5421696    2.1543539    2.1656274   0.30652751 0.0071371563 -0.020739067  0.046011973    1.3842067    1.4123217    0.7140858  0.066666667     1.416819        1e-10 1.7852145e-11    5.6015678     2.504083    30.403515 3.1994296e-05  -0.22749945 0.0023117081   0.19711555   -1.4501716    2.5640418 
 1939000    4.1255583    1.2526613     2.872897  -0.21699134   0.83519661   0.98967748   0.73906822   -1.2465374            1    1.4324461    2.0806216    2.0787383   0.13797832  0.011276081 -0.028164644  0.022671751    1.2764656    1.3022766   0.70735631  0.066666667    1.4253537        1e-10 1.7683908e-11    5.6548587    2.5014953    30.403515 -0.013470368  -0.19014447 -0.0055721815   0.22884889   -0.9411879   0.38611457 
 1940000    4.1636872    1.2660545    2.8976327  -0.22159566   0.84412636   0.97387724   0.76341133   -1.2465374            1    1.6331524    2.2388655    2.2250103   0.43558135 0.0033212306   0.25046329  0.030365273    1.4720343    1.5050611   0.71322544  0.066666667    1.4146765        1e-10 1.7830636e-11    5.6083249    2.4973647    30.403515 -0.0027274291  -0.24434942 0.0032512222   0.22200594   -3.1206962    1.5175713 
 1941000    4.1614462    1.2723357    2.8891105  -0.22360212   0.84831429   0.99664687   0.75601981   -1.2465374            1    1.5982706     2.189016    2.2190493   0.38674653 0.0047957992  0.086370285 0.0012983004    1.4387125    1.4671844   0.70942093  0.066666667     1.410981        1e-10 1.7735523e-11    5.6384014    2.4893208    30.403515 0.00046309999  -0.21925899 0.0036129235   0.22096444  -0.37181771    1.7409887 
 1942000    4.1524269    1.2696397    2.8827872  -0.21963327   0.84651676     0.981197   0.76273015   -1.2465374            1    1.6049068    2.2336956     2.200788   0.38023682 0.0018260593   0.10189104  0.012004864    1.4439325    1.4758527   0.70677077  0.066666667    1.4032384        1e-10 1.7669269e-11    5.6595436    2.4902387    30.403515 0.0046657255  -0.26357261 0.0054477803   0.18763763   -2.1862569  -0.58584839 
 1943000    4.1490559    1.2676438    2.8814122   -0.2209459   0.84518601   0.99452226   0.75226549   -1.2465374            1    1.5153375    2.1526298     2.154087   0.23929552 -0.013405421  0.026847096  0.042974932    1.3565717    1.3845307    0.7074387  0.066666667    1.4179992        1e-10 1.7685968e-11    5.6542001     2.486472    30.403515 0.0089195492  -0.23011563 0.0093123282   0.18877148   0.18697732   0.48557062 
 1944000    4.1604567    1.2668526    2.8936041   -0.2199769   0.84465851   0.98731434   0.75590116   -1.2465374            1    1.5823834    2.2061159    2.2095789   0.33145538 0.0022332238  0.012255345  0.059038327    1.4228503    1.4525247   0.70847838  0.066666667    1.4106448        1e-10 1.771196e-11    5.6459027    2.4750963    30.403515  0.015227317  -0.17107378 -0.0059410521    0.1610391  0.030468601    1.5868375 
 1945000     4.142361    1.2704062    2.8719547  -0.22174996   0.84702783    1.0046693   0.74893181   -1.2465374            1    1.5617406    2.1994797    2.2047546   0.28098763   0.01642107  0.016481088  0.034946323    1.4036785    1.4295993   0.71086412  0.066666667    1.4274716        1e-10 1.7771603e-11    5.6269544    2.5071549    30.403515  0.016734428    -0.189187 -0.0087894534   0.16907254   -1.1847562  0.044467699 
 1946000    4.1659674    1.2744839    2.8914834  -0.22511789   0.84974659    1.0040871   0.75370822   -1.2465374            1    1.5795455     2.175234    2.1953597   0.36804293  0.020038067  0.087120982   -0.0227094    1.4204753    1.4474808   0.70551369  0.066666667    1.4337052        1e-10 1.7637842e-11    5.6696277    2.4839735    30.403515 0.0026938646  -0.19687903 0.0084330818   0.17453041  -0.50154478   0.83682126 
 1947000    4.1315829    1.2635584    2.8680245  -0.22343698   0.84246212   0.98391977   0.75445111   -1.2465374            1    1.6036981    2.2065422    2.2225744   0.38197769 0.00022419107  0.083527441   0.02646442    1.4444711    1.4742859   0.70619231  0.066666667     1.448887        1e-10 1.7654808e-11    5.6641795    2.4901771    30.403515 0.0017682678  -0.17831372 -0.010749366   0.18070432   -1.3113841   0.52790094 
 1948000    4.1505151    1.2678529    2.8826622  -0.22787487    0.8453254   0.99496572   0.75221542   -1.2465374            1    1.5505177    2.1970255     2.164131   0.29039651 0.0023719061  0.036651505  -0.03362726    1.3917625    1.4196527   0.70865188  0.066666667    1.4435975        1e-10 1.7716297e-11    5.6445204    2.5021302    30.403515  0.011395554  -0.18887897 -0.014711342   0.21295324    1.2080829    2.0795874 
 1949000    4.1438085     1.250122    2.8936865  -0.21239022   0.83350358   0.98704293   0.73796166   -1.2465374            1    1.6040159    2.2026706    2.2286853   0.38069185 0.0056280757  0.028272648   0.05668723     1.448269    1.4741929    0.7122209  0.066666667    1.4164194        1e-10 1.7805522e-11    5.6162351    2.5010309    30.403515 -0.0038071143  -0.16296586   0.02136471   0.20621841    1.6763388    1.4175152 
 1950000    4.1183514    1.2502012    2.8681502  -0.22525961   0.83355638   0.99209351   0.73489983   -1.2465374            1    1.6871763    2.3032652    2.2697451   0.48851852 -0.0057801591  0.019818097 0.0073840424    1.5320756     1.556689   0.71566719  0.066666667    1.4059167        1e-10 1.789168e-11    5.5891901    2.4978173    30.403515 -0.011351967  -0.17725003 -0.0022512221   0.22743524    1.4814122     2.408898 
 1951000    4.1737115    1.2852683    2.8884432  -0.21070292   0.85693691   0.99810773   0.76910716   -1.2465374            1    1.6288304     2.239384    2.2491255    0.3979817  0.022455713  -0.11394089 -0.020337152    1.4665102    1.4975521   0.70567118  0.066666667    1.4190708        1e-10 1.7641779e-11    5.6683625    2.4791926    30.403515 -0.0068057766  -0.18414532 -0.0031297822   0.14359817   0.89892208    3.5282709 
 1952000    4.1605452    1.2842857    2.8762596  -0.21365009   0.85628177    1.0090635   0.76121596   -1.2465374            1    1.5141585     2.158301    2.1377842   0.24639041  0.011396886 -0.0064762504 0.0054455916    1.3535038    1.3814393   0.70573692  0.066666667    1.3938141        1e-10 1.7643423e-11    5.6678344     2.511845    30.403515 -0.00095825655   -0.1812823 8.9593546e-05   0.15607663   -1.9848409    1.8963255 
 1953000    4.1512571    1.2670559    2.8842012  -0.22370311   0.84479403   0.99879254   0.74896791   -1.2465374            1    1.5445438    2.1759839    2.1706726   0.28697482 -0.0076660945 -0.036940871  0.031625346     1.386474    1.4131754    0.7031238  0.066666667      1.39624        1e-10 1.7578095e-11    5.6888986    2.4792855    30.403515 0.0065141483  -0.19122121 0.0018288851   0.17677676   -1.9247563    2.0688198 
 1954000    4.1998314    1.2893453    2.9104861   -0.2181958   0.85965525    1.0145103   0.76329788   -1.2465374            1    1.6229278    2.2119325    2.2187219   0.43812907   0.01765354  0.058363853 -0.041379337    1.4618337    1.4894921    0.7039894  0.066666667    1.4046278        1e-10 1.7599735e-11    5.6819038    2.4878052    30.403515 -0.0054852927  -0.21475224 -0.0039690081    0.1760732   -3.2981434  -0.57085889 
 1955000    4.1228689    1.2614432    2.8614257  -0.22823193   0.84105182    1.0213692   0.72882302   -1.2465374            1    1.5627607    2.1980792    2.1917527   0.29845002 0.0079508269 -0.063989496  -0.01241034    1.4089424    1.4284228   0.70721362  0.066666667     1.415493        1e-10 1.7680341e-11    5.6559997    2.5078132    30.403515 -0.0040107858  -0.19658585 0.0072298984    0.1940913   0.36463577    3.4125848 
 1956000     4.164784    1.2829662    2.8818178  -0.21501492   0.85540203    1.0204522   0.75269031   -1.2465374            1    1.4836558      2.13223    2.1480976   0.17063968   0.00823964 -0.022274169 0.0036618213    1.3248004    1.3494386   0.70470594  0.066666667    1.4282844        1e-10 1.7617649e-11    5.6761264    2.4753159    30.403515 -0.015419296   -0.2094656 0.0035641092   0.19724169   0.54616228    1.1269105 
 1957000    4.1577175    1.2627941    2.8949233  -0.21017021   0.84195254    1.0021229   0.74227963   -1.2465374            1    1.6902543    2.2705594    2.2822152   0.51798843 -0.002493666   0.02080471   0.02778182    1.5335961    1.5584479   0.69885828  0.066666667    1.4617618        1e-10 1.7471457e-11    5.7236211    2.4684294    30.403515  -0.01044806  -0.18698156  0.011127783   0.17434292    2.8050436    2.4691997 
 1958000    4.1748675    1.2764636    2.8984039  -0.22097441   0.85106653   0.99850892   0.75932729   -1.2465374            1    1.4613574    2.1029135     2.101809   0.17934954 0.0018490739  0.078815377 -0.0050133318    1.3011012    1.3300263   0.70270755  0.066666667    1.4163422        1e-10 1.7567689e-11    5.6922684      2.48247    30.403515 -0.010211994  -0.17046696 0.0015755881   0.21377558    2.9666566    1.0473556 
 1959000    4.1620293    1.2664491    2.8955802  -0.22551787   0.84438948   0.98475748   0.75705787   -1.2465374            1     1.599212    2.2036629    2.2002872   0.39368597  0.013921374   0.18432922 -0.075263022    1.4394348    1.4696896   0.70528808  0.066666667    1.4217479        1e-10 1.7632202e-11    5.6714414    2.4904773    30.403515 0.0059769902  -0.21299014 -0.012407883   0.22364363  -0.97478448  0.020558355 
 1960000    4.1614167    1.2695295    2.8918873  -0.21224411   0.84644326   0.99098087    0.7565135   -1.2465374            1    1.6102283    2.2048942    2.2543956    0.3713951 0.0043471233  0.078777942 0.0029526026     1.450566    1.4798874    0.7066777  0.066666667    1.4400339        1e-10 1.7666943e-11     5.660289     2.484511    30.403515 0.0062556962  -0.18129649 0.0059309763   0.19423775   -1.3557595    1.6731105 
 1961000    4.1424106     1.258674    2.8837366  -0.22480134   0.83920554    1.0104055   0.73265845   -1.2465374            1    1.4521674    2.1203849    2.0810884   0.15502891  0.017343851 -0.0062217578 -0.050280729    1.2975397    1.3192716   0.71312646  0.066666667    1.4329346        1e-10 1.7828161e-11    5.6091034    2.5040978    30.403515 -0.0060705311  -0.19452394 -0.021480311   0.20872327  -0.51817763    0.6066604 
 1962000    4.1629036    1.2668975    2.8960061  -0.22105649   0.84468843    1.0067624   0.74382964   -1.2465374            1    1.5348948    2.1527093     2.170683   0.28129225 -0.024934148  0.012819621 -0.046105948    1.3779095    1.4024782   0.70574649  0.066666667    1.4479682        1e-10 1.7643662e-11    5.6677576    2.4927691    30.403515 0.0085566927  -0.20229006 -0.00013369361   0.17963019   -1.5180511    1.5188186 
 1963000    4.1355732    1.2664596    2.8691136  -0.21735271   0.84439645    1.0027735   0.74584155   -1.2465374            1    1.6689888    2.2948504    2.2480419   0.46407402 -0.0043724163  -0.12661509  0.055863115    1.5115788    1.5370968   0.71675073  0.066666667    1.4568262        1e-10 1.7918768e-11    5.5807408    2.5098834    30.403515 -0.013405464  -0.19635936 -0.0097908332   0.21306852    1.2741088    4.4120351 
 1964000    4.1063822    1.2435918    2.8627904  -0.22487105   0.82914966   0.98886454   0.72975837   -1.2465374            1    1.5788912    2.1899924    2.1910616   0.35561956 -0.016056974    -0.114318  0.044451252    1.4248756    1.4488286   0.70776134  0.066666667    1.4530465        1e-10 1.7694034e-11    5.6516226    2.4927077    30.403515 -0.0051517187  -0.19873857 0.0028441779   0.19283624    1.6589432    4.1400428 
 1965000    4.1263493    1.2460803    2.8802689  -0.20594149   0.83080883   0.98170649   0.73691275   -1.2465374            1    1.6626499    2.2572277    2.2930611   0.43766081  0.004783575 -0.068884107  0.016753785    1.5071243    1.5335288    0.7068258  0.066666667     1.448228        1e-10 1.7670645e-11     5.659103    2.4910403    30.403515 -0.0078719838   -0.2122423 -0.0055590216   0.22236712   0.88506259    1.9862201 
 1966000    4.1446464    1.2688397    2.8758067  -0.22800537   0.84598338   0.99642408   0.75237471   -1.2465374            1    1.6378801    2.2429917    2.2558277   0.41482102 -0.013634602  0.019176556 0.0062683986    1.4790913    1.5068233   0.70565523  0.066666667    1.4176656        1e-10 1.7641381e-11    5.6684906    2.4839962    30.403515 0.0081415595  -0.18568662  0.010557049   0.20408512   0.70335695    2.9274595 
 1967000    4.1590919    1.2596337    2.8994582  -0.21362811   0.83984538    1.0021598   0.73883593   -1.2465374            1    1.5460228     2.172565    2.1688256   0.29667781 -0.0025185668   0.10696764 -0.010263475    1.3900914    1.4142115   0.70432757  0.066666667    1.4398411        1e-10 1.7608189e-11    5.6791757     2.490231    30.403515 -0.003147797  -0.19265045 0.0081034669   0.18280022  -0.97535029    1.3223902 
 1968000    4.1611668    1.2528383    2.9083284  -0.21420945   0.83531464   0.98849817   0.73999478   -1.2465374            1    1.5809367    2.1787504    2.2089931    0.3550665 -0.0045485354   0.15624335 -0.00095384713    1.4247606    1.4509223   0.70463385  0.066666667     1.435571        1e-10 1.7615846e-11    5.6767071    2.5025067    30.403515 -0.0076137153  -0.14589456  0.010418996   0.17808496   -1.4013615    1.6743803 
 1969000    4.1254911    1.2531168    2.8723743  -0.22845114    0.8355003    1.0082018   0.72801682   -1.2465374            1    1.5189802    2.1616064    2.1562575   0.23907683 0.0032375698  0.020390877 -0.030268269    1.3653322    1.3863743   0.70706753  0.066666667    1.4433295        1e-10 1.7676688e-11    5.6571683     2.483688    30.403515  0.017158325  -0.16345316 -0.0027910731   0.19269391    0.9432633    -1.751309 
 1970000    4.1429687    1.2634487      2.87952  -0.21853544   0.84238896     1.011757   0.73698408   -1.2465374            1    1.5346011    2.1560677     2.160283   0.28745266 0.0018271152  -0.10714945  0.067211335    1.3790605    1.4015276   0.70556387  0.066666667    1.4481499        1e-10 1.7639097e-11    5.6692246    2.4810134    30.403515 -0.0058000189  -0.19950525  0.001478787   0.16898803    1.0232548    2.8374465 
 1971000    4.1755813    1.2782859    2.8972955  -0.21367498   0.85228147    1.0129131   0.75232286   -1.2465374            1    1.6153103    2.2210219    2.2459259   0.37898317 -0.0070428507 -0.063824645   0.01561011    1.4565324    1.4820847   0.70855181  0.066666667    1.4281029        1e-10 1.7713795e-11    5.6453176    2.5104696    30.403515 -0.0019113144   -0.1955666 0.0065977328   0.19304696    1.1371057    1.8464887 
 1972000    4.1644823    1.2773703    2.8871119  -0.21673243   0.85167107    1.0098798    0.7532223   -1.2465374            1    1.6528017    2.2565965    2.2549618    0.4468469 -0.0017266957 -0.0074597352  0.086478063     1.493834    1.5199751   0.70839881  0.066666667    1.4396684        1e-10 1.770997e-11    5.6465369    2.5036563    30.403515  -0.00760986  -0.26018273 0.0042379867   0.18380311  -0.89041027   0.59353454 
 1973000    4.1840311    1.2950503    2.8889808  -0.21047597   0.86345896    1.0038851   0.77609444   -1.2465374            1     1.666993    2.2767586    2.2705275   0.45369283 -0.019468445 -0.048209107  0.026017034    1.5031981    1.5349548   0.70266324  0.066666667    1.4263032        1e-10 1.7566581e-11    5.6926274    2.4774174    30.403515 0.0053828279   -0.1906589 -0.008178719   0.21521909   -1.1702674  -0.60374055 
 1974000     4.182928    1.2910941    2.8918339  -0.21495664   0.86082123    0.9964469   0.77644791   -1.2465374            1    1.5667444    2.1975891    2.1796347   0.32300942  0.020354586  0.023855582 0.0003805966     1.402875    1.4356846   0.70163397  0.066666667     1.420866        1e-10 1.7540849e-11    5.7009783     2.481855    30.403515 -0.00029644491  -0.19546977 0.0099366622   0.17073658   -3.1562322   -2.1691668 
 1975000    4.2008744    1.2692964     2.931578  -0.21323668   0.84628787   0.99093554   0.75628949   -1.2465374            1    1.6266113    2.2222498    2.2480558   0.40952839 -0.019302991  0.029272524 -0.010376825    1.4669963    1.4962764   0.70301742  0.066666667    1.4237594        1e-10 1.7575436e-11    5.6897594    2.4767191    30.403515  0.005856395  -0.21093254 -0.0016321228   0.18016128   -2.7994958   0.98694151 
 1976000     4.174233    1.2747263    2.8995067  -0.21658668   0.84990818    1.0174461   0.74564515   -1.2465374            1     1.599071    2.2301847    2.2062063   0.36082206  0.019417814 -0.010674855 -0.0053271769    1.4417025    1.4652492   0.70170039  0.066666667    1.4043385        1e-10 1.754251e-11    5.7004386    2.4807163    30.403515  0.003232097  -0.22032127 -0.0093331301   0.21347733   0.97571776 -0.0052877788 
 1977000    4.1594131     1.280729    2.8786842  -0.22457859   0.85391039    1.0299052   0.74437766   -1.2465374            1    1.5853994    2.2088748    2.2195344   0.32778902  0.021562676 -0.026032657   0.04200537    1.4282984    1.4499389   0.70231461  0.066666667    1.3810045        1e-10 1.7557865e-11    5.6954532    2.4837649    30.403515 -0.0030241772  -0.17913457 -0.00057267072   0.19560801  -0.75200101     3.531807 
 1978000    4.1678457    1.2702107     2.897635  -0.21719115   0.84689747    1.0270239   0.73478867   -1.2465374            1    1.5604873    2.1844525    2.1898731   0.30713627 -0.003881086  0.035017323 -0.018519675      1.40541    1.4254057   0.69906987  0.066666667    1.3839858        1e-10 1.7476747e-11    5.7218887    2.4818591    30.403515 -0.011027477   -0.2018967 0.0022642567   0.16771114  -0.97740494    3.1606357 
 1979000    4.1500544    1.2517447    2.8983097  -0.21050136   0.83458548     1.020651   0.71877332   -1.2465374            1    1.5171371    2.1488986    2.1312415   0.27127133 -0.014294156  0.031147944 -0.0041210798    1.3654399    1.3828938   0.69344386  0.066666667    1.3949113        1e-10 1.7336097e-11    5.7683112    2.4942453    30.403515 -0.022267819  -0.21347586 0.0097457305   0.17123295  0.083386769  -0.40457028 
 1980000    4.1706717    1.2784021    2.8922696  -0.21602606   0.85235898     1.024349   0.74532181   -1.2465374            1     1.463433    2.1125042    2.1243336   0.15346109 0.0043058613 -0.066746483  0.026058626    1.3061327    1.3287032   0.70190091  0.066666667    1.4111941        1e-10 1.7547523e-11    5.6988101    2.4941692    30.403515 -0.018193439  -0.21557828 -0.0079860698   0.17487155   0.90498793    3.0607108 
 1981000    4.1962435    1.2913697    2.9048737  -0.22173372   0.86100498    1.0319765     0.754604   -1.2465374            1    1.6226381    2.2244943    2.2438965   0.39952339 -0.0046417541   0.02543227 0.0021523632    1.4633788    1.4869051   0.71336263  0.066666667    1.4196023        1e-10 1.7834066e-11    5.6072463     2.485834    30.403515 -0.011051381   -0.1725345  0.011960972   0.18061984    1.0131476    1.1695394 
 1982000    4.1860581    1.2765274    2.9095308  -0.21625946   0.85110903    1.0126591   0.75057784   -1.2465374            1    1.4198533    2.0751443    2.0848082  0.099607267 0.0028707188  0.080609931  0.041776968    1.2614437     1.286661   0.70823459  0.066666667    1.4224289        1e-10 1.7705865e-11    5.6478462    2.5153508    30.403515 -0.0033233438  -0.20653392 -0.0058775942   0.23838586   0.67437229    3.1052435 
 1983000    4.1572861    1.2728017    2.8844844  -0.22770939   0.84862496   0.99901017   0.75505133   -1.2465374            1    1.6803065    2.2723289    2.2856016   0.48298903    -0.023626  0.059527324  0.083120216    1.5209528    1.5489095   0.69562795  0.066666667    1.4212817        1e-10 1.7390699e-11    5.7502002    2.4985846    30.403515 0.0044637358  -0.16073758 0.0054262325   0.19874985  -0.43865782    2.9292978 
 1984000    4.1520646     1.265781    2.8862837  -0.20881761   0.84394398      0.99617   0.74922234   -1.2465374            1    1.6920009    2.2838953    2.3065076   0.48559968 0.0076339715   -0.0114382 -0.029658774    1.5338774    1.5609774   0.70561226  0.066666667    1.4105024        1e-10 1.7640307e-11    5.6688357    2.4969649    30.403515  0.025730252  -0.18775237 -0.0081321624    0.1812612   0.23951751    2.1296197 
 1985000    4.1403749    1.2637416    2.8766334  -0.22222979   0.84258424     1.038998    0.7203244   -1.2465374            1    1.5381753    2.1730845    2.1610485   0.28039285 0.0011010013 0.0026787673 -0.0017367938    1.3861507    1.4015188    0.7183054  0.066666667    1.4090797        1e-10 1.7957635e-11     5.568662    2.5236283    30.403515 -0.0027460507   -0.2256711 0.0014473723    0.1941686   -1.0018046    3.3974998 
 1986000    4.1664243    1.2661083    2.9003159  -0.22187096   0.84416226    1.0031183    0.7452465   -1.2465374            1    1.6366267    2.2334295    2.2487347   0.42771593 -0.0094931974  0.013420847 -0.013674223    1.4793423    1.5046894   0.70098888  0.066666667     1.362915        1e-10 1.7524722e-11    5.7062246    2.4766645    30.403515 0.00036645692  -0.18238396 -0.0091806268    0.1744532   -1.1562018    3.0480125 
 1987000     4.157517    1.2811128    2.8764042  -0.21949557   0.85416629   0.99659767   0.76555046   -1.2465374            1    1.4584389    2.1159605    2.1098036   0.14955246 -0.0067710792  0.019856082 0.0075414195    1.2968693    1.3273592   0.69175238  0.066666667    1.3662666        1e-10 1.729381e-11    5.7824159    2.4977471    30.403515 -0.0079850245  -0.22323047 -0.00066875786   0.19244533  -0.87566477   -1.3213448 
 1988000    4.1777505    1.2829756    2.8947749  -0.21885225   0.85540833   0.99857314   0.76633565   -1.2465374            1    1.6722168    2.2498459    2.2917148   0.47508969 0.0040392062 -0.076691453 -0.012224142    1.5104815    1.5408773   0.70543347  0.066666667    1.3804236        1e-10 1.7635837e-11    5.6702725    2.4898242    30.403515 0.0046346769  -0.17794349 0.0069404842   0.21222782   0.63502286    1.0730336 
 1989000     4.169071    1.2753324    2.8937386  -0.22349705    0.8503123      1.00241   0.75567172   -1.2465374            1    1.5535784    2.1741446     2.186217   0.30037355 0.00072297747 0.0036919267 -0.041768307    1.3940938    1.4217342   0.70837909  0.066666667    1.3913392        1e-10 1.7709477e-11    5.6466941    2.4801661    30.403515 -0.010597219  -0.17008158 -0.0068015273   0.18129643   0.14528909   0.38820935 
 1990000    4.1602541    1.2455236    2.9147305  -0.20523377   0.83043764   0.99158094   0.73015638   -1.2465374            1    1.5339901    2.1422922    2.1877124   0.27196567 0.0055228033 -0.052231058 -0.040706225    1.3798905    1.4035702   0.70112093  0.066666667    1.3993084        1e-10 1.7528023e-11    5.7051499    2.4749709    30.403515  0.025452601  -0.18166746  0.005073592   0.20698722   -1.2833761    1.7536884 
 1991000    4.1857646    1.2765915     2.909173  -0.21283171    0.8511518    1.0022512   0.75713348   -1.2465374            1    1.5583922    2.1989771    2.1762116   0.29998774  0.019441764 -0.099654865  0.070641132     1.398599    1.4265689   0.70265806  0.066666667    1.3836692        1e-10 1.7566451e-11    5.6926694    2.4880482    30.403515 0.0056202944  -0.18872454  0.015066931   0.19896861    1.3587444    3.2879187 
 1992000    4.1669733    1.2730412     2.893932  -0.21562709   0.84878469     1.023914   0.73979045   -1.2465374            1    1.6133407     2.216477     2.231834   0.39171109 -0.0075988593 -0.014003004 -0.010761806    1.4572078    1.4786682   0.70414095  0.066666667    1.3764553        1e-10 1.7603524e-11    5.6806808    2.4766496    30.403515 -0.017641829  -0.19514992 -0.0026438842   0.20751049    2.0625326    2.8356355 
 1993000    4.1969459    1.2707556    2.9261903  -0.21336883   0.84726079     1.019864   0.73984059   -1.2465374            1    1.5748445    2.1843827    2.2007907   0.33936016 -0.0042391916  0.041432005  0.018506555     1.418701    1.4407047   0.70678958  0.066666667    1.3626186        1e-10 1.7669739e-11     5.659393    2.5061913    30.403515 0.0029974839  -0.16214249 0.0049744742   0.17922689   0.43928575  0.031210184 
 1994000    4.1923675     1.287159    2.9052085  -0.21840687   0.85819751    1.0175272   0.75905133   -1.2465374            1    1.6731393    2.2664678    2.2905816   0.46236859  0.010376065   0.09435713  0.093371512    1.5129414    1.5393069   0.70323202  0.066666667    1.3513585        1e-10 1.7580801e-11    5.6880231    2.4828581    30.403515 -0.0040340898  -0.20664777  0.024962732   0.20346301  0.045626252 -0.042984491 
 1995000     4.213527     1.275103     2.938424  -0.21576939   0.85015934    1.0108464   0.75016584   -1.2465374            1    1.5369969    2.1859139        2.138   0.28707686 -0.0072231157  0.077129272 -0.015067624    1.3786743    1.4040431   0.70010917  0.066666667    1.3470086        1e-10 1.7502729e-11    5.7133946    2.4784517    30.403515 -0.00032731339  -0.19779125 0.0084877681   0.19342174   -0.4357175   0.25248948 
 1996000    4.1902796    1.2730349    2.9172448  -0.21580138   0.84878043     1.000781   0.75420011   -1.2465374            1    1.5942696    2.2050187    2.2153493   0.36244074 -0.0059707878 -0.0064642784  0.019738517    1.4350955    1.4626397   0.70063047  0.066666667     1.345782        1e-10 1.7515762e-11    5.7091436    2.4924324    30.403515 -0.0012133984  -0.18187044  0.010521621   0.18585839  -0.26516508   0.34697611 
 1997000    4.1584493    1.2754821    2.8829672   -0.2147577   0.85041213    1.0028716   0.75554614   -1.2465374            1    1.6661107    2.2728185    2.2606502   0.46486345 -0.0078558395 -0.098443085  0.018992999    1.5066526    1.5342058   0.70410504  0.066666667    1.3363481        1e-10 1.7602626e-11    5.6809705    2.4856806    30.403515 0.0079935752  -0.19949005 -0.001699663   0.20071117   0.16258555    1.1932613 
 1998000    4.1813496    1.2521012    2.9292483  -0.21354054    0.8348232   0.98989714   0.73832513   -1.2465374            1    1.6963166    2.2863594    2.2679494   0.53464102 0.0089579376 -0.070257227 -0.0033782986     1.540493    1.5661182   0.71293367  0.066666667    1.3485471        1e-10 1.7823342e-11    5.6106201    2.4800454    30.403515 -0.011190579  -0.17051487  0.003665924   0.20088738  -0.80974219    2.6017441 
 1999000    4.1499907    1.2575749    2.8924158   -0.2134878   0.83847271   0.98517774   0.74719082   -1.2465374            1    1.6073801    2.2065048    2.2318043   0.38383119 0.0014017449 0.0085370331 -0.0061371898    1.4496853    1.4778024   0.71734998  0.066666667    1.3728633        1e-10 1.7933749e-11    5.5760788    2.5339355    30.403515 -0.0056101146   -0.2006995  0.011709936   0.20024114  0.014426679    2.3599265 
 2000000    4.1717203    1.2626818    2.9090384  -0.21760811   0.84187767   0.98935993   0.75011199   -1.2465374            1    1.5633618    2.1603671    2.1932102   0.33650823 -0.0064706587  0.012805691  0.083137073    1.4050506    1.4332341   0.70647162  0.066666667    1.3657691        1e-10 1.766179e-11    5.6619401    2.5012677    30.403515 -0.0044010773  -0.18474253 0.0022465812   0.19619181    2.5206937    2.3010346 
Loop time of 1400.33 on 1 procs for 1000000 steps with 9376 atoms

Performance: 308499.782 tau/day, 714.120 timesteps/s
99.4% CPU use with 1 MPI tasks x 1 OpenMP threads

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 157.98     | 157.98     | 157.98     |   0.0 | 11.28
Bond    | 359.18     | 359.18     | 359.18     |   0.0 | 25.65
Neigh   | 486.77     | 486.77     | 486.77     |   0.0 | 34.76
Comm    | 27.142     | 27.142     | 27.142     |   0.0 |  1.94
Output  | 1.8991     | 1.8991     | 1.8991     |   0.0 |  0.14
Modify  | 337.15     | 337.15     | 337.15     |   0.0 | 24.08
Other   |            | 30.2       |            |       |  2.16

Nlocal:    9376 ave 9376 max 9376 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Nghost:    1673 ave 1673 max 1673 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Neighs:    13280 ave 13280 max 13280 min
Histogram: 1 0 0 0 0 0 0 0 0 0

Total # of neighbors = 13280
Ave neighs/atom = 1.41638
Ave special neighs/atom = 6.92833
Neighbor list builds = 137821
Dangerous builds = 0

#--- Write Restart File ---#

write_restart  ecs.rst
shell          python post.py
shell          mkdir $(v_Wall_vi)_V
shell          mkdir 0.010000000000000000208_V
shell          cp -f *.csv $(v_Wall_vi)_V
shell          cp -f *.csv 0.010000000000000000208_V
shell          cp -f *.jpg $(v_Wall_vi)_V
shell          cp -f *.jpg 0.010000000000000000208_V
WARNING: Shell command returned with non-zero status (src/input.cpp:1365)
shell          cp -f log.lammps $(v_Wall_vi)_V
shell          cp -f log.lammps 0.