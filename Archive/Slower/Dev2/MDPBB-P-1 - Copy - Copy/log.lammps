LAMMPS (5 Jun 2019)
OMP_NUM_THREADS environment is not set. Defaulting to 1 thread. (src/comm.cpp:88)
  using 1 OpenMP thread(s) per MPI task
#--- Brush Variables---#
variable      f      equal  1
variable      M      equal  $(v_f * 120)                 # The number of polymer chains on each brush
variable      M      equal  120                 
variable      N      string 30                 # The number of beads per chain
variable      xhi    equal  $(sqrt(v_f) * 40)                 # The width of the polymer Brush
variable      xhi    equal  40                 
variable      yhi    equal  $(sqrt(v_f) * 40)                 # The length of the polymer Brush
variable      yhi    equal  40                 
variable      wthick equal  3                  # The thickness of the walls wthick=1,2,3,4 gives 2,3,4,6 layers respectively

#--- Simulation Variables ---#
variable       Temp      index 1        #0.8 1 1.68                 #[Grest96]
variable       Tstep     equal 0.005                       # Timestep in Tau (default = 0.005)
variable       Nequil    equal 300000                       # Number of timesteps to equilibrate
variable       Ncomp     equal 700000                     # Number of timesteps to compress - until no more occilation of walls
variable       Nshear    equal 4000000      #2000000                      # Number of timesteps to shear - use approx 4ns for 10m/s
variable       Nthermo   equal 1000                        # Number of timesteps between thermo data prints
variable       Ndump_e   equal 10000
variable       Ndump_c   equal 10000                      # Number of timesteps per dump file (compression)
variable       Ndump_s   equal 10000                       # Number of timesteps per dump file (shear)
variable       Wall_vi   index 0.01 0.1 0.2 0.4 0.6 0.8 1 1.2 1.4 1.6 1.8 2                   # Wall velocity (A/fs) - equal to 10 m/s
variable       Pcomp     index 1 # 0.5 2 0.05 4 8
variable       Wall_v    equal $(v_Wall_vi * 0.00000001)        #Added to try scale down the strain rates (10^-8)
variable       Wall_v    equal 1.0000000000000000364e-10        

include        MDPBB.in
# This is an input script that creates a mono disperse polymer brush bilayer
# A coarse grained bead-spring model is used for the polymers which are end
# grafted to the surfaces of 2 opposing FCC walls at random sites.

#--- Initialization ---#

dimension     3
boundary      p p f
units         lj
atom_style    bond


#--- Moved to main.in ---#
#variable      M      equal  50                # The number of polymer chains on each brush
#variable      N      string 80                # The number of beads per chain
#variable      xhi    equal  15                # The width of the polymer Brush
#variable      yhi    equal  20                # The length of the polymer Brush
#variable      wthick equal  3                 # The thickness of the walls wthick=1,2,3,4 gives 2,3,4,6 layers respectively

variable      zhi    equal  $(1.1 * 2 * v_N + (2 * v_wthick))  # The initial height of the simulation box the value is such that no overlaps occur
variable      zhi    equal  72  
variable      z0     equal  $((v_zhi)/4 - (v_N)/30)          # This is the location at which to place the CoM of the molecule
variable      z0     equal  17          

print "The number of grafted chains = $(v_M)"
The number of grafted chains = 120
print "The number of beads per chain = $(v_N)"
The number of beads per chain = 30

variable      check  equal count(all)         # The number of atoms in the system
variable      ntwall equal count(twall)       # The number of atoms in the top wall
variable      nbwall equal count(bwall)       # The number of atoms in the bottom wall
variable      s equal 234897  #45335              # Seed for the RNG

print "zhi = ${zhi}"
zhi = 72

#--- Create the simulation box ---#

region        sbox block 0 ${xhi} 0 ${yhi} 0 ${zhi}
region        sbox block 0 40 0 ${yhi} 0 ${zhi}
region        sbox block 0 40 0 40 0 ${zhi}
region        sbox block 0 40 0 40 0 72
create_box    4 sbox bond/types 3 extra/bond/per/atom 12 extra/special/per/atom 2
Created orthogonal box = (0 0 0) to (40 40 72)
  1 by 1 by 1 MPI processor grid

mass          1 2.0                   # Wall atoms that are not grafted
mass          2 1.0                   # Grafted bead
mass          3 1.0                   # The rest of the beads on the chain
mass          4 2.0                   # Wall atoms that the chains are grafted to

bond_style    hybrid fene harmonic    # Finitely extensible linearly elastic bond between neighbouring beads
#bond_coeff    1 fene 30.0 1.5 0.0 0.0      # Values obtained from literature [Grest, Galushcko]
bond_coeff    1 fene 30.0 30.0 0.0 0.0
bond_coeff    2 fene 30.0 30.0 0.0 0.0       # This is the grafting bond between the polymer and the wall atom
special_bonds fene                    #
  0 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0002657 secs
pair_style	  lj/cut 1.122462         # LJ potential with rc=2^1/6
#pair_coeff	  * * 1.0 1.0             # LJ potential acts between all atoms
pair_coeff    1 1 0.0 0.0
pair_coeff    1 2 1.0 1.0
pair_coeff    1 3 1.0 1.0
pair_coeff    2 2 1.0 1.0
pair_coeff    2 3 1.0 1.0
pair_coeff    2 4 1.0 1.0
pair_coeff    3 3 1.0 1.0
pair_coeff    3 4 1.0 1.0
pair_coeff    4 4 0.0 0.0
neighbor      10 bin                  #
neigh_modify  one 4000

#--- Create and read the molecule file ---#
python        BSMolf input 1 $N format i file BSMolf.py
python        BSMolf input 1 30 format i file BSMolf.py
python        BSMolf invoke    # Call the python function with number of beads to write the mol file
molecule      bs     bsmol.txt     # Read the Mol file to define the polymer chain
Read molecule bs:
  30 atoms with max type 2
  29 bonds with max type 1
  0 angles with max type 0
  0 dihedrals with max type 0
  0 impropers with max type 0

#--- Define the FCC wall region ---#
region        wall  block 0 ${xhi} 0 ${yhi} 0 ${wthick}
region        wall  block 0 40 0 ${yhi} 0 ${wthick}
region        wall  block 0 40 0 40 0 ${wthick}
region        wall  block 0 40 0 40 0 3
lattice       fcc 1
Lattice spacing in x,y,z = 1.5874 1.5874 1.5874

#--- Create the Top Brush  (At the bottom then rotate 180 degrees to top) ---#

create_atoms  1 region wall
Created 5202 atoms
  create_atoms CPU = 0.0020036 secs
group         twall  region wall
5202 atoms in group twall
#group         tsurf  region wsurf

# A loop to insert the Chains into the sim box
variable      i loop $M                                   # Index to insert N total number of chains
variable      i loop 120                                   
label         loop                                        # Start of loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3268                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3268]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3268 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3268                         
1 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 1
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 1
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3268]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3268]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 5202                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 5202+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 9.5244063118092 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 9.5244063118092 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002383 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 5232               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3268 $b
create_bonds  single/bond 2 3268 5203
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0026623 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 818                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[818]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3930                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3930]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3930 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3930                         
2 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 2
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 2
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3930]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3930]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 5232                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 5232+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 20.6362136755866 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 20.6362136755866 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.7e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 5262               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3930 $b
create_bonds  single/bond 2 3930 5233
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0027736 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3965                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3965]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3779                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3779]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3779 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3779                         
3 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 3
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 3
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3779]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3779]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 5262                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 5262+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 18.2551120976343 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 18.2551120976343 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001265 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 5292               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3779 $b
create_bonds  single/bond 2 3779 5263
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.003202 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 5125                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[5125]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 5125 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 5125                         
4 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 4
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 4
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[5125]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[5125]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 5292                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 5292+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 38.8913257732209 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 38.8913257732209 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001246 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 5322               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 5125 $b
create_bonds  single/bond 2 5125 5293
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025123 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2473                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2473]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1743                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1743]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2250                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2250]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3765                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3765]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4657                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4657]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4657 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4657                         
5 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 5
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 5
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4657]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4657]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 5322                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 5322+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 32.5417215653481 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 32.5417215653481 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000101 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 5352               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4657 $b
create_bonds  single/bond 2 4657 5323
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0047684 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 38                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[38]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 990                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[990]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1700                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1700]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4214                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4214]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4214 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4214                         
6 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 6
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 6
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4214]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4214]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 5352                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 5352+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 32.5417215653481 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 32.5417215653481 23.811015779523 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 32.5417215653481 23.811015779523 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001373 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 5382               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4214 $b
create_bonds  single/bond 2 4214 5353
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0030928 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3691                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3691]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3583                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3583]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3583 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3583                         
7 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 7
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 7
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3583]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3583]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 5382                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 5382+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 15.0803099936979 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 15.0803099936979 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001007 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 5412               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3583 $b
create_bonds  single/bond 2 3583 5383
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0022564 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2905                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2905]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2905 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2905                         
8 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 8
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 8
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2905]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2905]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 5412                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 5412+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 38.0976252472368 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 38.0976252472368 3.9685026299205 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 38.0976252472368 3.9685026299205 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.9e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 5442               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2905 $b
create_bonds  single/bond 2 2905 5413
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0041879 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4052                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4052]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4052 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4052                         
9 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 9
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 9
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4052]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4052]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 5442                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 5442+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 22.2236147275548 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 22.2236147275548 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001303 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 5472               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4052 $b
create_bonds  single/bond 2 4052 5443
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0028218 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3200                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3200]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3224                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3224]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3224 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3224                         
10 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 10
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 10
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3224]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3224]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 5472                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 5472+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 9.5244063118092 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 9.5244063118092 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.98e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 5502               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3224 $b
create_bonds  single/bond 2 3224 5473
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0044869 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 623                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[623]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4530                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4530]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3131                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3131]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3131 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3131                         
11 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 11
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 11
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3131]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3131]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 5502                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 5502+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 6.3496042078728 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 6.3496042078728 8.7307057858251 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 6.3496042078728 8.7307057858251 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001018 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 5532               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3131 $b
create_bonds  single/bond 2 3131 5503
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0052512 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4780                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4780]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3625                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3625]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3625 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3625                         
12 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 12
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 12
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3625]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3625]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 5532                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 5532+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 16.6677110456661 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 16.6677110456661 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001466 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 5562               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3625 $b
create_bonds  single/bond 2 3625 5533
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0041685 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4671                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4671]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3060                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3060]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3060 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3060                         
13 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 13
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 13
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3060]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3060]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 5562                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 5562+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 6.3496042078728 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 6.3496042078728 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001016 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 5592               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3060 $b
create_bonds  single/bond 2 3060 5563
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0035157 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4423                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4423]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4423 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4423                         
14 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 14
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 14
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4423]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4423]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 5592                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 5592+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 33.3354220913322 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 33.3354220913322 27.7795184094435 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 33.3354220913322 27.7795184094435 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001084 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 5622               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4423 $b
create_bonds  single/bond 2 4423 5593
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0037948 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4359                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4359]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4359 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4359                         
15 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 15
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 15
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4359]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4359]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 5622                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 5622+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 27.7795184094435 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 27.7795184094435 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001435 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 5652               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4359 $b
create_bonds  single/bond 2 4359 5623
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0027775 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2163                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2163]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 5194                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[5194]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 5070                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[5070]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3768                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3768]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4887                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4887]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1228                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1228]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4852                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4852]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4852 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4852                         
16 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 16
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 16
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4852]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4852]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 5652                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 5652+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 34.9228231433004 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 34.9228231433004 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001346 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 5682               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4852 $b
create_bonds  single/bond 2 4852 5653
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0023843 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 680                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[680]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4423                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4423]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4423 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4423                         
16 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 16
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 17
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4423]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4423]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 5682                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 5682+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4859                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4859]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1781                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1781]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1354                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1354]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3454                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3454]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2425                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2425]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 752                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[752]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4790                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4790]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4790 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4790                         
17 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 17
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 17
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4790]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4790]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 5682                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 5682+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 33.3354220913322 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 33.3354220913322 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001319 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 5712               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4790 $b
create_bonds  single/bond 2 4790 5683
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025057 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4976                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4976]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4704                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4704]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4704 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4704                         
18 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 18
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 18
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4704]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4704]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 5712                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 5712+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 24.6047163055071 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 24.6047163055071 31.748021039364 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 24.6047163055071 31.748021039364 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.00013 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 5742               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4704 $b
create_bonds  single/bond 2 4704 5713
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0056813 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4145                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4145]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2282                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2282]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1931                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1931]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3648                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3648]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3648 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3648                         
19 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 19
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 19
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3648]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3648]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 5742                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 5742+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 15.874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 15.874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001019 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 5772               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3648 $b
create_bonds  single/bond 2 3648 5743
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0035972 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 487                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[487]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1969                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1969]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2269                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2269]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1709                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1709]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3172                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3172]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1489                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1489]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1239                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1239]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 446                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[446]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3541                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3541]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3815                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3815]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3815 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3815                         
20 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 20
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 20
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3815]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3815]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 5772                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 5772+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 34.9228231433004 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 34.9228231433004 18.2551120976343 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 34.9228231433004 18.2551120976343 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001962 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 5802               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3815 $b
create_bonds  single/bond 2 3815 5773
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0027196 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1751                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1751]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2600                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2600]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2239                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2239]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1177                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1177]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3015                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3015]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 950                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[950]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4589                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4589]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2398                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2398]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 5103                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[5103]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3992                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3992]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4783                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4783]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4783 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4783                         
21 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 21
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 21
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4783]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4783]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 5802                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 5802+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 34.1291226173163 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 34.1291226173163 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.00014 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 5832               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4783 $b
create_bonds  single/bond 2 4783 5803
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0027742 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 5172                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[5172]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2465                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2465]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1727                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1727]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 365                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[365]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1344                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1344]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 942                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[942]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2134                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2134]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3108                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3108]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3108 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3108                         
22 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 22
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 22
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3108]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3108]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 5832                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 5832+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 38.8913257732209 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 38.8913257732209 6.3496042078728 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 38.8913257732209 6.3496042078728 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001054 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 5862               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3108 $b
create_bonds  single/bond 2 3108 5833
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0023353 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2474                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2474]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4319                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4319]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 774                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[774]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 861                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[861]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4172                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4172]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3299                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3299]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1176                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1176]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1676                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1676]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1403                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1403]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4093                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4093]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4093 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4093                         
23 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 23
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 23
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4093]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4093]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 5862                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 5862+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 23.0173152535389 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 23.0173152535389 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001414 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 5892               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4093 $b
create_bonds  single/bond 2 4093 5863
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0026205 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4530                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4530]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2261                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2261]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 5192                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[5192]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3391                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3391]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3391 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3391                         
24 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 24
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 24
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3391]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3391]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 5892                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 5892+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 11.9055078897615 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 11.9055078897615 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001096 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 5922               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3391 $b
create_bonds  single/bond 2 3391 5893
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0022868 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4765                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4765]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2239                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2239]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2821                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2821]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2821 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2821                         
25 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 25
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 25
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2821]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2821]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 5922                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 5922+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 3.9685026299205 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 3.9685026299205 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001154 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 5952               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2821 $b
create_bonds  single/bond 2 2821 5923
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0032933 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3806                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3806]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3806 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3806                         
26 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 26
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 26
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3806]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3806]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 5952                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 5952+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 32.5417215653481 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 32.5417215653481 17.4614115716502 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 32.5417215653481 17.4614115716502 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001349 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 5982               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3806 $b
create_bonds  single/bond 2 3806 5953
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0033773 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2253                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2253]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1524                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1524]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 71                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[71]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 780                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[780]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2997                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2997]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 550                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[550]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2639                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2639]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 937                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[937]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1708                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1708]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 200                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[200]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4887                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4887]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1789                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1789]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1877                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1877]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2536                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2536]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3826                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3826]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 955                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[955]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2629                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2629]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2629 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2629                         
27 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 27
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 27
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2629]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2629]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 5982                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 5982+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 0.7937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 0.7937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001103 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 6012               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2629 $b
create_bonds  single/bond 2 2629 5983
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0024334 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2494                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2494]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4803                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4803]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4803 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4803                         
28 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 28
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 28
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4803]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4803]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 6012                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 6012+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 34.1291226173163 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 34.1291226173163 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000111 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 6042               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4803 $b
create_bonds  single/bond 2 4803 6013
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0023547 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1265                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1265]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3217                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3217]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3217 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3217                         
29 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 29
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 29
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3217]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3217]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 6042                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 6042+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 10.3181068377933 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 10.3181068377933 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001372 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 6072               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3217 $b
create_bonds  single/bond 2 3217 6043
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0023025 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1112                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1112]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4633                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4633]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 924                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[924]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1652                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1652]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1978                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1978]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2782                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2782]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2782 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2782                         
30 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 30
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 30
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2782]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2782]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 6072                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 6072+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 30.9543205133799 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 30.9543205133799 1.5874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 30.9543205133799 1.5874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001118 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 6102               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2782 $b
create_bonds  single/bond 2 2782 6073
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0032817 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2160                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2160]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4137                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4137]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2967                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2967]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2967 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2967                         
31 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 31
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 31
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2967]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2967]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 6102                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 6102+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 5.5559036818887 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 5.5559036818887 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001191 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 6132               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2967 $b
create_bonds  single/bond 2 2967 6103
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0036943 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2540                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2540]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3029                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3029]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3029 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3029                         
32 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 32
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 32
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3029]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3029]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 6132                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 6132+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 6.3496042078728 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 6.3496042078728 7.1433047338569 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 6.3496042078728 7.1433047338569 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001441 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 6162               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3029 $b
create_bonds  single/bond 2 3029 6133
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0047277 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 335                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[335]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 602                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[602]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2126                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2126]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1780                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1780]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1986                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1986]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2578                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2578]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4319                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4319]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4176                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4176]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 5151                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[5151]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 5151 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 5151                         
33 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 33
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 33
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[5151]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[5151]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 6162                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 6162+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 39.685026299205 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 39.685026299205 38.8913257732209 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 39.685026299205 38.8913257732209 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001252 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 6192               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 5151 $b
create_bonds  single/bond 2 5151 6163
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0047216 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 522                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[522]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2731                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2731]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2731 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2731                         
34 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 34
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 34
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2731]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2731]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 6192                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 6192+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 2.3811015779523 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 2.3811015779523 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001137 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 6222               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2731 $b
create_bonds  single/bond 2 2731 6193
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0032039 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4454                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4454]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4911                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4911]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1721                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1721]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2878                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2878]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2097                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2097]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1789                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1789]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4205                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4205]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3551                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3551]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3551 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3551                         
35 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 35
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 35
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3551]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3551]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 6222                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 6222+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 15.0803099936979 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 15.0803099936979 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001165 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 6252               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3551 $b
create_bonds  single/bond 2 3551 6223
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0038774 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 5098                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[5098]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 906                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[906]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 767                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[767]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1507                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1507]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3876                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3876]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3876 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3876                         
36 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 36
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 36
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3876]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3876]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 6252                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 6252+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 19.0488126236184 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 19.0488126236184 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001162 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 6282               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3876 $b
create_bonds  single/bond 2 3876 6253
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0037268 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4508                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4508]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4508 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4508                         
37 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 37
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 37
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4508]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4508]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 6282                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 6282+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 28.5732189354276 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 28.5732189354276 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001725 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 6312               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4508 $b
create_bonds  single/bond 2 4508 6283
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.004364 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 159                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[159]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 99                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[99]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1942                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1942]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2874                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2874]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4118                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4118]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2099                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2099]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3837                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3837]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3837 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3837                         
38 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 38
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 38
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3837]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3837]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 6312                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 6312+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 19.8425131496025 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 19.8425131496025 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001451 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 6342               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3837 $b
create_bonds  single/bond 2 3837 6313
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0032081 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2358                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2358]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 158                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[158]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 702                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[702]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4561                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4561]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4784                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4784]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 639                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[639]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3211                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3211]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3211 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3211                         
39 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 39
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 39
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3211]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3211]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 6342                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 6342+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 38.0976252472368 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 38.0976252472368 8.7307057858251 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 38.0976252472368 8.7307057858251 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002969 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 6372               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3211 $b
create_bonds  single/bond 2 3211 6343
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0026334 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4231                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4231]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4231 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4231                         
40 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 40
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 40
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4231]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4231]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 6372                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 6372+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 38.0976252472368 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 38.0976252472368 24.6047163055071 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 38.0976252472368 24.6047163055071 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001354 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 6402               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4231 $b
create_bonds  single/bond 2 4231 6373
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.002661 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4040                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4040]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4040 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4040                         
41 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 41
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 41
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4040]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4040]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 6402                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 6402+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 22.2236147275548 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 22.2236147275548 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001237 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 6432               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4040 $b
create_bonds  single/bond 2 4040 6403
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0033148 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4700                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4700]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4700 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4700                         
42 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 42
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 42
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4700]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4700]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 6432                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 6432+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 31.748021039364 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 31.748021039364 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001151 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 6462               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4700 $b
create_bonds  single/bond 2 4700 6433
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0027307 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 5139                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[5139]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1082                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1082]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1330                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1330]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4437                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4437]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4437 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4437                         
43 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 43
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 43
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4437]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4437]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 6462                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 6462+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 39.685026299205 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 39.685026299205 27.7795184094435 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 39.685026299205 27.7795184094435 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000142 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 6492               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4437 $b
create_bonds  single/bond 2 4437 6463
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0035986 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 572                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[572]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1154                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1154]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 952                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[952]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 87                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[87]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 132                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[132]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1268                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1268]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1221                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1221]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 461                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[461]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3474                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3474]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4834                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4834]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4834 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4834                         
44 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 44
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 44
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4834]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4834]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 6492                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 6492+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 35.7165236692845 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 35.7165236692845 33.3354220913322 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 35.7165236692845 33.3354220913322 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001181 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 6522               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4834 $b
create_bonds  single/bond 2 4834 6493
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0024938 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2327                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2327]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4505                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4505]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4505 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4505                         
45 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 45
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 45
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4505]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4505]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 6522                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 6522+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 25.3984168314912 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 25.3984168314912 29.3669194614117 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 25.3984168314912 29.3669194614117 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001165 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 6552               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4505 $b
create_bonds  single/bond 2 4505 6523
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0047044 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3756                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3756]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3918                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3918]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2648                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2648]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2648 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2648                         
46 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 46
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 46
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2648]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2648]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 6552                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 6552+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 0 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 0 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000243 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 6582               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2648 $b
create_bonds  single/bond 2 2648 6553
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0036149 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 262                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[262]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4066                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4066]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3838                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3838]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 258                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[258]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2556                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2556]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1199                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1199]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1575                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1575]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 798                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[798]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 5164                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[5164]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4035                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4035]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 724                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[724]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 375                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[375]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3710                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3710]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3914                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3914]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 133                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[133]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3465                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3465]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3465 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3465                         
47 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 47
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 47
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3465]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3465]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 6582                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 6582+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 17.4614115716502 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 17.4614115716502 13.4929089417297 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 17.4614115716502 13.4929089417297 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000244 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 6612               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3465 $b
create_bonds  single/bond 2 3465 6583
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0023617 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 478                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[478]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 402                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[402]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2728                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2728]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1648                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1648]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 696                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[696]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3799                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3799]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3799 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3799                         
48 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 48
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 48
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3799]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3799]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 6612                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 6612+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 18.2551120976343 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 18.2551120976343 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001509 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 6642               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3799 $b
create_bonds  single/bond 2 3799 6613
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0033397 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3235                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3235]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 933                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[933]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 104                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[104]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1132                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1132]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4014                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4014]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4014 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4014                         
49 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 49
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 49
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4014]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4014]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 6642                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 6642+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 34.1291226173163 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 34.1291226173163 20.6362136755866 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 34.1291226173163 20.6362136755866 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001703 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 6672               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4014 $b
create_bonds  single/bond 2 4014 6643
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.002319 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1318                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1318]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1724                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1724]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2245                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2245]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 970                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[970]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2558                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2558]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2977                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2977]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1365                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1365]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4709                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4709]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4709 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4709                         
50 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 50
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 50
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4709]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4709]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 6672                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 6672+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 25.3984168314912 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 25.3984168314912 32.5417215653481 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 25.3984168314912 32.5417215653481 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001607 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 6702               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4709 $b
create_bonds  single/bond 2 4709 6673
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0046468 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2596                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2596]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 655                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[655]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 997                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[997]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1050                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1050]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2701                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2701]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2701 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2701                         
51 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 51
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 51
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2701]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2701]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 6702                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 6702+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 38.0976252472368 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 38.0976252472368 0.7937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 38.0976252472368 0.7937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001194 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 6732               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2701 $b
create_bonds  single/bond 2 2701 6703
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0024475 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 855                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[855]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4655                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4655]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4698                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4698]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 5038                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[5038]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 5038 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 5038                         
52 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 52
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 52
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[5038]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[5038]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 6732                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 6732+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 35.7165236692845 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 35.7165236692845 36.5102241952686 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 35.7165236692845 36.5102241952686 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001727 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 6762               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 5038 $b
create_bonds  single/bond 2 5038 6733
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0022262 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3533                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3533]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3143                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3143]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3143 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3143                         
53 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 53
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 53
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3143]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3143]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 6762                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 6762+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 8.7307057858251 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 8.7307057858251 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001489 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 6792               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3143 $b
create_bonds  single/bond 2 3143 6763
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0023861 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2320                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2320]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4995                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4995]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4995 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4995                         
54 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 54
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 54
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4995]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4995]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 6792                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 6792+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 17.4614115716502 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 17.4614115716502 37.3039247212527 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 17.4614115716502 37.3039247212527 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001188 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 6822               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4995 $b
create_bonds  single/bond 2 4995 6793
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025897 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4494                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4494]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1463                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1463]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 5068                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[5068]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 5068 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 5068                         
55 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 55
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 55
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[5068]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[5068]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 6822                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 6822+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 38.0976252472368 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 38.0976252472368 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001575 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 6852               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 5068 $b
create_bonds  single/bond 2 5068 6823
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0060813 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4334                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4334]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2277                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2277]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2817                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2817]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2817 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2817                         
56 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 56
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 56
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2817]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2817]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 6852                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 6852+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 3.9685026299205 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 3.9685026299205 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001433 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 6882               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2817 $b
create_bonds  single/bond 2 2817 6853
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0022592 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1434                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1434]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 716                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[716]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1199                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1199]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4262                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4262]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1146                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1146]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3007                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3007]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3007 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3007                         
57 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 57
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 57
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3007]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3007]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 6882                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 6882+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 38.0976252472368 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 38.0976252472368 5.5559036818887 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 38.0976252472368 5.5559036818887 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001523 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 6912               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3007 $b
create_bonds  single/bond 2 3007 6883
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0040505 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3505                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3505]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3505 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3505                         
58 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 58
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 58
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3505]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3505]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 6912                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 6912+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 33.3354220913322 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 33.3354220913322 13.4929089417297 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 33.3354220913322 13.4929089417297 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001482 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 6942               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3505 $b
create_bonds  single/bond 2 3505 6913
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0022802 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1123                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1123]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2916                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2916]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3206                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3206]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3206 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3206                         
59 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 59
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 59
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3206]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3206]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 6942                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 6942+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 37.3039247212527 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 37.3039247212527 7.937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 37.3039247212527 7.937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001446 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 6972               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3206 $b
create_bonds  single/bond 2 3206 6943
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.003056 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4922                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4922]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2920                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2920]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4885                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4885]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4885 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4885                         
60 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 60
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 60
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4885]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4885]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 6972                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 6972+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 35.7165236692845 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 35.7165236692845 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001637 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 7002               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4885 $b
create_bonds  single/bond 2 4885 6973
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0024933 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 452                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[452]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3457                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3457]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3457 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3457                         
61 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 61
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 61
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3457]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3457]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 7002                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 7002+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 13.4929089417297 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 13.4929089417297 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001247 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 7032               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3457 $b
create_bonds  single/bond 2 3457 7003
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0039398 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 371                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[371]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2946                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2946]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2946 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2946                         
62 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 62
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 62
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2946]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2946]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 7032                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 7032+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 4.7622031559046 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 4.7622031559046 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001248 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 7062               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2946 $b
create_bonds  single/bond 2 2946 7033
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0023355 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3923                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3923]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4869                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4869]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4869 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4869                         
63 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 63
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 63
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4869]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4869]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 7062                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 7062+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 35.7165236692845 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 35.7165236692845 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001769 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 7092               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4869 $b
create_bonds  single/bond 2 4869 7063
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0023027 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4942                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4942]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 886                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[886]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4236                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4236]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4236 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4236                         
64 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 64
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 64
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4236]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4236]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 7092                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 7092+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 25.3984168314912 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 25.3984168314912 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001278 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 7122               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4236 $b
create_bonds  single/bond 2 4236 7093
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0036588 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 877                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[877]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 214                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[214]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3415                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3415]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3415 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3415                         
65 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 65
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 65
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3415]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3415]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 7122                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 7122+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 38.0976252472368 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 38.0976252472368 11.9055078897615 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 38.0976252472368 11.9055078897615 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001315 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 7152               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3415 $b
create_bonds  single/bond 2 3415 7123
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0039989 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2554                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2554]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2499                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2499]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3280                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3280]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3280 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3280                         
66 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 66
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 66
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3280]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3280]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 7152                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 7152+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.1921173574753 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.1921173574753 9.5244063118092 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.1921173574753 9.5244063118092 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001754 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 7182               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3280 $b
create_bonds  single/bond 2 3280 7153
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0033768 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4819                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4819]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4819 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4819                         
67 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 67
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 67
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4819]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4819]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 7182                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 7182+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 34.1291226173163 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 34.1291226173163 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001367 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 7212               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4819 $b
create_bonds  single/bond 2 4819 7183
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0039218 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4168                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4168]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1872                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1872]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 237                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[237]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2114                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2114]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1806                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1806]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4849                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4849]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4849 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4849                         
68 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 68
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 68
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4849]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4849]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 7212                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 7212+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 35.7165236692845 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 35.7165236692845 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000124 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 7242               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4849 $b
create_bonds  single/bond 2 4849 7213
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0027672 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 778                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[778]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3102                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3102]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4749                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4749]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2754                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2754]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2754 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2754                         
69 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 69
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 69
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2754]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2754]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 7242                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 7242+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 1.5874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 1.5874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001814 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 7272               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2754 $b
create_bonds  single/bond 2 2754 7243
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0032679 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1605                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1605]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 411                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[411]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1153                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1153]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1965                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1965]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 236                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[236]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3214                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3214]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3394                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3394]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3394 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3394                         
70 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 70
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 70
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3394]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3394]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 7272                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 7272+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 30.9543205133799 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 30.9543205133799 11.1118073637774 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 30.9543205133799 11.1118073637774 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001258 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 7302               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3394 $b
create_bonds  single/bond 2 3394 7273
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.003402 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1419                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1419]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3084                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3084]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3084 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3084                         
71 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 71
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 71
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3084]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3084]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 7302                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 7302+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 29.3669194614117 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 29.3669194614117 6.3496042078728 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 29.3669194614117 6.3496042078728 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001317 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 7332               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3084 $b
create_bonds  single/bond 2 3084 7303
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0024308 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1986                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1986]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2159                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2159]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2778                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2778]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2778 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2778                         
72 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 72
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 72
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2778]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2778]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 7332                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 7332+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 29.3669194614117 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 29.3669194614117 1.5874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 29.3669194614117 1.5874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001616 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 7362               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2778 $b
create_bonds  single/bond 2 2778 7333
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0031034 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3370                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3370]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3370 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3370                         
73 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 73
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 73
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3370]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3370]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 7362                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 7362+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 11.1118073637774 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 11.1118073637774 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001416 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 7392               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3370 $b
create_bonds  single/bond 2 3370 7363
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0022261 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4541                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4541]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2458                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2458]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1131                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1131]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4997                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4997]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3036                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3036]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3036 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3036                         
74 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 74
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 74
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3036]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3036]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 7392                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 7392+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 6.3496042078728 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 6.3496042078728 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001226 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 7422               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3036 $b
create_bonds  single/bond 2 3036 7393
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0029454 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3628                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3628]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3628 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3628                         
75 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 75
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 75
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3628]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3628]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 7422                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 7422+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 15.874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 15.874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001478 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 7452               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3628 $b
create_bonds  single/bond 2 3628 7423
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025847 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4993                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4993]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4433                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4433]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 748                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[748]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3909                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3909]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3909 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3909                         
76 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 76
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 76
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3909]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3909]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 7452                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 7452+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 31.748021039364 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 31.748021039364 19.8425131496025 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 31.748021039364 19.8425131496025 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001727 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 7482               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3909 $b
create_bonds  single/bond 2 3909 7453
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.003766 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 651                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[651]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4369                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4369]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1077                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1077]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1010                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1010]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1388                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1388]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 5090                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[5090]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2160                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2160]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 5091                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[5091]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3121                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3121]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2693                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2693]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2693 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2693                         
77 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 77
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 77
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2693]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2693]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 7482                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 7482+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 34.9228231433004 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 34.9228231433004 0.7937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 34.9228231433004 0.7937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001699 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 7512               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2693 $b
create_bonds  single/bond 2 2693 7483
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0034135 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1536                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1536]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3827                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3827]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1845                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1845]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3824                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3824]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1114                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1114]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3852                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3852]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3852 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3852                         
78 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 78
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 78
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3852]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3852]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 7512                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 7512+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 19.0488126236184 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 19.0488126236184 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001387 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 7542               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3852 $b
create_bonds  single/bond 2 3852 7513
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0024631 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3932                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3932]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1139                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1139]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2188                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2188]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 511                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[511]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4362                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4362]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4362 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4362                         
79 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 79
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 79
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4362]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4362]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 7542                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 7542+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 26.9858178834594 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 26.9858178834594 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001379 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 7572               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4362 $b
create_bonds  single/bond 2 4362 7543
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0026824 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4270                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4270]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4650                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4650]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 694                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[694]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 288                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[288]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2483                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2483]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 600                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[600]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4111                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4111]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3366                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3366]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3366 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3366                         
80 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 80
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 80
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3366]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3366]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 7572                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 7572+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 11.1118073637774 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 11.1118073637774 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001577 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 7602               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3366 $b
create_bonds  single/bond 2 3366 7573
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0022879 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3873                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3873]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3873 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3873                         
81 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 81
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 81
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3873]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3873]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 7602                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 7602+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 17.4614115716502 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 17.4614115716502 19.8425131496025 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 17.4614115716502 19.8425131496025 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001644 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 7632               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3873 $b
create_bonds  single/bond 2 3873 7603
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0026615 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3774                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3774]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3774 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3774                         
82 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 82
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 82
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3774]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3774]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 7632                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 7632+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 17.4614115716502 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 17.4614115716502 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001341 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 7662               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3774 $b
create_bonds  single/bond 2 3774 7633
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0038946 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3035                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3035]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1514                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1514]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 5087                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[5087]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4283                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4283]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3362                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3362]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3362 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3362                         
83 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 83
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 83
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3362]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3362]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 7662                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 7662+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 11.1118073637774 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 11.1118073637774 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001783 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 7692               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3362 $b
create_bonds  single/bond 2 3362 7663
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0045484 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 5085                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[5085]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 5085 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 5085                         
84 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 84
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 84
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[5085]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[5085]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 7692                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 7692+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 38.8913257732209 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 38.8913257732209 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001641 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 7722               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 5085 $b
create_bonds  single/bond 2 5085 7693
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0042128 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2362                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2362]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4095                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4095]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1081                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1081]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2384                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2384]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2025                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2025]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2443                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2443]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2565                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2565]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2937                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2937]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3806                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3806]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3806 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3806                         
84 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 84
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 85
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3806]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3806]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 7722                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 7722+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2198                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2198]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4045                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4045]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4045 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4045                         
85 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 85
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 85
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4045]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4045]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 7722                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 7722+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 23.0173152535389 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 23.0173152535389 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001571 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 7752               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4045 $b
create_bonds  single/bond 2 4045 7723
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0026103 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4447                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4447]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4545                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4545]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1423                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1423]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 122                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[122]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 5150                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[5150]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4617                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4617]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1953                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1953]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 5091                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[5091]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4368                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4368]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3788                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3788]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3303                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3303]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 358                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[358]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3560                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3560]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1422                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1422]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4069                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4069]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4069 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4069                         
86 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 86
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 86
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4069]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4069]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 7752                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 7752+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 23.0173152535389 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 23.0173152535389 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001815 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 7782               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4069 $b
create_bonds  single/bond 2 4069 7753
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0034723 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2878                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2878]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 138                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[138]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1736                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1736]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4101                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4101]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4101 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4101                         
87 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 87
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 87
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4101]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4101]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 7782                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 7782+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 23.0173152535389 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 23.0173152535389 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001718 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 7812               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4101 $b
create_bonds  single/bond 2 4101 7783
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.002349 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3955                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3955]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3955 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3955                         
88 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 88
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 88
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3955]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3955]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 7812                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 7812+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 21.4299142015707 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 21.4299142015707 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001351 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 7842               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3955 $b
create_bonds  single/bond 2 3955 7813
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0034517 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1739                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1739]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 232                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[232]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1257                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1257]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4219                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4219]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4219 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4219                         
89 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 89
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 89
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4219]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4219]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 7842                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 7842+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 33.3354220913322 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 33.3354220913322 24.6047163055071 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 33.3354220913322 24.6047163055071 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001858 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 7872               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4219 $b
create_bonds  single/bond 2 4219 7843
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0031246 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 851                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[851]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 5128                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[5128]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 5128 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 5128                         
90 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 90
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 90
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[5128]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[5128]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 7872                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 7872+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 30.9543205133799 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 30.9543205133799 38.0976252472368 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 30.9543205133799 38.0976252472368 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001483 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 7902               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 5128 $b
create_bonds  single/bond 2 5128 7873
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0037847 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1510                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1510]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2271                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2271]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 62                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[62]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2876                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2876]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2876 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2876                         
91 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 91
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 91
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2876]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2876]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 7902                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 7902+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 3.1748021039364 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 3.1748021039364 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001565 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 7932               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2876 $b
create_bonds  single/bond 2 2876 7903
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0039266 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2650                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2650]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4408                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4408]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 5114                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[5114]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 5109                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[5109]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 5109 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 5109                         
92 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 92
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 92
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[5109]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[5109]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 7932                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 7932+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 38.8913257732209 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 38.8913257732209 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001844 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 7962               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 5109 $b
create_bonds  single/bond 2 5109 7933
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.003554 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3849                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3849]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3849 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3849                         
93 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 93
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 93
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3849]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3849]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 7962                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 7962+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 19.8425131496025 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 19.8425131496025 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001545 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 7992               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3849 $b
create_bonds  single/bond 2 3849 7963
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.004466 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3044                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3044]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3044 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3044                         
94 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 94
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 94
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3044]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3044]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 7992                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 7992+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 6.3496042078728 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 6.3496042078728 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001672 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 8022               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3044 $b
create_bonds  single/bond 2 3044 7993
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025821 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1690                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1690]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4856                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4856]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4856 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4856                         
95 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 95
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 95
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4856]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4856]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 8022                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 8022+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 34.9228231433004 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 34.9228231433004 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001855 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 8052               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4856 $b
create_bonds  single/bond 2 4856 8023
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0027476 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3153                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3153]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4158                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4158]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4158 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4158                         
96 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 96
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 96
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4158]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4158]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 8052                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 8052+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 23.811015779523 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 23.811015779523 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001441 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 8082               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4158 $b
create_bonds  single/bond 2 4158 8053
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0023651 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1311                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1311]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3080                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3080]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3080 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3080                         
97 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 97
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 97
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3080]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3080]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 8082                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 8082+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 6.3496042078728 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 6.3496042078728 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001637 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 8112               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3080 $b
create_bonds  single/bond 2 3080 8083
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0044728 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4698                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4698]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 393                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[393]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1103                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1103]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1638                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1638]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 389                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[389]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1631                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1631]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3154                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3154]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3154 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3154                         
98 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 98
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 98
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3154]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3154]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 8112                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 8112+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 7.937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 7.937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001354 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 8142               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3154 $b
create_bonds  single/bond 2 3154 8113
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0023709 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 5009                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[5009]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4300                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4300]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4300 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4300                         
99 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 99
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 99
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4300]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4300]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 8142                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 8142+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.1921173574753 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.1921173574753 25.3984168314912 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.1921173574753 25.3984168314912 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001461 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 8172               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4300 $b
create_bonds  single/bond 2 4300 8143
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.003434 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1016                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1016]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3469                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3469]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3469 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3469                         
100 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 100
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 100
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3469]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3469]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 8172                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 8172+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 13.4929089417297 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 13.4929089417297 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001957 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 8202               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3469 $b
create_bonds  single/bond 2 3469 8173
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025267 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3234                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3234]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 414                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[414]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4033                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4033]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4033 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4033                         
101 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 101
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 101
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4033]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4033]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 8202                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 8202+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 23.0173152535389 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 23.0173152535389 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001459 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 8232               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4033 $b
create_bonds  single/bond 2 4033 8203
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0044936 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1173                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1173]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4944                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4944]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4944 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4944                         
102 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 102
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 102
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4944]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4944]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 8232                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 8232+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 38.8913257732209 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 38.8913257732209 34.9228231433004 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 38.8913257732209 34.9228231433004 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001589 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 8262               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4944 $b
create_bonds  single/bond 2 4944 8233
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0047471 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2613                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2613]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2613 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2613                         
103 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 103
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 103
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2613]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2613]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 8262                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 8262+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 0.7937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 0.7937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000253 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 8292               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2613 $b
create_bonds  single/bond 2 2613 8263
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0039304 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2245                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2245]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 948                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[948]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3547                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3547]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3547 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3547                         
104 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 104
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 104
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3547]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3547]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 8292                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 8292+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 15.0803099936979 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 15.0803099936979 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001575 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 8322               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3547 $b
create_bonds  single/bond 2 3547 8293
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0094324 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 5086                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[5086]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4974                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4974]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4974 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4974                         
105 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 105
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 105
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4974]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4974]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 8322                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 8322+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 36.5102241952686 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 36.5102241952686 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001862 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 8352               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4974 $b
create_bonds  single/bond 2 4974 8323
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.00406 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3126                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3126]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3126 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3126                         
106 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 106
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 106
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3126]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3126]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 8352                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 8352+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 7.937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 7.937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000225 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 8382               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3126 $b
create_bonds  single/bond 2 3126 8353
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0088061 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4873                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4873]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4873 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4873                         
107 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 107
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 107
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4873]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4873]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 8382                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 8382+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 35.7165236692845 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 35.7165236692845 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001566 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 8412               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4873 $b
create_bonds  single/bond 2 4873 8383
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0066766 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4458                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4458]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3938                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3938]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3938 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3938                         
108 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 108
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 108
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3938]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3938]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 8412                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 8412+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 20.6362136755866 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 20.6362136755866 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001492 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 8442               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3938 $b
create_bonds  single/bond 2 3938 8413
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0039033 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 238                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[238]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2615                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2615]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1730                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1730]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 985                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[985]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3597                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3597]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3211                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3211]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3211 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3211                         
108 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 108
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 109
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3211]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3211]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 8442                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 8442+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 808                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[808]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4882                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4882]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4668                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4668]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4668 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4668                         
109 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 109
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 109
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4668]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4668]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 8442                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 8442+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 31.748021039364 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 31.748021039364 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000205 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 8472               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4668 $b
create_bonds  single/bond 2 4668 8443
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0044446 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 386                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[386]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2730                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2730]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2730 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2730                         
110 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 110
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 110
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2730]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2730]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 8472                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 8472+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 1.5874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 1.5874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001883 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 8502               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2730 $b
create_bonds  single/bond 2 2730 8473
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0042273 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1052                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1052]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1444                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1444]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 773                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[773]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4864                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4864]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4864 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4864                         
111 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 111
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 111
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4864]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4864]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 8502                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 8502+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 34.9228231433004 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 34.9228231433004 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001634 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 8532               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4864 $b
create_bonds  single/bond 2 4864 8503
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.003806 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1940                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1940]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1475                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1475]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3118                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3118]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3118 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3118                         
112 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 112
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 112
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3118]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3118]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 8532                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 8532+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 7.937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 7.937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001996 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 8562               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3118 $b
create_bonds  single/bond 2 3118 8533
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0051352 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3003                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3003]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3003 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3003                         
113 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 113
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 113
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3003]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3003]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 8562                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 8562+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 36.5102241952686 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 36.5102241952686 5.5559036818887 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 36.5102241952686 5.5559036818887 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001669 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 8592               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3003 $b
create_bonds  single/bond 2 3003 8563
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0029789 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4728                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4728]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4728 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4728                         
114 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 114
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 114
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4728]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4728]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 8592                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 8592+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 34.1291226173163 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 34.1291226173163 31.748021039364 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 34.1291226173163 31.748021039364 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001716 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 8622               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4728 $b
create_bonds  single/bond 2 4728 8593
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.003414 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 468                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[468]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1803                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1803]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 45                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[45]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 5167                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[5167]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 5167 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 5167                         
115 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 115
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 115
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[5167]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[5167]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 8622                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 8622+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 39.685026299205 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 39.685026299205 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001497 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 8652               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 5167 $b
create_bonds  single/bond 2 5167 8623
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025906 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2829                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2829]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2829 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2829                         
116 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 116
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 116
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2829]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2829]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 8652                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 8652+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 3.9685026299205 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 3.9685026299205 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001548 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 8682               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2829 $b
create_bonds  single/bond 2 2829 8653
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.005508 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1670                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1670]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2313                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2313]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1539                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1539]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 669                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[669]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 92                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[92]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 815                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[815]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 482                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[482]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2074                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2074]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2772                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2772]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2235                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2235]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2828                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2828]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2828 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2828                         
117 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 117
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 117
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2828]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2828]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 8682                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 8682+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 3.1748021039364 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 3.1748021039364 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001981 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 8712               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2828 $b
create_bonds  single/bond 2 2828 8683
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0049369 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 3884                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[3884]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 3884 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 3884                         
118 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 118
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 118
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[3884]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[3884]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 8712                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 8712+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 19.0488126236184 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 19.0488126236184 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001785 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 8742               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 3884 $b
create_bonds  single/bond 2 3884 8713
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0040199 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2921                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2921]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 5100                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[5100]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 5100 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 5100                         
119 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 119
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 119
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[5100]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[5100]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 8742                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 8742+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 38.0976252472368 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 38.0976252472368 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002168 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 8772               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 5100 $b
create_bonds  single/bond 2 5100 8743
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0030798 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,5202,$s))  
variable      randni equal round(random(1,5202,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 4190                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[4190]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 4190 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 4190                         
120 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 120
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 120
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[4190]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[4190]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 8772                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 8772+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 23.811015779523 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 23.811015779523 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.00018 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 8802               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 4190 $b
create_bonds  single/bond 2 4190 8773
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0028339 secs
next i
jump MDPBB.in loop    # End of the loop

# Rotate the created brush about the centre of the simulation box by 180 degrees to make it true top brush
displace_atoms all rotate $(v_xhi/2.0) $(v_yhi/2.0) $(v_zhi/2.0 - 1) 1 0 0 180 units box
displace_atoms all rotate 20 $(v_yhi/2.0) $(v_zhi/2.0 - 1) 1 0 0 180 units box
displace_atoms all rotate 20 20 $(v_zhi/2.0 - 1) 1 0 0 180 units box
displace_atoms all rotate 20 20 35 1 0 0 180 units box

variable      ntop0 equal ${check}          # Count the total number of atoms in the top brush
variable      ntop0 equal 8802          

#--- Create the Bottom brush ---#

# Repeating the same procedure as above again but with new atoms

create_atoms  1 region wall
Created 5202 atoms
  create_atoms CPU = 0.0009269 secs
group         bwall region wall
5202 atoms in group bwall
variable      nbwall0 equal ${nbwall}
variable      nbwall0 equal 5202

variable      j loop $M
variable      j loop 120
label         loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13547
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13547]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 8932
variable      randzj equal z[${randatomj}]
variable      randzj equal z[8932]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13450
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13450]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13450 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13450                         
1 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 1
print         "j = $(v_j)"
j = 1
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13450]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13450]
variable      check0 equal ${check}
variable      check0 equal 14004
variable      b equal ${check}+1
variable      b equal 14004+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 31.748021039364 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 31.748021039364 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002469 secs
variable      check1 equal ${check}
variable      check1 equal 14034
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13450 $b
create_bonds  single/bond 2 13450 14005
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0037204 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10925
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10925]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13785
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13785]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13785 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13785                         
2 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 2
print         "j = $(v_j)"
j = 2
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13785]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13785]
variable      check0 equal ${check}
variable      check0 equal 14034
variable      b equal ${check}+1
variable      b equal 14034+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 37.3039247212527 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 37.3039247212527 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0003227 secs
variable      check1 equal ${check}
variable      check1 equal 14064
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13785 $b
create_bonds  single/bond 2 13785 14035
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0046989 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13026
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13026]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12467
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12467]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12467 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12467                         
3 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 3
print         "j = $(v_j)"
j = 3
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12467]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12467]
variable      check0 equal ${check}
variable      check0 equal 14064
variable      b equal ${check}+1
variable      b equal 14064+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 16.6677110456661 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 16.6677110456661 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002911 secs
variable      check1 equal ${check}
variable      check1 equal 14094
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12467 $b
create_bonds  single/bond 2 12467 14065
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.002822 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13115
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13115]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13115 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13115                         
4 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 4
print         "j = $(v_j)"
j = 4
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13115]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13115]
variable      check0 equal ${check}
variable      check0 equal 14094
variable      b equal ${check}+1
variable      b equal 14094+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 30.1606199873958 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 30.1606199873958 26.1921173574753 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 30.1606199873958 26.1921173574753 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000238 secs
variable      check1 equal ${check}
variable      check1 equal 14124
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13115 $b
create_bonds  single/bond 2 13115 14095
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.003832 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13064
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13064]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13686
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13686]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13686 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13686                         
5 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 5
print         "j = $(v_j)"
j = 5
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13686]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13686]
variable      check0 equal ${check}
variable      check0 equal 14124
variable      b equal ${check}+1
variable      b equal 14124+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 34.9228231433004 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 34.9228231433004 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002234 secs
variable      check1 equal ${check}
variable      check1 equal 14154
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13686 $b
create_bonds  single/bond 2 13686 14125
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0029265 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12908
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12908]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11220
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11220]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9629
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9629]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12895
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12895]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12895 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12895                         
6 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 6
print         "j = $(v_j)"
j = 6
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12895]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12895]
variable      check0 equal ${check}
variable      check0 equal 14154
variable      b equal ${check}+1
variable      b equal 14154+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 23.0173152535389 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 23.0173152535389 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0003176 secs
variable      check1 equal ${check}
variable      check1 equal 14184
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12895 $b
create_bonds  single/bond 2 12895 14155
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0028862 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13008
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13008]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13008 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13008                         
7 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 7
print         "j = $(v_j)"
j = 7
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13008]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13008]
variable      check0 equal ${check}
variable      check0 equal 14184
variable      b equal ${check}+1
variable      b equal 14184+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 29.3669194614117 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 29.3669194614117 23.811015779523 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 29.3669194614117 23.811015779523 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002278 secs
variable      check1 equal ${check}
variable      check1 equal 14214
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13008 $b
create_bonds  single/bond 2 13008 14185
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0037923 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13521
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13521]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11532
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11532]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 11532 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 11532                         
8 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 8
print         "j = $(v_j)"
j = 8
variable      x0 equal x[${randatomj}]
variable      x0 equal x[11532]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[11532]
variable      check0 equal ${check}
variable      check0 equal 14214
variable      b equal ${check}+1
variable      b equal 14214+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 1.5874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 1.5874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0005455 secs
variable      check1 equal ${check}
variable      check1 equal 14244
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 11532 $b
create_bonds  single/bond 2 11532 14215
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025692 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 8833
variable      randzj equal z[${randatomj}]
variable      randzj equal z[8833]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9978
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9978]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11482
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11482]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 11482 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 11482                         
9 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 9
print         "j = $(v_j)"
j = 9
variable      x0 equal x[${randatomj}]
variable      x0 equal x[11482]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[11482]
variable      check0 equal ${check}
variable      check0 equal 14244
variable      b equal ${check}+1
variable      b equal 14244+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 30.9543205133799 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 30.9543205133799 0 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 30.9543205133799 0 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002847 secs
variable      check1 equal ${check}
variable      check1 equal 14274
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 11482 $b
create_bonds  single/bond 2 11482 14245
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0030438 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11186
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11186]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9933
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9933]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12879
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12879]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12879 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12879                         
10 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 10
print         "j = $(v_j)"
j = 10
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12879]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12879]
variable      check0 equal ${check}
variable      check0 equal 14274
variable      b equal ${check}+1
variable      b equal 14274+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 17.4614115716502 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 17.4614115716502 23.0173152535389 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 17.4614115716502 23.0173152535389 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002442 secs
variable      check1 equal ${check}
variable      check1 equal 14304
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12879 $b
create_bonds  single/bond 2 12879 14275
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0031931 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13269
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13269]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9968
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9968]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9396
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9396]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9035
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9035]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10242
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10242]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13027
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13027]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11496
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11496]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11400
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11400]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13212
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13212]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13212 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13212                         
11 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 11
print         "j = $(v_j)"
j = 11
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13212]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13212]
variable      check0 equal ${check}
variable      check0 equal 14304
variable      b equal ${check}+1
variable      b equal 14304+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 29.3669194614117 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 29.3669194614117 26.9858178834594 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 29.3669194614117 26.9858178834594 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002673 secs
variable      check1 equal ${check}
variable      check1 equal 14334
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13212 $b
create_bonds  single/bond 2 13212 14305
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0034478 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12190
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12190]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9516
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9516]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11838
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11838]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 11838 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 11838                         
12 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 12
print         "j = $(v_j)"
j = 12
variable      x0 equal x[${randatomj}]
variable      x0 equal x[11838]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[11838]
variable      check0 equal ${check}
variable      check0 equal 14334
variable      b equal ${check}+1
variable      b equal 14334+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 6.3496042078728 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 6.3496042078728 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0003119 secs
variable      check1 equal ${check}
variable      check1 equal 14364
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 11838 $b
create_bonds  single/bond 2 11838 14335
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0031456 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13646
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13646]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9383
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9383]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10419
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10419]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10205
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10205]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12428
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12428]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10870
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10870]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10545
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10545]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12061
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12061]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12392
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12392]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12392 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12392                         
13 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 13
print         "j = $(v_j)"
j = 13
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12392]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12392]
variable      check0 equal ${check}
variable      check0 equal 14364
variable      b equal ${check}+1
variable      b equal 14364+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 14.2866094677138 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 14.2866094677138 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000243 secs
variable      check1 equal ${check}
variable      check1 equal 14394
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12392 $b
create_bonds  single/bond 2 12392 14365
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025223 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9669
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9669]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10773
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10773]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13652
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13652]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13581
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13581]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13581 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13581                         
14 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 14
print         "j = $(v_j)"
j = 14
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13581]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13581]
variable      check0 equal ${check}
variable      check0 equal 14394
variable      b equal ${check}+1
variable      b equal 14394+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 34.1291226173163 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 34.1291226173163 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002553 secs
variable      check1 equal ${check}
variable      check1 equal 14424
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13581 $b
create_bonds  single/bond 2 13581 14395
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0026378 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9871
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9871]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12935
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12935]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10204
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10204]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12971
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12971]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13729
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13729]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9348
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9348]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9519
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9519]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13733
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13733]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9995
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9995]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11968
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11968]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 11968 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 11968                         
15 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 15
print         "j = $(v_j)"
j = 15
variable      x0 equal x[${randatomj}]
variable      x0 equal x[11968]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[11968]
variable      check0 equal ${check}
variable      check0 equal 14424
variable      b equal ${check}+1
variable      b equal 14424+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 7.937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 7.937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002299 secs
variable      check1 equal ${check}
variable      check1 equal 14454
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 11968 $b
create_bonds  single/bond 2 11968 14425
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025435 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12089
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12089]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13939
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13939]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13939 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13939                         
16 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 16
print         "j = $(v_j)"
j = 16
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13939]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13939]
variable      check0 equal ${check}
variable      check0 equal 14454
variable      b equal ${check}+1
variable      b equal 14454+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 33.3354220913322 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 33.3354220913322 38.8913257732209 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 33.3354220913322 38.8913257732209 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002414 secs
variable      check1 equal ${check}
variable      check1 equal 14484
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13939 $b
create_bonds  single/bond 2 13939 14455
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0035203 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9157
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9157]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11358
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11358]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9675
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9675]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9741
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9741]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9174
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9174]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12356
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12356]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12356 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12356                         
17 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 17
print         "j = $(v_j)"
j = 17
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12356]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12356]
variable      check0 equal ${check}
variable      check0 equal 14484
variable      b equal ${check}+1
variable      b equal 14484+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 14.2866094677138 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 14.2866094677138 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002625 secs
variable      check1 equal ${check}
variable      check1 equal 14514
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12356 $b
create_bonds  single/bond 2 12356 14485
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025476 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13120
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13120]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10314
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10314]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9202
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9202]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11028
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11028]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11693
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11693]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13171
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13171]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10396
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10396]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13863
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13863]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13863 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13863                         
18 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 18
print         "j = $(v_j)"
j = 18
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13863]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13863]
variable      check0 equal ${check}
variable      check0 equal 14514
variable      b equal ${check}+1
variable      b equal 14514+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 38.8913257732209 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 38.8913257732209 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0004212 secs
variable      check1 equal ${check}
variable      check1 equal 14544
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13863 $b
create_bonds  single/bond 2 13863 14515
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0044509 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13003
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13003]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13745
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13745]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12311
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12311]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12311 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12311                         
19 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 19
print         "j = $(v_j)"
j = 19
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12311]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12311]
variable      check0 equal ${check}
variable      check0 equal 14544
variable      b equal ${check}+1
variable      b equal 14544+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 34.9228231433004 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 34.9228231433004 13.4929089417297 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 34.9228231433004 13.4929089417297 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002361 secs
variable      check1 equal ${check}
variable      check1 equal 14574
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12311 $b
create_bonds  single/bond 2 12311 14545
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0029782 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13146
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13146]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10549
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10549]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13486
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13486]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13486 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13486                         
20 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 20
print         "j = $(v_j)"
j = 20
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13486]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13486]
variable      check0 equal ${check}
variable      check0 equal 14574
variable      b equal ${check}+1
variable      b equal 14574+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 31.748021039364 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 31.748021039364 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002882 secs
variable      check1 equal ${check}
variable      check1 equal 14604
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13486 $b
create_bonds  single/bond 2 13486 14575
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0026632 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10650
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10650]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9193
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9193]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12544
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12544]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12544 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12544                         
21 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 21
print         "j = $(v_j)"
j = 21
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12544]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12544]
variable      check0 equal ${check}
variable      check0 equal 14604
variable      b equal ${check}+1
variable      b equal 14604+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 17.4614115716502 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 17.4614115716502 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002371 secs
variable      check1 equal ${check}
variable      check1 equal 14634
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12544 $b
create_bonds  single/bond 2 12544 14605
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0026119 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13090
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13090]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13090 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13090                         
22 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 22
print         "j = $(v_j)"
j = 22
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13090]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13090]
variable      check0 equal ${check}
variable      check0 equal 14634
variable      b equal ${check}+1
variable      b equal 14634+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 25.3984168314912 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 25.3984168314912 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002375 secs
variable      check1 equal ${check}
variable      check1 equal 14664
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13090 $b
create_bonds  single/bond 2 13090 14635
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025823 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11922
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11922]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12668
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12668]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13643
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13643]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11367
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11367]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9193
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9193]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11694
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11694]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 11694 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 11694                         
23 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 23
print         "j = $(v_j)"
j = 23
variable      x0 equal x[${randatomj}]
variable      x0 equal x[11694]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[11694]
variable      check0 equal ${check}
variable      check0 equal 14664
variable      b equal ${check}+1
variable      b equal 14664+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 34.1291226173163 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 34.1291226173163 3.1748021039364 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 34.1291226173163 3.1748021039364 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002838 secs
variable      check1 equal ${check}
variable      check1 equal 14694
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 11694 $b
create_bonds  single/bond 2 11694 14665
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0034729 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12793
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12793]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12793 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12793                         
24 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 24
print         "j = $(v_j)"
j = 24
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12793]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12793]
variable      check0 equal ${check}
variable      check0 equal 14694
variable      b equal ${check}+1
variable      b equal 14694+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 21.4299142015707 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 21.4299142015707 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002612 secs
variable      check1 equal ${check}
variable      check1 equal 14724
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12793 $b
create_bonds  single/bond 2 12793 14695
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0026905 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9305
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9305]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10422
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10422]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13432
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13432]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13432 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13432                         
25 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 25
print         "j = $(v_j)"
j = 25
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13432]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13432]
variable      check0 equal ${check}
variable      check0 equal 14724
variable      b equal ${check}+1
variable      b equal 14724+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 35.7165236692845 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 35.7165236692845 30.1606199873958 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 35.7165236692845 30.1606199873958 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002866 secs
variable      check1 equal ${check}
variable      check1 equal 14754
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13432 $b
create_bonds  single/bond 2 13432 14725
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0030378 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12641
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12641]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13676
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13676]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9871
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9871]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13365
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13365]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13365 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13365                         
26 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 26
print         "j = $(v_j)"
j = 26
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13365]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13365]
variable      check0 equal ${check}
variable      check0 equal 14754
variable      b equal ${check}+1
variable      b equal 14754+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 30.9543205133799 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 30.9543205133799 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002677 secs
variable      check1 equal ${check}
variable      check1 equal 14784
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13365 $b
create_bonds  single/bond 2 13365 14755
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0033846 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13144
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13144]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13144 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13144                         
27 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 27
print         "j = $(v_j)"
j = 27
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13144]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13144]
variable      check0 equal ${check}
variable      check0 equal 14784
variable      b equal ${check}+1
variable      b equal 14784+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 26.9858178834594 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 26.9858178834594 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002736 secs
variable      check1 equal ${check}
variable      check1 equal 14814
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13144 $b
create_bonds  single/bond 2 13144 14785
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0028109 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 8868
variable      randzj equal z[${randatomj}]
variable      randzj equal z[8868]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11521
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11521]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 11521 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 11521                         
28 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 28
print         "j = $(v_j)"
j = 28
variable      x0 equal x[${randatomj}]
variable      x0 equal x[11521]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[11521]
variable      check0 equal ${check}
variable      check0 equal 14814
variable      b equal ${check}+1
variable      b equal 14814+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 2.3811015779523 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 2.3811015779523 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0003082 secs
variable      check1 equal ${check}
variable      check1 equal 14844
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 11521 $b
create_bonds  single/bond 2 11521 14815
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0052217 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12664
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12664]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12453
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12453]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13603
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13603]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9943
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9943]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9839
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9839]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9368
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9368]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11823
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11823]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 11823 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 11823                         
29 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 29
print         "j = $(v_j)"
j = 29
variable      x0 equal x[${randatomj}]
variable      x0 equal x[11823]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[11823]
variable      check0 equal ${check}
variable      check0 equal 14844
variable      b equal ${check}+1
variable      b equal 14844+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 7.1433047338569 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 7.1433047338569 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0003006 secs
variable      check1 equal ${check}
variable      check1 equal 14874
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 11823 $b
create_bonds  single/bond 2 11823 14845
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.002904 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11766
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11766]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13982
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13982]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13585
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13585]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13585 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13585                         
30 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 30
print         "j = $(v_j)"
j = 30
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13585]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13585]
variable      check0 equal ${check}
variable      check0 equal 14874
variable      b equal ${check}+1
variable      b equal 14874+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 34.1291226173163 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 34.1291226173163 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.00028 secs
variable      check1 equal ${check}
variable      check1 equal 14904
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13585 $b
create_bonds  single/bond 2 13585 14875
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0042484 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13466
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13466]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13466 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13466                         
31 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 31
print         "j = $(v_j)"
j = 31
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13466]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13466]
variable      check0 equal ${check}
variable      check0 equal 14904
variable      b equal ${check}+1
variable      b equal 14904+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 31.748021039364 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 31.748021039364 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002528 secs
variable      check1 equal ${check}
variable      check1 equal 14934
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13466 $b
create_bonds  single/bond 2 13466 14905
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0027315 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13415
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13415]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11434
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11434]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 11434 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 11434                         
32 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 32
print         "j = $(v_j)"
j = 32
variable      x0 equal x[${randatomj}]
variable      x0 equal x[11434]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[11434]
variable      check0 equal ${check}
variable      check0 equal 14934
variable      b equal ${check}+1
variable      b equal 14934+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 0 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 0 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000306 secs
variable      check1 equal ${check}
variable      check1 equal 14964
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 11434 $b
create_bonds  single/bond 2 11434 14935
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0048076 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12564
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12564]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12564 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12564                         
33 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 33
print         "j = $(v_j)"
j = 33
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12564]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12564]
variable      check0 equal ${check}
variable      check0 equal 14964
variable      b equal ${check}+1
variable      b equal 14964+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 17.4614115716502 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 17.4614115716502 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000244 secs
variable      check1 equal ${check}
variable      check1 equal 14994
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12564 $b
create_bonds  single/bond 2 12564 14965
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0042366 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12731
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12731]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10862
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10862]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 8905
variable      randzj equal z[${randatomj}]
variable      randzj equal z[8905]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9280
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9280]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13624
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13624]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13624 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13624                         
34 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 34
print         "j = $(v_j)"
j = 34
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13624]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13624]
variable      check0 equal ${check}
variable      check0 equal 14994
variable      b equal ${check}+1
variable      b equal 14994+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 30.9543205133799 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 30.9543205133799 33.3354220913322 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 30.9543205133799 33.3354220913322 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002861 secs
variable      check1 equal ${check}
variable      check1 equal 15024
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13624 $b
create_bonds  single/bond 2 13624 14995
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0036347 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13461
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13461]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9506
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9506]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 8805
variable      randzj equal z[${randatomj}]
variable      randzj equal z[8805]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9719
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9719]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11584
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11584]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 11584 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 11584                         
35 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 35
print         "j = $(v_j)"
j = 35
variable      x0 equal x[${randatomj}]
variable      x0 equal x[11584]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[11584]
variable      check0 equal ${check}
variable      check0 equal 15024
variable      b equal ${check}+1
variable      b equal 15024+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 30.9543205133799 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 30.9543205133799 1.5874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 30.9543205133799 1.5874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002552 secs
variable      check1 equal ${check}
variable      check1 equal 15054
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 11584 $b
create_bonds  single/bond 2 11584 15025
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0029964 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10424
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10424]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13459
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13459]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13459 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13459                         
36 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 36
print         "j = $(v_j)"
j = 36
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13459]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13459]
variable      check0 equal ${check}
variable      check0 equal 15054
variable      b equal ${check}+1
variable      b equal 15054+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 32.5417215653481 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 32.5417215653481 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000238 secs
variable      check1 equal ${check}
variable      check1 equal 15084
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13459 $b
create_bonds  single/bond 2 13459 15055
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0044124 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11325
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11325]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9274
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9274]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9228
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9228]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10635
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10635]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10349
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10349]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13605
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13605]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13605 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13605                         
37 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 37
print         "j = $(v_j)"
j = 37
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13605]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13605]
variable      check0 equal ${check}
variable      check0 equal 15084
variable      b equal ${check}+1
variable      b equal 15084+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 34.1291226173163 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 34.1291226173163 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002653 secs
variable      check1 equal ${check}
variable      check1 equal 15114
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13605 $b
create_bonds  single/bond 2 13605 15085
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0048387 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9061
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9061]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11328
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11328]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13698
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13698]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13698 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13698                         
38 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 38
print         "j = $(v_j)"
j = 38
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13698]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13698]
variable      check0 equal ${check}
variable      check0 equal 15114
variable      b equal ${check}+1
variable      b equal 15114+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 34.9228231433004 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 34.9228231433004 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000236 secs
variable      check1 equal ${check}
variable      check1 equal 15144
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13698 $b
create_bonds  single/bond 2 13698 15115
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.006155 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11944
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11944]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 11944 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 11944                         
39 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 39
print         "j = $(v_j)"
j = 39
variable      x0 equal x[${randatomj}]
variable      x0 equal x[11944]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[11944]
variable      check0 equal ${check}
variable      check0 equal 15144
variable      b equal ${check}+1
variable      b equal 15144+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 7.937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 7.937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002443 secs
variable      check1 equal ${check}
variable      check1 equal 15174
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 11944 $b
create_bonds  single/bond 2 11944 15145
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0037271 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11216
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11216]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13369
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13369]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13369 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13369                         
40 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 40
print         "j = $(v_j)"
j = 40
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13369]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13369]
variable      check0 equal ${check}
variable      check0 equal 15174
variable      b equal ${check}+1
variable      b equal 15174+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 30.9543205133799 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 30.9543205133799 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002733 secs
variable      check1 equal ${check}
variable      check1 equal 15204
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13369 $b
create_bonds  single/bond 2 13369 15175
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0042224 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12527
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12527]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12776
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12776]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12776 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12776                         
41 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 41
print         "j = $(v_j)"
j = 41
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12776]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12776]
variable      check0 equal ${check}
variable      check0 equal 15204
variable      b equal ${check}+1
variable      b equal 15204+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 20.6362136755866 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 20.6362136755866 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002532 secs
variable      check1 equal ${check}
variable      check1 equal 15234
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12776 $b
create_bonds  single/bond 2 12776 15205
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0040501 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12484
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12484]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13744
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13744]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 8991
variable      randzj equal z[${randatomj}]
variable      randzj equal z[8991]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11412
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11412]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10125
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10125]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12342
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12342]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10855
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10855]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10626
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10626]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10424
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10424]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10373
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10373]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12543
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12543]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9584
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9584]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13584
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13584]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13584 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13584                         
42 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 42
print         "j = $(v_j)"
j = 42
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13584]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13584]
variable      check0 equal ${check}
variable      check0 equal 15234
variable      b equal ${check}+1
variable      b equal 15234+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 33.3354220913322 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 33.3354220913322 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002616 secs
variable      check1 equal ${check}
variable      check1 equal 15264
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13584 $b
create_bonds  single/bond 2 13584 15235
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0041891 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11482
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11482]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 11482 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 11482                         
42 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 42
print         "j = $(v_j)"
j = 43
variable      x0 equal x[${randatomj}]
variable      x0 equal x[11482]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[11482]
variable      check0 equal ${check}
variable      check0 equal 15264
variable      b equal ${check}+1
variable      b equal 15264+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9476
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9476]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12785
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12785]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12785 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12785                         
43 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 43
print         "j = $(v_j)"
j = 43
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12785]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12785]
variable      check0 equal ${check}
variable      check0 equal 15264
variable      b equal ${check}+1
variable      b equal 15264+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 21.4299142015707 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 21.4299142015707 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0003082 secs
variable      check1 equal ${check}
variable      check1 equal 15294
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12785 $b
create_bonds  single/bond 2 12785 15265
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0030416 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13713
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13713]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9043
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9043]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11900
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11900]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11271
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11271]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9927
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9927]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10326
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10326]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12056
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12056]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11910
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11910]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 11910 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 11910                         
44 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 44
print         "j = $(v_j)"
j = 44
variable      x0 equal x[${randatomj}]
variable      x0 equal x[11910]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[11910]
variable      check0 equal ${check}
variable      check0 equal 15294
variable      b equal ${check}+1
variable      b equal 15294+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 38.8913257732209 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 38.8913257732209 6.3496042078728 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 38.8913257732209 6.3496042078728 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002465 secs
variable      check1 equal ${check}
variable      check1 equal 15324
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 11910 $b
create_bonds  single/bond 2 11910 15295
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0040148 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9916
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9916]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13457
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13457]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9026
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9026]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10508
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10508]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11860
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11860]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13226
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13226]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12586
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12586]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11341
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11341]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12032
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12032]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10330
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10330]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 8846
variable      randzj equal z[${randatomj}]
variable      randzj equal z[8846]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13709
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13709]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10824
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10824]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13028
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13028]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13028 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13028                         
45 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 45
print         "j = $(v_j)"
j = 45
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13028]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13028]
variable      check0 equal ${check}
variable      check0 equal 15324
variable      b equal ${check}+1
variable      b equal 15324+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 37.3039247212527 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 37.3039247212527 23.811015779523 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 37.3039247212527 23.811015779523 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002542 secs
variable      check1 equal ${check}
variable      check1 equal 15354
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13028 $b
create_bonds  single/bond 2 13028 15325
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0025991 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11333
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11333]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10537
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10537]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11972
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11972]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 11972 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 11972                         
46 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 46
print         "j = $(v_j)"
j = 46
variable      x0 equal x[${randatomj}]
variable      x0 equal x[11972]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[11972]
variable      check0 equal ${check}
variable      check0 equal 15354
variable      b equal ${check}+1
variable      b equal 15354+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 7.937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 7.937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0003137 secs
variable      check1 equal ${check}
variable      check1 equal 15384
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 11972 $b
create_bonds  single/bond 2 11972 15355
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0029565 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10091
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10091]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13490
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13490]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13490 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13490                         
47 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 47
print         "j = $(v_j)"
j = 47
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13490]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13490]
variable      check0 equal ${check}
variable      check0 equal 15384
variable      b equal ${check}+1
variable      b equal 15384+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 31.748021039364 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 31.748021039364 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002839 secs
variable      check1 equal ${check}
variable      check1 equal 15414
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13490 $b
create_bonds  single/bond 2 13490 15385
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0036969 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11417
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11417]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9373
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9373]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10248
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10248]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10621
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10621]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11513
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11513]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 11513 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 11513                         
48 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 48
print         "j = $(v_j)"
j = 48
variable      x0 equal x[${randatomj}]
variable      x0 equal x[11513]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[11513]
variable      check0 equal ${check}
variable      check0 equal 15414
variable      b equal ${check}+1
variable      b equal 15414+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 2.3811015779523 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 2.3811015779523 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002732 secs
variable      check1 equal ${check}
variable      check1 equal 15444
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 11513 $b
create_bonds  single/bond 2 11513 15415
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0055139 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11694
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11694]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 11694 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 11694                         
48 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 48
print         "j = $(v_j)"
j = 49
variable      x0 equal x[${randatomj}]
variable      x0 equal x[11694]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[11694]
variable      check0 equal ${check}
variable      check0 equal 15444
variable      b equal ${check}+1
variable      b equal 15444+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10946
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10946]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11996
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11996]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 11996 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 11996                         
49 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 49
print         "j = $(v_j)"
j = 49
variable      x0 equal x[${randatomj}]
variable      x0 equal x[11996]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[11996]
variable      check0 equal ${check}
variable      check0 equal 15444
variable      b equal ${check}+1
variable      b equal 15444+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 32.5417215653481 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 32.5417215653481 7.937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 32.5417215653481 7.937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000306 secs
variable      check1 equal ${check}
variable      check1 equal 15474
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 11996 $b
create_bonds  single/bond 2 11996 15445
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0033564 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12548
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12548]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12548 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12548                         
50 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 50
print         "j = $(v_j)"
j = 50
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12548]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12548]
variable      check0 equal ${check}
variable      check0 equal 15474
variable      b equal ${check}+1
variable      b equal 15474+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 17.4614115716502 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 17.4614115716502 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0003259 secs
variable      check1 equal ${check}
variable      check1 equal 15504
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12548 $b
create_bonds  single/bond 2 12548 15475
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0035697 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11745
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11745]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 11745 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 11745                         
51 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 51
print         "j = $(v_j)"
j = 51
variable      x0 equal x[${randatomj}]
variable      x0 equal x[11745]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[11745]
variable      check0 equal ${check}
variable      check0 equal 15504
variable      b equal ${check}+1
variable      b equal 15504+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 5.5559036818887 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 5.5559036818887 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002773 secs
variable      check1 equal ${check}
variable      check1 equal 15534
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 11745 $b
create_bonds  single/bond 2 11745 15505
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0046833 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13755
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13755]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10306
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10306]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11875
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11875]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 11875 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 11875                         
52 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 52
print         "j = $(v_j)"
j = 52
variable      x0 equal x[${randatomj}]
variable      x0 equal x[11875]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[11875]
variable      check0 equal ${check}
variable      check0 equal 15534
variable      b equal ${check}+1
variable      b equal 15534+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 7.1433047338569 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 7.1433047338569 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002645 secs
variable      check1 equal ${check}
variable      check1 equal 15564
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 11875 $b
create_bonds  single/bond 2 11875 15535
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0026828 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11847
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11847]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 11847 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 11847                         
53 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 53
print         "j = $(v_j)"
j = 53
variable      x0 equal x[${randatomj}]
variable      x0 equal x[11847]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[11847]
variable      check0 equal ${check}
variable      check0 equal 15564
variable      b equal ${check}+1
variable      b equal 15564+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 7.1433047338569 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 7.1433047338569 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002953 secs
variable      check1 equal ${check}
variable      check1 equal 15594
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 11847 $b
create_bonds  single/bond 2 11847 15565
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0040224 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12155
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12155]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10776
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10776]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13528
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13528]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10760
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10760]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11676
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11676]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12212
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12212]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12212 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12212                         
54 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 54
print         "j = $(v_j)"
j = 54
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12212]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12212]
variable      check0 equal ${check}
variable      check0 equal 15594
variable      b equal ${check}+1
variable      b equal 15594+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 37.3039247212527 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 37.3039247212527 11.1118073637774 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 37.3039247212527 11.1118073637774 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0003004 secs
variable      check1 equal ${check}
variable      check1 equal 15624
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12212 $b
create_bonds  single/bond 2 12212 15595
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0047629 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12479
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12479]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12479 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12479                         
55 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 55
print         "j = $(v_j)"
j = 55
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12479]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12479]
variable      check0 equal ${check}
variable      check0 equal 15624
variable      b equal ${check}+1
variable      b equal 15624+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 16.6677110456661 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 16.6677110456661 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002919 secs
variable      check1 equal ${check}
variable      check1 equal 15654
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12479 $b
create_bonds  single/bond 2 12479 15625
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0033448 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10838
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10838]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9535
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9535]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13213
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13213]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13213 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13213                         
56 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 56
print         "j = $(v_j)"
j = 56
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13213]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13213]
variable      check0 equal ${check}
variable      check0 equal 15654
variable      b equal ${check}+1
variable      b equal 15654+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 27.7795184094435 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 27.7795184094435 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002453 secs
variable      check1 equal ${check}
variable      check1 equal 15684
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13213 $b
create_bonds  single/bond 2 13213 15655
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0034334 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11749
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11749]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 11749 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 11749                         
57 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 57
print         "j = $(v_j)"
j = 57
variable      x0 equal x[${randatomj}]
variable      x0 equal x[11749]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[11749]
variable      check0 equal ${check}
variable      check0 equal 15684
variable      b equal ${check}+1
variable      b equal 15684+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 5.5559036818887 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 5.5559036818887 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0003261 secs
variable      check1 equal ${check}
variable      check1 equal 15714
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 11749 $b
create_bonds  single/bond 2 11749 15685
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0027073 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9209
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9209]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12486
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12486]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12486 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12486                         
58 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 58
print         "j = $(v_j)"
j = 58
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12486]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12486]
variable      check0 equal ${check}
variable      check0 equal 15714
variable      b equal ${check}+1
variable      b equal 15714+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 24.6047163055071 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 24.6047163055071 15.874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 24.6047163055071 15.874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002818 secs
variable      check1 equal ${check}
variable      check1 equal 15744
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12486 $b
create_bonds  single/bond 2 12486 15715
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0036151 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13786
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13786]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12819
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12819]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 8917
variable      randzj equal z[${randatomj}]
variable      randzj equal z[8917]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13100
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13100]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12528
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12528]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12528 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12528                         
59 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 59
print         "j = $(v_j)"
j = 59
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12528]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12528]
variable      check0 equal ${check}
variable      check0 equal 15744
variable      b equal ${check}+1
variable      b equal 15744+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 17.4614115716502 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 17.4614115716502 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002507 secs
variable      check1 equal ${check}
variable      check1 equal 15774
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12528 $b
create_bonds  single/bond 2 12528 15745
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0026235 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10644
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10644]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9725
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9725]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10187
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10187]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10985
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10985]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13899
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13899]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13899 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13899                         
60 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 60
print         "j = $(v_j)"
j = 60
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13899]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13899]
variable      check0 equal ${check}
variable      check0 equal 15774
variable      b equal ${check}+1
variable      b equal 15774+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 17.4614115716502 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 17.4614115716502 38.8913257732209 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 17.4614115716502 38.8913257732209 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002883 secs
variable      check1 equal ${check}
variable      check1 equal 15804
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13899 $b
create_bonds  single/bond 2 13899 15775
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0039445 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12044
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12044]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13077
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13077]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 8828
variable      randzj equal z[${randatomj}]
variable      randzj equal z[8828]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13219
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13219]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12990
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12990]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10919
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10919]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12689
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12689]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13023
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13023]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11881
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11881]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9739
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9739]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 8870
variable      randzj equal z[${randatomj}]
variable      randzj equal z[8870]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9789
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9789]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12858
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12858]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12858 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12858                         
61 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 61
print         "j = $(v_j)"
j = 61
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12858]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12858]
variable      check0 equal ${check}
variable      check0 equal 15804
variable      b equal ${check}+1
variable      b equal 15804+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 22.2236147275548 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 22.2236147275548 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002798 secs
variable      check1 equal ${check}
variable      check1 equal 15834
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12858 $b
create_bonds  single/bond 2 12858 15805
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0040541 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12070
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12070]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12070 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12070                         
62 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 62
print         "j = $(v_j)"
j = 62
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12070]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12070]
variable      check0 equal ${check}
variable      check0 equal 15834
variable      b equal ${check}+1
variable      b equal 15834+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 9.5244063118092 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 9.5244063118092 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002936 secs
variable      check1 equal ${check}
variable      check1 equal 15864
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12070 $b
create_bonds  single/bond 2 12070 15835
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0042316 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10477
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10477]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11474
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11474]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 11474 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 11474                         
63 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 63
print         "j = $(v_j)"
j = 63
variable      x0 equal x[${randatomj}]
variable      x0 equal x[11474]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[11474]
variable      check0 equal ${check}
variable      check0 equal 15864
variable      b equal ${check}+1
variable      b equal 15864+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 0 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 0 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002885 secs
variable      check1 equal ${check}
variable      check1 equal 15894
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 11474 $b
create_bonds  single/bond 2 11474 15865
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0035021 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13829
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13829]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13829 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13829                         
64 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 64
print         "j = $(v_j)"
j = 64
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13829]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13829]
variable      check0 equal ${check}
variable      check0 equal 15894
variable      b equal ${check}+1
variable      b equal 15894+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 30.1606199873958 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 30.1606199873958 37.3039247212527 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 30.1606199873958 37.3039247212527 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0003307 secs
variable      check1 equal ${check}
variable      check1 equal 15924
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13829 $b
create_bonds  single/bond 2 13829 15895
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0028057 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12349
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12349]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12349 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12349                         
65 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 65
print         "j = $(v_j)"
j = 65
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12349]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12349]
variable      check0 equal ${check}
variable      check0 equal 15924
variable      b equal ${check}+1
variable      b equal 15924+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 15.0803099936979 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 15.0803099936979 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000286 secs
variable      check1 equal ${check}
variable      check1 equal 15954
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12349 $b
create_bonds  single/bond 2 12349 15925
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0028856 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12084
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12084]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11228
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11228]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12284
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12284]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10708
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10708]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12022
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12022]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12022 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12022                         
66 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 66
print         "j = $(v_j)"
j = 66
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12022]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12022]
variable      check0 equal ${check}
variable      check0 equal 15954
variable      b equal ${check}+1
variable      b equal 15954+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 9.5244063118092 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 9.5244063118092 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002982 secs
variable      check1 equal ${check}
variable      check1 equal 15984
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12022 $b
create_bonds  single/bond 2 12022 15955
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0030583 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11608
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11608]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9517
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9517]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10389
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10389]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13730
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13730]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13730 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13730                         
67 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 67
print         "j = $(v_j)"
j = 67
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13730]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13730]
variable      check0 equal ${check}
variable      check0 equal 15984
variable      b equal ${check}+1
variable      b equal 15984+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 32.5417215653481 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 32.5417215653481 34.9228231433004 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 32.5417215653481 34.9228231433004 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002582 secs
variable      check1 equal ${check}
variable      check1 equal 16014
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13730 $b
create_bonds  single/bond 2 13730 15985
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0042658 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13644
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13644]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13644 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13644                         
68 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 68
print         "j = $(v_j)"
j = 68
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13644]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13644]
variable      check0 equal ${check}
variable      check0 equal 16014
variable      b equal ${check}+1
variable      b equal 16014+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 38.8913257732209 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 38.8913257732209 33.3354220913322 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 38.8913257732209 33.3354220913322 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002784 secs
variable      check1 equal ${check}
variable      check1 equal 16044
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13644 $b
create_bonds  single/bond 2 13644 16015
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0029 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9740
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9740]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11830
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11830]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 11830 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 11830                         
69 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 69
print         "j = $(v_j)"
j = 69
variable      x0 equal x[${randatomj}]
variable      x0 equal x[11830]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[11830]
variable      check0 equal ${check}
variable      check0 equal 16044
variable      b equal ${check}+1
variable      b equal 16044+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 6.3496042078728 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 6.3496042078728 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002789 secs
variable      check1 equal ${check}
variable      check1 equal 16074
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 11830 $b
create_bonds  single/bond 2 11830 16045
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0047442 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11639
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11639]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 11639 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 11639                         
70 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 70
print         "j = $(v_j)"
j = 70
variable      x0 equal x[${randatomj}]
variable      x0 equal x[11639]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[11639]
variable      check0 equal ${check}
variable      check0 equal 16074
variable      b equal ${check}+1
variable      b equal 16074+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 3.9685026299205 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 3.9685026299205 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002541 secs
variable      check1 equal ${check}
variable      check1 equal 16104
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 11639 $b
create_bonds  single/bond 2 11639 16075
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0056011 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11209
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11209]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13977
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13977]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13977 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13977                         
71 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 71
print         "j = $(v_j)"
j = 71
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13977]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13977]
variable      check0 equal ${check}
variable      check0 equal 16104
variable      b equal ${check}+1
variable      b equal 16104+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 39.685026299205 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 39.685026299205 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002816 secs
variable      check1 equal ${check}
variable      check1 equal 16134
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13977 $b
create_bonds  single/bond 2 13977 16105
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.002878 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13931
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13931]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13931 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13931                         
72 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 72
print         "j = $(v_j)"
j = 72
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13931]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13931]
variable      check0 equal ${check}
variable      check0 equal 16134
variable      b equal ${check}+1
variable      b equal 16134+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 30.1606199873958 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 30.1606199873958 38.8913257732209 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 30.1606199873958 38.8913257732209 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002495 secs
variable      check1 equal ${check}
variable      check1 equal 16164
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13931 $b
create_bonds  single/bond 2 13931 16135
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0042147 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10602
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10602]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9677
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9677]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12232
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12232]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13490
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13490]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13490 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13490                         
72 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 72
print         "j = $(v_j)"
j = 73
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13490]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13490]
variable      check0 equal ${check}
variable      check0 equal 16164
variable      b equal ${check}+1
variable      b equal 16164+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13132
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13132]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10264
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10264]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12156
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12156]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12156 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12156                         
73 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 73
print         "j = $(v_j)"
j = 73
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12156]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12156]
variable      check0 equal ${check}
variable      check0 equal 16164
variable      b equal ${check}+1
variable      b equal 16164+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 11.1118073637774 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 11.1118073637774 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002579 secs
variable      check1 equal ${check}
variable      check1 equal 16194
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12156 $b
create_bonds  single/bond 2 12156 16165
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0027095 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13678
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13678]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13678 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13678                         
74 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 74
print         "j = $(v_j)"
j = 74
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13678]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13678]
variable      check0 equal ${check}
variable      check0 equal 16194
variable      b equal ${check}+1
variable      b equal 16194+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 34.9228231433004 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 34.9228231433004 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0003282 secs
variable      check1 equal ${check}
variable      check1 equal 16224
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13678 $b
create_bonds  single/bond 2 13678 16195
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0033605 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11330
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11330]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10142
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10142]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13078
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13078]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13078 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13078                         
75 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 75
print         "j = $(v_j)"
j = 75
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13078]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13078]
variable      check0 equal ${check}
variable      check0 equal 16224
variable      b equal ${check}+1
variable      b equal 16224+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 25.3984168314912 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 25.3984168314912 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0003241 secs
variable      check1 equal ${check}
variable      check1 equal 16254
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13078 $b
create_bonds  single/bond 2 13078 16225
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0039474 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13734
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13734]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13734 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13734                         
76 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 76
print         "j = $(v_j)"
j = 76
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13734]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13734]
variable      check0 equal ${check}
variable      check0 equal 16254
variable      b equal ${check}+1
variable      b equal 16254+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 34.1291226173163 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 34.1291226173163 34.9228231433004 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 34.1291226173163 34.9228231433004 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0003639 secs
variable      check1 equal ${check}
variable      check1 equal 16284
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13734 $b
create_bonds  single/bond 2 13734 16255
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0027945 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13060
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13060]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11184
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11184]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11316
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11316]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12025
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12025]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 8974
variable      randzj equal z[${randatomj}]
variable      randzj equal z[8974]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10129
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10129]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13018
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13018]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11452
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11452]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12401
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12401]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12401 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12401                         
77 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 77
print         "j = $(v_j)"
j = 77
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12401]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12401]
variable      check0 equal ${check}
variable      check0 equal 16284
variable      b equal ${check}+1
variable      b equal 16284+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 30.1606199873958 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 30.1606199873958 15.0803099936979 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 30.1606199873958 15.0803099936979 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0003084 secs
variable      check1 equal ${check}
variable      check1 equal 16314
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12401 $b
create_bonds  single/bond 2 12401 16285
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0050477 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11766
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11766]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13758
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13758]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9253
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9253]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 8873
variable      randzj equal z[${randatomj}]
variable      randzj equal z[8873]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11305
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11305]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11692
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11692]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10722
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10722]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11881
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11881]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9616
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9616]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13312
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13312]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13097
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13097]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9567
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9567]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11117
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11117]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9765
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9765]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13983
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13983]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13983 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13983                         
78 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 78
print         "j = $(v_j)"
j = 78
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13983]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13983]
variable      check0 equal ${check}
variable      check0 equal 16314
variable      b equal ${check}+1
variable      b equal 16314+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 39.685026299205 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 39.685026299205 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002595 secs
variable      check1 equal ${check}
variable      check1 equal 16344
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13983 $b
create_bonds  single/bond 2 13983 16315
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0037076 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11906
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11906]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 11906 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 11906                         
79 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 79
print         "j = $(v_j)"
j = 79
variable      x0 equal x[${randatomj}]
variable      x0 equal x[11906]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[11906]
variable      check0 equal ${check}
variable      check0 equal 16344
variable      b equal ${check}+1
variable      b equal 16344+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 37.3039247212527 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 37.3039247212527 6.3496042078728 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 37.3039247212527 6.3496042078728 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002617 secs
variable      check1 equal ${check}
variable      check1 equal 16374
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 11906 $b
create_bonds  single/bond 2 11906 16345
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0029767 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11188
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11188]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12797
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12797]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12797 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12797                         
80 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 80
print         "j = $(v_j)"
j = 80
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12797]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12797]
variable      check0 equal ${check}
variable      check0 equal 16374
variable      b equal ${check}+1
variable      b equal 16374+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 25.3984168314912 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 25.3984168314912 21.4299142015707 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 25.3984168314912 21.4299142015707 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0020758 secs
variable      check1 equal ${check}
variable      check1 equal 16404
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12797 $b
create_bonds  single/bond 2 12797 16375
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0042048 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13250
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13250]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13250 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13250                         
81 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 81
print         "j = $(v_j)"
j = 81
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13250]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13250]
variable      check0 equal ${check}
variable      check0 equal 16404
variable      b equal ${check}+1
variable      b equal 16404+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 28.5732189354276 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 28.5732189354276 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002544 secs
variable      check1 equal ${check}
variable      check1 equal 16434
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13250 $b
create_bonds  single/bond 2 13250 16405
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0041938 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9207
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9207]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12550
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12550]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13661
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13661]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10331
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10331]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12965
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12965]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12965 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12965                         
82 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 82
print         "j = $(v_j)"
j = 82
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12965]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12965]
variable      check0 equal ${check}
variable      check0 equal 16434
variable      b equal ${check}+1
variable      b equal 16434+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 24.6047163055071 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 24.6047163055071 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002611 secs
variable      check1 equal ${check}
variable      check1 equal 16464
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12965 $b
create_bonds  single/bond 2 12965 16435
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0030945 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11346
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11346]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10659
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10659]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11261
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11261]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11621
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11621]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10319
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10319]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10074
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10074]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12220
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12220]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9033
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9033]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11756
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11756]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 11756 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 11756                         
83 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 83
print         "j = $(v_j)"
j = 83
variable      x0 equal x[${randatomj}]
variable      x0 equal x[11756]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[11756]
variable      check0 equal ${check}
variable      check0 equal 16464
variable      b equal ${check}+1
variable      b equal 16464+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 4.7622031559046 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 4.7622031559046 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002959 secs
variable      check1 equal ${check}
variable      check1 equal 16494
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 11756 $b
create_bonds  single/bond 2 11756 16465
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0044008 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13798
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13798]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10277
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10277]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10936
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10936]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13115
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13115]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13115 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13115                         
83 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 83
print         "j = $(v_j)"
j = 84
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13115]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13115]
variable      check0 equal ${check}
variable      check0 equal 16494
variable      b equal ${check}+1
variable      b equal 16494+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11174
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11174]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12241
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12241]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10844
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10844]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12856
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12856]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10005
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10005]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12030
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12030]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12030 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12030                         
84 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 84
print         "j = $(v_j)"
j = 84
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12030]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12030]
variable      check0 equal ${check}
variable      check0 equal 16494
variable      b equal ${check}+1
variable      b equal 16494+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 9.5244063118092 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 9.5244063118092 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002772 secs
variable      check1 equal ${check}
variable      check1 equal 16524
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12030 $b
create_bonds  single/bond 2 12030 16495
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0041858 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10448
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10448]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12102
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12102]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12102 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12102                         
85 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 85
print         "j = $(v_j)"
j = 85
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12102]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12102]
variable      check0 equal ${check}
variable      check0 equal 16524
variable      b equal ${check}+1
variable      b equal 16524+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 34.1291226173163 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 34.1291226173163 9.5244063118092 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 34.1291226173163 9.5244063118092 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002673 secs
variable      check1 equal ${check}
variable      check1 equal 16554
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12102 $b
create_bonds  single/bond 2 12102 16525
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0045346 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12115
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12115]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12115 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12115                         
86 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 86
print         "j = $(v_j)"
j = 86
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12115]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12115]
variable      check0 equal ${check}
variable      check0 equal 16554
variable      b equal ${check}+1
variable      b equal 16554+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 38.0976252472368 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 38.0976252472368 10.3181068377933 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 38.0976252472368 10.3181068377933 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0003062 secs
variable      check1 equal ${check}
variable      check1 equal 16584
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12115 $b
create_bonds  single/bond 2 12115 16555
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.005549 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10410
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10410]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11695
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11695]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 11695 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 11695                         
87 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 87
print         "j = $(v_j)"
j = 87
variable      x0 equal x[${randatomj}]
variable      x0 equal x[11695]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[11695]
variable      check0 equal ${check}
variable      check0 equal 16584
variable      b equal ${check}+1
variable      b equal 16584+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 33.3354220913322 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 33.3354220913322 3.9685026299205 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 33.3354220913322 3.9685026299205 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002624 secs
variable      check1 equal ${check}
variable      check1 equal 16614
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 11695 $b
create_bonds  single/bond 2 11695 16585
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.003707 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12714
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12714]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12714 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12714                         
88 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 88
print         "j = $(v_j)"
j = 88
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12714]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12714]
variable      check0 equal ${check}
variable      check0 equal 16614
variable      b equal ${check}+1
variable      b equal 16614+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 34.1291226173163 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 34.1291226173163 19.0488126236184 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 34.1291226173163 19.0488126236184 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002968 secs
variable      check1 equal ${check}
variable      check1 equal 16644
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12714 $b
create_bonds  single/bond 2 12714 16615
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0050488 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10938
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10938]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10559
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10559]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10338
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10338]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10683
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10683]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10633
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10633]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9762
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9762]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9475
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9475]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12824
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12824]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12824 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12824                         
89 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 89
print         "j = $(v_j)"
j = 89
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12824]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12824]
variable      check0 equal ${check}
variable      check0 equal 16644
variable      b equal ${check}+1
variable      b equal 16644+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 37.3039247212527 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 37.3039247212527 20.6362136755866 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 37.3039247212527 20.6362136755866 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002795 secs
variable      check1 equal ${check}
variable      check1 equal 16674
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12824 $b
create_bonds  single/bond 2 12824 16645
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.003981 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12611
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12611]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12824
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12824]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12824 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12824                         
89 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 89
print         "j = $(v_j)"
j = 90
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12824]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12824]
variable      check0 equal ${check}
variable      check0 equal 16674
variable      b equal ${check}+1
variable      b equal 16674+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13116
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13116]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9662
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9662]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12481
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12481]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10953
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10953]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9605
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9605]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11278
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11278]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10513
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10513]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13956
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13956]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10318
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10318]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10172
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10172]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10279
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10279]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10691
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10691]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 8884
variable      randzj equal z[${randatomj}]
variable      randzj equal z[8884]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12464
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12464]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12394
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12394]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9984
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9984]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10286
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10286]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10913
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10913]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10706
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10706]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10420
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10420]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10555
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10555]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11285
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11285]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9771
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9771]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10610
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10610]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9682
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9682]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9929
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9929]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10769
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10769]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10926
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10926]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9624
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9624]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11611
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11611]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 11611 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 11611                         
90 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 90
print         "j = $(v_j)"
j = 90
variable      x0 equal x[${randatomj}]
variable      x0 equal x[11611]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[11611]
variable      check0 equal ${check}
variable      check0 equal 16674
variable      b equal ${check}+1
variable      b equal 16674+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 3.9685026299205 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 3.9685026299205 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000288 secs
variable      check1 equal ${check}
variable      check1 equal 16704
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 11611 $b
create_bonds  single/bond 2 11611 16675
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0037699 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13961
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13961]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13961 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13961                         
91 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 91
print         "j = $(v_j)"
j = 91
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13961]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13961]
variable      check0 equal ${check}
variable      check0 equal 16704
variable      b equal ${check}+1
variable      b equal 16704+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 39.685026299205 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 39.685026299205 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002969 secs
variable      check1 equal ${check}
variable      check1 equal 16734
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13961 $b
create_bonds  single/bond 2 13961 16705
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0033352 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11477
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11477]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9146
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9146]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13378
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13378]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9956
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9956]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12400
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12400]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12400 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12400                         
92 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 92
print         "j = $(v_j)"
j = 92
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12400]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12400]
variable      check0 equal ${check}
variable      check0 equal 16734
variable      b equal ${check}+1
variable      b equal 16734+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 30.9543205133799 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 30.9543205133799 14.2866094677138 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 30.9543205133799 14.2866094677138 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002972 secs
variable      check1 equal ${check}
variable      check1 equal 16764
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12400 $b
create_bonds  single/bond 2 12400 16735
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0034428 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9532
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9532]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9001
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9001]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9066
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9066]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 8994
variable      randzj equal z[${randatomj}]
variable      randzj equal z[8994]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13823
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13823]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9051
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9051]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 14002
variable      randzj equal z[${randatomj}]
variable      randzj equal z[14002]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11453
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11453]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12446
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12446]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12446 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12446                         
93 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 93
print         "j = $(v_j)"
j = 93
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12446]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12446]
variable      check0 equal ${check}
variable      check0 equal 16764
variable      b equal ${check}+1
variable      b equal 16764+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 15.874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 15.874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002745 secs
variable      check1 equal ${check}
variable      check1 equal 16794
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12446 $b
create_bonds  single/bond 2 12446 16765
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0046651 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12582
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12582]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9111
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9111]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10047
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10047]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9415
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9415]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13158
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13158]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11253
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11253]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12480
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12480]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 8954
variable      randzj equal z[${randatomj}]
variable      randzj equal z[8954]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9115
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9115]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10041
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10041]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10335
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10335]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12322
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12322]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11580
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11580]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 11580 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 11580                         
94 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 94
print         "j = $(v_j)"
j = 94
variable      x0 equal x[${randatomj}]
variable      x0 equal x[11580]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[11580]
variable      check0 equal ${check}
variable      check0 equal 16794
variable      b equal ${check}+1
variable      b equal 16794+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 29.3669194614117 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 29.3669194614117 1.5874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 29.3669194614117 1.5874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0004539 secs
variable      check1 equal ${check}
variable      check1 equal 16824
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 11580 $b
create_bonds  single/bond 2 11580 16795
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0035984 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11847
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11847]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 11847 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 11847                         
94 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 94
print         "j = $(v_j)"
j = 95
variable      x0 equal x[${randatomj}]
variable      x0 equal x[11847]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[11847]
variable      check0 equal ${check}
variable      check0 equal 16824
variable      b equal ${check}+1
variable      b equal 16824+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9290
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9290]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13378
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13378]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9283
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9283]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13253
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13253]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12589
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12589]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12589 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12589                         
95 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 95
print         "j = $(v_j)"
j = 95
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12589]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12589]
variable      check0 equal ${check}
variable      check0 equal 16824
variable      b equal ${check}+1
variable      b equal 16824+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 18.2551120976343 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 18.2551120976343 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002618 secs
variable      check1 equal ${check}
variable      check1 equal 16854
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12589 $b
create_bonds  single/bond 2 12589 16825
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0029327 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12846
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12846]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12846 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12846                         
96 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 96
print         "j = $(v_j)"
j = 96
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12846]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12846]
variable      check0 equal ${check}
variable      check0 equal 16854
variable      b equal ${check}+1
variable      b equal 16854+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 22.2236147275548 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 22.2236147275548 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0004344 secs
variable      check1 equal ${check}
variable      check1 equal 16884
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12846 $b
create_bonds  single/bond 2 12846 16855
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0033716 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12709
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12709]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9549
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9549]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9897
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9897]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11972
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11972]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 11972 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 11972                         
96 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 96
print         "j = $(v_j)"
j = 97
variable      x0 equal x[${randatomj}]
variable      x0 equal x[11972]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[11972]
variable      check0 equal ${check}
variable      check0 equal 16884
variable      b equal ${check}+1
variable      b equal 16884+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 8824
variable      randzj equal z[${randatomj}]
variable      randzj equal z[8824]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9250
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9250]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13599
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13599]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12524
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12524]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10727
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10727]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9648
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9648]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10331
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10331]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11119
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11119]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11102
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11102]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10150
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10150]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13143
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13143]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11402
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11402]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12826
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12826]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13111
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13111]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13111 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13111                         
97 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 97
print         "j = $(v_j)"
j = 97
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13111]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13111]
variable      check0 equal ${check}
variable      check0 equal 16884
variable      b equal ${check}+1
variable      b equal 16884+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 26.1921173574753 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 28.5732189354276 26.1921173574753 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0003171 secs
variable      check1 equal ${check}
variable      check1 equal 16914
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13111 $b
create_bonds  single/bond 2 13111 16885
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0029159 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12200
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12200]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12200 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12200                         
98 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 98
print         "j = $(v_j)"
j = 98
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12200]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12200]
variable      check0 equal ${check}
variable      check0 equal 16914
variable      b equal ${check}+1
variable      b equal 16914+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 32.5417215653481 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 32.5417215653481 11.1118073637774 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 32.5417215653481 11.1118073637774 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0003002 secs
variable      check1 equal ${check}
variable      check1 equal 16944
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12200 $b
create_bonds  single/bond 2 12200 16915
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0031597 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11641
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11641]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13623
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13623]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11652
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11652]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11324
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11324]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13025
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13025]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13025 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13025                         
99 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 99
print         "j = $(v_j)"
j = 99
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13025]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13025]
variable      check0 equal ${check}
variable      check0 equal 16944
variable      b equal ${check}+1
variable      b equal 16944+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 34.9228231433004 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 34.9228231433004 24.6047163055071 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 34.9228231433004 24.6047163055071 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002716 secs
variable      check1 equal ${check}
variable      check1 equal 16974
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13025 $b
create_bonds  single/bond 2 13025 16945
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.00317 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13189
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13189]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13189 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13189                         
100 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 100
print         "j = $(v_j)"
j = 100
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13189]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13189]
variable      check0 equal ${check}
variable      check0 equal 16974
variable      b equal ${check}+1
variable      b equal 16974+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 27.7795184094435 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 27.7795184094435 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0003001 secs
variable      check1 equal ${check}
variable      check1 equal 17004
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13189 $b
create_bonds  single/bond 2 13189 16975
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0044798 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11447
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11447]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 11447 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 11447                         
101 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 101
print         "j = $(v_j)"
j = 101
variable      x0 equal x[${randatomj}]
variable      x0 equal x[11447]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[11447]
variable      check0 equal ${check}
variable      check0 equal 17004
variable      b equal ${check}+1
variable      b equal 17004+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 0.7937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 0.7937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002855 secs
variable      check1 equal ${check}
variable      check1 equal 17034
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 11447 $b
create_bonds  single/bond 2 11447 17005
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0043772 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13504
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13504]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12362
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12362]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10361
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10361]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9773
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9773]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13166
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13166]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11213
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11213]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13622
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13622]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12678
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12678]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12678 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12678                         
102 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 102
print         "j = $(v_j)"
j = 102
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12678]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12678]
variable      check0 equal ${check}
variable      check0 equal 17034
variable      b equal ${check}+1
variable      b equal 17034+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 19.0488126236184 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 19.0488126236184 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002814 secs
variable      check1 equal ${check}
variable      check1 equal 17064
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12678 $b
create_bonds  single/bond 2 12678 17035
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0029355 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10627
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10627]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11124
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11124]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10075
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10075]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12067
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12067]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12067 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12067                         
103 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 103
print         "j = $(v_j)"
j = 103
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12067]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12067]
variable      check0 equal ${check}
variable      check0 equal 17064
variable      b equal ${check}+1
variable      b equal 17064+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 10.3181068377933 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 10.3181068377933 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0003343 secs
variable      check1 equal ${check}
variable      check1 equal 17094
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12067 $b
create_bonds  single/bond 2 12067 17065
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0036397 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13250
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13250]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13250 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13250                         
103 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 103
print         "j = $(v_j)"
j = 104
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13250]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13250]
variable      check0 equal ${check}
variable      check0 equal 17094
variable      b equal ${check}+1
variable      b equal 17094+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9514
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9514]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9325
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9325]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13349
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13349]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13349 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13349                         
104 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 104
print         "j = $(v_j)"
j = 104
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13349]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13349]
variable      check0 equal ${check}
variable      check0 equal 17094
variable      b equal ${check}+1
variable      b equal 17094+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 30.9543205133799 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 30.9543205133799 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0003564 secs
variable      check1 equal ${check}
variable      check1 equal 17124
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13349 $b
create_bonds  single/bond 2 13349 17095
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0050355 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11707
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11707]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 11707 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 11707                         
105 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 105
print         "j = $(v_j)"
j = 105
variable      x0 equal x[${randatomj}]
variable      x0 equal x[11707]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[11707]
variable      check0 equal ${check}
variable      check0 equal 17124
variable      b equal ${check}+1
variable      b equal 17124+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 38.0976252472368 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 38.0976252472368 3.9685026299205 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 38.0976252472368 3.9685026299205 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0003154 secs
variable      check1 equal ${check}
variable      check1 equal 17154
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 11707 $b
create_bonds  single/bond 2 11707 17125
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0040282 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13808
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13808]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13808 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13808                         
106 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 106
print         "j = $(v_j)"
j = 106
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13808]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13808]
variable      check0 equal ${check}
variable      check0 equal 17154
variable      b equal ${check}+1
variable      b equal 17154+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 36.5102241952686 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 36.5102241952686 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0003254 secs
variable      check1 equal ${check}
variable      check1 equal 17184
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13808 $b
create_bonds  single/bond 2 13808 17155
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.003355 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13587
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13587]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9153
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9153]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12409
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12409]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12409 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12409                         
107 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 107
print         "j = $(v_j)"
j = 107
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12409]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12409]
variable      check0 equal ${check}
variable      check0 equal 17184
variable      b equal ${check}+1
variable      b equal 17184+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 33.3354220913322 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 33.3354220913322 15.0803099936979 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 33.3354220913322 15.0803099936979 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002907 secs
variable      check1 equal ${check}
variable      check1 equal 17214
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12409 $b
create_bonds  single/bond 2 12409 17185
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0044194 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9379
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9379]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13795
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13795]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10170
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10170]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12052
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12052]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9847
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9847]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12914
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12914]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12914 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12914                         
108 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 108
print         "j = $(v_j)"
j = 108
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12914]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12914]
variable      check0 equal ${check}
variable      check0 equal 17214
variable      b equal ${check}+1
variable      b equal 17214+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 32.5417215653481 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 32.5417215653481 22.2236147275548 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 32.5417215653481 22.2236147275548 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0003273 secs
variable      check1 equal ${check}
variable      check1 equal 17244
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12914 $b
create_bonds  single/bond 2 12914 17215
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.005097 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 8833
variable      randzj equal z[${randatomj}]
variable      randzj equal z[8833]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11664
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11664]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10003
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10003]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9747
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9747]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12203
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12203]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11957
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11957]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 11957 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 11957                         
109 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 109
print         "j = $(v_j)"
j = 109
variable      x0 equal x[${randatomj}]
variable      x0 equal x[11957]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[11957]
variable      check0 equal ${check}
variable      check0 equal 17244
variable      b equal ${check}+1
variable      b equal 17244+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 8.7307057858251 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 8.7307057858251 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002784 secs
variable      check1 equal ${check}
variable      check1 equal 17274
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 11957 $b
create_bonds  single/bond 2 11957 17245
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0042 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12431
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12431]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12431 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12431                         
110 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 110
print         "j = $(v_j)"
j = 110
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12431]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12431]
variable      check0 equal ${check}
variable      check0 equal 17274
variable      b equal ${check}+1
variable      b equal 17274+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 16.6677110456661 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 16.6677110456661 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002784 secs
variable      check1 equal ${check}
variable      check1 equal 17304
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12431 $b
create_bonds  single/bond 2 12431 17275
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0029502 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9442
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9442]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10601
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10601]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10710
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10710]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12408
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12408]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12408 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12408                         
111 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 111
print         "j = $(v_j)"
j = 111
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12408]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12408]
variable      check0 equal ${check}
variable      check0 equal 17304
variable      b equal ${check}+1
variable      b equal 17304+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 34.1291226173163 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 34.1291226173163 14.2866094677138 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 34.1291226173163 14.2866094677138 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0003526 secs
variable      check1 equal ${check}
variable      check1 equal 17334
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12408 $b
create_bonds  single/bond 2 12408 17305
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0035517 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9201
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9201]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13398
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13398]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13293
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13293]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9758
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9758]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13968
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13968]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11658
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11658]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 11658 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 11658                         
112 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 112
print         "j = $(v_j)"
j = 112
variable      x0 equal x[${randatomj}]
variable      x0 equal x[11658]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[11658]
variable      check0 equal ${check}
variable      check0 equal 17334
variable      b equal ${check}+1
variable      b equal 17334+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 3.1748021039364 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 3.1748021039364 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002991 secs
variable      check1 equal ${check}
variable      check1 equal 17364
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 11658 $b
create_bonds  single/bond 2 11658 17335
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0034042 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12104
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12104]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13222
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13222]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13756
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13756]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13756 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13756                         
113 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 113
print         "j = $(v_j)"
j = 113
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13756]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13756]
variable      check0 equal ${check}
variable      check0 equal 17364
variable      b equal ${check}+1
variable      b equal 17364+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 36.5102241952686 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 36.5102241952686 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000281 secs
variable      check1 equal ${check}
variable      check1 equal 17394
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13756 $b
create_bonds  single/bond 2 13756 17365
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.003743 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11547
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11547]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9645
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9645]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11111
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11111]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12376
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12376]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12376 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12376                         
114 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 114
print         "j = $(v_j)"
j = 114
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12376]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12376]
variable      check0 equal ${check}
variable      check0 equal 17394
variable      b equal ${check}+1
variable      b equal 17394+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 14.2866094677138 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 14.2866094677138 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0003083 secs
variable      check1 equal ${check}
variable      check1 equal 17424
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12376 $b
create_bonds  single/bond 2 12376 17395
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0028652 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9904
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9904]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13241
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13241]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13294
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13294]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13294 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13294                         
115 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 115
print         "j = $(v_j)"
j = 115
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13294]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13294]
variable      check0 equal ${check}
variable      check0 equal 17424
variable      b equal ${check}+1
variable      b equal 17424+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 28.5732189354276 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 28.5732189354276 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002991 secs
variable      check1 equal ${check}
variable      check1 equal 17454
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13294 $b
create_bonds  single/bond 2 13294 17425
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0045197 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12864
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12864]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9362
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9362]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13455
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13455]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 13455 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 13455                         
116 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 116
print         "j = $(v_j)"
j = 116
variable      x0 equal x[${randatomj}]
variable      x0 equal x[13455]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[13455]
variable      check0 equal ${check}
variable      check0 equal 17454
variable      b equal ${check}+1
variable      b equal 17454+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 32.5417215653481 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 32.5417215653481 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0003076 secs
variable      check1 equal ${check}
variable      check1 equal 17484
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 13455 $b
create_bonds  single/bond 2 13455 17455
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0035083 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9972
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9972]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11025
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11025]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10491
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10491]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12669
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12669]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12506
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12506]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12506 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12506                         
117 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 117
print         "j = $(v_j)"
j = 117
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12506]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12506]
variable      check0 equal ${check}
variable      check0 equal 17484
variable      b equal ${check}+1
variable      b equal 17484+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 32.5417215653481 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 32.5417215653481 15.874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 32.5417215653481 15.874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000364 secs
variable      check1 equal ${check}
variable      check1 equal 17514
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12506 $b
create_bonds  single/bond 2 12506 17485
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0030688 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13325
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13325]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10011
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10011]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10195
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10195]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10258
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10258]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11043
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11043]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12311
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12311]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12311 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12311                         
117 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 117
print         "j = $(v_j)"
j = 118
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12311]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12311]
variable      check0 equal ${check}
variable      check0 equal 17514
variable      b equal ${check}+1
variable      b equal 17514+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12293
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12293]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 13893
variable      randzj equal z[${randatomj}]
variable      randzj equal z[13893]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9623
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9623]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9864
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9864]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10082
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10082]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 12910
variable      randzj equal z[${randatomj}]
variable      randzj equal z[12910]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 12910 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 12910                         
118 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 118
print         "j = $(v_j)"
j = 118
variable      x0 equal x[${randatomj}]
variable      x0 equal x[12910]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[12910]
variable      check0 equal ${check}
variable      check0 equal 17514
variable      b equal ${check}+1
variable      b equal 17514+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 30.9543205133799 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 30.9543205133799 22.2236147275548 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 30.9543205133799 22.2236147275548 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0003226 secs
variable      check1 equal ${check}
variable      check1 equal 17544
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 12910 $b
create_bonds  single/bond 2 12910 17515
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0032606 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10489
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10489]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10705
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10705]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10613
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10613]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11688
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11688]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11867
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11867]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 11867 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 11867                         
119 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 119
print         "j = $(v_j)"
j = 119
variable      x0 equal x[${randatomj}]
variable      x0 equal x[11867]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[11867]
variable      check0 equal ${check}
variable      check0 equal 17544
variable      b equal ${check}+1
variable      b equal 17544+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 7.1433047338569 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 7.1433047338569 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002989 secs
variable      check1 equal ${check}
variable      check1 equal 17574
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 11867 $b
create_bonds  single/bond 2 11867 17545
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0050655 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11909
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11909]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 10211
variable      randzj equal z[${randatomj}]
variable      randzj equal z[10211]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 9968
variable      randzj equal z[${randatomj}]
variable      randzj equal z[9968]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,14004,$s))
variable      randnj equal round(random(v_ntop0,14004,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 11663
variable      randzj equal z[${randatomj}]
variable      randzj equal z[11663]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 11663 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 11663                         
120 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 120
print         "j = $(v_j)"
j = 120
variable      x0 equal x[${randatomj}]
variable      x0 equal x[11663]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[11663]
variable      check0 equal ${check}
variable      check0 equal 17574
variable      b equal ${check}+1
variable      b equal 17574+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 3.9685026299205 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 3.9685026299205 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0003045 secs
variable      check1 equal ${check}
variable      check1 equal 17604
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 11663 $b
create_bonds  single/bond 2 11663 17575
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0032209 secs
next j
jump MDPBB.in loopj

# Assign the beads to 2 different groups of grafted and non-grafted beads

group         gbeads type 2
240 atoms in group gbeads
group         fbeads type 3
6960 atoms in group fbeads

#--- Create harmonic bonds in the walls ---#
bond_coeff    3 harmonic 800.0 $(1.5874 * sqrt(2)/2)
bond_coeff    3 harmonic 800.0 1.1224613044555256103
create_bonds  many bwall bwall 3 0.5 1.2
Neighbor list info ...
  update every 1 steps, delay 10 steps, check yes
  max neighbors/atom: 4000, page size: 100000
  master list distance cutoff = 11.1225
  ghost atom cutoff = 11.1225
  binsize = 5.56123, bins = 8 8 13
  2 neighbor lists, perpetual/occasional/extra = 1 1 0
  (1) command create_bonds, occasional
      attributes: full, newton on
      pair build: full/bin
      stencil: full/bin/3d
      bin: standard
  (2) pair lj/cut, perpetual
      attributes: half, newton on
      pair build: half/bin/newton
      stencil: half/bin/3d/newton
      bin: standard
Added 25900 bonds, new total = 33100
  12 = max # of 1-2 neighbors
  12 = max # of special neighbors
  special bonds CPU = 0.0076079 secs
create_bonds  many twall twall 3 0.5 1.2
Added 25900 bonds, new total = 59000
  12 = max # of 1-2 neighbors
  12 = max # of special neighbors
  special bonds CPU = 0.0091184 secs

info system


fix           1 twall setforce 0.0 0.0 0.0  # Freeze top wall
fix           2 bwall setforce 0.0 0.0 0.0  # Freeze bottom wall

#dump           1 all image 250 stg0.*.jpg type type zoom 2 view 60 120 bond none none
#dump          2 all atom 50 dump.brush
#dump          3 all custom 100 dump.random.bin id x y z vx vy vz


#--- Minimize the system to obtain the initial structure for the PB bilayer ---#

timestep      0.010
minimize      0.0 1.0e-8 10000 100000
WARNING: Using 'neigh_modify every 1 delay 0 check yes' setting during minimization (src/min.cpp:168)
Neighbor list info ...
  update every 1 steps, delay 0 steps, check yes
  max neighbors/atom: 4000, page size: 100000
  master list distance cutoff = 11.1225
  ghost atom cutoff = 11.1225
  binsize = 5.56123, bins = 8 8 13
  1 neighbor lists, perpetual/occasional/extra = 1 0 0
  (1) pair lj/cut, perpetual
      attributes: half, newton on
      pair build: half/bin/newton
      stencil: half/bin/3d/newton
      bin: standard
WARNING: Inconsistent image flags (src/domain.cpp:784)
Per MPI rank memory allocation (min/avg/max) = 62.85 | 62.85 | 62.85 Mbytes
Step Temp E_pair E_mol TotEng Press 
       0            0    1605.0294    6.0391656    1611.0686    980.91195 
      77            0 -0.062508975    4.4848997    4.4223908   -0.7123511 
Loop time of 3.40225 on 1 procs for 77 steps with 17604 atoms

99.7% CPU use with 1 MPI tasks x 1 OpenMP threads

Minimization stats:
  Stopping criterion = linesearch alpha is zero
  Energy initial, next-to-last, final = 
         1611.06859573      4.42239076641      4.42239076641
  Force two-norm initial, final = 2.60225e+08 155.676
  Force max component initial, final = 6.28602e+07 5.89072
  Final line search alpha, max atom move = 7.86587e-09 4.63356e-08
  Iterations, force evaluations = 77 152

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 3.1788     | 3.1788     | 3.1788     |   0.0 | 93.43
Bond    | 0.15199    | 0.15199    | 0.15199    |   0.0 |  4.47
Neigh   | 0          | 0          | 0          |   0.0 |  0.00
Comm    | 0.020505   | 0.020505   | 0.020505   |   0.0 |  0.60
Output  | 0          | 0          | 0          |   0.0 |  0.00
Modify  | 0.0087121  | 0.0087121  | 0.0087121  |   0.0 |  0.26
Other   |            | 0.04228    |            |       |  1.24

Nlocal:    17604 ave 17604 max 17604 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Nghost:    26356 ave 26356 max 26356 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Neighs:    9.77775e+06 ave 9.77775e+06 max 9.77775e+06 min
Histogram: 1 0 0 0 0 0 0 0 0 0

Total # of neighbors = 9777752
Ave neighs/atom = 555.428
Ave special neighs/atom = 6.70302
Neighbor list builds = 0
Dangerous builds = 0

#--- Shrink the simulation box such that it encloses the system exactly ---#

variable z_f equal bound(all,zmin)
variable z_c equal bound(all,zmax)

change_box all z final ${z_f} $(v_z_c + 0.1) units box
change_box all z final 0 $(v_z_c + 0.1) units box
change_box all z final 0 70.099999999999994316 units box
  orthogonal box = (0 0 0) to (40 40 70.1)

info variables                              # For diagnostics

minimize      0.0 1.0e-8 10000 100000
WARNING: Using 'neigh_modify every 1 delay 0 check yes' setting during minimization (src/min.cpp:168)
WARNING: Inconsistent image flags (src/domain.cpp:784)
Per MPI rank memory allocation (min/avg/max) = 63.23 | 63.23 | 63.23 Mbytes
Step Temp E_pair E_mol TotEng Press 
      77            0 -0.062508975    4.4848997    4.4223908  -0.73165876 
      78            0 -0.062508975    4.4848997    4.4223908  -0.73165876 
Loop time of 0.969699 on 1 procs for 1 steps with 17604 atoms

99.9% CPU use with 1 MPI tasks x 1 OpenMP threads

Minimization stats:
  Stopping criterion = linesearch alpha is zero
  Energy initial, next-to-last, final = 
         4.42239076641      4.42239076641      4.42239076641
  Force two-norm initial, final = 155.676 155.676
  Force max component initial, final = 5.89072 5.89072
  Final line search alpha, max atom move = 8.09472e-09 4.76837e-08
  Iterations, force evaluations = 1 43

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 0.90987    | 0.90987    | 0.90987    |   0.0 | 93.83
Bond    | 0.043467   | 0.043467   | 0.043467   |   0.0 |  4.48
Neigh   | 0          | 0          | 0          |   0.0 |  0.00
Comm    | 0.0061976  | 0.0061976  | 0.0061976  |   0.0 |  0.64
Output  | 0          | 0          | 0          |   0.0 |  0.00
Modify  | 0.002447   | 0.002447   | 0.002447   |   0.0 |  0.25
Other   |            | 0.007712   |            |       |  0.80

Nlocal:    17604 ave 17604 max 17604 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Nghost:    26356 ave 26356 max 26356 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Neighs:    9.85315e+06 ave 9.85315e+06 max 9.85315e+06 min
Histogram: 1 0 0 0 0 0 0 0 0 0

Total # of neighbors = 9853152
Ave neighs/atom = 559.711
Ave special neighs/atom = 6.70302
Neighbor list builds = 0
Dangerous builds = 0

#--- Remove the fixes for the restart file ---#
unfix         1
unfix         2

#--- Write Restart File ---#

write_restart  MDPBB.rst
#write_data     MDPBB.data
print        "Created a Polymer Brush Bilayer with Surface Coverage = $(v_M/(lx*ly))"
Created a Polymer Brush Bilayer with Surface Coverage = 0.074999999999999997224

label          sim

include        ecs.in
# This is an input script that creates a mono disperse polymer brush bilayer
# A coarse grained bead-spring model is used for the polymers which are end
# grafted to the surfaces of 2 opposing FCC walls at random sites.

clear
OMP_NUM_THREADS environment is not set. Defaulting to 1 thread. (src/comm.cpp:88)
  using 1 OpenMP thread(s) per MPI task


#--- Read in the Restart file ---#

read_restart    MDPBB.rst
  restoring atom style bond from restart
  orthogonal box = (0 0 0) to (40 40 70.1)
  1 by 1 by 1 MPI processor grid
  restoring pair style lj/cut from restart
  restoring bond style hybrid from restart
  17604 atoms
  59000 bonds
  12 = max # of 1-2 neighbors
  12 = max # of special neighbors
  special bonds CPU = 0.0075372 secs
  read_restart CPU = 0.0168888 secs
reset_timestep  0

#--- Redefine the bond coeffs ---#

bond_coeff    1 fene 30.0 1.5 0.0 0.0      # Values obtained from literature [Grest, Galushcko]
bond_coeff    2 fene 30.0 1.5 0.0 0.0       # This is the grafting bond between the polymer and the wall atom
bond_coeff    3 harmonic 800.0 $(1.5874 * sqrt(2)/2)
bond_coeff    3 harmonic 800.0 1.1224613044555256103

neigh_modify   every 1 delay 0 check yes

#--- Define variables ---#

# for dimensional values: eps = 4.14e-21 J at T = 300K and sigma = 0.5nm

#--- Moved to main.in ---#
#variable       Temp       equal ${Tstr} #[Grest96]
#variable       Tstep     equal 0.005                       # Timestep in Tau (default = 0.005)
#variable       Nequil    equal 10000                       # Number of timesteps to equilibrate
#variable       Ncomp     equal 200000                      # Number of timesteps to compress - until no more occilation of walls
#variable       Nshear    equal 1000000                     # Number of timesteps to shear - use approx 4ns for 10m/s
#variable       Nthermo   equal 1000                        # Number of timesteps between thermo data prints
#variable       Ndump_e   equal 10000
#variable       Ndump_c   equal 10000                       # Number of timesteps per dump file (compression)
#variable       Ndump_s   equal 10000                       # Number of timesteps per dump file (shear)
#variable       Wall_v    equal 0.0002                      # Wall velocity (A/fs) - equal to 10 m/s
#variable       Pcomp     equal 1
variable        Pcomp2    equal ${Pcomp}
variable        Pcomp2    equal 1
variable        Wall_v2   equal ${Wall_v}
variable        Wall_v2   equal 1e-10

# For Equilibration - density profiles (10 for entire run)
variable       Nfreqe   equal ${Nequil}/10                  # Calculate bin averages every this many timesteps
variable       Nfreqe   equal 300000/10                  
variable       Neverye  equal 100                           # Use input values every this many timesteps
variable       Nrepeate equal ${Nfreqe}/${Neverye}          #s Number of times to use input values
variable       Nrepeate equal 30000/${Neverye}          
variable       Nrepeate equal 30000/100          


# For compression - density profiles (10 for entire run)
variable       Nfreqc   equal ${Ncomp}/10                  # Calculate bin averages every this many timesteps
variable       Nfreqc   equal 700000/10                  
variable       Neveryc  equal 100                          # Use input values every this many timesteps
variable       Nrepeatc equal ${Nfreqc}/${Neveryc}         # Number of times to use input values
variable       Nrepeatc equal 70000/${Neveryc}         
variable       Nrepeatc equal 70000/100         

# For Shear - density profiles (10 for entire run)
variable       Nfreqs   equal ${Nshear}/10                  # Calculate bin averages every this many timesteps
variable       Nfreqs   equal 4000000/10                  
variable       Neverys  equal 100                          # Use input values every this many timesteps
variable       Nrepeats equal ${Nfreqs}/${Neverys}         # Number of times to use input values
variable       Nrepeats equal 400000/${Neverys}         
variable       Nrepeats equal 400000/100         


variable       binres   equal  0.001                       # Giving 1000 data points across the sim. box


variable       bwzmin  equal bound(bwall,zmin)
variable       bwzmax  equal bound(bwall,zmax)
variable       twzmin  equal bound(twall,zmin)
variable       twzmax  equal bound(twall,zmax)
variable       c       equal count(gbeads)
variable       surfcov equal $(v_M/(lx*ly))
variable       surfcov equal 0.074999999999999997224
variable       D       equal v_twzmin-v_bwzmax
variable       Dout    equal v_twzmax-v_bwzmin
variable       srate   equal (v_Wall_v/v_D)


#--- Define regions and groups ---#

print        "bwzmin = ${bwzmin}"
bwzmin = 0
print        "bwzmax = ${bwzmax}"
bwzmax = 2.3811015779523
print        "twzmin = ${twzmin}"
twzmin = 67.6188984220477
print        "twzmax = ${twzmax}"
twzmax = 70

region         bwallb  block  INF INF INF INF ${bwzmin} $(v_bwzmin + 0.4) units box
region         bwallb  block  INF INF INF INF 0 $(v_bwzmin + 0.4) units box
region         bwallb  block  INF INF INF INF 0 0.4000000000000000222 units box
region         bwallm  block  INF INF INF INF $(v_bwzmin + 0.35) $(v_bwzmax - 0.35) units box
region         bwallm  block  INF INF INF INF 0.3499999999999999778 $(v_bwzmax - 0.35) units box
region         bwallm  block  INF INF INF INF 0.3499999999999999778 2.0311015779522998415 units box
region         bwallt  block  INF INF INF INF $(v_bwzmax - 0.7) $(v_bwzmax) units box
region         bwallt  block  INF INF INF INF 1.6811015779522999747 $(v_bwzmax) units box
region         bwallt  block  INF INF INF INF 1.6811015779522999747 2.3811015779522999303 units box
region         bmelt   block  INF INF INF INF $(v_bwzmax) $(v_twzmax / 2) units box
region         bmelt   block  INF INF INF INF 2.3811015779522999303 $(v_twzmax / 2) units box
region         bmelt   block  INF INF INF INF 2.3811015779522999303 35 units box
region         tmelt   block  INF INF INF INF $(v_twzmax / 2)  $(v_twzmin - 0.1) units box
region         tmelt   block  INF INF INF INF 35  $(v_twzmin - 0.1) units box
region         tmelt   block  INF INF INF INF 35  67.518898422047712415 units box
region         twallb  block  INF INF INF INF $(v_twzmin - 0.1) $(v_twzmin + 0.35) units box
region         twallb  block  INF INF INF INF 67.518898422047712415 $(v_twzmin + 0.35) units box
region         twallb  block  INF INF INF INF 67.518898422047712415 67.968898422047701047 units box
region         twallm  block  INF INF INF INF $(v_twzmin + 0.35) $(v_twzmax - 0.35) units box
region         twallm  block  INF INF INF INF 67.968898422047701047 $(v_twzmax - 0.35) units box
region         twallm  block  INF INF INF INF 67.968898422047701047 69.650000000000005684 units box
region         twallt  block  INF INF INF INF $(v_twzmax - 0.35) $(v_twzmax) units box
region         twallt  block  INF INF INF INF 69.650000000000005684 $(v_twzmax) units box
region         twallt  block  INF INF INF INF 69.650000000000005684 70 units box

group          bwsurf  region bwallt
1300 atoms in group bwsurf
group          bwbulk  region bwallm
2601 atoms in group bwbulk
group          bwout   region bwallb
1301 atoms in group bwout
group          bbeads  region bmelt
3600 atoms in group bbeads
group          tbeads  region tmelt
3600 atoms in group tbeads
group          abeads  union  bbeads tbeads
7200 atoms in group abeads
group          twsurf  region twallb
1300 atoms in group twsurf
group          twbulk  region twallm
2601 atoms in group twbulk
group          twout   region twallt
1301 atoms in group twout
group          rest4bot union abeads twall
12402 atoms in group rest4bot
group          rest4top union abeads bwall
12402 atoms in group rest4top
group          walls    union bwall twall
10404 atoms in group walls
group          alltop   union twall tbeads
8802 atoms in group alltop
# Other groups are: gbeads fbeads bwall twall

info system
info coeffs

#--- Exclude wall-wall interactions ---#

#neigh_modify exclude type 1 1
#neigh_modify exclude type 1 4
#neigh_modify exclude type 4 4


############
# Computes #
############

#compute         sysTemp   all    temp/deform                       # Calculate the temperature without translational velocities
#compute         sysPress  all    pressure sysTemp                  # Calculate the pressure of the entire system of atoms
compute         melTemp   abeads temp
compute         melPress  all    pressure melTemp
compute         wallTemp  walls  temp
compute         wallPress all    pressure wallTemp
variable        melDens   equal  $(mass(abeads))/(lx*ly*v_D)
variable        melDens   equal  7200/(lx*ly*v_D)

#--- Forces and Energies ---#

compute         fbwall  bwall group/group rest4bot
compute         ftwall  twall group/group rest4top
compute         fwalls  bwall group/group twall

#--- Like done in comp_shear.in ---#
group           rest_bot union abeads bwall
12402 atoms in group rest_bot
group           rest_bot2 subtract all bwsurf
16304 atoms in group rest_bot2
compute         ggbot bwsurf group/group rest_bot
compute         ggbot2 bwsurf group/group rest_bot

group           rest_top union abeads twall
12402 atoms in group rest_top
group           rest_top2 subtract all twsurf
16304 atoms in group rest_top2
compute         ggtop twsurf group/group rest_top
compute         ggtop2 twsurf group/group rest_top2


#--- Calculate the applied force on each atom for the pressure applied---#
variable Fcomp equal (${Pcomp}*lx*ly)
variable Fcomp equal (1*lx*ly)
variable Fcatom equal (-${Fcomp})/(count(twout))
variable Fcatom equal (-1600)/(count(twout))


#compute	        peratom   all   stress/atom NULL
#compute	        p_all     all   reduce sum c_peratom[1] c_peratom[2] c_peratom[3]
#variable	      press_all equal -(c_p_all[1]+c_p_all[2]+c_p_all[3])/(3*v_volume)



info groups variables                              # For diagnostics


#################
# Equilibration #
#################

#--- Number Density profiles (Equil) ---#
compute         eabeads abeads chunk/atom bin/1d z lower ${binres} units reduced # Check bound keyword to maybe only bin melt area
compute         eabeads abeads chunk/atom bin/1d z lower 0.001 units reduced 
fix             abeads_edz abeads ave/chunk ${Neverye} ${Nrepeate} ${Nfreqe} eabeads density/number file abeads_edz
fix             abeads_edz abeads ave/chunk 100 ${Nrepeate} ${Nfreqe} eabeads density/number file abeads_edz
fix             abeads_edz abeads ave/chunk 100 300 ${Nfreqe} eabeads density/number file abeads_edz
fix             abeads_edz abeads ave/chunk 100 300 30000 eabeads density/number file abeads_edz
compute         ebbeads bbeads chunk/atom bin/1d z lower ${binres} units reduced # Check bound keyword to maybe only bin melt area
compute         ebbeads bbeads chunk/atom bin/1d z lower 0.001 units reduced 
fix             bbeads_edz bbeads  ave/chunk ${Neverye} ${Nrepeate} ${Nfreqe} ebbeads density/number file bbeads_edz
fix             bbeads_edz bbeads  ave/chunk 100 ${Nrepeate} ${Nfreqe} ebbeads density/number file bbeads_edz
fix             bbeads_edz bbeads  ave/chunk 100 300 ${Nfreqe} ebbeads density/number file bbeads_edz
fix             bbeads_edz bbeads  ave/chunk 100 300 30000 ebbeads density/number file bbeads_edz
compute         etbeads tbeads chunk/atom bin/1d z lower ${binres} units reduced # Check bound keyword to maybe only bin melt area
compute         etbeads tbeads chunk/atom bin/1d z lower 0.001 units reduced 
fix             tbeads_edz tbeads  ave/chunk ${Neverye} ${Nrepeate} ${Nfreqe} etbeads density/number file tbeads_edz
fix             tbeads_edz tbeads  ave/chunk 100 ${Nrepeate} ${Nfreqe} etbeads density/number file tbeads_edz
fix             tbeads_edz tbeads  ave/chunk 100 300 ${Nfreqe} etbeads density/number file tbeads_edz
fix             tbeads_edz tbeads  ave/chunk 100 300 30000 etbeads density/number file tbeads_edz

#--- Radius of gyration of the bottom brush chains ---#
compute         chunk_bot bbeads chunk/atom molecule
compute         rgbbeads bbeads gyration/chunk chunk_bot
variable        aveRg    equal  (ave(c_rgbbeads))


#--- Fixes (Equil) ---#

#velocity       abeads create ${Temp} 290842 dist gaussian
#fix             nvt_melt    abeads nvt temp ${Temp} ${Temp} 100.0

# NVE for all and langevin thermostat for melt
fix             nve_melt abeads nve
fix             lang_melt abeads langevin ${Temp} ${Temp} 0.1 798753
fix             lang_melt abeads langevin 1 ${Temp} 0.1 798753
fix             lang_melt abeads langevin 1 1 0.1 798753
fix             nve_walls  walls nve

#--- Langevin thermostat the bulk of the walls in y ---#
# Only thermostat the bulk of the wall not the surface or the outer layer
compute         Tempyt     twbulk temp/partial 0 1 0
fix             lang_tbulk twbulk langevin ${Temp} ${Temp} 0.1 87239 zero yes
fix             lang_tbulk twbulk langevin 1 ${Temp} 0.1 87239 zero yes
fix             lang_tbulk twbulk langevin 1 1 0.1 87239 zero yes
fix_modify      lang_tbulk temp Tempyt
compute         Tempyb     bwbulk temp/partial 0 1 0
fix             lang_bbulk bwbulk langevin ${Temp} ${Temp} 0.1 87239 zero yes
fix             lang_bbulk bwbulk langevin 1 ${Temp} 0.1 87239 zero yes
fix             lang_bbulk bwbulk langevin 1 1 0.1 87239 zero yes
fix_modify      lang_bbulk temp Tempyb

#--- Freeze the outer layer of the walls ---#
fix             freeze_bout bwout setforce 0.0 0.0 0.0
fix             freeze_tout twout setforce 0.0 0.0 0.0

variable        sbot equal  f_freeze_bout[1]/(lx*ly)
variable        pbot equal -f_freeze_bout[3]/(lx*ly)
#--- Thermo output ---#

thermo_style  custom step etotal ke pe epair temp c_melTemp c_wallTemp v_Fcatom v_Pcomp2 press pxx pyy pzz pxy pxz pyz c_melPress c_wallPress v_melDens v_surfcov v_aveRg v_Wall_v2 v_srate v_D v_bwzmax zhi c_fbwall[1] c_fbwall[3] c_ftwall[1] c_ftwall[3] v_sbot v_pbot #c_ggbot[1] c_ggbot[3] c_ggtop[1] c_ggtop[3]
thermo        ${Nthermo}
thermo        1000
thermo_modify flush yes

#--- Dumps ---#
#dump           eq all image ${Ndump_e} stg1.*.jpg type type zoom 2 view 60 120 bond none none
#dump            vis all atom ${Ndump_e} vis.dump

#--- Run Equilibration ---#
timestep    ${Tstep}
timestep    0.005
run         ${Nequil}
run         300000
Neighbor list info ...
  update every 1 steps, delay 0 steps, check yes
  max neighbors/atom: 2000, page size: 100000
  master list distance cutoff = 1.42246
  ghost atom cutoff = 1.42246
  binsize = 0.711231, bins = 57 57 99
  8 neighbor lists, perpetual/occasional/extra = 1 7 0
  (1) pair lj/cut, perpetual
      attributes: half, newton on
      pair build: half/bin/newton
      stencil: half/bin/3d/newton
      bin: standard
  (2) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (3) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (4) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (5) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (6) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (7) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (8) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
WARNING: Inconsistent image flags (src/domain.cpp:784)
Per MPI rank memory allocation (min/avg/max) = 16.53 | 16.53 | 16.53 Mbytes
Step TotEng KinEng PotEng E_pair Temp c_melTemp c_wallTemp v_Fcatom v_Pcomp2 Press Pxx Pyy Pzz Pxy Pxz Pyz c_melPress c_wallPress v_melDens v_surfcov v_aveRg v_Wall_v2 v_srate v_D v_bwzmax Zhi c_fbwall[1] c_fbwall[3] c_ftwall[1] c_ftwall[3] v_sbot v_pbot 
WARNING: One or more chunks do not contain all atoms in molecule (src/compute_chunk_atom.cpp:1161)
       0    5.4749346            0    5.4749346 -0.062508975            0            0            0   -1.2298232            1  -0.99350774  -0.23228996  -0.23228568   -2.5159476 -4.1137315e-08 -1.0636997e-05 -4.0196185e-06  -0.99350774  -0.99350774  0.068978418        0.075    3.7440397        1e-10 1.5328537e-12    65.237797    2.3811016         70.1 -7.6987424e-05 -0.0014799907 -0.00014452016 0.0016894292 -9.4479979e-15   -5.9060971 
    1000    6.9901222    1.2244509    5.7656713 -0.029474016   0.81634698    1.0097176   0.68261067   -1.2298232            1  -0.88164323  -0.35776927  -0.36921757   -1.9179428 0.0024775381 -0.029990747 -0.020513402  -0.94495634  -0.94645205   0.06911665        0.075    3.4012138        1e-10 1.5359256e-12    65.107322    2.4477306         70.1 0.00055678326 -0.0075861513 -0.00013254938  0.004266836  0.046536562   -2.7566392 
    2000    6.4273182    1.2451568    5.1821614 -0.040766464    0.8301517    1.0006894    0.7122174   -1.2298232            1  -0.85433384  -0.42986001   -0.4157699   -1.7173716 -0.0021926223 -0.030792245 -0.0074220341  -0.92039302  -0.91856318  0.069131312        0.075    3.1777776        1e-10 1.5362514e-12    65.093514    2.4506475         70.1 -0.00041137147 -0.0028043136 -0.00042549633 0.0031157506   0.43600112   -3.0985012 
    3000    5.9736869    1.2564951    4.7171918 -0.043735364   0.83771098    1.0068571   0.72074034   -1.2298232            1  -0.73907436  -0.38943445  -0.39362224   -1.4341664 0.0017786638 -0.005161344 -0.0064745543  -0.80592406  -0.80369958  0.069139998        0.075    3.0028271        1e-10 1.5364444e-12    65.085336    2.4576336         70.1 0.00046644152 -0.0059553193 -0.00045921375 0.0050327523  -0.20925617   -3.5789441 
    4000    5.6167061    1.2815319    4.3351742  -0.05183013    0.8544031    1.0122764     0.745235   -1.2298232            1  -0.69056908  -0.39885457  -0.40378672    -1.269066 0.00017714944 -0.0046235239  0.016638434  -0.75969069  -0.75554214  0.069124849        0.075     2.859551        1e-10 1.5361078e-12      65.0996    2.4513751         70.1 0.0026314469 -0.011298559 -0.00017438479 0.0046691679  0.018924394   -3.5753303 
    5000    5.2767139    1.2598226    4.0168914 -0.058482534   0.83992942   0.99041447   0.73587272   -1.2298232            1   -0.6086801  -0.38086141  -0.36582404   -1.0793549 0.00046352224  -0.01273106 -0.0073166865  -0.67693334  -0.67224994  0.069165518        0.075    2.7371003        1e-10 1.5370115e-12    65.061321    2.4540103         70.1 0.00021530027 -0.0060228768 0.00046811545 0.0097242944    0.6903265   -2.7571761 
    6000    5.0097623    1.2637194     3.746043 -0.069104729   0.84252744   0.99568125   0.73662416   -1.2298232            1    -0.565455  -0.37155897  -0.37954412  -0.94526192 -0.0029332672 0.0013547546 -0.0076471434  -0.63377794   -0.6293629  0.069131676        0.075    2.6309404        1e-10 1.5362595e-12    65.093171     2.458498         70.1 -0.00036969526 -0.016462951 -0.001798198   0.01088228  -0.21160463   -3.0735422 
    7000    4.8078061    1.2643075    3.5434985 -0.084138881   0.84291957   0.99921197   0.73484438   -1.2298232            1  -0.51631934  -0.36860836  -0.37725717  -0.80309248 -0.002503755 -0.023216838 0.0099920857   -0.5844772  -0.58045385  0.069113303        0.075    2.5405658        1e-10 1.5358512e-12    65.110475    2.4433294         70.1 0.0015920061 -0.012696753 -0.0021266172   0.01488483  -0.10877864   -3.5027706 
    8000    4.6421109    1.2780024    3.3641085  -0.09925287   0.85204998    1.0026317   0.74792755   -1.2298232            1  -0.45606537  -0.34797704  -0.34774285  -0.67247623 0.00088541991 -0.010624662 -0.0027030661  -0.52543672  -0.52041938  0.069117348        0.075    2.4623057        1e-10 1.5359411e-12    65.106665    2.4469237         70.1 -0.0015544737 -0.021483956 0.0058142512  0.018965166    1.0525989   -3.0583712 
    9000    4.4811581    1.2657328    3.2154252  -0.11321418   0.84386982   0.99459369   0.73964822   -1.2298232            1  -0.38563155  -0.32050382  -0.32660368  -0.50978716 0.00046269709 -0.033565849  0.014857797  -0.45423498  -0.44946964  0.069118748        0.075    2.3949137        1e-10 1.5359722e-12    65.105346    2.4467796         70.1 -0.0019234722 -0.030701873 0.0024353036  0.038059192   0.17278175   0.60661789 
   10000    4.3689238    1.2697894    3.0991344  -0.13000236   0.84657438   0.99288345   0.74540814   -1.2298232            1  -0.38493016  -0.36028767  -0.33638931  -0.45811351 -0.0036051403 -0.021575007 0.0026598151  -0.45406783  -0.44865848  0.069123702        0.075     2.324038        1e-10 1.5360823e-12    65.100679    2.4521235         70.1 0.00094781879 -0.033815748 -0.0028748507    0.0373529   0.78008811   -1.6857266 
   11000    4.3019869    1.2739366    3.0280503  -0.13794135   0.84933931   0.98968408    0.7523007   -1.2298232            1  -0.34609041  -0.32790439  -0.33475089  -0.37561593 0.0012466492 -0.0073538982 0.00058941678  -0.41586737  -0.40961337  0.069103236        0.075    2.2756699        1e-10 1.5356275e-12     65.11996    2.4401532         70.1 -0.0015100276 -0.041928144 0.0025834036  0.042172835  -0.89709394   -1.7756065 
   12000    4.2537855    1.2869354    2.9668501  -0.14285609   0.85800568    1.0137211   0.75033123   -1.2298232            1    -0.322841  -0.32769309  -0.32660482  -0.31422508 -0.0014068895  0.014186549 -0.015614673  -0.39243529  -0.38790678  0.069115154        0.075    2.2418543        1e-10 1.5358923e-12    65.108732    2.4511605         70.1 -0.00041182508 -0.050230494 -0.0041896558  0.063871871   -1.0279632   -2.1309853 
   13000    4.1912641    1.2740414    2.9172228  -0.14699751   0.84940917    1.0028821   0.74328571   -1.2298232            1  -0.30447194  -0.31637703  -0.32427868   -0.2727601 0.0011003337 -0.014373442 -0.00057142266  -0.37341275  -0.36884202  0.069127783        0.075    2.1946743        1e-10 1.536173e-12    65.096836    2.4567527         70.1 -1.0536372e-05  -0.06098806 -0.00090449045  0.067287221 -0.053053939   -2.2429288 
   14000    4.1733077    1.2842121    2.8890955  -0.14754887   0.85619006    1.0040896   0.75392412   -1.2298232            1  -0.22932212   -0.2729384  -0.27676647  -0.13826149 0.0030790234  0.041210163 0.0068108548  -0.29924966   -0.2937697  0.069123227        0.075    2.1658401        1e-10 1.5360717e-12    65.101127    2.4509716         70.1 0.0024140814 -0.086175861 -0.0051395615  0.071985123    -0.849815    1.1188513 
   15000    4.1644947    1.2808109    2.8836837  -0.15169924   0.85392245    1.0001114   0.75284003   -1.2298232            1  -0.23852079  -0.29161974  -0.30226396  -0.12167868 0.0035565028 -0.0022287474 0.0066969809  -0.30834778  -0.30271303  0.069123262        0.075    2.1346701        1e-10 1.5360725e-12    65.101094    2.4493261         70.1 -0.004261177 -0.068378939 -7.3618479e-05  0.088883667  -0.93399758   -2.3110449 
   16000    4.1677195    1.2813531    2.8863664  -0.15835526   0.85428393    1.0073894   0.74841525   -1.2298232            1  -0.22282405  -0.26699613  -0.28568211  -0.11579391 0.0024096626 0.0081870305  0.014381771  -0.29224063  -0.28748343  0.069115857        0.075    2.1139979        1e-10 1.5359079e-12    65.108069    2.4371903         70.1 -0.0049090022 -0.077369612 0.0033013876  0.069937682   0.60068122   -1.2327322 
   17000    4.1743329    1.2830815    2.8912513  -0.15493745   0.85543627   0.98960208   0.76267416   -1.2298232            1   -0.2753218    -0.318342  -0.32143278  -0.18619061 -0.0025788619 -0.0091519901 -0.017086693  -0.34606091   -0.3388395  0.069130878        0.075      2.09844        1e-10 1.5362417e-12    65.093922    2.4525043         70.1 -0.00081010133 -0.082006062 -0.0045492933  0.087404493  0.019148367   -2.8837381 
   18000    4.1577315    1.2887313    2.8690002  -0.15300486   0.85920299   0.99704097   0.76390005   -1.2298232            1   -0.2442487  -0.29109691  -0.30589796  -0.13575124 -0.0024533481   0.03603153 -0.0014137008  -0.31510152  -0.30824387  0.069102688        0.075    2.0750883        1e-10 1.5356153e-12    65.120477    2.4422696         70.1 -0.0011576648 -0.090200326 0.0026187998  0.098736641   0.07948071   -4.4228693 
   19000    4.1628239    1.2900285    2.8727954  -0.15443567   0.86006787    1.0123195    0.7547906   -1.2298232            1  -0.21144503  -0.28984341  -0.28383164 -0.060660028 -0.0057108729 -0.0010182661 -0.0093349963  -0.28145293  -0.27642085  0.069106126        0.075    2.0643833        1e-10 1.5356917e-12    65.117238    2.4383041         70.1 -0.0093623015  -0.09583076 -0.0023839428   0.08971699   0.34633728    1.7436253 
   20000    4.1369307    1.2701174    2.8668133  -0.14666209   0.84679304   0.98889822   0.74853596   -1.2298232            1  -0.20611235  -0.28163432  -0.27200118 -0.064701539 -0.00031579047  0.019740638 -0.027032135  -0.27554012  -0.26958487  0.069111815        0.075    2.0422238        1e-10 1.5358181e-12    65.111877    2.4445864         70.1 -0.0071563171 -0.092062232 -0.0028357493   0.10329204 -0.055303367  -0.49506645 
   21000    4.1195824    1.2688414    2.8507409  -0.16049435   0.84594235   0.99094634   0.74567918   -1.2298232            1  -0.23745179   -0.3118652  -0.29618522  -0.10430496 0.0044064489  0.015426751 0.0031854419   -0.3066146  -0.30105578   0.06911387        0.075    2.0203297        1e-10 1.5358638e-12    65.109941     2.446911         70.1 -0.0038567091 -0.089187947 -0.0024080075  0.092433822   -1.2212875   -2.0340359 
   22000    4.1394938    1.2809679     2.858526  -0.15548474   0.85402709    1.0159844   0.74203281   -1.2298232            1  -0.23115835  -0.30151931   -0.3081954  -0.08376035 -0.0019406473   0.03343731 -0.00085806725  -0.29998295   -0.2963694  0.069107832        0.075    2.0157711        1e-10 1.5357296e-12     65.11563    2.4462972         70.1 -0.0041245627 -0.089121163 0.0014640433   0.09389854  -0.46349659   0.31578855 
   23000    4.1303906    1.2653901    2.8650005  -0.15388892   0.84364134   0.99322021   0.74021208   -1.2298232            1  -0.24324397  -0.31709462  -0.30573508  -0.10690222 0.0046898801  0.012900007 -0.0028875814   -0.3118997   -0.3069939  0.069114845        0.075    1.9964563        1e-10 1.5358854e-12    65.109022    2.4407698         70.1 -0.0011838117  -0.10013855 0.00093369077  0.083559239   -1.2440462  -0.85080046 
   24000    4.1231876    1.2722191    2.8509685  -0.15493315   0.84819425   0.98583308   0.75302807   -1.2298232            1  -0.23145545   -0.3104178   -0.3064372 -0.077511353 -0.0029701106  0.019555932  0.020608347  -0.30129988  -0.29473124  0.069116871        0.075    1.9754238        1e-10 1.5359305e-12    65.107114    2.4468984         70.1 0.0058479559 -0.088210809 -6.643248e-05   0.10634786  0.035130982   -1.9693593 
   25000    4.1421296    1.2803983    2.8617314  -0.14989241   0.85364736    1.0014088   0.75147671   -1.2298232            1  -0.18758708  -0.27421536  -0.26543396 -0.023111932  0.002917566  0.012769094 0.0024894421  -0.25728762   -0.2518626  0.069118929        0.075    1.9772818        1e-10 1.5359762e-12    65.105176    2.4412785         70.1 0.0019708566  -0.10477556 -0.0041775111  0.088649806 -0.029012417   0.30829934 
   26000    4.1590944    1.2844664     2.874628  -0.15406712   0.85635958    1.0003045   0.75683027   -1.2298232            1  -0.21483484  -0.28964588  -0.28297557 -0.071883082 -0.0018096688 0.00042463699 -0.012081769  -0.28503193  -0.27903948  0.069100148        0.075    1.9803443        1e-10 1.5355588e-12     65.12287    2.4338432         70.1 0.0048206238   -0.1136305  0.003090526   0.10195054   0.81269312   -2.0626381 
   27000    4.1425498    1.2815611    2.8609887   -0.1457055    0.8544226      1.00712   0.74883633   -1.2298232            1  -0.20285921  -0.28261304  -0.26659663 -0.059367962 0.0052135519 -0.0091497525 -0.0021333864  -0.27231485   -0.2675013  0.069117139        0.075    1.9704572        1e-10 1.5359364e-12    65.106862    2.4546353         70.1 -0.0073560481  -0.12267555 -0.0050236952  0.095993507     1.818111   0.96661359 
   28000    4.1516451    1.3022689    2.8493761   -0.1541168   0.86822861    1.0337155   0.75379314   -1.2298232            1  -0.21552484  -0.28137514  -0.30275737 -0.062442002 0.0025727468 -0.057132717 0.0026011828  -0.28544023  -0.28187396  0.069118255        0.075    1.9606016        1e-10 1.5359612e-12     65.10581     2.453983         70.1 -0.00090956718 -0.097887094 -0.0032655768   0.09662489    1.4105266  -0.19860123 
   29000    4.1500827    1.2766327      2.87345  -0.15693845    0.8511368   0.99560859   0.75124242   -1.2298232            1  -0.18813884  -0.26694732  -0.26220542 -0.035263785 -0.0027648514  -0.04955629 0.0032840859  -0.25781765  -0.25204207  0.069110431        0.075    1.9575791        1e-10 1.5357874e-12    65.113181    2.4416731         70.1 -0.0097960409  -0.10780154 -0.010300804  0.093639965   0.74976641   -1.0777726 
   30000    4.1290566    1.2695301    2.8595266  -0.15229478   0.84640145   0.99000036   0.74711066   -1.2298232            1  -0.21304288  -0.29447423  -0.29784672 -0.046807689 0.0022935934 -0.057361229 -0.0041977499  -0.28233846  -0.27658615  0.069115611        0.075    1.9464469        1e-10 1.5359025e-12    65.108301    2.4474533         70.1 -0.005988568  -0.11080263 0.0023594946    0.1129403   0.94390953    1.3868847 
   31000    4.1583359    1.2789657    2.8793703  -0.15579502   0.85269223    1.0013266   0.74991747   -1.2298232            1  -0.18385253  -0.27137051  -0.26720925 -0.012977831 -0.00067146054 -0.014518478 0.0020597986  -0.25340844  -0.24812277  0.069115538        0.075    1.9365502        1e-10 1.5359008e-12     65.10837    2.4399704         70.1 0.0053994189 -0.091780924 0.0040351101   0.11314205  -0.54667212   0.36861028 
   32000    4.1380781    1.2849746    2.8531035  -0.15702143   0.85669843    1.0065302   0.75309542   -1.2298232            1  -0.21539975  -0.28405155  -0.31322671    -0.048921 -3.7878859e-05 -0.013472831 0.0013191325  -0.28525043  -0.28000399  0.069116969        0.075    1.9204767        1e-10 1.5359326e-12    65.107022    2.4521712         70.1 -0.0035753543  -0.10723863 -0.0047754715   0.12271597   0.41821011   -1.3980695 
   33000    4.1532992    1.2789994    2.8742998  -0.15110254   0.85271467    0.9977834   0.75240735   -1.2298232            1  -0.21852709  -0.30467046   -0.2938844 -0.057026403 0.0059459373 -0.0049942803 0.0068612459  -0.28831394  -0.28256991  0.069120629        0.075     1.908976        1e-10 1.536014e-12    65.103575    2.4482172         70.1 0.0066678318 -0.097657351 -0.0078211951  0.092134608   0.18952241   -1.6460532 
   34000    4.1363901    1.2702516    2.8661385  -0.15168058    0.8468825   0.99478433   0.74461408   -1.2298232            1  -0.21743204  -0.30686642  -0.29790922 -0.047520485 -0.0015628527 0.0046897018 -0.0068389333  -0.28649606  -0.28128237  0.069145931        0.075    1.9028237        1e-10 1.5365763e-12    65.079751    2.4518174         70.1 0.00035920114  -0.09457936 0.0018148348  0.096141576    0.0699315   -1.1673407 
   35000    4.1310995    1.2873955     2.843704  -0.15557747   0.85831245   0.99612454   0.76302735   -1.2298232            1  -0.20713115   -0.2794318  -0.28921755 -0.052744094 0.0040093087  0.021430558 -0.0012826028  -0.27790302   -0.2710675   0.06911319        0.075    1.9001199        1e-10 1.5358487e-12    65.110582    2.4457462         70.1 -0.014199015  -0.12326229 -0.007671704   0.09651735   0.49957343  -0.24765933 
   36000    4.1287226     1.281147    2.8475755  -0.15380401   0.85414653   0.99985808   0.75339451   -1.2298232            1  -0.16572627  -0.25627182  -0.26089401  0.019987032 -0.00046938857 -0.0043801063 -0.012462274  -0.23560468  -0.22990225  0.069103484        0.075    1.8954759        1e-10 1.535633e-12    65.119727    2.4419381         70.1 0.0012611143  -0.10608346 0.0015532058     0.110243   0.68570988  -0.29124903 
   37000    4.1460509    1.2745234    2.8715275  -0.15079788   0.84973053    1.0056796   0.74189358   -1.2298232            1  -0.23166097  -0.28487476  -0.31100125 -0.099106907 0.00072364786 -0.0070953651 0.0068501246  -0.30047266  -0.29621062  0.069128984        0.075    1.8937955        1e-10 1.5361996e-12    65.095706    2.4545235         70.1 0.0011377408 -0.096724411 -0.0047403318   0.10991096    1.2071248   -1.8462721 
   38000    4.1405691     1.274143    2.8664261  -0.15460394   0.84947692   0.99456206   0.74915794   -1.2298232            1  -0.21084094  -0.28699334  -0.30483648 -0.040692998 -0.0051421491 -0.0014175832 0.0061434337  -0.28032641    -0.274677  0.069114531        0.075    1.8840981        1e-10 1.5358785e-12    65.109318    2.4460803         70.1 -0.0089151337  -0.10368053 -0.0035989042   0.11285886  -0.19637723  0.062598968 
   39000    4.1266527    1.2680639    2.8585888  -0.15399717   0.84542397   0.99499833   0.74199801   -1.2298232            1  -0.21559485  -0.30392143  -0.28867682 -0.054186311 -0.0019520113  0.033192055 -0.011426185  -0.28441623  -0.27945891  0.069114913        0.075    1.8614273        1e-10 1.535887e-12    65.108958    2.4406004         70.1 0.0029759251  -0.11882875 -0.0028287146  0.083813999  -0.16638831   0.28276112 
   40000    4.1301668    1.2717945    2.8583723  -0.15445504   0.84791119   0.99114536   0.74887295   -1.2298232            1  -0.20268939  -0.28715639  -0.28368595 -0.037225838 0.0021309046  0.023074337 0.0078952533  -0.27214843  -0.26630615  0.069141838        0.075    1.8591264        1e-10 1.5364853e-12    65.083604    2.4551695         70.1 0.0087408371  -0.09264677 0.0047009153    0.1210447      1.16235   -1.2195578 
   41000    4.1407309    1.2761561    2.8645748  -0.15009195   0.85081907   0.99277833   0.75266335   -1.2298232            1  -0.19342354  -0.28387932  -0.27113198 -0.025259329 2.4262503e-05   0.02086715  -0.01587514  -0.26323414  -0.25714511  0.069126252        0.075     1.858949        1e-10 1.5361389e-12    65.098279    2.4524388         70.1 0.0048652451  -0.10862965 -0.010008951   0.10759007   0.76317137   -1.1081885 
   42000    4.1321141    1.2844741      2.84764  -0.15866316   0.85636472    1.0064335   0.75259769   -1.2298232            1  -0.13626849  -0.22875016  -0.23171309  0.051657792 -0.0010763239 -0.018361892 0.0016126677  -0.20607299  -0.20086651  0.069145888        0.075    1.8589385        1e-10 1.5365753e-12    65.079792    2.4689774         70.1 -0.0036429745  -0.11390867 0.0048993622   0.10658522  -0.54246046    1.2579823 
   43000    4.1611845    1.2796257    2.8815588  -0.15553442   0.85313224     1.002298   0.74998977   -1.2298232            1  -0.15194086  -0.23961837  -0.25470078  0.038496575  0.002083821  0.044774196  0.013435131  -0.22150348  -0.21627345  0.069129327        0.075    1.8595154        1e-10 1.5362073e-12    65.095383    2.4602759         70.1 -0.0052438503  -0.12579633 -0.0032624302   0.11070233   -2.4753585    1.1638179 
   44000    4.1358115    1.2798855    2.8559259   -0.1526727   0.85330549   0.99787269   0.75334529   -1.2298232            1  -0.22309152  -0.30038766  -0.30586357 -0.063023334  0.002890819 -0.017304784 0.0045120558  -0.29296537  -0.28714007   0.06910546        0.075    1.8529957        1e-10 1.5356769e-12    65.117865    2.4383875         70.1 0.0029572569  -0.11629761 -0.0018715084   0.10956143   0.42498318   -3.6873141 
   45000    4.1329757    1.2730818    2.8598939  -0.14895652   0.84876939   0.98968901   0.75133292   -1.2298232            1  -0.21115496   -0.3044542  -0.29404827 -0.034962418 0.0015143488  0.020998346  -0.01800994  -0.28084216  -0.27467824  0.069132965        0.075    1.8508597        1e-10 1.5362881e-12    65.091957      2.45837         70.1 -0.00092038127  -0.12027764 0.0022464182   0.13070082  -0.87263881   -1.5101863 
   46000    4.1589095    1.2919819    2.8669276  -0.15796321   0.86137017    1.0019439   0.76417425   -1.2298232            1  -0.19193008  -0.28593149  -0.26679122 -0.023067531  0.003424797 -0.0079837689 -0.0033584087  -0.26280833  -0.25623995  0.069098948        0.075    1.8469236        1e-10 1.5355322e-12    65.124001     2.432004         70.1 -0.0072173926 -0.095040957 -0.0082576263   0.10709424   0.78172524  -0.56290437 
   47000    4.1604643     1.281855    2.8786094  -0.15319671   0.85461852   0.99744961   0.75585986   -1.2298232            1  -0.14963267  -0.24999685    -0.232419  0.033517832 0.0023663984  0.041666937  0.003615803  -0.21973975  -0.21365407  0.069109354        0.075    1.8445719        1e-10 1.5357634e-12    65.114196    2.4451075         70.1 -0.00083878406   -0.1036574 -0.0035678502   0.10195651  -0.42749334  -0.71625953 
   48000    4.1518414    1.2803486    2.8714929  -0.15432291    0.8536142   0.99725191   0.75429725   -1.2298232            1   -0.1972366  -0.28100719  -0.29267611 -0.018026499 0.00049382702  0.037402992 -0.0012659764  -0.26719875  -0.26124531  0.069159397        0.075    1.8422035        1e-10 1.5368755e-12     65.06708    2.4702405         70.1 0.0023172414  -0.09908489 0.0031511673   0.10008116   0.37059081   0.34978869 
   49000    4.1629859    1.2850636    2.8779223   -0.1550783   0.85675776    1.0148489   0.74743915   -1.2298232            1  -0.20873395  -0.30130056   -0.2925594 -0.032341893 0.0039904332 -0.022120692 -0.015143518     -0.27806  -0.27387212  0.069119067        0.075    1.8372202        1e-10 1.5359793e-12    65.105045    2.4410911         70.1 0.0032397888   -0.1306473 -0.0056755936   0.10402586  -0.44784825   0.11062194 
   50000    4.1402185    1.2725963    2.8676222  -0.15378472   0.84844576   0.99631941   0.74619699   -1.2298232            1  -0.21225677  -0.30272256  -0.29735075 -0.036696998 -0.0045986621 0.0083789972 0.0096198757   -0.2814676  -0.27620562  0.069134075        0.075    1.8246933        1e-10 1.5363128e-12    65.090912    2.4493848         70.1 0.0060083128 -0.090075853 -0.00037514697   0.10271132   -1.0189174   0.85719042 
   51000    4.1317683    1.2785968    2.8531715  -0.15584839    0.8524463     1.006164   0.74615379   -1.2298232            1   -0.2048555  -0.29570368  -0.28608679 -0.032776021  0.002676263 -0.0046917325 0.0022297786  -0.27406233  -0.26943623  0.069110304        0.075    1.8189094        1e-10 1.5357845e-12      65.1133     2.445138         70.1 -0.0085703256  -0.10374407 -0.0012678475   0.11410356  -0.81616731    1.8558421 
   52000    4.1206036    1.2596738    2.8609299  -0.15957837   0.83983021   0.99921077    0.7296177   -1.2298232            1   -0.2233437  -0.29131023  -0.31347285 -0.065248012 -0.0027263941  0.012945467 -0.015663749  -0.29101678  -0.28747813  0.069123333        0.075    1.8091443        1e-10 1.5360741e-12    65.101028    2.4529046         70.1 -0.008541135  -0.10988788 -0.00018227581   0.10220087 -0.040406722  -0.93614125 
   53000    4.1240092    1.2572069    2.8668023  -0.15002338   0.83818554   0.97621753   0.74274633   -1.2298232            1   -0.2039466  -0.28897341  -0.28956599 -0.033300401 0.0067620698  0.013709576 -0.011964003  -0.27283738  -0.26660521  0.069110406        0.075    1.8110203        1e-10 1.5357868e-12    65.113205    2.4359509         70.1 0.0064494825  -0.10955548 0.0051712849   0.12591001  -0.80327898   -2.1768023 
   54000    4.1723689    1.3016245    2.8707444  -0.15181059   0.86779895    1.0037509   0.77380202   -1.2298232            1  -0.15468525  -0.25750477  -0.24254958  0.035998607 -0.00011767414  0.022048218 -0.0038613561  -0.22645649  -0.21911109  0.069120678        0.075    1.8186995        1e-10 1.5360151e-12    65.103528    2.4552057         70.1 0.00073227066  -0.11427602 -0.0025968321   0.12464031   -1.2625834    1.0473359 
   55000    4.1413204    1.2768168    2.8645036  -0.15782388   0.85125954   0.99550819   0.75151959   -1.2298232            1  -0.17077428  -0.26673639  -0.26599897  0.020412526 -0.0089523007   0.03710922  0.005775523  -0.24047879  -0.23467106   0.06913685        0.075    1.8189992        1e-10 1.5363744e-12    65.088299    2.4617416         70.1 0.0022267332  -0.11963815 0.0043673909   0.11508048   -1.2285605  -0.88907762 
   56000    4.1276599    1.2695595    2.8581004  -0.15393804   0.84642109    0.9968403   0.74241057   -1.2298232            1  -0.22386675  -0.29639638  -0.31266795 -0.062535938 -0.0069100053 -0.0017103389  0.008083765  -0.29272639  -0.28784904  0.069125082        0.075    1.8210676        1e-10 1.5361129e-12    65.099381    2.4369919         70.1 -0.0055667769  -0.10800876 -0.0052350206   0.11398291   0.58909401   0.67455815 
   57000     4.136045    1.2758122    2.8602329  -0.15202698   0.85058977    1.0077008    0.7419488   -1.2298232            1  -0.19052116  -0.28845427  -0.27744201 -0.0056672038 0.0012156521  0.015400886 -0.010105712  -0.25933797  -0.25520053  0.069150807        0.075     1.821837        1e-10 1.5366846e-12    65.075162    2.4574034         70.1 -0.0041099071  -0.11052685 0.0061235186   0.10524777   0.63335663   -1.4116256 
   58000    4.1562938    1.2857877     2.870506  -0.14709526   0.85724052    1.0227153   0.74281241   -1.2298232            1   -0.1785103  -0.26939313  -0.26539534 -0.00074241676 0.0013609973 -0.011375669  0.015078332  -0.24740721  -0.24415337  0.069124491        0.075    1.8204668        1e-10 1.5360998e-12    65.099937    2.4509846         70.1 0.0011618732  -0.12607727 -0.0090281008   0.10147464  -0.42444016   0.44396723 
   59000    4.1339249    1.2750563    2.8588686  -0.15226556   0.85008583     1.006112   0.74219554   -1.2298232            1  -0.22148637  -0.30902011  -0.29749193 -0.057947076 0.00016954121 0.0030725534 -0.0092965224  -0.29032607  -0.28606377  0.069135809        0.075    1.8092165        1e-10 1.5363513e-12    65.089279    2.4458251         70.1 -0.0041046619  -0.11475825 -0.00084284552  0.095409586   0.78929132   -1.4322897 
   60000    4.1282597    1.2665022    2.8617575  -0.15287759   0.84438278   0.99499136   0.74024102   -1.2298232            1  -0.20368165  -0.28298385  -0.30048381 -0.027577284 0.00036152893 -0.010764614 -0.0088879663  -0.27234006  -0.26754526  0.069108195        0.075    1.7952735        1e-10 1.5357377e-12    65.115288    2.4461483         70.1 0.00094683654  -0.10173361  0.002667888   0.10643098    1.2950299   -1.6762455 
   61000    4.1399791    1.2722148    2.8677643  -0.14987102   0.84819137   0.99918241   0.74378531   -1.2298232            1  -0.21053993  -0.30441941  -0.29884343 -0.028356935 -0.00025757436 -0.018648326 0.0067341252  -0.27952708  -0.27467254  0.069099811        0.075     1.796033        1e-10 1.5355514e-12    65.123188    2.4371213         70.1 -0.0061674153  -0.10852378 -0.0031751083    0.1196654    0.4487676  -0.86448662 
   62000    4.1341503    1.2706994    2.8634509  -0.15062187   0.84718106   0.98320735   0.75313068   -1.2298232            1  -0.17694444  -0.26625331  -0.26912813 0.0045481297 0.0018218868 -0.011619471 -0.0099262305  -0.24679838  -0.24005169  0.069122788        0.075    1.8003519        1e-10 1.536062e-12    65.101541    2.4509594         70.1 -0.0025335232  -0.10750241 -0.002446101   0.11845357   0.63761156     2.501592 
   63000    4.1560734    1.2820213    2.8740521  -0.15458489   0.85472941    1.0121732   0.74585859   -1.2298232            1  -0.22104324  -0.30273775  -0.29794268 -0.062449288 0.0019098135 -0.0054788133 -0.021692797  -0.29022269  -0.28600967  0.069121954        0.075     1.795989        1e-10 1.5360434e-12    65.102326    2.4463806         70.1 -0.0033306943  -0.10179801 5.8306495e-05   0.11212988    1.0969961  -0.82047847 
   64000    4.1295056    1.2593028    2.8702028  -0.14884019   0.83958292   0.97644242   0.74495521   -1.2298232            1  -0.17410636  -0.27676003  -0.25957375   0.01401471 0.00090280446 -0.0036185708 0.0076258025  -0.24320202   -0.2367794  0.069130577        0.075    1.7916878        1e-10 1.536235e-12    65.094206    2.4509611         70.1 -4.2735906e-05  -0.11817916 -0.00076444503   0.11315746    1.0784824  -0.35800265 
   65000    4.1360674    1.2763067    2.8597607  -0.15277922   0.85091949   0.99598159   0.75061658   -1.2298232            1  -0.19040355  -0.27048576  -0.30868656 0.0079616563 0.0016827449 -0.026888564 0.0074330533  -0.26002431  -0.25433072   0.06912337        0.075    1.7942125        1e-10 1.5360749e-12    65.100992    2.4493268         70.1 -0.0039810415  -0.12868899 -0.0018984774   0.10667709   0.34969396    1.7184844 
   66000    4.1781311      1.29854    2.8795912  -0.14764749   0.86574248    1.0154021   0.76225946   -1.2298232            1   -0.1765406  -0.27395603  -0.26844044  0.012774668 -0.0017799455 0.0024484843 -0.0059911342  -0.24724125  -0.24171428  0.069120786        0.075    1.7848248        1e-10 1.5360175e-12    65.103427    2.4412157         70.1 -0.0060531076   -0.1229826 -9.9771948e-05   0.12760117  0.061581219    1.0783957 
   67000    4.1501503    1.2791406    2.8710097  -0.15799957   0.85280884     1.014205   0.74120276   -1.2298232            1  -0.23506481   -0.3248125  -0.29570493 -0.084676993 0.0022185762 -0.0055748819 -0.010063376  -0.30381242  -0.30016165  0.069121045        0.075    1.7671977        1e-10 1.5360232e-12    65.103183    2.4499941         70.1 -0.012506213  -0.10014581 -0.0023035137    0.1122308   0.77599643  -0.83701107 
   68000    4.1268184    1.2634988    2.8633196  -0.15656662   0.84238036    1.0032205   0.73115804   -1.2298232            1  -0.14492591  -0.24526827  -0.24101821  0.051508737 -0.002489098  -0.01162151 -0.0039013085  -0.21274186  -0.20931771  0.069122297        0.075    1.7672291        1e-10 1.536051e-12    65.102003    2.4425242         70.1 0.0024132608  -0.10603297 0.00019810642   0.11376628    0.4381378    3.3299638 
   69000    4.1532638    1.2827198     2.870544  -0.15296442   0.85519514    1.0036471   0.75254681   -1.2298232            1  -0.19461329  -0.28761309  -0.28417371 -0.012053071 -0.0058941513  -0.02898391 -0.00064154776  -0.26441308  -0.25903247   0.06912924        0.075    1.7596029        1e-10 1.5362053e-12    65.095464    2.4508388         70.1 -0.0032002724  -0.10551753 -0.0041875893   0.10851662    1.7758085  -0.38063899 
   70000    4.1256444    1.2753969    2.8502475  -0.15876041   0.85031288   0.98760112   0.75538951   -1.2298232            1  -0.21372364  -0.29699157  -0.29199138 -0.052187961 0.0012593191 -0.023179513 -0.0020538596  -0.28378709  -0.27711291  0.069114595        0.075    1.7545825        1e-10 1.5358799e-12    65.109258    2.4443141         70.1 -0.0040022438  -0.12273331 0.0016856542   0.10887042   0.18687582  -0.90540427 
   71000    4.1651199    1.2916983    2.8734216  -0.15211541   0.86118115   0.99846015   0.76626522   -1.2298232            1   -0.2058186  -0.29792964   -0.2919801 -0.027546057 -0.002088171  -0.03948824 -0.0073086284  -0.27689079  -0.26990486  0.069123543        0.075    1.7444314        1e-10 1.5360787e-12     65.10083    2.4452548         70.1 0.00012796991  -0.11999796 0.0016994096   0.11708484  -0.10868002   0.37773379 
   72000    4.1570073    1.2853679    2.8716395  -0.15459508   0.85696059    0.9944685   0.76188585   -1.2298232            1   -0.1773058  -0.27934766  -0.26211231 0.0095425721 0.0014594065  0.016053542 -0.0053006854   -0.2479718  -0.24113585  0.069113235        0.075    1.7474507        1e-10 1.5358497e-12    65.110539    2.4461236         70.1 -0.00083060872  -0.11207066 -0.0018531751   0.10656829   0.42017826  -0.10515415 
   73000    4.1330709    1.2748671    2.8582038  -0.15411278   0.84995967    1.0031763   0.74401363   -1.2298232            1  -0.19037395  -0.28892615   -0.2711208 -0.011074894 0.0017366164 -0.026396529  0.010606793  -0.25938227  -0.25476291  0.069114943        0.075    1.7415296        1e-10 1.5358876e-12     65.10893    2.4500534         70.1 0.0048034558   -0.1072867 -0.011535833   0.11704596   0.85580314    1.1410878 
   74000    4.1237433    1.2651176    2.8586257  -0.15436024   0.84345968   0.99483351   0.73878826   -1.2298232            1  -0.18507208  -0.28483795  -0.26347669 -0.0069016115 -0.0036839573  0.010840353 -0.0053600444  -0.25359575  -0.24892556  0.069112047        0.075    1.7322289        1e-10 1.5358233e-12    65.111659     2.440485         70.1 0.00083967461  -0.11765075 -0.0037650797   0.11051599    1.7286578   -1.4398939 
   75000    4.1431154    1.2803722    2.8627432  -0.15289429   0.85362997    1.0162876   0.74115103   -1.2298232            1  -0.18352584  -0.26960546  -0.26040623  -0.02056584 0.00080863633 -0.034463481  0.023797935  -0.25226866  -0.24875636  0.069129458        0.075    1.7472824        1e-10 1.5362102e-12    65.095259    2.4584776         70.1 0.0018929255  -0.12007503  0.001010028   0.10554222  -0.19215412   0.67874601 
   76000    4.1581139    1.2841129     2.874001  -0.15107359    0.8561239    1.0109353   0.74907487   -1.2298232            1  -0.18605095  -0.28688668  -0.27116795 -9.8219682e-05 -0.0027639604 -0.015342758  0.011244097  -0.25552871  -0.25093793  0.069147266        0.075    1.7425874        1e-10 1.5366059e-12    65.078495    2.4477158         70.1 -0.0047415212  -0.12599647 0.00057133544   0.11359884  -0.19867254    1.2094178 
   77000    4.1299236    1.2765065    2.8534171  -0.14926599   0.85105265    1.0000396   0.74803369   -1.2298232            1  -0.16730914  -0.24438971  -0.26830211   0.01076441 0.0014437329  0.020415639 -0.008686945  -0.23669033  -0.23149677  0.069118935        0.075    1.7391807        1e-10 1.5359763e-12     65.10517    2.4517537         70.1 0.0073670786  -0.11835496  0.010419645   0.10764659   -1.4639233  -0.27550946 
   78000    4.1326054     1.271459    2.8611464  -0.15336807   0.84768751   0.98725229    0.7511885   -1.2298232            1  -0.20923315  -0.30213438   -0.2859624 -0.039602658 0.00045551239  0.026778005 0.0010695729  -0.27890695  -0.27260003  0.069142325        0.075    1.7302289        1e-10 1.5364961e-12    65.083146    2.4688627         70.1 -0.0017183253  -0.10653547 0.00077008736   0.11113695   0.87897358   0.68272372 
   79000    4.1319727    1.2828932    2.8490795  -0.16010396   0.85531071    1.0126606   0.74650492   -1.2298232            1  -0.20129855   -0.2845678  -0.27965984 -0.039667996 -0.003096731 -0.0077392054 -0.011156901  -0.27053794  -0.26629626  0.069118851        0.075    1.7285379        1e-10 1.5359745e-12    65.105249    2.4504338         70.1 -0.0010982144  -0.10099768 -0.0040080353   0.12362813   0.29193445   0.93922688 
   80000    4.1530946    1.2830194    2.8700752  -0.15665525   0.85539487    1.0084451   0.74956453   -1.2298232            1  -0.20382874   -0.2902216  -0.28344946 -0.037815155 0.00086306169 0.0041476389 -0.016860534  -0.27335192  -0.26855588  0.069129564        0.075    1.7287723        1e-10 1.5362125e-12    65.095159    2.4582042         70.1 -0.0078547015  -0.11901785 -0.0055684586   0.10721667   0.60282838   -1.0076813 
   81000    4.1565512    1.2700979    2.8864534  -0.15226867   0.84678002   0.99694392   0.74294621   -1.2298232            1  -0.17673849   -0.2790112  -0.26934664  0.018142362 -0.0036412172  0.044250063  0.021786063  -0.24564781  -0.24072743  0.069113631        0.075    1.7222484        1e-10 1.5358585e-12    65.110167     2.449809         70.1 -0.00032122129  -0.11187734 -0.0078437548   0.10621505   -1.1456888  -0.20437605 
   82000    4.1390267    1.2724693    2.8665574  -0.14936697   0.84836104   0.98578953   0.75334044   -1.2298232            1  -0.17671143  -0.26100102  -0.26959728 0.00046401711 -0.0060541573 0.0041489542 0.0017770037  -0.24658483  -0.23998442  0.069139219        0.075    1.7195849        1e-10 1.5364271e-12     65.08607    2.4617609         70.1 0.0011095773  -0.10437201 -0.0048328636    0.1061481  -0.62592757   -1.6191064 
   83000    4.1399336    1.2723577    2.8675759  -0.14560239   0.84828665    1.0022666   0.74181223   -1.2298232            1   -0.1630588  -0.26549731  -0.25865055  0.034971466 -0.00029918038   0.02431471 -0.0077320898  -0.23186294  -0.22738937  0.069135171        0.075    1.7108533        1e-10 1.5363371e-12    65.089881    2.4589872         70.1 0.0060179467  -0.10679507 -0.0036771956   0.12983314    1.8140954  -0.27905059 
   84000    4.1247843    1.2697441    2.8550402  -0.15654901   0.84654416   0.98657077   0.74972546   -1.2298232            1  -0.18989519  -0.27306743  -0.27726238 -0.019355777 -0.0015137644  0.046653267 -0.0062250461   -0.2594333  -0.25321833  0.069114283        0.075    1.7035381        1e-10 1.535873e-12    65.109552     2.440875         70.1 -0.0022407487 -0.098764941 0.0033247846   0.10879232    1.2444917   0.67274919 
   85000    4.1996579    1.3021348    2.8975231  -0.14331031    0.8681392    1.0276238   0.75785737   -1.2298232            1   -0.2095613  -0.29880991  -0.29324973 -0.036624263 0.0019987478 -0.005430392 -0.00044595176  -0.27985365  -0.27551943  0.069130585        0.075    1.7031733        1e-10 1.5362352e-12    65.094198    2.4570624         70.1  0.003545096  -0.11399058 -0.010637314    0.1352589   0.58833641   0.43170071 
   86000    4.1518006    1.2857738    2.8660268   -0.1476557   0.85723125    1.0133163    0.7493009   -1.2298232            1  -0.19003982  -0.28121889  -0.27785143 -0.011049129 -0.0023999869  0.023384558  0.002640064  -0.25953854  -0.25507962  0.069116809        0.075    1.7004597        1e-10 1.5359291e-12    65.107172    2.4461364         70.1 -0.0083168041   -0.1205197 -0.0075165601   0.10993134    1.0245987   -1.2164019 
   87000    4.1380852    1.2707751    2.8673101  -0.15317683   0.84723153   0.99674946   0.74384479   -1.2298232            1  -0.21403277   -0.2930749  -0.29691875 -0.052104663 -0.00063167722  0.038102149  0.020212557  -0.28302544  -0.27800923  0.069122544        0.075    1.6916834        1e-10 1.5360565e-12     65.10177    2.4542011         70.1 -0.00010688855  -0.11549272 0.0077838725   0.11362726   0.84003576   -1.1313159 
   88000    4.1332254     1.276557    2.8566684  -0.14795079   0.85108637    0.9936397   0.75251957   -1.2298232            1  -0.18779959  -0.27488476  -0.28092826 -0.0075857638 -0.0012520714 0.0041664232 -0.004334555  -0.25759686  -0.25157645  0.069122839        0.075    1.7073755        1e-10 1.5360631e-12    65.101493    2.4423749         70.1 -0.0038885875  -0.10484226  0.010452398  0.099999854   0.44728426   -0.8494769 
   89000    4.1569023    1.2849067    2.8719956  -0.15201681   0.85665312   0.99738481   0.75934745   -1.2298232            1  -0.18060209  -0.28041447  -0.27348316  0.012091349 0.0045882573   0.01080571 0.0070132983  -0.25103265  -0.24461933   0.06912354        0.075    1.7087135        1e-10 1.5360787e-12    65.100832    2.4475351         70.1  0.010266286  -0.13352629 0.0026831009  0.096729992  -0.24960461   -0.1328244 
   90000    4.1211433    1.2807138    2.8404294  -0.16115998   0.85385772   0.99879834   0.75363916   -1.2298232            1  -0.16567451  -0.26015458  -0.25748869  0.020619757 0.00080620576  0.060933379 0.0039087023  -0.23557561  -0.22978247  0.069119787        0.075     1.708731        1e-10 1.5359953e-12    65.104368    2.4425012         70.1 0.0096950761  -0.11712172 -0.0040886223   0.10576345  -0.41656677   0.13553964 
   91000    4.1421136    1.2784343    2.8636793  -0.15391108   0.85233797    1.0043963   0.74719369   -1.2298232            1  -0.18630987  -0.28744042  -0.28325436  0.011765151 -0.00029827119  0.013814815   0.03185858  -0.25561315  -0.25077715  0.069130412        0.075    1.7046296        1e-10 1.5362314e-12    65.094361    2.4479793         70.1 0.00015695647  -0.10016501 -0.0056442739   0.11410375    1.0238125   -1.9847364 
   92000    4.1535546    1.2827394    2.8708151  -0.15034276    0.8552082   0.99988075   0.75517527   -1.2298232            1  -0.20175328  -0.29693452  -0.26798598 -0.040339328 -0.0045314229 0.0089614721 -0.0083097237  -0.27179686  -0.26593071  0.069127406        0.075    1.7111235        1e-10 1.5361646e-12    65.097192    2.4487219         70.1 0.0026651407 -0.098773575 -0.0010083995  0.096385134   0.33692399   -1.3123511 
   93000    4.1242854    1.2561887    2.8680967  -0.15113762    0.8375067   0.96299753   0.75074605   -1.2298232            1  -0.20983712  -0.29082679  -0.28537852 -0.053306054 -0.0045658651 -0.00076434709 0.0049954251  -0.27946989  -0.27164721  0.069114473        0.075     1.703086        1e-10 1.5358772e-12    65.109373    2.4413757         70.1 -0.0067833374   -0.1118049 -0.0047800392   0.10568374   -1.0449817   -1.3294358 
   94000    4.1395884     1.276367    2.8632214  -0.15582602   0.85095968    0.9857852    0.7577406   -1.2298232            1  -0.20680982  -0.30046047  -0.30675911 -0.013209879 -0.0015896256 -0.0056043866 0.0034821486  -0.27709134  -0.27008253  0.069098759        0.075    1.6986299        1e-10 1.535528e-12     65.12418    2.4362134         70.1 0.0025289351 -0.098086031 -0.0079591693   0.10989186  -0.84640804   -1.2080218 
   95000    4.1474914    1.2783949    2.8690965  -0.15029682   0.85231169   0.99389154   0.75441867   -1.2298232            1  -0.20453845  -0.29758281  -0.28713385 -0.028898697 0.0038296859  0.015185301 -0.021739398  -0.27451186  -0.26833147   0.06913143        0.075    1.6999265        1e-10 1.536254e-12    65.093402    2.4408518         70.1 0.0017926112   -0.1184238 0.0049232034    0.1065455   0.71214327   -0.4766802 
   96000    4.1339618    1.2816908     2.852271  -0.14966778   0.85450905    1.0036837   0.75136058   -1.2298232            1  -0.15909704  -0.25622092  -0.25962269  0.038552491 -0.001939075 -0.033685863  0.021012517  -0.22878681  -0.22351857  0.069109312        0.075    1.6975087        1e-10 1.5357625e-12    65.114236    2.4361935         70.1 -0.0029909585  -0.11138767 -0.0028436949   0.10735269   0.36905282   0.42886535 
   97000    4.1254355    1.2698711    2.8555643  -0.15675543   0.84662886   0.99713322   0.74255943   -1.2298232            1  -0.18035646  -0.27496969  -0.26387626 -0.0022234218 0.0013812349 0.0092731794  0.014997278   -0.2492299  -0.24435755  0.069121306        0.075    1.7029638        1e-10 1.536029e-12    65.102936    2.4532435         70.1  -0.00672049  -0.12452108 -0.0035775482    0.1207639  -0.31382381   0.52958675 
   98000     4.129533    1.2753152    2.8542178  -0.15721813    0.8502584   0.99576323   0.74964906   -1.2298232            1  -0.24744603  -0.32416906   -0.3240733 -0.094095729 0.00087488341  0.032857465 -0.011868963  -0.31697705  -0.31135918  0.069137033        0.075    1.7003641        1e-10 1.5363785e-12    65.088128    2.4558234         70.1 -0.0032809624  -0.11637759 0.0066598554   0.11069332  -0.63999178   0.20438547 
   99000    4.1584181    1.2838618    2.8745563  -0.15418739   0.85595647    1.0165957   0.74487447   -1.2298232            1  -0.23272573  -0.31547032  -0.31671135 -0.065995518 -0.0040073608 0.0071512851  0.028420831   -0.3018139  -0.29797602  0.069107538        0.075    1.7140893        1e-10 1.5357231e-12    65.115907    2.4422398         70.1 -0.012075626  -0.11562859 -0.0025987852    0.1061225    1.2434638      -1.4638 
  100000    4.1795755    1.2949464    2.8846291  -0.15162133   0.86334665    1.0013934   0.76789965   -1.2298232            1  -0.14503596  -0.25649529  -0.22732994  0.048717356 -0.0010507207  0.022587572 -0.0095442757  -0.21625975  -0.20931049  0.069108432        0.075    1.7103733        1e-10 1.5357429e-12    65.115064    2.4436721         70.1 0.00062001784  -0.10637553 -0.0016426319   0.12647887   0.10075253    1.4536458 
  101000    4.1558166    1.2796757    2.8761409  -0.15552421   0.85316562    1.0032108   0.74941456   -1.2298232            1  -0.18307168  -0.26748123  -0.29613234  0.014398529 0.0014638866 -0.010155828 0.00026424125  -0.25258095  -0.24746286  0.069108577        0.075    1.7096278        1e-10 1.5357462e-12    65.114928    2.4437459         70.1 -0.0037714908  -0.10660469 0.0047213961   0.11707846    0.1071261    0.4948684 
  102000    4.1590994    1.2899746    2.8691248  -0.15739398   0.86003195    1.0167778   0.75164462   -1.2298232            1  -0.21949319  -0.30387948  -0.29995459 -0.054645511 0.00050148012 -0.0061362485 -0.021679336  -0.28920931  -0.28475517  0.069134819        0.075     1.707047        1e-10 1.5363293e-12    65.090211    2.4466229         70.1 0.0060285935  -0.11719588 -0.0078567837   0.12122766    1.1178323    1.1325022 
  103000    4.1590997    1.2784153    2.8806844  -0.14815806   0.85232526    1.0039034   0.74751331   -1.2298232            1  -0.17379209  -0.27773683  -0.26352167  0.019882239 -0.0025631592  0.017388465 -9.5758268e-05  -0.24312501  -0.23822772  0.069108683        0.075    1.6981839        1e-10 1.5357485e-12    65.114828    2.4394897         70.1 -0.0084455281  -0.10591184 0.0005322397   0.10687737    0.5956055   0.53763816 
  104000     4.151712     1.280264     2.871448  -0.15013056   0.85355781   0.99614303   0.75496919   -1.2298232            1  -0.18093636   -0.2761785  -0.27073553 0.0041049637 -0.0013123557  0.041338513 -0.0027331299  -0.25096082  -0.24487389   0.06911547        0.075    1.6954997        1e-10 1.5358993e-12    65.108434    2.4479289         70.1 -0.0015322335  -0.11006725 -0.0062846986    0.1110908  -0.37011913  -0.98711624 
  105000    4.1375078    1.2774856    2.8600222   -0.1535624   0.85170543    1.0035322   0.74672135   -1.2298232            1  -0.20214599  -0.28220512  -0.29795653  -0.02627633 -0.0041357388  0.042089877 -0.0091752482  -0.27140546   -0.2665578  0.069118174        0.075     1.691491        1e-10 1.5359594e-12    65.105887    2.4527568         70.1 -0.0080825517  -0.10575801 0.0042344516  0.096085579   -1.0557054  -0.99687131 
  106000    4.1294881    1.2651545    2.8643336  -0.15112274   0.84348424   0.99192576   0.74084201   -1.2298232            1  -0.15162414  -0.24617074  -0.25121067   0.04250899 -0.0011823243  0.018708676 -0.0090813153  -0.22033829  -0.21529099  0.069115564        0.075    1.6831996        1e-10 1.5359014e-12    65.108345    2.4445167         70.1 -0.0017219524  -0.11046019 -0.0057947655   0.11767256   0.31929312    1.0029186 
  107000    4.1534071    1.2914094    2.8619977  -0.15420191   0.86098851    1.0208229   0.75046399   -1.2298232            1  -0.19465521  -0.28368714  -0.28921112 -0.011067385 0.0034000309 -0.020858288 -0.021225525  -0.26426182  -0.26017683  0.069120321        0.075    1.6745826        1e-10 1.5360071e-12    65.103865    2.4388922         70.1 -0.011575512  -0.12023295 0.0074637482   0.10397758    1.1168845   0.77561728 
  108000    4.1306074    1.2747505    2.8558569  -0.15550184   0.84988194   0.99944379   0.74646505   -1.2298232            1  -0.19587534  -0.29468885  -0.28077834  -0.01215884 -0.0038085081  0.039098085 -0.0015279671  -0.26511104  -0.26002474  0.069104193        0.075    1.6706666        1e-10 1.5356487e-12    65.119059    2.4433881         70.1 -0.0003938602  -0.12062656 -0.0047541784   0.13602551   0.19501727   0.12325794 
  109000    4.1690073    1.2905507    2.8784566  -0.15598323   0.86041604    1.0067053   0.75926483   -1.2298232            1  -0.18444676  -0.27945333  -0.26975542 -0.0041315389 -0.0019883129 0.0096018035 0.0021251912  -0.25486966  -0.24906224  0.069114702        0.075    1.6852988        1e-10 1.5358823e-12    65.109157    2.4495413         70.1 -0.0019999173 -0.096015663 0.0030168444  0.090845513 -0.033706602    2.0724779 
  110000    4.1454628    1.2814442    2.8640186  -0.15287553   0.85434465    1.0012734   0.75275035   -1.2298232            1  -0.16977332  -0.26777762  -0.25847577  0.016933443 0.0016261841   0.02591771 0.0079730515  -0.23959199  -0.23404014  0.069119102        0.075    1.6878726        1e-10  1.53598e-12    65.105013    2.4544649         70.1 -0.00038880266  -0.10339689 -0.001785292    0.1195119   0.35937567  -0.77978975 
  111000    4.1642906    1.2798896     2.884401  -0.15441517   0.85330823   0.99653048   0.75427875   -1.2298232            1  -0.24628118  -0.33039145  -0.31334065 -0.095111426 -0.0021531823 -0.015607015 0.0059604571  -0.31624161  -0.31024358  0.069138603        0.075    1.6875949        1e-10 1.5364134e-12    65.086649     2.467007         70.1 -0.0016584343  -0.12182073  0.001793813    0.1113839  -0.16966237   -1.3230891 
  112000    4.1515831    1.2812835    2.8702996  -0.15286973   0.85423753     1.015569   0.74267638   -1.2298232            1  -0.18645247  -0.27394764  -0.28749659  0.002086806 0.0055530388 -0.0031108468 -0.00061213203  -0.25533677  -0.25163686   0.06911876        0.075    1.6865098        1e-10 1.5359724e-12    65.105335    2.4521439         70.1 -0.009764602   -0.1134286 0.00027472834   0.10476817    0.8618929  -0.14561465 
  113000    4.1389853     1.284399    2.8545864  -0.15498541   0.85631462    1.0105824   0.74964177   -1.2298232            1   -0.1963473   -0.2966548  -0.28646156 -0.0059255301 0.00042183231 -0.020906595  0.012049934  -0.26587764  -0.26121163  0.069139524        0.075    1.6863236        1e-10 1.5364339e-12    65.085782    2.4598509         70.1 0.0059259799  -0.11138911 -0.0067353139   0.11990261 -0.026887114  -0.11392516 
  114000     4.142267    1.2735933    2.8686738  -0.14990526   0.84911041   0.99471491   0.74843199   -1.2298232            1  -0.14243998  -0.23162003  -0.24286338  0.047163475  0.006544977 0.0062525777 -0.022240567  -0.21185811  -0.20628585  0.069115209        0.075    1.6894107        1e-10 1.5358935e-12    65.108679     2.449793         70.1 0.0076412953  -0.10439917 0.0079994969   0.14557589  -0.42990902   0.94875946 
  115000    4.1595408    1.2833833    2.8761575  -0.15746452   0.85563749    1.0109427   0.74824666   -1.2298232            1   -0.1667087  -0.26421205  -0.26319437  0.027280328 -0.00023471368 -0.035416759 -0.019390033  -0.23610964  -0.23159615  0.069140129        0.075    1.6877039        1e-10 1.5364473e-12    65.085213    2.4571222         70.1 0.00037205843  -0.11522035 -0.0040795607    0.1144114    0.7184331    1.5392005 
  116000    4.1566953    1.2860518    2.8706435  -0.15426993   0.85741659    1.0119971   0.75052746   -1.2298232            1  -0.20655907  -0.30770597  -0.29010463 -0.021866615 0.00059063789 -0.0095935499  0.015393722  -0.27617157   -0.2715142  0.069118112        0.075     1.677751        1e-10 1.535958e-12    65.105945    2.4546757         70.1 0.0097838649  -0.11348393 -0.0073988089    0.1116366 -0.0087883401   0.64827853 
  117000    4.1737503    1.2847523     2.888998  -0.15326954    0.8565502   0.99288739   0.76228557   -1.2298232            1  -0.16205424  -0.25878591  -0.25589792  0.028521103 -0.0029663028  0.014480416  0.018688278  -0.23275732  -0.22578281  0.069121503        0.075    1.6752363        1e-10 1.5360334e-12    65.102751    2.4523858         70.1 0.0085466773  -0.11014999 -0.00083896934   0.11116899   -1.4641432    1.3107424 
  118000    4.1349108    1.2714246    2.8634862  -0.15095417   0.84766455   0.98952032   0.74958016   -1.2298232            1  -0.18554719  -0.27986448  -0.28222141 0.0054443313 -0.0064848318 0.0058418049 -0.010774018  -0.25507181  -0.24905964  0.069131103        0.075    1.6708026        1e-10 1.5362467e-12    65.093711    2.4562202         70.1 0.00033005841  -0.11873031 -0.0014868976   0.11688539   0.20434534   0.44300909 
  119000    4.1604025    1.2782774    2.8821251  -0.14815704   0.85223334    1.0067039    0.7454198   -1.2298232            1  -0.21114117  -0.31250727  -0.28865615 -0.032260099 0.0057365482 -0.023491164 0.0060558674  -0.28027992  -0.27575656  0.069125434        0.075    1.6639726        1e-10 1.5361208e-12    65.099048    2.4438566         70.1 -0.0070763511  -0.11084496 0.0026194501    0.1204832  -0.10391593   0.23155188 
  120000    4.1542229    1.2913416    2.8628813   -0.1537028   0.86094331    1.0144476   0.75479925   -1.2298232            1  -0.16661655  -0.26610216  -0.26036637  0.026618872 0.0018342839  0.012578518 -0.0061337419  -0.23662526  -0.23172897  0.069115548        0.075    1.6741895        1e-10 1.5359011e-12     65.10836    2.4513036         70.1 0.0015457673  -0.11225511 0.0030409457   0.12172448   0.71928624   0.61911699 
  121000    4.1738547    1.2970272    2.8768275  -0.15518103   0.86473389    1.0120228   0.76289137   -1.2298232            1   -0.2223047  -0.30453415  -0.30501621 -0.057363754 -0.00037777938  0.032751143 -0.018610061  -0.29306397  -0.28726148  0.069103722        0.075    1.6640782        1e-10 1.5356383e-12    65.119503    2.4372198         70.1 -0.0063760113  -0.11634772 -0.0061727003   0.11804788  -0.24348811    -1.075213 
  122000    4.1434221    1.2655717    2.8778504  -0.15425426   0.84376243   0.98520535   0.74596334   -1.2298232            1  -0.23209525  -0.31061324  -0.32529748 -0.060375027 -0.0056731569  0.019679962  0.011297199  -0.30128441  -0.29533075  0.069109667        0.075    1.6660786        1e-10 1.5357704e-12    65.113901    2.4423719         70.1 0.00014786598  -0.10681141 -0.0037572853   0.12129885   0.50158002  0.093160768 
  123000    4.1393141    1.2716805    2.8676335  -0.15335912   0.84783518   0.99985435   0.74271761   -1.2298232            1  -0.21848147  -0.29433044  -0.30567371 -0.055440278 0.0011073625 0.0069971563 -0.012598725  -0.28736959  -0.28265722  0.069117584        0.075     1.661534        1e-10 1.5359463e-12    65.106443    2.4527392         70.1 -0.0077568319 -0.096396384 -0.0044942211   0.10940722   -0.4084987   -2.2664614 
  124000    4.1473778    1.2805615    2.8668162  -0.15619086   0.85375619   0.99991947   0.75269153   -1.2298232            1   -0.2045448  -0.29446296  -0.30622512 -0.012946321 -0.0072737686  -0.03908576  0.026552216  -0.27435801  -0.26872472  0.069132714        0.075    1.6705633        1e-10 1.5362825e-12    65.092193    2.4618904         70.1 -0.0013347769  -0.10620908 0.0036288695   0.10918432   0.44051574  -0.89296284 
  125000    4.1475198     1.280594    2.8669257  -0.15744482   0.85377786    1.0044333   0.74960454   -1.2298232            1  -0.16305149  -0.26919933  -0.24913239  0.029177262 0.0020746679  0.017482852 0.00027682697  -0.23257838  -0.22752113  0.069136141        0.075    1.6666702        1e-10 1.5363587e-12    65.088967    2.4515559         70.1 0.0029558754  -0.10406727 0.0010971876  0.093930528   -1.0744151    1.2324693 
  126000    4.1500057    1.2816075    2.8683982  -0.15067304   0.85445354    1.0180423    0.7413303   -1.2298232            1  -0.22738598  -0.31521628  -0.29328013 -0.073661514 0.0013915355 -0.043584382 0.0098542024  -0.29614542  -0.29272912  0.069120068        0.075    1.6620118        1e-10 1.5360015e-12    65.104102    2.4485213         70.1 -0.00071921551  -0.10817087 -0.017619483   0.12501418    0.8921165   -1.0712748 
  127000    4.1354138    1.2687628     2.866651  -0.15210028   0.84588992   0.99587598   0.74217909   -1.2298232            1  -0.18860926  -0.27579771  -0.27414231 -0.015887749 0.00036445322  0.009099171 -0.0067300871  -0.25744743  -0.25252965  0.069114861        0.075    1.6608151        1e-10 1.5358858e-12    65.109008    2.4470016         70.1 -0.0043194681  -0.11639887 0.0056915082   0.12200374   0.26400217  -0.59689234 
  128000    4.1326336    1.2699516     2.862682  -0.14668347   0.84668249   0.99283252   0.74562631   -1.2298232            1  -0.19054281  -0.27600655  -0.28499765 -0.010624223 0.00091253991 -0.026764269  0.002998629  -0.25970071  -0.25426786  0.069117947        0.075    1.6617299        1e-10 1.5359544e-12      65.1061    2.4486531         70.1  0.013002125  -0.13038043 -0.0037807052  0.099025556   -2.1152426    1.3958654 
  129000    4.1205725    1.2782128    2.8423597  -0.16153828   0.85219031    1.0020495   0.74856789   -1.2298232            1   -0.1799015  -0.26796175  -0.27959965 0.0078569059 -0.0013691249  0.013972722 0.0029226054  -0.24933224  -0.24421814  0.069116091        0.075    1.6548152        1e-10 1.5359131e-12    65.107849    2.4438852         70.1 -0.0072854007  -0.11348745 0.0048143934   0.12132584 -0.053677499    1.2308166 
  130000    4.1583923      1.29828    2.8601124  -0.15902762   0.86556916    1.0113028   0.76480294   -1.2298232            1  -0.18424558  -0.27729023  -0.26925589 -0.0061906199 0.00081256654  0.026454999 0.0064823606  -0.25518214  -0.24915614  0.069099881        0.075    1.6581999        1e-10 1.5355529e-12    65.123122    2.4381137         70.1 0.0040936957  -0.11850605 0.0041413089   0.13352609   0.81008984   0.11122122 
  131000    4.1450154    1.2788771    2.8661383  -0.15497533   0.85263316   0.99498165   0.75420827   -1.2298232            1  -0.20960375  -0.29458419  -0.28161171 -0.052615358 0.0049156202  0.025052977 -0.0015366703  -0.27955765  -0.27346674  0.069112346        0.075    1.6522264        1e-10 1.5358299e-12    65.111377    2.4376684         70.1 -0.0027951396  -0.10813293 -0.0031812806    0.1097466   0.67205799   0.13930676 
  132000    4.1745941    1.2898665    2.8847276   -0.1534792   0.85995982    1.0060653   0.75893575   -1.2298232            1  -0.18519639  -0.28385751  -0.27325501 0.0015233639 0.0022306968 -0.041924565 -0.0092571926  -0.25558876  -0.24977078  0.069122081        0.075    1.6434846        1e-10 1.5360462e-12    65.102207    2.4528174         70.1 -0.0060048871  -0.10570445 -0.0086155679  0.090749639   0.58233196   0.57821548 
  133000    4.1331599    1.2680447    2.8651152  -0.15152689   0.84541118   0.97570997   0.75532414   -1.2298232            1  -0.15540981  -0.25690872  -0.25158967  0.042268955 -0.0024895618 -0.019181647 0.0030629761   -0.2254672  -0.21803585  0.069143528        0.075    1.6513802        1e-10 1.5365229e-12    65.082013    2.4662346         70.1 -0.0044976438  -0.10588633 -0.0079942161   0.11745348  -0.16495221   0.97154673 
  134000    4.1386614     1.273978    2.8646834  -0.15357372   0.84936694   0.98993335   0.75217495   -1.2298232            1  -0.20206062  -0.28296002  -0.29010807 -0.033113755 -0.0025631134 0.00047876817 -0.0027837347  -0.27182592  -0.26559958  0.069126387        0.075    1.6402961        1e-10 1.5361419e-12    65.098152    2.4443822         70.1 -0.005687565  -0.11672878 -0.0037114734   0.10777568   0.67380378   -1.2421948 
  135000    4.1556169    1.2823641    2.8732528  -0.15586769   0.85495799   0.99837764   0.75579206   -1.2298232            1  -0.19171742  -0.27731073   -0.2718316 -0.026009936 -0.00091951041  0.022521024 -0.0092578918  -0.26181821  -0.25579838  0.069118993        0.075    1.6413745        1e-10 1.5359776e-12    65.105115    2.4563613         70.1 0.0068805793  -0.11266036 -0.014437835   0.11196201   0.50925321   0.50406349 
  136000    4.1365269    1.2723827    2.8641442  -0.15220915   0.84830335    0.9960167    0.7461655   -1.2298232            1  -0.17506029  -0.28038883  -0.27824615  0.033454094 0.00042946303 -0.019046181 0.0052115054  -0.24426821  -0.23898972  0.069119459        0.075    1.6361194        1e-10 1.535988e-12    65.104677    2.4437284         70.1 -0.0084597077  -0.12660667 -0.0011651818   0.11329196   0.42134911    1.3811911 
  137000     4.128381    1.2671773    2.8612038  -0.15609201   0.84483284    0.9769999   0.75345287   -1.2298232            1  -0.18386593    -0.278211  -0.28104404 0.0076572307 0.0041844142 -0.018023637 -0.0038126363  -0.25374976  -0.24657476  0.069130474        0.075    1.6371388        1e-10 1.5362328e-12    65.094302    2.4503547         70.1  -0.01213819  -0.10388934 -0.0016059348    0.1145202   -0.2860576   0.26900184 
  138000    4.1435829    1.2638266    2.8797562  -0.15720488   0.84259895   0.98032408   0.74737252   -1.2298232            1  -0.21023042  -0.28421992  -0.30026625 -0.046205084 0.0075381856 -1.15192e-05 -0.0077977635  -0.27955028  -0.27315261  0.069125447        0.075    1.6432044        1e-10 1.536121e-12    65.099037    2.4522208         70.1 0.0020271468  -0.11266888 0.0035264728   0.10630775    0.7946104   0.22402639 
  139000    4.1297494    1.2716886    2.8580608  -0.15205312   0.84784057   0.99220762   0.74801836   -1.2298232            1  -0.15712109  -0.24424909  -0.25596789  0.028853695 -0.0052604039 -0.010044365 -0.0062932597  -0.22650086  -0.22080603  0.069128418        0.075    1.6416242        1e-10 1.5361871e-12    65.096238    2.4513986         70.1 -0.0069316933  -0.11995042 -0.011113968   0.12006733  -0.96656549  -0.28890405 
  140000    4.1494205    1.2863776    2.8630429  -0.15623043   0.85763382    1.0032294   0.75696239   -1.2298232            1     -0.20917  -0.28648652  -0.29441721 -0.046606282 -0.0049517246 -0.0010173935 -0.0074730514  -0.27937935  -0.27356238  0.069141163        0.075    1.6336128        1e-10 1.5364703e-12    65.084239    2.4672272         70.1 -0.00030854736  -0.12307795 -0.0016658441   0.10917775   -0.3633727    1.8863588 
  141000    4.1389345    1.2693628    2.8695717   -0.1514288   0.84628993   0.98413596   0.75098019   -1.2298232            1  -0.17021862  -0.26409369  -0.27012211  0.023559948 -0.00023331938  0.012179198 0.00071615244   -0.2398731  -0.23338547  0.069110718        0.075    1.6333028        1e-10 1.5357937e-12     65.11291    2.4410939         70.1 0.0003905787  -0.11369371 -0.0039118132   0.12008208   -1.1937213    1.0112748 
  142000    4.1332583    1.2698529    2.8634054  -0.15307271   0.84661668   0.99258906   0.74568344   -1.2298232            1  -0.17526557   -0.2557868  -0.26257468 -0.0074352425 0.00094737973 0.0086422124 0.0098766642  -0.24442878  -0.23897499  0.069129377        0.075    1.6305513        1e-10 1.5362084e-12    65.095336    2.4446692         70.1 -0.0034500985  -0.10876735 0.0011635073   0.11757903 -0.089637611    0.6092331 
  143000    4.1372275    1.2733106    2.8639169  -0.15249004   0.84892197    1.0022112    0.7429256   -1.2298232            1  -0.20232627  -0.28423431  -0.30342908 -0.019315416 0.0057490245 0.0014188126 -0.021310919  -0.27123368  -0.26665329  0.069120131        0.075    1.6353794        1e-10 1.5360029e-12    65.104043    2.4483743         70.1 -0.0078266859  -0.12179759 -0.0050835834   0.11481894  -0.49349691   -1.1364407 
  144000    4.1407889    1.2702789      2.87051  -0.15425188   0.84690073   0.99165107   0.74681319   -1.2298232            1  -0.19416943  -0.27780609  -0.29583591 -0.0088662944 -0.0035581654 -0.026924943   0.01069292  -0.26343742  -0.25781865  0.069118813        0.075    1.6353314        1e-10 1.5359736e-12    65.105285     2.444645         70.1 0.0030652711 -0.096297801 -0.0018304423   0.11467149   0.73587993   0.41279307 
  145000    4.1217387    1.2681504    2.8535884  -0.15224329   0.84548161    1.0040768    0.7358131   -1.2298232            1  -0.19981331   -0.2881429  -0.29673791  -0.01455913 -0.000527709 0.0028873013 -0.0091546674  -0.26806103  -0.26426008   0.06911346        0.075    1.6408378        1e-10 1.5358547e-12    65.110327    2.4460544         70.1 0.0015224381 -0.098621605 0.0084810129   0.11246359   -1.1099496   0.60410358 
  146000    4.1373326    1.2770224    2.8603101  -0.15426152   0.85139666   0.99995883   0.74867171   -1.2298232            1  -0.19530852  -0.29319436  -0.28028288 -0.012448307 -0.0014146766 -0.0080672581 -0.0090369502  -0.26474888  -0.25949097  0.069109476        0.075    1.6462457        1e-10 1.5357661e-12     65.11408    2.4455587         70.1 0.0018392035 -0.099737967 -0.0054442345   0.11717199    1.4977414   0.73852561 
  147000     4.159501    1.2881032    2.8713979  -0.15267318   0.85878423    1.0106841   0.75375024   -1.2298232            1  -0.15653856  -0.25016431  -0.24536692  0.025915534 -0.0093457135  0.046239525 5.5751436e-05  -0.22644998  -0.22140942  0.069121706        0.075    1.6439771        1e-10 1.5360379e-12     65.10256    2.4487215         70.1 -0.001670028   -0.1011507 0.0075909129   0.11335118  -0.94087637   0.93813592 
  148000    4.1251621    1.2620117    2.8631505  -0.15642613    0.8413889   0.99610528    0.7344042   -1.2298232            1  -0.17459668  -0.27440681  -0.25548768 0.0061044543 0.0021762424  0.023145844 -0.0087454158  -0.24271371  -0.23853179  0.069132986        0.075    1.6369457        1e-10 1.5362886e-12    65.091937    2.4429086         70.1 -0.0012622587  -0.11442383  0.004550415  0.099591675  -0.44249625    1.4167949 
  149000    4.1531592    1.2742894    2.8788697   -0.1540045   0.84957454   0.99363155   0.74996704   -1.2298232            1  -0.19921281  -0.28968831   -0.2870131 -0.020937033 0.0043531003  0.007517051  0.013695629  -0.26877333  -0.26298915  0.069141254        0.075    1.6290681        1e-10 1.5364723e-12    65.084153    2.4447518         70.1 -0.0039037955  -0.12343237 0.0058161093   0.11991803  -0.08660458   0.53468994 
  150000    4.1146376    1.2609008    2.8537368  -0.15680054   0.84064826   0.99789495   0.73191248   -1.2298232            1  -0.16834366  -0.25912564  -0.25973673  0.013831397 -0.0014325302  0.024135261 -0.0060826462  -0.23622959  -0.23239364  0.069099213        0.075    1.6292148        1e-10 1.5355381e-12    65.123751    2.4362985         70.1 -0.0050231148  -0.11962117 0.00037048393   0.10565894  -0.38775794   0.57141441 
  151000    4.1688115    1.2962245     2.872587  -0.15234714   0.86419875    1.0061618   0.76604172   -1.2298232            1  -0.18574194  -0.26710756  -0.28003803 -0.010080221 -0.0005586955 -0.0018155901 0.0014679227   -0.2567934  -0.25032252  0.069115571        0.075    1.6325425        1e-10 1.5359016e-12    65.108338    2.4541094         70.1 0.00036328288  -0.11198933 -4.3096129e-05   0.12076863   0.41708092   0.42260382 
  152000    4.1415141    1.2665876    2.8749265  -0.15423146    0.8444397    0.9867904    0.7460125   -1.2298232            1  -0.18424094  -0.27553794  -0.28908108  0.011896188 7.6430012e-05 0.0028040014 0.0065173998  -0.25343467  -0.24757818  0.069126486        0.075    1.6363081        1e-10 1.5361441e-12    65.098058    2.4544271         70.1 -0.0040934326   -0.1305528 -0.0040438202   0.10787774  -0.37695785   0.34593425 
  153000    4.1494119    1.2713998    2.8780121   -0.1501154   0.84764801   0.99515805   0.74565078   -1.2298232            1   -0.1750694  -0.25972329  -0.27298793 0.0075030141 0.0014622857   0.01500306  0.016093619  -0.24422958  -0.23894371   0.06910573        0.075    1.6376061        1e-10 1.5356829e-12    65.117611     2.441683         70.1 0.0025275131  -0.10960086 -0.0051650135   0.10838807   -1.5949963   0.24418374 
  154000    4.1425619    1.2771089     2.865453  -0.15366983   0.85145429    1.0007357   0.74823158   -1.2298232            1  -0.21584005   -0.3097935   -0.3002523 -0.037474339 0.0080380168 0.0060681335  -0.01465202  -0.28523959  -0.28007236  0.069115162        0.075    1.6397688        1e-10 1.5358925e-12    65.108724    2.4438952         70.1 -0.00069387895  -0.13787791 0.0045662358   0.10710061   0.69641736  -0.33724922 
  155000    4.1431356    1.2774746    2.8656611   -0.1558947   0.85169809   0.99395389   0.75333725   -1.2298232            1  -0.22935196  -0.31329559  -0.31600871 -0.058751585 0.0002049692  0.023668321  0.014034753  -0.29922507  -0.29314898  0.069115099        0.075    1.6458929        1e-10 1.5358911e-12    65.108783    2.4446362         70.1 0.0020053717  -0.10680791 -0.0014227724   0.11238799   -1.2048094   -1.9587328 
  156000    4.1498908    1.2785843    2.8713066  -0.14938051   0.85243794   0.98815785   0.75860008   -1.2298232            1  -0.18259915  -0.27387204  -0.27137894 -0.0025464768 -0.0013956299  0.022013935 -0.0089823191  -0.25296039  -0.24602416  0.069113127        0.075    1.6462219        1e-10 1.5358473e-12    65.110641    2.4469168         70.1 -0.0017709618  -0.10669162 0.0040040659  0.099544194  -0.38280956   -0.5282467 
  157000    4.1648449    1.2942398    2.8706051  -0.15556423   0.86287556    1.0167495   0.75647589   -1.2298232            1  -0.14706113  -0.25363323  -0.24790958   0.06035942 0.0017446011  0.026993375 0.0016819108  -0.21722535  -0.21232129  0.069115127        0.075    1.6378575        1e-10 1.5358917e-12    65.108757    2.4426176         70.1 -0.010202819  -0.12175573 0.00080340713    0.1066604   0.50442625    1.3657368 
  158000    4.1548689    1.2820329     2.872836  -0.15056453   0.85473717   0.99942097   0.75469641   -1.2298232            1  -0.18615623   -0.2898777  -0.26931098 0.00071999207 -0.0032976239  0.089004585 -0.012699167   -0.2561554  -0.25030415   0.06912369        0.075    1.6472227        1e-10 1.536082e-12    65.100691    2.4597998         70.1 0.0066079806 -0.098034712 0.0010896824   0.12371627    -1.015539   0.32926119 
  159000    4.1559451    1.2812799    2.8746652  -0.15251298   0.85423515    1.0029269   0.75142081   -1.2298232            1  -0.21595438  -0.31183104  -0.30630183 -0.029730275 0.0025498352  0.027340363 -0.010265437  -0.28564973  -0.28032734   0.06912803        0.075    1.6462552        1e-10 1.5361784e-12    65.096604    2.4482212         70.1 0.0051168612  -0.11045134 0.0030375481   0.11090871  -0.57992486   -2.1544772 
  160000    4.1570957     1.285742    2.8713538  -0.15714393      0.85721     1.001729   0.75728351   -1.2298232            1  -0.23359104  -0.33130679  -0.33116774 -0.038298595 -0.000511974 -0.017332806  0.006357188  -0.30383017  -0.29788711   0.06910532        0.075    1.6513548        1e-10 1.5356738e-12    65.117997    2.4442232         70.1 0.0025076903  -0.11632969 -0.00058507456   0.11978217   -0.6204304  -0.59938184 
  161000    4.1341751    1.2801895    2.8539856  -0.15220279   0.85350815    1.0027547   0.75030977   -1.2298232            1  -0.16105118  -0.26528382  -0.26096306  0.043093329 0.0039609422  0.021359246 0.0085163163  -0.23064348  -0.22541309  0.069133686        0.075    1.6443847        1e-10 1.5363041e-12    65.091278    2.4532477         70.1 -0.00030293756  -0.12436981 0.0011408638   0.11953842 -0.021921241    1.8256266 
  162000    4.1395946    1.2664129    2.8731818  -0.15550565   0.84432321   0.99493235   0.74018105   -1.2298232            1  -0.17665686  -0.26680526  -0.27185379 0.0086884575 0.0047060879  0.031184454 -0.011642189  -0.24530971  -0.24051669  0.069167964        0.075    1.6344837        1e-10 1.5370659e-12    65.059021    2.4852114         70.1 0.0042019082  -0.11599948 -0.0076460255   0.12106557  -0.39087927    1.2722549 
  163000    4.1656347    1.2811384    2.8844963  -0.14939715    0.8541408   0.99621726   0.75590431   -1.2298232            1  -0.20433739  -0.30181736  -0.29424459 -0.016950226 0.00035107559 -0.020394835 0.0027051867  -0.27444859  -0.26827969   0.06910798        0.075    1.6345088        1e-10 1.5357329e-12     65.11549    2.4443465         70.1 0.0031321158 -0.096901831 -0.00028032477   0.11550034  -0.19781291  0.082425151 
  164000    4.1355906    1.2625656     2.873025   -0.1549226   0.84175824   0.99918086   0.73290083   -1.2298232            1  -0.19713249  -0.27321756  -0.29202638 -0.026153537 -0.004692718 0.0030664659 0.0023999752  -0.26511009  -0.26126501  0.069122877        0.075    1.6324032        1e-10 1.5360639e-12    65.101457    2.4517262         70.1 -0.0023175156   -0.1045769 -0.0015906778  0.099946147  -0.89011059   -1.0924786 
  165000    4.1649221    1.2830102    2.8819119  -0.15608573   0.85538872    1.0016128   0.75428211   -1.2298232            1  -0.20826828  -0.29936692  -0.29046868 -0.034969242 -0.00082601972  0.011186187 0.00076697393  -0.27822902   -0.2725569  0.069104918        0.075    1.6304807        1e-10 1.5356648e-12    65.118376    2.4392849         70.1   0.00985172  -0.11588328 -0.0003235024    0.1206342  -0.11681792    1.6802097 
  166000    4.1300692    1.2643326    2.8657366  -0.15547021   0.84293627   0.98882165   0.74206288   -1.2298232            1  -0.23547676  -0.30372063  -0.31505918 -0.087650479 -0.0017187053  0.011527035 -0.006751977  -0.30430415  -0.29894437  0.069128176        0.075    1.6317834        1e-10 1.5361817e-12    65.096467    2.4495435         70.1 -0.0028387488 -0.096961248 -0.0038453015   0.11248914  -0.41192736   -2.5861584 
  167000    4.1619128    1.2825832    2.8793296  -0.14733943   0.85510407   0.99145256   0.76083149   -1.2298232            1  -0.17930461  -0.27210509  -0.27635385  0.010545121 -0.0070216927 0.00042436925 -0.015069673  -0.24987281  -0.24294108  0.069117246        0.075    1.6242699        1e-10 1.5359388e-12     65.10676    2.4373211         70.1  0.006617218  -0.11201375 0.0044698379  0.099919802   -1.7319991   0.90586904 
  168000    4.1477812    1.2897496    2.8580317  -0.15584656   0.85988189    1.0147001   0.75282848   -1.2298232            1  -0.16825839  -0.27156226  -0.26143079  0.028217893 -0.0020241189 -0.0096566197 -0.019157899   -0.2380843  -0.23338701  0.069123409        0.075    1.6230637        1e-10 1.5360758e-12    65.100956       2.4447         70.1 0.0014383541  -0.12303458 -0.0025051182   0.11576852  -0.96868527    2.3104684 
  169000    4.1325156     1.258136    2.8743796  -0.15049515   0.83880495   0.99569917   0.73031292   -1.2298232            1  -0.19677923  -0.27491221   -0.2840938 -0.031331683 0.0016960931 -0.028775533 -0.015817436   -0.2645168  -0.26068828  0.069147393        0.075    1.6157727        1e-10 1.5366087e-12    65.078375    2.4506864         70.1 0.0080105677  -0.11900304 -0.0096460103    0.1156725    0.1800945  0.073632752 
  170000     4.144176    1.2813327    2.8628433  -0.15555903   0.85427032    1.0006215   0.75307565   -1.2298232            1  -0.19481967  -0.28442083  -0.28254023 -0.017497971 -0.0033036421 0.0037795359 -0.0060648059  -0.26466852  -0.25904466   0.06911836        0.075    1.6168653        1e-10 1.5359636e-12    65.105711    2.4401787         70.1 0.0027138739  -0.12391677 -0.0079419389  0.097894231    0.3123616    1.1168811 
  171000    4.1708416    1.2762932    2.8945484  -0.15005523    0.8509105   0.99850464   0.74885539   -1.2298232            1   -0.1861874  -0.28172283  -0.27604095 -0.00079841445 0.0026040911 -0.036355268  0.014726865   -0.2556448  -0.25027651  0.069123536        0.075    1.6187794        1e-10 1.5360786e-12    65.100837    2.4523215         70.1 -0.0030968044  -0.11676551 0.0012297486  0.099865906    1.1329209    1.9669021 
  172000    4.1582844    1.2774912    2.8807932  -0.14872506   0.85170917   0.99395593   0.75335458   -1.2298232            1  -0.22840218  -0.31666489  -0.31216212 -0.056379535 0.0033568619 -0.021118627  0.020266286  -0.29827689  -0.29219934  0.069102528        0.075    1.6233563        1e-10 1.5356117e-12    65.120628     2.436207         70.1 -0.0018020812  -0.11895827 6.2569562e-05   0.12445814   0.72026501   0.63043817 
  173000    4.1344593    1.2785416    2.8559176  -0.15184152   0.85240951    1.0133179   0.74114091   -1.2298232            1  -0.18045704  -0.26573357  -0.26870867 -0.0069288965   0.00327845 -0.0093103396  0.027483829  -0.24919892  -0.24549695  0.069114968        0.075    1.6199842        1e-10 1.5358882e-12    65.108907    2.4456554         70.1 0.0060917072  -0.12099595 -0.0031852687   0.12460982 -0.0014936159    2.5069638 
  174000    4.1321195    1.2742387    2.8578808  -0.15506167   0.84954073   0.99111276   0.75165287   -1.2298232            1  -0.18475332  -0.28040448  -0.28597458  0.012119095 0.00018974485  0.012063775 0.0095518718   -0.2544702  -0.24836798  0.069104299        0.075    1.6235304        1e-10 1.5356511e-12    65.118958    2.4403257         70.1 0.00085552205  -0.12056612 -0.0094522658    0.1285726   0.23211084   0.24291208 
  175000    4.1500804    1.2807393    2.8693411  -0.15412938    0.8538747    1.0086626    0.7468417   -1.2298232            1  -0.18990753  -0.28821722   -0.2748789 -0.0066264499 -0.0024002945 0.0076782752 -0.015799044  -0.25917816  -0.25464863  0.069122721        0.075    1.6209248        1e-10 1.5360605e-12    65.101603      2.44437         70.1 -0.0044078793 -0.099990971 -0.00053500271   0.11567084  -0.31112112    2.1125137 
  176000    4.1266766    1.2740659    2.8526107  -0.15604067   0.84942551   0.99118694   0.75140657   -1.2298232            1  -0.21066491  -0.29253278  -0.29860012 -0.040861826 0.0011305154  0.018969538 -0.0045819852  -0.28035894  -0.27428433  0.069117589        0.075    1.6293606        1e-10 1.5359464e-12    65.106437    2.4418029         70.1 0.0010466816  -0.11148137 0.0038931319   0.13732052   0.28257387    1.3916771 
  177000     4.144533     1.279959    2.8645739  -0.15897543   0.85335449    1.0059606   0.74783127   -1.2298232            1  -0.15575089  -0.25435564  -0.25437994  0.041482914 -0.00066541427 -0.012550507 -0.0071084637  -0.22511331  -0.22031856   0.06911547        0.075      1.62649        1e-10 1.5358993e-12    65.108434    2.4384905         70.1 -0.00084094401  -0.10884619 -0.0088333159  0.095602837  -0.64626341    2.7579653 
  178000    4.1190071    1.2778315    2.8411756  -0.16123225   0.85193606    1.0005703    0.7491613   -1.2298232            1  -0.19996576  -0.28952634  -0.27729824 -0.033072699  0.004110598 -0.012962443  0.017803528  -0.26945154  -0.26418745  0.069120763        0.075    1.6216393        1e-10 1.536017e-12    65.103448    2.4411338         70.1 -0.0018372775  -0.11800107 -0.0021708984   0.11159035   0.64832282  -0.30677432 
  179000    4.1359741    1.2622348    2.8737394  -0.15717122   0.84153765   0.98661265   0.74122491   -1.2298232            1   -0.1909317   -0.2871054   -0.2862222 0.0005325091 0.0026317342 -0.035422439  0.007889797  -0.25968136  -0.25425752  0.069119733        0.075    1.6185094        1e-10 1.5359941e-12    65.104418    2.4449179         70.1 -0.0091802654  -0.10377131 -0.008230876   0.11376825 -0.047230203    1.6356963 
  180000    4.1427921    1.2768985    2.8658936  -0.15054744   0.85131403    1.0038046   0.74587054   -1.2298232            1  -0.18369052   -0.2805824  -0.27359755 0.0031083848 -0.0031684926 -0.039056369 -0.0014202069  -0.25287108  -0.24811982  0.069112947        0.075     1.615684        1e-10 1.5358433e-12    65.110811    2.4529095         70.1 0.00044839917 -0.097426307 0.0031507905   0.10911072     1.445152  -0.44225867 
  181000     4.148358    1.2773785    2.8709795  -0.15077962   0.85163407    1.0057246   0.74508343   -1.2298232            1  -0.19778057  -0.29136624  -0.28450419 -0.017471273 0.0050181149 -0.0088620284 -0.011379442  -0.26688812   -0.2623331  0.069129059        0.075    1.6139546        1e-10 1.5362013e-12    65.095635    2.4525492         70.1 -0.012084128   -0.1133083 -0.0062791106   0.11155496  -0.30125835   0.20829556 
  182000    4.1455931    1.2831523    2.8624408  -0.15362963   0.85548344     1.007002   0.75071302   -1.2298232            1  -0.18824108  -0.27720973  -0.30473724  0.017223711 -0.0024117425 -0.034819129 0.0083250368  -0.25787079   -0.2528756  0.069108889        0.075    1.6070293        1e-10 1.5357531e-12    65.114634    2.4486518         70.1 -0.0017176444  -0.11205607 -0.0086883676   0.11637712   0.60354142  -0.42357138 
  183000    4.1456886    1.2784018    2.8672867  -0.16047622   0.85231631    1.0084871   0.74432616   -1.2298232            1  -0.21174388  -0.29419549  -0.29972098 -0.041315178 -0.0027407956 -0.032807501   0.02865721  -0.28078119  -0.27647372  0.069117382        0.075    1.6068621        1e-10 1.5359418e-12    65.106633    2.4539455         70.1 -0.0031349318  -0.11962436 -0.0033918457   0.11496517    0.4415774  -0.28501615 
  184000    4.1490038    1.2826534    2.8663504  -0.15475663   0.85515083    1.0104991   0.74773019   -1.2298232            1  -0.16626383  -0.25153477  -0.26697213  0.019715417 -0.0021104407  0.002604364 -0.0055264658  -0.23561687  -0.23112281   0.06913153        0.075    1.6020686        1e-10 1.5362562e-12    65.093308    2.4550555         70.1 -0.003477877  -0.11832876 0.0085374948   0.10512347  0.032842019    1.6547028 
  185000    4.1315754    1.2774199    2.8541555  -0.16172208   0.85166167    1.0047457   0.74580756   -1.2298232            1  -0.19984642  -0.29828382  -0.28777654  -0.01347891 -0.0017536749  -0.01185492 0.0040675606  -0.26902114  -0.26433612   0.06911559        0.075     1.599539        1e-10 1.535902e-12    65.108321    2.4480995         70.1 -0.0047028531   -0.1082154 -0.0047440235   0.10060002   0.12744437  -0.29281725 
  186000    4.1160419    1.2636428     2.852399  -0.15286292   0.84247642   0.98597059   0.74325773   -1.2298232            1  -0.15520931  -0.26148344  -0.25456049  0.050415993 0.0015213437 -0.010004472 -0.0088484176  -0.22414753  -0.21849393  0.069141526        0.075    1.5919326        1e-10 1.5364784e-12    65.083897    2.4729797         70.1 0.0047085943  -0.13278148 -0.0077674776   0.11586175  -0.73929751     1.149531 
  187000    4.1608403    1.2788023     2.882038  -0.15308071    0.8525833   0.99259645   0.75577448   -1.2298232            1  -0.19942718  -0.29078063  -0.28661767 -0.020883234 0.00068334949 -0.0054717459 0.0098495435  -0.26952634  -0.26313707  0.069123034        0.075     1.597572        1e-10 1.5360674e-12    65.101309    2.4534685         70.1 -0.0046983263  -0.11875259 0.0056247969   0.11938932  -0.46517159   -1.3018243 
  188000    4.1554375    1.2667405    2.8886971  -0.15457989   0.84454163   0.99949865   0.73739071   -1.2298232            1  -0.20304803  -0.28852794  -0.29555363 -0.025062526 0.0060473808 -0.018645628 -0.019252619  -0.27144207  -0.26720095  0.069105825        0.075    1.6011726        1e-10 1.535685e-12    65.117521    2.4432447         70.1 0.00018586592  -0.11691178 0.0048390599   0.11767823    1.4987619  -0.50812329 
  189000    4.1457596    1.2801326     2.865627  -0.15398534   0.85347019   0.99813975   0.75343916   -1.2298232            1   -0.2224271  -0.31538988  -0.28688148 -0.065009961 0.00039636097 -0.0080567837 -0.0024979673  -0.29230966   -0.2864928  0.069123902        0.075    1.6024668        1e-10 1.5360867e-12    65.100492    2.4505761         70.1 -0.001351634  -0.10136065 -0.0029864182   0.12061848    1.0354609   0.13048543 
  190000      4.15752    1.2699298    2.8875902  -0.15471115   0.84666796   0.99666681   0.74294835   -1.2298232            1  -0.17538281  -0.27686252  -0.26933932  0.020053413 0.0010932899 -0.021792786  0.017690229  -0.24429233  -0.23935396  0.069118788        0.075    1.6101535        1e-10 1.5359731e-12    65.105308    2.4526796         70.1 0.00026047937  -0.11381622 -0.0076983247   0.12900586    1.4033846  -0.79867181 
  191000    4.1514251    1.2836208    2.8678043  -0.15119172   0.85579581    1.0055085   0.75227514   -1.2298232            1   -0.1945084  -0.29821381    -0.282664 -0.002647394 0.0024911929 0.0061075072  0.010373108  -0.26428299  -0.25904706  0.069127831        0.075    1.6063072        1e-10 1.536174e-12    65.096792    2.4627267         70.1 -0.0055986204  -0.11397757 0.0097138515   0.12121755   0.14694484   -1.6833413 
  192000    4.1604869    1.2921306    2.8683563  -0.15472515   0.86146934    1.0229371   0.74981451   -1.2298232            1  -0.16614952  -0.26938052  -0.26927038  0.040202327 -0.0035708677 0.0050450893 -0.015819994  -0.23569589  -0.23180684  0.069099179        0.075    1.6059448        1e-10 1.5355373e-12    65.123784     2.437243         70.1 -0.007067747  -0.11032733 -0.0013421808   0.13975465   0.98879292   0.48465485 
  193000    4.1547089    1.2849717    2.8697372  -0.15400535   0.85669644    1.0126395   0.74886433   -1.2298232            1  -0.20640061  -0.29501833  -0.28775008 -0.036433417 0.00060099068 -0.013072428  0.009064372  -0.27585884  -0.27139697  0.069113613        0.075    1.6033431        1e-10 1.5358581e-12    65.110184    2.4438686         70.1 0.0071835104  -0.10750073 -0.0098030476   0.11496714    1.9067606  -0.98934148 
  194000    4.1485473    1.2883313     2.860216  -0.15724137   0.85893633    1.0147164   0.75121724   -1.2298232            1  -0.20522558  -0.29050315  -0.28380243 -0.041371161 0.0030766216 -0.0050944691 0.0043342293  -0.27490205  -0.27035524  0.069109152        0.075    1.6062126        1e-10 1.5357589e-12    65.114386    2.4462306         70.1 -0.0048824198  -0.11603812  0.007918087   0.11737118    1.3624415  -0.94184987 
  195000      4.14442    1.2728311    2.8715889  -0.15862043   0.84860229   0.99370539   0.74827079   -1.2298232            1  -0.21114693   -0.3042099  -0.29944422 -0.029786652 -0.0071973691 0.0038520785  0.023328452  -0.28055011    -0.274928  0.069125246        0.075    1.6015519        1e-10 1.5361166e-12    65.099226    2.4489464         70.1 0.0048260689  -0.10607643 -0.0061304325   0.10830508   0.38934485   -1.5854968 
  196000    4.1427006    1.2755173    2.8671833  -0.15505646   0.85039317   0.99236496   0.75222875   -1.2298232            1  -0.17908311  -0.26368103  -0.27214923 -0.0014190684 -0.0014366779 -0.017426777 -0.0017889441   -0.2488534  -0.24277815  0.069129591        0.075    1.5985721        1e-10 1.5362131e-12    65.095135     2.440355         70.1 0.0087766611  -0.10200613 0.0027515932   0.10632229   0.76733615   -1.6550999 
  197000    4.1240419    1.2598792    2.8641628  -0.15378508   0.83996716    0.9992845    0.7297984   -1.2298232            1   -0.2055668  -0.28648711  -0.29168947 -0.038523829 -0.0054773771 -0.0057204095  -0.00772838  -0.27325665  -0.26970597  0.069129556        0.075     1.611536        1e-10 1.5362124e-12    65.095167    2.4491928         70.1 -0.00068277971  -0.10574745 -0.0078861889   0.13524906   0.68579751  -0.14183964 
  198000    4.1524623    1.2796051    2.8728572  -0.15362073   0.85311856    1.0076781   0.74624352   -1.2298232            1  -0.14171526  -0.23595193   -0.2496947  0.060500841 -0.0024845949 -0.023096028  0.019325206  -0.21093041  -0.20639318  0.069103162        0.075    1.6137704        1e-10 1.5356258e-12     65.12003    2.4421939         70.1 -0.0032929219  -0.11472146 0.0028554826   0.12282586     1.599732   0.10894639 
  199000    4.1494144    1.2817599    2.8676545  -0.15685753   0.85455512    1.0026843   0.75213011   -1.2298232            1  -0.15774401  -0.26197346  -0.24060003  0.029341447 0.00017920111 -0.018785726  0.021813925  -0.22750515   -0.2221014  0.069133161        0.075    1.6127319        1e-10 1.5362925e-12    65.091773    2.4544648         70.1 0.0039606418  -0.12138191 -0.010842153   0.10158166    1.1325715   -1.4031564 
  200000    4.1643034    1.2918495    2.8724539  -0.15542858   0.86128192    1.0037955   0.76274361   -1.2298232            1  -0.14354872  -0.25561923  -0.22594184  0.050914907 -0.0023901187 -0.014282142  0.012021752  -0.21429428  -0.20797743  0.069123377        0.075    1.6133196        1e-10 1.536075e-12    65.100986    2.4469512         70.1 0.0039406182  -0.10013782 0.00023862952   0.10785359   0.34662428   -1.5340227 
  201000    4.1437029    1.2787011    2.8650018  -0.15116857   0.85251581    1.0043296   0.74754079   -1.2298232            1  -0.17707203  -0.26946295  -0.26123384 -0.00051930971 -0.002737233 0.0071681704 -0.021410569  -0.24640751  -0.24153502  0.069158114        0.075    1.6115595        1e-10 1.536847e-12    65.068287     2.477779         70.1 -0.0088492506  -0.11696263 0.0095570339   0.13119573  -0.13929222   -1.7106457 
  202000    4.1426198    1.2705849    2.8720349  -0.15137446   0.84710474   0.99417433   0.74541226   -1.2298232            1  -0.26846017  -0.33892979  -0.35039723  -0.11605349 0.00058826142 -0.0067149414 0.0024407304  -0.33759822  -0.33227135  0.069115843        0.075    1.6163489        1e-10 1.5359076e-12    65.108083     2.446449         70.1  -0.01029784  -0.11216158 0.0042480684    0.1227638   0.97570586    -1.304141 
  203000    4.1571611    1.2893655    2.8677956  -0.15328955   0.85962581   0.99754717   0.76426522   -1.2298232            1  -0.16014613  -0.26640306  -0.24611091   0.03207558 0.0028125049 -0.0039864194 -0.0073723834  -0.23103282  -0.22417379  0.069111248        0.075    1.6194936        1e-10 1.5358055e-12    65.112411    2.4495753         70.1 -0.010139204  -0.12336744 0.0015636798   0.11576776      1.07637   -2.7264873 
  204000    4.1461089    1.2750008    2.8711081  -0.15670865   0.85004883   0.99589492    0.7492033   -1.2298232            1  -0.14649933   -0.2603853  -0.25408589  0.074973194 -0.0013531926  0.031698912 0.00065696082  -0.21598901  -0.21042094  0.069119888        0.075    1.6162278        1e-10 1.5359975e-12    65.104272    2.4435313         70.1 0.0019726156  -0.11501507 0.0020823639   0.12599283  -0.45781117   -1.7866893 
  205000    4.1426719    1.2781278    2.8645441  -0.15636612   0.85213359    1.0027607   0.74797972   -1.2298232            1  -0.18612223   -0.2763274  -0.26556586 -0.016473424 0.0039775321 -0.010630372 -0.0059693391  -0.25549841  -0.25048452  0.069126886        0.075     1.616882        1e-10 1.536153e-12    65.097681    2.4407354         70.1  0.001859828  -0.10562018  0.012650919   0.10925106   0.84450747 -0.018765818 
  206000     4.131156    1.2893532    2.8418028  -0.15006681   0.85961765    1.0035436   0.76010184   -1.2298232            1  -0.24113235  -0.31116886  -0.32064863 -0.091579554 0.0078707362  0.026524775 -0.006124901  -0.31163288  -0.30554489  0.069137172        0.075    1.6201753        1e-10 1.5363816e-12    65.087996    2.4508819         70.1 -0.0016315271 -0.099571713 0.0051490742   0.11602538   0.35023477   -1.7460539 
  207000    4.1488444    1.2815121    2.8673322  -0.15251745   0.85438997    1.0034756   0.75130307   -1.2298232            1  -0.24059577  -0.32944836  -0.30680949  -0.08552945 0.00078624176  0.028231328 -0.020460699   -0.3102802  -0.30500394  0.069117073        0.075    1.6203752        1e-10 1.535935e-12    65.106923    2.4474428         70.1 -0.0010918143 -0.095348184 -0.0056633152   0.11535384  -0.24429752   -1.0106447 
  208000    4.1487238    1.2769317    2.8717921  -0.15438049   0.85133618   0.99663816   0.75086732   -1.2298232            1  -0.16115136  -0.25137944  -0.25737559  0.025300955 -0.0065434144 -0.0060118726 0.0051578482  -0.23079537  -0.22512067  0.069124943        0.075    1.6170162        1e-10 1.5361098e-12    65.099511    2.4431139         70.1 -0.008245518 -0.093942698 -0.00066360121   0.10868207    1.2296719    1.6495409 
  209000    4.1505697    1.2794631    2.8711066  -0.14893285   0.85302387    1.0132449   0.74223097   -1.2298232            1  -0.17221527  -0.26247364  -0.27226957  0.018097393 -0.0014847832 -0.028973084 0.0060527402  -0.24105825  -0.23725049  0.069128133        0.075    1.6075266        1e-10 1.5361807e-12    65.096507    2.4514116         70.1 -0.0030122576   -0.1224218 -0.010540945   0.12170203 -0.0024442301    1.4714102 
  210000    4.1691895    1.2929483    2.8762412  -0.15299665    0.8620145    1.0086004   0.76065814   -1.2298232            1  -0.18604116   -0.2704085  -0.27393344 -0.013781548 -0.0041869504 -0.017757761 0.0050032046  -0.25659329  -0.25077828  0.069101972        0.075    1.6116166        1e-10 1.5355994e-12    65.121152    2.4392543         70.1 0.0025012298 -0.088088769 -0.0016573361  0.093773182     1.018788   0.62135385 
  211000    4.1499833    1.2848385    2.8651448  -0.15675143   0.85660765    1.0004374   0.75715805   -1.2298232            1  -0.20734329  -0.30143439  -0.29271034 -0.027885146 0.00030694126 -0.0094669853 -0.0083293895  -0.27757078  -0.27155646  0.069110805        0.075    1.6134219        1e-10 1.5357957e-12    65.112828     2.447117         70.1 -0.0019896946  -0.11722956 0.0021048163   0.10981886   0.81644886  -0.13687523 
  212000    4.1650404    1.2873599    2.8776804  -0.15312941   0.85828871     1.008621   0.75433947   -1.2298232            1  -0.17713056  -0.26256683  -0.27663832  0.007813459 -0.0047291157 -0.054600331 -0.0083133721  -0.24709663    -0.241869  0.069117213        0.075    1.6095483        1e-10 1.5359381e-12    65.106792    2.4374037         70.1 -0.009306915  -0.11637511 0.0048391413   0.10789932    1.1390098    1.6518943 
  213000    4.1271396    1.2776349    2.8495047  -0.15652518   0.85180501    1.0013304   0.74841352   -1.2298232            1   -0.1916054  -0.28223783  -0.28472234 -0.0078560363 -0.00014997052  -0.03312786 0.0021579799  -0.26102182  -0.25587589  0.069136987        0.075    1.6004684        1e-10 1.5363775e-12     65.08817    2.4664577         70.1 -0.00091105868  -0.10886833 -0.0018292463   0.12517957   0.65534934   -1.3442727 
  214000    4.1480659    1.2784936    2.8695722  -0.15941304   0.85237751    1.0040301   0.74751402   -1.2298232            1  -0.20177733   -0.2896084  -0.29626108 -0.019462502  -0.00672699 -0.030661555  0.022483448  -0.27111032   -0.2662211  0.069110931        0.075    1.5886654        1e-10 1.5357985e-12    65.112709    2.4479512         70.1 0.0089184571  -0.11701059 0.0034623717   0.10913002    2.5128623   -1.7304713 
  215000    4.1368261    1.2774605    2.8593655  -0.15416244   0.85168874    1.0037978   0.74650933   -1.2298232            1  -0.17227836  -0.27581905  -0.27104388   0.03002783 -0.00012508115 0.0049510137 -0.010294993  -0.24151817  -0.23670722  0.069128032        0.075    1.6019229        1e-10 1.5361785e-12    65.096602    2.4364153         70.1 -0.0075759323  -0.10333821 0.0025896164   0.10478694    1.2836458    2.3415072 
  216000    4.1503788    1.2790257    2.8713531   -0.1551159   0.85273225   0.99597789   0.75368653   -1.2298232            1  -0.21978571    -0.299482  -0.31099976 -0.048875383 0.0019659078 -0.027641866   0.01257621  -0.28969121  -0.28371265  0.069123706        0.075    1.6053079        1e-10 1.5360824e-12    65.100676    2.4529981         70.1 -0.0028433659  -0.13104145 0.0024775713   0.10997789    1.8000413   -1.2179541 
  217000    4.1541071    1.2852462    2.8688608   -0.1591507    0.8568795    1.0104063   0.75071947   -1.2298232            1  -0.19990622  -0.28520046  -0.29071289 -0.023805318  -0.00109848  -0.01347058 -0.0075713102  -0.26953653  -0.26475925  0.069113054        0.075    1.5995622        1e-10 1.5358456e-12     65.11071    2.4529279         70.1 -0.0063712448 -0.098842247 -0.0073161395  0.095315374   0.53197388   -1.4150409 
  218000    4.1493434    1.2721504    2.8771929  -0.15312768   0.84814847   0.98857889   0.75105048   -1.2298232            1  -0.23036021  -0.29913279  -0.31810971 -0.073838122 -4.0721368e-05 -0.019002407 0.0039124841  -0.30002121  -0.29381223  0.069112463        0.075    1.6036984        1e-10 1.5358325e-12    65.111267    2.4437719         70.1  0.007587011  -0.10417365 -0.0026178657   0.11167352    1.7293291   0.51938694 
  219000    4.1311242    1.2664169    2.8647073  -0.15172532   0.84432589    1.0024042   0.73501498   -1.2298232            1  -0.19167297  -0.28968288  -0.28608881 0.00075279351 0.0010989684 -0.024456733 0.0032124019  -0.25984665  -0.25601237  0.069103898        0.075    1.5992667        1e-10 1.5356422e-12    65.119337    2.4363159         70.1 0.0040516362    -0.117305 0.00041809896   0.12754182    1.1012051  -0.66170856 
  220000    4.1462577     1.275037    2.8712206  -0.15364697   0.85007299   0.98871132   0.75421532   -1.2298232            1  -0.20040888  -0.28948331  -0.30311367 -0.0086296532 -7.9503921e-05 -0.014833339  0.021573461  -0.27036343  -0.26386941   0.06912265        0.075    1.5960704        1e-10 1.5360589e-12    65.101671    2.4501298         70.1 -0.0063645836   -0.1144544 0.0016435421  0.098850307    1.4068117   -0.8237479 
  221000    4.1508123    1.2930132    2.8577991  -0.16313592   0.86205775   0.99403614   0.77080999   -1.2298232            1  -0.22832614  -0.32572693  -0.31324937 -0.046002114 0.00056947978 0.0024512989 -0.0021849754  -0.29981986  -0.29212844  0.069111847        0.075    1.6013499        1e-10 1.5358188e-12    65.111847    2.4426979         70.1 -0.0041108397  -0.10310921 0.0079883194   0.10155511    0.3686888   0.21866681 
  222000    4.1428674    1.2641614    2.8787059  -0.15530814   0.84282215    1.0020072   0.73274522   -1.2298232            1  -0.23003666  -0.32248389  -0.30601195 -0.061614138 0.0022222226 -0.0052169785 -0.0095494961  -0.29799982  -0.29435058   0.06909857        0.075    1.5993912        1e-10 1.5355238e-12    65.124358    2.4360958         70.1 -0.0029727767  -0.11899077 0.0022363217   0.12261456   0.30469639  -0.30964267 
  223000    4.1435989    1.2787533    2.8648456   -0.1536622   0.85255061    1.0002125   0.75044876   -1.2298232            1  -0.14870509  -0.24924529  -0.26438614  0.067516146 -0.0011833521  0.036275653 -0.012379653  -0.21831029  -0.21290383  0.069109024        0.075     1.593071        1e-10 1.5357561e-12    65.114507    2.4361812         70.1 -0.011172411  -0.11822569 -0.002068099   0.11560129  -0.28978156    1.8461488 
  224000    4.1348149    1.2668832    2.8679317  -0.15147651   0.84463676   0.98556825   0.74719169   -1.2298232            1   -0.1968696  -0.29211137  -0.29318392 -0.0053135067 -0.002929106  0.020443033  0.013469743  -0.26617269  -0.26012839  0.069109275        0.075    1.6024919        1e-10 1.5357617e-12    65.114271    2.4365207         70.1 -0.011703277  -0.10885151 -0.00045859273   0.10437491  -0.25902329   0.33513966 
  225000    4.1432276    1.2733127     2.869915  -0.14994988   0.84892333   0.99555323   0.74753529   -1.2298232            1  -0.20138613  -0.30638901  -0.28182947 -0.015939895 -0.00027931791  0.005721249 -0.0072361122  -0.27072109   -0.2652858  0.069137842        0.075    1.5992783        1e-10 1.5363965e-12    65.087365    2.4655657         70.1 -0.0066107126  -0.11204792 0.0087710898   0.10766821   -1.0705216   0.10135221 
  226000    4.1581996    1.2876947    2.8705049   -0.1509351    0.8585119    1.0061429   0.75643205   -1.2298232            1  -0.18603806  -0.26726341  -0.28355904 -0.0072917176 -0.0012583717 0.0027616983 -0.00068848409  -0.25619821  -0.25061743  0.069120527        0.075      1.60009        1e-10 1.5360117e-12     65.10367    2.4451727         70.1 -0.0054595269  -0.10702748 -0.00023335909   0.10972684   0.66636285     1.529719 
  227000    4.1567247    1.2783383    2.8783864  -0.14852521   0.85227397    1.0109095   0.74257821   -1.2298232            1  -0.19570802   -0.2770767  -0.28038471 -0.029662639 -0.0023223167 -0.029840183 -0.0022167644   -0.2645832  -0.26059334  0.069118237        0.075    1.6059609        1e-10 1.5359608e-12    65.105828    2.4437212         70.1 -0.0016345925  -0.10934549 0.00077980424   0.12850376    1.2128574   0.67997284 
  228000     4.141978     1.274572     2.867406   -0.1557353   0.84976291   0.99319414   0.75058847   -1.2298232            1  -0.13564313  -0.24139685  -0.24246921  0.076936671 0.0031635247 -0.023935801 -0.00015750819  -0.20526128  -0.19939139  0.069122818        0.075    1.6131986        1e-10 1.5360626e-12    65.101512    2.4556228         70.1 -0.003948456  -0.10858795 0.0031761331   0.11286373    1.4608493    1.0289463 
  229000    4.1613696    1.2920453    2.8693242  -0.15780425   0.86141249    1.0160372   0.75449315   -1.2298232            1   -0.2238763  -0.31137667  -0.30914589 -0.051106352 -0.003417038 -0.015606986 -0.015635921  -0.29385662  -0.28909075  0.069105221        0.075    1.6168627        1e-10 1.5356716e-12     65.11809    2.4435004         70.1 -0.0099053148 -0.093225032 -0.0069544523  0.099949803   0.97212971   -2.4821321 
  230000    4.1275201    1.2700054    2.8575147  -0.15413558   0.84671836    1.0057346   0.73675861   -1.2298232            1  -0.26435183  -0.34273538  -0.34351574  -0.10680436 0.00052067918 0.0011431396 0.0045860657  -0.33268724    -0.328905  0.069115813        0.075    1.6167458        1e-10 1.5359069e-12    65.108111    2.4415632         70.1 0.0013902466  -0.11003395 -0.0011180909   0.13030687  0.064169265    0.6115484 
  231000    4.1278325    1.2652072    2.8626253  -0.15117266   0.84351939    1.0057313   0.73134787   -1.2298232            1  -0.15667149  -0.25413668  -0.25164328  0.035765485 -0.0001223154  0.011522339 -0.0062537012  -0.22450505  -0.22122445  0.069115767        0.075    1.6093866        1e-10 1.5359059e-12    65.108154    2.4542857         70.1 -0.0019933562  -0.11461884 -0.0083158396   0.10871031    3.0112757   -1.4585326 
  232000    4.1319685    1.2723294    2.8596391  -0.15407967   0.84826778    1.0027915   0.74141708   -1.2298232            1  -0.12033065  -0.23639225  -0.23662787   0.11202817 -0.0031292665  0.016791536 0.0071498801  -0.18909814  -0.18469491  0.069135444        0.075    1.6082426        1e-10 1.5363432e-12    65.089623    2.4465084         70.1 -0.0020749722  -0.13532625 0.00080186299   0.11635267   0.33861625   0.62530093 
  233000     4.135937    1.2773211    2.8586159  -0.15525787   0.85159576    1.0147936   0.73874279   -1.2298232            1  -0.16552682  -0.27349421  -0.25927004    0.0361838 0.0015713833 0.0062084149 -0.018327689  -0.23404626  -0.23066144  0.069115363        0.075    1.6086594        1e-10 1.535897e-12    65.108535    2.4504585         70.1 -0.0056195198  -0.11769448 0.0097840897   0.12317459   0.41318164  -0.81390119 
  234000    4.1588241    1.2962016    2.8626225  -0.15185242    0.8641835    1.0146029   0.76017452   -1.2298232            1  -0.21474222  -0.29777691  -0.29912461 -0.047325126 0.0011426796  0.018161067 -0.022249548  -0.28524949   -0.2798646  0.069108208        0.075    1.6053792        1e-10 1.535738e-12    65.115275    2.4464914         70.1 -0.00063798334   -0.1332964 -0.0031230852   0.11679639  -0.80593949   -2.3445982 
  235000     4.151021    1.2735787    2.8774422  -0.15569423   0.84910073   0.99756889   0.74644062   -1.2298232            1  -0.18255945  -0.27656498  -0.29041987  0.019306497 -0.0046610712 -0.0079928565  0.014575799  -0.25179288   -0.2465885  0.069135535        0.075    1.6111405        1e-10 1.5363452e-12    65.089537    2.4449472         70.1 -0.0070116078  -0.11001339 -0.0040524472    0.1151943     2.273459   0.05145153 
  236000    4.1347656     1.268676    2.8660896  -0.15516675   0.84583204    1.0122625   0.73074151   -1.2298232            1  -0.18450345  -0.27414405  -0.27906383 -0.00030245562 0.0034665993 -0.0055716885   0.01270711  -0.25228076  -0.24947561  0.069146539        0.075    1.6130389        1e-10 1.5365898e-12    65.079179     2.442614         70.1 -0.0057310361  -0.12313129 -0.0010063612   0.11022758    1.1592194   -1.8809091 
  237000    4.1448558    1.2869492    2.8579066  -0.15817943   0.85801489    1.0195777   0.74629397   -1.2298232            1  -0.19080288  -0.27088018   -0.2927242 -0.0088042564 -0.001494287 -0.0098038396 -0.013162056  -0.26002271  -0.25624457  0.069097274        0.075    1.6187978        1e-10 1.535495e-12     65.12558    2.4363547         70.1 -0.011163425  -0.12081292 -0.011697236   0.10278554   0.99093247   -1.7551717 
  238000    4.1478588    1.2843666    2.8634922  -0.15412375   0.85629301   0.99752291   0.75864255   -1.2298232            1  -0.19667663  -0.29693554  -0.28170647 -0.011387882 0.0014283971 0.0010036555 -0.0073703027  -0.26704181  -0.26070273  0.069120263        0.075    1.6211354        1e-10 1.5360058e-12    65.103919    2.4579397         70.1 -0.00032456997  -0.11519552 -0.0062715958   0.11316259  -0.23729162   -1.9327375 
  239000    4.1312574    1.2673426    2.8639148   -0.1499986   0.84494304   0.98887336   0.74542276   -1.2298232            1  -0.18913578  -0.28470674    -0.277843 -0.0048575897 0.0020452009  0.039170525 -0.0064667202   -0.2582748   -0.2526067  0.069125072        0.075    1.6161879        1e-10 1.5361127e-12    65.099389    2.4522712         70.1 0.0019613838  -0.12680047 -0.011246317    0.1162113   0.71301062    1.2809124 
  240000    4.1546344    1.2879708    2.8666635  -0.15374138   0.85869598    1.0140057   0.75130236   -1.2298232            1  -0.18469769  -0.27465022  -0.29003629  0.010593448 0.00039777262 0.0076686702  0.019323083  -0.25438205  -0.24978174  0.069133517        0.075    1.6215513        1e-10 1.5363004e-12    65.091437    2.4631963         70.1  -0.00220419  -0.10297048 0.0024604533   0.10655448   0.19370931   0.15387896 
  241000    4.1568186    1.2795487    2.8772699    -0.156895   0.85308092   0.99953447   0.75181533   -1.2298232            1  -0.17643879  -0.27817472  -0.24783989 -0.0033017685 0.0045057427 0.0054424736 0.0018893207  -0.24617074  -0.24059401  0.069140451        0.075    1.6291129        1e-10 1.5364545e-12     65.08491    2.4505225         70.1 -0.0019550708   -0.1115918 -0.00073927658   0.12715557   0.44708311   -1.9713538 
  242000    4.1284002    1.2729749    2.8554253   -0.1510986   0.84869812   0.99486198   0.74763257   -1.2298232            1  -0.20935588  -0.30433861  -0.30442288  -0.01930615 0.00011318696  0.012217657 -0.00099766695  -0.27869987  -0.27321119  0.069111005        0.075    1.6220678        1e-10 1.5358001e-12     65.11264    2.4351743         70.1 -0.0034854443   -0.1177293 0.0075758778    0.1240986   -1.0386197  -0.16637413 
  243000     4.126364    1.2784487    2.8479154  -0.15685338   0.85234752   0.99899698   0.75094629   -1.2298232            1  -0.19312473  -0.28542838  -0.28215442 -0.011791394 -0.0027260255 -0.00057365491 0.0095723555  -0.26277607  -0.25724545   0.06911491        0.075    1.6208845        1e-10 1.5358869e-12    65.108961    2.4409883         70.1 -0.0013226298  -0.12962169 0.0062690096   0.11775099   0.69078013   -1.0498259 
  244000    4.1476537     1.290559    2.8570947    -0.157079   0.86042152    1.0118655   0.75570317   -1.2298232            1  -0.18642465  -0.27990682  -0.29860242  0.019235276  0.003726144 -0.025950502 0.00053991311   -0.2565172  -0.25137134  0.069108342        0.075     1.623712        1e-10 1.5357409e-12    65.115149     2.441622         70.1 -0.0067025564  -0.10895413 -0.0056716898   0.11885087   0.67780327  -0.77051213 
  245000    4.1452549    1.2797538    2.8655011  -0.15848298   0.85321769    1.0121312   0.74332964   -1.2298232            1   -0.1868929  -0.28735095  -0.27565555 0.0023277921 -0.0019488013 -0.029537248 0.0018073828  -0.25583779  -0.25185664  0.069142099        0.075    1.6300313        1e-10 1.5364911e-12    65.083358    2.4627931         70.1 -6.0083982e-05  -0.11541082 -0.010590331   0.12089193 -0.054457544   -1.2146275 
  246000    4.1470266    1.2784036     2.868623  -0.15375917    0.8523175    1.0015154   0.74915267   -1.2298232            1  -0.19799917  -0.28684181  -0.28460032 -0.022555369  -0.00748296 -0.050367398 -0.0016053404  -0.26748415  -0.26228153  0.069125829        0.075    1.6220022        1e-10 1.5361295e-12    65.098677    2.4462077         70.1 0.0059818288  -0.10153526 -0.0062552507  0.099867983  -0.27297351  -0.94432406 
  247000    4.1442158    1.2782124    2.8660034  -0.15445886   0.85219002    1.0047581   0.74669298   -1.2298232            1  -0.13541265  -0.23511976  -0.24073464  0.069616438 -0.0037312374  0.012231575 0.0012703056  -0.20466949  -0.19990315  0.069134794        0.075     1.623996        1e-10 1.5363288e-12    65.090235    2.4474416         70.1 -0.0059992848  -0.11082119 -0.0066805797   0.10908749  -0.52720333    1.3148917 
  248000    4.1495101    1.2857746    2.8637355  -0.15238535   0.85723173    1.0083854   0.75271399   -1.2298232            1  -0.14535068  -0.24254781  -0.25118719  0.057682956 -0.00024219187 -0.026041552 -0.008335542  -0.21516598  -0.21007399   0.06912126        0.075    1.6174462        1e-10 1.536028e-12     65.10298    2.4512167         70.1 0.0028246969  -0.10775676 -0.0020488147   0.11294709   0.76363317 -0.084330673 
  249000    4.1483189    1.2791719    2.8691471  -0.15255998   0.85282968   0.99520137   0.75438875   -1.2298232            1  -0.20699812   -0.2963889  -0.30940445 -0.015201018 0.0010064238 -0.043109447 0.0048820064  -0.27696876  -0.27087522  0.069110881        0.075     1.612043        1e-10 1.5357974e-12    65.112757    2.4470992         70.1 0.0040263194 -0.090570079 -0.0073289191   0.11931523  -0.23847293   -1.8679415 
  250000    4.1478034    1.2741836    2.8736198  -0.15675445   0.84950397   0.98311628   0.75712433   -1.2298232            1  -0.21379663  -0.28974979   -0.2947931 -0.056847009 -0.0015959374 -0.013545175  0.020259547  -0.28402099  -0.27689804  0.069127556        0.075    1.6159911        1e-10 1.5361679e-12     65.09705    2.4584443         70.1  0.012114431  -0.11129209 -0.0059167243  0.096282039   0.40492724    1.0890822 
  251000    4.1601455    1.2839344    2.8762112  -0.14966631   0.85600486    1.0030488   0.75433098   -1.2298232            1  -0.20942499  -0.28697452  -0.29301722 -0.048283223 0.0030600961 0.0073871353  0.002185844  -0.27939026  -0.27380577  0.069116802        0.075    1.6138995        1e-10 1.5359289e-12    65.107179     2.446041         70.1 -0.0071305627  -0.11300539 0.0064663707   0.11213604  -0.45323269  -0.86155079 
  252000    4.1412937    1.2730009    2.8682928  -0.15715761   0.84871545   0.98462583   0.75474542   -1.2298232            1  -0.15827334  -0.25946863  -0.26027825  0.044926877 0.0056280224 0.0092293303 2.4778658e-06  -0.22827705  -0.22147164  0.069117171        0.075    1.6110672        1e-10 1.5359371e-12    65.106831    2.4438064         70.1 0.0050748445  -0.11214997 -0.011443644   0.11641515   0.89517289    1.1834838 
  253000    4.1384841    1.2741926    2.8642916   -0.1552851   0.84950996   0.99870394   0.74634761   -1.2298232            1  -0.20306079  -0.29311224  -0.29412752 -0.021942605 0.0032014262 -0.017064827  0.017239283  -0.27228559  -0.26716269  0.069120691        0.075    1.6093412        1e-10 1.5360153e-12    65.103516    2.4489665         70.1 0.0045419306  -0.11735776 -0.0081821924   0.12643632  -0.25227992   -1.2343652 
  254000    4.1535625    1.2895072    2.8640553  -0.15805373   0.85972033    1.0004674    0.7624043   -1.2298232            1  -0.17376282  -0.25935828  -0.27886788  0.016937707 -0.00095960114   -0.0267542 -1.6682442e-05   -0.2444769  -0.23797791  0.069116702        0.075    1.5992749        1e-10 1.5359267e-12    65.107274    2.4528381         70.1 -0.005365352 -0.092490612 -0.0062517192   0.11649605   0.52835461    1.4429168 
  255000       4.1359    1.2739162    2.8619838  -0.15417395   0.84932571   0.99893567   0.74587548   -1.2298232            1  -0.17979799  -0.27803442  -0.28008256  0.018723004 0.0048571072 -0.017297859 -0.0007680464  -0.24897901  -0.24391477  0.069121365        0.075    1.5934542        1e-10 1.5360303e-12    65.102881    2.4448926         70.1 0.0003774986  -0.12813191 -0.0094575999   0.11472078   -1.4797048    2.0715555 
  256000    4.1357227    1.2753867     2.860336  -0.15834765   0.85030609   0.98981932   0.75384302   -1.2298232            1  -0.16547651  -0.26400044   -0.2600464   0.02761732 -0.00088675909 -0.0063532965  0.024996166  -0.23539652  -0.22900815  0.069113502        0.075    1.5972212        1e-10 1.5358556e-12    65.110288    2.4499201         70.1 -0.0013991917  -0.10680889 0.0039922313    0.1098887   0.39162325    1.9489252 
  257000    4.1496708    1.2773032    2.8723676  -0.15227673   0.85158382     1.002431    0.7472776   -1.2298232            1  -0.17252679  -0.25639111  -0.28501468  0.023825418 0.0015528166 -0.023390532  0.017219461  -0.24183785  -0.23686792  0.069130933        0.075    1.5940774        1e-10 1.536243e-12     65.09387    2.4566049         70.1 -0.0038931225   -0.1035376 -0.00068684972   0.11996113 -0.043520754   0.64306506 
  258000    4.1374226    1.2855646     2.851858  -0.15506497   0.85709176    1.0076101   0.75301364   -1.2298232            1   -0.2153063  -0.30282937  -0.29509961 -0.047989907 0.0067998493 -0.0078856983 -0.0021266157  -0.28514938  -0.27997984  0.069148529        0.075    1.5953792        1e-10 1.536634e-12    65.077306    2.4557342         70.1 -0.0036267938  -0.12299161 -0.0042914592   0.10178567  -0.17194516   0.38836493 
  259000    4.1446156    1.2843442    2.8602714   -0.1559466    0.8562781    1.0082535   0.75119163   -1.2298232            1  -0.23815141  -0.32288494  -0.31410807 -0.077461202 0.0014350238 0.0038460268 -0.019535211   -0.3078255  -0.30286625  0.069121419        0.075     1.603103        1e-10 1.5360315e-12     65.10283     2.461092         70.1 0.0015403452  -0.10158941 -0.002631826   0.11878698   -1.7257533   0.15964544 
  260000    4.1306685    1.2745701    2.8560984  -0.15683728   0.84976168   0.99228407   0.75121617   -1.2298232            1  -0.18964651  -0.28897872  -0.28641993 0.0064591174 0.0068481046 -0.022765992 -0.013180482  -0.25932288  -0.25333636  0.069113296        0.075    1.5982108        1e-10 1.535851e-12    65.110482    2.4451183         70.1 0.0072336084  -0.10962751 -0.0059080026   0.10689879   0.98957693    1.9269452 
  261000    4.1521438    1.2825437    2.8696001  -0.15407904   0.85507773   0.99416691   0.75890855   -1.2298232            1  -0.22091334  -0.29647811  -0.32043386 -0.045828063 -0.0015488004  0.027889137  0.020391562  -0.29130319  -0.28472404  0.069121196        0.075    1.5999802        1e-10 1.5360266e-12     65.10304     2.450443         70.1 0.00035759832  -0.12037955 -0.011252649   0.11689806  -0.28570206   0.14863599 
  262000    4.1555186    1.2875668    2.8679518  -0.15567963   0.85842662    1.0198007   0.74683631   -1.2298232            1  -0.20203228  -0.29051089  -0.29319896    -0.022387 0.0049940309 -0.029499679 -0.0053379703  -0.27130242  -0.26748829  0.069138458        0.075    1.6002462        1e-10 1.5364102e-12    65.086786    2.4571878         70.1 -0.00078686194  -0.11014375 -0.014001332   0.13333064    1.1636827    1.0422131 
  263000    4.1418474     1.282373    2.8594744  -0.15628166   0.85496393    1.0011519   0.75388227   -1.2298232            1  -0.16047072  -0.26000119  -0.25019507  0.028784106 -0.00019047064 -0.025028921 -0.0094389685  -0.23039437  -0.22472975  0.069115862        0.075    1.5972066        1e-10 1.535908e-12    65.108065    2.4484162         70.1 -0.0029002877   -0.1034978 -0.0043219945   0.11890886  -0.48304319      1.54635 
  264000    4.1393429    1.2765398    2.8628031  -0.15234656    0.8510749    1.0069542   0.74328637   -1.2298232            1  -0.20030012  -0.28414216  -0.29492528 -0.021832919 0.0011259925 -0.0025397517 -0.0037021556  -0.26924099  -0.26493157  0.069109775        0.075    1.6055721        1e-10 1.5357728e-12    65.113799    2.4375489         70.1 -0.0058707704  -0.11558991 0.0068914706   0.10674514   0.22457435   0.95141048 
  265000    4.1353919    1.2663395    2.8690523  -0.15249156   0.84427433    1.0113614   0.72872922   -1.2298232            1  -0.20150503   -0.2900158  -0.29456371  -0.01993558 0.00021012129  0.024577538 -0.027334695   -0.2690957  -0.26641935  0.069132585        0.075    1.6176663        1e-10 1.5362797e-12    65.092315    2.4464171         70.1 -0.005791504  -0.11873104 -0.0055211408   0.12080871   -1.8828429  -0.51840925 
  266000    4.1449921    1.2725205    2.8724716  -0.15652565   0.84839522    1.0042555   0.74061961   -1.2298232            1  -0.20160021  -0.29441627  -0.29373498 -0.016649371 -0.0034363892  0.021456468  0.029515612  -0.27029373  -0.26605844  0.069119376        0.075     1.617482        1e-10 1.5359861e-12    65.104755    2.4494141         70.1 -0.0007582385  -0.10574471 -0.00073807278   0.10346918  0.045509271  -0.15384596 
  267000    4.1586652     1.286062    2.8726032  -0.15283818   0.85742335    1.0007281   0.75833722   -1.2298232            1  -0.19683965  -0.28412015  -0.27262877 -0.033770036 0.0045929227 0.0021486306  0.021028736  -0.26717651  -0.26107147  0.069108372        0.075    1.6160455        1e-10 1.5357416e-12     65.11512     2.448269         70.1 -0.0020728863  -0.12425988 -0.0061442092    0.1135444  -0.27477297   0.51697731 
  268000    4.1344702    1.2683651    2.8661051  -0.15098952   0.84562479   0.98656179   0.74817598   -1.2298232            1  -0.19998319  -0.29766889  -0.29479512 -0.0074855487 -0.0016190953  0.038039742 0.0018180962  -0.26937758  -0.26330575  0.069137488        0.075    1.6208571        1e-10 1.5363886e-12    65.087699    2.4589471         70.1 -0.0027933985  -0.11751661 -0.00075334592   0.13115178  -0.30039566   -1.8389251 
  269000    4.1191989    1.2766472    2.8425516  -0.15585734    0.8511465    1.0060858   0.74400849   -1.2298232            1  -0.17761011   -0.2761237  -0.25687558 0.00016893972 0.00036840933 -0.021545495  0.019304696  -0.24661796  -0.24218582  0.069125783        0.075    1.6349497        1e-10 1.5361285e-12     65.09872    2.4553791         70.1   0.00152338  -0.12460757 -0.0045537477   0.11057578   0.19842061  -0.66455139 
  270000    4.1581172     1.283954    2.8741632  -0.15253119   0.85601795   0.99088645   0.76276963   -1.2298232            1   -0.1724933  -0.26621127  -0.26447611  0.013207482 0.0013725569 -0.013165968  -0.02050762  -0.24324127  -0.23609344  0.069118142        0.075    1.6305961        1e-10 1.5359587e-12    65.105917    2.4522812         70.1 0.0025382988  -0.11039929 -0.0050105993   0.12589219 0.0080697064   0.18135138 
  271000    4.1554714    1.2729027    2.8825687   -0.1516328   0.84865001   0.99577064   0.74692235   -1.2298232            1  -0.17544742  -0.26456339  -0.27376326  0.011984387  0.002541703  -0.00859205  0.011040696  -0.24472554  -0.23936105  0.069132815        0.075    1.6290131        1e-10 1.5362848e-12    65.092099    2.4452129         70.1 -0.0032791963  -0.11216085 0.00059367604   0.13622405    1.2405695    1.1621631 
  272000    4.1179902     1.269597    2.8483932  -0.15353329   0.84644609    1.0130972   0.73120292   -1.2298232            1   -0.2351356  -0.31542634  -0.31948452 -0.070495928 -0.0035903358 -0.015572422 -0.011204314  -0.30295571  -0.30016133  0.069119313        0.075    1.6244224        1e-10 1.5359847e-12    65.104814    2.4450376         70.1  0.013870218  -0.12909877 -0.0011619263   0.11346321   0.50992481 0.0011826442 
  273000    4.1391432    1.2768203    2.8623229  -0.15056396    0.8512619    1.0007755   0.74787854   -1.2298232            1  -0.20501854  -0.29733371  -0.28602082 -0.031701085 -0.0021833103 -0.024742419 -0.013257791  -0.27438534   -0.2692534  0.069133585        0.075    1.6223049        1e-10 1.5363019e-12    65.091374    2.4487458         70.1 0.0065294013  -0.11117377 -0.0040965193    0.1226927   -0.8630541  -0.70295214 
  274000    4.1600576    1.2869498    2.8731079  -0.15235213   0.85801525    1.0195398   0.74632083   -1.2298232            1  -0.21769537  -0.31247348  -0.29255902 -0.048053615 -0.00083908466 -0.031371142 -0.0017446896  -0.28691769  -0.28313463  0.069126829        0.075    1.6115548        1e-10 1.5361517e-12    65.097735    2.4434146         70.1 -0.0004105762  -0.12869091 -0.0010012858   0.11541245  -0.16453179    1.3157049 
  275000    4.1313398    1.2661402    2.8651995  -0.15598553   0.84414144   0.98299262   0.74813591   -1.2298232            1  -0.17510942  -0.28054444  -0.26388002  0.019096206  0.002058373 -0.011464674 -0.0076223772  -0.24450009  -0.23820289  0.069116222        0.075    1.6082891        1e-10 1.535916e-12    65.107725    2.4431303         70.1 -0.0035013428  -0.12222868 -0.0042091403   0.11797732   0.90135523  0.017329274 
  276000    4.1230462    1.2722312     2.850815  -0.16001603    0.8482023   0.99178352   0.74892392   -1.2298232            1  -0.20079163  -0.29169951  -0.28938059  -0.02129479 -0.00053384282 -0.046652452 -0.010046608  -0.27025539  -0.26444935  0.069128537        0.075    1.6076127        1e-10 1.5361897e-12    65.096126    2.4465899         70.1 -0.0027200398  -0.10910277 -0.001799038   0.11549814     1.909953  -0.74867054 
  277000     4.135697    1.2718709    2.8638261  -0.15075567   0.84796213   0.99996373   0.74285672   -1.2298232            1  -0.20103753   -0.2886201  -0.28697778 -0.027514713 0.00072144253 -0.0085459507 -0.023587374  -0.26993855  -0.26522029  0.069122992        0.075    1.6010256        1e-10 1.5360665e-12    65.101348    2.4500004         70.1 0.0015847494  -0.10696843 -0.010235939   0.11119056   0.76067293  -0.13078877 
  278000    4.1268165    1.2588984    2.8679181  -0.15872011    0.8393133   0.97976261   0.74220138   -1.2298232            1  -0.17039143  -0.26046887  -0.26303435  0.012328926 0.0006007797 -0.081920189 -0.0034653197  -0.23923167  -0.23327759  0.069114279        0.075    1.6006734        1e-10 1.5358729e-12    65.109556    2.4406944         70.1 -0.0069036835    -0.101238 -0.0043830149   0.12297756   0.47102671   0.24673211 
  279000    4.1433494    1.2766618    2.8666876  -0.15570378   0.85115622   0.99914782   0.74882609   -1.2298232            1  -0.20240714  -0.29584224  -0.28468608 -0.026693095 -0.0054793904 -0.039564665   0.01532374  -0.27186183  -0.26653753  0.069110356        0.075    1.5971611        1e-10 1.5357857e-12    65.113252    2.4370459         70.1 0.00051928464  -0.11010315 -0.0035101407   0.11954931     1.907801  -0.49140879 
  280000    4.1442998    1.2736384    2.8706615  -0.15214697   0.84914048    0.9852262   0.75504917   -1.2298232            1  -0.17934251  -0.28398894   -0.2735349  0.019496309 0.0014603313 -0.057247304 0.0051331844   -0.2493744  -0.24257935  0.069127833        0.075    1.5917338        1e-10 1.5361741e-12     65.09679    2.4575326         70.1 0.0052571494   -0.1046737 0.0049866322   0.11326834    2.2109852  -0.78527348 
  281000    4.1376356    1.2609284    2.8767072  -0.15353033   0.84066668   0.99493792   0.73398995   -1.2298232            1  -0.18679267  -0.27225202  -0.28372106 -0.0044049387 0.00033273459 -0.0099704048 -0.0034055439  -0.25487129  -0.25065286   0.06912318        0.075    1.6033334        1e-10 1.5360707e-12    65.101171    2.4618051         70.1 0.0074129631  -0.11257327 -0.0017293936   0.12540549     2.151426  -0.58940634 
  282000    4.1381052    1.2599217    2.8781834  -0.15623783   0.83999554    1.0014429   0.72835281   -1.2298232            1  -0.20810936    -0.310666  -0.28821422 -0.025447854 4.312518e-06 -0.054111137 9.4631923e-05  -0.27566512  -0.27238706  0.069137224        0.075    1.6130017        1e-10 1.5363828e-12    65.087948     2.447613         70.1 0.0030324256  -0.11650853 -0.00018373291   0.12056355    1.4263468    0.4335902 
  283000    4.1419665    1.2825235     2.859443   -0.1578821   0.85506422    1.0038238   0.75220302   -1.2298232            1  -0.18044214  -0.27234989  -0.28194072  0.012964188 0.0031403915  -0.05851121 -0.022495616  -0.25021005  -0.24487267  0.069145676        0.075    1.6119374        1e-10 1.5365706e-12    65.079991    2.4737002         70.1 -0.0066716613  -0.11768047 -0.0052949623   0.12157987    1.4946292 -0.064265454 
  284000    4.1595064    1.2773167    2.8821897  -0.15464339   0.85159287   0.99142425   0.75490974   -1.2298232            1  -0.24222964   -0.3256987  -0.32063261 -0.080357615 0.0016956199  0.014778956  0.020001112   -0.3122486   -0.3058643  0.069120521        0.075    1.6100273        1e-10 1.5360116e-12    65.103676    2.4538965         70.1 -0.0015810142   -0.1094041 -0.003475554   0.10574811    0.3140838   0.20243019 
  285000    4.1418197    1.2749391    2.8668807  -0.15926004   0.85000766   0.99917325   0.74686499   -1.2298232            1  -0.17578602  -0.26741978   -0.2791957  0.019257414 0.0035113601   0.01252562 -0.0043772061  -0.24505882  -0.23991805  0.069129484        0.075    1.6043275        1e-10 1.5362108e-12    65.095235    2.4541113         70.1 -0.011684522 -0.097171418 -0.0070784912    0.1264795  -0.19605105    0.9817378 
  286000    4.1507652    1.2947757    2.8559895  -0.15580244   0.86323284    1.0055646   0.76482058   -1.2298232            1  -0.19257792  -0.29332178  -0.29482061   0.01040865 -0.0028709094  0.017329991 -0.014767975  -0.26351612  -0.25712017  0.069110153        0.075    1.6106281        1e-10 1.5357812e-12    65.113443    2.4452852         70.1 -0.0064281966  -0.11123979 -0.0029152298    0.1218534 -0.072198305  -0.28668159 
  287000    4.1542833    1.2927804    2.8615029  -0.15510484   0.86190254    1.0187586   0.75343915   -1.2298232            1  -0.20433179  -0.28767779  -0.28916603 -0.036151547 0.00018896584  0.015404128 -0.0025345655  -0.27421434   -0.2697209  0.069120023        0.075    1.6243688        1e-10 1.5360005e-12    65.104145    2.4430649         70.1 -0.0083370184  -0.12473625 -0.0072015125   0.09812039   -1.2467138   0.40398571 
  288000    4.1569539    1.2895377    2.8674162  -0.15289317   0.85974066    1.0118011   0.75459567   -1.2298232            1  -0.19262251  -0.29063841  -0.28741338 0.00018424799 0.0013700712  0.011938272 0.0016626199  -0.26261234  -0.25756506  0.069106751        0.075    1.6260974        1e-10 1.5357056e-12    65.116648     2.436124         70.1 -0.0014714655  -0.12283215 -0.0052827617   0.13197655 -0.013963162  -0.21065648 
  289000    4.1579718    1.2856797    2.8722922  -0.15114187   0.85716847    1.0085649   0.75248276   -1.2298232            1  -0.19998586  -0.28505894  -0.28951196 -0.025386667 0.0045528869 -0.027226793 -0.012818855  -0.26977971  -0.26472069  0.069120774        0.075    1.6162694        1e-10 1.5360172e-12    65.103437    2.4544017         70.1 0.0040846051   -0.1208321 -0.0062420391   0.10678596  -0.35864338   -1.1770068 
  290000    4.1392677    1.2685762    2.8706915  -0.15384366   0.84576552   0.99724567   0.74102075   -1.2298232            1   -0.1494629  -0.25245251  -0.25902087  0.063084669 0.0022085332  0.011313397  0.019683513  -0.21819363  -0.21347121  0.069102304        0.075    1.6074912        1e-10 1.5356068e-12    65.120839    2.4450849         70.1 0.0019036051  -0.11482357 -0.0041869642    0.1076315   0.15631833    2.5826702 
  291000    4.1417764    1.2730263    2.8687501  -0.15321922    0.8487324    1.0196482   0.73053823   -1.2298232            1  -0.23169121  -0.31737906  -0.30331097 -0.074383605 -0.0023031592  0.013663281 -0.012545788  -0.29944967  -0.29713742  0.069153508        0.075    1.6145935        1e-10 1.5367446e-12    65.072621    2.4660168         70.1 -0.0031348787  -0.11390789 0.0044236751   0.11486656   0.15911846   0.59591591 
  292000    4.1267194    1.2722704     2.854449  -0.15180251   0.84822844    0.9944997   0.74708853   -1.2298232            1  -0.17874225  -0.27785743   -0.2696721  0.011302787 -0.00041783701  0.011064664  0.023412456  -0.24803577   -0.2425743  0.069116661        0.075    1.6159771        1e-10 1.5359258e-12    65.107311    2.4442004         70.1 0.0057798969  -0.12062816 -0.010908757  0.098562673   -1.0085896    1.3878383 
  293000    4.1499895    1.2836671    2.8663224  -0.15268766   0.85582667    1.0082557   0.75042625   -1.2298232            1  -0.19304717  -0.28795893  -0.27499624  -0.01618635 -0.00025795316 0.0064638191  0.021301207  -0.26265028  -0.25776215   0.06912052        0.075    1.6133188        1e-10 1.5360116e-12    65.103677    2.4381992         70.1 -0.0053620767  -0.10806082 -0.0036375382   0.11547974  -0.23493355  0.047261749 
  294000    4.1634609    1.2839906    2.8794703  -0.15080022   0.85604237    1.0016283   0.75537744   -1.2298232            1  -0.18487932  -0.29400463  -0.26921567 0.0085823475 0.00024228744   0.03643879 0.0020684758  -0.25494165  -0.24916892  0.069109176        0.075    1.6075885        1e-10 1.5357595e-12    65.114363    2.4394779         70.1 0.0016273986  -0.10828192 0.0093640384   0.11384526   -1.3851885    1.5684021 
  295000     4.148547     1.282626     2.865921  -0.14970442   0.85513258   0.99900033   0.75565657   -1.2298232            1  -0.19964047  -0.28293429  -0.30801329 -0.0079738212 -0.0044809705  0.037666285 -0.022860454  -0.26972869   -0.2637614  0.069120131        0.075     1.604595        1e-10 1.5360029e-12    65.104044     2.447501         70.1 -0.005076633  -0.12995323 0.0001926501   0.11943102  0.063711147  -0.23237988 
  296000    4.1375967    1.2751843    2.8624124  -0.15554269   0.85017114    1.0009835   0.74588893   -1.2298232            1   -0.1786176  -0.28407211  -0.26767446  0.015893777  0.004886333  0.030625568  0.003756802  -0.24779986  -0.24286582  0.069110722        0.075    1.6007892        1e-10 1.5357938e-12    65.112907    2.4434254         70.1 -0.0036543733  -0.11198859 -0.0086283755   0.11368745   -1.4516017  -0.76844831 
  297000    4.1314885    1.2776534    2.8538352  -0.15756661   0.85181731    1.0012313   0.74850293   -1.2298232            1   -0.1949835  -0.28306543  -0.29539738 -0.0064876873 0.0023774954  0.020771646 -0.0064178367  -0.26440821  -0.25924762  0.069104727        0.075    1.6013267        1e-10 1.5356606e-12    65.118555    2.4364981         70.1 0.0020370547   -0.1118717 -0.012684536   0.12770971  -0.32307016    2.7231683 
  298000    4.1530554    1.2879402    2.8651152  -0.15170227   0.85867556    1.0160171   0.74987586   -1.2298232            1  -0.12807517  -0.23222395  -0.23356329  0.081561727 0.0035265479  0.055091868 0.0061458191  -0.19762723  -0.19328833   0.06915251        0.075    1.5958001        1e-10 1.5367224e-12     65.07356    2.4459259         70.1 0.0034811184  -0.10962189 0.0016913236   0.12669885   -1.4628487    3.2862752 
  299000    4.1441174    1.2853834     2.858734  -0.15623091   0.85697093    1.0153552   0.74744953   -1.2298232            1   -0.1977968  -0.28088114  -0.29999948 -0.012509779 -0.0041407653  0.034928144 -0.011955752  -0.26712381  -0.26296747  0.069106526        0.075     1.598208        1e-10 1.5357006e-12     65.11686    2.4415224         70.1 -0.0059056025  -0.11154386 -0.010935051   0.12623839   0.78477774    1.6946213 
  300000    4.1510198    1.2815253    2.8694945  -0.15881739   0.85439872    1.0049204   0.75031802   -1.2298232            1  -0.19869522  -0.29701328  -0.29244107 -0.0066313162 -0.0045733285  0.017671512 0.0092720303  -0.26828829  -0.26319613  0.069122072        0.075    1.6017544        1e-10 1.536046e-12    65.102215    2.4475004         70.1 -0.0054908952  -0.11569439 -0.0067606618   0.11213558  -0.45529241   0.29152389 
Loop time of 736.512 on 1 procs for 300000 steps with 17604 atoms

Performance: 175964.438 tau/day, 407.325 timesteps/s
99.6% CPU use with 1 MPI tasks x 1 OpenMP threads

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 61.884     | 61.884     | 61.884     |   0.0 |  8.40
Bond    | 179.82     | 179.82     | 179.82     |   0.0 | 24.41
Neigh   | 207.64     | 207.64     | 207.64     |   0.0 | 28.19
Comm    | 14.126     | 14.126     | 14.126     |   0.0 |  1.92
Output  | 0.62976    | 0.62976    | 0.62976    |   0.0 |  0.09
Modify  | 256.24     | 256.24     | 256.24     |   0.0 | 34.79
Other   |            | 16.17      |            |       |  2.20

Nlocal:    17604 ave 17604 max 17604 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Nghost:    2859 ave 2859 max 2859 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Neighs:    14375 ave 14375 max 14375 min
Histogram: 1 0 0 0 0 0 0 0 0 0

Total # of neighbors = 14375
Ave neighs/atom = 0.816576
Ave special neighs/atom = 6.70302
Neighbor list builds = 40336
Dangerous builds = 0
#undump      eq

#--- Unfix Equil ---#

unfix abeads_edz
unfix bbeads_edz
unfix tbeads_edz

unfix freeze_tout


###############
# Compression #
###############


#--- Bring the brushes closer together fit the sim box ---#

variable       bbzmax  equal bound(bbeads,zmax)
variable       tbzmin  equal bound(tbeads,zmin)
displace_atoms  alltop move 0.0 0.0 -$(v_tbzmin - v_bbzmax) units box
displace_atoms  alltop move 0.0 0.0 -38.579636966830804568 units box
variable z_f equal bound(all,zmin)
variable z_c equal bound(all,zmax)
change_box all z final ${z_f} $(v_z_c + 0.1) units box
change_box all z final 0 $(v_z_c + 0.1) units box
change_box all z final 0 31.520363033169200406 units box
  orthogonal box = (0 0 0) to (40 40 31.5204)

print         "D = $D"
D = 26.522578419792
print         "D = $(v_twzmin - v_bwzmax)"
D = 26.522578419792012028
info variables

#--- Computes ---#

# Number density profiles

compute         cabeads abeads chunk/atom bin/1d z lower ${binres} units reduced # Check bound keyword to maybe only bin melt area
compute         cabeads abeads chunk/atom bin/1d z lower 0.001 units reduced 
fix             abeads_cdz abeads  ave/chunk ${Neveryc} ${Nrepeatc} ${Nfreqc} cabeads density/number file abeads_cdz
fix             abeads_cdz abeads  ave/chunk 100 ${Nrepeatc} ${Nfreqc} cabeads density/number file abeads_cdz
fix             abeads_cdz abeads  ave/chunk 100 700 ${Nfreqc} cabeads density/number file abeads_cdz
fix             abeads_cdz abeads  ave/chunk 100 700 70000 cabeads density/number file abeads_cdz
compute         cbbeads bbeads chunk/atom bin/1d z lower ${binres} units reduced # Check bound keyword to maybe only bin melt area
compute         cbbeads bbeads chunk/atom bin/1d z lower 0.001 units reduced 
fix             bbeads_cdz bbeads  ave/chunk ${Neveryc} ${Nrepeatc} ${Nfreqc} cbbeads density/number file bbeads_cdz
fix             bbeads_cdz bbeads  ave/chunk 100 ${Nrepeatc} ${Nfreqc} cbbeads density/number file bbeads_cdz
fix             bbeads_cdz bbeads  ave/chunk 100 700 ${Nfreqc} cbbeads density/number file bbeads_cdz
fix             bbeads_cdz bbeads  ave/chunk 100 700 70000 cbbeads density/number file bbeads_cdz
compute         ctbeads tbeads chunk/atom bin/1d z lower ${binres} units reduced # Check bound keyword to maybe only bin melt area
compute         ctbeads tbeads chunk/atom bin/1d z lower 0.001 units reduced 
fix             tbeads_cdz tbeads  ave/chunk ${Neveryc} ${Nrepeatc} ${Nfreqc} ctbeads density/number file tbeads_cdz
fix             tbeads_cdz tbeads  ave/chunk 100 ${Nrepeatc} ${Nfreqc} ctbeads density/number file tbeads_cdz
fix             tbeads_cdz tbeads  ave/chunk 100 700 ${Nfreqc} ctbeads density/number file tbeads_cdz
fix             tbeads_cdz tbeads  ave/chunk 100 700 70000 ctbeads density/number file tbeads_cdz



#--- Fixes ---#
fix             freeze_tout twout setforce 0.0 0.0 NULL
fix             comp_tout twout aveforce 0.0 0.0 ${Fcatom}
fix             comp_tout twout aveforce 0.0 0.0 -1.22982321291314
fix             rwalls all wall/reflect zlo EDGE zhi EDGE




#--- Dumps ---#
#dump           comp all image ${Ndump_c} stg2.*.jpg type type zoom 2 view 60 120 bond none none


#--- Run Compression ---#
timestep    ${Tstep}
timestep    0.005
run         ${Ncomp}
run         700000
WARNING: Inconsistent image flags (src/domain.cpp:784)
Per MPI rank memory allocation (min/avg/max) = 18.09 | 18.09 | 18.09 Mbytes
Step TotEng KinEng PotEng E_pair Temp c_melTemp c_wallTemp v_Fcatom v_Pcomp2 Press Pxx Pyy Pzz Pxy Pxz Pyz c_melPress c_wallPress v_melDens v_surfcov v_aveRg v_Wall_v2 v_srate v_D v_bwzmax Zhi c_fbwall[1] c_fbwall[3] c_ftwall[1] c_ftwall[3] v_sbot v_pbot 
  300000    4.1510198    1.2815253    2.8694945  -0.15881739   0.85439872    1.0049204   0.75031802   -1.2298232            1  -0.44189005  -0.66054539  -0.65037699 -0.014747776 -0.010170896  0.039300721  0.020620617  -0.59666219  -0.58533745   0.16966676        0.075    1.6017544        1e-10 3.7703725e-12    26.522578    2.4475004    31.520363 -0.0054908952  -0.11569439 -0.0067606618   0.11213558  -0.45529241   0.29152389 
  301000    4.1456612    1.2824248    2.8632364  -0.14879545   0.85499842   0.99044971    0.7613467   -1.2298232            1  -0.26445574  -0.50402714  -0.50076094   0.21142086 0.0032247556  0.072823179  0.010838164  -0.42150282  -0.40583751   0.17594458        0.075    1.6072998        1e-10 3.9098795e-12    25.576236    2.4478157    31.520363 -0.003081951   -0.1325473  -0.02162648   0.21530187  0.067297669    1.9557498 
  302000     4.143365    1.2825126    2.8608524  -0.16687142   0.85505698    1.0058128   0.75081436   -1.2298232            1   -0.3383844  -0.57756947  -0.56852147   0.13093775 0.0047673739  0.058570161 -0.00064091941  -0.49325892  -0.48195916   0.18146976        0.075    1.5990442        1e-10 4.0326614e-12     24.79752      2.44063    31.520363 -0.0075440729  -0.10442406 -0.00079665891   0.21077088   -1.9516791  -0.30705984 
  303000    4.1340229    1.2708758    2.8631472  -0.16658033   0.84729865   0.99678267   0.74393538   -1.2298232            1  -0.37420809  -0.57601633  -0.59351013  0.046902188 0.0040395699  0.098152148 -0.011106269  -0.52766365  -0.51649386   0.18533709        0.075    1.5922017        1e-10 4.118602e-12    24.280084    2.4506649    31.520363 0.0042740141  -0.10571623 -0.00029920561   0.16982102  -0.49650892    1.1583566 
  304000      4.14698    1.2820049    2.8649751  -0.16591805   0.85471847     0.994267   0.75823139   -1.2298232            1   -0.2872337  -0.51558656  -0.51338642   0.16727187   -0.0086922 -0.023369235 -0.032283333  -0.44363817  -0.42916037   0.18883703        0.075    1.5983772        1e-10 4.1963785e-12    23.830072    2.4480784    31.520363 -0.0060787316 -0.093480442 0.0072304889   0.18890092  -0.29305519   0.97157068 
  305000     4.096401    1.2666579     2.829743  -0.16897957   0.84448658   0.98978415    0.7440201   -1.2298232            1  -0.35420339  -0.58759688  -0.57133261   0.09631932 -0.0043509898  0.015487787 -0.013579556  -0.50767642  -0.49549015   0.19183703        0.075    1.5991773        1e-10 4.263045e-12    23.457411    2.4360468    31.520363 -0.0035743537  -0.13388191 -0.010737058   0.17243354  -0.28306372   -1.0534026 
  306000    4.1391115    1.2748331    2.8642783  -0.16806378   0.84993703   0.99946217   0.74654556   -1.2298232            1  -0.38860156  -0.64996775  -0.57450072  0.058663788 -0.0065100255  -0.10156288  0.024110056  -0.54259553  -0.53126981   0.19506449        0.075    1.5855863        1e-10 4.3347665e-12    23.069293    2.4501992    31.520363 -0.0031198799  -0.11781244 -0.0022547772   0.20900765   0.05288559   0.93966018 
  307000    4.1330162    1.2740965    2.8589197  -0.16673678   0.84944592    1.0036312   0.74282952   -1.2298232            1  -0.40055652  -0.64764181  -0.61473216  0.060704418 -0.0036233584 -0.057286713  0.017178037  -0.55378396  -0.54381988   0.19807875        0.075    1.5849234        1e-10 4.4017501e-12    22.718237    2.4529304    31.520363 0.0026080059  -0.11235177 0.00092077881   0.19676414   0.75383743    1.4449234 
  308000    4.1416212    1.2888145    2.8528067  -0.17107699   0.85925851    1.0073736   0.75684368   -1.2298232            1  -0.27046464  -0.50103832  -0.52000484   0.20964923  0.019075841  0.038185669 -0.0039446627  -0.42658286  -0.41426221   0.20083769        0.075    1.5862521        1e-10 4.4630598e-12    22.406153    2.4365611    31.520363 -0.001179539  -0.11022849 -0.0026704755   0.20395599   0.79848428 -0.053419286 
  309000    4.1250626    1.2671002    2.8579624  -0.16490943   0.84478144   0.98706447    0.7464011   -1.2298232            1  -0.32548068  -0.56271877  -0.54000495   0.12628168 0.0061500597  0.032644691 -0.018573773  -0.47944485  -0.46637922   0.20377986        0.075    1.5947828        1e-10 4.5284413e-12    22.082653    2.4511437    31.520363 0.0014044951 -0.099464922 -0.0057626527   0.21322854   0.60234713   -1.6665127 
  310000     4.116616    1.2688156    2.8478004  -0.16714992   0.84592513   0.97916491   0.75380292   -1.2298232            1  -0.29773969  -0.52345461  -0.52126707   0.15150259 0.0001434911  0.020216012 -0.018024467  -0.45323068  -0.43751061   0.20632768        0.075    1.6017767        1e-10 4.5850595e-12    21.809968    2.4732518    31.520363 -0.0033227174  -0.11923394 0.0045039456   0.19617164   0.75247524    2.1278551 
  311000    4.1308495    1.2856332    2.8452163  -0.17146156    0.8571375    1.0081015   0.75275099   -1.2298232            1   -0.2931199  -0.50460219  -0.54511942   0.17036191 -0.0053904868 -0.002657048 0.00055886744   -0.4483939  -0.43702138    0.2085351        0.075    1.6019242        1e-10 4.6341134e-12    21.579101    2.4489435    31.520363 -0.0024705235  -0.11255967 -0.0010200593    0.2182327  -0.93664239  -0.50605489 
  312000    4.1438135    1.2882717    2.8555418  -0.16887587   0.85889661    1.0017395   0.76013016   -1.2298232            1  -0.26031255  -0.49921474  -0.50881697   0.22709407 -0.0083319749  0.040867661  0.027885168  -0.41710869  -0.40330588     0.210859        0.075    1.5953962        1e-10 4.6857556e-12    21.341275    2.4444687    31.520363 -0.0020081974  -0.10699814  -0.01923074   0.21595417   0.37427708   -1.2705316 
  313000     4.126563    1.2964177    2.8301453  -0.17432906   0.86432758    1.0217298   0.75548645   -1.2298232            1  -0.31556915  -0.55679344  -0.52467544   0.13476144 0.0012635043  0.058068231  0.038525382   -0.4714074  -0.46141599   0.21334939        0.075    1.5983198        1e-10 4.7410975e-12    21.092163    2.4480064    31.520363  0.002964508  -0.11888561 0.00015062984   0.19772793  -0.40509469   -1.1536437 
  314000     4.139627    1.2881186    2.8515084  -0.17382475   0.85879453    1.0105003   0.75389487   -1.2298232            1   -0.2547487  -0.49255829  -0.51580743   0.24411962 -0.030217051 -0.0040835832  0.036200735  -0.41025865  -0.39899259   0.21606391        0.075    1.5904639        1e-10 4.8014203e-12    20.827171    2.4562214    31.520363 -0.0034631566  -0.11755862 -0.0061226731   0.19067158   0.16639246     1.285485 
  315000    4.1148041    1.2746017    2.8402024  -0.17591179   0.84978274   0.99884892   0.74670885   -1.2298232            1  -0.28071471  -0.52084619  -0.51810445    0.1968065 -3.4463554e-05  0.018165371 -0.0061158683  -0.43474237  -0.42329543   0.21885609        0.075     1.599022        1e-10 4.8634687e-12    20.561457    2.4430071    31.520363 -0.0045046346   -0.1114503 0.0020430495   0.20561962  0.027694956   0.54508483 
  316000    4.1367245    1.2731275     2.863597  -0.17066982   0.84879987    1.0065574   0.73971134   -1.2298232            1  -0.35696939  -0.57808767  -0.59299697   0.10017647  0.011366032  0.059657858 -0.022612911  -0.50955363  -0.50065046   0.22144674        0.075    1.5967229        1e-10 4.9210386e-12    20.320914    2.4404869    31.520363 -0.0041413601   -0.1207241 -0.0080657969   0.21395834   -1.0023268  -0.36829556 
  317000    4.1177693    1.2830026    2.8347667  -0.17716182   0.85538367    1.0053844   0.75166358   -1.2298232            1  -0.25097322  -0.50422898  -0.50421161   0.25552091 -0.004049621  0.030431447  0.023822306  -0.40602292  -0.39448685   0.22407686        0.075    1.5970249        1e-10 4.9794858e-12    20.082395    2.4447185    31.520363  0.006022953  -0.11305208 -0.0029537204   0.20683199  -0.43878719    1.3558255 
  318000    4.0958304    1.2586869    2.8371435  -0.17014188   0.83917229   0.97826657   0.74299805   -1.2298232            1  -0.31871975  -0.55334556  -0.54516807   0.14235439 0.0052352053 -0.066120939 0.0097861285  -0.47198196  -0.45836243   0.22697571        0.075    1.5932516        1e-10 5.0439047e-12     19.82591    2.4445816    31.520363 -0.0076867031  -0.12083691 -0.0074901505   0.21021519   0.52687173  -0.17804708 
  319000    4.1269307     1.294674    2.8322567  -0.17431633   0.86316503    1.0114814    0.7606113   -1.2298232            1  -0.35166379  -0.60160757  -0.54909083  0.095707043 0.0014377092 -0.025970292 -0.0042167531  -0.50855917  -0.49604772   0.22998162        0.075    1.5894615        1e-10 5.1107028e-12    19.566781    2.4516472    31.520363 0.0014522862  -0.11105713 0.0017561664   0.18073872    1.3869299    1.5556761 
  320000    4.1036622     1.265488    2.8381742  -0.17139206   0.84370658    0.9792651   0.74997957   -1.2298232            1  -0.34070076  -0.56853314  -0.58262548   0.12905634 0.0054144518  -0.01528699 0.0037601954  -0.49540309  -0.48048598    0.2336144        0.075    1.5922232        1e-10 5.1914311e-12    19.262511    2.4420312    31.520363 0.0032206372  -0.11675433 0.0038710476   0.22855278   0.39092086   -3.0742811 
  321000    4.1010516    1.2682007    2.8328509  -0.17617698   0.84551514   0.98721965   0.74753521   -1.2298232            1  -0.33464349   -0.5769025  -0.56027863   0.13325065 -0.0004627234 -0.022998597 -0.046025371   -0.4888416  -0.47556418   0.23565742        0.075    1.5859251        1e-10 5.2368316e-12    19.095516    2.4384288    31.520363 -0.0020622423  -0.11219736  0.006193816   0.17582459   0.61297967  -0.53083493 
  322000    4.1126373    1.2729285    2.8397088  -0.17029812   0.84866723    1.0022331   0.74247936   -1.2298232            1  -0.24863602  -0.46281885  -0.53911609   0.25602687 -0.017335783 -0.083267406 -0.016032618  -0.40179124  -0.39169982   0.23822633        0.075    1.5779991        1e-10 5.2939185e-12    18.889599    2.4475001    31.520363 0.0032071189  -0.12404962 -0.010440078   0.20314445   0.89207922     1.828476 
  323000    4.1300145    1.2941327    2.8358818  -0.17090699   0.86280415    1.0005895   0.76753795   -1.2298232            1  -0.30748846  -0.55193244  -0.53004785    0.1595149  0.006462052 -0.021303674 -0.011610235  -0.46581265  -0.45031764   0.24152021        0.075    1.5780236        1e-10 5.3671158e-12    18.631981    2.4423554    31.520363 -0.0040124465  -0.12773549 -0.012695634   0.22124279 0.0023659089   -2.0063354 
  324000    4.1196497    1.2750179    2.8446318  -0.17169613   0.85006022   0.98540431    0.7564822   -1.2298232            1  -0.26367221   -0.5083689  -0.52213198   0.23948425 -0.0032166589 -0.096789067  0.013280309  -0.41971587  -0.40433377   0.24452976        0.075     1.577347        1e-10 5.4339947e-12    18.402668    2.4379357    31.520363 -0.001264109  -0.11732469 -0.007957392   0.23441183    0.3389859  -0.74590616 
  325000    4.1137628    1.2784837    2.8352791  -0.17762234   0.85237088    1.0002691   0.75010545   -1.2298232            1  -0.27014053  -0.49843363  -0.49432313   0.18233516  0.007954585 -0.064021923 -0.0091873873  -0.42486882  -0.41292398   0.24782426        0.075    1.5722164        1e-10 5.5072058e-12    18.158028    2.4437276    31.520363 0.0056535011  -0.10730219 -0.00096549386   0.21958427   0.84164705     1.575047 
  326000    4.1391227     1.284167    2.8549557  -0.16979718   0.85615998   0.99720448    0.7586378   -1.2298232            1  -0.27359719   -0.4977137  -0.52349438   0.20041649 -0.0097624075  -0.10526098 -0.019600013   -0.4300855  -0.41594317   0.25142662        0.075    1.5694407        1e-10 5.5872582e-12    17.897866    2.4503439    31.520363 0.0020947054 -0.091940016 -0.0004099903   0.18776627   0.30823686   0.35322881 
  327000    4.1427963    1.2923425    2.8504538  -0.17548707   0.86161062    1.0098731   0.75909403   -1.2298232            1  -0.30737115  -0.54135025  -0.54490143   0.16413823 -0.0051275851 -0.048566116 -0.014487554  -0.46395357  -0.45152551   0.25433813        0.075     1.576897        1e-10 5.6519584e-12    17.692982     2.445297    31.520363 -0.0035944136  -0.10825448 -0.0068747362   0.20733216    1.6188297    1.2923887 
  328000     4.129894    1.2701538    2.8597402  -0.16900985   0.84681729   0.99665186   0.74321139   -1.2298232            1  -0.39443036  -0.61685189  -0.59311601  0.026676817 -0.014650048 -0.075505574  0.045709363  -0.54773658  -0.53669745   0.25698288        0.075    1.5738155        1e-10 5.7107308e-12    17.510894    2.4427937    31.520363 -0.0010580493  -0.11332192 -0.0032743043   0.17841529   0.47758873  -0.61614102 
  329000    4.1140778    1.2770745    2.8370033  -0.17378153   0.85143139     1.001466   0.74768753   -1.2298232            1  -0.30599302   -0.5295308  -0.52127836   0.13283011 -0.0033188888 -0.019069759 0.0041741957  -0.46022255   -0.4489473   0.26024373        0.075    1.5679186        1e-10 5.783194e-12    17.291483     2.449382    31.520363 -0.0014502486  -0.11675622 -0.017594825   0.21265681    -1.879774    1.7434177 
  330000    4.1086052    1.2794603    2.8291449  -0.17688135   0.85302197    1.0033822   0.74905288   -1.2298232            1  -0.30654863  -0.56828145  -0.53179176   0.18042733 0.0067757964 0.0098604909  0.018245119   -0.4610598  -0.44977645   0.26433713        0.075    1.5690749        1e-10 5.8741584e-12    17.023715    2.4628352    31.520363 -0.00086979123  -0.10882762   0.01069426   0.20468707   0.68492016   -1.5384917 
  331000    4.1360394    1.2910383    2.8450011    -0.175653    0.8607411    1.0156243   0.75364283   -1.2298232            1  -0.29162838  -0.52201586  -0.52363728   0.17076799 0.0023853979   0.04389787  0.019603914  -0.44708635   -0.4366037    0.2675123        0.075     1.565151        1e-10 5.9447178e-12    16.821656    2.4624663    31.520363 -0.0019989447  -0.10371871 0.0080315581   0.18442176  -0.13253844   -2.3904046 
  332000    4.1339885    1.2790964    2.8548921   -0.1705871   0.85277938     1.003876   0.74830069   -1.2298232            1  -0.28142834  -0.53002477  -0.52314292   0.20888267 0.0076238967  0.031971484  0.042820574  -0.43578435  -0.42472665   0.27102623        0.075    1.5657724        1e-10 6.0228052e-12    16.603559    2.4414411    31.520363 -0.0075843779   -0.1225766 0.0023238154   0.20515776   -1.5202021  0.026501135 
  333000    4.1229691    1.2798768    2.8430922  -0.17761375    0.8532997   0.99759271   0.75352925   -1.2298232            1  -0.29948778  -0.53352142  -0.53645691   0.17151498 -0.0084576466 -0.040660415 -0.015219019  -0.45492232  -0.44188918   0.27527959        0.075    1.5670808        1e-10 6.1173242e-12    16.347017     2.445972    31.520363 0.0015781651 -0.093076071 -0.014213094   0.22409229  -0.59969237  -0.20585601 
  334000    4.1080559    1.2735959      2.83446  -0.17684778   0.84911219   0.99641657   0.74725741   -1.2298232            1  -0.27623478  -0.52258062  -0.49186275   0.18573905 3.2626369e-05 0.0074082732 0.0069038743  -0.43037559  -0.41846828   0.27813181        0.075    1.5790701        1e-10 6.180707e-12    16.179379    2.4479594    31.520363 0.0010485064  -0.12002451 -0.0054257923   0.22339904  -0.46747454  -0.73402297 
  335000    4.1345626    1.2844779    2.8500847   -0.1717311   0.85636727    1.0127971   0.74819832   -1.2298232            1   -0.3063199  -0.55548604  -0.52491015    0.1614365 0.0069877649 -0.059197776  0.027479637  -0.46065479  -0.45089164   0.28190709        0.075    1.5710464        1e-10 6.2646019e-12    15.962706    2.4366502    31.520363 0.00092603359  -0.12142289 0.0088804069   0.19087977   0.81834071  -0.34981721 
  336000    4.1164129    1.2703239     2.846089  -0.17167855   0.84693074   0.99475362   0.74471696   -1.2298232            1  -0.34379493  -0.58127735  -0.56980849   0.11970106 -0.0087976842 -0.066736981  0.059214118   -0.4974117  -0.48579106    0.2860333        0.075     1.566588        1e-10 6.3562955e-12    15.732434    2.4393288    31.520363 -0.006012534  -0.11122339 -0.018291893   0.22526178  0.015162371   0.79791448 
  337000    4.1419086    1.2837525    2.8581561  -0.17015791   0.85588362    1.0019292   0.75490062   -1.2298232            1  -0.35421523  -0.54194181  -0.58619867  0.065494801  0.014037325 -0.080434396  0.023873872  -0.50993264  -0.49723563   0.29111618        0.075    1.5604648        1e-10 6.4692485e-12    15.457746    2.4556334    31.520363 -0.0014195534   -0.1007355 -7.3336727e-05   0.19073263   0.57169044   -2.6508993 
  338000    4.1408218    1.2774937    2.8633281  -0.17316813   0.85171083    1.0121115    0.7407935   -1.2298232            1  -0.20290118  -0.50085398  -0.43537463   0.32752507 0.0041679991 -0.019156448  0.011541639  -0.35570865  -0.34737507   0.29480427        0.075    1.5593641        1e-10 6.551206e-12    15.264365    2.4418706    31.520363 0.0012502944   -0.1247038  0.010295059   0.18846913  0.027077872     1.018481 
  339000    4.1542198     1.284637    2.8695828  -0.16797541   0.85647331    1.0052681   0.75358785   -1.2298232            1  -0.44376099  -0.65053798  -0.63757608 -0.043168906 -0.018497379 0.0024499068 0.0087658725  -0.59920761  -0.58725801   0.29925649        0.075    1.5506776        1e-10 6.6501442e-12    15.037268    2.4397665    31.520363 -0.0032850805   -0.1337072 -0.0050136619   0.20150296  -0.40837975     -1.44791 
  340000    4.0910072    1.2692241    2.8217831  -0.18159819    0.8461975   0.99961424   0.74011263   -1.2298232            1  -0.39924583  -0.60412029  -0.62202964  0.028412451  0.011046154 -0.034855249 -0.010238213  -0.55191284  -0.54193579   0.30437321        0.075    1.5535078        1e-10 6.763849e-12    14.784481    2.4449187    31.520363 -0.0037948944  -0.11155376 0.0032279153   0.16168011  -0.41905701  -0.66666339 
  341000    4.0987555    1.2779698    2.8207857  -0.17623762   0.85202826   0.99647649   0.75215027   -1.2298232            1  -0.23684691  -0.48084987  -0.49295701   0.26326615 -0.00042113514  0.015704542 -0.0081117094    -0.391997  -0.37908897   0.30965261        0.075    1.5594577        1e-10 6.8811692e-12    14.532414    2.4452205    31.520363 -0.0050295461  -0.12218499 -0.0012282499   0.17858343   0.16301075    0.9963966 
  342000     4.098701    1.2758563    2.8228446  -0.17320526   0.85061921    1.0090053   0.74109595   -1.2298232            1  -0.28645116  -0.47985271  -0.55013516   0.17063439 -0.019868439 -0.062207091  0.021953307  -0.43932101  -0.43048164   0.31436634        0.075     1.549761        1e-10 6.9859187e-12    14.314509     2.439437    31.520363  0.011664112   -0.1289626 -0.0089584781   0.22087023   -0.6728185   -1.8621558 
  343000    4.1097178    1.2737676    2.8359501  -0.17544243   0.84922666   0.99438856   0.74885452   -1.2298232            1  -0.23830838  -0.46563827  -0.48832897   0.23904211 0.0065020716  0.021059161  0.023004867  -0.39277863   -0.3802524   0.31870457        0.075    1.5476548        1e-10 7.0823238e-12    14.119659    2.4454155    31.520363 -0.0052208918  -0.12000289 0.0078571173   0.21053059  -0.70009261   0.28197268 
  344000    4.1149604    1.2723895    2.8425709  -0.17645814   0.84830787    0.9816701   0.75610117   -1.2298232            1  -0.41576874  -0.64919532  -0.62136926  0.023258353 0.0046432372 -0.040012213  0.025516905   -0.5717338  -0.55589726   0.32424866        0.075    1.5476454        1e-10 7.2055258e-12    13.878238     2.450711    31.520363 -0.0031319061  -0.12683517 -0.0090262881   0.21609357   -1.8605251   -1.7343309 
  345000    4.1293899    1.2748907    2.8544992   -0.1766214    0.8499754   0.99268063   0.75130338   -1.2298232            1  -0.31836206  -0.53090337  -0.53176367   0.10758088 -0.0076335785 -0.026045596 0.0095563263  -0.47333745  -0.46006228   0.32874623        0.075    1.5429199        1e-10 7.3054717e-12     13.68837    2.4509943    31.520363 -0.0085163183  -0.11860223 4.7491609e-05   0.16440062    1.2755857   0.22266822 
  346000    4.0980869     1.273252    2.8248348  -0.17580401   0.84888292     1.003727   0.74181057   -1.2298232            1  -0.20653679  -0.46722507    -0.455454   0.30306869 0.00027569111 -0.0044446809  0.019996896  -0.35955405  -0.34981383   0.33365529        0.075    1.5410273        1e-10 7.414562e-12    13.486973     2.433286    31.520363  0.012022191  -0.10647263 -0.0044131418   0.20280684    1.0237192    4.7813026 
  347000    4.1181608    1.2863628     2.831798  -0.18141625   0.85762392    1.0065673   0.75463575   -1.2298232            1  -0.34125837  -0.54917127  -0.56578068   0.09117685 -0.0095112129  0.022074074  0.026437763  -0.49692115  -0.48494085   0.33874216        0.075    1.5344751        1e-10 7.5276036e-12     13.28444    2.4530545    31.520363 -0.0036376635  -0.12472485   0.00414135   0.20820835   0.97655805    -1.938699 
  348000    4.1056199    1.2730796    2.8325403  -0.17579712   0.84876793   0.98703945   0.75316397   -1.2298232            1  -0.27540781  -0.49963894  -0.49794877   0.17136427 -0.0036846336  0.056158928   0.01407894    -0.430767  -0.41630278   0.34275461        0.075    1.5322248        1e-10 7.616769e-12    13.128926    2.4351508    31.520363 -0.0038102909  -0.11852837 -0.0038099832    0.2103505   -1.4142017   -1.8468009 
  349000    4.1155109    1.2746946    2.8408164  -0.18071604   0.84984464   0.99954205   0.74633395   -1.2298232            1  -0.24063975  -0.48640488  -0.52027406   0.28475967 -0.011703485 -0.0096233237 -0.0067292717  -0.39459008  -0.38331941   0.34852772        0.075    1.5352159        1e-10 7.7450604e-12    12.911455    2.4570917    31.520363 -1.5990138e-05  -0.12807082 -0.0020000383   0.20556775  -0.69699062  -0.70675031 
  350000    4.1318501    1.2911737    2.8406764  -0.17839287   0.86083135    1.0036093   0.76211002   -1.2298232            1  -0.31386787  -0.56500501  -0.52384396   0.14724537 -0.0014743402 -0.015813144  0.026746702   -0.4710724  -0.45712811   0.35329583        0.075    1.5265638        1e-10 7.8510184e-12    12.737201    2.4461021    31.520363 -7.3088114e-05  -0.10815527 -0.003735143   0.18832588    1.1023302 -0.0075160079 
  351000    4.1222538    1.2783398    2.8439139  -0.17589999   0.85227497   0.99761887   0.75177717   -1.2298232            1  -0.35122694  -0.55071115  -0.58697536  0.084005674 -0.011191929 -0.068262516    0.0258456  -0.50630007  -0.49363208     0.358527        0.075    1.5070053        1e-10 7.9672668e-12    12.551356    2.4445303    31.520363 -0.003394276  -0.10822106 0.0032861823   0.21322459    1.6871456   -2.6715008 
  352000    4.1192687    1.2864968    2.8327719  -0.17710564   0.85771328    1.0212635   0.74461704   -1.2298232            1  -0.23371157  -0.47143146  -0.52080612   0.29110286 0.00039669735 -0.098381198 -0.0029645263  -0.38730774  -0.37949185   0.36442377        0.075    1.4908765        1e-10 8.098306e-12    12.348262    2.4539187    31.520363 0.0065893201  -0.11858977 -0.013553458   0.18697083    1.2310361    1.4956562 
  353000    4.1147017    1.2911636    2.8235381  -0.18374629   0.86082464    1.0186671    0.7516785   -1.2298232            1  -0.26133261  -0.51448383  -0.48670632   0.21719233 0.0027851192  -0.10964774  0.024472035  -0.41638538  -0.40674227   0.37054573        0.075    1.4899721        1e-10 8.2343496e-12     12.14425    2.4551684    31.520363 -0.00020746873  -0.11667594 -0.0022143292    0.1958056  -0.83156398   -2.7889471 
  354000     4.104027    1.2714269    2.8326001  -0.18020956   0.84766609   0.99252109   0.74750619   -1.2298232            1  -0.34956262  -0.57528035  -0.60601385   0.13260635   0.01182012 -0.052683589  0.010190628  -0.50375474  -0.49124006   0.37417484        0.075    1.4839549        1e-10 8.3149965e-12    12.026463    2.4428902    31.520363 0.00057868524  -0.12296712 -0.0071084309   0.18552371  -0.52276264  -0.69330885 
  355000    4.1142102    1.2705582     2.843652  -0.17682266   0.84708694   0.98217166   0.75368813   -1.2298232            1  -0.33984666  -0.54485088  -0.56535362  0.090664527  0.014818965  -0.03883702  0.031407724  -0.49531397  -0.48004678   0.37981386        0.075    1.4620484        1e-10 8.4403079e-12    11.847909    2.4463906    31.520363 0.0072027282  -0.11249792 -0.0022800649   0.20327154   0.57160344   -1.1977236 
  356000      4.10285    1.2640775    2.8387725   -0.1810895   0.84276622   0.99477203    0.7376574   -1.2298232            1  -0.29717633  -0.52174657  -0.56273701   0.19295459 0.0061183458 0.0020085929 -0.029051592  -0.44933689  -0.43917509     0.384968        0.075    1.4541465        1e-10 8.5548446e-12    11.689283    2.4431047    31.520363 -0.0018315909  -0.11572668 -0.0031414476   0.20088594  -0.49323146    0.3085761 
  357000     4.096812    1.2661729    2.8306392  -0.18504809   0.84416319   0.99421693   0.74040536   -1.2298232            1  -0.23624568  -0.47843985   -0.4959004   0.26560322 -0.0046487351 -0.041561283  0.089654757  -0.38897308   -0.3781652   0.39051721        0.075    1.4403139        1e-10 8.6781602e-12     11.52318    2.4431387    31.520363  0.009621974  -0.11080468 -0.0030891343   0.21418091   0.54762164    3.4467072 
  358000    4.1055114    1.2871482    2.8183633  -0.18263888   0.85814752    1.0115812    0.7520521   -1.2298232            1  -0.36085141  -0.57216263  -0.58974354  0.079351929 0.0040574934 -0.092304637  0.056547626  -0.51598125  -0.50524959   0.39544786        0.075    1.4358505        1e-10 8.7877302e-12    11.379503    2.4369688    31.520363 0.0031631836  -0.11228309 0.00025731527   0.19990735  -0.35699365    1.8456963 
  359000    4.1068539    1.2810411    2.8258128   -0.1830341   0.85407593    1.0057524   0.74919608   -1.2298232            1  -0.33012065  -0.55772771  -0.56955234   0.13691808 0.0023353185 -0.019442008  0.016389859  -0.48466136  -0.47368681   0.40169127        0.075    1.4263697        1e-10 8.9264727e-12    11.202633    2.4546559    31.520363 -0.0060867746   -0.1060201 -0.0028203304   0.19854568     1.103929   -1.2786844 
  360000     4.111564    1.2732938    2.8382702  -0.17908027   0.84891076   0.99738659   0.74624532   -1.2298232            1  -0.25302063  -0.47701809  -0.50348445   0.22144064 -0.0069294887  0.031844816 0.0032912082  -0.40695267   -0.3953926   0.40869453        0.075    1.4215219        1e-10 9.0821007e-12    11.010668    2.4592728    31.520363 -0.00092606333    -0.102265 -0.0032316228   0.18419747  -0.20554023    -1.881823 
  361000    4.0963525    1.2815691    2.8147834  -0.18763895   0.85442793    1.0034351   0.75139534   -1.2298232            1   -0.2760993   -0.5077602  -0.52684265   0.20630497 0.0064235214  0.012621518 -0.012151684  -0.43109366  -0.41933466   0.41530195        0.075    1.4143184        1e-10 9.2289322e-12     10.83549    2.4538215    31.520363 -0.0010549619  -0.11362601 -0.0072754565   0.19433564   0.14343822    1.5052332 
  362000    4.1292179    1.2933155    2.8359025   -0.1855538   0.86225928    1.0194948   0.75353333   -1.2298232            1  -0.27333999  -0.53042087  -0.52285798   0.23325887  0.013917905 -0.031435294  -0.01834332  -0.42877537   -0.4188678   0.42123992        0.075    1.4097235        1e-10 9.360887e-12    10.682748    2.4441195    31.520363 3.9077102e-05  -0.10089288 -0.0046363598   0.20829188   0.97552185  -0.70835902 
  363000    4.1172257    1.2912304    2.8259953  -0.18753404   0.86086915    1.0158597   0.75369656   -1.2298232            1  -0.28578999  -0.51057246  -0.55179453   0.20499701 0.0013397553  0.019105995 -0.055380415  -0.44125904  -0.43079892   0.42704433        0.075    1.4004123        1e-10 9.489874e-12    10.537548    2.4501944    31.520363 -0.0078023419  -0.11612641 0.0060304383   0.19896333  -0.91776782  -0.58931096 
  364000     4.129715    1.2829414    2.8467736   -0.1782752   0.85534286    1.0079999   0.74978456   -1.2298232            1  -0.22535595  -0.46918153  -0.45665811   0.24977178 -0.017151828 0.0078212605 -0.0013578136  -0.38001805  -0.36924293   0.43180004        0.075    1.3842824        1e-10 9.5955565e-12     10.42149    2.4433127    31.520363 0.00033173227  -0.11295519 0.0080595871    0.1962211   0.79417185    0.5542422 
  365000    4.1195002      1.29849    2.8210102  -0.18442408   0.86570918     1.019972   0.75904069   -1.2298232            1  -0.30204929  -0.51959575  -0.50600078   0.11944867 -0.0071257081 -0.064858986 -0.001753607   -0.4586207  -0.44764521   0.43790965        0.075    1.3798485        1e-10 9.7313255e-12    10.276092    2.4427148    31.520363 -0.0077983443 -0.099473532 -0.0097031641   0.19032072  -0.11291114   -0.9313083 
  366000    4.0820898    1.2567549     2.825335  -0.18646499   0.83788417   0.98704689   0.73474234   -1.2298232            1  -0.30354541  -0.54299546  -0.53880245   0.17116168 0.0039096907 -0.070397445  0.017241381  -0.45510467  -0.44444144   0.44698081        0.075    1.3638183        1e-10 9.9329069e-12    10.067546    2.4373198    31.520363 -0.0056886815  -0.11780043 -0.00045051678   0.19040272  -0.77197352   -1.3929364 
  367000    4.1223267    1.2965868    2.8257399    -0.183429    0.8644403    1.0240227   0.75409045   -1.2298232            1  -0.31478598  -0.52749741  -0.55242644   0.13556591 0.0017751807  0.043997614  0.053804808  -0.47033628  -0.46096013   0.45601644        0.075    1.3528126        1e-10 1.0133699e-11    9.8680652    2.4672592    31.520363 -0.0072285953  -0.10750843 0.0025635619   0.20603247  -0.65326834   0.25128755 
  368000    4.1026704    1.2836428    2.8190276   -0.1891355    0.8558105     1.011024   0.74848315   -1.2298232            1  -0.27808382  -0.50388937  -0.52170717   0.19134508 -0.0048564866  0.060673549  -0.03679517  -0.43247747  -0.42240247   0.46115299        0.075    1.3421156        1e-10 1.0247844e-11    9.7581498    2.4492777    31.520363 -0.0044205264  -0.10241004 -0.0075460008   0.19874377   -1.2237775    1.0267053 
  369000    4.0896723     1.276713    2.8129593  -0.17908282   0.85119034   0.99068238     0.754742   -1.2298232            1  -0.28770307   -0.4919814  -0.52439374   0.15326593  0.013606252  0.063189996 -0.014305866  -0.44338776  -0.42911805   0.46664832        0.075    1.3292249        1e-10 1.0369963e-11    9.6432362    2.4447984    31.520363 0.0013653609  -0.09972074 -0.003527905   0.19836253    -1.068514  -0.70087907 
  370000    4.0962699    1.2809629     2.815307   -0.1943457   0.85402377    1.0069578   0.74827372   -1.2298232            1  -0.28054306  -0.53073399  -0.53689325   0.22599807  -0.01219205  0.039144516 -0.015483852  -0.43489351  -0.42428127   0.47297906        0.075    1.3287513        1e-10 1.0510646e-11    9.5141633    2.4457825    31.520363 -0.0097975618  -0.10955864 0.0072161429   0.21302986   -1.9219291  -0.34677226 
  371000    4.0984246    1.2643777    2.8340469  -0.18517537   0.84296637     0.988698   0.74219937   -1.2298232            1   -0.3220676  -0.55606185  -0.57797826    0.1678373 -0.0051726036  0.021569079 -0.0077304404  -0.47516506  -0.46319932   0.47748503        0.075    1.3097037        1e-10 1.0610779e-11    9.4243792    2.4439873    31.520363 0.0024940192  -0.13127598  0.001415303   0.19584523   0.29879781   -2.0881293 
  372000    4.0721185    1.2721161    2.8000024  -0.19312882   0.84812555   0.99150895   0.74898406   -1.2298232            1  -0.30603671  -0.54309263   -0.5302166   0.15519911 -0.0095608565 -0.0065723205  0.018315812  -0.46053368  -0.44756968   0.48596921        0.075    1.3085078        1e-10 1.0799316e-11    9.2598459    2.4470406    31.520363  0.011120314   -0.1328301 -0.0062483296    0.2287986  -0.69523915   -2.1872485 
  373000    4.0759894    1.2662423    2.8097471  -0.19184799   0.84420947   0.99120886   0.74256529   -1.2298232            1  -0.36764161   -0.6181641  -0.57863927  0.093878536   0.01032426  0.032141012 0.0097102533  -0.52081455  -0.50913174   0.49124326        0.075    1.2984585        1e-10 1.0916517e-11    9.1604311    2.4489014    31.520363 -0.00074624262   -0.1313434 0.0087649427   0.20668022  -0.16439071    1.8820076 
  374000    4.1049555     1.283563    2.8213926  -0.18195074   0.85575725    1.0081953   0.75035057   -1.2298232            1  -0.24872312  -0.49039751  -0.45767503   0.20190317 -0.0056830598  0.019470102  0.017123943  -0.40350197  -0.39263798   0.49903143        0.075    1.2881566        1e-10 1.1089587e-11    9.0174681    2.4433207    31.520363 -0.0051158256  -0.13324561  0.010788777   0.21775574  -0.95771548   -1.9783696 
  375000    4.0996656    1.2881936    2.8114721  -0.18838282    0.8588445    1.0185039   0.74844087   -1.2298232            1  -0.28159794  -0.51160949  -0.53509549   0.20191115 -0.010122875  -0.03207429 -0.013853725  -0.43598287   -0.4269843   0.50401279        0.075    1.2800207        1e-10 1.1200284e-11    8.9283448    2.4425442    31.520363 -0.0023648307  -0.11703115 0.00048571723   0.19290579   -0.1910346  -0.99729633 
  376000    4.0951898     1.276818    2.8183717  -0.18660787   0.85126039   0.99211731   0.75386755   -1.2298232            1  -0.31293685  -0.51740932  -0.55789862   0.13649739 0.0074927309 0.0012203913 -0.052273703  -0.46844117  -0.45455666   0.50998146        0.075    1.2739935        1e-10 1.1332921e-11    8.8238502    2.4508253    31.520363  0.010446324  -0.12374231 0.0076660062   0.19669551   0.23404917  -0.86231767 
  377000    4.0976055     1.277194    2.8204114  -0.19487876   0.85151106    1.0072536   0.74381721   -1.2298232            1  -0.26347172   -0.4991312  -0.50512618   0.21384222  0.011649646 -0.043281616  0.022665577   -0.4169029  -0.40725216   0.52035818        0.075    1.2649212        1e-10 1.1563515e-11    8.6478895    2.4510223    31.520363  0.001630982  -0.14413618 -0.0048926395   0.17213413    1.3307503   0.62715794 
  378000    4.1016114    1.2789972    2.8226142  -0.19893192   0.85271321    1.0003405   0.75063533   -1.2298232            1  -0.24634761  -0.51572671   -0.5365072   0.31319108 -0.012531797  0.021894616   0.01806525   -0.4011852  -0.38914124   0.52580039        0.075    1.2612913        1e-10 1.1684453e-11    8.5583809    2.4472889    31.520363 -0.0019910312  -0.11451114 -0.00049488664   0.21255326  -0.23824291    1.5482769 
  379000    4.0874169    1.2880346    2.7993823  -0.19093264   0.85873852    1.0046829   0.75782582   -1.2298232            1  -0.30301482  -0.55625868  -0.50405778     0.151272 -0.0042766033    0.0311096  0.037396593  -0.45933563   -0.4464283   0.53506595        0.075    1.2553051        1e-10 1.1890354e-11    8.4101782    2.4380531    31.520363 0.0065361061  -0.11691605 -0.0009159076   0.21070779    0.1300277   0.39184425 
  380000    4.0707057    1.2745036    2.7962021  -0.19498577   0.84971733    1.0080248   0.74024838   -1.2298232            1  -0.22783161  -0.46420603  -0.45880367   0.23951487 -0.0045529691 -0.00080936213   0.02341359  -0.38052663  -0.37172213   0.54418957        0.075    1.2519664        1e-10 1.2093102e-11    8.2691772    2.4659374    31.520363 0.0059083101  -0.12920234  0.012249013   0.21177229  -0.45067571    1.0689074 
  381000    4.0879158    1.2770312    2.8108846  -0.20173814   0.85140253   0.99941292   0.74905942   -1.2298232            1  -0.32297877  -0.57784868   -0.5568989   0.16581128 -0.0066078207 -0.049077364 0.0062149027  -0.47749129  -0.46563999   0.55164939        0.075    1.2515454        1e-10 1.2258875e-11    8.1573552    2.4467051    31.520363 -0.0025696433  -0.13254143 -0.0083827435   0.18123794    2.3568422   0.28107899 
  382000    4.0892104    1.2755924     2.813618  -0.19075795   0.85044326   0.99800969   0.74840728   -1.2298232            1  -0.16885441  -0.43981013  -0.40964883   0.34289574  0.019569225  0.053573045 -0.016665378  -0.32323241  -0.31131533   0.56025295        0.075    1.2411737        1e-10 1.2450066e-11    8.0320862    2.4529193    31.520363 0.0063746143  -0.13386468 -0.017516001   0.19866921   -1.2134002    1.5313476 
  383000    4.1103637    1.2924052    2.8179585  -0.19358396   0.86165239    1.0106532   0.75862486   -1.2298232            1  -0.18932043  -0.44246942  -0.47351348   0.34802161 -0.001320561 -0.0080252946 -0.0039329447  -0.34580606  -0.33358615   0.56701206        0.075    1.2379095        1e-10 1.2600268e-11    7.9363391     2.450993    31.520363 0.00015475167  -0.13441844 -0.0030009975   0.20174158   0.59163036    1.5134852 
  384000    4.0965972    1.2881239    2.8084733  -0.19450658   0.85879805    1.0131396   0.75207439   -1.2298232            1  -0.35717324  -0.57615173  -0.55679546  0.061427467 -0.013056655  -0.03596612 0.0056271137  -0.51230768  -0.50179388   0.57596997        0.075    1.2414526        1e-10 1.2799333e-11    7.8129073    2.4416782    31.520363 0.0027560768  -0.13497927 -0.0052823845   0.19853153  -0.83337358   -0.2475589 
  385000    4.0625353    1.2676798    2.7948555  -0.20440244   0.84516785   0.98963641   0.74527512   -1.2298232            1  -0.20312096  -0.44282925  -0.47261453   0.30608091 0.0022496684  0.023956024 -0.031558307  -0.35685287  -0.34438663   0.58288218        0.075     1.244492        1e-10 1.2952937e-11    7.7202565     2.440041    31.520363 -0.00046129484  -0.14560514 -0.010827047   0.19090221  -0.41377181  0.013843429 
  386000    4.1150755    1.3017584    2.8133171  -0.20071451   0.86788824    1.0294477   0.75617062   -1.2298232            1  -0.24214875  -0.46733391  -0.48377961   0.22466728 0.0048491771  0.091188812   0.02478132  -0.39812813  -0.38909728   0.59083118        0.075    1.2422526        1e-10 1.3129582e-11    7.6163889    2.4553933    31.520363 -0.0098225281  -0.13548211 0.0073089786   0.20369896  -0.25391468  -0.31516489 
  387000    4.0811836    1.2771944    2.8039892  -0.19888276   0.85151133    1.0100282   0.74189759   -1.2298232            1  -0.21937099  -0.47123498  -0.44052174   0.25364374 0.0045789011  0.026117951 0.0019082346   -0.3724062   -0.3635475   0.59941172        0.075    1.2400468        1e-10 1.332026e-11    7.5073607    2.4370634    31.520363  0.011817515  -0.15134837 -0.0039417282   0.18051036  -0.73786096    1.0187895 
  388000    4.0902264    1.2820045    2.8082219   -0.1973302    0.8547182    1.0093247   0.74781084   -1.2298232            1   -0.2064058  -0.46413143  -0.46622844   0.31114246 -0.017195562 -0.015161245 -0.013395897  -0.36066077  -0.35048188   0.60730108        0.075    1.2307279        1e-10 1.3495579e-11    7.4098337    2.4449475    31.520363  0.002240008  -0.15211409 -0.0074199035   0.21006707  -0.96537289    1.5845178 
  389000    4.0800735    1.2723853    2.8076882  -0.19934994   0.84830507   0.99635073   0.74593725   -1.2298232            1  -0.13532419  -0.39249714  -0.40470332    0.3912279 0.0077453499 -0.019560305  0.069607159  -0.28919268   -0.2775483   0.61689117        0.075    1.2375238        1e-10 1.3708693e-11    7.2946416    2.4467786    31.520363 0.00073469248  -0.15610632 -0.0071538107   0.20768065  -0.10187319   0.36359184 
  390000    4.0528537    1.2713061    2.7815476  -0.20316075   0.84758558    1.0070822    0.7372935   -1.2298232            1  -0.14176809  -0.40873496  -0.40899227   0.39242297 -0.0016397541  0.017768759  0.020437703  -0.29385359  -0.28552406   0.62349534        0.075    1.2336424        1e-10 1.3855452e-11    7.2173755    2.4466164    31.520363 0.0027021429  -0.15380607 -0.0045435383   0.20141263  -0.19454417  -0.58649841 
  391000    4.0644921    1.2755829    2.7889093  -0.20564712   0.85043689   0.99148777   0.75290974   -1.2298232            1  -0.22832756  -0.46506181  -0.47521552   0.25529466 -0.0033445476 -0.015143044  0.026017081   -0.3836343   -0.3698575    0.6269442        0.075    1.2367112        1e-10 1.3932093e-11    7.1776723    2.4447813    31.520363 -0.0068986221  -0.14773151 0.0040458385   0.20014297  -0.52702636     1.033898 
  392000    4.0627248    1.2741563    2.7885685  -0.20792044   0.84948578   0.98882265   0.75314466   -1.2298232            1  -0.28649373  -0.52522068  -0.49471823   0.16045772 -0.013924784  0.037170657   0.08006895  -0.44184894  -0.42764325   0.63263844        0.075    1.2345122        1e-10 1.4058632e-11    7.1130676     2.447235    31.520363 -0.010493045  -0.13086037 -0.0047638366    0.1860685    -1.234791   -1.4089976 
  393000    4.0438805    1.2700317    2.7738488  -0.21766949   0.84673589   0.98187834    0.7532971   -1.2298232            1  -0.15252573  -0.38880216  -0.43203695   0.36326191 -0.014903386  -0.01962783 0.0062893718  -0.30791238  -0.29268398   0.63804375        0.075    1.2338516        1e-10 1.417875e-11    7.0528079    2.4417104    31.520363 -0.0086350644  -0.20054978 -0.0039925537   0.18720176   0.45216409     1.818494 
  394000    4.0693621    1.2781871    2.7911749  -0.20551107   0.85217316    1.0002854   0.74975962   -1.2298232            1  -0.15757767  -0.40582844  -0.43068509   0.36378054 -0.0066646271   0.10512551   -0.0132708  -0.31223462  -0.30036343   0.64515899        0.075    1.2291607        1e-10 1.4336867e-11    6.9750248    2.4435783    31.520363  0.010141584  -0.16430538 0.0029597111   0.18872746   -1.9577761    3.2855758 
  395000    4.0689143    1.2773812    2.7915331  -0.21047074   0.85163585   0.99498653   0.75251734   -1.2298232            1  -0.17798431  -0.42218437  -0.47322142   0.36145286 -0.0059306192  0.012916513 0.0058870215  -0.33321011  -0.32001369   0.65097642        0.075    1.2337971        1e-10 1.4466143e-11    6.9126928    2.4421426    31.520363  0.001265799   -0.1910166 0.00021454427   0.19887224  -0.91379439   0.27246422 
  396000     4.103582    1.3010118    2.8025703  -0.21020791   0.86739044    1.0097441   0.76896338   -1.2298232            1  -0.23408488  -0.48259673   -0.4841605   0.26450258 -0.0058892236 -0.039804678 -0.020851165   -0.3927031  -0.37822083   0.65236764        0.075    1.2314586        1e-10 1.4497059e-11    6.8979509    2.4457488    31.520363 0.0039247584  -0.14214106 0.0014383464   0.19558346  -0.91098354   0.37702469 
  397000    4.0531879    1.2678203    2.7853676  -0.20828127   0.84526153    0.9986472   0.73919808   -1.2298232            1  -0.17745366  -0.44372679  -0.41499093   0.32635674 0.0058554643 -0.030391172 -0.0037123935  -0.32993203  -0.32000558   0.65923884        0.075    1.2322614        1e-10 1.4649752e-11    6.8260541    2.4328952    31.520363 -0.008023509  -0.18426771 -0.0063936387   0.19635761  -0.10047896   0.36714136 
  398000    4.0698604    1.2756174     2.794243  -0.20516907   0.85045991   0.99742488   0.74884016   -1.2298232            1 -0.083760874  -0.35833486  -0.38552017   0.49257241 -0.015335632 -0.040802658 -0.013727705  -0.23822817  -0.22613831   0.66487991        0.075    1.2229005        1e-10 1.4775109e-11    6.7681395    2.4441778    31.520363 -0.010986949  -0.20435893 -0.0068926116   0.19918164 -0.023280855    1.0049733 
  399000    4.0460875    1.2708065     2.775281  -0.21859429   0.84725249   0.98874933   0.74941643   -1.2298232            1  -0.16940178  -0.42803377  -0.39470213   0.31453057  0.014187135 -0.0025163652  -0.01196585  -0.32398794  -0.31054082   0.66955883        0.075    1.2206393        1e-10 1.4879085e-11    6.7208433    2.4406004    31.520363 -0.0063772557  -0.19164341 -0.008765511   0.19163271  -0.23649282  -0.89426677 
  400000     4.058927    1.2806489    2.7782781  -0.21829994   0.85381441   0.99371134   0.75708614   -1.2298232            1  -0.19642248  -0.47213208  -0.45517558    0.3380402 0.00034469865 -0.0094130677  -0.04394357  -0.35259072  -0.33826983   0.67502301        0.075    1.2211593        1e-10 1.5000511e-11    6.6664395    2.4365462    31.520363 0.0087437301  -0.16184549 0.0003670652   0.20903305  -0.77405469   0.55163963 
  401000    4.0377081     1.281976    2.7557321  -0.21985029   0.85469919    1.0083486   0.74845414   -1.2298232            1  -0.16334326  -0.45631574  -0.39108695   0.35737292  0.016162662  0.083601659  0.035313003  -0.31773092     -0.30728   0.67581429        0.075    1.2131871        1e-10 1.5018095e-11    6.6586339     2.449077    31.520363 -0.0023263253  -0.16921831 0.0034566837   0.21229974  -0.95804052   0.68198215 
  402000    4.0613335    1.2819964    2.7793371  -0.21943175    0.8547128   0.99868188   0.75516664   -1.2298232            1  -0.22221916  -0.48440912  -0.46060732   0.27835898 -0.014046875   0.10178466  0.035688446  -0.37799145  -0.36477603   0.67750338        0.075    1.2109248        1e-10 1.5055631e-11    6.6420332    2.4434866    31.520363 -0.012150198  -0.19825283 -0.0051346807   0.21397869   -1.2739959    1.1901103 
  403000    4.0514842    1.2906056    2.7608786  -0.22263486   0.86045262    1.0061565   0.75970652   -1.2298232            1 -0.084637879  -0.34346963  -0.36929923   0.45885522 -0.010082118  0.080391722 -0.023892653  -0.24134663  -0.22826171    0.6831153        0.075    1.2090528        1e-10 1.518034e-11    6.5874678    2.4543465    31.520363 0.0072455074  -0.17113671 -0.006488893   0.20341256   0.59735944    2.3653376 
  404000     4.063401    1.2729414    2.7904597  -0.22649036   0.84867578   0.99909188   0.74466763   -1.2298232            1  -0.17394708  -0.43037448  -0.43078507    0.3393183 0.0029941437  0.013748062  0.033212787  -0.32755369  -0.31656248   0.68515934        0.075    1.2121155        1e-10 1.5225763e-11    6.5678153    2.4543679    31.520363 0.0065052669  -0.17560027 -0.010099922   0.23550393  -0.84850261    2.5007153 
  405000    4.0336409    1.2758501    2.7577908   -0.2239475   0.85061503   0.99972777   0.74750901   -1.2298232            1  -0.23204167  -0.45948108  -0.46927881   0.23263487 -0.015329855 -0.059921811  0.025644583  -0.38623438  -0.37474784   0.69025134        0.075    1.2075701        1e-10 1.5338919e-11    6.5193643    2.4499041    31.520363 0.0040002726  -0.20819047 0.0068931571   0.21028125    1.4929746  -0.52664183 
  406000    4.0633265    1.2789373    2.7843891   -0.2164791   0.85267333   0.99053144   0.75735584   -1.2298232            1  -0.21201311  -0.44970052  -0.47083932   0.28450052 -0.016201716 -0.039860717  -0.03658332  -0.36823698  -0.35340654   0.68928346        0.075    1.2069128        1e-10 1.531741e-11    6.5285187    2.4383114    31.520363 0.0073202674  -0.19870091 -0.012534404   0.20769232    1.7091158    1.0067677 
  407000    4.0255643    1.2625507    2.7630137  -0.22886912   0.84174826   0.99667119   0.73462065   -1.2298232            1  -0.15342585  -0.40961825  -0.44134262   0.39068331 -0.0041434048  0.090851531 -0.039676686  -0.30496001  -0.29569571   0.69103878        0.075    1.2136439        1e-10 1.5356417e-11    6.5119355    2.4463697    31.520363 0.00098311967  -0.16951164 -0.0061284153   0.18691482   0.53017945  -0.16358237 
  408000    4.0644331    1.2859871     2.778446  -0.22281383   0.85737346    1.0279388    0.7394226   -1.2298232            1  -0.13114793  -0.36703308  -0.40737135   0.38096063 0.0084678519  0.024170199  0.019632665  -0.28367261  -0.27788109   0.69725269        0.075    1.2157163        1e-10 1.5494504e-11    6.4539013     2.446741    31.520363 0.0043597879   -0.1673147 -0.0091659477    0.1838361  -0.97876941   0.86009194 
  409000    4.0458908    1.2840436    2.7618472  -0.22448341   0.85607769    1.0022472   0.75500893   -1.2298232            1   -0.1773435  -0.43939803  -0.41335264   0.32072017 -0.0095309567 0.0094504032 -0.034543536  -0.33308326   -0.3204093   0.69811211        0.075    1.2217366        1e-10 1.5513602e-11    6.4459561    2.4510283    31.520363 -0.0098243397  -0.18146109 -0.00031707398   0.21846865   0.61125651   0.45046717 
  410000    4.0223409     1.265161    2.7571799  -0.22341658   0.84348857    0.9909658   0.74151365   -1.2298232            1  -0.15239485  -0.41528694  -0.38238729   0.34048966 -0.0027999242  0.074662165 -0.026212479  -0.30535087  -0.29385029   0.69665868        0.075    1.2174422        1e-10 1.5481304e-11    6.4594042    2.4429272    31.520363 -0.0026970548  -0.21833005 -0.0045930989   0.20536494   0.47431363    1.7624989 
  411000    4.0360684    1.2795505    2.7565179  -0.22731266   0.85308213    1.0034566   0.74910322   -1.2298232            1   -0.0511219  -0.31935479  -0.32410976   0.49009885 -0.014157227   0.03226736 -0.017329797  -0.20564345  -0.19436034    0.6967275        0.075    1.2136705        1e-10 1.5482833e-11    6.4587661    2.4378911    31.520363 0.0052233057  -0.18751767 -0.00079422094   0.19214376  -0.64107833     2.757422 
  412000    4.0603002    1.2893097    2.7709905  -0.22310971   0.85958862    1.0129716   0.75352844   -1.2298232            1   -0.2039599   -0.4636383  -0.44533358    0.2970922  0.016657587  0.020757588 0.0043035703  -0.35939426  -0.34855654   0.69892656        0.075     1.218979        1e-10 1.5531701e-11    6.4384447    2.4396213    31.520363 0.0057879356  -0.21829333 -0.0078955648   0.19387822  -0.63152921   -0.5157014 
  413000    4.0262297    1.2563143    2.7699154  -0.22039766   0.83759044   0.99837549   0.72640579   -1.2298232            1   -0.1446404  -0.37470191  -0.41097895   0.35175966 -0.012877295 -0.039073812 0.0049529879  -0.29448003  -0.28715353   0.69855177        0.075    1.2244375        1e-10 1.5523373e-11    6.4418991    2.4510645    31.520363  0.022013821   -0.1990354 -0.0034413878   0.22518623   0.64747845    2.9232631 
  414000    4.0298219    1.2620359    2.7677861  -0.22592343   0.84140503   0.97828017   0.74676669   -1.2298232            1  -0.18089847  -0.46174805  -0.40981636     0.328869 0.0025797625 -0.067353279 -0.018702422  -0.33493805  -0.32054309   0.70490722        0.075    1.2217594        1e-10 1.5664605e-11    6.3838188    2.4490192    31.520363 -0.0067438844  -0.17462284  0.012235413   0.19781364    1.0165413    1.5177507 
  415000    4.0317499    1.2675981    2.7641518  -0.22767129   0.84511344   0.97921559   0.75239438   -1.2298232            1  -0.18049098  -0.40855829  -0.45992539   0.32701073 -0.0087810997  0.052782995 -0.021218816  -0.33569142  -0.32026914   0.70642482        0.075    1.2242274        1e-10 1.5698329e-11    6.3701046    2.4548663    31.520363 -0.010631509  -0.20400465 -0.014403916   0.17809443  -0.78776359    1.7280478 
  416000    4.0482599    1.2814375    2.7668224  -0.22449642   0.85434018    1.0051942   0.75002954   -1.2298232            1 -0.029638985  -0.30214678  -0.31959508    0.5328249  0.012829807 -0.024449308  0.029763826  -0.18435162  -0.17312545   0.70861779        0.075    1.2163702        1e-10 1.5747062e-11    6.3503909    2.4502782    31.520363 -0.00034172533  -0.22155479 -0.0095635925   0.23425713 -0.0094692363    4.5179754 
  417000    4.0491376    1.2831416     2.765996  -0.21950639   0.85547634   0.99458295   0.75929514   -1.2298232            1  -0.19951452  -0.45377548  -0.43445357    0.2896855 -0.013234859  0.044626802  0.019374781  -0.35613842  -0.34148629    0.7094351        0.075    1.2153933        1e-10 1.5765224e-11     6.343075    2.4520305    31.520363 0.0056580137  -0.20783322 0.00071793105   0.20073671  -0.15088013    2.0570659 
  418000    4.0313196    1.2800669    2.7512527  -0.22546726    0.8534264    1.0139228   0.74244301   -1.2298232            1   -0.1248869   -0.3923251  -0.38284027   0.40050466 -0.005603681 -0.087110941 -0.016003402  -0.27803462  -0.26961934   0.70606855        0.075    1.2209218        1e-10 1.5690412e-11    6.3733188    2.4511145    31.520363 0.0075445098  -0.21478143 0.0075109355   0.18610476   0.23546315    1.8483356 
  419000    4.0092697      1.26982    2.7394496  -0.23733473   0.84659479   0.99272623   0.74555147   -1.2298232            1  -0.10548554  -0.38653162  -0.36047505   0.43055004  -0.02435931  0.045973292  0.033603168  -0.25927446  -0.24719227    0.7062491        0.075    1.2116293        1e-10 1.5694425e-11    6.3716895    2.4399554    31.520363 0.00093794687  -0.21551559  -0.01072003   0.19594361  -0.65388454    1.3301339 
  420000    4.0185504    1.2718008    2.7467496  -0.23053545   0.84791539    1.0003029   0.74254295   -1.2298232            1   -0.1623643  -0.40240773   -0.4370242   0.35233901 -0.0078707196 -0.085860259   0.01655693  -0.31553264  -0.30515256   0.71254205        0.075    1.2105274        1e-10 1.5834268e-11    6.3154167    2.4539607    31.520363 0.0041126968   -0.2129798 0.0042443071   0.19026147   0.14667739    1.4301824 
  421000    4.0303827     1.284663    2.7457197  -0.23034458   0.85649068   0.99785516    0.7587471   -1.2298232            1   -0.2662917  -0.50491173  -0.47755829   0.18359491 0.0079387494 -0.052237978 0.0027420154  -0.42280255  -0.40873056   0.71146633        0.075     1.212733        1e-10 1.5810363e-11    6.3249655    2.4594085    31.520363 -0.0021437231  -0.18254006 -0.0097835368   0.18681664    1.4733171  -0.16170556 
  422000    4.0525189    1.2808562    2.7716627  -0.22915973   0.85395266   0.99367448   0.75734558   -1.2298232            1  -0.14053358  -0.39793632  -0.40138015   0.37771573 -0.0072404505 -0.00015442686 -0.016010097  -0.29675533  -0.28237567   0.70833384        0.075    1.2167738        1e-10 1.5740752e-11    6.3529366    2.4478311    31.520363 -0.0011532324  -0.21343607 -0.0050409829   0.21093375  -0.27351308   0.67945778 
  423000    4.0460649    1.2832303    2.7628346  -0.21499176   0.85553549   0.99188405    0.7612629   -1.2298232            1  -0.14744694  -0.38711905  -0.42654727   0.37132551 0.0028777636 -0.073670567 -0.027417718  -0.30447673  -0.28903345   0.70850554        0.075    1.2126078        1e-10 1.5744567e-11    6.3513971    2.4537326    31.520363 0.0020124809  -0.20297297 0.00035529807   0.21752239   0.89131061    1.8078134 
  424000     4.029223    1.2746852    2.7545378  -0.23000776   0.84983841    0.9913133   0.75201779   -1.2298232            1  -0.18833517   -0.4757516  -0.41167205   0.32241814 -0.001708326 -0.002297035  0.015029654  -0.34345793  -0.32984021   0.71164597        0.075    1.2080973        1e-10 1.5814355e-11    6.3233689    2.4436467    31.520363 0.0014458468  -0.20481587 0.0094094466   0.20492215   0.58288878 -0.098567735 
  425000    4.0476139    1.2796166    2.7679973   -0.2207329   0.85312621    1.0065763   0.74701892   -1.2298232            1  -0.17682236  -0.43324891  -0.40081575   0.30359757 0.0034914925 -0.00082279855 -0.011015115  -0.33091397  -0.32050612   0.71118811        0.075    1.2120278        1e-10 1.580418e-11    6.3274399    2.4384523    31.520363  0.011253888  -0.20100327 0.00040866903   0.18640661  -0.83762614   0.99801537 
  426000    4.0436018    1.2728325    2.7707693   -0.2247769   0.84860324    1.0022546   0.74235625   -1.2298232            1  -0.11603668  -0.38002067  -0.36004324   0.39195387 -0.0018647251 0.0033303206 -0.056980072   -0.2691665  -0.25910353    0.7060978        0.075    1.2197861        1e-10 1.5691062e-11    6.3730548    2.4397603    31.520363 0.0069757624  -0.20172224  0.014011857    0.2002413   0.66021561    1.8811335 
  427000    4.0202451    1.2667786    2.7534664  -0.22506939   0.84456707   0.97265265   0.75601151   -1.2298232            1  -0.19735062  -0.42870093  -0.43932806   0.27597714 0.0095040277 -0.053293177 -0.0091398503  -0.35329718  -0.33619194   0.70372249        0.075     1.225923        1e-10 1.5638278e-11    6.3945661    2.4394698    31.520363 -0.0082002981   -0.1951504 -0.0031825734   0.18478171  -0.72716098   0.25710363 
  428000    4.0247897    1.2584904    2.7662993  -0.22562156   0.83904125   0.98160475   0.74046626   -1.2298232            1  -0.21515653  -0.47281457  -0.45996895   0.28731394 0.0041514002  0.028881546 -0.062265843  -0.36789649  -0.35527572    0.7066202        0.075    1.2255349        1e-10 1.5702671e-11    6.3683433    2.4358646    31.520363 -0.0053620454  -0.18376105 0.0020286228   0.21183711  -0.74352633    1.4967818 
  429000    4.0389877    1.2749247     2.764063  -0.22606948   0.84999807    0.9820218   0.75871777   -1.2298232            1  -0.13062531  -0.40892361  -0.38714237   0.40419006 -0.0098904142 -0.066387467 -0.017917215  -0.28713011  -0.27080403   0.70961943        0.075      1.23344        1e-10 1.5769321e-11    6.3414272    2.4463917    31.520363 0.0018804807  -0.22429987  0.008300491   0.21098755   0.58899132    2.5586594 
  430000    4.0415349    1.2784319    2.7631029  -0.22281193   0.85233637    1.0003987   0.74995742   -1.2298232            1  -0.16879032  -0.41506983  -0.39890843   0.30760732 -0.001096366  0.029848835 -0.031833899  -0.32348807  -0.31159225   0.70694177        0.075    1.2240605        1e-10 1.5709817e-11    6.3654464    2.4532168    31.520363 -0.0040277796  -0.20642317  0.011549621   0.18494719   0.79193934    1.9779985 
  431000    4.0312128     1.274806    2.7564068  -0.22862487   0.84991892     1.003198   0.74392965   -1.2298232            1  -0.11223811  -0.36957236  -0.39400878    0.4268668  0.011950596   -0.1152495  -0.01021825  -0.26569249  -0.25543964    0.7091429        0.075    1.2290047        1e-10 1.5758731e-11    6.3456886    2.4465006    31.520363 0.0047647746  -0.17804992 -0.0027986862   0.20423223    1.2607642    1.1787679 
  432000    4.0169954    1.2671843     2.749811   -0.2257207   0.84483754   0.98686785   0.74663209   -1.2298232            1  -0.18040678  -0.39833952  -0.42092075   0.27803994 0.00062566968 -0.077250588 -0.0091604643   -0.3344186  -0.32127725   0.70461528        0.075    1.2314172        1e-10 1.5658117e-11    6.3864638    2.4414585    31.520363 -0.0011284747  -0.20211676 -0.0018572502    0.1972637   -1.0406853   0.15933304 
  433000    4.0466343    1.2865578    2.7600765  -0.22090428   0.85775394    1.0065392   0.75487522   -1.2298232            1  -0.12211308  -0.38234419  -0.35418439   0.37018935  0.010643663 -0.042535778 -0.010449409  -0.27782525  -0.26579154   0.70681738        0.075     1.226922        1e-10 1.5707053e-11    6.3665667    2.4438803    31.520363 -0.004288319  -0.18123539 -0.0012701476    0.1791755  -0.36729017   0.54319604 
  434000    4.0365308    1.2802126    2.7563182  -0.21813547   0.85352355   0.99574627   0.75518577   -1.2298232            1 -0.094439705  -0.37162127  -0.36282493   0.45112709 -0.017131031 -0.049367528 -0.021278413  -0.25021594  -0.23657753   0.70393123        0.075    1.2284847        1e-10 1.5642916e-11    6.3926699    2.4469621    31.520363 0.00071009893  -0.21558034 -0.0028215497   0.21442224   0.41245275    1.7352033 
  435000    4.0364592      1.27685    2.7596092  -0.22539515   0.85128169   0.99410879   0.75252546   -1.2298232            1  -0.22040602  -0.44999418  -0.48609891   0.27487501 -0.0081196423 -0.041738556 -0.014380932   -0.3756335  -0.36231011   0.70606328        0.075    1.2263699        1e-10 1.5690295e-11    6.3733664    2.4373512    31.520363 -5.0033792e-05  -0.18433311 -0.011500402   0.20433214  -0.48913443    1.7207897 
  436000    4.0641638    1.2828026    2.7813612   -0.2177248   0.85525034    1.0138424   0.74558498   -1.2298232            1  -0.24379917  -0.46884533  -0.48401993   0.22146776 0.0024667661 -0.067090399  0.034821949    -0.397595  -0.38852012   0.70734744        0.075    1.2324255        1e-10 1.5718832e-11    6.3617958    2.4515365    31.520363 -0.0010026772  -0.19252101  0.011859618   0.19058568    1.3253486   0.41371244 
  437000    4.0467944     1.279457    2.7673373  -0.22394331    0.8530198   0.99840327   0.75249471   -1.2298232            1  -0.16336396  -0.42714412  -0.43192965   0.36898187 -0.011444658 -0.019249455  0.060737402   -0.3185851  -0.30588106   0.70637285        0.075    1.2355635        1e-10 1.5697174e-11    6.3705733     2.447763    31.520363   0.00571849  -0.19989999 0.0055152578   0.21526902   -0.8626647   0.61868467 
  438000    4.0188988    1.2692015    2.7496972   -0.2294176   0.84618242    1.0020882   0.73837507   -1.2298232            1  -0.14271744  -0.38961962  -0.42060808   0.38207539 -0.011460854  0.010199662  0.017169751  -0.29502604  -0.28576055   0.70682207        0.075    1.2414736        1e-10 1.5707157e-11    6.3665244    2.4504571    31.520363 -0.005068293  -0.20888302 0.0092677516   0.20725027  -0.25241741    2.9510535 
  439000    4.0484943    1.2963617    2.7521326  -0.22780511   0.86429021    1.0097082   0.76374233   -1.2298232            1  -0.16910069  -0.41190779  -0.43168087    0.3362866 -0.0074483309   0.02657408  0.014030996  -0.32664193   -0.3132315   0.70405835        0.075    1.2447673        1e-10 1.5645741e-11    6.3915157     2.444689    31.520363 0.0052970061  -0.19309051 -0.0045154691   0.18902032  -0.16552081   0.72165788 
  440000    4.0345396    1.2816048    2.7529347  -0.22556361   0.85445176   0.99688669   0.75596722   -1.2298232            1  -0.10126179  -0.37974318  -0.36974325   0.44570107 0.0068106197  0.028669536 -0.0023257469  -0.25719922   -0.2435624   0.70722698        0.075    1.2427982        1e-10 1.5716155e-11    6.3628794    2.4465929    31.520363 0.00093777743   -0.2126411 0.0014346312   0.21215976    2.1251005   -0.2596123 
  441000     4.044377    1.2804722    2.7639048  -0.22363488    0.8536966    1.0118051   0.74436571   -1.2298232            1 -0.093246057  -0.35925087  -0.36511035   0.44462304 -0.0020126173 0.0011099594 -0.032790885  -0.24679038   -0.2376762       0.7054        0.075    1.2401773        1e-10 1.5675556e-11    6.3793592     2.446645    31.520363 -0.00012081743  -0.20524315 -0.0007689622    0.1847435  -0.64520126    3.5232801 
  442000    4.0544585    1.2950351    2.7594234  -0.22755614    0.8634058    1.0145325   0.75890732   -1.2298232            1  -0.24033764  -0.48168152  -0.45822909   0.21889768 -0.0055037868  0.021577025  0.016615853  -0.39688154  -0.38515711   0.70686393        0.075     1.241618        1e-10 1.5708087e-11    6.3661474    2.4489219    31.520363 -0.0076381676   -0.1923695 -0.0011935918   0.20544303  -0.99689491  -0.97933378 
  443000    4.0424792    1.2809358    2.7615433  -0.22324289   0.85400572   0.99385817   0.75730825   -1.2298232            1 -0.081805114  -0.38484888  -0.35562975   0.49506329 -0.017574555 -0.060175153  0.012184022  -0.23801916  -0.22367342   0.70675324        0.075    1.2440774        1e-10 1.5705628e-11    6.3671445    2.4371654    31.520363 0.0038434724  -0.19462037 -0.0013396782   0.20586116   0.32427743    3.5028478 
  444000    4.0136849    1.2598191    2.7538658  -0.22698403   0.83992709   0.98155929   0.74199665   -1.2298232            1  -0.15595172  -0.40255909  -0.40534916   0.34005308 -0.0036646972 -0.028301854  0.021181484  -0.30900737  -0.29606442   0.70746441        0.075    1.2476638        1e-10 1.5721431e-11     6.360744    2.4434842    31.520363 -0.0039592819  -0.20459159 -0.0047461638   0.19677712   0.66047211   0.14150282 
  445000    4.0447731    1.2943898    2.7503833   -0.2289702   0.86297555    1.0084344   0.76239923   -1.2298232            1  -0.21193189  -0.44767879  -0.45078352   0.26266665  -0.01175712   0.04908965 -0.016504271  -0.36919608  -0.35588089    0.7116269        0.075     1.245856        1e-10 1.5813931e-11    6.3235384    2.4453476    31.520363 -0.0088899522  -0.19414019 0.0043384347   0.17660917  0.091854826   0.87812554 
  446000    4.0731358    1.2971935    2.7759423  -0.22130913   0.86484481    1.0137398   0.76189081   -1.2298232            1  -0.15442722  -0.38900211  -0.40982736    0.3355478 -0.0014324719 0.0029082207 -0.022541149  -0.31158654  -0.29913354   0.71473755        0.075    1.2496149        1e-10 1.5883057e-11    6.2960173    2.4377066    31.520363 0.0052397337  -0.18354749 -0.0071587553    0.1897872   -1.3196543    2.9424581 
  447000    4.0243465    1.2787303    2.7456162  -0.22705394   0.85253531   0.99750784   0.75229455   -1.2298232            1  -0.21339088  -0.47372032  -0.42509758   0.25864526  0.020957348  0.027941266 -0.018534382  -0.36857073  -0.35578016   0.71230297        0.075    1.2409771        1e-10 1.5828955e-11    6.3175365    2.4535056    31.520363 0.00041320483  -0.21869537  0.007050958   0.20605716  -0.16797601    1.7522098 
  448000    4.0335132    1.2789688    2.7545445  -0.23148502   0.85269427    1.0039074   0.74813493   -1.2298232            1  -0.13755593  -0.36575166  -0.39471725   0.34780113 -0.0081397228 -0.020175437  -0.01599459  -0.29187775  -0.28085872   0.71479597        0.075    1.2424525        1e-10 1.5884355e-11    6.2955028    2.4432693    31.520363 0.0074474902  -0.20456591 -0.0016541935   0.19600054   0.51129112    0.7586467 
  449000    4.0231097    1.2737473    2.7493624  -0.22580435    0.8492131   0.99196098   0.75051149   -1.2298232            1  -0.16689658  -0.39560637  -0.38994839   0.28486502 -0.013911956 -0.038826255 0.0037897071  -0.32170863  -0.30849407   0.71426495        0.075    1.2406969        1e-10 1.5872554e-11    6.3001832     2.441645    31.520363 0.0050788244  -0.17898234 -0.0060755548   0.21528427   0.50802371    2.2326586 
  450000     4.051782    1.2951792    2.7566028  -0.23051245   0.86350187    1.0279411   0.74979095   -1.2298232            1  -0.20086248  -0.46030816  -0.42337815   0.28109888 -0.0045240501 -0.041789152  0.061607054  -0.35552589  -0.34759596   0.70995781        0.075    1.2406027        1e-10 1.577684e-11    6.3384048    2.4493775    31.520363 -0.0032097396  -0.18109726 -0.0011465891   0.21364748    0.4937956   0.95416052 
  451000     4.024095    1.2799833    2.7441117  -0.23362148   0.85337066    1.0105723   0.74466729   -1.2298232            1  -0.21747048  -0.46542195  -0.49683858    0.3098491  0.014916352  0.023123172  0.024357781  -0.37107701  -0.36172464   0.70997818        0.075    1.2387347        1e-10 1.5777293e-11     6.338223    2.4388731    31.520363 -0.0025908063  -0.18906736  0.011320236   0.22592221   0.15880589    2.3024299 
  452000    4.0469777    1.2839722    2.7630056  -0.22306748   0.85603006    1.0038024   0.75385211   -1.2298232            1  -0.15602017  -0.36213266   -0.4504816   0.34455376 -0.0039218888 -7.531858e-05  0.029336194   -0.3115213  -0.29930797   0.71001118        0.075    1.2368017        1e-10 1.5778026e-11    6.3379283    2.4579015    31.520363 -0.0028036337  -0.19578783 -0.00082379888   0.18262652   0.49050646   0.19219922 
  453000    4.0371526     1.272402    2.7647506  -0.22424092   0.84831619   0.99881963   0.74424757   -1.2298232            1  -0.14011323  -0.42505004    -0.388642   0.39335236  0.010598408 -0.092458817 0.0032344078  -0.29363318  -0.28268976   0.71344403        0.075    1.2420602        1e-10 1.5854312e-11    6.3074324    2.4453552    31.520363 0.0046098123   -0.2152354 -0.0079824045   0.21029969    1.2502906   0.62894342 
  454000    4.0420976    1.2734114    2.7686863  -0.22828068   0.84898914     1.010054   0.73761194   -1.2298232            1 -0.052179185  -0.34511588  -0.29977468     0.488353 -0.0093483571 -0.034543143  0.017629753  -0.20433037  -0.19635937   0.71169178        0.075    1.2401949        1e-10 1.5815373e-11    6.3229619    2.4470905    31.520363 -0.0069340986  -0.16641199 0.0025120495   0.16944125   0.48861132  0.065793294 
  455000    4.0555926    1.2904871    2.7651055  -0.22649255   0.86037361    1.0113921   0.75594972   -1.2298232            1  -0.15955284  -0.38275012  -0.42953929   0.33363088 -0.0034775067  0.018063486  0.021772769  -0.31548666  -0.30392403   0.71255356        0.075    1.2425459        1e-10 1.5834524e-11    6.3153147     2.442522    31.520363 -0.00039423912  -0.16235188  0.005447849   0.21589129   0.96349465   -3.1240214 
  456000    4.0377174    1.2818148    2.7559026  -0.22639867   0.85459177    1.0146339   0.74392285   -1.2298232            1  -0.10373769  -0.39150948  -0.36104116   0.44133758 -0.0077458542  -0.01184608  0.053006142  -0.25719066  -0.24857163   0.71245938        0.075    1.2487273        1e-10 1.5832431e-11    6.3161496    2.4520827    31.520363 -0.010913454  -0.19013694 0.0034959077   0.21023919   0.65645027   0.43453434 
  457000    4.0512481    1.2876398    2.7636084  -0.22607006   0.85847527    1.0195113   0.74711895   -1.2298232            1  -0.22670001  -0.48546594  -0.47753415   0.28290007 -0.002163837  0.063043325  0.014175405  -0.38081226  -0.37223017   0.70857988        0.075    1.2452532        1e-10 1.574622e-11    6.3507307    2.4421601    31.520363 0.0047107446  -0.20064261 0.0032905565   0.18569681  -0.28928614   -1.5957058 
  458000     4.034689    1.2813549     2.753334  -0.22199415   0.85428513   0.99843731   0.75461223   -1.2298232            1 -0.036661819  -0.28579978  -0.32227187    0.4980862 -0.013499164  0.067581434  0.015358372  -0.19231975  -0.17918378   0.70851038        0.075     1.245284        1e-10 1.5744675e-11    6.3513537    2.4356739    31.520363 0.0031650419  -0.18327384 -0.0092765063   0.22015902  -0.34954005     3.037001 
  459000    4.0295336    1.2751086    2.7544251  -0.22657658   0.85012068   0.98576503   0.75633489   -1.2298232            1  -0.20666581  -0.48133557  -0.43536562   0.29670374  -0.02561321   0.01755718 -0.049050228  -0.36267909  -0.34737887   0.70790154        0.075    1.2400279        1e-10 1.5731145e-11    6.3568163    2.4404851    31.520363 -0.0073856343  -0.19994359  0.001429625   0.18464652   0.20233263   -1.6874745 
  460000    4.0413233    1.2856779    2.7556453  -0.22819146   0.85716732   0.99464248   0.76211527   -1.2298232            1  -0.25606346  -0.49812789  -0.48572125   0.21565876  0.010851824  0.043500173 -0.014412762  -0.41326908  -0.39804373    0.7079941        0.075    1.2392959        1e-10 1.5733202e-11    6.3559851    2.4483405    31.520363 -0.0024872777  -0.20721958 -0.010399162   0.20858483  -0.62010678  -0.23316851 
  461000    4.0210392     1.251654    2.7693851  -0.22824404   0.83448343   0.99467817   0.72370697   -1.2298232            1  -0.14516808  -0.39416369  -0.42035793   0.37901737  0.015056804 -0.0079741903  0.016513489  -0.29445102  -0.28715344    0.7139091        0.075     1.247118        1e-10 1.5864647e-11    6.3033235    2.4503019    31.520363 0.00010033895  -0.16699427 0.0062559118   0.21503488   0.55801507    1.3717913 
  462000     4.019362    1.2709053    2.7484567   -0.2262581   0.84731836   0.99650299   0.74416227   -1.2298232            1  -0.14531084  -0.39887979   -0.3961311   0.35907836 0.0017366599 -0.0017115559  0.021352694   -0.2988132  -0.28755669   0.71007905        0.075    1.2441439        1e-10 1.5779534e-11    6.3373226    2.4406969    31.520363  0.011838482  -0.20969422 -0.0074450909   0.18622325   -1.6890519    1.5150684 
  463000    4.0490075    1.2811906    2.7678169  -0.22562437   0.85417558    1.0135353   0.74397889   -1.2298232            1  -0.20063992  -0.48196912    -0.435282   0.31533135 0.0081304956 0.0024147513 -0.0015732114  -0.35410445  -0.34531704   0.70837299        0.075    1.2456036        1e-10 1.5741622e-11    6.3525855    2.4394603    31.520363 -0.0080183574  -0.22615693   -0.0036755   0.20513782   -0.8694199   0.14797136 
  464000    4.0420215    1.2799984    2.7620232  -0.22981835   0.85338073    1.0064675   0.74752492   -1.2298232            1  -0.14820492  -0.42572708  -0.39756172   0.37867403 0.0058260469  0.021743993  0.010669058  -0.30240091  -0.29187315   0.70952848        0.075    1.2347133        1e-10  1.57673e-11    6.3422401    2.4532874    31.520363 -0.0020304741  -0.18721768 -0.00059968306   0.19597052   0.51822907    2.5094723 
  465000    4.0161758    1.2770568     2.739119  -0.22864049   0.85141956   0.99926293   0.74919203   -1.2298232            1   -0.1783746  -0.43325735  -0.41840099   0.31653456  0.016691969  0.012257947 -0.072159603  -0.33291447  -0.32101441   0.70852306        0.075    1.2370754        1e-10 1.5744957e-11      6.35124    2.4541546    31.520363 0.0042238519  -0.21319798 -0.0027527622   0.17021499  0.024802166  -0.21996336 
  466000    4.0300483     1.283188    2.7468603  -0.23020841   0.85550728    1.0072955   0.75055029   -1.2298232            1    -0.216966  -0.45004752  -0.43204366   0.23119317 0.0010228474   0.12228241  0.016495674  -0.37178605  -0.36075242    0.7098426        0.075    1.2369664        1e-10 1.577428e-11    6.3394335    2.4473321    31.520363 -0.00071240683  -0.18173844 0.0033139573   0.18689699   -2.6545377    2.1386705 
  467000    4.0394619     1.275854     2.763608  -0.23001616   0.85061763   0.99128677   0.75335468   -1.2298232            1    -0.119346  -0.39695101  -0.40850768   0.44742069 0.0065811362   0.11578916 0.0057420041  -0.27474453  -0.26084726   0.71012968        0.075    1.2380331        1e-10 1.578066e-11    6.3368708     2.447143    31.520363 -0.00070096713  -0.20839909 -0.0077080496   0.22281178   -2.4764347    1.1829315 
  468000    4.0287536    1.2724773    2.7562763    -0.227102    0.8483664   0.99148255   0.74940987   -1.2298232            1  -0.17139795  -0.42853565  -0.41995892   0.33430071 -0.021399173  0.053888807 -0.0012965899  -0.32598276  -0.31292715   0.70715835        0.075    1.2350229        1e-10 1.571463e-11    6.3634969    2.4468742    31.520363 0.0047361164  -0.18414252 -0.0084695106   0.20745159  -0.15930436    1.1670921 
  469000    4.0329312     1.271534    2.7613972  -0.22425619   0.84773747    1.0018581   0.74116564   -1.2298232            1 -0.085904904  -0.34524276  -0.33099933   0.41852738 0.0099733086  0.054314536 -0.071756065  -0.23878913  -0.22891516    0.7079483        0.075    1.2275268        1e-10 1.5732184e-11    6.3563963    2.4422088    31.520363 0.00034450344  -0.19660083 0.0033823194   0.18785258  -0.53906358    1.6608661 
  470000    4.0540158    1.2818061    2.7722097   -0.2248396   0.85458592    1.0112299   0.74626854   -1.2298232            1  -0.17061026  -0.42527613  -0.41903243   0.33247778 -0.0080266246  0.040011998 -0.013668715  -0.32454709   -0.3149583   0.70888024        0.075    1.2359373        1e-10 1.5752894e-11    6.3480399    2.4468447    31.520363 -0.0092012212  -0.20212161 -0.0058044792   0.18259889   0.42202582    4.5861309 
  471000    4.0413274    1.2719592    2.7693682  -0.22888999   0.84802095    1.0029926   0.74086024   -1.2298232            1  -0.14175298  -0.41775127  -0.40465026    0.3971426 0.0065025162   0.10739107 -0.023844147  -0.29457421  -0.28492518   0.70776146        0.075    1.2356725        1e-10 1.5728033e-11    6.3580743    2.4438147    31.520363 -0.00056043659  -0.17815164 -0.011718779   0.21294106  -0.26861628    1.7382148 
  472000    4.0526406    1.2839742    2.7686664  -0.22097897   0.85603145    1.0219893   0.74126893   -1.2298232            1  -0.24088677  -0.45911486    -0.507404   0.24385855 -0.0041554014   0.07186224 0.0028164003   -0.3937923  -0.38677066   0.70951006        0.075    1.2325859        1e-10 1.576689e-11    6.3424047    2.4447498    31.520363 0.0045696547  -0.18826285 0.0052790286   0.20480928  0.078338236   0.93147563 
  473000     4.013651    1.2746574    2.7389936  -0.23564668   0.84981988     1.012931   0.73702673   -1.2298232            1  -0.18895999  -0.42921685  -0.41958458   0.28192146  0.021152671  0.010641322  0.053729948  -0.34099046  -0.33355085   0.71302564        0.075    1.2378679        1e-10 1.5845014e-11    6.3111335    2.4387865    31.520363 0.0026378214  -0.21450387  0.006712915   0.21910546 -0.019588313   0.72188915 
  474000    4.0265657    1.2887532    2.7378125  -0.22893553   0.85921758    1.0038456   0.75921586   -1.2298232            1  -0.10820016  -0.38276379  -0.34714554   0.40530884 0.0024472874 -0.013680479  0.025031266  -0.26480771  -0.25149413   0.71015341        0.075    1.2416116        1e-10 1.5781187e-11     6.336659    2.4514016    31.520363 0.0044852232  -0.17508128 0.0043950659   0.17102909     1.380185   0.81781447 
  475000    4.0393556    1.2901143    2.7492413  -0.22799664   0.86012507   0.99886524    0.7641979   -1.2298232            1  -0.13015411  -0.43536954  -0.40379796   0.44870518 0.0025611635  0.032006271 0.0015567538  -0.28778932  -0.27273715   0.71062597        0.075    1.2407121        1e-10 1.5791688e-11    6.3324451    2.4424148    31.520363 -0.0034695969  -0.18375357 0.0078586446   0.20869409   -0.7300992    1.6174448 
  476000    4.0311751    1.2682947    2.7628804  -0.22892671   0.84557781   0.99685337   0.74097461   -1.2298232            1  -0.16716357  -0.41597514  -0.43972271   0.35420715 -0.0035454299  0.040021782  0.020096969  -0.32000839  -0.30945943   0.71109678        0.075      1.24324        1e-10 1.5802151e-11    6.3282525    2.4433079    31.520363  0.001923094  -0.19576688 0.0068666556   0.22082433   -1.2787856    1.2159185 
  477000      4.05002    1.2894721    2.7605479  -0.21727054   0.85969693     1.016578   0.75121597   -1.2298232            1  -0.18353984  -0.39167047  -0.47428068   0.31533163 -0.0064218097 -0.019378144 0.0074611993  -0.33849721   -0.3286513   0.71058494        0.075    1.2423658        1e-10 1.5790776e-11    6.3328108    2.4459773    31.520363 -0.0084017641  -0.19753155 -0.0051932399   0.20130972   0.58032495   -1.4203403 
  478000    4.0448747     1.284348    2.7605267  -0.23049721   0.85628067   0.98958579   0.76411425   -1.2298232            1  -0.13140365    -0.419102  -0.35206491   0.37695594   0.01940587 -0.0033101192 -0.031559358  -0.28902161   -0.2726621   0.71289473        0.075    1.2416212        1e-10 1.5842105e-11    6.3122924    2.4382863    31.520363 0.0029759713   -0.2005456 -0.0037203185   0.19209502    0.3369165    0.6753561 
  479000    4.0286083    1.2787326    2.7498757  -0.23196129   0.85253683   0.98877378   0.75834118   -1.2298232            1  -0.11605978  -0.37746374  -0.36622165   0.39550605 0.0049829745 -0.0076136721 -0.023713577   -0.2724869  -0.25720232   0.71072102        0.075    1.2431155        1e-10  1.57938e-11    6.3315983     2.442565    31.520363  0.008137028  -0.20175967 0.0016449571   0.19413242   0.52196708    4.0144004 
  480000    4.0453205    1.2805032    2.7648173   -0.2278997   0.85371729    1.0075397   0.74735239   -1.2298232            1  -0.10639462  -0.37931059  -0.36011098   0.42023773 -0.00069420873  0.020300631 -0.012248947  -0.26055502   -0.2502159    0.7117508        0.075    1.2353095        1e-10 1.5816684e-11    6.3224376    2.4484262    31.520363 -0.0067256527  -0.18187617 0.0012115443   0.19652255  -0.67519739     0.325474 
  481000    4.0149498    1.2670061    2.7479437  -0.22580165   0.84471871   0.98795958   0.74567552   -1.2298232            1  -0.15559312  -0.43579063  -0.38584452   0.35485579 -9.4304335e-05 -0.013174062 0.0018256336  -0.30940763  -0.29661944   0.71288113        0.075    1.2426261        1e-10 1.5841803e-11    6.3124129    2.4431857    31.520363 -0.0031264619  -0.19362932 0.0029642909   0.18626399    1.1381955    2.7072639 
  482000    4.0353214    1.2834667    2.7518547  -0.22078169   0.85569308    1.0057391   0.75194174   -1.2298232            1  -0.19110528  -0.41796199  -0.44314194    0.2877881 0.00049946942 -0.011146184 0.0056043482  -0.34621235  -0.33466952   0.71204045        0.075    1.2484718        1e-10 1.5823121e-11    6.3198656    2.4439017    31.520363  -0.01453952    -0.203556 0.0044620567   0.19944191   0.49625388    1.4322733 
  483000    4.0405745    1.2784543    2.7621202  -0.22701142   0.85235127    1.0028838   0.74826289   -1.2298232            1   -0.2767321  -0.50550389  -0.52423137   0.19953897 0.0052738878 -0.0035968346 -0.0050045905  -0.43108031  -0.41988877   0.71136474        0.075    1.2463954        1e-10 1.5808105e-11    6.3258688    2.4461666    31.520363 -0.0021561774  -0.21227427 0.00088716651   0.20931505 -0.012693985  -0.01384559 
  484000    4.0199004     1.267032    2.7528683  -0.23896893   0.84473601   0.99111609   0.74352045   -1.2298232            1  -0.22128221  -0.42340331  -0.48826829   0.24782498 -0.0093543401 -0.057752028   0.03400634  -0.37465217   -0.3627591   0.70896154        0.075     1.241235        1e-10 1.5754701e-11    6.3473118    2.4374689    31.520363 -0.0095045405  -0.17156274 -0.0082592961   0.18566751   -1.7296934    1.0137388 
  485000    4.0513495    1.2870128    2.7643367   -0.2303615   0.85805729    1.0096681   0.75322326   -1.2298232            1  -0.12534207  -0.38751106  -0.37346787   0.38495271 -0.0010195944 -0.0040186901 -0.081418008  -0.28071349  -0.26946718   0.71330727        0.075    1.2383499        1e-10 1.5851273e-11    6.3086417     2.462925    31.520363 -0.0029122501  -0.20792384 -0.0020724469   0.19953387   0.48543245  -0.37917328 
  486000    4.0501992    1.2830327    2.7671664  -0.22555613   0.85540374    1.0053916   0.75169254   -1.2298232            1  -0.16363575  -0.39160164  -0.44125415   0.34194855  0.014069662  0.006374979 -0.001658715  -0.31869141   -0.3071504    0.7122348        0.075    1.2402963        1e-10 1.582744e-11    6.3181411    2.4448264    31.520363 0.0014691571  -0.18295905 -0.00098445744   0.20108586   0.10194843    1.8913868 
  487000    4.0421918    1.2838981    2.7582938  -0.22889291   0.85598067    1.0114801    0.7484555   -1.2298232            1  -0.13016432   -0.4127357   -0.3904723   0.41271504 0.0052101139 -0.0023368301 -0.0017931809  -0.28455227  -0.27454807   0.71219137        0.075     1.246885        1e-10 1.5826475e-11    6.3185264    2.4563379    31.520363 -0.001645288  -0.22493825  0.001456204   0.19856302   0.29137149    1.6146532 
  488000    4.0494613    1.2900901    2.7593712  -0.22751152   0.86010891    1.0206385   0.74910323   -1.2298232            1   -0.2245884  -0.47087329  -0.45670467   0.25381276 0.0022170608  0.017616067 -0.016535351  -0.37910995  -0.37027946   0.71713362        0.075    1.2462783        1e-10 1.5936303e-11    6.2749812    2.4560215    31.520363 0.0081722857  -0.20961676  0.010433158   0.19464146  -0.58647903   -1.0098978 
  489000    4.0332764    1.2784886    2.7547878  -0.22258025   0.85237413   0.99871048   0.75118957   -1.2298232            1  -0.20895195  -0.44033057  -0.47007078   0.28354551 0.00071718435  0.046343325 -0.032687617  -0.36390386   -0.3515129   0.71389538        0.075    1.2418573        1e-10 1.5864342e-11    6.3034446    2.4596548    31.520363 -0.012414146  -0.19963354 -0.011180549   0.21555091   -1.1106599   0.65420988 
  490000     4.034249    1.2688825    2.7653665  -0.22099102    0.8459697    1.0002435   0.73929174   -1.2298232            1  -0.25761898  -0.49604723  -0.50437778   0.22756809 -0.013914425   0.12165055  -0.02395419  -0.41011666  -0.40039875   0.71103198        0.075    1.2400884        1e-10 1.5800711e-11    6.3288293    2.4438948    31.520363 0.0030957448  -0.18579589 0.0044825515    0.2055885  -0.66202846   -0.1839806 
  491000    4.0168851     1.260429    2.7564561    -0.224268   0.84033375    1.0025958   0.72812728   -1.2298232            1  -0.15848022  -0.39732808  -0.42156006   0.34344749 -0.0031617544  0.061613966 -0.0065610534  -0.30867495  -0.30159578   0.70927963        0.075    1.2531601        1e-10 1.576177e-11    6.3444653    2.4495065    31.520363 0.00039165323  -0.18769085 -0.0075688232   0.20792836  -0.85224203    1.8847593 
  492000    4.0280729    1.2797658    2.7483072  -0.22715721   0.85322564    1.0115195   0.74376643   -1.2298232            1  -0.12784673  -0.39476194  -0.39428244   0.40550419 0.0099282497 0.0043152836 -0.0073005754  -0.28126744  -0.27223611   0.71158513        0.075    1.2532339        1e-10 1.5813003e-11    6.3239096    2.4646626    31.520363 0.0078826372  -0.19346841 -0.00050077911   0.21288475   0.84002332   0.34717446 
  493000    4.0259638    1.2750313    2.7509325  -0.22814726   0.85006917   0.99711621   0.74839257   -1.2298232            1  -0.24099295  -0.45859513  -0.45420137   0.18981766 0.00024277901  0.076520549   0.02488604  -0.39536791  -0.38332633   0.70710477        0.075    1.2496571        1e-10 1.5713439e-11    6.3639792    2.4516418    31.520363 0.0028747864  -0.17821194 0.00020697428   0.21867877   -0.7303021   -0.8884935 
  494000    4.0337523    1.2772662    2.7564861  -0.23047897   0.85155915    1.0015846   0.74782164   -1.2298232            1  -0.12555014  -0.39886472  -0.37456826   0.39678257  0.011465305  0.035000465  0.049325468  -0.27980733  -0.26852135    0.7115899        0.075    1.2531613        1e-10 1.5813109e-11    6.3238672    2.4633471    31.520363 0.0062653543  -0.17586781 0.0089694466   0.20870975   -0.7490954   0.26849597 
  495000    4.0170205    1.2750559    2.7419646  -0.23509163   0.85008557   0.99816675   0.74769334   -1.2298232            1  -0.18884947  -0.43110355  -0.45923052   0.32378567 0.0045536509  0.026519655  0.041905472   -0.3430802  -0.33133281   0.70989984        0.075    1.2594045        1e-10 1.5775552e-11    6.3389224     2.443106    31.520363 0.0034355251  -0.20588235 -0.0051225424   0.21416257   0.15158257   0.65552098 
  496000    4.0146435    1.2795835      2.73506  -0.22745123   0.85310413    1.0092132    0.7451568   -1.2298232            1  -0.19837876  -0.42715219  -0.43956185   0.27157777 -0.0066795734  0.040070556 -0.012711265  -0.35208626  -0.34243892   0.71276494        0.075    1.2563385        1e-10 1.5839221e-11    6.3134418    2.4572176    31.520363 -0.00019147798  -0.18249255 -0.0095098321   0.20891019   -1.5502981   0.67257564 
  497000    4.0315478    1.2751319    2.7564159  -0.23201829   0.85013623    1.0001937   0.74637642   -1.2298232            1  -0.15073532  -0.40261569  -0.43716429   0.38757401 -0.0064979666  0.022676636 -0.023826965  -0.30469441  -0.29350799   0.71147654        0.075    1.2585858        1e-10 1.581059e-11    6.3248747    2.4532488    31.520363 -0.012363871  -0.20661384 0.00030404162   0.18797672  -0.34179928    2.9821761 
  498000    4.0200508    1.2721156    2.7479352  -0.22127151   0.84812522   0.99662516   0.74544302   -1.2298232            1   -0.1245836  -0.38013967  -0.36810019   0.37448907  0.003106204  0.023873229 0.0071017025  -0.27835014  -0.26684688   0.70595169        0.075    1.2574086        1e-10 1.5687815e-11    6.3743738    2.4454728    31.520363 0.0076440084  -0.19388506 -0.014452688   0.19884709   0.47859717    1.6490937 
  499000    4.0262362    1.2781265    2.7481097  -0.22787114   0.85213275    1.0002006   0.74974998   -1.2298232            1  -0.16606088   -0.4496879   -0.4149561   0.36646136 -0.0022849268 -0.055694338   0.05448335  -0.32071584  -0.30883453   0.70962509        0.075    1.2620225        1e-10 1.5769446e-11    6.3413767    2.4380987    31.520363 0.0058177084  -0.18075151 -0.0050404265   0.20177984   0.10122243    1.5352318 
  500000    4.0570921    1.3033228    2.7537693  -0.22619337   0.86893121    1.0077646   0.77294039   -1.2298232            1  -0.17061996  -0.40921314  -0.42774527   0.32509853 0.0086157356  0.062701995 -0.071570593  -0.33005853  -0.31447334   0.71106941        0.075    1.2630115        1e-10 1.5801542e-11    6.3284961    2.4456921    31.520363 -0.0023591408  -0.18329863 -0.0098011823   0.20944161  -0.12478838   0.16875462 
  501000    4.0161747    1.2702185    2.7459562  -0.22707099   0.84686047   0.99186117   0.74659966   -1.2298232            1  -0.15687762  -0.40394283  -0.39862473   0.33193469 0.0053829773 0.0030784101  0.046931801  -0.31088276  -0.29846087    0.7141322        0.075    1.2609847        1e-10 1.5869604e-11    6.3013543    2.4461769    31.520363 8.165051e-05  -0.21047918 -0.0070572351   0.20200829   0.89674285    2.0552443 
  502000    4.0141323    1.2699918    2.7441405  -0.23220265   0.84670932   0.99968724   0.74092816   -1.2298232            1  -0.19275909  -0.40305712  -0.44474132   0.26952116   0.00447902 -0.0078257561 -0.028694411  -0.34559433  -0.33545947   0.72044789        0.075    1.2620694        1e-10 1.6009953e-11    6.2461144    2.4455179    31.520363 0.00088828706  -0.17926391 -0.0037626325   0.20460674   -1.0988201   0.37574146 
  503000    4.0345096    1.2689202    2.7655894  -0.22313256   0.84599485   0.99906366   0.74015073   -1.2298232            1  -0.17538116  -0.43659245  -0.41248201   0.32293097  0.013491298 -0.053791886 0.0077797065  -0.32805604  -0.31799253   0.71432041        0.075    1.2640959        1e-10 1.5873787e-11     6.299694    2.4438275    31.520363 -0.0026030656  -0.19925525 0.0084682756    0.1977893 -0.091270426    2.0614757 
  504000    4.0372479     1.291723    2.7455249  -0.22487526   0.86119756    1.0162755   0.75396456   -1.2298232            1  -0.11365191  -0.33897944   -0.3858444    0.3838681 -0.007840718 -0.024292054  0.018012758  -0.26917624  -0.25872018   0.71720987        0.075    1.2666903        1e-10 1.5937997e-11    6.2743141    2.4515913    31.520363 -0.0033704641  -0.18254794 -0.0038584107   0.21013687  -0.35119172    1.7094152 
  505000    4.0096866    1.2720313    2.7376554  -0.22773808   0.84806901   0.98879457   0.75076677   -1.2298232            1 -0.083068329  -0.35573436  -0.35162205   0.45815143 -0.0077409774  0.041731686 -0.0050300323  -0.23793303  -0.22421383   0.71360615        0.075    1.2597125        1e-10 1.5857914e-11    6.3059995    2.4443001    31.520363 -0.018403259  -0.22064466 0.00084030607   0.18087333  -0.32671153   0.89788725 
  506000    4.0270592      1.28274    2.7443192  -0.23696863   0.85520858    1.0076027   0.74983226   -1.2298232            1  -0.14124045  -0.40575182  -0.35971397   0.34174444 0.0037129087 0.0048388371 0.0038642713  -0.29591239  -0.28507072     0.710875        0.075    1.2655779        1e-10 1.5797222e-11    6.3302268    2.4419023    31.520363 0.00061211999  -0.22921758 -0.0019268298   0.17471403  -0.45832287   0.97253742 
  507000     4.015361    1.2694507    2.7459103  -0.23057924   0.84634852    1.0047024    0.7368471   -1.2298232            1  -0.23478933  -0.49448157  -0.48159003   0.27170362 0.0026783368 -0.051445107  0.027922989  -0.38678274   -0.3782056   0.71296516        0.075     1.256448        1e-10 1.584367e-11    6.3116689    2.4425949    31.520363 0.00086085128  -0.19935768 -0.007984224   0.18136663   0.82801714  -0.15753484 
  508000    4.0533876    1.2942381    2.7591495  -0.22693401   0.86287441    1.0001803   0.76794006   -1.2298232            1  -0.14785806  -0.36990122  -0.44553308   0.37186011 -0.011758251 -0.052360018  0.019073194  -0.30626519  -0.29062882   0.71222227        0.075    1.2509606        1e-10 1.5827162e-11    6.3182523    2.4587071    31.520363 -0.00075959371  -0.18095814 -0.016008251   0.18823061  -0.80432081  -0.98686801 
  509000    4.0575646    1.2939869    2.7635777  -0.22630188   0.86270694    1.0200342    0.7539175   -1.2298232            1  -0.16604405  -0.44797612  -0.39364163    0.3434856 -0.010574264  0.044425168  0.011176931  -0.32155867  -0.31164886   0.71043754        0.075    1.2539549        1e-10 1.5787501e-11    6.3341248    2.4437845    31.520363 -0.0033649349  -0.18401731 0.0019818595   0.20595235   0.82594041  -0.78968902 
  510000    4.0356153    1.2752432    2.7603721   -0.2235427   0.85021043   0.99845251   0.74770688   -1.2298232            1  -0.15461105  -0.42431616   -0.3991977   0.35968071  0.011355658 -0.027863812  0.065776688  -0.30884457  -0.29713518   0.71022301        0.075    1.2581537        1e-10 1.5782734e-11     6.336038    2.4632445    31.520363  0.010683115   -0.1993752 -0.0048158477   0.19646829   -0.2950711  -0.39781593 
  511000    4.0305253    1.2885545    2.7419709  -0.23077754   0.85908511    1.0113107   0.75382578   -1.2298232            1  -0.19090565  -0.40272974  -0.46031347   0.29032627 -0.014304069 0.0014868084 -0.052557796  -0.34640135  -0.33526522   0.70987024        0.075     1.263776        1e-10 1.5774894e-11    6.3391868    2.4528632    31.520363 -0.00047466816  -0.21797274 0.00097461498   0.16625496  -0.34155294    1.1210838 
  512000     4.023974    1.2679946    2.7559794   -0.2340751   0.84537776   0.99153947   0.74431337   -1.2298232            1  -0.14221538  -0.40642634  -0.39527681   0.37505702  0.002711587 -0.0043669053  0.012845972   -0.2957489   -0.2837527   0.71385919        0.075    1.2649465        1e-10 1.5863538e-11    6.3037642    2.4488389    31.520363 0.00074082901  -0.20497925 -0.0063898166   0.18158457  -0.93614439  -0.62707896 
  513000    4.0214253    1.2626623     2.758763  -0.22909132   0.84182269   0.98612919   0.74204179   -1.2298232            1  -0.18617533  -0.45747438  -0.43915238   0.33810078 -0.0045862928  0.042114476 -0.005087286  -0.33924028  -0.32694036   0.71843883        0.075    1.2630504        1e-10 1.5965307e-11    6.2635812    2.4487967    31.520363 -0.00041444375  -0.20354204 -0.011110014    0.2310844   0.24283139   0.56476311 
  514000    4.0116868    1.2661136    2.7455732  -0.23205079   0.84412369   0.99639834   0.73882897   -1.2298232            1  -0.21714471  -0.44777405  -0.45218569   0.24852561 0.0026313278 -0.040169644  0.030133515  -0.36954694  -0.35937562   0.71179654        0.075    1.2650915        1e-10 1.5817701e-11    6.3220313    2.4427171    31.520363 -0.0013254131   -0.1955701 -0.0059413275   0.19925858   0.60261141   0.66912682 
  515000    4.0300785    1.2602634    2.7698152  -0.22762502   0.84022332   0.99360523   0.73416197   -1.2298232            1 -0.046034906  -0.34638377  -0.32677177   0.53505083 -0.011293449 -0.068364693  0.054825362  -0.19747445  -0.18786711   0.71496841        0.075    1.2637938        1e-10 1.5888187e-11    6.2939844    2.4489103    31.520363 0.0023714968  -0.20788258 0.0042762827   0.22468511   0.94186794    1.8125268 
  516000    4.0178012    1.2821608    2.7356404  -0.23003701    0.8548224   0.99949523   0.75478924   -1.2298232            1   -0.1917947  -0.45605012  -0.44671198     0.327378 0.0085984886 -0.053533759  0.042450254  -0.34748914  -0.33446767   0.70962601        0.075    1.2646598        1e-10 1.5769467e-11    6.3413685    2.4478052    31.520363 -0.0060971225  -0.21301925 -7.8644883e-05   0.22180186   -1.1927206   -1.5982805 
  517000    4.0426505    1.2872779    2.7553726  -0.22500805   0.85823401    1.0183245   0.74753199   -1.2298232            1  -0.18341345  -0.46120452  -0.39721621   0.30818038 0.0080602583 -0.095428824 -0.018092291   -0.3376109  -0.32877421   0.70655776        0.075     1.267939        1e-10 1.5701284e-11    6.3689061    2.4415881    31.520363 -0.0012100776  -0.19790998 -0.0038211634   0.18532174   0.64828058    1.1904749 
  518000    4.0354166    1.2740051    2.7614115   -0.2253701   0.84938496    1.0033788   0.74290105   -1.2298232            1   -0.1738736  -0.41016523   -0.4434371   0.33198153  0.014857933 -0.044777832  0.020380895   -0.3271158  -0.31710093   0.71226596        0.075    1.2648692        1e-10 1.5828132e-11    6.3178647    2.4570758    31.520363 0.00097522429   -0.1866809 -0.0021989237   0.18239664  -0.28788824   0.77303527 
  519000     4.021398    1.2620522    2.7593458  -0.22561432   0.84141594   0.98952982   0.73900026   -1.2298232            1  -0.12631003  -0.39457647  -0.37863548   0.39428184 -0.0045370503 -0.072822108  0.022575351   -0.2787476  -0.26756049   0.71210013        0.075    1.2550687        1e-10 1.5824447e-11     6.319336    2.4435369    31.520363 -0.0018354906  -0.18320771 0.0049260308   0.20063338  -0.50294723   0.58135126 
  520000    4.0364318    1.2652175    2.7712143  -0.22637208   0.84352622   0.97684643   0.75134813   -1.2298232            1  -0.21674027   -0.4424998  -0.46530066   0.25757965 -0.006896433  0.042204774  0.016312792  -0.37172489  -0.35618024   0.70722932        0.075    1.2529791        1e-10 1.5716207e-11    6.3628584    2.4480166    31.520363 -0.0074464259  -0.19404773 0.0053687668   0.18104114  -0.91076391  -0.96433269 
  521000    4.0357455    1.2869472    2.7487983  -0.22406547   0.85801355    1.0197654   0.74616184   -1.2298232            1 -0.069473388  -0.35726635  -0.33036946   0.47921565 -0.0019337758  0.015912761  0.016650718  -0.22338821  -0.21503982   0.70825048        0.075    1.2562885        1e-10 1.5738899e-11    6.3536844    2.4447427    31.520363 -0.0024287017  -0.19867612 -0.0049414766   0.21299213  -0.26803193   0.71711206 
  522000    4.0303835    1.2717852    2.7585983  -0.22964338   0.84790494    1.0169851   0.73098094   -1.2298232            1   -0.1924166  -0.46024003  -0.41569691   0.29868713  0.005711179  0.047100479 -0.020585802  -0.34319998  -0.33758617    0.7056949        0.075    1.2552764        1e-10 1.5682109e-11    6.3766934    2.4498356    31.520363 -0.0035527194   -0.2115076 0.0038492173   0.18024738  0.056699281  -0.34850329 
  523000    4.0061884    1.2645643    2.7416242  -0.23001869   0.84309073   0.98712092   0.74350116   -1.2298232            1 -0.0074060326  -0.26626826  -0.30932769   0.55337784  0.010365756 0.0091942067  0.048738615  -0.16077202  -0.14831263   0.70879251        0.075    1.2619608        1e-10 1.5750945e-11    6.3488256    2.4495567    31.520363 -0.004009576  -0.19426054 -0.0099727753    0.2060887  -0.58017599    4.0989698 
  524000    4.0385806    1.2726288    2.7659519  -0.22616735   0.84846737   0.99396374    0.7478637   -1.2298232            1  -0.29550613  -0.51728446  -0.50550961   0.13627568  0.016057349  0.044954005    0.0724007    -0.449772  -0.43738951   0.70638941        0.075    1.2623207        1e-10 1.5697543e-11    6.3704239    2.4573732    31.520363 0.0057240404  -0.17940092 -0.003970125   0.18161877  -0.95851861   0.35376853 
  525000    4.0333927    1.2752918    2.7581009  -0.22120508   0.85024285   0.99941679   0.74709443   -1.2298232            1  -0.20881216  -0.49072808  -0.44292376   0.30721536 0.0011691356 -0.0029932941  0.027645643  -0.36291935  -0.35147394   0.70433121        0.075    1.2671505        1e-10 1.5651805e-11    6.3890396    2.4392265    31.520363 -0.00018055932  -0.18841217 -0.0051992564   0.19283497 -0.086475585   0.92916051 
  526000    4.0216058    1.2779803    2.7436254  -0.22385547   0.85203529   0.99751561   0.75144307   -1.2298232            1  -0.20209491  -0.43864576  -0.43605984   0.26842087 -0.025881116  0.037067517  0.023074215  -0.35709912   -0.3444853   0.70617742        0.075     1.269151        1e-10 1.5692831e-11    6.3723363    2.4520508    31.520363 0.0038285463  -0.19547759 0.0020958484   0.19996682    1.3474953    2.1824914 
  527000    4.0457871    1.2816555    2.7641316  -0.22347423   0.85448555     1.016695   0.74231684   -1.2298232            1  -0.17983508   -0.4417685  -0.43939665    0.3416599 -0.0064605441  -0.12604791 0.0062122458  -0.33295677  -0.32496323   0.70660314        0.075    1.2738767        1e-10 1.5702292e-11     6.368497    2.4393904    31.520363 0.00019093406  -0.21937384 -0.0031155312   0.20714766     1.216831    1.5668365 
  528000    4.0528118     1.290974    2.7618378  -0.22632579   0.86069823    1.0016543   0.76323767   -1.2298232            1 -0.078106108  -0.35613871  -0.35463982    0.4764602 -0.0093056622 -0.040133408 -0.0024343133  -0.23554325  -0.22108728   0.70623464        0.075     1.272609        1e-10 1.5694103e-11      6.37182    2.4417596    31.520363 -0.0037193333  -0.19657418  0.017548678   0.17561158     1.753661  -0.34769368 
  529000    4.0533716    1.2951558    2.7582157  -0.23171856   0.86348628    1.0154147     0.758433   -1.2298232            1  -0.13727524    -0.394636  -0.39515108   0.37796136 0.0084422231 -0.083854475 -0.014090906   -0.2937213  -0.28222064   0.71166018        0.075     1.266191        1e-10 1.5814671e-11    6.3232427    2.4545674    31.520363 0.0025181713  -0.19977777 -0.010949991   0.21389628    1.1760506  -0.18387339 
  530000    4.0353652    1.2832995    2.7520657  -0.22920937   0.85558162   0.99710447   0.75772836   -1.2298232            1  -0.17296199  -0.42948217  -0.42245133   0.33304753 0.0082512304 0.0095183071 -0.033922471   -0.3292627  -0.31529369   0.71045093        0.075    1.2648563        1e-10 1.5787798e-11    6.3340054    2.4591686    31.520363 0.0099957057  -0.21354119  0.017570621   0.19798475   -2.0392097  0.061513755 
  531000    4.0426389     1.278232    2.7644069  -0.22563351    0.8522031   0.99613836    0.7526801   -1.2298232            1   -0.1598087  -0.40653403  -0.41379516   0.34090311  0.010259843 -0.0058551155 -0.024547034  -0.31506807  -0.30200249   0.71306345        0.075    1.2663483        1e-10 1.5845854e-11    6.3107988     2.456605    31.520363 0.0080134643  -0.18093409 -0.0050743869   0.19066889    -2.095987  -0.29233846 
  532000    4.0464025    1.2943264    2.7520762  -0.23062478   0.86293326    1.0108564   0.76065164   -1.2298232            1 -0.041885964  -0.27070767  -0.34984723   0.49489702 -0.0086955013  0.029641753  0.063302546  -0.19878967  -0.18618068   0.70883341        0.075    1.2674913        1e-10 1.5751854e-11    6.3484592     2.458935    31.520363 -0.0063528119  -0.20847599 0.00084119001   0.19715493  -0.72772149    2.1393397 
  533000    4.0408703    1.2854348    2.7554355  -0.22126368   0.85700523    1.0041834   0.75523855   -1.2298232            1  -0.25651218  -0.51193088  -0.52045301   0.26284733   0.00527191   0.11343894  0.012661979  -0.41229931  -0.39985437   0.70671007        0.075    1.2716435        1e-10 1.5704668e-11    6.3675334    2.4421005    31.520363 0.0094556956  -0.20722947 -0.015872914   0.19448499  -0.50219051   0.18762801 
  534000    4.0258755    1.2746764    2.7511991  -0.23893837   0.84983256    1.0013019   0.74509568   -1.2298232            1   -0.1974821  -0.45781013  -0.43886847   0.30423229 0.0017089299  0.042315158  0.024621102    -0.351177  -0.34041296    0.7131999        0.075    1.2654856        1e-10 1.5848887e-11    6.3095914    2.4426519    31.520363 0.0021670584  -0.20725189 -0.0034054277   0.21489865  -0.49900545    1.1991145 
  535000    4.0204712    1.2723867    2.7480845  -0.22743666   0.84830601   0.99187914   0.74903324   -1.2298232            1 -0.058246805  -0.30981329  -0.31860498   0.45367785 -0.0040249121  0.025025142 -0.023476841  -0.21275392  -0.19983262   0.70943121        0.075    1.2629081        1e-10 1.5765138e-11    6.3431097    2.4369982    31.520363 -0.001852435   -0.1876806 -0.0019082708   0.19751734  -0.19031375    1.6194083 
  536000    4.0146084    1.2765533    2.7380552  -0.22100776   0.85108386   0.99976291     0.748278   -1.2298232            1  -0.15980016  -0.40062396  -0.40715501   0.32837847 -0.00094971107  0.018297455 -0.060502651   -0.3141515  -0.30251134   0.71338732        0.075    1.2642101        1e-10 1.5853052e-11    6.3079338    2.4524998    31.520363 -0.0090355215  -0.18640056  0.014585997   0.20300104  -0.11126731   0.29186308 
  537000     4.037923    1.2738952    2.7640278  -0.22775063   0.84931173    1.0098731   0.73828298   -1.2298232            1  -0.22461498   -0.4463852  -0.48994179   0.26248207 -0.025415424 -0.042543063 -0.017987582  -0.37690458  -0.36876934   0.71001166        0.075    1.2646722        1e-10 1.5778037e-11    6.3379241    2.4511061    31.520363 0.0055995999  -0.19003576 -0.0020438073   0.19492744   0.69916114    1.5052103 
  538000    4.0286119    1.2766041    2.7520079  -0.22784775   0.85111774    1.0130576   0.73913526   -1.2298232            1  -0.13318866  -0.38214683  -0.41127602   0.39385689  0.010204649   -0.1117081  0.019826169  -0.28565407  -0.27779758   0.71111383        0.075    1.2632515        1e-10 1.580253e-11    6.3281008     2.447334    31.520363 -0.0039615014  -0.20352413  0.014008924   0.19846839    0.5272151   0.21858072 
  539000    4.0238559    1.2793453    2.7445106  -0.22630548   0.85294532   0.99618303   0.75390511   -1.2298232            1 -0.080771382  -0.33454675  -0.38031232   0.47254492 -0.0057020514  0.024852139  0.040798042  -0.23628345  -0.22297155   0.71528497        0.075    1.2637631        1e-10 1.5895222e-11    6.2911989    2.4523605    31.520363 0.0010259256  -0.20615428 -0.001544645   0.19377852  -0.61766033    1.6453123 
  540000    4.0092441     1.265119    2.7441251  -0.23277875   0.84346057   0.99030517   0.74192343   -1.2298232            1  -0.10398092  -0.40103298  -0.32841359    0.4175038 -0.0050592745 -0.020527831  0.010391332  -0.25702146  -0.24534206   0.71093831        0.075    1.2587901        1e-10 1.5798629e-11    6.3296631     2.436999    31.520363 -0.0070138035  -0.19027593  0.014063078   0.20782894    1.3269115    1.4493328 
  541000    4.0510823    1.2849433     2.766139  -0.22084942   0.85667751    1.0141982   0.74775368   -1.2298232            1  -0.17297703  -0.43011676  -0.43827621   0.34946188  0.015225238 0.0066063316 -0.0059998317  -0.32722021  -0.31774877   0.71140055        0.075    1.2586214        1e-10 1.5808901e-11    6.3255504    2.4422983    31.520363 0.0013009743  -0.20185677 0.0066478845   0.23328065   0.85824881    1.5767049 
  542000    4.0300203    1.2830773     2.746943  -0.22293499   0.85543346    1.0087042   0.74945051   -1.2298232            1  -0.10535077  -0.35589216  -0.37508287   0.41492271 0.0097104984 -0.065832942  0.020853498  -0.25994397  -0.24933828     0.711287        0.075    1.2597507        1e-10 1.5806378e-11    6.3265602    2.4406784    31.520363 -0.0044519965  -0.20299803 -0.0029179906   0.19750288    2.2359255   0.41627181 
  543000     4.019246    1.2720692    2.7471768  -0.23350877   0.84809432   0.99597671   0.74583947   -1.2298232            1  -0.20260079  -0.46085794  -0.44696685   0.30002242 -0.014102882 -0.026424474 -0.006906419  -0.35644911  -0.34477151   0.71438355        0.075    1.2631724        1e-10 1.587519e-11    6.2991372    2.4491685    31.520363 -0.012176207  -0.18601935 0.0036759202   0.21319316    1.7717548  -0.51002321 
  544000    4.0427202    1.2743681     2.768352  -0.22572831   0.84962702   0.99410997   0.74972478   -1.2298232            1  -0.26829619  -0.51477226  -0.49969503   0.20957872 0.0038063065 -0.085696916  0.031364385  -0.42294596  -0.41020044   0.70987294        0.075    1.2642274        1e-10 1.5774954e-11    6.3391626    2.4472825    31.520363 -0.0062820716  -0.20731335 0.0049913635   0.19486155  0.055431518   0.28419828 
  545000    4.0265511    1.2849718    2.7415793  -0.23130432   0.85669653    1.0137782   0.74807649   -1.2298232            1  -0.21167364  -0.46052702  -0.46145154   0.28695765 0.0050751086 0.0050757208  0.033402073   -0.3659834  -0.35638543   0.71046845        0.075    1.2635612        1e-10 1.5788188e-11    6.3338492    2.4417231    31.520363 0.0053225145  -0.20067683 -0.0041323087   0.19083644   0.52675141   0.88850685 
  546000     4.035124     1.274694      2.76043  -0.23364683    0.8498443    1.0003463   0.74577678   -1.2298232            1  -0.14130144  -0.36696234  -0.41722329   0.36028131 0.0030147442 -0.045118149  0.016646458  -0.29513683  -0.28409591   0.71852962        0.075    1.2630149        1e-10 1.5967325e-11    6.2627898    2.4598649    31.520363 -0.0020994272  -0.17264459 0.0062675734   0.20512175    1.1754532    1.8716506 
  547000    4.0287997    1.2844505    2.7443492  -0.23400806     0.856349    1.0211779   0.74236775   -1.2298232            1  -0.17102492  -0.39592061  -0.41770943   0.30055528  0.020439955 -0.034484694 -0.00042141295  -0.32415711  -0.31679298   0.71796027        0.075    1.2662478        1e-10 1.5954673e-11    6.2677563    2.4573204    31.520363 -0.0013343526  -0.18840897 -0.0023342921   0.20784974  -0.71803475   0.44926952 
  548000    4.0205056    1.2810292    2.7394764  -0.22564885     0.854068    1.0039159   0.75045359   -1.2298232            1  -0.20052284  -0.43647328  -0.42823534   0.26314009 -0.00064139661 -0.055694495 -0.052688737  -0.35532295  -0.34382684   0.72175264        0.075     1.273102        1e-10 1.6038948e-11     6.234823    2.4610593    31.520363 -0.0017829662  -0.21294929 -0.0053013228   0.20172321  -0.80413968  -0.51960402 
  549000    4.0332844    1.2788013    2.7544831  -0.23184834   0.85258262     1.004036   0.74785705   -1.2298232            1  -0.14781026  -0.40274184  -0.41448335   0.37379441 -0.0065633637 -0.068812847  0.032666662  -0.30207476   -0.2911314   0.71587027        0.075    1.2712927        1e-10 1.5908228e-11    6.2860552     2.456618    31.520363 -0.010609641  -0.17363591 0.0075963357   0.21892659   0.82092457    1.1997378 
  550000    4.0503502    1.2948529    2.7554973  -0.22093446   0.86328431    1.0046345   0.76555126   -1.2298232            1 -0.064050022  -0.36040595  -0.32900573   0.49726161 0.0037192586  -0.10010536 -0.033603173   -0.2219644   -0.2074566   0.71288624        0.075    1.2776231        1e-10 1.5841916e-11    6.3123676    2.4457733    31.520363 -0.013459825  -0.20179634 -0.0043662814   0.21174071   0.62632085    2.4036611 
  551000    4.0385354    1.2715284     2.767007  -0.22251348   0.84773376     1.003542   0.73999407   -1.2298232            1 -0.053012837  -0.31996513  -0.33090217   0.49182879 -0.0020069312  0.029981235 0.0021916983   -0.2056554  -0.19626347   0.71430347        0.075    1.2680362        1e-10 1.5873411e-11    6.2998434    2.4522903    31.520363 -0.008902855  -0.19736914 -0.0022756044   0.17783647   -1.1412334    3.4046643 
  552000    4.0276192     1.271252    2.7563672  -0.22715465   0.84754949    1.0031239   0.73997161   -1.2298232            1  -0.30706139  -0.55124531  -0.53345975   0.16352089 -0.001643387 -0.047597286 -0.015058359  -0.45969932  -0.45025233   0.71347221        0.075    1.2699432        1e-10 1.5854938e-11    6.3071833     2.451076    31.520363 -0.014013204  -0.20415173  0.010344191   0.21143198   -1.1901899   -3.5757374 
  553000    4.0445593    1.2936449    2.7509144  -0.22391638   0.86247891    1.0174945    0.7552892   -1.2298232            1  -0.11829656  -0.37100844  -0.39724276   0.41336153 -0.011443807  -0.05000549  -0.03166031  -0.27409413  -0.26353883   0.71183397        0.075    1.2680449        1e-10 1.5818533e-11    6.3216989    2.4365976    31.520363 -0.0034076597  -0.20129183 0.0052536435   0.19266506   0.60161644    4.1739399 
  554000    4.0212509    1.2696296    2.7516212  -0.23476746   0.84646785   0.98002788   0.75412408   -1.2298232            1  -0.23803542  -0.50852344  -0.46760774   0.26202493  0.010495246 -0.079577699 -0.018664615  -0.39359265  -0.37792952   0.71395065        0.075    1.2732156        1e-10 1.586557e-11    6.3029566    2.4493632    31.520363 -0.006433511  -0.19868257 0.0046953665   0.20264503   0.18510778    1.8895737 
  555000    4.0446123    1.2880551    2.7565572  -0.22939493   0.85875217    1.0030728   0.75896315   -1.2298232            1  -0.18712018  -0.44358349   -0.4120784   0.29430135 -0.0047164978  -0.11006931 -0.014142671   -0.3436756  -0.33030383   0.71386451        0.075    1.2794828        1e-10 1.5863656e-11    6.3037172    2.4446889    31.520363 0.0073486982  -0.19756478 -0.011687178   0.19630721    1.4963994    1.6893813 
  556000    4.0300906     1.272974    2.7571167  -0.23038849   0.84869752   0.99663081   0.74640751   -1.2298232            1  -0.16897472   -0.4154208  -0.42776986   0.33626651 -0.0052994787 -0.042100079 -0.0020606971  -0.32294021  -0.31123881   0.70860925        0.075    1.2798267        1e-10 1.5746872e-11    6.3504675    2.4426698    31.520363 0.00034224922  -0.18796653 0.0029387786   0.20027138  -0.39509728  -0.96586231 
  557000    4.0248247    1.2806259    2.7441988  -0.23323033   0.85379909    1.0051099    0.7491723   -1.2298232            1  -0.20517325  -0.45592626  -0.45371556   0.29412207 0.0079569742  0.027565549 -0.021667118  -0.35970905  -0.34864768   0.71376668        0.075    1.2740532        1e-10 1.5861482e-11    6.3045812    2.4503546    31.520363 0.0051347237  -0.19157484 0.0036053784   0.19002577   0.12235205    1.5980595 
  558000     4.017264    1.2684829    2.7487811  -0.23328842   0.84570328   0.99258327   0.74414188   -1.2298232            1  -0.20635146  -0.47172644  -0.40924847   0.26192054 -0.015075068 0.0079026008 -0.019347727  -0.35984961  -0.34803778   0.71547302        0.075    1.2809075        1e-10  1.58994e-11    6.2895454    2.4493405    31.520363 -0.011370405  -0.19274441 -0.010626137   0.19920381 -0.077556891   0.44920853 
  559000    4.0252525     1.278687    2.7465655  -0.23139195   0.85250644    1.0040459   0.74772129   -1.2298232            1  -0.20564683   -0.4605226  -0.48201772   0.32559984 -0.0035640009 -0.0085544523 -0.031485606  -0.35988332  -0.34896938   0.71652579        0.075    1.2902059        1e-10 1.5922795e-11    6.2803043    2.4566782    31.520363 -0.0090040532  -0.22070524 -0.0053802407   0.20384473    1.2954262  0.058074366 
  560000    4.0247377    1.2805175    2.7442202  -0.23269413    0.8537268    1.0031773   0.75038732   -1.2298232            1  -0.16043074   -0.4225011    -0.419205   0.36041389 -0.0089303228 -0.036331779  0.041127333  -0.31521717  -0.30362931   0.71736231        0.075    1.2857104        1e-10 1.5941385e-11    6.2729808    2.4491745    31.520363 -0.0035625717  -0.23115991 0.0031926512   0.20501182   0.89216331  -0.56909877 
  561000    4.0424021    1.2893288    2.7530733  -0.22884694   0.85960136     1.008809   0.75643055   -1.2298232            1  -0.23841182  -0.49488733  -0.48566511   0.26531699  0.014716719 -0.018864852  0.015436054  -0.39444482  -0.38241428    0.7128442        0.075    1.2768528        1e-10 1.5840982e-11    6.3127398     2.447897    31.520363 -0.003130113  -0.21113386 -0.013816914   0.21565247 -0.047554773    0.8101648 
  562000    4.0217235    1.2785207    2.7432028  -0.22646657   0.85239554    1.0128909   0.74141276   -1.2298232            1 -0.094643555  -0.34447235  -0.39189207   0.45243376 -0.0032022659 -0.022448063 -0.048859668  -0.24757876  -0.23922869   0.71248154        0.075    1.2786439        1e-10 1.5832923e-11    6.3159531      2.43981    31.520363 -0.0065165408  -0.21097098 -0.0068406366   0.19019504   0.40232264    1.8075817 
  563000     4.037429     1.278096    2.7593329  -0.21905458   0.85211243   0.99231703   0.75517108   -1.2298232            1  -0.14093552  -0.36912765  -0.38827758   0.33459867 0.00064612431 -0.019183556  0.029899181  -0.29670873  -0.28258384   0.71771923        0.075     1.277279        1e-10 1.5949316e-11    6.2698612    2.4643938    31.520363 -0.0075097221  -0.21188735 -0.0084322575   0.19765392    1.1185256    2.5575972 
  564000    4.0326572    1.2789014    2.7537558  -0.22852929   0.85264938   0.99850122   0.75180013   -1.2298232            1 -0.095800212  -0.36126224  -0.35668302   0.43054462  0.015808635  -0.06335417 -0.017465153  -0.25087807  -0.23833129   0.71688755        0.075    1.2771272        1e-10 1.5930834e-11    6.2771351    2.4673392    31.520363 0.0018797502  -0.18343046 0.0030161902   0.20007481  -0.11851171    1.8570665 
  565000    4.0379129    1.2822723    2.7556407  -0.21703115   0.85489674     1.001016   0.75386269   -1.2298232            1  -0.20322139  -0.46644256  -0.42402033   0.28079871 -0.00099002862 -0.092456771  0.050047297  -0.35872471  -0.34611144   0.71350602        0.075     1.273304        1e-10 1.5855689e-11    6.3068844    2.4376006    31.520363 -0.0078390213  -0.18208369 -6.4717854e-05   0.20237243   0.41382994   0.79978797 
  566000     4.039265    1.2756276    2.7636374  -0.22806308   0.85046668   0.99137126   0.75304079   -1.2298232            1  -0.10603049   -0.3554051  -0.37098922   0.40830285 0.0046570816 -0.084771908 -0.036345568  -0.26136427  -0.24754381   0.71280686        0.075    1.2836916        1e-10 1.5840152e-11    6.3130706    2.4373059    31.520363 0.0091008863   -0.1789376 0.0057835579   0.21271166   0.90790896    0.9358154 
  567000    4.0320587    1.2744269    2.7576318  -0.23003964    0.8496662   0.99095661   0.75197323   -1.2298232            1  -0.14155071  -0.38646967  -0.41374998   0.37556751  -0.01073193 -0.0017081502 -0.0096505338  -0.29666428  -0.28300484   0.71006733        0.075    1.2736834        1e-10 1.5779274e-11    6.3374272       2.4529    31.520363 -0.003139414  -0.20053111 0.00036763274   0.20057144   0.38056185     2.011773 
  568000    4.0338379     1.276808    2.7570298  -0.22736542    0.8512537   0.99752468   0.75011427   -1.2298232            1  -0.10252442  -0.37264348  -0.37650145   0.44157166  -0.01570837  -0.14598987  0.035206291  -0.25725453  -0.24491611   0.70897677        0.075    1.2754583        1e-10 1.5755039e-11    6.3471755    2.4429904    31.520363 -0.0071685551  -0.18750126   0.00601316    0.1982415   0.48644832    1.5241278 
  569000    4.0248134    1.2648886    2.7599248  -0.23125096   0.84330694    1.0029744   0.73289622   -1.2298232            1  -0.19298378   -0.4522966  -0.42528772   0.29863298 -0.0068275946  0.040995088 -0.079381233  -0.34416223  -0.33615339   0.71477714        0.075    1.2804969        1e-10 1.5883936e-11    6.2956686    2.4596324    31.520363 -0.0041940187  -0.16965375  0.007703343   0.21157487   -1.0090054 -0.020733415 
  570000    4.0288504     1.273075    2.7557753  -0.22899036   0.84876489   0.99958022   0.74448046   -1.2298232            1  -0.12473747  -0.37291362  -0.40372021   0.40242142 0.0030161586 0.0033412527 0.0074307004  -0.27830546  -0.26742257   0.70658271        0.075    1.2786355        1e-10 1.5701838e-11    6.3686812    2.4488167    31.520363 -0.0010429243  -0.22243431 -0.011175071   0.22303965  0.028928289    2.8924083 
  571000    4.0275276    1.2706463    2.7568812  -0.23289124   0.84714569    1.0028759   0.73945998   -1.2298232            1   -0.1116505  -0.37432593  -0.35047134   0.38984578 -0.021499385  0.060041161 -0.0060573946  -0.26418289  -0.25480604   0.70350228        0.075    1.2739819        1e-10 1.5633384e-11    6.3965678    2.4372607    31.520363 0.0015793795  -0.17245667 0.0088250101   0.19365312   0.18263056     1.389503 
  572000    4.0443116    1.2847751    2.7595365  -0.22824936   0.85656541    1.0077454   0.75202941   -1.2298232            1  -0.12926573  -0.40736559  -0.40439815   0.42396655  0.012797602  0.043886646   0.04660361  -0.28439088  -0.27311637   0.70583868        0.075    1.2733674        1e-10 1.5685304e-11    6.3753945     2.445336    31.520363 -0.010012183  -0.21630609 0.0094271667   0.21077127  -0.38082996   0.62291732 
  573000    4.0395537    1.2795337      2.76002  -0.22875581   0.85307096   0.99798731   0.75286912   -1.2298232            1  -0.15149195  -0.42210223  -0.40911208   0.37673847 -0.0049753202  0.030237857  0.038229117  -0.30679031  -0.29394967   0.70788905        0.075    1.2711633        1e-10 1.5730868e-11    6.3569284    2.4363308    31.520363 0.0010588671  -0.20359245 0.0015777202   0.18707855   -1.3399311   0.60180716 
  574000    4.0333099    1.2810556    2.7522544  -0.22874638   0.85408557   0.99270765   0.75823953   -1.2298232            1  -0.15450419  -0.42634816  -0.38028304   0.34311864 0.0042105524  0.014094223  0.017788808  -0.31091034  -0.29620827   0.71152533        0.075    1.2692215        1e-10 1.5811674e-11     6.324441    2.4425897    31.520363 -0.010193342  -0.20084085 -0.0078598208   0.19740916    -0.508291    1.5165409 
  575000    4.0346524    1.2698013    2.7648511  -0.22590372   0.84658228   0.98118408   0.75351762   -1.2298232            1  -0.10425639  -0.42233936  -0.35124377   0.46081395  -0.00569204  0.012975162 -0.0022320774  -0.25968853  -0.24431554   0.71026523        0.075    1.2784866        1e-10 1.5783672e-11    6.3356614    2.4395871    31.520363 -0.010760756  -0.19676688 0.0069077229   0.20325749   0.80344671    1.2699921 
  576000    4.0139989    1.2753793    2.7386195  -0.23270009   0.85030117    1.0012064   0.74595469   -1.2298232            1 -0.088370345  -0.31461233  -0.36279454   0.41229584 -0.0098908566  0.021316707  0.030171678  -0.24224244  -0.23128758   0.71333576        0.075    1.2790953        1e-10 1.5851906e-11    6.3083898    2.4587744    31.520363 -0.0088294355  -0.19814411 0.0025392103   0.18441371  -0.61101752    2.3638489 
  577000    4.0233916    1.2712045    2.7521871  -0.23285326   0.84751783   0.99857437   0.74306637   -1.2298232            1  -0.18379552  -0.43022489  -0.41731247   0.29615079  0.016591347  0.055764865 -0.0045258538  -0.33707182  -0.32633704   0.71556735        0.075     1.276758        1e-10 1.5901497e-11    6.2887162    2.4522463    31.520363 0.0015187477   -0.2184843 -0.010822192    0.1788208  -0.96103926    1.3857429 
  578000    4.0254202    1.2858968    2.7395234   -0.2283566   0.85731323    1.0172447   0.74672114   -1.2298232            1  -0.15277091  -0.39284604  -0.43661916   0.37115246   0.02149439   0.10364535 0.0062320813   -0.3068011  -0.29797754   0.71381707        0.075    1.2781432        1e-10 1.5862602e-11    6.3041361    2.4546425    31.520363 -0.008187194  -0.17632673 -0.0064553366   0.21132757 -0.044918373     2.639509 
  579000     4.000778    1.2694624    2.7313156  -0.23401134   0.84635634   0.98966881   0.74726376   -1.2298232            1 -0.094349978  -0.36901749  -0.34731914   0.43328669 -0.016829077 -0.034175368 -0.00036233287   -0.2484921  -0.23562028   0.71317256        0.075    1.2820502        1e-10 1.5848279e-11    6.3098334    2.4557996    31.520363 0.0079386787  -0.20537251  0.013926045   0.21964325   -1.0453338    1.0605939 
  580000    4.0379556    1.2774256    2.7605299  -0.22737864   0.85166547    1.0058585   0.74504389   -1.2298232            1  -0.20208732   -0.4552075   -0.4355226   0.28446815  0.010846027 -0.021182061 -0.020809723  -0.35577153  -0.34566862    0.7133992        0.075    1.2811123        1e-10 1.5853316e-11    6.3078288    2.4537525    31.520363 -0.0013115616  -0.22767957  0.013044459   0.20014534   0.94964227    0.6012098 
  581000    4.0347632    1.2759413    2.7588219  -0.22532533   0.85067584   0.98865888   0.75527169   -1.2298232            1  -0.13500674  -0.37626887  -0.41058361   0.38183226 -0.013506728 -0.051744179  0.049906579   -0.2908007  -0.27613288   0.71106774        0.075     1.277884        1e-10 1.5801505e-11     6.328511     2.444626    31.520363 -0.014766637  -0.19689917 0.0027666646   0.17888285  -0.73387933    2.0380985 
  582000    4.0049009    1.2668992    2.7380018  -0.22687501   0.84464743   0.99107656   0.74339793   -1.2298232            1  -0.20086494  -0.44060016  -0.43317333   0.27117867 0.0024216112  -0.10194498 0.0026591786  -0.35420963  -0.34233619   0.71207149        0.075    1.2820879        1e-10 1.5823811e-11    6.3195902    2.4437525    31.520363 0.0013443183  -0.18629263 0.0072054885   0.19681137   0.37805923   0.40067058 
  583000    4.0447706    1.2817703    2.7630003  -0.22095681   0.85456211    1.0023591   0.75236695   -1.2298232            1 -0.099416751  -0.40324435   -0.3624711    0.4674652  0.024070812 -0.076761835 0.0032320291  -0.25461153  -0.24249853   0.71057526        0.075    1.2836518        1e-10 1.5790561e-11    6.3328971    2.4510738    31.520363 -0.0074164588  -0.21398667 0.0056711708   0.18972414   0.30953905  -0.69249509 
  584000    4.0247733    1.2767487    2.7480246  -0.22556884   0.85121413   0.99522089   0.75164155   -1.2298232            1  -0.24959112  -0.47700002   -0.4786287   0.20685537 -0.0025469248 -0.041188628 -0.087217866  -0.40463627  -0.39165395   0.71294446        0.075     1.285179        1e-10 1.584321e-11    6.3118521    2.4494985    31.520363 -0.0071725948  -0.20724231 -0.012131565   0.20682945    1.3680581   0.60345656 
  585000    4.0309567    1.2750136    2.7559431  -0.23228902   0.85005739    1.0031718   0.74418213   -1.2298232            1  -0.13061875  -0.39704324  -0.38417742    0.3893644 -0.0089341557   0.06307269 -0.029834207  -0.28412521  -0.27381653   0.71112787        0.075    1.2878041        1e-10 1.5802842e-11    6.3279758    2.4473438    31.520363 -0.0078200773   -0.2148449 -0.007440359   0.23682546   0.60635304   -0.6910189 
  586000    4.0452925    1.2757949    2.7694976  -0.22335157   0.85057826   0.99952918   0.74758421   -1.2298232            1  -0.17724529  -0.40223964  -0.44146537   0.31196915 0.0066022325  0.080661412 -0.043277857  -0.33145351   -0.3199231   0.71216117        0.075    1.2822768        1e-10 1.5825804e-11    6.3187944    2.4558551    31.520363  0.001880609  -0.20386169 -0.0010162557   0.17437809   0.71332627   0.30690809 
  587000    4.0339855    1.2821023    2.7518833  -0.22700476    0.8547834    1.0064456   0.74991353   -1.2298232            1 -0.064959685  -0.33558778  -0.32360313   0.46431185 0.0067848171  0.045867892  0.044229781  -0.21964839  -0.20862479    0.7093656        0.075    1.2810089        1e-10 1.576368e-11    6.3436964    2.4433888    31.520363 -0.0058675679  -0.20436914 -0.0073825398    0.1915992   0.79093416    1.4190661 
  588000    4.0274036    1.2789269    2.7484767  -0.22332842    0.8526664    1.0028161   0.74884298   -1.2298232            1  -0.14220686  -0.41580181  -0.36530196   0.35448318 -0.0078379835   0.12171411 -0.010369052  -0.29667474  -0.28535387   0.71081337        0.075     1.283708        1e-10 1.5795853e-11    6.3307757    2.4473193    31.520363  0.010634464  -0.22155225 -0.0021320897   0.19843309    0.9611353    1.9059858 
  589000    4.0373165    1.2786602    2.7586563  -0.22448381   0.85248855   0.99232612   0.75580123   -1.2298232            1  -0.12442845  -0.39667181  -0.37840688   0.40179333 -0.010989692  0.042160378  0.064955939  -0.28033164  -0.26607807   0.71041714        0.075    1.2824875        1e-10 1.5787048e-11    6.3343066    2.4427602    31.520363 -2.8716029e-05  -0.20044176 -0.00092718851   0.16190075   0.38401495   0.75568506 
  590000    4.0392461     1.278476    2.7607701  -0.22964774   0.85236576   0.99862897   0.75123181   -1.2298232            1   -0.1971838  -0.44373595   -0.4197446   0.27192915  0.021106697 -0.026491137 -0.0027603718  -0.35214443  -0.33973312   0.71392407        0.075    1.2827317        1e-10 1.5864979e-11    6.3031913    2.4401482    31.520363 -0.0045950855  -0.21612685 0.0038833825   0.21026129   0.38488369 -0.0081058957 
  591000    4.0344642    1.2747692     2.759695  -0.22608147   0.84989439     1.007922    0.7406191   -1.2298232            1  -0.16803803   -0.4320308  -0.43566256   0.36357927  0.013246331  -0.12832649  0.058804316  -0.32080952  -0.31191388   0.71057748        0.075    1.2834863        1e-10 1.5790611e-11    6.3328773    2.4493562    31.520363 0.0035920704  -0.21410306  0.002826653   0.18240164   0.77380162  -0.10316638 
  592000    4.0430814    1.2886428    2.7544386  -0.22699457     0.859144    1.0139148   0.75212332   -1.2298232            1  -0.16874061   -0.4175487  -0.43753282    0.3488597 0.00040636711 -0.028751927 -0.038738215  -0.32388513  -0.31347191   0.71059885        0.075    1.2785622        1e-10 1.5791086e-11    6.3326869     2.449709    31.520363 0.0011861187  -0.20740962 0.0098522328   0.21018346  -0.34355939   0.64247471 
  593000     4.045363    1.2839001    2.7614629  -0.22646618   0.85598205    1.0058986    0.7523203   -1.2298232            1 -0.059918296  -0.34215355  -0.32644436   0.48884303 -0.0077605812 -0.0055695148  0.030177255  -0.21510346  -0.20350531   0.71448766        0.075    1.2737479        1e-10 1.5877504e-11    6.2982194    2.4448652    31.520363 -0.0073483375  -0.21813349 -0.0083627095   0.21857811    0.6157511    2.6195004 
  594000    4.0330372    1.2806814    2.7523558  -0.23277812    0.8538361    1.0073571   0.74767982   -1.2298232            1  -0.15098948   -0.4190882  -0.38502059   0.35114034  0.010287666  0.015201907 0.0098155144  -0.30521743   -0.2947847   0.71257058        0.075    1.2810373        1e-10 1.5834902e-11    6.3151639    2.4417841    31.520363 -0.009785515  -0.19465023 0.0015335756   0.22626383    -1.000346   0.71888847 
  595000    4.0387566    1.2826821    2.7560746  -0.23090846   0.85516996    1.0070127   0.75017521   -1.2298232            1  -0.18427931  -0.43298867  -0.42539125   0.30554199 -0.0083085396 -0.0050997305   0.03715031  -0.33902199  -0.32802536   0.71469234        0.075    1.2786375        1e-10 1.5882052e-11    6.2964156    2.4425653    31.520363 -0.0019165792  -0.22401698 -0.0066670982   0.18703705   0.19366874    1.1318482 
  596000    4.0230062    1.2800664    2.7429398  -0.22944018   0.85342608    1.0105472    0.7447784   -1.2298232            1  -0.11473914  -0.38971069  -0.36085321   0.40634647 0.0046781752 -0.018185613 -0.016180274  -0.26836859  -0.25898973    0.7111314        0.075    1.2779643        1e-10 1.580292e-11    6.3279444    2.4379852    31.520363 0.0044850555  -0.20860093 0.0073569577   0.20198938   -1.2039084   0.73218882 
  597000    4.0560323    1.2888909    2.7671414  -0.22648068   0.85930939     1.010232   0.75495178   -1.2298232            1 -0.041381938  -0.34407906  -0.31420564   0.53413888 0.0093397571 -0.080458179  0.058248635  -0.19710991  -0.18558753   0.71082379        0.075    1.2809505        1e-10 1.5796084e-11    6.3306828    2.4392805    31.520363 -0.00029716189  -0.19151605 -0.014660852   0.21679214   0.85207783    1.5677757 
  598000     4.002295    1.2661065    2.7361885  -0.23220861   0.84411895   0.98137154   0.74921965   -1.2298232            1  -0.19395344  -0.44064317  -0.41740109   0.27618395 -0.0081479628 -0.020963735 -0.003659024  -0.34849901  -0.33403934   0.71490021        0.075    1.2856435        1e-10 1.5886671e-11    6.2945848    2.4491897    31.520363 0.0066587638  -0.22010261 -0.0034646402   0.22326174   0.89251008  -0.32251327 
  599000    4.0373496    1.2846264    2.7527231  -0.22746709   0.85646627   0.99488399   0.76076189   -1.2298232            1 -0.061613976  -0.35035043  -0.35471695   0.52022545 0.0081246128  0.030440788 -0.023315356  -0.21854043  -0.20362872   0.70902779        0.075    1.2889474        1e-10 1.5756173e-11    6.3467188    2.4353345    31.520363 0.00060782002  -0.22795951 -0.010538998   0.22748913  -0.24303295    2.5143123 
  600000    4.0251224    1.2648095    2.7603129   -0.2247864   0.84325425    0.9876065   0.74344184   -1.2298232            1 -0.062721904  -0.35474259  -0.33634407   0.50292095 -0.012085807  0.017061101 -0.0092365968  -0.21607565  -0.20369782   0.71147096        0.075    1.2887832        1e-10 1.5810466e-11    6.3249244     2.440264    31.520363 -0.00053980477  -0.23087953 -0.0094194332   0.19130712   -1.6421247    2.6102937 
  601000    4.0276004    1.2740525    2.7535479  -0.23085797   0.84941657   0.98528694    0.7554743   -1.2298232            1 -0.092800177   -0.3926884  -0.36233553    0.4766234  0.019610983  0.080611445   0.03831402  -0.24863593  -0.23344499   0.71341847        0.075    1.2872817        1e-10 1.5853744e-11    6.3076584    2.4539838    31.520363 0.0046684939  -0.22093814 0.00012453062   0.20048637   -1.5840781   0.70515336 
  602000    4.0396485    1.2730436    2.7666049  -0.22878282   0.84874394   0.98485971    0.7546318   -1.2298232            1  -0.21345475  -0.48805577  -0.44358438   0.29127591  0.011491288  0.002717729 -0.0021691267  -0.36911671  -0.35403857   0.71574929        0.075    1.2907847        1e-10 1.590554e-11    6.2871176    2.4477241    31.520363 -0.0061010816   -0.1826304 0.00064951622   0.22182674   0.56170171    3.1046663 
  603000    4.0428508    1.2830228     2.759828  -0.22821162    0.8553971   0.99408249   0.75950738   -1.2298232            1  -0.10997807  -0.39488899  -0.35702576   0.42198054 0.0076147551 -0.037897482 -0.00097775716  -0.26664575   -0.2518784   0.71598605        0.075    1.2851251        1e-10 1.5910801e-11    6.2850387    2.4428836    31.520363 0.0074696311  -0.20094686 -0.0010298628   0.20389167    0.3848822  -0.12483614 
  604000    4.0200669    1.2711668       2.7489  -0.22663815    0.8474927   0.99736368   0.74386167   -1.2298232            1  -0.15355011  -0.39346386  -0.42551664   0.35833017  -0.01954283 -0.039705303 -0.031166934  -0.30699046  -0.29591881   0.71504267        0.075    1.2885775        1e-10 1.5889837e-11    6.2933307    2.4423292    31.520363 -0.0026382389  -0.18642799 -0.0022552023   0.21919315   0.44610088   0.26065991 
  605000      4.01391    1.2763795    2.7375304  -0.23143651   0.85096803   0.99077281   0.75430326   -1.2298232            1  -0.22525635  -0.45022199  -0.45350397   0.22795691 -0.005225783 -0.013554937  0.050161115  -0.38085055  -0.36668424   0.71276447        0.075    1.2785218        1e-10 1.5839211e-11     6.313446    2.4388288    31.520363 0.00098465764   -0.2297728 -0.0019288826   0.19189718   0.50886684    1.1755146 
  606000    4.0056058    1.2654829    2.7401229  -0.23386453   0.84370318   0.99861829   0.73658118   -1.2298232            1 -0.085510727  -0.32375241  -0.34642496   0.41364519  -0.02631179 -0.036169694 -0.010751308  -0.23744929  -0.22805852   0.71601679        0.075    1.2831038        1e-10 1.5911484e-11    6.2847688    2.4443611    31.520363 -0.0045297822  -0.20571646 -0.00035300057   0.21647064   0.75472411    3.8783402 
  607000     4.021801    1.2691835    2.7526176  -0.22676801   0.84617038   0.98473102    0.7503661   -1.2298232            1  -0.20648374  -0.46230924  -0.43724723   0.28010523 -0.0039649758 -0.070241373 -0.0024015568   -0.3612658   -0.3470492   0.71843705        0.075    1.2823537        1e-10 1.5965268e-11    6.2635968    2.4586364    31.520363 -0.0037739399  -0.21877454 -0.0017979614   0.17542263    1.3809013     1.548867 
  608000    4.0635375    1.2964984    2.7670392  -0.23307353   0.86438137    1.0247747   0.75347033   -1.2298232            1 -0.082907366  -0.33295045  -0.34900861   0.43323696 0.0030782206  0.031333636 -0.028877199  -0.23832975  -0.22918886   0.71124628        0.075    1.2803004        1e-10 1.5805473e-11    6.3269224    2.4347572    31.520363 -0.012639672   -0.2085508 0.0020467014   0.17119912   0.15288504    2.1641243 
  609000    4.0388874    1.2863894    2.7524981  -0.23058576   0.85764163    1.0119755    0.7509232   -1.2298232            1  -0.31033658  -0.55101615  -0.53635644   0.15636285  0.006685949  0.055681787  0.023209277  -0.46523355  -0.45479105   0.71946584        0.075    1.2818208        1e-10 1.598813e-11    6.2546403    2.4524575    31.520363 -0.015086126   -0.1896342 0.0032018873   0.21482878   -1.3243672  -0.91384373 
  610000    4.0319003    1.2751588    2.7567415  -0.22973814   0.85015418   0.98811072   0.75476833   -1.2298232            1  -0.19052508  -0.46188706  -0.43729629    0.3276081 0.0025178871  0.016539812 -0.035192033  -0.34621521  -0.33157297   0.71478581        0.075    1.2827282        1e-10 1.5884129e-11    6.2955922    2.4421069    31.520363 -0.0096908199   -0.1947126 -0.011914985   0.19287646  -0.58737781   0.84755999 
  611000    4.0332921    1.2767101     2.756582  -0.23165438   0.85118843   0.98761087    0.7568643   -1.2298232            1  -0.12350541  -0.36181916  -0.38516007   0.37646301 -0.0017449238 -0.024595395 -0.0095079176  -0.27962788  -0.26448194   0.71219926        0.075    1.2831099        1e-10 1.582665e-11    6.3184564    2.4450041    31.520363 -0.0057934654  -0.19761838 0.0075300659   0.17997989   0.33065951  -0.54440895 
  612000    4.0297987    1.2782859    2.7515128  -0.22518554   0.85223902   0.99342668   0.75461741   -1.2298232            1  -0.24955718  -0.47078392  -0.48870603   0.21081841 0.0039447426   0.05163616 -0.034247049  -0.40521618   -0.3913639   0.71233904        0.075    1.2809832        1e-10 1.5829756e-11    6.3172166    2.4483437    31.520363 -0.0027577189  -0.19369692 0.0039995567   0.20856577  -0.58241484   0.20885272 
  613000    4.0230447    1.2843631    2.7386816  -0.23096664   0.85629069     1.002823    0.7549709   -1.2298232            1  -0.14687127  -0.41250545  -0.42216118   0.39405282 -0.0064574125  -0.10376016 -0.012283767  -0.30260318  -0.29001926   0.71265047        0.075    1.2846569        1e-10 1.5836677e-11    6.3144559     2.438639    31.520363 -0.0097740547  -0.21170744 0.0058632763   0.20342224   0.72921826    1.7509348 
  614000    4.0404612    1.2878126    2.7526486  -0.22775229   0.85859049   0.99695925    0.7629202   -1.2298232            1  -0.09425763  -0.31767914  -0.37694722   0.41185347 -0.0066546954  0.011813968 0.0069387286  -0.25162929   -0.2365686   0.71063627        0.075    1.2863505        1e-10 1.5791917e-11    6.3323534    2.4341612    31.520363 0.0090562737  -0.18949343 -0.0024427304   0.20609137   -1.6468234    1.3298479 
  615000    4.0186581     1.270776    2.7478821  -0.22893751   0.84723211    1.0043842   0.73856245   -1.2298232            1  -0.17974851  -0.44269479  -0.39017052   0.29361978 0.0091373656 -0.0085652833  0.007085097  -0.33209576  -0.32311936   0.70815911        0.075    1.2868197        1e-10 1.5736869e-11    6.3545041    2.4448487    31.520363 0.0097611624  -0.21705921  0.011053209    0.1862184  -0.38124245  -0.81630912 
  616000    4.0296598    1.2654762    2.7641836  -0.21845178   0.84369874   0.99120613   0.74170298   -1.2298232            1  -0.23981364  -0.47047402  -0.49466802   0.24570112 -0.0094475246 -0.017965114  0.007025387  -0.39280871  -0.38130338   0.70961624        0.075    1.2784139        1e-10 1.576925e-11    6.3414557    2.4455922    31.520363 -0.0013356772  -0.20822853 -0.00035010892   0.19792909   -2.4015282   0.67102375 
  617000    4.0219767    1.2776139    2.7443627  -0.23013123   0.85179101    1.0028126   0.74736415   -1.2298232            1  -0.14650394  -0.37365548  -0.40571752   0.33986117  0.007931314 -0.044828333  0.038550513  -0.30066677  -0.28965045   0.71252048        0.075    1.2778504        1e-10 1.5833789e-11    6.3156079    2.4458872    31.520363 0.0011817705  -0.23214661 -0.0077175129   0.18200859   -1.1150649    3.6619604 
  618000    4.0315388    1.2765926    2.7549462  -0.22575045   0.85111009    1.0038024   0.74552699   -1.2298232            1  -0.17119344   -0.4289112  -0.41868795   0.33401881  0.010586319 -0.035661203 0.0062821938  -0.32497731  -0.31448124   0.71387294        0.075    1.2702683        1e-10 1.5863843e-11    6.3036428    2.4647715    31.520363 0.0020417789  -0.19622736 0.0064536265   0.19185348  -0.63362182   0.49150292 
  619000    4.0250843    1.2754562    2.7496281  -0.23104426   0.85035243    0.9919873   0.75242116   -1.2298232            1  -0.22870833  -0.46011476  -0.50867291   0.28266267 -0.010123545  0.071752792  0.029347625   -0.3839143  -0.37030958   0.71490269        0.075    1.2762099        1e-10 1.5886727e-11    6.2945629    2.4471149    31.520363  0.010335412  -0.21140366  -0.00449115   0.21338327   -0.9133113   0.88814815 
  620000     4.007097    1.2695224    2.7375746  -0.22950307   0.84639636    1.0055776    0.7363224   -1.2298232            1  -0.24502096  -0.48442368  -0.47896168   0.22832247 0.0056830172  0.028902971  0.039606962  -0.39690615  -0.38856216   0.71012761        0.075    1.2841926        1e-10 1.5780614e-11    6.3368892    2.4391226    31.520363 -0.008355686  -0.19837745 -0.0048413383   0.21181055  -0.14093854  -0.55562568 
  621000     4.045231    1.2966264    2.7486046  -0.23198227   0.86446668    1.0071251   0.76582846   -1.2298232            1 -0.075163296  -0.36144729  -0.34097803   0.47693543 -0.010235473   0.01252334  0.021756367  -0.23313486  -0.21892539   0.71112044        0.075    1.2847187        1e-10 1.5802676e-11     6.328042    2.4452437    31.520363 -0.0083791371  -0.20456037 -0.0026750495   0.20296917   -2.8519722    1.6656242 
  622000    4.0396057    1.2962508    2.7433548  -0.23035248   0.86421632    1.0072842   0.76529471   -1.2298232            1 -0.077312382  -0.34912895  -0.33981743   0.45700923 -0.011408611  0.014508006 0.0033884897  -0.23517384  -0.22109719   0.71740545        0.075    1.2805052        1e-10 1.5942343e-11    6.2726036    2.4475225    31.520363 0.0022034402  -0.19897846 -0.0046633165   0.20201601   -1.8048084   0.79118183 
  623000    4.0225587    1.2698584    2.7527003  -0.22763216   0.84662033   0.99646165   0.74300973   -1.2298232            1   -0.2119633  -0.43513213  -0.45274666   0.25198888 -0.013873927  0.082356266  0.010429772  -0.36522792  -0.35420325   0.71497907        0.075    1.2831742        1e-10 1.5888424e-11    6.2938905    2.4432856    31.520363 0.00090437287   -0.1855638 -0.006251672   0.18426028  -0.20696973   -1.3878892 
  624000     4.012374    1.2821104    2.7302637  -0.23298542   0.85478879    1.0081607   0.74873577   -1.2298232            1  -0.11534735  -0.36863606   -0.3724714   0.39506541 -0.0090079842  0.018916227  -0.02989671  -0.26979311  -0.25925727   0.71482636        0.075    1.2787323        1e-10 1.588503e-11    6.2952351    2.4383185    31.520363 0.0084855321  -0.21292537 0.0016413448   0.19418691   0.48491219    3.6243834 
  625000     4.013568    1.2710533    2.7425147  -0.22978215     0.847417   0.98030168   0.75554067   -1.2298232            1  -0.16269751  -0.42915564    -0.400521    0.3415841 -0.0085282123  0.093193717  0.028507406  -0.31854696   -0.3026307   0.71403904        0.075    1.2866952        1e-10 1.5867534e-11    6.3021764    2.4428497    31.520363 0.0013711212  -0.18562117 -0.0098724905   0.18604477    -2.740114    -0.833426 
  626000    4.0138686    1.2688113    2.7450572  -0.22382961   0.84592228   0.98545244   0.74944707   -1.2298232            1 -0.086704685  -0.33688532  -0.35601361   0.43278488 -0.00078840226   0.14030988 0.0016334696  -0.24129717  -0.22737312   0.71333814        0.075    1.2833104        1e-10 1.5851959e-11    6.3083687    2.4466992    31.520363 -0.0059321742  -0.20472551 0.0091115604   0.20846486  -0.81307767   0.47060874 
  627000    4.0396392    1.2785665    2.7610727  -0.23045734   0.85242606    1.0064795    0.7459012   -1.2298232            1  -0.17442026  -0.39808977  -0.43756585   0.31239485 0.0059823306  0.087561211  -0.06659728  -0.32828131   -0.3180902   0.71272173        0.075    1.2880837        1e-10 1.5838261e-11    6.3138246    2.4444211    31.520363 0.0029721681  -0.19105522  0.007687261   0.21455464  -0.40128833   0.49227325 
  628000    4.0351568      1.28277    2.7523868   -0.2266018   0.85522856   0.99883639   0.75593244   -1.2298232            1  -0.16176658  -0.42899166  -0.40735278    0.3510447  0.004411833  0.051543449 -0.031903764  -0.31769683   -0.3043455   0.71522411        0.075    1.2911953        1e-10 1.5893869e-11    6.2917342    2.4459355    31.520363 0.0083153232  -0.22123354 -0.0043188028   0.19844346   -1.1181975   0.16863856 
  629000    4.0247592    1.2801284    2.7446309  -0.23245355   0.85346741    1.0084512   0.74629885   -1.2298232            1  -0.11436629  -0.36141816  -0.36136147   0.37968076 -0.0094088954 -0.017520317 -0.011474589  -0.26830937  -0.25831767   0.71362413        0.075    1.2870194        1e-10 1.5858314e-11    6.3058406    2.4460616    31.520363 -0.0022179939   -0.1922201  0.012841423   0.18320137   -1.2057153    1.7531635 
  630000    4.0344638    1.2823975    2.7520662  -0.22456461   0.85498026   0.99455624   0.75847421   -1.2298232            1  -0.16621372  -0.43838377  -0.37627018    0.3160128  0.010203724 -0.0082115235  0.036690823  -0.32266828  -0.30818167   0.71325651        0.075    1.2819574        1e-10 1.5850145e-11    6.3090907      2.44508    31.520363 -0.0050989215  -0.18663555 -0.013101335   0.19916098    -1.307922    1.3841887 
  631000    4.0212896     1.270542    2.7507476  -0.22726792   0.84707611    1.0063287   0.73695286   -1.2298232            1  -0.14252132  -0.40674208  -0.38034818   0.35952631 -0.0020275191  0.074428066 -9.9182612e-05  -0.29453655  -0.28616973   0.71686574        0.075    1.2840937        1e-10 1.593035e-11    6.2773261    2.4499005    31.520363 0.0019854692  -0.19461467 -0.0007123272   0.21632107    1.2930782    2.4832814 
  632000    4.0371292    1.2856016    2.7515276  -0.22284232   0.85711644    1.0007465   0.75780513   -1.2298232            1  -0.13089542  -0.40972416  -0.36753703   0.38457492  0.011747381  0.013752848 -0.0095453826  -0.28721197    -0.273747   0.72050547        0.075    1.2828995        1e-10 1.6011233e-11    6.2456153     2.458116    31.520363 0.0015873617   -0.1914486  0.011163069   0.22545083   0.33725799  -0.48159439 
  633000     4.027036    1.2865986    2.7404374  -0.22666356   0.85778113    1.0089492   0.75325345   -1.2298232            1  -0.11225703  -0.37156664  -0.35808183   0.39287738 -0.013963365  0.064056065  0.017444423  -0.26763467  -0.25627951   0.71709533        0.075    1.2828372        1e-10 1.5935452e-11    6.2753163    2.4344324    31.520363 0.0092277809  -0.20351483 -0.0064032674   0.18458942   -1.1245145    1.1400696 
  634000    4.0307445    1.2786677    2.7520768  -0.22278545   0.85249354    1.0032194   0.74827142   -1.2298232            1  -0.13140948  -0.39816497  -0.36082942   0.36476596 -0.0019489492 -0.0095839734 -0.030192692  -0.28575945  -0.27461405   0.72176243        0.075    1.2872771        1e-10 1.6039165e-11    6.2347385     2.472361    31.520363 0.0064517576  -0.18493784 -0.0085366536   0.21248994   -1.3444931    1.6644979 
  635000     4.045769    1.2976159    2.7481531  -0.22823904   0.86512643    1.0269143   0.75325043   -1.2298232            1  -0.21301666  -0.46107892  -0.47904612   0.30107507 -0.0099110551   0.02625681  0.031705184  -0.36839368  -0.35960357    0.7161266        0.075    1.2795604        1e-10 1.5913924e-11    6.2838051    2.4539802    31.520363 -0.0015634542  -0.22249858  0.001735998   0.22096616   0.52375481    -1.475219 
  636000    4.0383029    1.2842769     2.754026  -0.22978384   0.85623326   0.99855431   0.75782771   -1.2298232            1  -0.13181758  -0.39581757  -0.38991368    0.3902785  0.011540276   0.05762519 -0.0033593892  -0.28813878  -0.27435624    0.7178804        0.075    1.2788753        1e-10 1.5952898e-11    6.2684536    2.4667706    31.520363 0.0035653635  -0.18580974 -0.0026108185   0.18917192   0.81397592    3.7766303 
  637000    4.0606171    1.2893064    2.7713108  -0.23036034    0.8595864    1.0130525   0.75346868   -1.2298232            1  -0.17152229  -0.40775569  -0.46360203   0.35679085 -0.0067723535  0.039619138 -0.044323428  -0.32694433  -0.31613049   0.71760915        0.075    1.2775938        1e-10 1.594687e-11     6.270823    2.4666685    31.520363 0.0059302536   -0.1865881 0.0016397703   0.22457041   -0.8111348   0.85738556 
  638000     4.024115    1.2631048    2.7610102  -0.22940703   0.84211772   0.98371648   0.74421063   -1.2298232            1 -0.051999121  -0.32640235  -0.34988032   0.52028531 0.0018503168 0.0020933872 -0.0066993378  -0.20551145  -0.19241975   0.71510502        0.075    1.2802712        1e-10 1.5891223e-11     6.292782     2.448868    31.520363 -0.0045971891  -0.19444223 -0.012746827   0.19244457  -0.67113717    1.6507327 
  639000    4.0164627    1.2704155    2.7460472  -0.23044062   0.84699178    0.9919094   0.74678848   -1.2298232            1  -0.17539161  -0.42367235  -0.40596558   0.30346309 -0.0086999237 -0.023829117 -0.034681036  -0.32943569  -0.31698174   0.71694152        0.075    1.2794547        1e-10 1.5932034e-11    6.2766626    2.4421361    31.520363 0.00077682619  -0.18281545 -0.0010798938   0.19225353  -0.21084469   0.78986696 
  640000    4.0263817    1.2757898    2.7505919  -0.23079733   0.85057483     0.995187   0.75058324   -1.2298232            1  -0.18043703  -0.43835561  -0.43598142   0.33302594  0.012611665  0.045827432  0.033501073  -0.33526387  -0.32249502   0.72092507        0.075    1.2735309        1e-10 1.6020557e-11    6.2419802    2.4584571    31.520363 -0.0025677421  -0.21543478 -0.0070271474   0.20872891   0.29381891    0.7279815 
  641000    4.0373012    1.2917255    2.7455757  -0.22747987   0.86119922     1.006663   0.76061935   -1.2298232            1  -0.11992109  -0.40239991   -0.3251588   0.36779544  0.010820743    0.0482712 -0.037169437  -0.27681814  -0.26361722   0.71621328        0.075    1.2693487        1e-10 1.5915851e-11    6.2830446    2.4512724    31.520363 0.0024123199  -0.20265528  0.014556754   0.20334034   -0.4732791    2.7915869 
  642000    4.0290111    1.2745665    2.7544446   -0.2287898   0.84975924    1.0073301   0.74079999   -1.2298232            1  -0.11680639  -0.39884602  -0.38333112   0.43175796 -0.013438218 -0.019936698  0.061129662   -0.2696152  -0.26059776   0.71722357        0.075     1.268921        1e-10 1.5938302e-11    6.2741942    2.4481062    31.520363 0.0014138033  -0.18882429 -0.0085174106    0.2217149  0.037018992    1.6708715 
  643000    4.0264684    1.2786522    2.7478162  -0.23694077    0.8524832    1.0013479   0.74954902   -1.2298232            1  -0.27632315   -0.4998728  -0.52299272   0.19389608  0.011245396   0.10626521  0.031273664  -0.43093666  -0.41926057   0.71887741        0.075     1.274024        1e-10 1.5975054e-11    6.2597599     2.455179    31.520363 -0.0065903603  -0.22726006 0.00052424856   0.20494091  -0.80606092  -0.92917305 
  644000    4.0290392    1.2844108    2.7446284  -0.22313434   0.85632251    1.0072435    0.7519657   -1.2298232            1 -0.027869446  -0.28133821  -0.31674218   0.51447206 -0.012747031  0.034634065  -0.03215493  -0.18298146  -0.17164844   0.71558829        0.075    1.2719615        1e-10 1.5901962e-11    6.2885322    2.4354819    31.520363 0.0083922546  -0.21494334 -0.0024394316   0.19358878  -0.19195119    4.2283647 
  645000    4.0427773    1.2854692     2.757308  -0.22936256   0.85702818    1.0043524   0.75516043   -1.2298232            1  -0.14561603  -0.41887339  -0.36958928   0.35161456 -0.0019170994  0.044427346 -0.078360055  -0.30138704  -0.28898234     0.715676        0.075      1.27188        1e-10 1.5903911e-11    6.2877615    2.4545386    31.520363 0.0024557056  -0.18970663 -0.011477297    0.1993727   0.18894481  -0.42464361 
  646000    4.0103629    1.2663265    2.7440363  -0.23618398   0.84426564   0.99432841   0.74050158   -1.2298232            1  -0.12190627  -0.41812918  -0.37646773   0.42887809  0.013575972 -0.052312117  0.041363842  -0.27465352  -0.26384171   0.71508701        0.075    1.2671017        1e-10 1.5890822e-11    6.2929405    2.4401044    31.520363 0.0085103043  -0.22211994 0.0045587231   0.18122582    1.3802311  -0.11501527 
  647000     4.011208    1.2721203    2.7390877  -0.23532477   0.84812838   0.99121575   0.74919175   -1.2298232            1  -0.14893947  -0.43852576  -0.40071072   0.39241807 0.0011618128  0.023768849  -0.01071981  -0.30347929  -0.29043059   0.71399548        0.075    1.2672102        1e-10 1.5866566e-11    6.3025609    2.4427393    31.520363 -0.0080733501   -0.1992162 -0.0053743597   0.18522646    1.1143715   0.65772277 
  648000    4.0318625    1.2686793    2.7631832  -0.22789197   0.84583425   0.98454504   0.74992603   -1.2298232            1  -0.22248429  -0.44755165  -0.43865021     0.218749 0.0077273306  0.097792338  0.031262936  -0.37717557  -0.36302319   0.70934624        0.075    1.2689691        1e-10 1.576325e-11    6.3438695    2.4437978    31.520363  0.005957553  -0.17782012 -0.0022593818   0.16532692  -0.90298587   0.95820678 
  649000    4.0369391    1.2711484    2.7657908  -0.22812152   0.84748038   0.98800785   0.75031517   -1.2298232            1  -0.14453651  -0.42486624  -0.42169919   0.41295589 0.00010781586   0.10536101 -0.040278811  -0.29930806  -0.28556972   0.71442022        0.075    1.2746699        1e-10 1.5876005e-11    6.2988139    2.4488147    31.520363 0.0037081488  -0.19822451 0.0076144657   0.18983448  -0.82000598   0.77740938 
  650000    4.0494509    1.2875224    2.7619285  -0.22932516   0.85839702    1.0054866   0.75669176   -1.2298232            1  -0.20383057  -0.43507023  -0.42701109   0.25058962 -0.010753912  0.051681486 0.0060912113  -0.35991745  -0.34735878   0.71304692        0.075    1.2803205        1e-10 1.5845487e-11    6.3109452    2.4450106    31.520363 -0.0068529133  -0.20675853  0.003188698   0.20588729   0.64499578   0.57230927 
  651000    4.0305821    1.2886248    2.7419573  -0.22926003     0.859132   0.99787762   0.76320096   -1.2298232            1  -0.14264709  -0.38937311  -0.39290594   0.35433779 -0.0059467095  0.048114318 -0.019535618  -0.30007666  -0.28508915    0.7110428        0.075    1.2795783        1e-10 1.5800951e-11     6.328733    2.4444055    31.520363  -0.01139169  -0.18750644 0.00080083593   0.19154457 -0.0022392791   0.81621046 
  652000    4.0357823    1.2850746    2.7507077  -0.22481798   0.85676504   0.99615173   0.76039014   -1.2298232            1 -0.069264228  -0.36731665  -0.33704561   0.49656958 0.00016281911 -0.010091533  0.016429277    -0.226114  -0.21145993   0.70861009        0.075    1.2797311        1e-10 1.5746891e-11      6.35046    2.4420914    31.520363 0.0042486597  -0.20614349 0.00095586259   0.17686627    0.7000971   0.10921153 
  653000    4.0269968    1.2718494    2.7551474  -0.22214437   0.84794776   0.99335741   0.74740406   -1.2298232            1  -0.23708495  -0.48788778  -0.43494005   0.21157297 -0.0042762111 -0.076427894 -0.0018233894  -0.39125601  -0.37888178    0.7101687        0.075     1.281492        1e-10 1.5781527e-11    6.3365226     2.450935    31.520363 -0.018952502  -0.18780879 -0.0089843392   0.19581296    1.2046722  -0.79920462 
  654000    4.0343908    1.2799335    2.7544573  -0.22521175   0.85333745    1.0020863   0.75048353   -1.2298232            1  -0.15313036  -0.42699051  -0.40821347    0.3758129 0.0026061301  -0.09894966 -0.036355749  -0.30793664  -0.29617319   0.71220943        0.075    1.2782573        1e-10 1.5826876e-11    6.3183662    2.4377882    31.520363 0.0043371018  -0.19737439 -0.010331902   0.21197958  -0.26234174  -0.91695311 
  655000    4.0277966    1.2811218    2.7466747  -0.22664021   0.85412972    1.0048709   0.74989715   -1.2298232            1  -0.12615544  -0.42218559  -0.38030889   0.42402815  0.008642171 -0.024651724 -0.043217203  -0.28084077  -0.26959576   0.70688882        0.075    1.2834046        1e-10 1.570864e-11    6.3659233    2.4422876    31.520363 0.0043067849  -0.18485249 0.0029815557   0.21766257   0.32571737    2.2814565 
  656000    4.0281294    1.2724235    2.7557059  -0.22755824   0.84833055    1.0034782   0.74104805   -1.2298232            1  -0.11206511  -0.37193299  -0.38994225   0.42567991 0.0039308412 -0.046205896 -0.0072573295  -0.26492508  -0.25530663   0.70597835        0.075    1.2848278        1e-10 1.5688408e-11    6.3741332    2.4385246    31.520363 -0.001567319  -0.19784603 -0.0073460203   0.22274527    1.2677425   -0.1106032 
  657000     4.021781    1.2644202    2.7573608  -0.22833207   0.84299466    1.0008676   0.73382575   -1.2298232            1  -0.16073515  -0.38801703  -0.44098475   0.34679631 -0.0098125872  -0.02381875 -0.004872967  -0.31210534  -0.30360402   0.70802762        0.075     1.282405        1e-10 1.5733947e-11    6.3556842    2.4497098    31.520363 0.0037716097  -0.20752133 0.0056575075   0.16698196   0.35647372   -1.9837485 
  658000     4.043194    1.2826554    2.7605385  -0.21607946   0.85515218    1.0038305   0.75234724   -1.2298232            1  -0.11521046   -0.3800987  -0.38230504   0.41677236   -0.0045193 0.0022953247 -0.039834932  -0.27040117  -0.25850226   0.70694739        0.075    1.2828331        1e-10 1.5709942e-11    6.3653959    2.4374502    31.520363 0.0046258704  -0.23135806 -0.007349883   0.17753447   -1.1888755    1.7506488 
  659000    4.0287478    1.2709073    2.7578406  -0.23437119   0.84731966   0.98663987   0.75098985   -1.2298232            1  -0.18741482  -0.42580465  -0.46257099   0.32613119 0.0022943336  0.032074671  0.007871451  -0.34232554  -0.32825275    0.7052486        0.075     1.282258        1e-10 1.5672191e-11    6.3807287    2.4351444    31.520363 -0.0023700742  -0.18326867 -0.0050721936    0.1795433    0.4644332   0.88099078 
  660000    4.0301629    1.2827118    2.7474511  -0.23390313   0.85518976    1.0208699   0.74061937   -1.2298232            1  -0.18635193  -0.40426347  -0.44053299   0.28574065  0.007227249 -0.023873932 -0.020340946  -0.33912348  -0.33207603   0.71030297        0.075    1.2737309        1e-10 1.5784511e-11    6.3353247    2.4391192    31.520363 0.0053211384  -0.18300542 -0.017139027   0.19371836   0.69697337   -1.6815454 
  661000    4.0394948    1.2869436    2.7525512  -0.23036732   0.85801117     1.008989    0.7536152   -1.2298232            1  -0.14027869  -0.37779186  -0.40563929   0.36259508 -0.0053488851 -0.068230958  0.054597158  -0.29573096  -0.28430685    0.7102207        0.075    1.2753813        1e-10 1.5782682e-11    6.3360587    2.4398824    31.520363 0.0033091873  -0.17100413  0.010057186   0.18215017  -0.98653213  -0.35750421 
  662000    4.0319159    1.2637064    2.7682095  -0.22089299   0.84251881   0.98706107   0.74257483   -1.2298232            1  -0.13874873  -0.38511729   -0.3904857    0.3593568 0.0063570375 0.0024748545 0.0082756317  -0.29192364  -0.27964679   0.70623024        0.075    1.2752873        1e-10 1.5694005e-11    6.3718597    2.4539839    31.520363 -0.0040467532  -0.21616777 0.0055410649   0.19615002   -1.5617581    2.3241924 
  663000    4.0363722    1.2709832     2.765389  -0.22722822   0.84737029   0.99375796   0.74614973   -1.2298232            1  -0.22840143  -0.47894324  -0.46476176    0.2585007 0.0063789326 -0.031849998 -0.0034330692  -0.38231376  -0.37025544   0.70895286        0.075     1.273959        1e-10 1.5754508e-11    6.3473896    2.4486009    31.520363 -0.0099446619  -0.17121857 -0.013549904   0.22111746    1.0406894    2.1136556 
  664000    4.0405501    1.2815323    2.7590178  -0.22644267   0.85440339    1.0038247   0.75108417   -1.2298232            1  -0.18013314  -0.45301268  -0.44016688   0.35278015 -0.012784003  0.076705282  0.015754047  -0.33506331  -0.32342412   0.70953925        0.075    1.2759371        1e-10 1.5767539e-11    6.3421438    2.4445883    31.520363 -0.0047891391  -0.20562525 -0.00033117114   0.19096813  -0.23715073   0.19235618 
  665000    4.0438166    1.2818736    2.7619431  -0.22510715   0.85463093   0.99220293   0.75951161   -1.2298232            1  -0.13095432  -0.37322055  -0.41549392   0.39585151 0.0052458006 -0.021416749  0.044827906  -0.28762287  -0.27258635   0.71207928        0.075    1.2767258        1e-10 1.5823984e-11    6.3195211     2.452899    31.520363 -0.00095999529  -0.17686879 -0.0012065835   0.19069725  -0.33450683    1.3107154 
  666000    4.0112738    1.2668926    2.7443811  -0.22980057   0.84464307   0.98496237   0.74762164   -1.2298232            1  -0.20009122  -0.44679687  -0.41624554   0.26276874 -0.0023934298  0.019893525   0.11299049  -0.35430717   -0.3406897   0.71124901        0.075     1.279127        1e-10 1.5805534e-11     6.326898     2.445826    31.520363 -0.0020399214  -0.19266717 -0.0012289867   0.19454467    -1.657419    1.5658561 
  667000    4.0084701    1.2673121     2.741158  -0.21970602   0.84492273    1.0063482   0.73329561   -1.2298232            1  -0.10124499  -0.34853448  -0.35082673   0.39562623 -0.0097567068  0.023997545 -0.058973656  -0.25250583  -0.24489619   0.71015393        0.075    1.2813312        1e-10 1.5781199e-11    6.3366543    2.4497498    31.520363 0.0096005279  -0.20919368 0.00052849011   0.18840953   0.68880458     1.813702 
  668000    4.0362024    1.2783528    2.7578496  -0.22646195    0.8522836   0.99136024   0.75612283   -1.2298232            1  -0.21732563  -0.45680362  -0.44122471   0.24605142 0.0077536041  0.023947454  0.024067607  -0.37329516  -0.35883738   0.71199839        0.075    1.2819629        1e-10 1.5822186e-11     6.320239    2.4547045    31.520363 -0.0020214232  -0.19192134 0.0063524199   0.18910537  -0.48254613  -0.38737005 
  669000    4.0561003    1.2950122    2.7610881   -0.2256576   0.86339049    1.0055351   0.76510774   -1.2298232            1  -0.12973062  -0.38576279  -0.38780166   0.38437257  0.011629774 -0.040984979 0.0038457707  -0.28755352  -0.27326575     0.707028        0.075    1.2760956        1e-10 1.5711733e-11    6.3646702    2.4471369    31.520363  0.015159881  -0.18335963 -0.0073386497   0.20051145  -0.56278993     1.795013 
  670000    4.0462246    1.2854683    2.7607563  -0.22376897   0.85702756    1.0063664    0.7537657   -1.2298232            1  -0.24436122  -0.49128364  -0.47171258   0.22991258   0.01861139 -0.031169467 -0.024952833  -0.39984453  -0.38801501   0.70832289        0.075    1.2710465        1e-10 1.5740509e-11    6.3530348    2.4375704    31.520363 -0.0051432211  -0.18308204  0.005779179   0.17703979  -0.38475633  -0.32809744 
  671000    4.0464505    1.2841359    2.7623146   -0.2231017   0.85613925    1.0180771   0.74415861   -1.2298232            1  -0.20947673  -0.43861182  -0.46017134   0.27035297  0.011881394  0.057397328  0.049396202  -0.36297833  -0.35480217   0.70869115        0.075    1.2748385        1e-10 1.5748692e-11    6.3497336     2.449353    31.520363 -0.0012548646  -0.17173984 0.0035932174     0.162872   0.17808776  -0.33514418 
  672000    4.0320815    1.2708027    2.7612788  -0.22794703   0.84724993    1.0079004   0.73615936   -1.2298232            1  -0.14908196  -0.39467671  -0.43323657    0.3806674 -0.020639066 -0.098336018 -0.0024509679  -0.30093352  -0.29295472    0.7100153        0.075    1.2808363        1e-10 1.5778118e-11    6.3378916    2.4489058    31.520363 0.0017602186  -0.18904922 -0.0015848002   0.19559172    -1.209858    2.5622619 
  673000    4.0296474    1.2747575    2.7548899  -0.23246288   0.84988659    1.0060509   0.74190075   -1.2298232            1  -0.26967957   -0.5037312  -0.53333391   0.22802639 -0.0045657138  0.018947716   0.04363262  -0.42271543  -0.41328832   0.70776379        0.075    1.2826279        1e-10 1.5728084e-11    6.3580535    2.4535027    31.520363 0.0079028732  -0.20647935 -0.0052513783    0.1972637  -0.38327622    1.7961148 
  674000    4.0367889    1.2787536    2.7580353    -0.218755   0.85255081    1.0030362    0.7484951   -1.2298232            1  -0.24446985  -0.49091732  -0.48723694   0.24474471 -0.0098940916  0.040574171 -0.002623313  -0.39886596  -0.38764827   0.70348263        0.075    1.2789676        1e-10 1.5632947e-11    6.3967464    2.4437916    31.520363 -0.010405893  -0.18535904 -0.0037397746   0.20388562  -0.66140293   0.76616159 
  675000     4.019089    1.2782343    2.7408547  -0.22745453   0.85220462   0.99792593   0.75144565   -1.2298232            1  -0.13953955  -0.39463729  -0.41603825   0.39205688 -0.015116573   0.11065196 -0.0054536698  -0.29454429  -0.28198851   0.70482489        0.075    1.2802528        1e-10 1.5662775e-11    6.3845645    2.4434106    31.520363 -0.010393833  -0.19481444 -0.0047134344   0.20872082   -1.8476356    1.0181477 
  676000    4.0287647    1.2721811    2.7565836  -0.23189685   0.84816889   0.99155009   0.74902893   -1.2298232            1  -0.17761379  -0.44572921  -0.42991141   0.34279924 -0.001124096  0.059324988 -0.012666962  -0.33212002  -0.31915264   0.70985108        0.075    1.2727644        1e-10 1.5774468e-11    6.3393579    2.4445211    31.520363 -0.010908997   -0.1887004 -0.0079032896    0.2063823  -0.60551526    1.3193075 
  677000    4.0444878    1.2824855    2.7620022   -0.2252499   0.85503893   0.99794397   0.75622913   -1.2298232            1  -0.19061662  -0.43337113  -0.45209664   0.31361792 -0.0043451229  0.061712519  0.044913753  -0.34660807  -0.33306815   0.70539215        0.075    1.2745494        1e-10 1.5675381e-11    6.3794302    2.4394222    31.520363 -0.0026162444  -0.21431157 -0.00010292963   0.18185564   -0.3208051   0.70732973 
  678000    4.0213138    1.2795925    2.7417213  -0.22321557   0.85311015   0.99492258   0.75505627   -1.2298232            1 -0.098365622  -0.37744975   -0.3578843   0.44023718 0.0052845399  0.034688427 -0.021767543  -0.25411515  -0.24038587   0.70954661        0.075    1.2744106        1e-10 1.5767702e-11    6.3420781    2.4443449    31.520363 -0.0023978868  -0.22306519 0.0059334106   0.19794567   0.69342367  -0.59131069 
  679000    4.0337676    1.2812464    2.7525212  -0.22006521   0.85421276    1.0059455   0.74929402   -1.2298232            1 -0.085787972  -0.37142442  -0.35628725   0.47034775 0.0031873455  0.015237065  0.024756722  -0.24034888  -0.22938168   0.71068384        0.075    1.2715117        1e-10 1.5792974e-11    6.3319295     2.442967    31.520363 -0.012793873  -0.18240227 0.0072867724    0.2066749   -1.5600266    2.7923251 
  680000    4.0515694    1.2828661    2.7687032  -0.23042128   0.85529267    1.0174382   0.74316823   -1.2298232            1  -0.13839438  -0.37622842  -0.40600542   0.36705071  0.017925862  0.055447651  0.010020436  -0.29169169  -0.28362862   0.70738147        0.075    1.2752289        1e-10 1.5719588e-11    6.3614898     2.445207    31.520363 0.0010578283  -0.19024366 -0.012484603   0.20341223   0.38708688   0.54218857 
  681000    4.0124403    1.2638942    2.7485461  -0.22450233   0.84264402   0.97540363   0.75085379   -1.2298232            1  -0.24786438  -0.47419311  -0.47957555    0.2101755  0.014923397 -0.027262989 0.0036525693  -0.40274704   -0.3870984   0.70478984        0.075    1.2770536        1e-10 1.5661996e-11    6.3848821    2.4430852    31.520363 0.00030382427  -0.21319675 -0.0087005426   0.19240992  -0.35376025   0.78195871 
  682000    4.0536788    1.2732474    2.7804314  -0.22045318   0.84887983   0.99438351   0.74827114   -1.2298232            1  -0.16047449  -0.39807302  -0.43376314   0.35041268 0.0083406403 -0.014313636 -0.025294296  -0.31482441  -0.30241779   0.70543552        0.075    1.2830376        1e-10 1.5676345e-11     6.379038    2.4399138    31.520363 -0.007288151  -0.18292012 -0.0011971614   0.19176022  -0.10663263    2.4149516 
  683000    4.0517867     1.275785    2.7760017  -0.22020619   0.85057167   0.98934209   0.75462264   -1.2298232            1  -0.16255804  -0.39980092   -0.4281596   0.34028641 -0.0076969831 -0.029390034  0.018255128  -0.31821811   -0.3037817   0.70659696        0.075    1.2787076        1e-10 1.5702155e-11    6.3685527    2.4432007    31.520363 0.0063195536  -0.18789696 -0.00042605607   0.20652498     1.745941    0.4471944 
  684000    3.9995331    1.2669624    2.7325707  -0.22899577   0.84468956   0.98125669   0.75026469   -1.2298232            1  -0.17573587  -0.41167983  -0.42930496   0.31377719 -0.010600295  0.043395079  0.024394523    -0.330497  -0.31580538   0.70950787        0.075    1.2755619        1e-10 1.5766842e-11    6.3424243    2.4385118    31.520363 -0.00091049698  -0.16336418 -0.006088566   0.20001049  0.075530912   0.40887747 
  685000    4.0125343    1.2735209    2.7390134  -0.22389949   0.84906218   0.99467009   0.74838139   -1.2298232            1 -0.026434702  -0.27746683  -0.31295677   0.51111949 -0.010092672 -0.0071720355 -0.050099804  -0.18080736  -0.16841891   0.70955577        0.075    1.2822771        1e-10 1.5767906e-11    6.3419962    2.4405744    31.520363 -0.0044126995  -0.18744134 0.0058382955   0.19745201   0.52411921    3.7692922 
  686000    4.0229464    1.2764931    2.7464533  -0.22485524   0.85104376    1.0015466   0.74697578   -1.2298232            1 -0.086070859  -0.34402649  -0.34930958    0.4351235 0.0015721339 0.0087815353  0.015225938  -0.24015358  -0.22903666   0.71445171        0.075    1.2839775        1e-10 1.5876705e-11    6.2985363    2.4429548    31.520363 -0.0046158271  -0.19369883 0.0047607881   0.23175936 -0.086621688   0.52224031 
  687000    4.0164513    1.2604034    2.7560478  -0.22995019    0.8403167   0.99656388   0.73227256   -1.2298232            1  -0.24262899  -0.49074497  -0.49598797   0.25884596 -0.0096377699 -0.043215604   0.01528083   -0.3936788  -0.38488353   0.71480095        0.075    1.2879246        1e-10 1.5884466e-11    6.2954589    2.4519999    31.520363 0.0026216206  -0.18990732  0.010171158   0.20493923   0.70528448   0.67988816 
  688000    4.0389874    1.2802049    2.7587825   -0.2262005   0.85351842    1.0056408   0.74832996   -1.2298232            1  -0.27187722  -0.51542264  -0.45220568   0.15199667 -0.0025047458 0.0086260049 -0.018942237  -0.42623927  -0.41542744   0.71448532        0.075    1.2838326        1e-10 1.5877451e-11      6.29824    2.4423611    31.520363 0.0025147257   -0.2089901 -0.0035272183   0.18320662  -0.57388623   0.54013112 
  689000    4.0209638    1.2821239    2.7388398  -0.24028751   0.85479785     1.000525   0.75403509   -1.2298232            1  -0.17787502  -0.46322622  -0.39136931   0.32097046 -0.0010183215 -0.010013416 0.0028340554   -0.3334139  -0.32069499   0.71541269        0.075    1.2884867        1e-10 1.589806e-11    6.2900757    2.4548785    31.520363 -0.0070886811  -0.19894121 -0.0013438105   0.19208239  -0.30490812   0.91105308 
  690000    4.0062171    1.2580343    2.7481829  -0.23023697   0.83873716   0.97719322   0.74300453   -1.2298232            1  -0.19588583  -0.44410157   -0.4321765   0.28862057 -0.00019518672    0.0132295  0.013663331  -0.34914938   -0.3353753   0.71583665        0.075    1.2859155        1e-10 1.5907481e-11    6.2863504    2.4466318    31.520363 0.0033083989  -0.20416085 0.0036133106   0.18335443  -0.94511192    2.2465501 
  691000    4.0165022    1.2693721    2.7471301  -0.22851586   0.84629615   0.99768686   0.74161332   -1.2298232            1  -0.15619254  -0.38624146  -0.41450337    0.3321672 -0.00080154192  0.025993647  0.015951002  -0.30916912  -0.29860738   0.71432698        0.075    1.2910406        1e-10 1.5873933e-11    6.2996361    2.4547867    31.520363  0.010329755    -0.200082 0.0083341325   0.20656437  -0.67672444   0.11770112 
  692000    4.0227872    1.2865769    2.7362103  -0.22828885   0.85776667   0.99678911   0.76164394   -1.2298232            1  -0.25093847  -0.48187141  -0.48968487   0.21874088 -0.0049808827   0.03174236 -0.033042266  -0.40804686  -0.39322515   0.71875489        0.075     1.293697        1e-10 1.5972331e-11     6.260827    2.4629799    31.520363  0.001554546  -0.20148217 -0.0036980874   0.21151828   -1.5336463    2.6858949 
  693000    4.0300612    1.2761695    2.7538918  -0.22385066   0.85082799   0.99413439   0.75174004   -1.2298232            1  -0.22040231  -0.46707188  -0.48279291   0.28865787 0.0017337899 -0.071933347 -0.0081350804  -0.37546777  -0.36231005   0.71436254        0.075    1.2930615        1e-10 1.5874723e-11    6.2993225    2.4421436    31.520363 -0.0053487545  -0.21110127 -0.0078517795   0.20348721  -0.69430722    1.6537572 
  694000    4.0468851    1.2814746    2.7654105  -0.23088463   0.85436496   0.99553991   0.75675234   -1.2298232            1   -0.1976842  -0.45224624  -0.42559634   0.28478997 0.0057356431  0.012673987 -0.013998519  -0.35378358  -0.33979257    0.7117394        0.075    1.2956597        1e-10 1.5816431e-11    6.3225389    2.4313067    31.520363 -0.0057458363  -0.18388053 -0.0082276925   0.22712759  -0.44527941   0.35845399 
  695000    4.0230736    1.2875299    2.7355437  -0.23165997   0.85840202   0.99895262   0.76122184   -1.2298232            1  -0.14966214  -0.41083934  -0.39429883   0.35615176 -0.0098274358  0.055092604 -0.0030594795  -0.30668346  -0.29225765   0.71070215        0.075    1.2873848        1e-10 1.5793381e-11    6.3317664    2.4396674    31.520363 -0.0057740106  -0.22777614 0.0016598529   0.18059341   -1.1499226     2.253482 
  696000    4.0561003    1.3073447    2.7487556  -0.23229367   0.87161265    1.0213594   0.76806989   -1.2298232            1  -0.19515882  -0.41810136  -0.46120119    0.2938261  0.021047798 -0.048456298 -0.048381844  -0.35359273  -0.34095279   0.71272265        0.075    1.2900166        1e-10 1.5838281e-11    6.3138165    2.4439754    31.520363 -0.003432297  -0.19382603 -0.0070956026   0.20498658   -1.1411048    1.3112108 
  697000    4.0343981    1.2768162    2.7575819  -0.22338134   0.85125916    1.0049167   0.74500811   -1.2298232            1 -0.079178425  -0.31863808  -0.35010506   0.43120787  0.012844351 -0.029837668  0.024567085  -0.23285526  -0.22262529   0.71241188        0.075     1.284859        1e-10 1.5831375e-11    6.3165707    2.4480901    31.520363 -0.0043387749  -0.20148374 -0.0048575703   0.18455688   -2.1505841    1.2094981 
  698000    4.0362748    1.2872729    2.7490019  -0.22615727   0.85823072   0.99890943   0.76096187   -1.2298232            1  -0.11727588    -0.371217  -0.35438835   0.37377773 -0.015768048  0.025011495 0.0015430059  -0.27424358  -0.25986523    0.7167317        0.075    1.2866854        1e-10 1.5927371e-11       6.2785    2.4491221    31.520363 -0.0089661212    -0.214491 -0.00016726089   0.20917044   -1.6475225    2.7500458 
  699000    4.0478725     1.299286    2.7485865  -0.23439688   0.86623989    1.0194144    0.7603246   -1.2298232            1  -0.16157487   -0.4191861  -0.37851285   0.31297433 0.0012406543  0.014724837 -0.015807273  -0.31841112   -0.3070912    0.7200302        0.075    1.2836237        1e-10 1.6000671e-11    6.2497379    2.4507612    31.520363 0.0021808747  -0.17701266 -0.00069482572   0.20629353   -0.4224977    1.3492153 
  700000     4.025103    1.2780695    2.7470335  -0.23760712   0.85209474    1.0162982   0.73854589   -1.2298232            1  -0.23773287  -0.50121946  -0.43112359   0.21914442 -0.0070939509   0.10820571 -0.00052848575  -0.39007671  -0.38280439   0.71542635        0.075    1.2786347        1e-10 1.5898363e-11    6.2899557    2.4424429    31.520363  0.010884518  -0.20646308 -0.0085029475   0.21701571   -1.4309916   -1.2694627 
  701000     4.025657    1.2704905    2.7551664  -0.22975882   0.84704179    1.0013833   0.74031702   -1.2298232            1  -0.20819513  -0.44677145  -0.44559798   0.26778405 0.0012946743 -0.012115345  0.068665852  -0.36090431  -0.35113762   0.72318252        0.075    1.2782599        1e-10 1.6070723e-11    6.2224956    2.4454636    31.520363 0.0041517102  -0.20628766 -0.010254468   0.20718738   -1.1770318    3.3858242 
  702000    4.0401552    1.2959498    2.7442054  -0.23900821    0.8640156    1.0082446   0.76429045   -1.2298232            1   -0.1883068  -0.42025038  -0.45183083   0.30716083 0.0027405378  0.017972507  0.014619358   -0.3459611   -0.3322287   0.71492967        0.075    1.2770569        1e-10 1.5887326e-11    6.2943254    2.4412273    31.520363  -0.01281196  -0.20624519 -0.010825522   0.20856922    -1.340273   -2.5760351 
  703000     4.017388    1.2625393    2.7548487  -0.24264544    0.8417407    1.0015005   0.73126591   -1.2298232            1  -0.26470344  -0.48730062  -0.49900384   0.19219413 0.0096829465  0.025126307 0.0053631884   -0.4155456  -0.40766266   0.71706112        0.075    1.2794951        1e-10 1.5934691e-11    6.2756157     2.451608    31.520363 -0.0075288427  -0.20193089 -0.007620251   0.19187209  -0.44202733    1.7506349 
  704000    4.0345516    1.2734139    2.7611377  -0.22720077   0.84899085   0.99665075   0.74689005   -1.2298232            1  -0.10859743  -0.35578792  -0.36877249   0.39876813  0.015663658  -0.10557765  0.027604258  -0.26266246  -0.25086436   0.71422922        0.075    1.2763392        1e-10 1.587176e-11    6.3004984     2.445789    31.520363 0.0010328987  -0.20177746 -0.0013195257   0.22638339   0.21392911    1.5465726 
  705000    4.0375757    1.2794737     2.758102  -0.22727147   0.85303094    1.0149637   0.74105353   -1.2298232            1  -0.22412031  -0.47325881  -0.43986852    0.2407664 -0.0094713018 0.0096476534 -0.059512103  -0.37698141  -0.36900133   0.70966279        0.075     1.274124        1e-10 1.5770284e-11    6.3410398    2.4576036    31.520363 -0.0069862292  -0.22340283 -0.0054639942   0.20867476    -1.184222   0.60797921 
  706000    4.0158754    1.2652943    2.7505811  -0.21925596   0.84357745   0.98639304   0.74482846   -1.2298232            1 -0.0037913802  -0.29596082  -0.28159937   0.56618605 -0.0053972639 -0.035594319 -0.035341217  -0.15743116  -0.14459408   0.70480267        0.075    1.2711552        1e-10 1.5662282e-11    6.3847658    2.4385197    31.520363 0.0025399108  -0.18744006 -0.0041071583   0.19645459    1.2446708    3.7874979 
  707000    4.0193844    1.2666993    2.7526851  -0.21956528   0.84451419   0.99733344   0.73884262   -1.2298232            1    -0.120362  -0.36583328  -0.37019883   0.37494612 0.0080263536  0.038016535  0.026684854  -0.27276704  -0.26272638   0.71008693        0.075    1.2740442        1e-10 1.577971e-11    6.3372523     2.443714    31.520363 -0.0029613182  -0.19960714 -0.004117356   0.20811452  -0.51920045   -1.5410157 
  708000    4.0445778     1.275038    2.7695398  -0.23425675   0.85007363   0.99513018   0.74977448   -1.2298232            1  -0.20884804  -0.46081395  -0.43549505   0.26976489 -0.00032354692 0.0030962791 -0.0097752996  -0.36350805  -0.35089792   0.71417783        0.075    1.2777913        1e-10 1.5870618e-11    6.3009517    2.4642794    31.520363 0.0064818958  -0.20783076 0.0022992666   0.19472334   0.36783189   -1.1925068 
  709000     4.025468    1.2743164    2.7511516  -0.21841195    0.8495925    1.0035398   0.74314079   -1.2298232            1  -0.12937424  -0.39788127  -0.37110313   0.38086169  0.003822192   0.10410448  0.025143388  -0.28266589  -0.27262455   0.70950181        0.075     1.279057        1e-10 1.5766707e-11    6.3424785     2.449375    31.520363 -0.002015118  -0.19143438 -0.0032262358   0.20571041  -0.27694858    1.8467779 
  710000    4.0244641    1.2760592     2.748405  -0.22288095   0.85075444    1.0015986   0.74645024   -1.2298232            1  -0.21158163  -0.42163571  -0.44903374   0.23592455 0.0073605635  0.068800178  0.038060507  -0.36555594  -0.35455485   0.71192481        0.075    1.2823096        1e-10 1.5820551e-11    6.3208922    2.4467471    31.520363 -0.0055296925  -0.20798678 -0.0058780287   0.19768762   0.70545596    1.2338052 
  711000    4.0270351    1.2722011     2.754834  -0.23287283   0.84818225   0.99190915   0.74880306   -1.2298232            1  -0.23797764  -0.51400076   -0.4770322   0.27710003 0.0085803209  0.047864272 0.0048697916  -0.39243728  -0.37956774   0.71072687        0.075    1.2763965        1e-10 1.5793931e-11    6.3315462    2.4472411    31.520363 0.0025453291  -0.18887487 0.0023721444   0.19335969  -0.17398809   0.99789769 
  712000     4.020422    1.2790629     2.741359  -0.22788576   0.85275706    1.0088482   0.74482209   -1.2298232            1  -0.14670753  -0.39785517  -0.39011132   0.34784389 -0.0083821993  0.065853436  0.045001597  -0.30034599   -0.2907156   0.70581575        0.075    1.2712723        1e-10 1.5684794e-11    6.3756016    2.4344742    31.520363  0.005770736  -0.20322714 -0.011194189   0.19263224  0.013993729   0.55246135 
  713000    4.0027987     1.266239    2.7365597  -0.23043395   0.84420727   0.98805525   0.74474391   -1.2298232            1  -0.20486553  -0.45323669  -0.43976983   0.27840991 -0.0022216756  -0.06431825 -0.037467461  -0.35848787  -0.34590551   0.70415074        0.075    1.2727629        1e-10 1.5647794e-11    6.3906771    2.4415394    31.520363 -0.0017191736  -0.19318394 0.0025206319    0.1666389    0.4289476   0.97153505 
  714000    4.0297446    1.2722531    2.7574915  -0.21766204   0.84821691   0.99922288   0.74380051   -1.2298232            1  -0.17683757  -0.42880705  -0.43623889   0.33453323 -0.00069020756   -0.0498693 -0.00068583754   -0.3302653  -0.31947166   0.70692542        0.075    1.2685472        1e-10 1.5709454e-11    6.3655937    2.4597614    31.520363  0.002040026  -0.18265804 -0.0063937445   0.19677069   0.68301852     1.423534 
  715000    4.0507886    1.2924858    2.7583027  -0.22846851   0.86170617    1.0109972   0.75847783   -1.2298232            1  -0.24395119  -0.47954462  -0.48898461   0.23667565 -0.0058874031 -0.046007222  -0.02041778   -0.4004065  -0.38826601   0.70914634        0.075    1.2706047        1e-10 1.5758807e-11    6.3456578    2.4517282    31.520363 0.0015020441   -0.1974418 -6.5722228e-05   0.19970039   0.40380535    2.4004297 
  716000    4.0171656    1.2592129    2.7579527  -0.23013524   0.83952294   0.98951968   0.73580411   -1.2298232            1  -0.11903744  -0.33760155  -0.40358549   0.38407472 -0.017570219 0.00049762985 -0.029365494  -0.27081572  -0.26028645   0.70411848        0.075    1.2683722        1e-10 1.5647077e-11    6.3909699    2.4367137    31.520363 -0.012988073  -0.16260856 -0.014108558   0.20904187  0.069357866    2.9723751 
  717000    4.0252974    1.2615647    2.7637327  -0.21713326   0.84109088   0.97902263   0.74572132   -1.2298232            1  -0.20335614  -0.46863167  -0.44445834    0.3030216 -0.015378774  0.014523323  0.012359844  -0.35718009  -0.34310675    0.7089638        0.075    1.2686843        1e-10 1.5754751e-11    6.3472917    2.4482244    31.520363 -0.0028581682  -0.18259859 -0.0078016542   0.22269232 -0.036820284     2.139018 
  718000    4.0612954    1.2940527    2.7672426  -0.21966035   0.86275084     1.008006   0.76231546   -1.2298232            1  -0.16219072  -0.40946336  -0.42138944   0.34428065 -0.0034019906  0.042055818  0.011431859  -0.31943763  -0.30607856   0.70782919        0.075    1.2676407        1e-10 1.5729538e-11     6.357466    2.4373543    31.520363 0.0024338509    -0.195558 0.00015017755   0.19926138  0.013092539   0.59273146 
  719000    4.0340332    1.2809304    2.7531028  -0.22610294   0.85400211     1.004076   0.75023127   -1.2298232            1  -0.16080027  -0.43180054  -0.40872198    0.3581217 -0.0080004003  0.032542727 -0.0043545419  -0.31555451  -0.30412713   0.71118512        0.075    1.2670942        1e-10 1.5804114e-11    6.3274665    2.4423612    31.520363 -0.0061190382   -0.1905255 -0.0012257354   0.20609952   -0.4498628    2.0467108 
  720000     4.051222    1.2923387    2.7588834  -0.22868057   0.86160806   0.99914711   0.76651223   -1.2298232            1  -0.18745536  -0.42570409  -0.41022115   0.27355915 0.0053891257  0.083075898   0.01828226  -0.34556797  -0.33007864   0.71367834        0.075    1.2658688        1e-10 1.5859519e-11    6.3053616    2.4436393    31.520363 0.00049609579  -0.20376969 -0.012656066   0.23695786  -0.67447182     1.454159 
  721000    4.0277337    1.2845323    2.7432015  -0.22779885   0.85640348    1.0005813   0.75671305   -1.2298232            1   -0.1679902  -0.43895121  -0.42541381   0.36039443 -0.00035933734   0.13977979  0.019334007  -0.32408147   -0.3108182   0.70918204        0.075    1.2720392        1e-10 1.5759601e-11    6.3453383    2.4416654    31.520363 0.0039389321  -0.20110934 0.0049610354   0.20317339   0.31986065    2.3983286 
  722000    4.0104622    1.2680821    2.7423801  -0.22498254   0.84543609     0.983654   0.74986892   -1.2298232            1 -0.090978674  -0.35661135  -0.36059725   0.44427257 0.0069879882  0.054950255 -0.046934756  -0.24565817  -0.23139039   0.71164146        0.075    1.2671657        1e-10 1.5814255e-11     6.323409    2.4456617    31.520363 -0.004660189  -0.20043709 -0.0028448577   0.20859308  -0.90299412   0.57028469 
  723000    4.0350442    1.2806827    2.7543615  -0.23286051   0.85383698   0.98802633   0.76105843   -1.2298232            1    -0.136205  -0.42664076   -0.3890537   0.40707946 0.0026484363   0.05124698 0.0027153483  -0.29319262  -0.27724084   0.71284684        0.075    1.2619716        1e-10 1.5841041e-11    6.3127165    2.4511868    31.520363 -0.0044649422  -0.19834519  0.011018747    0.1879741 -0.082143864    3.7591039 
  724000    4.0173989    1.2781297    2.7392692  -0.23426712    0.8521349    1.0010758   0.74914794   -1.2298232            1  -0.24874494  -0.47814805  -0.47648056    0.2083938  0.020153034  0.015447841 0.0049642289  -0.40327572  -0.39164353    0.7152293        0.075    1.2678701        1e-10 1.5893984e-11    6.2916885    2.4425624    31.520363 0.0017756593  -0.17429633 0.0019745673   0.19874003   0.39754817  -0.25356129 
  725000    4.0405079    1.2845141    2.7559938  -0.22915204    0.8563914    1.0112696   0.74929618   -1.2298232            1  -0.24932317  -0.46848669  -0.51672579   0.23724298 -0.0064659601  0.056363819 -0.022081771  -0.40388453  -0.39367687   0.71712012        0.075     1.270887        1e-10 1.5936003e-11    6.2750994      2.44092    31.520363 0.0013208105  -0.18443888 -0.0031706498   0.19513948   0.11704526    1.6682584 
  726000    4.0286897    1.2781914    2.7504983  -0.22409536   0.85217599     1.000709   0.74947129   -1.2298232            1  -0.16167262  -0.42580073  -0.39839532   0.33917818 -0.0027469854  0.012718892  0.039120928   -0.3162701  -0.30451885   0.71452282        0.075    1.2707757        1e-10 1.5878285e-11    6.2979094    2.4581955    31.520363 0.0043262749  -0.18708576  0.011574866   0.21848615  -0.91590367    3.0508769 
  727000    4.0361068    1.2849274    2.7511793  -0.23190493   0.85666695    1.0080982   0.75195706   -1.2298232            1  -0.12967412  -0.40705223  -0.40980504   0.42783492  0.010039505  0.050911071 0.0084267688  -0.28478435  -0.27357512    0.7139435        0.075    1.2715512        1e-10 1.5865411e-11    6.3030198    2.4512896    31.520363 -0.0063027351  -0.21361458  0.001841033   0.19190574   0.23196755     1.088611 
  728000    4.0221359    1.2677521    2.7543838    -0.225445   0.84521609    1.0028201   0.73623348   -1.2298232            1  -0.12401922  -0.36880438  -0.38569765   0.38244435  0.017353735  0.042607381  0.028930344  -0.27588607   -0.2671668   0.71650915        0.075    1.2655135        1e-10 1.5922426e-11    6.2804501    2.4465641    31.520363 -0.0082003337  -0.21405815 -0.0023416044   0.20655267   -0.1482396    1.3529502 
  729000    4.0313293    1.2755847    2.7557446  -0.23397408    0.8504381    1.0114731   0.73908169   -1.2298232            1  -0.20653297  -0.47791722  -0.46110799    0.3194263 -0.012007812  0.035764463 0.0038979575  -0.35898733  -0.35091573   0.71436265        0.075    1.2720586        1e-10 1.5874726e-11    6.2993215    2.4500377    31.520363 -7.8083629e-05  -0.19231559 -0.0027617689   0.19231674 -0.095345719   0.82968131 
  730000    4.0304229    1.2657073    2.7647156  -0.22633976   0.84385281   0.98212598   0.74824725   -1.2298232            1   -0.1795913  -0.42727109  -0.42929463   0.31779183 -0.010420794 -0.053389663 -0.021715789  -0.33393629   -0.3197849   0.71592094        0.075    1.2740262        1e-10 1.5909354e-11    6.2856103    2.4370291    31.520363 0.0099568415  -0.19360349 -0.0054431633   0.21321185  0.022246076    1.6402021 
  731000    4.0072281    1.2607015    2.7465266  -0.23314421   0.84051542   0.99042081    0.7368599   -1.2298232            1  -0.18342359  -0.46462546  -0.42413084   0.33848552 -0.014563533 -0.0011313715 -0.012181798  -0.33541965  -0.32480124   0.71787637        0.075    1.2729547        1e-10 1.5952808e-11    6.2684888    2.4441121    31.520363 0.00071262718  -0.19336482 -0.00065817538   0.18371852   -0.9907779    1.6539289 
  732000    4.0300637    1.2868207     2.743243  -0.22312203   0.85792919    1.0065576   0.75515904   -1.2298232            1 -0.094310802  -0.37156327   -0.3209842   0.40961506 0.0072491965  0.001936197  0.016355558  -0.25008152  -0.23799189    0.7130377        0.075    1.2663803        1e-10 1.5845282e-11    6.3110268     2.441907    31.520363 -0.0070979324  -0.21131601  -0.01361631   0.20390608   0.51515884    1.3382451 
  733000    4.0355237    1.2880961    2.7474276  -0.22745091   0.85877953    1.0156003   0.75034022   -1.2298232            1  -0.16727799  -0.40655738  -0.40567309   0.31039649 -0.00035544932 -0.032795516 -0.013670097  -0.32205471  -0.31224989   0.71843768        0.075     1.264383        1e-10 1.5965282e-11    6.2635913    2.4504265    31.520363 -0.0033019868  -0.20549931  0.014859713   0.21150771   -1.1769063 -0.076594974 
  734000    4.0299542    1.2763687    2.7535855  -0.23307074   0.85096079   0.99769068   0.74950376   -1.2298232            1 -0.062726549  -0.33513562  -0.31711248   0.46406845 0.0090967099 -0.049524323 -0.0031187406  -0.21733073  -0.20514193   0.72020299        0.075     1.271156        1e-10 1.6004511e-11    6.2482385     2.441549    31.520363 -0.010029591  -0.22860287 0.0018370262   0.20667141   -1.2138652    2.0405308 
  735000    4.0296453    1.2778988    2.7517464  -0.22960021   0.85198095    1.0065058   0.74512981   -1.2298232            1  -0.12832341  -0.36559184   -0.4192013    0.3998229 -0.016595946  0.052964923 0.0047298338  -0.28202535  -0.27199711   0.72163003        0.075    1.2747741        1e-10 1.6036223e-11    6.2358824     2.446513    31.520363 0.00056459674  -0.20890264 -0.0085829105   0.20660383   -1.1116335    1.3173034 
  736000    4.0332647    1.2761099    2.7571548  -0.22469603   0.85078825    0.9982316   0.74883747   -1.2298232            1 -0.081602316  -0.35371904  -0.33161228   0.44052437 -0.0074884461   0.13033477 -0.036612744  -0.23606905  -0.22409491   0.71669828        0.075    1.2760191        1e-10 1.5926628e-11    6.2787928    2.4431731    31.520363  0.007832898  -0.20342081 -0.010579229   0.19140669   -2.4092923     1.112345 
  737000    4.0287483    1.2854845    2.7432638  -0.22612727   0.85703837    1.0036901     0.755636   -1.2298232            1   -0.1978938  -0.40934039  -0.46482292    0.2804819 -0.00033204144  0.049787292 -0.062449889  -0.35376291  -0.34116557   0.71631265        0.075    1.2771179        1e-10 1.5918059e-11     6.282173    2.4450541    31.520363 0.0026297619  -0.21083968 -0.0025480412   0.21756275    -2.287626    1.5756114 
  738000    4.0464258    1.2837508    2.7626749  -0.22698396    0.8558825    1.0084989   0.75035238   -1.2298232            1  -0.10656653   -0.4000999  -0.35656719   0.43696752 -0.012270544  0.015399579 -0.0051905268  -0.26134575  -0.25052473   0.71801163        0.075    1.2790601        1e-10 1.5955814e-11    6.2673079    2.4451575    31.520363 -0.0070166346  -0.22374554 -0.010828873   0.20375771   -1.4763635    1.6293116 
  739000    4.0493222     1.289641    2.7596812   -0.2191376   0.85980948   0.99842228   0.76397043   -1.2298232            1 0.0030027449  -0.25403517  -0.28066585   0.54370925  0.015614845 -0.073017709 0.0033776243  -0.15458555  -0.13951707   0.70936114        0.075    1.2769381        1e-10 1.5763581e-11    6.3437363    2.4462266    31.520363 -0.0099788703  -0.19849371  0.002526648   0.19557037 -0.095448184 -0.058013082 
  740000    4.0410039    1.2773422    2.7636617  -0.22932996   0.85160984   0.99367154   0.75338332   -1.2298232            1  -0.11823579  -0.38060331  -0.40469972   0.43059567 -0.017185821 -0.015099597  0.023892336  -0.27364022  -0.26007746   0.70956565        0.075    1.2877516        1e-10 1.5768126e-11    6.3419079    2.4466576    31.520363 -0.0079389661  -0.20219844 0.0020789798   0.18014587    0.1552664   0.58280741 
  741000    4.0368158    1.2769649     2.759851  -0.22745531   0.85135828    1.0075266   0.74336978   -1.2298232            1  -0.19521632  -0.43913905   -0.4465195   0.30000958 -0.011930906 -0.054729965 -0.041389888  -0.34855521  -0.33903573   0.70915629        0.075      1.28883        1e-10 1.5759029e-11    6.3455687    2.4463577    31.520363 -0.0018201853  -0.18104235 0.0047725781   0.19398694  -0.58535402    3.0653633 
  742000    4.0346749    1.2710903    2.7635845  -0.22324947    0.8474417    1.0000548   0.74191307   -1.2298232            1  -0.17531652   -0.4309771  -0.42966583   0.33469336 -0.0017920703  0.023332444  -0.01302055  -0.32835493  -0.31806937   0.71079232        0.075    1.2810935        1e-10 1.5795385e-11    6.3309632    2.4471842    31.520363 -0.0045801157  -0.17251102 -0.0065263807   0.21703902   -0.7419167  -0.56062355 
  743000    4.0223702    1.2631212     2.759249  -0.22068498   0.84212862    1.0023369   0.73134352   -1.2298232            1 -0.081605696  -0.35967841  -0.35215739   0.46701871 0.0075675317 -0.040836831 -0.016988343  -0.23246386   -0.2246843    0.7149182        0.075    1.2829891        1e-10 1.5887071e-11    6.2944264    2.4557052    31.520363 0.0002668382   -0.2123436 -0.0061149881   0.19473076  -0.20146837    3.9641052 
  744000    4.0556918    1.2822368    2.7734551  -0.22979252   0.85487308    1.0050418   0.75103674   -1.2298232            1  -0.18924149  -0.43264221  -0.45733811   0.32225586 0.0075567952 -0.016587669 -0.040338513  -0.34416188   -0.3327062   0.71546892        0.075    1.2743483        1e-10 1.5899309e-11    6.2895814    2.4483143    31.520363 0.00073339538  -0.20860532 -0.016991715   0.22195842 -0.056046162   0.67849539 
  745000    3.9943133    1.2657087    2.7286046   -0.2328473   0.84385375   0.99622761   0.73849034   -1.2298232            1  -0.12076973  -0.37024831  -0.42973205   0.43767118 0.0015879957  -0.08957138  0.028207284   -0.2731021  -0.26297626   0.71150581        0.075    1.2862844        1e-10 1.581124e-11    6.3246145    2.4423423    31.520363 0.0039055279  -0.19413124 -0.015524491   0.24553289  -0.28192999    2.2148601 
  746000    4.0423266    1.2840557    2.7582709  -0.22444847   0.85608578    1.0047107   0.75331783   -1.2298232            1  -0.18793497  -0.41162676  -0.46607211   0.31389396  0.012512102 -0.049520223  0.017794797  -0.34332589  -0.33135243   0.71410899        0.075    1.2816304        1e-10 1.5869089e-11    6.3015591    2.4400725    31.520363  0.014162994  -0.19585963  0.005747807   0.19666588   0.95141521    1.5286518 
  747000    4.0150531    1.2716244    2.7434288  -0.22819868   0.84779773   0.99789507   0.74401008   -1.2298232            1  -0.13307745  -0.39815723  -0.39846729   0.39739216 -0.0078156717 -0.036537905  0.017653248  -0.28654842  -0.27552201   0.71496263        0.075    1.2860061        1e-10 1.5888058e-11    6.2940352    2.4397552    31.520363 -0.0046500875  -0.21058373 0.0051561271   0.22006523   0.57054439  -0.43187032 
  748000    4.0474446    1.2930562    2.7543884  -0.22613445   0.86208646    1.0140613   0.75700091   -1.2298232            1   -0.2209149  -0.43797187  -0.47297044   0.24819761 -0.005324191  0.059758876  0.025536889  -0.37706556  -0.36566711   0.71133747        0.075    1.2815634        1e-10 1.5807499e-11    6.3261113    2.4379555    31.520363 -0.0013261728  -0.20305193 -0.0052219316   0.18721391    1.2379091    1.9306434 
  749000    4.0408367    1.2853895    2.7554471  -0.21999429   0.85697504    1.0128975   0.74915719   -1.2298232            1  -0.15197415  -0.42146053  -0.40372121   0.36925929 -0.00079188112   0.05094469 -0.015182905  -0.30650684  -0.29656023   0.71366621        0.075    1.2877991        1e-10 1.5859249e-11    6.3054688    2.4504122    31.520363 -0.0029345694  -0.19950417 0.0025872742   0.17482463   -1.4023957    2.3762164 
  750000    4.0338589    1.2842634    2.7495955  -0.23245795   0.85622421    1.0101708   0.74977364   -1.2298232            1  -0.12286577  -0.40305204  -0.38568555   0.42014028 0.0014227256 -0.050665711 -0.00087792114  -0.27752562  -0.26706263   0.71669955        0.075    1.2855745        1e-10 1.5926657e-11    6.2787817    2.4430808    31.520363 0.00024707092  -0.21014215 -0.0018003641   0.22085276   0.47743133    3.2136364 
  751000    4.0262426    1.2692353    2.7570073  -0.23422712   0.84620494   0.99860681   0.74082238   -1.2298232            1  -0.28019962  -0.49001287  -0.50859243   0.15800644 -0.016945623 -0.0089227337   0.01232586  -0.43301304  -0.42274577   0.71390366        0.075     1.291575        1e-10 1.5864526e-11    6.3033715    2.4498276    31.520363 0.0039059305  -0.18641042 -0.0071277283   0.20740549   0.69263249  -0.99275417 
  752000    4.0404049    1.2872607    2.7531442  -0.23470055   0.85822255    1.0121468   0.75178766   -1.2298232            1  -0.14238402  -0.40022494  -0.41033371   0.38340658  0.003152295  0.025929865  0.050749773  -0.29745931  -0.28686294   0.71482613        0.075    1.2858638        1e-10 1.5885025e-11    6.2952371    2.4354747    31.520363  0.001222426  -0.20507802 -0.015954249   0.20448613   0.27461528   0.29380492 
  753000    4.0350131    1.2692292    2.7657839  -0.22110502   0.84620084   0.98664878   0.74909054   -1.2298232            1  -0.24602841  -0.49837939  -0.43512094    0.1954151 -0.0096181096 -0.043912396 -0.024121329  -0.40054735  -0.38686761   0.71170516        0.075    1.2933124        1e-10 1.581567e-11     6.322843    2.4560208    31.520363 0.0033302835  -0.19446721 -0.0073602656   0.19905661   0.39390048    2.0986316 
  754000    4.0056347    1.2648822    2.7407525  -0.23372899   0.84330267    1.0004888   0.73460903   -1.2298232            1  -0.11039225  -0.38271302  -0.34824268   0.39977896  0.011700574 -0.041086209 -0.032368155  -0.26192401  -0.25320705   0.71023769        0.075    1.2908504        1e-10 1.578306e-11     6.335907    2.4380032    31.520363 -0.006710622  -0.20600563 0.0020774349   0.19560289   -1.0491504    1.6540657 
  755000    4.0300243    1.2765149    2.7535094  -0.22769865   0.85105827    1.0127926   0.73921797   -1.2298232            1  -0.10710921  -0.37045045  -0.35072925   0.39985207  0.016678917 -0.010350796 -0.019867363  -0.25959168  -0.25168032   0.70944268        0.075     1.292126        1e-10 1.5765393e-11    6.3430072    2.4423521    31.520363 0.00051631054  -0.21425509 0.00095628054     0.187039   0.39507831    1.8290487 
  756000     4.046869    1.2786581    2.7682109  -0.22326848   0.85248715   0.98657722   0.75977717   -1.2298232            1   -0.2249163  -0.46045716  -0.48386612   0.26957438  0.012589223 -0.016681653  0.043699362  -0.38163963  -0.36574529   0.71033925        0.075    1.3008762        1e-10 1.5785317e-11    6.3350012    2.4418467    31.520363 -0.0078475367  -0.21358597 -0.0083538646   0.19474857    1.3829828   0.92896473 
  757000    4.0191958     1.272522    2.7466738  -0.22807815   0.84839619    1.0024303   0.74188428   -1.2298232            1  -0.19571999    -0.424932   -0.4587891   0.29656112 0.0035507056  -0.10102289 -0.061818231  -0.34875246  -0.33881194   0.71028737        0.075    1.2911961        1e-10 1.5784164e-11    6.3354639    2.4410919    31.520363 -0.0059876309  -0.18782719 -0.0021760022   0.20131652    2.1721286     3.048522 
  758000    4.0275433    1.2719236    2.7556197   -0.2246618   0.84799724   0.99413071   0.74695266   -1.2298232            1  -0.19659228  -0.45440763  -0.44546594   0.31009672 0.0075174569  -0.11995809  0.031593748  -0.35067023   -0.3384995   0.71034377        0.075    1.3014121        1e-10 1.5785417e-11    6.3349609    2.4427128    31.520363 -0.0020279496  -0.22069205 -0.0056029809   0.18417291  0.075120325   0.18480039 
  759000    4.0702866    1.3021094    2.7681772  -0.22748247   0.86812225    1.0091186   0.77063457   -1.2298232            1  -0.18303221  -0.42221226  -0.41381216   0.28692779  0.012935476 -0.053630022 -0.032401757  -0.34199515  -0.32707886   0.71104699        0.075    1.2994949        1e-10 1.5801044e-11    6.3286957    2.4438345    31.520363 -0.0083394141  -0.21193391 -0.0049505034   0.19816389   0.65804644    2.2031286 
  760000    4.0244555    1.2699703    2.7544852  -0.22317608   0.84669497   0.99559087   0.74373863   -1.2298232            1 -0.052841501  -0.34646463  -0.34160823   0.52954836 0.0097285285 -0.080514721  0.058270745  -0.20625647  -0.19495714    0.7089052        0.075    1.2978957        1e-10 1.5753449e-11    6.3478164    2.4358836    31.520363 0.0037631293  -0.19589053 0.0038018941   0.19139082    1.4264814   0.99444522 
  761000    4.0193892    1.2750671     2.744322  -0.22948394   0.85009306   0.99669801   0.74872239   -1.2298232            1  -0.21824351  -0.43725163  -0.47272608   0.25524716 -0.0093331936 -0.050776703 0.0096177927  -0.37268651   -0.3605172   0.71290911        0.075    1.2945951        1e-10 1.5842425e-11    6.3121651    2.4584039    31.520363 -0.0017530876  -0.17640565 -5.7596942e-05   0.23483591  -0.77584557   0.27008859 
  762000    4.0274061    1.2810349    2.7463712  -0.22678501    0.8540718    1.0038952    0.7504743   -1.2298232            1  -0.10717982  -0.35890464    -0.403126   0.44049117 -9.4946686e-05 -0.038328062 -0.010287001   -0.2619842  -0.25048087   0.71494853        0.075    1.3013803        1e-10 1.5887745e-11    6.2941594     2.451771    31.520363 0.0013376064  -0.21947796 -0.0092970541   0.21276856  -0.09287244    0.7370701 
  763000    4.0271569    1.2730156    2.7541412  -0.23089144   0.84872531   0.99438033   0.74801188   -1.2298232            1  -0.14284003  -0.38317734  -0.41641058   0.37106784  0.012472315  0.014457656 -0.020455479  -0.29713647  -0.28478287   0.71141192        0.075    1.2956293        1e-10 1.5809154e-11    6.3254493    2.4425488    31.520363 -0.0060354825  -0.20814614 -0.0007679204   0.18365712   -1.0841797    2.3906741 
  764000    4.0530302    1.2940134    2.7590168  -0.22497718   0.86272463    1.0175168   0.75568955   -1.2298232            1  -0.20303153  -0.41009704  -0.45507191   0.25607436  0.014223449  -0.05612009  0.033142172  -0.35891168  -0.34827699   0.70708204        0.075    1.2916772        1e-10 1.5712934e-11    6.3641837    2.4565379    31.520363 -0.0064250677  -0.21049974 -0.0016605304   0.21246443   0.72746668 -0.053146409 
  765000    4.0571088    1.3093218     2.747787  -0.22789723   0.87293076     1.029962   0.76434719   -1.2298232            1  -0.16567025  -0.42360269  -0.41932826   0.34592021  0.008427706 -0.017950129  0.030683431  -0.32333626   -0.3126922   0.71336872        0.075    1.2893422        1e-10 1.5852638e-11    6.3080983    2.4543567    31.520363 -0.00073133603   -0.2026449    0.0112856    0.1999676   0.75781364   0.75061513 
  766000    4.0231068    1.2703027    2.7528041   -0.2339655    0.8469166    1.0002011   0.74092334   -1.2298232            1  -0.11482748  -0.36548516  -0.40101373   0.42201645 -0.0099853258  0.022503314 -0.0075665226  -0.26766172   -0.2576012   0.70958886        0.075    1.2857191        1e-10 1.5768641e-11    6.3417004    2.4464225    31.520363   0.00206571  -0.21614566 -0.0037146584   0.19830102  -0.45583228     1.933829 
  767000     3.990695    1.2599671    2.7307279  -0.23332566   0.84002575   0.98705544   0.73836021   -1.2298232            1  -0.10972046  -0.32617007  -0.40084394   0.39785263 -0.00020091921 -0.027598477 -0.050739603    -0.262026  -0.25061771   0.71015385        0.075    1.2908293        1e-10 1.5781197e-11    6.3366551    2.4497542    31.520363 -0.0026726234  -0.19343816 -0.011006221   0.19097719   0.98751472    1.4354553 
  768000    4.0320523    1.2737795    2.7582728  -0.22199437   0.84923455   0.99151438   0.75085684   -1.2298232            1  -0.20514162  -0.44882878  -0.44803833   0.28144225 -0.010290294 0.0066522202  0.020491334  -0.36002491  -0.34667537   0.71045771        0.075    1.2908839        1e-10 1.5787949e-11    6.3339449    2.4523767    31.520363 -0.0078453842   -0.2046338 0.0014992611   0.22502846  -0.74485912 -0.036106538 
  769000    4.0291537    1.2806846    2.7484691  -0.22559036   0.85383824    1.0028582   0.75079676   -1.2298232            1   -0.1707786  -0.43605535  -0.42916389   0.35288346  0.010335222  0.031107561 -0.051492963  -0.32564949  -0.31393161    0.7078667        0.075    1.2973102        1e-10 1.5730371e-11    6.3571291    2.4422403    31.520363 -0.0015978961  -0.21629273 0.0043453278   0.19955118   -1.0734655    1.4193514 
  770000    4.0323167    1.2830307     2.749286  -0.22869446   0.85540237   0.99758818   0.75709032   -1.2298232            1  -0.21725433  -0.44059452  -0.44964793   0.23847946  0.012412095  0.051494178  0.027611051  -0.37342342  -0.35965508   0.71042742        0.075    1.2973221        1e-10 1.5787276e-11     6.334215     2.452015    31.520363  0.011499462  -0.21432816 0.0081030904   0.19690453   -1.0867687   -1.5894648 
  771000    4.0461145    1.2844731    2.7616414  -0.22530873   0.85636405    1.0015229   0.75599475   -1.2298232            1 -0.056424439  -0.31088983  -0.36515089   0.50676741  0.014177169  0.051387841  0.012744414  -0.21236755  -0.19938684    0.7107693        0.075    1.3013251        1e-10 1.5794873e-11    6.3311683    2.4401908    31.520363 -0.0080738077  -0.22117249 -0.0054736655   0.21290694   -1.8897698    1.5697056 
  772000    4.0244884    1.2775059    2.7469826  -0.23003045   0.85171896   0.99073719   0.75559856   -1.2298232            1  -0.17880482  -0.39622968  -0.43306728   0.29288251  0.011484235  0.038337895 -0.029100682   -0.3346662  -0.32022762   0.71593453        0.075    1.3036499        1e-10 1.5909656e-11    6.2854909    2.4509874    31.520363 0.0074976372  -0.18325457 -0.0019927612   0.20587285  -0.90707585    1.0213458 
  773000    4.0331517     1.285662    2.7474897  -0.22742761   0.85715672    1.0061583   0.75412827   -1.2298232            1  -0.18889659  -0.44582572  -0.43651978   0.31565572 -0.0008668346 -0.015994678 0.0090421011  -0.34445469  -0.33252068   0.71091085        0.075    1.2993827        1e-10 1.5798019e-11    6.3299076    2.4477667    31.520363 -0.005540118  -0.19337115 0.0011788134   0.18950614  -0.45782854   0.37701171 
  774000    4.0220619     1.276862    2.7451999  -0.22590621   0.85128971   0.99385932   0.75271168   -1.2298232            1  -0.18951509  -0.41705276  -0.45700412   0.30551163 -0.015569395 -0.00045715347  0.017514213  -0.34478098  -0.33138356   0.71355176        0.075    1.2927207        1e-10 1.5856706e-11    6.3064801    2.4437569    31.520363 0.0074586172  -0.19280927  0.012999697   0.20322595   0.90575431  -0.63731668 
  775000    4.0271546    1.2751018    2.7520528  -0.22851619   0.85011613    1.0069008   0.74170098   -1.2298232            1  -0.15260324  -0.39918518  -0.44139122   0.38276669 0.0053952477 -0.013858678 -0.035125529  -0.30559789  -0.29633332   0.71338617        0.075    1.2951088        1e-10 1.5853026e-11     6.307944    2.4373339    31.520363 -0.0026286783  -0.19737218 0.0084667305   0.19539095  0.027637741    1.5378129 
  776000    4.0057975    1.2623337    2.7434638  -0.23346243   0.84160363   0.98915683   0.73957596   -1.2298232            1  -0.17498736  -0.41155195  -0.46570116   0.35229105 -0.012947417 0.0026399723 -0.012315238  -0.32754367  -0.31618457   0.71693103        0.075    1.3037493        1e-10 1.5931801e-11    6.2767544    2.4505207    31.520363  -0.01784917  -0.20093105 0.0070986718   0.20106327   0.11235598     1.544522 
  777000    4.0317132    1.2718264    2.7598868  -0.22768937   0.84793244   0.98880168   0.75053075   -1.2298232            1  -0.14615775  -0.40011568  -0.38584031   0.34748275 -0.010890199  0.032491386   0.00750399  -0.30097377  -0.28730427   0.71447694        0.075    1.2977045        1e-10 1.5877265e-11    6.2983139    2.4421407    31.520363 0.0082762711  -0.19571969 -0.004425465   0.22252029   -1.4622988   0.46918818 
  778000    4.0288168    1.2765219    2.7522949  -0.22586252   0.85106296    1.0068927   0.74330874   -1.2298232            1  -0.14050079  -0.38815751  -0.39955739   0.36621253 -0.014768718 -0.033905005 -0.020091039  -0.29382708  -0.28422971   0.71229478        0.075    1.2998578        1e-10 1.5828773e-11    6.3176091    2.4481841    31.520363 0.00088083178  -0.20063849 -0.0062360831   0.18663568  -0.21394019    1.1333536 
  779000    4.0120557    1.2744492    2.7376066  -0.22170167   0.84968106    0.9929423   0.75062425   -1.2298232            1  -0.11412223  -0.37873069  -0.37008635   0.40645036 -0.00069166297   0.05395464  0.022008332  -0.26895753   -0.2558598   0.71483105        0.075    1.2995744        1e-10 1.5885134e-11    6.2951938    2.4366139    31.520363 0.0038796939  -0.19553851  0.003545954   0.19480818  -0.74821442   0.91984617 
  780000    4.0409383    1.2933691    2.7475692  -0.22789072   0.86229507    1.0202454   0.75307446   -1.2298232            1  -0.17122789  -0.40817491  -0.44090744   0.33539868 0.0097051004  0.024507998 -0.053150158  -0.32656861  -0.31686284   0.71308445        0.075    1.2985314        1e-10 1.5846321e-11     6.310613    2.4425948    31.520363 -0.0035277016  -0.16512752 0.0026985272   0.18458855   0.48918932 0.0048820524 
  781000    4.0058844    1.2623416    2.7435428  -0.22935241    0.8416089   0.98182145   0.74466104   -1.2298232            1 -0.090493362  -0.33043125  -0.37059836   0.42954953 -0.00046512523 -0.012169574 -0.0029226234   -0.2440986  -0.23064349   0.71420498        0.075    1.3002591        1e-10 1.5871222e-11    6.3007122    2.4395094    31.520363 -0.0087892147  -0.22248359 -0.0061112879   0.20876492  -0.18123761    3.8480704 
  782000    4.0466404    1.2785046    2.7681357  -0.22799062   0.85238484    1.0015074   0.74927216   -1.2298232            1  -0.14591892  -0.38855269  -0.42328049   0.37407643 -0.014489053   0.13973568 -0.016872463  -0.30047532  -0.28887912   0.71141979        0.075    1.3033553        1e-10 1.5809329e-11    6.3253793    2.4464782    31.520363 0.0014889837  -0.18527701 -0.0048465558   0.19691435  -0.12743007  -0.16406963 
  783000    4.0109666    1.2694136    2.7415529  -0.21847028   0.84632384   0.99179036   0.74574063   -1.2298232            1  -0.22602643  -0.48150126  -0.44273958   0.24616156 -0.0047691979  0.040432816  0.012254133  -0.37985436  -0.36759957   0.70976123        0.075    1.3040006        1e-10 1.5772472e-11    6.3401603    2.4523583    31.520363  0.003943275  -0.20686676 0.0061729138   0.21665707   0.38284291   -1.4196653 
  784000    4.0200005    1.2646939    2.7553067  -0.22178408   0.84317713   0.99391322   0.73894701   -1.2298232            1   -0.1149379   -0.3691477  -0.39966313   0.42399713 -0.026789875 0.0078185031 -0.059587426  -0.26736448  -0.25681407   0.70886339        0.075     1.307697        1e-10 1.575252e-11    6.3481908    2.4393019    31.520363 -0.0034393436  -0.20674473 -0.0040702657   0.22072156   0.61262309    2.7044232 
  785000    4.0244886    1.2800504    2.7444383   -0.2230692   0.85341538    1.0041897   0.74915977   -1.2298232            1  -0.14230459  -0.38922395  -0.38595243    0.3482626 0.0010097334 -0.086147349  0.032952869  -0.29683781  -0.28564768   0.70769434        0.075    1.3070599        1e-10 1.5726541e-11    6.3586774    2.4537414    31.520363 -0.0040801552  -0.18210545 0.00075431884   0.21266483    0.4822758   0.47530626 
  786000    4.0341228    1.2688407    2.7652821   -0.2258177   0.84594188   0.99547417   0.74254508   -1.2298232            1  -0.17272268  -0.44872677  -0.41574534   0.34630407  0.011824495  0.037393976 -0.064085767  -0.32589145  -0.31482166   0.70642109        0.075    1.3103759        1e-10 1.5698246e-11    6.3701383    2.4489417    31.520363 -0.0067871224  -0.17753925 -0.014078958   0.18284169  -0.52602162   0.27972207 
  787000    4.0178671    1.2787717    2.7390954  -0.22202061   0.85256291    1.0048879   0.74723413   -1.2298232            1  -0.20363368  -0.42178764  -0.43256518   0.24345179 -0.008517645  -0.03040219 0.0004696869  -0.35776968  -0.34707643   0.70630721        0.075     1.314021        1e-10 1.5695716e-11    6.3711653    2.4428017    31.520363 -0.0070301765  -0.20680171 0.0098149866   0.18988659     0.309445   0.69558251 
  788000    4.0321289    1.2790092    2.7531197  -0.22293161   0.85272127    1.0053922   0.74715312   -1.2298232            1  -0.16711853  -0.40539976  -0.41162285   0.31566701 -0.0016922157 -0.046649026 -0.030014804  -0.32123783  -0.31063327   0.71157708        0.075    1.3026998        1e-10 1.5812824e-11    6.3239811    2.4401061    31.520363 -0.0091486196  -0.18655024  0.010805981   0.21291591     1.499623  -0.43908696 
  789000    3.9934088    1.2482259    2.7451829  -0.22968708   0.83219786   0.99235247   0.72144897   -1.2298232            1  -0.17816097    -0.417531  -0.41695014   0.29999823 -0.012165353 -0.048622985  0.025554266  -0.32697813  -0.31981435   0.71319722        0.075     1.301679        1e-10 1.5848827e-11    6.3096152    2.4394683    31.520363 0.0033772144   -0.1968289  0.013510187   0.20484507   -0.2703242   -1.3952039 
  790000    4.0328852     1.284011    2.7488742   -0.2234933   0.85605593    1.0102904   0.74940612   -1.2298232            1  -0.21608393  -0.47283245  -0.43554122   0.26012188  0.004996054 -0.068056615 -0.0012473625  -0.37066796  -0.36029786   0.71227192        0.075    1.3048125        1e-10 1.5828265e-11    6.3178119    2.4512935    31.520363 0.0016524928  -0.20246029 0.0054832158   0.17617153   -1.4139687   -2.0499392 
  791000    4.0162546    1.2642972    2.7519575  -0.22887858   0.84291265   0.98764434   0.74283763   -1.2298232            1   -0.1257754  -0.39757443  -0.38435832   0.40460656 -0.00011258216 -0.068363164 0.0051912039  -0.27900452  -0.26675671   0.71181966        0.075    1.2998324        1e-10 1.5818215e-11    6.3218259    2.4404729    31.520363 -0.0032168999    -0.201544 -0.0049536979   0.19877765  0.042215511   0.15991121 
  792000    4.0128891     1.275945    2.7369441  -0.22577286    0.8506783    1.0033373   0.74511822   -1.2298232            1  -0.25866514   -0.4866982   -0.4909168   0.20161957 -0.019698756 -0.0081322503  0.022583424  -0.41236469  -0.40188655   0.71173967        0.075    1.3033749        1e-10 1.5816437e-11    6.3225364    2.4528974    31.520363 -0.007814854  -0.18615765 -0.0022433002   0.19488278   -1.0444707  -0.60836052 
  793000    4.0333677    1.2744224    2.7589453  -0.22551235   0.84966318   0.99896718   0.74642471   -1.2298232            1  -0.11986527  -0.37086291  -0.40876009   0.42002719 -0.015369342  0.010034759 -0.027527878  -0.27383431  -0.26246286   0.71182174        0.075    1.3081343        1e-10 1.5818261e-11    6.3218075    2.4458273    31.520363 -0.0061609625  -0.20738063 0.0053233993   0.19946248   0.30323927   0.68677827 
  794000     4.038962    1.2741669    2.7647951  -0.23215265   0.84949283   0.99525815   0.74870315   -1.2298232            1  -0.10849893  -0.38238856  -0.37622962   0.43312138 0.0088458626 -0.077270255 -0.0086752278  -0.26293796  -0.25056708   0.71271523        0.075     1.306653        1e-10 1.5838116e-11    6.3138822    2.4445402    31.520363 0.0081760185  -0.18692688 -0.0031639874    0.2060042    0.4293716    2.2747998 
  795000    4.0316745    1.2649674    2.7667071  -0.23129926   0.84335953   0.98961038   0.74223327   -1.2298232            1  -0.14891066  -0.39834532  -0.41338064   0.36499399 0.0061413952 0.0081060366 0.0036446325  -0.30201511  -0.29017261   0.71143493        0.075    1.2976615        1e-10 1.5809665e-11    6.3252447    2.4451916    31.520363 0.0037430406  -0.18814014 -0.002069621   0.18521401   0.68131894   0.35857606 
  796000    4.0301435    1.2801345     2.750009  -0.22856441   0.85347145    1.0023818   0.75050577   -1.2298232            1  -0.06548249  -0.35563694  -0.33382573    0.4930152 -0.0059017257  -0.17269016  -0.03019147  -0.22029336   -0.2085675   0.71316261        0.075    1.3000173        1e-10 1.5848058e-11    6.3099214     2.450205    31.520363 -0.012234856  -0.19851667 -0.0046836901   0.23366797    2.0353641    0.1144244 
  797000      4.04732    1.2792262    2.7680937  -0.22557689   0.85286594   0.99459952    0.7548666   -1.2298232            1  -0.16993392  -0.45451248  -0.42288905   0.36759978  0.012823128  -0.10751595 -0.021098854  -0.32564431  -0.31190805   0.71124928        0.075     1.299164        1e-10 1.580554e-11    6.3268957    2.4506832    31.520363  0.012390076  -0.22858726 -0.0023036658   0.20549761   0.69929561    2.5546266 
  798000    4.0291261    1.2776009    2.7515252  -0.22355478   0.85178234    1.0002726   0.74910718   -1.2298232            1  -0.13152573  -0.39188985  -0.34738955   0.34470221 -0.0091635204   -0.1621405 -0.036389456   -0.2860481  -0.27430967   0.71166718        0.075    1.3020798        1e-10 1.5814826e-11    6.3231805    2.4533136    31.520363 -0.011232088  -0.21692669 -0.0063653583   0.20125843   0.61579793    1.7105056 
  799000    4.0330202    1.2724901    2.7605302  -0.22007257   0.84837489    1.0060308   0.73935668   -1.2298232            1   -0.1251495  -0.38364677  -0.37561035   0.38380863 -0.0093343115 -0.076058792  0.048752024  -0.27766058  -0.26875539   0.70813675        0.075    1.2974943        1e-10 1.5736372e-11    6.3547048    2.4400468    31.520363 -0.0043664611  -0.17627022 -0.0078301007   0.19304077   0.17265101   0.78678172 
  800000    4.0141163     1.259261    2.7548553  -0.22307384   0.83955502   0.98477902   0.73913897   -1.2298232            1  -0.23046646  -0.43961326   -0.5039425   0.25215639 0.00022683145 -0.015053384 0.0015805114  -0.38293263  -0.37103876   0.71226543        0.075    1.3017202        1e-10 1.5828121e-11    6.3178694    2.4444934    31.520363 -0.0018662866  -0.21321513 0.00035071024   0.22319299   0.74374972  0.077473238 
  801000    4.0097601    1.2833564    2.7264037  -0.23524622   0.85561952   0.99374407   0.76011793   -1.2298232            1   -0.2036757  -0.45092412  -0.42795915   0.26785617 0.0024639437  0.042622772  0.041453688  -0.36046931  -0.34552772   0.70764375        0.075    1.3075486        1e-10 1.5725417e-11     6.359132    2.4430592    31.520363 -0.0060771584  -0.20680654 0.0029394111   0.21886278    0.7673098    0.4967194 
  802000     4.021869    1.2777927    2.7440763  -0.22707645   0.85191018    1.0000619   0.74946931   -1.2298232            1  -0.18731457  -0.43321958  -0.40847396   0.27974983 -0.0046529174 -0.037857646 0.0093016088  -0.34191164  -0.33006843   0.71170362        0.075    1.3097743        1e-10 1.5815636e-11    6.3228567    2.4494121    31.520363 -0.0039141119  -0.18848223 0.0036919789   0.18325359  -0.15544564    1.8821783 
  803000    4.0046432    1.2788567    2.7257866  -0.23689337   0.85261953    1.0114017   0.74282235   -1.2298232            1 -0.056608529  -0.31756601  -0.31348965   0.46123008  0.013966948  0.031412054 -0.002254411  -0.20983449  -0.20098109   0.71070363        0.075    1.3171443        1e-10 1.5793414e-11    6.3317532    2.4418776    31.520363 -0.0028708099  -0.20878592 0.0079845229   0.20049225   -1.0300475    1.1203962 
  804000    4.0388021    1.2824724    2.7563298  -0.22697486   0.85503016    1.0107708   0.74733798   -1.2298232            1  -0.14940132  -0.38705994  -0.43276738   0.37162335  0.019876623  -0.07950756 0.0032609936  -0.30355875  -0.29368383   0.71188906        0.075    1.3182677        1e-10 1.5819757e-11    6.3212097    2.4432384    31.520363  0.010134447  -0.21492308  -0.00256424   0.18971765 -0.062763292   0.65716462 
  805000    4.0192901    1.2827433    2.7365468  -0.22899974   0.85521078    1.0219673   0.73989545   -1.2298232            1 -0.037911938  -0.33509509  -0.29268615   0.51404542  0.018362621  -0.12476178  0.026064093  -0.19053416  -0.18379269   0.71191126        0.075    1.3128019        1e-10 1.582025e-11    6.3210125     2.451473    31.520363 -0.0029391393  -0.19416269 -0.016164139   0.18849263   0.65393601    1.6255391 
  806000    4.0384196    1.2755391    2.7628805  -0.22159532   0.85040772   0.99860233   0.74793703   -1.2298232            1  -0.21540645  -0.48040053  -0.42940971   0.26359088 0.0082771685  0.011757987  0.057215619  -0.36968745  -0.35795197   0.71109454        0.075     1.314358        1e-10 1.5802101e-11    6.3282724    2.4477373    31.520363 0.0050354517  -0.20302113 0.0093566527   0.21608393      1.03616 -0.0077051719 
  807000    4.0450644     1.283567    2.7614974  -0.22762252   0.85575993   0.99684672   0.75820846   -1.2298232            1  -0.14281949   -0.4322927  -0.37589235   0.37972659 0.0080524754  -0.10177701 0.0071909882  -0.29921923   -0.2851144   0.71042902        0.075    1.3117159        1e-10 1.5787312e-11    6.3342007     2.442252    31.520363 -0.00048214788  -0.19964419 -0.010598482   0.18728524    1.1061496     3.871617 
  808000    4.0233506    1.2809891    2.7423615   -0.2341485   0.85404126    1.0083107   0.74736705   -1.2298232            1  -0.32369504  -0.57264445  -0.51568868   0.11724801 -0.0088040147  0.027894464  0.017675252  -0.47785846  -0.46762638    0.7171282        0.075    1.3124702        1e-10 1.5936182e-11    6.2750287    2.4683383    31.520363 0.0091072961  -0.16414599 0.0054576315   0.23687999  -0.46195135   -1.0644288 
  809000    4.0168456    1.2658338    2.7510117  -0.22392017   0.84393717   0.99292658   0.74091585   -1.2298232            1  -0.17928336  -0.40774025  -0.46468571   0.33457588 0.0089821664  0.011690906 -0.052000616  -0.33211606  -0.32101869   0.71110958        0.075    1.3139263        1e-10 1.5802435e-11    6.3281386    2.4457485    31.520363 0.0080197781  -0.19645008 -0.0023570611   0.19272868   -1.2621568   -1.1420085 
  810000    4.0141277    1.2619319    2.7521959  -0.23408793   0.84133569   0.99888805   0.73238846   -1.2298232            1  -0.12479918   -0.3924797  -0.41442175    0.4325039 0.00060403019 -0.025502924 -0.0024026327  -0.27587289  -0.26738548   0.71769516        0.075    1.3129468        1e-10 1.5948781e-11    6.2700716    2.4509808    31.520363 -0.015282411  -0.21814355 0.0092776301   0.20081051   0.22116422    3.1307791 
  811000    4.0217909    1.2686491    2.7531418  -0.23056537   0.84581413   0.98978603   0.74626516   -1.2298232            1  -0.20855197  -0.44307803  -0.48319034   0.30061246 -0.0014329642  0.099861601  0.059262364   -0.3624881    -0.349839   0.71573357        0.075    1.3098877        1e-10 1.590519e-11    6.2872558     2.444891    31.520363 -0.0034345688   -0.2208631 0.0019085806   0.19488487   -1.8799847  -0.30527288 
  812000    4.0174894     1.270377    2.7471124  -0.22776268   0.84696608    1.0015193   0.74009482   -1.2298232            1  -0.13677477  -0.39631389  -0.38234698   0.36833654 -0.012846775 -0.019096442 -0.021466776  -0.28943812  -0.27973667   0.71328163        0.075    1.3070532        1e-10 1.5850703e-11    6.3088685    2.4500676    31.520363  -0.01109559  -0.20185408 0.0048152733   0.21881633   0.30894299   0.75783077 
  813000    4.0263978    1.2755274    2.7508704  -0.23317456   0.85039991    1.0083632   0.74116919   -1.2298232            1  -0.25480835  -0.51206748  -0.46432758   0.21196999 0.0068340198 0.0034016182 -0.0038136514  -0.40769331  -0.39874718   0.71477957        0.075    1.3061944        1e-10 1.588399e-11    6.2956472     2.450636    31.520363 -0.0039094684  -0.19571566 -0.0013958107   0.19219963  -0.79793656  -0.57920064 
  814000    4.0381336    1.2796751    2.7584585  -0.23024165    0.8531652    1.0058452   0.74759081   -1.2298232            1  -0.19170719  -0.44730082   -0.4585695   0.33074876 -0.0089854076 -0.046549211  0.021637875  -0.34591677  -0.33528659   0.71356081        0.075    1.2988785        1e-10 1.5856907e-11    6.3064001    2.4530825    31.520363 0.0015592224  -0.20458014 -0.0021004799   0.19408943   0.54978238    1.3974708 
  815000    4.0154819    1.2890374    2.7264444  -0.22461932   0.85940711    1.0058041   0.75818128   -1.2298232            1   -0.1181142   -0.3915286  -0.36224575   0.39943176 0.0088786726  0.024498832  0.019333804  -0.27450834  -0.26168773   0.71123874        0.075     1.308626        1e-10 1.5805305e-11    6.3269894    2.4572741    31.520363 -0.006411031  -0.18796024 4.2073251e-05   0.19504925    1.4254191   0.55542797 
  816000    4.0369491    1.2900643    2.7468847  -0.23008399   0.86009174    1.0081531   0.75771419   -1.2298232            1   -0.1321867  -0.40042887   -0.3862153   0.39008408 -0.0029595198  0.050745229  0.010562343  -0.28848448  -0.27609554   0.71142763        0.075    1.2985322        1e-10 1.5809503e-11    6.3253095    2.4413282    31.520363 -0.010138763   -0.2310576 0.0054951879   0.19796353   0.52705229    1.3493851 
  817000    4.0443953    1.2906121    2.7537832  -0.23136546   0.86045697    1.0040255   0.76118855   -1.2298232            1  -0.19589539  -0.43950847  -0.45559629   0.30741861  0.010158348  0.046128794 -0.042879526  -0.35290985  -0.33921503    0.7145143        0.075    1.3034019        1e-10 1.5878096e-11    6.2979845    2.4434691    31.520363 -0.0020522437  -0.20812693 -0.0019288708    0.2084703    0.2037656    1.2126855 
  818000    4.0318207    1.2725724    2.7592482  -0.23143936   0.84842982   0.99160137   0.74943496   -1.2298232            1 -0.088179605  -0.35765329  -0.34413116   0.43724564 0.0092277193 -0.0044325813 -0.011818494  -0.24276959  -0.22972577   0.71464336        0.075    1.2957623        1e-10 1.5880964e-11    6.2968471    2.4467629    31.520363 -0.0019520367  -0.19753089 0.0030022891   0.22265851  -0.32692023    2.1656203 
  819000     4.021676    1.2670933    2.7545827  -0.23255415   0.84477685   0.98708013   0.74638249   -1.2298232            1  -0.22665768  -0.48023199  -0.45759835   0.25785731 0.0047793689 -0.015729796 -0.0036666253  -0.38061801  -0.36755845   0.71853105        0.075    1.3008628        1e-10 1.5967357e-11    6.2627774    2.4500227    31.520363 0.0046286156  -0.20000563 -0.0072473585   0.16848139  0.069665471  -0.87298974 
  820000    4.0326234    1.2805987    2.7520247  -0.22712698   0.85378093    1.0052429   0.74904951   -1.2298232            1  -0.13591633  -0.42183926  -0.37277687   0.38686714 -0.0036789585 -0.036485675  -0.09732831  -0.29042681  -0.27940975   0.71326205        0.075    1.3092358        1e-10 1.5850268e-11    6.3090417    2.4480376    31.520363 0.0018180488  -0.20007573 -0.0067773539   0.21385709   0.96853397    1.4313633 
  821000    4.0248617    1.2860831    2.7387786  -0.23424305   0.85743744    1.0103104   0.75172992   -1.2298232            1  -0.15673643  -0.42692879  -0.38779029   0.34450981 -0.0009723099  -0.12160332 0.00041986639  -0.31179981  -0.30095321   0.71204739        0.075    1.3088163        1e-10 1.5823275e-11    6.3198041    2.4396902    31.520363 0.0019526442  -0.18891378 0.0013696133   0.20520495   0.17735835  -0.22637631 
  822000    4.0338906     1.289128    2.7447626  -0.22642848    0.8594675      1.01702   0.75052194   -1.2298232            1  -0.13307635  -0.39023675  -0.40264345   0.39365116 -0.0011177382  -0.13850958  0.013556011  -0.28789055  -0.27825089    0.7113871        0.075    1.3099072        1e-10 1.5808602e-11    6.3256699    2.4563384    31.520363 0.0058355453  -0.19135758 0.00067774266   0.18748125   0.83031251   0.73560629 
  823000    4.0329028    1.2767832    2.7561195  -0.22458593   0.85123717     1.002526   0.74662529   -1.2298232            1 -0.084534745  -0.34601673  -0.33964739   0.43205988 -0.0026974432 -0.044560562 0.0030469849  -0.23854516  -0.22764035   0.71047363        0.075     1.310056        1e-10 1.5788303e-11     6.333803     2.445898    31.520363 -0.0021193696  -0.16833238  0.006682943   0.23162263  -0.19767307    1.4411444 
  824000    4.0159307    1.2624887     2.753442  -0.22606764   0.84170694   0.99004926   0.73913319   -1.2298232            1  -0.11027305  -0.35776415  -0.39577466   0.42271967 0.0023787399 -0.071051662  0.013896136  -0.26273803  -0.25159765   0.71596466        0.075    1.3107694        1e-10 1.5910326e-11    6.2852264    2.4452572    31.520363 0.0012755967  -0.24228129   0.00872293   0.22363033   0.15098023    0.4316833 
  825000    4.0445789    1.2838904    2.7606885  -0.22754938   0.85597554   0.99234073   0.76169147   -1.2298232            1  -0.14273356  -0.38925932  -0.40114058   0.36219923 -0.0061318027  0.024451603 -0.012430673  -0.29985176  -0.28438526   0.71192815        0.075     1.313398        1e-10 1.5820626e-11    6.3208626    2.4376509    31.520363 -0.0075596173   -0.1940499 -0.0015452092   0.19226121   0.26627818    1.7621745 
  826000    4.0248347     1.287428    2.7374067  -0.22825873   0.85833411   0.99894125   0.76111481   -1.2298232            1  -0.14453768  -0.39411259  -0.40359022   0.36408978  0.017095033 -0.023457211 -0.047425236  -0.30153693  -0.28713157   0.71471526        0.075    1.3133476        1e-10 1.5882561e-11    6.2962137    2.4325726    31.520363 0.00070014254  -0.19413115 0.0021997606   0.19648426 -0.018994242   0.77708825 
  827000    4.0354027    1.2788451    2.7565576  -0.22854255   0.85261183   0.99452579   0.75448763   -1.2298232            1  -0.16466742  -0.44692034  -0.39760917   0.35052726 -0.00066234408 -0.057366478  0.016205215  -0.32029964  -0.30663103   0.71496934        0.075     1.314787        1e-10 1.5888208e-11    6.2939762    2.4409802    31.520363 -0.0010444857  -0.20270983 -0.009822004   0.21592231   0.22746895     1.422236 
  828000    4.0138047    1.2749183    2.7388864  -0.22806438   0.84999381   0.99456718   0.75002902   -1.2298232            1  -0.11926675  -0.36100655  -0.38291215   0.38611845 -0.010326754 -0.085173065  0.047858884  -0.27397927  -0.26123626   0.71280115        0.075    1.3126063        1e-10 1.5840026e-11    6.3131211    2.4355909    31.520363  0.010865305  -0.19203373 0.0007880312   0.21210425  -0.79458018    1.4498311 
  829000    4.0341969    1.2797467    2.7544503  -0.23062218    0.8532129    1.0045618   0.74855965   -1.2298232            1 -0.095208347  -0.38636724   -0.3451841    0.4459263 -0.012836529 -0.033098038 -0.021725176  -0.24961778  -0.23860455    0.7184972        0.075    1.3112819        1e-10 1.5966604e-11    6.2630724    2.4399631    31.520363 0.0088667234  -0.20257215 -0.0031951888   0.17777356  -0.71686695     2.304567 
  830000    4.0106912    1.2665777    2.7441135   -0.2259276   0.84443311   0.98879759   0.74461234   -1.2298232            1  -0.11130441   -0.3991283  -0.38791744   0.45313249 0.0001374225  0.016447503 0.0096484125  -0.26489961  -0.25245035   0.71522198        0.075    1.3140853        1e-10 1.5893822e-11     6.291753    2.4426394    31.520363 0.0060089147  -0.20141494 0.0018158432    0.1983623   -1.4734147    1.5790624 
  831000     4.026049    1.2771863    2.7488627  -0.22695193   0.85150589    1.0149773    0.7384636   -1.2298232            1  -0.19064267  -0.42389136  -0.42457683   0.27654019  -0.02084515  0.033057607 0.0032909028  -0.34296953  -0.33552562   0.71754823        0.075    1.3087649        1e-10 1.5945516e-11    6.2713554    2.4479944    31.520363 -0.0016053564  -0.21302686 -0.0097413437   0.21404113   0.88402184    1.2729932 
  832000    4.0281325    1.2772851    2.7508474  -0.23048211   0.85157176   0.99909942   0.74956273   -1.2298232            1  -0.25700788  -0.51650232   -0.4942467   0.23972538 -0.00067854314 -0.043928862 -0.0027537539  -0.41162422  -0.39962435   0.71874711        0.075    1.3132491        1e-10 1.5972158e-11    6.2608948    2.4430842    31.520363 -0.0030166026  -0.19320254 -0.0087068393   0.21039157  0.038560417   0.16968913 
  833000    4.0448641    1.2896002    2.7552638  -0.22239141   0.85978234    1.0139944   0.75314839   -1.2298232            1 0.0069502272  -0.28691057  -0.28136087   0.58912212  0.016276164 -0.020645403  0.015265031  -0.14840575  -0.13779243   0.71816599        0.075    1.3078328        1e-10 1.5959244e-11    6.2659609    2.4404827    31.520363 -0.013396586  -0.20542087 -0.0086118129     0.227566 -0.098267012    4.4162947 
  834000    4.0124573    1.2781408    2.7343165  -0.23266897   0.85214225   0.99674695   0.75215599   -1.2298232            1  -0.14698691  -0.41645758  -0.37306318   0.34856003 -0.0049207575  0.044554717 -0.016226301  -0.30213818  -0.28926758    0.7179419        0.075    1.3189798        1e-10 1.5954264e-11    6.2679167    2.4524715    31.520363 -0.0053053256  -0.20179693 -0.0068888428   0.20331051    0.6635752  0.015890175 
  835000    4.0289492    1.2771461    2.7518031  -0.23092162    0.8514791   0.98841684    0.7567984   -1.2298232            1  -0.12032588   -0.3627633  -0.35963761   0.36142327 -0.00075964832  0.054647563  0.017722807  -0.27643476  -0.26141747   0.71721432        0.075     1.312314        1e-10 1.5938096e-11    6.2742752    2.4482521    31.520363 0.0051902544  -0.20020038  -0.01250739   0.19787532   0.51831181    2.2777881 
  836000    4.0453186    1.2962375     2.749081  -0.22949936   0.86420746    1.0173115   0.75834073   -1.2298232            1  -0.13070442  -0.39166372  -0.38885816   0.38840864 0.0069947568 0.0094524664  0.019924865  -0.28713144  -0.27592057    0.7142892        0.075    1.3185849        1e-10 1.5873093e-11    6.2999692    2.4377419    31.520363 -0.0062762996  -0.19163255 0.0032044595   0.20708652   0.33249719    2.4443613 
  837000    4.0146042    1.2671731    2.7474311  -0.22643027   0.84483003   0.99901848   0.73821099   -1.2298232            1    -0.201467  -0.43886094  -0.46344582   0.29790577 -0.0064615474 -0.049573426 -0.017739534  -0.35374175  -0.34407191   0.71270704        0.075    1.3197637        1e-10 1.5837934e-11    6.3139548    2.4410656    31.520363  0.002764255  -0.21472502  0.010232217   0.18367282   0.50665679    1.9634386 
  838000    4.0222295    1.2705183    2.7517113  -0.22527953   0.84706029    1.0051146   0.73776622   -1.2298232            1  -0.14363133  -0.42051691  -0.39196714   0.38159005 -0.0056313433 -0.032790356 -0.017435848  -0.29581434  -0.28710645   0.71426198        0.075    1.3169233        1e-10 1.5872489e-11    6.3002093    2.4506865    31.520363 -0.0042737576  -0.20815821 -0.0063761119   0.21223458   0.82465657  -0.25022104 
  839000    4.0325612    1.2800696    2.7524916  -0.22537233   0.85342822     1.010772   0.74462648   -1.2298232            1  -0.19355017  -0.42556241  -0.45546386   0.30037577 0.0065958533 -0.048734431 0.0073189629  -0.34714828  -0.33783284   0.70967481        0.075     1.320869        1e-10 1.5770551e-11    6.3409324    2.4425825    31.520363 0.0011687316  -0.19412767 -0.0083884812   0.20064486   0.62299413   0.44345009 
  840000    4.0324239    1.2846347    2.7477892  -0.22372662   0.85647177     1.015979   0.74617319   -1.2298232            1 -0.072537931  -0.34170184  -0.33033602   0.45442407 0.0061161756 -0.049402734   0.01642343  -0.22645509  -0.21756388   0.71119362        0.075    1.3261137        1e-10 1.5804303e-11    6.3273909    2.4459508    31.520363  0.003213205  -0.24272009  0.002616412   0.18630449    0.6965157    3.5082299 
  841000    4.0130219    1.2813296    2.7316923  -0.23168127   0.85426825    1.0015197   0.75245064   -1.2298232            1  -0.20746368  -0.44957611   -0.4631223   0.29030738 0.0020543489 -0.079514095 -0.011823302  -0.36267572  -0.35042563   0.71131856        0.075    1.3175422        1e-10 1.5807079e-11    6.3262794      2.43199    31.520363 -0.00064082332  -0.20229395 -0.00069466892   0.20726512    1.2473291    2.6788213 
  842000    4.0371569    1.2800092    2.7571477  -0.22710751   0.85338795    1.0013781   0.75105901   -1.2298232            1  -0.19513059  -0.43021501  -0.44339495   0.28821821 -0.00051246586 -0.052956391 -0.019091482  -0.35005557  -0.33807233    0.7105809        0.075    1.3203636        1e-10 1.5790687e-11    6.3328468    2.4516316    31.520363 -0.0014050644  -0.20245093 0.0094661751   0.19383706      0.64469  -0.44779722 
  843000    4.0493976    1.2810521    2.7683455  -0.23109511   0.85408325   0.99691694   0.75532273   -1.2298232            1 -0.067406767  -0.34866979  -0.35939208   0.50584158 -0.025776165 0.0068749524   0.01581297  -0.22321125   -0.2097117   0.71406717        0.075    1.3190631        1e-10 1.5868159e-11    6.3019282    2.4441694    31.520363 -1.2697532e-05  -0.21341989 -0.00018999956   0.19545776    1.1186683    2.4513488 
  844000    4.0317181    1.2768349    2.7548833  -0.22489429    0.8512716   0.99776655   0.74997718   -1.2298232            1  -0.13979828  -0.39528401  -0.39765224   0.37354139 -0.0022487735 -0.033406799 -0.0035351803  -0.29450011  -0.28222449   0.71497582        0.075    1.3189028        1e-10 1.5888351e-11    6.2939192    2.4428784    31.520363  0.006609884  -0.17604782 -0.0043563814   0.19592414   0.12561297    2.8249749 
  845000    4.0399141    1.2861174    2.7537967  -0.23012581   0.85746031    1.0124929   0.75025833   -1.2298232            1  -0.09050666  -0.32887606  -0.34740312    0.4047592  0.014278326 -0.070025375 -0.058778908  -0.24526649  -0.23503499   0.71407318        0.075     1.322119        1e-10 1.5868293e-11    6.3018751    2.4457848    31.520363 -0.0062062298  -0.22534642 0.0027555717   0.19757654   0.20151575    2.3716376 
  846000     4.003336    1.2626302    2.7407058  -0.22441785   0.84180128   0.99450103   0.73621215   -1.2298232            1 -0.075377996  -0.31108525   -0.3536135   0.43856477 -0.0099325817 -0.050587423 -0.040061186  -0.22724044  -0.21733807   0.71416948        0.075    1.3184396        1e-10 1.5870433e-11    6.3010253    2.4430259    31.520363 -0.0011511645  -0.21148574 -0.0038472487   0.19756908  -0.68846079    1.1493824 
  847000    4.0103962    1.2790625    2.7313337    -0.230914   0.85275676   0.99970895   0.75114606   -1.2298232            1  -0.17573569  -0.44320858  -0.39178419   0.30778569 -0.0026554562 -0.0061974202 -0.0042088675  -0.33067863  -0.31843917   0.71351509        0.075     1.316254        1e-10 1.5855891e-11    6.3068042    2.4423367    31.520363 0.0021940711  -0.18333428 -0.0040508598   0.20717324    1.2763009    1.1674953 
  848000    4.0002416    1.2573527    2.7428889    -0.224478   0.83828274   0.97873254   0.74117038   -1.2298232            1 -0.056879574  -0.29278258  -0.35023721   0.47238107 -0.0087232193 -0.046204692 0.0030749439  -0.20976478  -0.19658877   0.71398823        0.075    1.3203698        1e-10 1.5866405e-11    6.3026249    2.4336607    31.520363 0.0061862951  -0.20505326 -0.0056456053   0.20987316   0.75631316    2.8896941 
  849000    4.0435947    1.2930884    2.7505063  -0.23362292   0.86210791    1.0156117   0.75596434   -1.2298232            1  -0.15746272  -0.39775146  -0.41777116   0.34313446  0.006843802 -0.027401513  -0.04631736  -0.31339955  -0.30243624   0.71722142        0.075    1.3213918        1e-10 1.5938254e-11    6.2742131    2.4623535    31.520363 -0.0069257003  -0.19873916 -0.0089809305   0.20164924   -1.1364001  -0.86066715 
  850000    4.0284778    1.2844475    2.7440303  -0.23008069   0.85634697     1.009217    0.7506414   -1.2298232            1  -0.18556872  -0.43420335  -0.42583589   0.30333307  0.010183136  0.078064738 0.00036050278  -0.34040757  -0.32962943   0.71738443        0.075     1.324805        1e-10 1.5941876e-11    6.2727874    2.4584435    31.520363 0.0023003716  -0.20359746 -0.0097352031   0.17987244   -0.6032198   -2.1053304 
  851000    4.0249116    1.2875772    2.7373344  -0.22561072   0.85843354    1.0080643   0.75496975   -1.2298232            1  -0.08055173  -0.36139376  -0.32675407   0.44649264  0.010112441   0.10440591 0.0014593868  -0.23628341   -0.2244479   0.71606725        0.075    1.3199672        1e-10 1.5912606e-11     6.284326    2.4504273    31.520363  0.004611541  -0.22662674 -0.0040727166   0.21939703  -0.32180162    1.1762973 
  852000    4.0507897    1.2864085    2.7643812  -0.22247529   0.85765441     1.015293   0.74864907   -1.2298232            1  -0.18061081  -0.42987746  -0.43056077   0.31860579  0.017807318  0.046599293   -0.0147617  -0.33503869  -0.32553883   0.71333937        0.075    1.3158813        1e-10 1.5851986e-11    6.3083578    2.4472246    31.520363 0.00060080433  -0.19993815 -0.0062386601   0.20439997   0.32005703    1.9241168 
  853000    4.0277233    1.2874529    2.7402704  -0.22622304   0.85835071    1.0020821   0.75896938   -1.2298232            1  -0.18837119  -0.43429206  -0.43731249     0.306491 0.00011593485   0.01126086  0.017720383  -0.34492789  -0.33141342   0.71330212        0.075    1.3177013        1e-10 1.5851158e-11    6.3086872    2.4512644    31.520363 -0.00036584992  -0.18464297  0.010217376   0.21027389   0.13329004   0.20341827 
  854000    4.0353491    1.2788717    2.7564773  -0.23381077   0.85262958   0.99467094   0.75441723   -1.2298232            1  -0.21506512  -0.47868292  -0.45601582   0.28950339 -0.0067522756 -0.094204107  0.030936062  -0.37068282  -0.35704944   0.71621362        0.075     1.321716        1e-10 1.5915858e-11    6.2830416    2.4460635    31.520363 -0.0036171397  -0.21760371  0.010552069    0.2015643  -0.99497973   0.70877697 
  855000    4.0443335    1.2826961    2.7616374  -0.22885511   0.85517928    0.9993506   0.75549322   -1.2298232            1  -0.18807131  -0.41757073  -0.47068739   0.32404417 -0.019537715 -0.012946672 0.0054328812  -0.34391097  -0.33072364   0.71440388        0.075    1.3211222        1e-10 1.5875642e-11    6.2989579    2.4432354    31.520363 -0.0085626175  -0.20940689 -0.0023706124    0.2100977    1.6947946     1.171953 
  856000    4.0304865    1.2793789    2.7511077  -0.23205549   0.85296769    1.0051065   0.74776782   -1.2298232            1  -0.13622375  -0.41259699    -0.369117   0.37304275 0.0088839006 -0.017833437  0.018607638  -0.29046984   -0.2796977   0.71730608        0.075    1.3176602        1e-10 1.5940135e-11    6.2734725    2.4506016    31.520363 -0.0091372358  -0.16463357 0.0041625004    0.1824142   0.23189727    3.6210959 
  857000    4.0348912    1.2807271    2.7541641  -0.23436285   0.85386658    1.0131832   0.74369964   -1.2298232            1  -0.15582404  -0.41665592  -0.42278729    0.3719711 -0.012419779  0.005154481 -0.017506859  -0.30923097   -0.3004509   0.71354336        0.075    1.3185918        1e-10 1.5856519e-11    6.3065543    2.4495982    31.520363 -0.0019047735  -0.20149971  0.012585055   0.20003252   0.13029392    2.9566917 
  858000    4.0083383    1.2626348    2.7457035  -0.22628683   0.84180437   0.99776821   0.73395645   -1.2298232            1  -0.20350793  -0.43814133  -0.44820986   0.27582739 0.0053081836 -0.050090027  0.024914453  -0.35490508  -0.34593438   0.71706069        0.075    1.3228444        1e-10 1.5934682e-11    6.2756194    2.4522099    31.520363 -0.00034844529  -0.21146148 -0.013636035   0.21105324   0.33251145  -0.33770246 
  859000    4.0341536    1.2856516     2.748502  -0.22800936   0.85714976    1.0111058   0.75069275   -1.2298232            1 -0.079209117  -0.34957976  -0.32368286   0.43563526  0.016072373     0.080393 -0.0093403528  -0.23405855  -0.22353944    0.7166956        0.075    1.3274132        1e-10 1.5926569e-11    6.2788163    2.4495653    31.520363 -0.011425046  -0.19324882 0.0002244395   0.19256014   0.72079904   0.22775119 
  860000    4.0087007    1.2785444    2.7301563   -0.2306306   0.85241137   0.99671357   0.75263446   -1.2298232            1 -0.091714332   -0.3470541  -0.37190067   0.44381178 -0.0080468874  0.023454153 -0.030290366   -0.2469643  -0.23399023   0.72053657        0.075    1.3230591        1e-10 1.6011924e-11    6.2453458    2.4483267    31.520363  0.002573895  -0.19987304 -0.0094488429     0.223193   -1.1111506    1.3565812 
  861000    4.0364755    1.2848125     2.751663  -0.22902792   0.85659034    1.0049092   0.75403428   -1.2298232            1  -0.17689843  -0.42343936  -0.42876608   0.32151015 -0.0053788266  0.032238803  0.003374431  -0.33243714  -0.32034421   0.71423751        0.075    1.3289595        1e-10 1.5871945e-11    6.3004252    2.4459931    31.520363 -0.010286884  -0.19216746 -0.0030764909   0.20554499    1.0738783   -1.2239342 
  862000    4.0300001    1.2873202    2.7426799  -0.23044657   0.85826223    1.0004698   0.75993538   -1.2298232            1  -0.13741835  -0.40312637   -0.3727416   0.36361293 -0.021600669 -0.014882573 -0.030278927  -0.29417431  -0.28023044   0.71780575        0.075     1.331638        1e-10 1.5951239e-11    6.2691055    2.4449882    31.520363 -0.0023667201  -0.16553017 0.00031700696   0.21096198   0.53588579    1.6548691 
  863000    4.0302008    1.2851069     2.745094  -0.22874941    0.8567866    1.0011636   0.75695832   -1.2298232            1   -0.1396945  -0.39819477  -0.37861334   0.35772459  0.010195419 -0.0065375306 -0.011832577  -0.29583637  -0.28260563   0.71622651        0.075    1.3204531        1e-10 1.5916145e-11    6.2829286    2.4403376    31.520363 -0.005587953  -0.18030098 -0.0093293871     0.194618   -0.7394935    1.6400829 
  864000    4.0618218    1.3060564    2.7557655  -0.22526504   0.87075371    1.0088007   0.77530724   -1.2298232            1   -0.1959432  -0.45815215  -0.40832455    0.2786471 -0.0069132821  0.016519988  0.012276661     -0.35587  -0.33994448   0.71205879        0.075    1.3211883        1e-10 1.5823529e-11    6.3197029    2.4446569    31.520363 0.0013368851  -0.20477114 -0.0080184121   0.20724515   0.76205962    1.1469497 
  865000    4.0230651    1.2681088    2.7549563  -0.23310689    0.8454539   0.98403009    0.7496388   -1.2298232            1  -0.22400199   -0.4593597  -0.46492061   0.25227434 -0.0084622819   0.05867722 -0.00024736444  -0.37863402  -0.36446739    0.7170542        0.075    1.3284723        1e-10 1.5934538e-11    6.2756762     2.467048    31.520363 0.00015811858   -0.1746892 0.0089097077   0.18892224   -1.2774167    0.9219104 
  866000    4.0395534    1.2874016    2.7521519   -0.2275745   0.85831646    1.0046412    0.7571405   -1.2298232            1   -0.1394751  -0.37655674  -0.40085773   0.35898916  0.000474109  0.075155164 -0.0053969588  -0.29565455  -0.28288264   0.71478027        0.075    1.3255927        1e-10 1.5884006e-11     6.295641    2.4536764    31.520363  0.010480747  -0.17716988 0.0036874763     0.181614   -1.3307691     1.795011 
  867000    4.0426582    1.2867424    2.7559158  -0.22466864   0.85787698    1.0096076   0.75296006   -1.2298232            1  -0.23149108  -0.46665057  -0.45963565   0.23181298  0.021754656 -0.040499828  0.049398812  -0.38680821  -0.37560754   0.71370529        0.075    1.3226437        1e-10 1.5860118e-11    6.3051235    2.4501617    31.520363 0.0019335516  -0.20654325 -0.0061444142   0.19724244  -0.32375921   0.77829158 
  868000    4.0271826    1.2690841    2.7580985  -0.22217224   0.84610411   0.99977843   0.73984099   -1.2298232            1  -0.11860968   -0.4064896  -0.39413173    0.4447923 -0.0025678388 -0.009927735 -0.036981269  -0.27122066  -0.26132307   0.71393322        0.075    1.3297385        1e-10 1.5865183e-11    6.3031105     2.450736    31.520363  0.010358324  -0.20077058 -0.0056222496   0.19771208   0.88964106    1.3340876 
  869000    4.0441129    1.2845414    2.7595714  -0.22898724   0.85640959    1.0168921   0.74543608   -1.2298232            1 -0.068984173  -0.34570485  -0.33322485   0.47197718 0.0081420666 -0.033709749 -0.0023902034  -0.22274929  -0.21414047   0.71788072        0.075     1.334623        1e-10 1.5952905e-11    6.2684509    2.4600338    31.520363 -0.00031576952  -0.22081391 0.0080853669   0.23434684  -0.83092049    1.8420716 
  870000    4.0470322    1.2886587    2.7583735  -0.23017268   0.85915462    1.0059399   0.75766006   -1.2298232            1  -0.15137427  -0.40510923  -0.40272718    0.3537136  0.014559788  0.044453984  0.016135121  -0.30766089  -0.29496718   0.71329407        0.075    1.3309657        1e-10 1.5850979e-11    6.3087585    2.4385604    31.520363 -0.00058540121  -0.18267648 0.0044664278   0.19193152  -0.69347223    1.2618653 
  871000    4.0410845    1.2805624    2.7605221  -0.22132212   0.85375679    1.0164826   0.74123067   -1.2298232            1  -0.23757269  -0.45579516  -0.49194907   0.23502617  0.006759894 -0.021467565 -0.023668226  -0.39047033  -0.38267052   0.71248753        0.075     1.337061        1e-10 1.5833056e-11       6.3159    2.4566158    31.520363 0.0013520737  -0.21496086 -0.0032019738   0.18847882  -0.40828037    1.3274832 
  872000    4.0034327    1.2694108    2.7340218  -0.22282514   0.84632196    0.9945447   0.74383141   -1.2298232            1  -0.14857209  -0.40214922   -0.3857953   0.34222827 0.00044046856 -0.019354943  0.037325909   -0.3020062  -0.29053839   0.71248976        0.075    1.3382496        1e-10 1.5833106e-11    6.3158802    2.4413854    31.520363 -0.0062188644  -0.21995688 0.0021205159   0.20426795   0.93214449    1.9273625 
  873000    4.0123692    1.2663014    2.7460678  -0.22446924   0.84424887   0.99196309   0.74211002   -1.2298232            1  -0.13391545  -0.37747635  -0.39567312    0.3714031  0.007977929 -0.084743446   0.03206555  -0.28699448  -0.27551325   0.71463048        0.075    1.3366921        1e-10 1.5880677e-11    6.2969607    2.4429273    31.520363 -8.4597831e-05  -0.22182999 -0.005779097   0.19583214   0.59103222    2.0399969 
  874000    4.0310436    1.2633421    2.7677016  -0.22726266   0.84227588   0.98275066   0.74514663   -1.2298232            1  -0.25146021  -0.51119568  -0.47078298   0.22759802 0.0041051461 -0.058464731 -0.00079839502  -0.40516562  -0.39174298    0.7202788        0.075    1.3377151        1e-10 1.6006196e-11    6.2475808    2.4603188    31.520363 -0.015556902  -0.21206555 -0.00095995825   0.19307295  -0.73870153   0.99981614 
  875000     4.017185    1.2821604    2.7350246  -0.23417543   0.85482216    1.0095444    0.7478347   -1.2298232            1 -0.075242084  -0.32566919  -0.32142058   0.42136352  0.023891875 0.0046945342  0.016760701  -0.22950197  -0.21934952   0.72202409        0.075    1.3345308        1e-10 1.604498e-11     6.232479    2.4370782    31.520363 -0.00095269519  -0.19448612 0.0051622275   0.20884319   -1.1936519    1.8874428 
  876000    4.0290526    1.2757305    2.7533221  -0.22841655   0.85053534   0.99775833   0.74873704   -1.2298232            1  -0.17368022   -0.4041242  -0.46919016    0.3522737 0.0019558786  0.075424123 -0.003789623  -0.32812624  -0.31610526   0.71814612        0.075    1.3379921        1e-10 1.5958803e-11    6.2661342    2.4495887    31.520363 0.0048172951  -0.17730004 -0.0027398884    0.1805933  -0.98005469     1.729278 
  877000    3.9998442    1.2726719    2.7271723  -0.23476724   0.84849616    0.9897151   0.75085254   -1.2298232            1  -0.15677433  -0.42288355  -0.38765196   0.34021251 0.0076139142 -0.018127169    0.0756125  -0.31165673  -0.29805124   0.71688854        0.075    1.3373294        1e-10 1.5930857e-11    6.2771264    2.4409663    31.520363 -0.0017338919  -0.18107595 -0.0057424389   0.18444509    1.6229072    1.8800299 
  878000    4.0142247    1.2761593    2.7380654  -0.23853149   0.85082123   0.99558681   0.75072351   -1.2298232            1  -0.20572978   -0.4755562    -0.435683   0.29404986 -0.0099244824 0.0078512595  0.027544487  -0.36058556  -0.34784485   0.71862883        0.075    1.3391414        1e-10 1.596953e-11    6.2619252    2.4448176    31.520363 -0.016184797  -0.21386364 -0.021342566   0.19912247  -0.39253311    0.5169684 
  879000    4.0443807    1.2841664    2.7602143  -0.23509976   0.85615958     1.010869   0.74918111   -1.2298232            1  -0.15183941  -0.41647632  -0.44470544   0.40566353 0.00090904002 -0.0022613984 0.0051865526  -0.30637703  -0.29613593   0.72050273        0.075     1.333469        1e-10 1.6011172e-11     6.245639    2.4420273    31.520363 -0.00077237282  -0.18565957 -0.0077274325   0.22339051   0.18832239    0.4827872 
  880000    4.0272794    1.2866946    2.7405847  -0.23725121   0.85784515    1.0134486    0.7502482   -1.2298232            1  -0.19041664  -0.41889846   -0.4426985   0.29034705 -0.0066232998 -0.012052103  0.027955191  -0.34517437  -0.33508137   0.71620152        0.075    1.3359641        1e-10 1.5915589e-11    6.2831478    2.4504711    31.520363 -0.0025313348  -0.16036552 0.0018143926   0.19618339   -1.6644686    1.9811563 
  881000     4.008662    1.2709156    2.7377465  -0.23267593   0.84732518   0.98788518   0.75013743   -1.2298232            1  -0.19146164  -0.41261012  -0.44011146   0.27833666  0.011539824  0.081674928  0.014321791  -0.34619653  -0.33247733   0.72023713        0.075    1.3359331        1e-10 1.600527e-11    6.2479423    2.4555204    31.520363 -0.0050452889  -0.18691003 -0.0069035736   0.19241467   0.65777452    1.2694999 
  882000    4.0393568    1.2829542    2.7564027  -0.23309737   0.85535136   0.99224271   0.76070314   -1.2298232            1 -0.089804741  -0.36621825  -0.34420274   0.44100677 -0.013852557  0.055069372 -0.029050833  -0.24671907  -0.23144245   0.71788808        0.075    1.3272262        1e-10 1.5953068e-11    6.2683866    2.4522547    31.520363 -0.0073557661  -0.19087985 -0.0078741749   0.19025188    1.2957569   0.67887548 
  883000     4.005154    1.2558985    2.7492555    -0.233601    0.8373132   0.97675795   0.74089626   -1.2298232            1  -0.22730053  -0.45986669  -0.49968965   0.27765475  0.010143662  0.025752126  -0.02200191  -0.38012919  -0.36672787   0.71504696        0.075    1.3299023        1e-10 1.5889932e-11     6.293293    2.4427568    31.520363 -0.0046797038  -0.22438737 0.0003807048   0.18389038   -1.8524539    2.0002856 
  884000    4.0006784    1.2655244    2.7351539  -0.23021307   0.84373089   0.99742837    0.7374515   -1.2298232            1  -0.14492859  -0.41203939  -0.37205677   0.34931039 -0.007060562     0.051466  0.034598895  -0.29704668  -0.28730653   0.71547599        0.075    1.3266843        1e-10 1.5899466e-11    6.2895192    2.4417404    31.520363 0.0054931012  -0.18553374  0.009074971   0.19525163   0.67419715    2.4523314 
  885000    4.0311789    1.2933553    2.7378236  -0.23140158   0.86228586    1.0056636   0.76314962   -1.2298232            1  -0.21087156  -0.44597043  -0.47859887   0.29195462 -0.015145891  -0.07091971 -0.0018942803  -0.36829054  -0.35442504   0.72023514        0.075    1.3253286        1e-10 1.6005225e-11    6.2479595    2.4491536    31.520363 -0.001017981  -0.19956073 -0.014476022   0.21065168   0.23673587  -0.67817366 
  886000    4.0290825    1.2853636    2.7437189  -0.22953446   0.85695775    1.0147548   0.74784266   -1.2298232            1  -0.15060108  -0.42316159  -0.41039336    0.3817517  0.008474576 -0.0050211307  0.038550927  -0.30486262  -0.29545229   0.71614401        0.075    1.3333749        1e-10 1.5914311e-11    6.2836523    2.4401622    31.520363 0.0060417856  -0.20757174 -0.0076776859   0.19590604 -0.031150547  -0.51293554 
  887000    4.0154114    1.2756659    2.7397455  -0.23172609   0.85049226    1.0044304     0.744047   -1.2298232            1 -0.098140874   -0.3817276  -0.35557557   0.44288054 0.0086247314  -0.10755369 -0.013969542  -0.25161945  -0.24151831    0.7149448        0.075    1.3367153        1e-10 1.5887662e-11    6.2941922    2.4408566    31.520363 -0.0032719436  -0.19989165 -0.00019036828      0.18196  -0.58866776    3.7608125 
  888000    4.0322676    1.2830538    2.7492138  -0.23720808   0.85541779   0.99542135   0.75861589   -1.2298232            1  -0.18465244  -0.41658485  -0.44560059   0.30822811 -0.00080066646 -0.023515395 -0.021713697  -0.34113623  -0.32674389   0.71665668        0.075    1.3336736        1e-10 1.5925704e-11    6.2791573    2.4376437    31.520363 0.0059016619  -0.20896842 0.0096343624   0.20201145 0.0016390282   0.75826965 
  889000    4.0200683    1.2853446    2.7347237  -0.22775202   0.85694507    1.0205711   0.74379627   -1.2298232            1 -0.067075968  -0.33598226  -0.33361947   0.46837382 0.0064508367  0.018826898 -0.039865232  -0.22050283  -0.21275742   0.71535561        0.075    1.3274302        1e-10 1.5896791e-11    6.2905776    2.4397515    31.520363 -0.0016162325  -0.19360732 0.0065223434   0.20110009  -0.30320788    3.0829373 
  890000    4.0515684    1.2948935    2.7566749  -0.22710037   0.86331135    1.0066871   0.76417659   -1.2298232            1  -0.24775058  -0.45810909  -0.46545048   0.18030784 0.0036969213  -0.15373366 -0.056941779   -0.4053814  -0.39145015   0.72294821        0.075    1.3228507        1e-10 1.6065516e-11    6.2245123    2.4632531    31.520363 -0.007510821  -0.19779132 -0.0062353371   0.20228744   0.46417427    1.5048989 
  891000    4.0232276    1.2693347     2.753893  -0.23299339   0.84627118   0.98510559   0.75027746   -1.2298232            1  -0.15562004  -0.41911677  -0.40555726   0.35781392 -0.0014480818 -0.051967167 -0.048390391  -0.31038381  -0.29623896   0.72394984        0.075    1.3234992        1e-10 1.6087774e-11    6.2159002    2.4477808    31.520363 -0.0058027396  -0.20279476 -0.010109242   0.23109883  0.071660501    1.3661902 
  892000    4.0198275    1.2858911    2.7339364  -0.23570735   0.85730947    1.0167923   0.74702787   -1.2298232            1  -0.15971779  -0.38674626  -0.44522377   0.35281667  0.020768457 -0.065921467   0.01551332  -0.31381125  -0.30485983   0.71958446        0.075     1.324877        1e-10 1.5990766e-11    6.2536092    2.4575399    31.520363 0.0035297317  -0.20365912  0.002926176   0.17239885    1.2067008    2.4096565 
  893000    4.0249453     1.286326    2.7386193  -0.23215848   0.85759939     1.005041   0.75565049   -1.2298232            1  -0.19236005  -0.44336696  -0.43562466   0.30191146  0.011621395 -0.008904308  0.023580821  -0.34823215  -0.33582465   0.72116228        0.075    1.3287714        1e-10 1.6025828e-11     6.239927    2.4455224    31.520363 -0.0037435714  -0.20291707  0.010225926   0.20726258  -0.36152472     1.030008 
  894000    4.0064001    1.2766005    2.7297996  -0.22631045   0.85111536    1.0011302   0.74738513   -1.2298232            1  -0.21510491  -0.49830767  -0.42809252   0.28108547  0.006501105 -0.066669309 -0.017223314  -0.36927206  -0.35801126   0.72037992        0.075    1.3347961        1e-10 1.6008443e-11    6.2467038    2.4406157    31.520363 0.00087940602  -0.21986401 -0.0023347359   0.22800836  -0.85123552    2.1322868 
  895000    4.0288015    1.2737212    2.7550803  -0.22697099   0.84919571   0.99145037   0.75083541   -1.2298232            1  -0.14777236  -0.40274688  -0.38749148   0.34692127 -0.00074509145 -0.016217949  0.037119376  -0.30265122  -0.28929697   0.72255225        0.075    1.3315968        1e-10 1.6056717e-11    6.2279233    2.4450043    31.520363 0.0033308688  -0.20782365 -0.0091981091   0.20407918  -0.28006887  -0.44482015 
  896000    4.0308471    1.2802547    2.7505925   -0.2262044    0.8535516    1.0125329   0.74361671   -1.2298232            1   -0.2172211  -0.47167356  -0.45817009   0.27818034 0.0017666761  0.010585671  0.027796286  -0.37061093  -0.36175513   0.71622329        0.075    1.3357522        1e-10 1.5916073e-11    6.2829568    2.4440987    31.520363 0.0011143352  -0.19587671 0.00032503277   0.19625196    1.4339971   0.15076791 
  897000    4.0443231    1.2832314    2.7610917  -0.22500197   0.85553619    1.0043062   0.75266781   -1.2298232            1   -0.1971931   -0.4715004  -0.44291213   0.32283322  0.017352195 -0.080562179  0.080789796  -0.35244994  -0.34055282   0.71754182        0.075    1.3437492        1e-10 1.5945374e-11    6.2714115    2.4486377    31.520363 0.0017289085  -0.20880268 0.0060215948   0.20337511  -0.30632751   0.13206826 
  898000    4.0343873     1.281327    2.7530603  -0.22876585   0.85426654    1.0007803   0.75295941   -1.2298232            1  -0.14645651  -0.40505436  -0.40076104   0.36644589  0.016764011 -0.090223613 -0.0065413132   -0.3017735  -0.28931291   0.71327772        0.075    1.3467699        1e-10 1.5850616e-11    6.3089031    2.4391023    31.520363 -0.0017179066  -0.19682875 -0.013715281   0.21625419   0.24648078    1.4561837 
  899000    4.0329435    1.2777382    2.7552053  -0.22949465   0.85187387   0.99888844   0.75021992   -1.2298232            1  -0.24080483  -0.49458922  -0.46641604   0.23859078 -0.021349758  0.023960733 -0.00058717387  -0.39555673  -0.38339118   0.71492847        0.075    1.3440938        1e-10 1.5887299e-11     6.294336    2.4612697    31.520363 -0.0066688144  -0.21772308 -0.0041538789   0.20251533  -0.68361364 -0.089564944 
  900000    4.0428238      1.28162    2.7612038  -0.22843791   0.85446184    1.0103411   0.74667367   -1.2298232            1  -0.13575786  -0.37455946   -0.4243493   0.39163518 0.0080067047  0.019709782 0.0036067498  -0.28977826  -0.27997903   0.71414307        0.075    1.3493488        1e-10 1.5869846e-11    6.3012584    2.4522584    31.520363 -0.003168131  -0.20087137 -0.00052772606   0.18822056    0.8687372    1.4785255 
  901000    4.0049723    1.2578278    2.7471445  -0.22142345   0.83859948   0.98537859    0.7371072   -1.2298232            1  -0.20856602  -0.45139028  -0.45038772   0.27607993 0.00013831906  -0.05184577 -0.039099222  -0.36061309  -0.34922391   0.71082434        0.075    1.3421428        1e-10 1.5796097e-11    6.3306779    2.4420955    31.520363 -0.0040977751   -0.2256533 0.0033420677   0.20181654     1.109444   0.89666645 
  902000    4.0181053     1.271766    2.7463393  -0.22529551   0.84789218    0.9980473   0.74406456   -1.2298232            1  -0.12959634  -0.41956711  -0.36638893   0.39716701 -0.011017183  0.032706563  0.030388957  -0.28307855  -0.27206263   0.71284945        0.075    1.3400948        1e-10 1.5841099e-11    6.3126934    2.4546201    31.520363 0.0037618348   -0.1954082 0.0037843996   0.20451757   0.20865995  -0.32098329 
  903000    4.0428688    1.2893944    2.7534744  -0.22681902   0.85964512    1.0105597   0.75529307   -1.2298232            1  -0.11752127   -0.3511324  -0.38475139      0.38332 -0.0021211096 -0.016327956 -0.044521431  -0.27331963  -0.26177363   0.71417399        0.075    1.3432215        1e-10 1.5870533e-11    6.3009855      2.46466    31.520363 -0.0033625624  -0.20937559 -0.0062305847   0.19583762   0.14365357  -0.69142189 
  904000    4.0351536    1.2784979    2.7566558  -0.23532405   0.85238032    1.0079557   0.74480222   -1.2298232            1  -0.16119023  -0.42893162  -0.42968592   0.37504686 0.0062304345  0.027601744  0.025803221  -0.31482459  -0.30507089   0.70997605        0.075    1.3437157        1e-10 1.5777245e-11     6.338242    2.4541023    31.520363 -0.012491912  -0.19134214 0.0028075389   0.19205279    0.4189066    1.6730313 
  905000    4.0075239    1.2710894    2.7364345  -0.22423686   0.84744109    1.0053395   0.73825499   -1.2298232            1  -0.15455515  -0.39330503  -0.40526739   0.33490698 0.0067615576 -0.0073802099 -0.036811644  -0.30683898  -0.29806235   0.70726171        0.075    1.3441726        1e-10 1.5716927e-11     6.362567     2.437214    31.520363 0.0095940418  -0.17871441 -0.0099073011   0.20204472    0.4653969   0.61744526 
  906000    4.0104917    1.2690561    2.7414356  -0.22177788   0.84608545   0.99823979   0.74087417   -1.2298232            1 -0.044518447  -0.29285317  -0.33470348   0.49400131  -0.00772102  0.046134357 0.0026700385  -0.19734255  -0.18701221   0.71187483        0.075    1.3379903        1e-10 1.5819441e-11     6.321336    2.4479969    31.520363 -0.010879884  -0.19466352 -0.0021955674   0.20549999  -0.68897072    1.3438565 
  907000    4.0240313    1.2799071    2.7441243  -0.23181225   0.85331985    1.0082713   0.74617361   -1.2298232            1  -0.12679283  -0.38766976  -0.40037897   0.40767022 0.0035213722   0.11465979  0.041057119  -0.28071008  -0.27071855   0.71378491        0.075    1.3413325        1e-10 1.5861887e-11    6.3044202    2.4457693    31.520363 -0.001260734  -0.18487959 0.0035314415   0.20185576   -1.9898977   0.72631143 
  908000    4.0012153    1.2756216    2.7255937  -0.23448104    0.8504627    1.0082207   0.74137404   -1.2298232            1  -0.23984669  -0.45278416  -0.47076864   0.20401274 -0.0034303926   0.14202304  -0.02116641   -0.3927739  -0.38376518   0.71755574        0.075     1.345028        1e-10 1.5945683e-11    6.2712898    2.4487357    31.520363  0.008437461   -0.2191954 -0.0011323939   0.19426186   -1.9558057  -0.18067378 
  909000    4.0154797    1.2736046     2.741875  -0.22815828     0.849118   0.99874952   0.74565282   -1.2298232            1 -0.055843276  -0.32255379  -0.34811519   0.50313915  0.022578222  0.038531715 -0.019244222   -0.2096531   -0.1984098   0.71085333        0.075    1.3467057        1e-10 1.5796741e-11    6.3304198    2.4390236    31.520363 0.00078749129  -0.20426906 0.0058238564   0.19238719  -0.69002947    1.7349418 
  910000    4.0253871    1.2771809    2.7482062  -0.22573563   0.85150228   0.99803093   0.75018457   -1.2298232            1  -0.10911931  -0.41634931   -0.3419953   0.43098668 0.0041409658   0.10867337 -0.0028593156  -0.26386392  -0.25158326   0.71085264        0.075    1.3475862        1e-10 1.5796725e-11    6.3304259    2.4397067    31.520363 0.0046573207   -0.1917261 0.0068861041   0.20671876   -1.5663389    1.4046081 
  911000    4.0211371     1.273728    2.7474091  -0.23261637   0.84920022   0.99783098   0.74642759   -1.2298232            1  -0.16322585  -0.42370997  -0.38993165   0.32396407 0.0026588199   0.10715962  0.049421359  -0.31719549  -0.30566126   0.71447584        0.075    1.3447397        1e-10 1.5877241e-11    6.2983235    2.4539084    31.520363 -0.003018411  -0.20825779 -0.0088798656   0.20532443   -2.8051315    1.3759624 
  912000    4.0364378    1.2852036    2.7512342   -0.2332373   0.85685108    1.0015742   0.75678335   -1.2298232            1  -0.12992851  -0.40757529  -0.37999531   0.39778505 -0.0087527873  0.040142251  0.013943755  -0.28603429  -0.27289824   0.71756133        0.075    1.3436509        1e-10 1.5945807e-11    6.2712409    2.4669726    31.520363 -0.0055187991  -0.19393907 -0.0072219692   0.18228909   -2.0839885    3.0476554 
  913000    4.0306084    1.2815932    2.7490152  -0.23006732   0.85444399    1.0059398   0.74968919   -1.2298232            1   -0.2374713  -0.48383269  -0.47304024   0.24445902 -0.0030506467    0.1178271  0.025541983  -0.39211373  -0.38106421   0.71752002        0.075     1.347639        1e-10 1.5944889e-11     6.271602    2.4394967    31.520363 -0.0021194827  -0.18963346 -0.0090360023   0.20705663   -1.3016292    1.2065018 
  914000    4.0290107    1.2863718    2.7426388  -0.23365944   0.85762994    1.0141836   0.74937541   -1.2298232            1  -0.21932968   -0.4653217  -0.42003337   0.22736604 0.00016631992  0.090698216 -0.011295045  -0.37390738  -0.36409933   0.71535307        0.075    1.3426066        1e-10 1.5896735e-11       6.2906    2.4451195    31.520363 0.00076576403  -0.16758803 -0.0072386312   0.19441536   -1.3926345  -0.40767059 
  915000    4.0279337     1.277721    2.7502128   -0.2321587   0.85186237   0.99418118   0.75345794   -1.2298232            1  -0.14716088  -0.40174373  -0.41661835   0.37687944 -0.004357123  0.083379236  0.047818597  -0.30258071   -0.2890753   0.71516688        0.075    1.3429148        1e-10 1.5892597e-11    6.2922377    2.4403064    31.520363 -0.006670158  -0.20899555 -0.010684832   0.20174169  0.030844401    1.1823476 
  916000    4.0060106    1.2636668    2.7423438  -0.22972178   0.84249242   0.99104766   0.73977141   -1.2298232            1  -0.14598466  -0.42942059  -0.36610274   0.35756935 -0.012497515 0.0084707823  0.012227947  -0.29858129  -0.28745178   0.71733017        0.075    1.3445911        1e-10 1.5940671e-11    6.2732618    2.4460014    31.520363 -0.0038098391  -0.21864156  0.010002318   0.21998233   0.05634679    0.1761269 
  917000    4.0181289    1.2670835    2.7510454  -0.22764165   0.84477031   0.98735832   0.74617892   -1.2298232            1  -0.12594751  -0.37114292  -0.42064159   0.41394198 0.0016347732  0.086361873 -0.056266388  -0.27986585    -0.266888   0.71778383        0.075     1.340771        1e-10 1.5950752e-11     6.269297    2.4434016    31.520363 -0.0014228278  -0.19709978 -0.0089393289   0.20029322  -0.54908505    1.7950079 
  918000    4.0432308    1.2891529    2.7540779  -0.22762872    0.8594841   0.99849346   0.76337059   -1.2298232            1  -0.19968934  -0.41807725  -0.44732753   0.26633675 0.0055926328 -0.0028350391 -0.0058484669   -0.3571539  -0.34221932   0.71338112        0.075    1.3368087        1e-10 1.5852914e-11    6.3079886    2.4401562    31.520363 -0.0034223672  -0.21092495 -0.0063188614   0.18833902   0.48181255   0.79807595 
  919000    4.0404122    1.2990284    2.7413838  -0.23287078   0.86606812    1.0169428    0.7617443   -1.2298232            1   -0.1496245  -0.42565914  -0.39161588   0.36840152 -0.0047812845 -0.055311233 -0.013493082   -0.3067536  -0.29478803   0.71618047        0.075     1.342538        1e-10 1.5915122e-11    6.2833325    2.4460207    31.520363 0.0003585237  -0.19152704 -0.0060229044   0.20108558    1.4512343   0.83713545 
  920000    4.0148124    1.2761175    2.7386949  -0.23876751   0.85079334    1.0023055    0.7460269   -1.2298232            1  -0.15042555  -0.41224427  -0.40080159   0.36176922 -0.0031019805  0.021160637  0.046890586  -0.30431253  -0.29349967   0.71925218        0.075    1.3363692        1e-10 1.5983382e-11    6.2564982     2.453903    31.520363 0.00015860454  -0.19051948 -0.0038900967   0.20358762 -0.008589467    1.7424938 
  921000    4.0124316    1.2767976    2.7356339  -0.23212072   0.85124677    1.0053007   0.74472145   -1.2298232            1  -0.15598999  -0.42628314  -0.40802327   0.36633643 -0.0043950358 -0.0014205445 -0.0018098437   -0.3096077  -0.29949166   0.71544222        0.075    1.3461628        1e-10 1.5898716e-11    6.2898161    2.4332765    31.520363 -0.011172934  -0.19067305 -0.0083628614   0.20761678   -1.3300104    1.0240463 
  922000    4.0360077     1.285626    2.7503817  -0.22471227   0.85713269    1.0137691   0.74882079   -1.2298232            1  -0.10207535  -0.36817376  -0.39327393   0.45522163  0.012958051  0.011885061 -0.0056499962  -0.25653865  -0.24678586   0.71770765        0.075    1.3475816        1e-10 1.5949059e-11    6.2699625    2.4449557    31.520363 -0.0048869882  -0.21398143 0.0051260079   0.18398352   0.34091591   0.87904932 
  923000    4.0347354    1.2870861    2.7476493    -0.238533   0.85810613     1.008887   0.75384644   -1.2298232            1  -0.16982656  -0.40374745  -0.42411131   0.31837907 0.0067056436  0.055952783  0.032220861  -0.32532653  -0.31384017   0.72127341        0.075    1.3405184        1e-10 1.6028298e-11    6.2389656    2.4472303    31.520363 -0.0053854795   -0.2186813 0.00085128458   0.19090899   -1.1422919   0.77392434 
  924000    4.0233409    1.2726444    2.7506964  -0.23405272   0.84847781    1.0028064   0.74176213   -1.2298232            1  -0.15125518   -0.4151188  -0.38439583    0.3457491 0.0014089573 -0.00065288364 -0.0073622085  -0.30426245  -0.29440081   0.72055797        0.075    1.3420728        1e-10 1.6012399e-11    6.2451603    2.4536271    31.520363 -0.0072488603  -0.18527993 -0.00016207145   0.17954661  -0.92366592   -1.0898825 
  925000    4.0295823    1.2800915    2.7494908  -0.23084276   0.85344284    1.0050812   0.74858934   -1.2298232            1  -0.19950819  -0.45719496  -0.44900188   0.30767228 0.0041890648 -0.060481411 -0.001716131  -0.35392374  -0.34297853   0.72022508        0.075    1.3525599        1e-10 1.6005002e-11    6.2480468    2.4518066    31.520363 -0.0072189315   -0.2194183 -0.0064616421   0.21203199  -0.50834273   0.74424982 
  926000    4.0255517    1.2811526    2.7443991  -0.23369092   0.85415023   0.99682748   0.75549797   -1.2298232            1 -0.087361142  -0.35509219  -0.37292778   0.46593653 0.0064790497 -0.015558199 -0.050897848  -0.24320178  -0.22965331   0.72046164        0.075    1.3451945        1e-10 1.6010259e-11    6.2459953    2.4406069    31.520363 -0.0027465621  -0.21269422 -0.0038959879   0.20239037   -1.0887341    1.9407586 
  927000    4.0338318    1.2814252    2.7524066  -0.23092021   0.85433198   0.99954304   0.75392632   -1.2298232            1  -0.17638318  -0.43888088  -0.40742068   0.31715204 -0.010317955  0.015171799  0.030496152  -0.33189962  -0.31906297   0.71941872        0.075    1.3492167        1e-10 1.5987083e-11    6.2550499    2.4509965    31.520363 -0.0076719172  -0.19545581 -0.0052446181   0.20534947  -0.48708705   0.95740923 
  928000    4.0271832    1.2651264    2.7620568   -0.2204006   0.84346549   0.98871995   0.74302876   -1.2298232            1  -0.14992036  -0.41839439  -0.40079798   0.36943129 0.0011865773 -0.069635857 -0.052395145   -0.3031889  -0.29105521   0.71580878        0.075    1.3518303        1e-10 1.5906862e-11    6.2865951    2.4527136    31.520363 -0.0025912133  -0.19274559 -0.011253191   0.18914461   0.71177089 -0.083335771 
  929000    4.0207348    1.2822255    2.7385093  -0.23975515   0.85486558    1.0159701   0.74346149   -1.2298232            1   -0.1696559  -0.42748963  -0.42777645   0.34629836 -0.008043867  0.017417753 -0.016701704  -0.32301371  -0.31468058   0.72187816        0.075    1.3500032        1e-10 1.6041737e-11    6.2337389    2.4485346    31.520363 0.0048096939  -0.17576373 -0.0044633295   0.20105147  -0.44799304    2.0597823 
  930000    4.0172828    1.2820188    2.7352639  -0.23370876   0.85472777   0.99888225   0.75505332   -1.2298232            1  -0.19473179   -0.4308211  -0.43530306   0.28192878 0.0015040356 -0.0063277495 -0.0076550161   -0.3504807  -0.33731726   0.71793005        0.075    1.3459722        1e-10 1.5954001e-11    6.2680201    2.4465705    31.520363 -0.005263043  -0.21838616 0.0017876823   0.19640094    0.6715418    3.2629519 
  931000    4.0057007    1.2701322    2.7355685  -0.22172432    0.8468029   0.98801778   0.74916193   -1.2298232            1  -0.07265876  -0.36389062  -0.29712781   0.44304215 -0.005838221 -0.025077576 -0.030316339  -0.22719243  -0.21369338   0.72233644        0.075     1.345577        1e-10 1.6051921e-11     6.229784    2.4501232    31.520363 0.0057659082  -0.21410784 -0.0017993048   0.19822651    1.3895169  -0.41579967 
  932000    4.0101042    1.2808722     2.729232  -0.23265725   0.85396329   0.99902284   0.75366243   -1.2298232            1  -0.22045575  -0.42744963  -0.44914396   0.21522635 0.0056875348  0.015413662  0.039287397  -0.37591776  -0.36306129   0.71753536        0.075    1.3499125        1e-10 1.594523e-11    6.2714679    2.4524752    31.520363 -0.005167064  -0.18867331 0.0062272761   0.18683732   0.42361915   -1.6449482 
  933000    4.0265739    1.2768123    2.7497616  -0.23030927   0.85125657    1.0017083   0.74722398   -1.2298232            1 -0.072219933  -0.30965373  -0.34147406   0.43446799 -0.0050732462 -0.018867012 -0.0044069016  -0.22635385  -0.21520881   0.71791518        0.075    1.3452084        1e-10 1.5953671e-11      6.26815    2.4418492    31.520363 -0.0020749663  -0.21609241 0.0018914086   0.18998828   0.44261487    2.0743665 
  934000    4.0183716    1.2754068    2.7429648   -0.2311121   0.85031949   0.98749966   0.75547092   -1.2298232            1 -0.075847749  -0.32736962    -0.331697   0.43152338 -0.010916521   0.04019564 -0.011559569   -0.2316828  -0.21680841   0.71768233        0.075    1.3471542        1e-10 1.5948496e-11    6.2701836    2.4517212    31.520363 0.00026284069  -0.18443923 0.0052884034   0.20198566   -2.0619255    1.4895576 
  935000    4.0402613    1.2868113    2.7534499  -0.23022672   0.85792296    1.0153115    0.7490907   -1.2298232            1  -0.23861069  -0.47365483  -0.44374563    0.2015684 0.0019615685  -0.10804022  0.052388734  -0.39312966  -0.38354135    0.7188942        0.075    1.3382646        1e-10 1.5975427e-11    6.2596137    2.4483018    31.520363 -0.0053148682  -0.20445033 -0.00020914071   0.20016492  -0.22607208   0.69571921 
  936000    4.0523339    1.2783463    2.7739876  -0.22729634   0.85227926    1.0061997   0.74584643   -1.2298232            1  -0.17163343  -0.43499585  -0.42198889   0.34208444  0.010310239 -0.038795704  0.019797869  -0.32548319  -0.31526343   0.71702588        0.075    1.3272602        1e-10 1.5933909e-11    6.2759241     2.446194    31.520363 0.0031372508  -0.21447531 -0.0066738884   0.22199482    1.2745122     0.994478 
  937000    4.0178358    1.2624377    2.7553981  -0.22248831   0.84167292   0.98424395   0.74309297   -1.2298232            1  -0.11887355  -0.39494621   -0.3398414   0.37816696 -0.0021766433  0.024468617 0.00057298437  -0.27215534  -0.25936948   0.71249662        0.075    1.3328777        1e-10 1.5833258e-11    6.3158194    2.4430249    31.520363  -0.01505862  -0.19831059 -0.0038565017   0.19476328     1.099404   0.24326585 
  938000    4.0290258    1.2799955    2.7490303  -0.23267478    0.8533788   0.98884895   0.75971387   -1.2298232            1  -0.20711392  -0.47727938  -0.41508188   0.27101949 -0.0027598428 -0.054163317 0.0080873805   -0.3638242  -0.34826719   0.71652968        0.075    1.3323237        1e-10 1.5922882e-11    6.2802702    2.4418055    31.520363 0.0010225301  -0.21836102 -0.0042551272   0.20018096    1.7696677   0.53743188 
  939000    4.0235992    1.2771715    2.7464278  -0.22992735   0.85149601   0.99523723   0.75210722   -1.2298232            1   -0.1950811  -0.42526556  -0.45469704   0.29471931  0.014581243 -0.0088480419  0.014239496   -0.3502223  -0.33714626   0.71355876        0.075    1.3340135        1e-10 1.5856861e-11    6.3064183    2.4482588    31.520363 0.0054894428  -0.18994671 -0.0072736262   0.21483323   0.99417769   0.13530792 
  940000    4.0181351    1.2700477    2.7480874  -0.23393551   0.84674659   0.99903302   0.74144396   -1.2298232            1  -0.15984828   -0.3959043   -0.4096734   0.32603286 -0.0075668098 -0.042233971 -0.029107383  -0.31278992  -0.30245528   0.71417348        0.075    1.3225079        1e-10 1.5870522e-11    6.3009901    2.4384065    31.520363 0.0076957901  -0.18737901 0.00059589986   0.19352816    1.0234669    2.5141213 
  941000    4.0211704    1.2847211    2.7364493  -0.22951147   0.85652939    1.0076932   0.75200457   -1.2298232            1  -0.23578992  -0.49430522  -0.44809851   0.23503398   -0.0105116  0.022364312 0.0091362294  -0.39090995  -0.37963311   0.71826583        0.075    1.3318845        1e-10 1.5961463e-11    6.2650899    2.4428114    31.520363  0.003388649   -0.1963035 0.0018968355   0.20431682    2.0169544   0.31916691 
  942000      4.04218    1.2912211    2.7509588  -0.22566692   0.86086297    1.0154021   0.75400279   -1.2298232            1  -0.17776876  -0.39694104  -0.41944458   0.28307934 -0.0017782177 0.0090726066 -0.0026366594  -0.33330098  -0.32271236   0.71571759        0.075    1.3315819        1e-10 1.5904835e-11    6.2873962    2.4493635    31.520363 0.00072836917  -0.21727186 0.0049892545    0.1882276   0.83999189   0.75773545 
  943000    4.0408063    1.2882585    2.7525478  -0.22838566   0.85888782   0.99410224   0.76540038   -1.2298232            1  -0.12362983  -0.38530522  -0.39368772   0.40810343 -0.0058574912 -0.057691319  0.037273489  -0.28151309  -0.26553298   0.71282963        0.075    1.3379926        1e-10 1.5840658e-11    6.3128689    2.4388605    31.520363 0.0023197979  -0.20235724 -0.0061730494   0.21877134   -1.0812828  -0.58634602 
  944000      4.02017    1.2699067    2.7502633  -0.23097656   0.84665254    1.0007559   0.74009255   -1.2298232            1  -0.18163873  -0.42984496  -0.41810372    0.3030325 0.0016014367 -0.014160783 0.0012589731   -0.3343016  -0.32449166   0.71467912        0.075     1.330209        1e-10 1.5881758e-11    6.2965321    2.4432187    31.520363 -0.0045456483  -0.20179436 -0.0021481254   0.18774926    1.2006178   0.18292434 
  945000    4.0297936    1.2744437    2.7553499  -0.23050421    0.8496774    1.0123372   0.73719656   -1.2298232            1   -0.1837117  -0.45079886  -0.40894675   0.30861051 0.0020383648 -0.051573563  0.057770577   -0.3357772   -0.3282178   0.71314602        0.075    1.3374063        1e-10 1.5847689e-11    6.3100682    2.4507188    31.520363 0.0019429567   -0.1756749 -0.0053105386   0.19970217    1.2087611  -0.81871849 
  946000     4.021762    1.2708041    2.7509579  -0.22649553   0.84725086   0.99694266   0.74374379   -1.2298232            1   -0.2588216   -0.4846858   -0.4876428    0.1958638 0.0070360792 -0.030386994  0.023429091  -0.41223764   -0.4011302   0.71301609        0.075    1.3379456        1e-10 1.5844802e-11     6.311218    2.4473632    31.520363 -0.016846626  -0.21514398 -0.0012456744   0.18729355    1.5993124  -0.28781255 
  947000    4.0100092    1.2637507    2.7462585  -0.22853824   0.84254835   0.98265838   0.74567153   -1.2298232            1 -0.075394536   -0.3326925  -0.39368499   0.50019388 0.0069429159 -0.034123174  0.035952959  -0.22920822  -0.21566413   0.71568049        0.075    1.3424051        1e-10 1.5904011e-11     6.287722    2.4550792    31.520363 0.0013776366  -0.19842308 -0.0084198515   0.19329844  -0.51653144    2.8793538 
  948000    4.0354776    1.2770529    2.7584247  -0.23335159   0.85141697   0.99441482    0.7525426   -1.2298232            1  -0.17603972  -0.42827591  -0.43845913   0.33861589  0.004651748 -0.042514967  0.042339169  -0.33127073  -0.31798749   0.71627142        0.075    1.3479511        1e-10 1.5917143e-11    6.2825346     2.439036    31.520363 0.0060595461  -0.19591735 0.00087811449    0.1859634    1.2894312  -0.81091848 
  949000    4.0240761    1.2811102    2.7429659  -0.23053058   0.85412198    1.0094164   0.74673846   -1.2298232            1  -0.14638088   -0.3932851  -0.39280893   0.34695139 0.0069206594 -0.0022952866  0.005898232  -0.30041464  -0.29047005   0.71726692        0.075     1.339846        1e-10 1.5939265e-11    6.2738151     2.459515    31.520363 -0.0043649871  -0.20173519 0.0030087864   0.19193609    1.0919464    1.3091482 
  950000    4.0206556    1.2779618    2.7426938  -0.22980844   0.85202294   0.98966146   0.75685735   -1.2298232            1 -0.061284157  -0.31500851  -0.35085116    0.4820072  0.010118158  0.026172238 -0.020915968   -0.2174052  -0.20255341   0.72204144        0.075    1.3462012        1e-10 1.6045365e-11    6.2323293    2.4512173    31.520363 -0.014959083  -0.21303227  0.010012435   0.21612514  -0.65692944    2.7546837 
  951000    4.0396175    1.2815687    2.7580489  -0.22852872   0.85442766   0.99923265   0.75430301   -1.2298232            1  -0.12087438  -0.37840233  -0.39632512   0.41210432 -0.0047257881 -0.006831285  0.019482034  -0.27646852  -0.26350987   0.72285974        0.075    1.3494629        1e-10 1.606355e-11    6.2252741    2.4522839    31.520363 -0.00068637651  -0.21688466 -0.0010357648   0.19396904    0.4565023    1.1634296 
  952000    4.0262037    1.2882929    2.7379108  -0.22908477   0.85891073    1.0088447   0.75523719   -1.2298232            1   -0.1984156  -0.44148701  -0.44173633   0.28797652 -0.0073430907 -0.020076502 0.00093920858  -0.35420245  -0.34242317    0.7195078        0.075    1.3358048        1e-10 1.5989062e-11    6.2542755    2.4402547    31.520363 0.0055671789  -0.21037462 -0.0037962451   0.20504021   0.19273323  -0.10894388 
  953000    4.0069721    1.2670272     2.739945     -0.24131   0.84473278   0.99120727   0.74345188   -1.2298232            1  -0.10574799  -0.35603984  -0.36737191    0.4061678 -0.0040103422 -0.018045202 -0.0048303958  -0.25910381  -0.24723789   0.71387601        0.075     1.341181        1e-10 1.5863911e-11    6.3036156    2.4513365    31.520363 -0.0021869992   -0.2102245 -0.0022421528   0.16692041    1.6948174   0.77415312 
  954000    4.0522101    1.3034137    2.7487964  -0.23291383   0.86899183    1.0237856   0.76195624   -1.2298232            1 -0.056393261  -0.31499169  -0.32501498   0.47082689 -0.0014726789 -0.034457604 0.0055234015  -0.21356608  -0.20253356   0.71780244        0.075    1.3384731        1e-10 1.5951165e-11    6.2691345    2.4483895    31.520363 0.0055965817  -0.20140742 0.0017074509   0.20613081    1.1305337    0.1349783 
  955000    4.0221309    1.2781883    2.7439426  -0.23071351   0.85217396   0.99523852   0.75325349   -1.2298232            1  -0.12550895  -0.37387389  -0.40198079   0.39932783  0.003823871 -0.060363553 -0.043828658  -0.28088661   -0.2675743   0.71496119        0.075    1.3404906        1e-10 1.5888027e-11    6.2940479    2.4485157    31.520363 -0.0027294563  -0.19387171 0.0050608324   0.18402508  -0.21201817   0.23640712 
  956000    4.0372711    1.2731338    2.7641373  -0.21989069   0.84880409    1.0008619    0.7436599   -1.2298232            1  -0.13409507  -0.39728689  -0.42350601   0.41850769  0.011861217 -0.0057884815 -0.020059945   -0.2874938  -0.27696312   0.70680509        0.075    1.3398021        1e-10 1.570678e-11    6.3666774    2.4384065    31.520363 -0.012940071  -0.20560179 -0.00066644186   0.21557284    1.2523314    1.1310565 
  957000    4.0559623    1.2938189    2.7621434  -0.22605287   0.86259494    0.9996902    0.7678063   -1.2298232            1  -0.15630226  -0.45928855  -0.38707289   0.37745465 0.0016320891 -0.068753224 -0.033151185   -0.3146818  -0.29900306   0.71069634        0.075    1.3413479        1e-10 1.5793252e-11    6.3318182    2.4478739    31.520363 -0.0017159924  -0.20560016 -0.0024812256   0.19361169   0.74803095    1.5759708 
  958000     4.015945    1.2655059     2.750439  -0.22560566   0.84371855   0.98276244   0.74757963   -1.2298232            1  -0.25660218  -0.49478408  -0.46180257   0.18678012 0.0031628479  0.071877534 -0.0017733647  -0.41080945  -0.39688663   0.71113707        0.075    1.3477844        1e-10 1.5803046e-11     6.327894    2.4440073    31.520363 -0.0083768077  -0.22622139 0.0028170968   0.17884458    -0.614403 -0.079279749 
  959000    4.0331802    1.2790938    2.7540863   -0.2252919   0.85277766   0.99487913   0.75452373   -1.2298232            1  -0.23677993  -0.51921703  -0.48270917   0.29158639 0.0081191748  0.088235669  0.065599819  -0.39241961  -0.37879398   0.70579801        0.075    1.3468239        1e-10  1.56844e-11    6.3757618    2.4429435    31.520363 0.0021556832  -0.20125505 0.0090459211   0.18056367   -1.1322011   -1.1076152 
  960000    4.0510961    1.2910784    2.7600178  -0.22958741    0.8607678    1.0077827   0.75911449   -1.2298232            1  -0.11568871  -0.34655095  -0.39287289   0.39235772 0.0059506344    0.1226949  0.012748187  -0.27227534  -0.25954467   0.70698501        0.075    1.3490823        1e-10 1.5710778e-11    6.3650571    2.4500215    31.520363 -0.0066299208  -0.19913243 -0.0058746512   0.20581407  -0.76594317    2.2385627 
  961000    4.0216558    1.2731127    2.7485431  -0.22739906   0.84879002   0.99425385   0.74820891   -1.2298232            1  -0.13754242  -0.37886038  -0.41304727   0.37928041 -0.0026957315  0.049971923  0.034046332   -0.2918795  -0.27946721   0.70813038        0.075    1.3412089        1e-10 1.5736231e-11    6.3547619    2.4541987    31.520363 -0.0056942436  -0.17679927 0.0023747775   0.19075026   -1.1120809   0.24334135 
  962000    4.0371321     1.273774    2.7633581  -0.22177826   0.84923093     1.012441   0.73636929   -1.2298232            1  -0.16372359   -0.4091594  -0.41760641   0.33559504 0.0067761158   0.02323838 -0.010263959  -0.31561845   -0.3082445   0.71088481        0.075    1.3415668        1e-10 1.579744e-11    6.3301395     2.465013    31.520363  0.001260093  -0.20663921 -0.0052091665   0.19967458   0.25555963   -1.5215673 
  963000    4.0357139    1.2875019     2.748212  -0.22354791   0.85838339    1.0161906   0.74926141   -1.2298232            1  -0.14784301  -0.42694065  -0.37720365   0.36061527 0.00047192697 -0.0062408628 -0.021817257   -0.3023972  -0.29289917    0.7112267        0.075    1.3396604        1e-10 1.5805038e-11    6.3270965    2.4352102    31.520363 -0.0070757437  -0.23007748 -0.011839835    0.2071883   0.34255043   0.82723096 
  964000    4.0275838    1.2736978     2.753886  -0.22993473   0.84918011    1.0013114   0.74398507   -1.2298232            1 -0.073398338  -0.30120318  -0.37706035   0.45806852 0.0060760307  0.048991749  0.044995119  -0.22686414  -0.21633056   0.71045583        0.075     1.339071        1e-10 1.5787907e-11    6.3339617    2.4468379    31.520363 -0.0020771897  -0.21806878 -0.012870781   0.21700085     -1.26897   0.24648171 
  965000    4.0392312    1.2885452     2.750686  -0.22790588   0.85907894     1.000246   0.76147225   -1.2298232            1  -0.22493957  -0.44023028  -0.47100982    0.2364214 0.0068786145 0.0058890185  0.022069168  -0.38201255   -0.3677197   0.71292099        0.075    1.3368106        1e-10 1.5842689e-11    6.3120599    2.4385898    31.520363 0.0061612726  -0.20837078 0.0039635392   0.19840654  -0.62513314   0.14525489 
  966000    4.0267862    1.2751522     2.751634  -0.22756034   0.85014978    1.0058947    0.7424542   -1.2298232            1   -0.1318446   -0.4046397  -0.39464159   0.40374748 -0.00087889475   0.10312854  0.011568899  -0.28499463  -0.27543106    0.7120988        0.075    1.3295088        1e-10 1.5824418e-11    6.3193478    2.4443629    31.520363 0.0023482334  -0.20203576 0.00053863205   0.23305819   -1.0809775    1.2780769 
  967000    4.0067382    1.2650194    2.7417189  -0.23691082   0.84339415   0.98374448   0.74635111   -1.2298232            1  -0.12478422  -0.37555548  -0.39479123   0.39599404 -0.010995516  0.093504034 -0.0018222203  -0.27873809  -0.26520885   0.71364445        0.075    1.3308275        1e-10 1.5858766e-11     6.305661    2.4494527    31.520363 -0.0065661897  -0.19619499 -0.00059445526   0.22101199   -1.4795223    1.5585891 
  968000    4.0234702    1.2841858    2.7392844  -0.23496508   0.85617249    1.0003983   0.75644881   -1.2298232            1  -0.19583168  -0.43559916  -0.43955672   0.28766084  0.003007903  0.057374119  0.049860386  -0.35186845  -0.33863356   0.71485833        0.075    1.3351785        1e-10 1.5885741e-11    6.2949536    2.4471251    31.520363 -0.00076250903  -0.18059194 -0.0038197865   0.19135593  -0.24053328    2.1486971 
  969000     4.017926     1.274955     2.742971  -0.22154457   0.85001829   0.99625883    0.7488998   -1.2298232            1  -0.26554945  -0.48677106  -0.49776491   0.18788763  0.013646413  0.022849768 -0.011983706  -0.42002904  -0.40776044   0.71268244        0.075    1.3324667        1e-10 1.5837388e-11    6.3141727    2.4449199    31.520363 -0.0093339256  -0.20449244 -0.0017397295   0.17756678  -0.57476615 -0.096769608 
  970000    4.0270987    1.2732405    2.7538582  -0.23020399    0.8488752   0.99555031   0.74745587   -1.2298232            1  -0.10813598   -0.3758213  -0.37954138   0.43095472 -0.0095625747  0.004640127  0.078726727  -0.26231773  -0.25024584    0.7131299        0.075    1.3302535        1e-10 1.5847331e-11    6.3102108    2.4322283    31.520363 0.0037559508    -0.240859 0.0045357988    0.1923817  -0.38407723    2.5511873 
  971000    4.0442913    1.2911681    2.7531232  -0.23506436   0.86082761    1.0150896   0.75415923   -1.2298232            1  -0.21820082  -0.46824437  -0.44450831   0.25815022 0.00044041318 -0.0021653378 0.0062941281  -0.37376531  -0.36309981   0.71603883        0.075    1.3251341        1e-10 1.5911974e-11    6.2845754    2.4428296    31.520363 -0.002142173  -0.21267177 0.0027675466   0.17681888     -1.61805    1.1464227 
  972000    4.0109482    1.2633947    2.7475535  -0.23214152   0.84231101   0.99322942   0.73795463   -1.2298232            1  -0.16849067  -0.43173605  -0.42732836   0.35359241 -0.010974929 -0.0022697793  0.042844641  -0.32071254  -0.31026923   0.71720409        0.075    1.3264199        1e-10 1.5937869e-11    6.2743647    2.4431425    31.520363 0.0025050592  -0.20136439 0.0079125387   0.18847902    -0.765455   0.66678332 
  973000    4.0151154    1.2678274    2.7472879  -0.22900243   0.84526631   0.99066973   0.74472666   -1.2298232            1  -0.10774865  -0.37958348  -0.36618828   0.42252581 0.0028051012 -0.075286788 -0.015911028  -0.26136743  -0.24916183   0.71766622        0.075    1.3299749        1e-10 1.5948138e-11    6.2703244    2.4443992    31.520363 0.00096535984  -0.19591012 -0.010151678   0.20218625   0.42280217    1.1699921 
  974000    4.0119311    1.2619659    2.7499651  -0.23027085   0.84135842   0.99667122   0.73396099   -1.2298232            1  -0.12712329  -0.38137735  -0.39358449   0.39359197 0.0083691014 -0.014709522  -0.01957312  -0.27852137  -0.26939315   0.71794992        0.075    1.3339121        1e-10 1.5954443e-11    6.2678467    2.4439198    31.520363 -0.0007808907  -0.20980339 0.0022067326   0.22299428    -0.505704   0.97039286 
  975000    4.0184362    1.2694233    2.7490129  -0.22256939    0.8463303   0.99898033   0.74077602   -1.2298232            1  -0.14030188  -0.39859057  -0.39474601   0.37243093 -0.0090534303 -0.011463337   0.03988624  -0.29310574  -0.28290136   0.71627939        0.075    1.3294019        1e-10 1.591732e-11    6.2824647    2.4542226    31.520363 -0.021791664  -0.22076688 -0.0065576724   0.21536587   0.32794464    1.1385359 
  976000    4.0287054    1.2865788    2.7421265  -0.22779441   0.85776795    1.0041182   0.75657427   -1.2298232            1  -0.13456629  -0.38016683  -0.36182764    0.3382956 0.0022077132 -0.077040068 -0.013748228  -0.29062894  -0.27789917   0.71696121        0.075    1.3281931        1e-10 1.5932471e-11    6.2764902    2.4483242    31.520363 -0.00066776096  -0.22214857 -0.0074189121   0.20135177   0.26608633  -0.62661561 
  977000    4.0404488    1.2859423    2.7545066  -0.22859845   0.85734354    1.0081649   0.75305579   -1.2298232            1  -0.21421775  -0.46615448  -0.46305553   0.28655676 -0.012227454 -0.083990379  0.012651064  -0.36955462  -0.35812827   0.71528817        0.075    1.3322161        1e-10 1.5895293e-11    6.2911707    2.4523853    31.520363 0.0054256855  -0.20891304 0.0018813633   0.20981726   0.49627449    1.8452675 
  978000    4.0237681    1.2850543    2.7387137  -0.22700041   0.85675156    1.0044109   0.75465187   -1.2298232            1  -0.13280627  -0.37352159  -0.39387529   0.36897807 -0.0023157643 0.0011811092  0.013367902  -0.28847238  -0.27618094   0.71580396        0.075    1.3335869        1e-10 1.5906755e-11    6.2866375    2.4605089    31.520363 -0.001952197  -0.20626303 -0.0034015121   0.18843504   -1.9832922   0.92437327 
  979000    4.0202518     1.271855    2.7483969  -0.22619547   0.84795148     1.000016   0.74280253   -1.2298232            1  -0.15238209  -0.37528222  -0.40462501   0.32276095 0.0063508075  0.027952842    0.0163118  -0.30560397   -0.2951294   0.71879563        0.075    1.3285094        1e-10 1.5973236e-11    6.2604721    2.4560854    31.520363 -0.0027507729  -0.20663926 -0.013707621   0.17928732   -1.1017961   0.95170131 
  980000    4.0290704    1.2808371    2.7482333  -0.22894574   0.85393991   0.99408674   0.75703872   -1.2298232            1  -0.10436405  -0.38006432  -0.36360954   0.43058173  0.000591579  0.015808051 -0.028963301   -0.2605225  -0.24626498   0.71287965        0.075    1.3291583        1e-10 1.584177e-11    6.3124259    2.4431866    31.520363 -0.020414593  -0.20827361 0.0075532375   0.19759251  0.044976765    2.3350331 
  981000    4.0135971    1.2740487    2.7395485  -0.22905948   0.84941402    1.0082577   0.73957399   -1.2298232            1  -0.20123301  -0.46266933  -0.42285138   0.28182167 0.0015171252 -0.014347199 0.0099305183  -0.35378892  -0.34515678   0.71293404        0.075    1.3393512        1e-10 1.5842979e-11    6.3119444    2.4468894    31.520363 0.0050871381   -0.2004212 0.0016337862   0.21487233    1.2099648 -0.042679655 
  982000    4.0278765    1.2738772    2.7539993  -0.22780523   0.84929969    1.0108985   0.73755305   -1.2298232            1  -0.20925256  -0.41795113  -0.45539441   0.24558787 -0.011025117 -0.030425975 -0.049886567   -0.3613916  -0.35355328   0.70953574        0.075    1.3429076        1e-10 1.5767461e-11    6.3421753    2.4461749    31.520363 -0.0042360143  -0.19283661 -0.0053069269   0.18894389   0.96101006    3.3559381 
  983000    4.0354524     1.282258    2.7531944  -0.23166355   0.85488721   0.99688368   0.75670614   -1.2298232            1 -0.081562146  -0.38487321  -0.33360176   0.47378852 -0.0058220386  0.054216823 -0.020538816    -0.237652  -0.22386233   0.70926905        0.075    1.3406142        1e-10 1.5761534e-11      6.34456    2.4429339    31.520363 -0.010165736  -0.20663643  0.001346577   0.19127097   0.69312528    3.4134566 
  984000    4.0289501    1.2809939    2.7479561  -0.23096278   0.85404447    1.0024249   0.75144555   -1.2298232            1  -0.25029829  -0.45450183  -0.46025152   0.16385849 0.00087132915  0.089516249  0.029043421  -0.40530301  -0.39338945   0.71323636        0.075    1.3382404        1e-10 1.5849697e-11    6.3092689    2.4505777    31.520363 -5.5556708e-05  -0.21961277 0.0023765891   0.21474082  -0.33095739   -1.1096309 
  985000    4.0370939     1.291073    2.7460209  -0.22611876   0.86076423    1.0077052   0.75916206   -1.2298232            1  -0.19858304  -0.45865652  -0.41721773   0.28012514  0.017040785  0.057423575 -0.0055256802  -0.35517948  -0.34242794   0.71080294        0.075    1.3472993        1e-10 1.5795621e-11    6.3308686     2.437797    31.520363 0.0073353033  -0.17380105 -0.014093888   0.19907179   -1.0369949   0.31475471 
  986000     4.025148    1.2916081      2.73354  -0.22457785   0.86112097    1.0221088   0.74979823   -1.2298232            1  -0.20115829  -0.45154169  -0.44163863   0.28970546 -0.0054071156  0.015731413 -0.048168661  -0.35582321  -0.34705924   0.71283134        0.075    1.3488513        1e-10 1.5840696e-11    6.3128537     2.444294    31.520363 -0.0072378952    -0.204671 -0.0012352896   0.20048305  -0.24437552   -1.4672009 
  987000    4.0233073    1.2696464    2.7536609  -0.23434903   0.84647904   0.99721259     0.742251   -1.2298232            1 -0.032673742  -0.29804842  -0.29434287   0.49437006  0.013364682  0.040351334 -0.014758986  -0.18578185  -0.17502088   0.71375872        0.075    1.3476192        1e-10 1.5861305e-11    6.3046516    2.4417675    31.520363 0.00011720688  -0.22032543 0.0028549682    0.1662235   0.79535057    2.0133249 
  988000    4.0165695    1.2657902    2.7507793  -0.23214794   0.84390808   0.98880664   0.74371766   -1.2298232            1  -0.16176806  -0.43831508  -0.39857571    0.3515866 -0.0012178297  0.050975465 -0.052645764  -0.31517871  -0.30291529   0.71268413        0.075    1.3458926        1e-10 1.5837425e-11    6.3141577    2.4417281    31.520363 -0.011142874  -0.21505994 0.0077236297   0.19120868  -0.38890213    1.0688135 
  989000    4.0336997    1.2870128    2.7466869    -0.227529   0.85805728    1.0101091   0.75291808   -1.2298232            1 -0.083757684  -0.37011586  -0.33125935   0.45010215 0.0066842381 -0.031999161 -0.058444902  -0.23906615  -0.22794573   0.71610398        0.075    1.3368152        1e-10 1.5913422e-11    6.2840037    2.4486138    31.520363 -0.0060632482  -0.21018513 0.00062043292   0.19823062    1.3296972    1.5714297 
  990000    4.0293494    1.2666084    2.7627409  -0.22445655    0.8444536   0.97925838   0.75124826   -1.2298232            1  -0.29211303  -0.52339862  -0.48765603   0.13471556 -0.0055682215 -0.048531349 -0.016495923  -0.44707705  -0.43189729   0.71623293        0.075    1.3369513        1e-10 1.5916287e-11    6.2828722    2.4433795    31.520363 0.0044490179  -0.19247987 -0.006386931   0.19763602   0.16385216   -1.2966081 
  991000    4.0369423     1.292361    2.7445813  -0.23127517   0.86162293    1.0166099   0.75445292   -1.2298232            1  -0.12070155  -0.37766873   -0.3798004   0.39536449 -0.0048268767 -0.024201935 -0.004596101  -0.27632661  -0.26581756   0.72210184        0.075    1.3433994        1e-10 1.6046708e-11     6.231808     2.460138    31.520363 -0.0081709154   -0.1989436 0.0063514616    0.2193216    1.0986736    2.4596492 
  992000    4.0017312    1.2730232    2.7287081  -0.23401979   0.84873032    1.0004421   0.74382557   -1.2298232            1  -0.18739649  -0.43719487   -0.4549534    0.3299588 -0.031233998 -0.075997413 0.0037194298   -0.3408294  -0.33020462   0.71702502        0.075    1.3374065        1e-10 1.5933889e-11    6.2759316    2.4418743    31.520363 0.0066096564  -0.19773829 -0.00078150574    0.2109869 -0.064592605    2.3591785 
  993000    4.0073744     1.263816    2.7435584   -0.2323719   0.84259189    0.9995096   0.73408395   -1.2298232            1  -0.21156025  -0.45222819  -0.46819521   0.28574264 -0.0030925213 -0.0077182229 -0.026403346   -0.3629837  -0.35423528   0.71699958        0.075    1.3413438        1e-10 1.5933324e-11    6.2761543    2.4412381    31.520363  0.011831298  -0.20751156 0.0015886877   0.20868656    1.2533979    1.9933388 
  994000    4.0305705    1.2891389    2.7414316  -0.23201857   0.85947479    1.0121491   0.75390497   -1.2298232            1  -0.14441756   -0.4096132  -0.37075858    0.3471191 -0.0046122882 -0.0014083571  0.020133685   -0.2999296  -0.28889681   0.71536435        0.075    1.3455976        1e-10 1.5896986e-11    6.2905007    2.4424696    31.520363 -0.0060798636  -0.19728933 -0.0019318811   0.20489482  -0.62928399     3.479772 
  995000    4.0023895    1.2678059    2.7345835  -0.23031053   0.84525196     0.987386   0.74697477   -1.2298232            1  -0.21177284  -0.44141699  -0.44561419   0.25171265 -0.0098606953  0.016683055  -0.01417733  -0.36585535  -0.35271728   0.71519407        0.075    1.3484325        1e-10 1.5893202e-11    6.2919985    2.4468248    31.520363   0.01462797  -0.19889378 -0.0022458812   0.20138984   -1.3049778   0.40299473 
  996000    4.0393827    1.2848746    2.7545081  -0.23144061    0.8566317    1.0136061   0.74808586   -1.2298232            1  -0.20426217  -0.45480091  -0.48296058   0.32497498 -0.019721324  0.026020021  0.027137171  -0.35857387   -0.3489494   0.71636369        0.075    1.3479038        1e-10 1.5919193e-11    6.2817254    2.4532638    31.520363 -0.010823825  -0.22708238 -0.012627439   0.20523166  -0.85637645    1.8708731 
  997000    4.0208282    1.2839202     2.736908  -0.22826243   0.85599544    1.0194805   0.74294408   -1.2298232            1  -0.11696632   -0.3858528  -0.36594355    0.4008974 -0.00093962094  0.064583482 -0.0046351293  -0.27021739  -0.26249209   0.71644776        0.075    1.3426516        1e-10 1.5921061e-11    6.2809883    2.4511772    31.520363 -0.003848232  -0.19348845 0.0059317285   0.18738237   -0.3696586    1.0609145 
  998000     4.037974    1.2868686    2.7511054  -0.23651482   0.85796113    1.0036104   0.75725259   -1.2298232            1 -0.089625144   -0.3700659  -0.34536194    0.4465524 -0.0078830923 -0.019647504 -0.048091309  -0.24582771  -0.23288553   0.71636893        0.075    1.3469251        1e-10 1.5919309e-11    6.2816795    2.4437191    31.520363 -0.0091033973  -0.20015137 0.0050633716    0.2094545 -0.0068982544    0.7989581 
  999000    4.0234466    1.2838237    2.7396229   -0.2294734   0.85593108    1.0016169   0.75519706   -1.2298232            1  -0.22523406  -0.46381967   -0.4426015   0.23071898  -0.01562092 -0.0076311567 -0.0059540191  -0.38101263  -0.36820989   0.71910719        0.075    1.3550487        1e-10 1.598016e-11    6.2577597    2.4574124    31.520363 -0.012610877   -0.1929406 -0.0023058704   0.19071646   -1.4826109   -0.4871775 
 1000000    4.0340841    1.2850135    2.7490706  -0.22815887   0.85672434   0.99513335   0.76102601   -1.2298232            1 -0.025738066   -0.3206839   -0.2606307   0.50410041 0.0056898591 -0.019416885 -0.017979184    -0.182719   -0.1677884   0.71830253        0.075    1.3526614        1e-10 1.5962278e-11    6.2647698    2.4434847    31.520363 0.0028919315  -0.20264662 -0.00023586605   0.21910932  -0.17313847    1.5029131 
Loop time of 1976.55 on 1 procs for 700000 steps with 17604 atoms

Performance: 152993.906 tau/day, 354.153 timesteps/s
99.6% CPU use with 1 MPI tasks x 1 OpenMP threads

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 230.27     | 230.27     | 230.27     |   0.0 | 11.65
Bond    | 423.73     | 423.73     | 423.73     |   0.0 | 21.44
Neigh   | 605.84     | 605.84     | 605.84     |   0.0 | 30.65
Comm    | 32.538     | 32.538     | 32.538     |   0.0 |  1.65
Output  | 1.9698     | 1.9698     | 1.9698     |   0.0 |  0.10
Modify  | 644.39     | 644.39     | 644.39     |   0.0 | 32.60
Other   |            | 37.82      |            |       |  1.91

Nlocal:    17604 ave 17604 max 17604 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Nghost:    2791 ave 2791 max 2791 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Neighs:    30302 ave 30302 max 30302 min
Histogram: 1 0 0 0 0 0 0 0 0 0

Total # of neighbors = 30302
Ave neighs/atom = 1.72131
Ave special neighs/atom = 6.70302
Neighbor list builds = 93989
Dangerous builds = 0
#undump      comp

unfix abeads_cdz
unfix bbeads_cdz
unfix tbeads_cdz

###############
# Shearing    #
###############

#--- Keep only thermostat on walls ---#
unfix lang_melt

#variable    vtop equal (v_Wall_v/2)
#variable    vbot equal -(v_Wall_v/2)
velocity    twout set $(v_Wall_v/2) 0.0 0.0  units box
velocity    twout set 5.0000000000000001822e-11 0.0 0.0  units box
velocity    bwout set -$(v_Wall_v/2) 0.0 0.0  units box
velocity    bwout set -5.0000000000000001822e-11 0.0 0.0  units box


#--- Number Density profiles ---#

compute         sabeads abeads chunk/atom bin/1d z lower ${binres} units reduced # Check bound keyword to maybe only bin melt area
compute         sabeads abeads chunk/atom bin/1d z lower 0.001 units reduced 
fix             abeads_sdz abeads  ave/chunk ${Neverys} ${Nrepeats} ${Nfreqs} sabeads density/number file abeads_sdz
fix             abeads_sdz abeads  ave/chunk 100 ${Nrepeats} ${Nfreqs} sabeads density/number file abeads_sdz
fix             abeads_sdz abeads  ave/chunk 100 4000 ${Nfreqs} sabeads density/number file abeads_sdz
fix             abeads_sdz abeads  ave/chunk 100 4000 400000 sabeads density/number file abeads_sdz
compute         sbbeads bbeads chunk/atom bin/1d z lower ${binres} units reduced # Check bound keyword to maybe only bin melt area
compute         sbbeads bbeads chunk/atom bin/1d z lower 0.001 units reduced 
fix             bbeads_sdz bbeads  ave/chunk ${Neverys} ${Nrepeats} ${Nfreqs} sbbeads density/number file bbeads_sdz
fix             bbeads_sdz bbeads  ave/chunk 100 ${Nrepeats} ${Nfreqs} sbbeads density/number file bbeads_sdz
fix             bbeads_sdz bbeads  ave/chunk 100 4000 ${Nfreqs} sbbeads density/number file bbeads_sdz
fix             bbeads_sdz bbeads  ave/chunk 100 4000 400000 sbbeads density/number file bbeads_sdz
compute         stbeads tbeads chunk/atom bin/1d z lower ${binres} units reduced # Check bound keyword to maybe only bin melt area
compute         stbeads tbeads chunk/atom bin/1d z lower 0.001 units reduced 
fix             tbeads_sdz tbeads  ave/chunk ${Neverys} ${Nrepeats} ${Nfreqs} stbeads density/number file tbeads_sdz
fix             tbeads_sdz tbeads  ave/chunk 100 ${Nrepeats} ${Nfreqs} stbeads density/number file tbeads_sdz
fix             tbeads_sdz tbeads  ave/chunk 100 4000 ${Nfreqs} stbeads density/number file tbeads_sdz
fix             tbeads_sdz tbeads  ave/chunk 100 4000 400000 stbeads density/number file tbeads_sdz

#--- Temperature and Velocity profiles ---#
compute        eall all chunk/atom bin/1d z lower ${binres} units reduced
compute        eall all chunk/atom bin/1d z lower 0.001 units reduced
#compute        biasT all temp/profile 1 1 1 xyz 100 100 100
fix            temp_prof   all ave/chunk ${Neverys} ${Nrepeats} ${Nfreqs} eall temp file temp_sz
fix            temp_prof   all ave/chunk 100 ${Nrepeats} ${Nfreqs} eall temp file temp_sz
fix            temp_prof   all ave/chunk 100 4000 ${Nfreqs} eall temp file temp_sz
fix            temp_prof   all ave/chunk 100 4000 400000 eall temp file temp_sz
#fix            temp_bias   all ave/chunk ${Neverys} ${Nrepeats} ${Nfreqs} eall temp bias biasT file tempb_sz
fix            vel_prof_x_s all ave/chunk ${Neverys} ${Nrepeats} ${Nfreqs} eall vx vy file velp_sz
fix            vel_prof_x_s all ave/chunk 100 ${Nrepeats} ${Nfreqs} eall vx vy file velp_sz
fix            vel_prof_x_s all ave/chunk 100 4000 ${Nfreqs} eall vx vy file velp_sz
fix            vel_prof_x_s all ave/chunk 100 4000 400000 eall vx vy file velp_sz
#--- Ave s_bot and p_bot ---#

fix             fc_ave all ave/time ${Neverys} ${Nrepeats} ${Nfreqs} v_sbot v_pbot file fc_ave.dump
fix             fc_ave all ave/time 100 ${Nrepeats} ${Nfreqs} v_sbot v_pbot file fc_ave.dump
fix             fc_ave all ave/time 100 4000 ${Nfreqs} v_sbot v_pbot file fc_ave.dump
fix             fc_ave all ave/time 100 4000 400000 v_sbot v_pbot file fc_ave.dump

#--- Dumps ---#
#dump           shear all image ${Ndump_s} stg3.*.jpg type type zoom 2 view 60 120 bond none none

#--- Run Shear ---#
timestep    ${Tstep}
timestep    0.005
run         ${Nshear}
run         4000000
WARNING: Inconsistent image flags (src/domain.cpp:784)
Per MPI rank memory allocation (min/avg/max) = 19.37 | 19.37 | 19.37 Mbytes
Step TotEng KinEng PotEng E_pair Temp c_melTemp c_wallTemp v_Fcatom v_Pcomp2 Press Pxx Pyy Pzz Pxy Pxz Pyz c_melPress c_wallPress v_melDens v_surfcov v_aveRg v_Wall_v2 v_srate v_D v_bwzmax Zhi c_fbwall[1] c_fbwall[3] c_ftwall[1] c_ftwall[3] v_sbot v_pbot 
 1000000    4.0340054    1.2849348    2.7490706  -0.22815887   0.85667186   0.99513335    0.7609372   -1.2298232            1 -0.025756384   -0.3206839   -0.2606307   0.50404546 0.0056898591 -0.019416885 -0.017979184    -0.182719  -0.16780672   0.71830253        0.075    1.3526614        1e-10 1.5962278e-11    6.2647698    2.4434847    31.520363 0.0028919315  -0.20264662 -0.00023586605   0.21910932  -0.17313847    1.5029131 
 1001000    4.0324132     1.273333    2.7590802  -0.22964375   0.84893686   0.97579516   0.76123101   -1.2298232            1 -0.085237423  -0.33704886  -0.35919392   0.44053051 0.0045413369  0.010585768 0.00066995787  -0.24226064  -0.22452733   0.71418083        0.075    1.3530983        1e-10 1.5870685e-11    6.3009252    2.4410555    31.520363  0.019362788  -0.22293618 -0.0056148607   0.19215827  -0.40188047    2.3157262 
 1002000    4.0174867    1.2838616    2.7336251  -0.23655634   0.85595635   0.99515951   0.75970839   -1.2298232            1  -0.26433665  -0.49489722  -0.51961459   0.22150188 -0.0060153084 -0.013568138 0.0020846705  -0.42104579  -0.40639071   0.71560056        0.075    1.3515537        1e-10 1.5902235e-11    6.2884243    2.4389969    31.520363 0.00074303036   -0.2188808 -0.0044157053   0.19973802  0.005906323  -0.52807357 
 1003000     4.011885    1.2789977    2.7328872  -0.23100855    0.8527136    1.0026868   0.74901233   -1.2298232            1 -0.025467903  -0.30273493  -0.31479957   0.54113079 -0.00083563156 -0.016806434  0.015701308  -0.17997071  -0.16859645   0.71773912        0.075    1.3532154        1e-10 1.5949758e-11    6.2696875    2.4375078    31.520363 0.0054167258  -0.19481048 0.0034768443   0.19225248    1.1557384    3.0774903 
 1004000    4.0135976    1.2671375      2.74646  -0.23209803   0.84480635   0.99143589   0.74341817   -1.2298232            1  -0.19711548  -0.42325689  -0.45242615   0.28433658 -0.011915245 -0.0028423515 -0.0088536326  -0.35046435  -0.33863802   0.71715319        0.075    1.3428176        1e-10 1.5936737e-11      6.27481    2.4412515    31.520363 -0.003141357  -0.20861626 -0.0032757926   0.18566706  -0.96911309 0.0096270628 
 1005000    4.0199141    1.2796262    2.7402878  -0.23185785   0.85313261    0.9904898   0.75816181   -1.2298232            1 -0.076117754  -0.34892054  -0.34374392    0.4643112 -0.00092395397  0.041928386  0.023175905  -0.23250787  -0.21750525   0.71606278        0.075    1.3501335        1e-10 1.5912506e-11    6.2843652    2.4427425    31.520363 -0.0033847745  -0.18932555 0.0052517535   0.21059126  0.058658576  -0.98978962 
 1006000    3.9980965    1.2718801    2.7262164  -0.22879085   0.84796826   0.99276952   0.74784557   -1.2298232            1 -0.087815405  -0.32228912  -0.38864045   0.44748336 -0.0051190681   0.02412387  0.041862941  -0.24207754  -0.22952831   0.71543422        0.075    1.3552261        1e-10 1.5898538e-11    6.2898865    2.4389105    31.520363 0.0026598235  -0.16336778 -0.0010361616   0.21742502   -1.1538704    3.5893652 
 1007000    4.0025164    1.2655033     2.737013  -0.23217462   0.84371683   0.99739642   0.73744982   -1.2298232            1  -0.08627771   -0.3384687  -0.34572678   0.42536235 0.0060057848  0.051465842  0.084541544  -0.23839545  -0.22865109   0.71727277        0.075    1.3485239        1e-10 1.5939395e-11    6.2737639    2.4497567    31.520363 0.0041644678  -0.20453654  0.010734488   0.17936614   0.39347663    1.4963671 
 1008000    4.0249329    1.2813073    2.7436255   -0.2274675   0.85425342     1.003303   0.75119146   -1.2298232            1   -0.1575293  -0.41840601  -0.40899892   0.35481705 0.00025321458 -0.022695609 0.0021771784   -0.3124816  -0.30074581   0.71664267        0.075    1.3628777        1e-10 1.5925393e-11      6.27928    2.4435022    31.520363 -0.013296531  -0.21126615 -0.0012474669   0.18051826  -0.41571071   0.50657906 
 1009000    4.0248492    1.2811765    2.7436727  -0.22809119   0.85416617   0.98535155   0.76346643   -1.2298232            1  -0.17679666  -0.43044446   -0.4464247   0.34647918 0.0011138891   0.11758157 0.00051274591  -0.33428099  -0.31745069   0.71087896        0.075    1.3563638        1e-10 1.579731e-11    6.3301916    2.4314756    31.520363 -0.0053910112  -0.20895745 0.0012019278   0.19659781  -0.91715175    4.2678239 
 1010000     4.020634    1.2810919    2.7395421  -0.22132052    0.8541098    1.0020541   0.75181268   -1.2298232            1  -0.23725476   -0.4893097  -0.47713711   0.25468253 -0.023234205  0.030574361 -0.0094794792  -0.39233521    -0.380293   0.71532474        0.075    1.3361905        1e-10 1.5896105e-11    6.2908491    2.4502379    31.520363 -0.011078012  -0.20286489  -0.01059994   0.22630187   -1.2529742   -0.8503309 
 1011000    4.0214205    1.2797292    2.7416913  -0.23032303   0.85320126    1.0044513   0.74861646   -1.2298232            1  -0.14713719  -0.38376926   -0.4104649   0.35282258 -0.0062597639 -0.0051443324 -0.078292432  -0.30155834  -0.29051761    0.7195912        0.075    1.3407734        1e-10 1.5990916e-11    6.2535506    2.4381861    31.520363 -0.00083542548  -0.17769778 0.0063563972   0.20358597   0.96083871   0.60933177 
 1012000     4.022705     1.283002    2.7397031  -0.23547133   0.85538323    1.0086602   0.74939594   -1.2298232            1  -0.15193819  -0.39363531  -0.40257156   0.34039231 -0.0056204381  0.030360695  0.009680995  -0.30652012  -0.29591942   0.71701531        0.075    1.3313605        1e-10 1.5933674e-11    6.2760166    2.4414612    31.520363 0.0067411759  -0.18713913  0.006066905   0.20758789  -0.30670074   0.66110424 
 1013000    4.0337492    1.2871588    2.7465904  -0.23118655    0.8581546    1.0043764   0.75704989   -1.2298232            1   -0.1071848  -0.35859926  -0.38042588   0.41747075 -0.013869627   0.11372803 -0.020973673  -0.26334556  -0.25055453   0.70812754        0.075    1.3341769        1e-10 1.5736168e-11    6.3547874    2.4390607    31.520363 -0.0042603843  -0.17263182 -0.0045305973   0.20190882  -0.95531555     1.400794 
 1014000    4.0396008    1.2870495    2.7525513  -0.23411604   0.85808173   0.99816589    0.7612243   -1.2298232            1 -0.089450968  -0.39139789  -0.32259189   0.44563688 -0.014195272  0.048418513 -0.035249408   -0.2464728  -0.23193418   0.71074795        0.075    1.3393616        1e-10 1.5794399e-11    6.3313584     2.454416    31.520363 0.00033533053  -0.19368575 -0.0023386579   0.20766313  -0.85060127    1.6225686 
 1015000     4.039718    1.2898502    2.7498678   -0.2329875   0.85994899    1.0204155   0.74898691   -1.2298232            1  -0.25856012  -0.48681135  -0.51457766   0.22570866 -0.0075793795  0.030264611 -0.0033098309  -0.41305768  -0.40421936   0.71628428        0.075    1.3281802        1e-10 1.5917429e-11    6.2824218    2.4537212    31.520363 0.0037640617  -0.19785571  0.006727729   0.19365915   0.31418856   0.67120345 
 1016000    4.0480267    1.2956947    2.7523319  -0.22339239   0.86384555    0.9981944   0.77095758   -1.2298232            1  -0.10675052  -0.38979156  -0.30819808   0.37773808 -0.0036185409 -0.012069344 -0.023051978  -0.26578009  -0.24923781   0.71318913        0.075    1.3233292        1e-10 1.5848647e-11    6.3096867    2.4338008    31.520363 0.00046477564  -0.20673119 -0.0012395007   0.20599642   0.82077789   0.84233881 
 1017000    4.0522939    1.2928213    2.7594726  -0.22387767   0.86192983     1.011657   0.75839973   -1.2298232            1 -0.078914555  -0.36826066   -0.3363342    0.4678512 -0.0071355857  0.014916881 -0.013857687  -0.23535375  -0.22332355   0.71072461        0.075    1.3305406        1e-10 1.579388e-11    6.3315663    2.4515542    31.520363  0.010122352  -0.18303321 0.00051102406   0.20608733  -0.10500038   0.17312961 
 1018000    4.0376973    1.2816776    2.7560197  -0.22203208   0.85450026    1.0164505   0.74251092   -1.2298232            1  -0.13996748  -0.40814888  -0.37053812   0.35878456  -0.01822499  0.054261327 -0.034749795   -0.2931292  -0.28506073    0.7139723        0.075      1.33641        1e-10 1.5866051e-11    6.3027655    2.4467496    31.520363 0.0039394428  -0.20615483  0.010715064   0.21380886  -0.92572814    1.6865852 
 1019000    4.0683274    1.3003413    2.7679861  -0.23442076   0.86694345    1.0157261   0.76406738   -1.2298232            1  -0.16179493  -0.41331875  -0.40754259   0.33547656  0.002959688  0.011090424 0.0018178372  -0.31940322  -0.30678478   0.71821284        0.075    1.3246483        1e-10 1.5960285e-11    6.2655522    2.4335291    31.520363 -0.0099644125  -0.22020304 -0.0011596701   0.19536503    1.0225927   0.93093463 
 1020000    4.0323423    1.2851332    2.7472091   -0.2403097   0.85680411    1.0019847   0.75641979   -1.2298232            1   -0.1627184  -0.41131852  -0.41419031   0.33735362 0.0011487641   0.03981525  0.024225503  -0.31874919  -0.30574673   0.71191344        0.075    1.3494845        1e-10 1.5820299e-11    6.3209931    2.4451247    31.520363 -0.0063003534  -0.18898158 -0.0056311857   0.19645873  -0.28081405   0.27199105 
 1021000    4.0088088    1.2739474    2.7348614  -0.22901267   0.84934649     1.004466   0.74208359   -1.2298232            1  -0.23044725  -0.48444302  -0.44097184   0.23407312 0.0083207573 -0.021702763 -0.058319466  -0.38352082  -0.37382977   0.70742503        0.075    1.3550276        1e-10 1.5720556e-11     6.361098    2.4397738    31.520363 0.00072540028  -0.18193703  0.005573289   0.21674443   0.46279183   -1.8867082 
 1022000    4.0246149    1.2852226    2.7393923  -0.23408688   0.85686375    1.0116659   0.74982116   -1.2298232            1 -0.095223289  -0.34892283  -0.36774635   0.43099932 -0.0013179347 0.0086772142 -0.012076864  -0.24989294  -0.23963357   0.71393598        0.075    1.3623083        1e-10 1.5865244e-11    6.3030862    2.4476913    31.520363 0.0061333922  -0.20989051 0.0030042665    0.1934402   0.81018243  -0.15349916 
 1023000    4.0270048    1.2825174    2.7444874  -0.23053401   0.85506015    1.0090391   0.74858708   -1.2298232            1 -0.0092961104  -0.30202002  -0.29396847   0.56810017 0.0061792815 -0.092928911  -0.03814312   -0.1637112  -0.15333142   0.72199102        0.075    1.3660884        1e-10 1.6044245e-11    6.2327645    2.4461681    31.520363 -0.0035667556  -0.20100553 -0.0035834955   0.19374312    1.1317088    1.8948819 
 1024000    4.0243589    1.2785494    2.7458095  -0.23246052    0.8524147    1.0131537   0.74126331   -1.2298232            1  -0.21583182  -0.46020233  -0.44774216   0.26044902 0.0068842706 -0.028808743  0.012533137   -0.3687362  -0.36045448   0.71960159        0.075    1.3729181        1e-10 1.5991147e-11    6.2534603    2.4459313    31.520363  0.008603371  -0.20654309 0.0011706065   0.17271278   0.23949956     1.789375 
 1025000    4.0105298    1.2859889    2.7245409  -0.23342995   0.85737462    1.0076553   0.75346103   -1.2298232            1  -0.20183831  -0.43015385  -0.44275276   0.26739168 -0.0051504257    -0.113526  0.062053426  -0.35725878  -0.34567609   0.71412965        0.075    1.3688513        1e-10 1.5869548e-11    6.3013768    2.4506434    31.520363 0.00091731468  -0.19378432 -0.003255867   0.19007619  -0.70483039  -0.60889616 
 1026000    4.0201875    1.2919115     2.728276  -0.23181775   0.86132325    1.0149427   0.75509956   -1.2298232            1  -0.13476682   -0.3747992   -0.3955162   0.36601492 0.0048570196  0.013793804 -0.045838769  -0.29052528  -0.27964484   0.71483475        0.075    1.3604428        1e-10 1.5885217e-11    6.2951612    2.4396154    31.520363 -0.0021811079  -0.18139382 0.00037795806   0.19995922    1.4026998    1.0126812 
 1027000    4.0432061    1.2999589    2.7432472   -0.2261183   0.86668851     1.017722   0.76225482   -1.2298232            1  -0.17329054  -0.41696699  -0.44104894   0.33814432 0.0064991842 -0.033013226  0.026424331  -0.33052494  -0.31856529   0.71944362        0.075    1.3727317        1e-10 1.5987636e-11    6.2548334     2.439579    31.520363 0.0040104351  -0.20248387 -0.0043908298    0.1640676   0.12699303    1.3304053 
 1028000    4.0393233    1.2984371    2.7408862  -0.23051147   0.86567393    1.0114243   0.76489613   -1.2298232            1  -0.19547836  -0.42387133  -0.44166843   0.27910468  0.020736047  -0.02395671  0.064188218   -0.3532576  -0.33985415   0.71903483        0.075    1.3822178        1e-10 1.5978552e-11    6.2583894    2.4465071    31.520363 -0.011036712    -0.165788 -0.0014097807   0.17137311   0.33459275   0.19902693 
 1029000    4.0333848    1.2784927     2.754892  -0.23037616   0.85237689    0.9950988   0.75369356   -1.2298232            1  -0.21130395  -0.45605217   -0.4787099    0.3008502 0.0027290716 -0.016336536 -0.013012897  -0.36677238  -0.35334936   0.71240808        0.075    1.3873664        1e-10 1.5831291e-11    6.3166044    2.4353575    31.520363 0.0019260096  -0.21708564 0.00033155084   0.19445523  -0.19377897   0.63217326 
 1030000    4.0242241    1.2706803    2.7535438  -0.22742313   0.84716836    1.0062179    0.7371856   -1.2298232            1   -0.2124235  -0.47568134  -0.45476033   0.29317119  0.010970341 -0.044922008 0.0048251027  -0.36448674   -0.3560561   0.71125806        0.075    1.3813157        1e-10 1.5805735e-11    6.3268176     2.445481    31.520363 -0.0008355376  -0.19697864 0.0057714428   0.20952614   0.38245602  -0.78580549 
 1031000    4.0431029    1.2826996    2.7604032  -0.22268493   0.85518167    1.0105681   0.74773464   -1.2298232            1   -0.1108705  -0.33232175  -0.41005747   0.40976773 0.0047712496  0.064610278 -0.065100796  -0.26510975  -0.25512406     0.714415        0.075    1.3851489        1e-10 1.5875889e-11    6.2988599    2.4353528    31.520363 -0.00026303753  -0.19662484 0.0020461214   0.20098016  -0.28497474  -0.01576927 
 1032000    4.0390185    1.2896394    2.7493791   -0.2371987   0.85980847    1.0104001   0.75567994   -1.2298232            1  -0.21516605  -0.45633576  -0.48204328   0.29288087  0.016921806  0.008823094 -0.0066082865  -0.37104423  -0.35939564    0.7140148        0.075    1.3709238        1e-10 1.5866996e-11    6.3023904    2.4368839    31.520363 -0.0024757718    -0.206403  0.012844162   0.19374547  0.033754815  -0.81709968 
 1033000     4.037775    1.2864924    2.7512826  -0.22995666   0.85771029    1.0117355    0.7512055   -1.2298232            1  -0.10334875  -0.37543568  -0.37611979   0.44150923 0.0024808375  -0.03977485 -0.0013003954  -0.25830395  -0.24776895   0.71348306        0.075    1.3639324        1e-10 1.5855179e-11    6.3070874    2.4495224    31.520363 0.0029668992  -0.21510444  -0.01633644   0.18826468   0.92591696    1.7159229 
 1034000    4.0268069    1.2887484    2.7380585  -0.22915233   0.85921438    1.0166313   0.75036258   -1.2298232            1 -0.081965764  -0.34941291  -0.36513257   0.46864819  0.011433293 -0.011657932   0.02889295  -0.23674709  -0.22708483   0.71737781        0.075    1.3682981        1e-10 1.5941729e-11    6.2728453    2.4601868    31.520363 0.0088698896   -0.1965605 0.0031054369   0.21934668    0.9505179 -0.035554866 
 1035000    4.0583315    1.2976577    2.7606738  -0.23214508   0.86515427    1.0149961   0.76154512   -1.2298232            1  -0.07784783  -0.33090804  -0.36974584   0.46711039 0.00069666797 -0.0058480269 -0.058985446  -0.23493584  -0.22273347   0.71310742        0.075    1.3588025        1e-10 1.5846832e-11    6.3104097    2.4401428    31.520363 0.0011853997  -0.20540108 -0.0098823482   0.21375988  -0.84833188   -0.1271145 
 1036000    4.0595033     1.289503    2.7700003  -0.22747164   0.85971749    1.0155896   0.75193474   -1.2298232            1  -0.24232029  -0.48519202  -0.47653541   0.23476657 0.00034468324  0.033219179  0.025298633  -0.39742591  -0.38729065    0.7163174        0.075    1.3650366        1e-10 1.5918164e-11    6.2821313    2.4552179    31.520363 7.5387694e-05  -0.18959934 -0.0099667823   0.22539408  0.065264229  -0.26148514 
 1037000    4.0575816    1.2977417    2.7598398  -0.23535443   0.86521031    1.0157248   0.76113563   -1.2298232            1  -0.23985161  -0.47745733   -0.4777188    0.2356213 -0.0043645268  0.021247927 -0.017134978  -0.39685515  -0.38484128   0.71551597        0.075    1.3545186        1e-10 1.5900355e-11    6.2891678    2.4490373    31.520363 -2.641507e-05  -0.18775844 -0.0083921695   0.20271501   0.86559716   -1.0267581 
 1038000    4.0361599    1.2788905    2.7572693  -0.22697076   0.85264213    1.0044242   0.74768909   -1.2298232            1  -0.16581957  -0.43732307  -0.39878202   0.33864637 0.0049235174   0.10827803  0.065877696  -0.32004943  -0.30919613   0.71282628        0.075     1.351351        1e-10 1.5840584e-11    6.3128986    2.4425445    31.520363 0.0043771047  -0.23925908 0.0018376914    0.1988178  -0.82857641    1.6299133 
 1039000    4.0389772    1.2744803     2.764497  -0.23084406   0.84970178   0.99389148   0.75000246   -1.2298232            1  -0.14400686  -0.40160279  -0.44172114   0.41130336 0.0022590491 -0.061995839   0.01600622   -0.2987139  -0.28587992   0.71709601        0.075     1.346508        1e-10 1.5935467e-11    6.2753103    2.4469216    31.520363 0.0013514983  -0.19592556 -0.013667246   0.19463852   -0.9893538   0.66881914 
 1040000    4.0333605    1.2823475    2.7510131  -0.22845109   0.85494687    1.0100385   0.74770376   -1.2298232            1      -0.1252  -0.35611105  -0.38174955    0.3622606  0.010798308  -0.12398664 -0.055540551  -0.27943288  -0.26937798   0.71771732        0.075    1.3626605        1e-10 1.5949274e-11    6.2698779    2.4448353    31.520363 -0.0058865828  -0.20006126 -0.0095854791   0.20382874  -0.08790965    0.8955641 
 1041000    4.0332531    1.2763887    2.7568645   -0.2258985   0.85097411    1.0116318   0.73987885   -1.2298232            1  -0.18184893  -0.44462158  -0.42069563   0.31977041 -0.0013795756  -0.04175031  0.025414746  -0.33446773  -0.32625434   0.71657232        0.075    1.3693624        1e-10 1.5923829e-11    6.2798965    2.4479406    31.520363 0.0057018267  -0.20053729 0.00010414505   0.20450316  -0.18831151   0.90455596 
 1042000    4.0333526    1.2871423    2.7462103   -0.2285183   0.85814362    1.0062148   0.75575909   -1.2298232            1  -0.21954175  -0.45535782  -0.44673441   0.24346698 -0.012778814 0.0082813234 -0.040019582  -0.37543625  -0.36317391   0.71303884        0.075    1.3980017        1e-10 1.5845308e-11    6.3110167    2.4421137    31.520363 -0.0037564785  -0.19650895 0.0092125078   0.19449166   0.83118265   0.64424789 
 1043000    4.0460993    1.3061414     2.739958  -0.23148623   0.87081038    1.0249877   0.76420153   -1.2298232            1  -0.12030462  -0.37753426  -0.35819459   0.37481498 -0.020118744   0.05669137  0.034903756  -0.27794059  -0.26661652    0.7135378        0.075    1.3985546        1e-10 1.5856395e-11    6.3066036    2.4518969    31.520363 -0.0044753924  -0.21222865 -0.013767245   0.21338843   -1.4790989  -0.75221857 
 1044000    4.0343248    1.2782618     2.756063  -0.22079596   0.85222293    1.0004452   0.74973327   -1.2298232            1 -0.091026681    -0.379773  -0.36368196   0.47037492  0.020549617  0.066886609  -0.04415997   -0.2456782  -0.23383525   0.71461858        0.075    1.4128031        1e-10 1.5880413e-11    6.2970655    2.4493046    31.520363  0.012196954  -0.19725548 -0.0009232522   0.20307201  -0.72667883    1.3296273 
 1045000    4.0464756    1.2817499    2.7647257  -0.23237485   0.85454847    1.0091868   0.74761901   -1.2298232            1 -0.058413608  -0.32330795  -0.35658058   0.50464771  -0.01778387  0.001652176 -0.015170641  -0.21262901  -0.20247001   0.71832367        0.075    1.4073906        1e-10 1.5962748e-11    6.2645854    2.4554003    31.520363 -0.0042193509  -0.18425929 -0.004019337   0.19799047   -1.4412349    1.8806059 
 1046000     4.034706    1.2839235    2.7507826  -0.22415072    0.8559976    1.0157459   0.74553212   -1.2298232            1  -0.24697929  -0.47593475  -0.45785514   0.19285201  0.019822436 -0.067900285 -0.035321862  -0.40076422  -0.39197197   0.71503017        0.075    1.4051236        1e-10 1.5889559e-11    6.2934408    2.4466612    31.520363 0.0018204997  -0.20924706 0.0036266835   0.20581603    1.4300578  -0.71998007 
 1047000    4.0266078    1.2821149     2.744493  -0.22630681   0.85479181    1.0056522    0.7504768   -1.2298232            1  -0.20926851  -0.43389343  -0.48950215   0.29559006   -0.0174539   0.10859844 -0.027930153   -0.3640734  -0.35282035   0.71344427        0.075     1.406648        1e-10 1.5854317e-11    6.3074303     2.456265    31.520363 -0.0084225843  -0.18165455  0.011560785   0.20508875  -0.71623579  -0.53049683 
 1048000    4.0195884    1.2739371    2.7456514  -0.22718398   0.84933963   0.99957266   0.74545823   -1.2298232            1  -0.14732742  -0.40303919  -0.40407084   0.36512778 -0.010342054  0.031321213 -0.019600294   -0.3010971  -0.29001144   0.71733366        0.075    1.4069529        1e-10 1.5940748e-11    6.2732313    2.4443368    31.520363 -0.0047620998  -0.19336935 0.00075435282   0.19437971  0.078835162   -1.3148102 
 1049000    4.0055128    1.2652109    2.7403019  -0.23431557   0.84352182   0.99907985   0.73595489   -1.2298232            1 -0.065457109  -0.33113834   -0.3191544   0.45392141 0.0051091216 -0.028584344 0.00022706711  -0.21726649  -0.20807079   0.71893339        0.075    1.4066017        1e-10 1.5976297e-11    6.2592725    2.4399076    31.520363 -0.0075775306  -0.20147109 0.0026350386   0.18708568   -1.2695783   0.27386735 
 1050000    4.0240473    1.2870129    2.7370344  -0.23659778   0.85805733    1.0019884   0.75853777   -1.2298232            1  -0.25905544  -0.47326952  -0.49913192   0.19523511  0.002247449  -0.11563746 -0.0093865803  -0.41552311  -0.40208431   0.71640287        0.075    1.4055229        1e-10 1.5920064e-11    6.2813819    2.4395164    31.520363 0.0076251168  -0.18969294  -0.00294822   0.18881913  -0.70274859     2.343933 
 1051000    4.0175267    1.2648581    2.7526686  -0.23322152   0.84328666   0.99574319   0.73786598   -1.2298232            1  -0.14785158  -0.39350573  -0.43995436   0.38990535 -0.0017665594   0.14071369 0.0097526904  -0.30005517  -0.28998896   0.71392907        0.075    1.4115902        1e-10 1.586509e-11    6.3031472    2.4453595    31.520363 -0.00094655417  -0.20853029 -0.0030190151   0.18021737   0.34915797   0.38113442 
 1052000    4.0416585    1.2778462    2.7638124  -0.22964464   0.85194584    1.0036976   0.74701372   -1.2298232            1  -0.20996821  -0.45033655  -0.44339845   0.26383037 -0.0088033221  0.074371369 -0.0010410214  -0.36405875  -0.35324104   0.71167553        0.075    1.4025428        1e-10 1.5815012e-11    6.3231063    2.4407195    31.520363 -0.0065359023  -0.17093258 0.0016876739   0.19854045    1.5687889    2.0192854 
 1053000    4.0322729    1.2893402    2.7429327  -0.23204663   0.85960896    1.0053002   0.75887153   -1.2298232            1  -0.24699736   -0.4888326  -0.47107329   0.21891381 -0.0025361762 -0.094416716  0.022228947  -0.40353388  -0.39049896   0.71579859        0.075    1.3965316        1e-10 1.5906635e-11    6.2866846    2.4453327    31.520363 0.0037382462  -0.22511485 -0.00057789651   0.19063563  -0.22917057   -1.5752517 
 1054000    4.0366373     1.289042    2.7475952  -0.22819252   0.85941017    1.0026526   0.76036731   -1.2298232            1  -0.23126452  -0.46180063   -0.4281328   0.19613988 0.0067176341  -0.10837772 -0.023744457  -0.38810957  -0.37438819   0.71847464        0.075    1.3884669        1e-10 1.5966103e-11    6.2632691    2.4395002    31.520363 -0.0025172934  -0.19964801 -0.0060698955   0.18183493   -0.6626454   0.64543597 
 1055000    4.0222646    1.2817856     2.740479   -0.2288769   0.85457227     1.002761   0.75210604   -1.2298232            1  -0.19397341  -0.44048052  -0.45067602   0.30923631  0.017611827 -0.016664326 -0.033559667  -0.34911437  -0.33711255   0.71159639        0.075    1.3960132        1e-10 1.5813253e-11    6.3238095    2.4477383    31.520363 -0.0032340613  -0.20135078 -0.011293903    0.2048046  -0.66646065   0.87970761 
 1056000    4.0176006    1.2792441    2.7383565  -0.22943948   0.85287782    1.0011896   0.75032626   -1.2298232            1  -0.13417133  -0.39043763  -0.38450542   0.37242905 -0.0035812291  -0.01720207  0.038499681  -0.28894517  -0.27708617   0.71048831        0.075    1.3916806        1e-10 1.5788629e-11    6.3336721    2.4515429    31.520363 -0.0026907726  -0.18509889 -0.0076412585   0.20022872    2.2492945    1.3183075 
 1057000    3.9987266    1.2662153    2.7325113  -0.23829152   0.84419149   0.99173228   0.74217266   -1.2298232            1  -0.25154826   -0.4778924  -0.48007772   0.20332535 -0.010282492 -0.066905605  0.077410656  -0.40464021  -0.39311311   0.71627708        0.075    1.4023243        1e-10 1.5917268e-11     6.282485    2.4498569    31.520363 -0.0014648153  -0.22379284 -0.0059587293   0.20495025    1.0166343    2.2938852 
 1058000    4.0246238    1.2831272    2.7414966  -0.23049209   0.85546672    1.0092607   0.74912168   -1.2298232            1  -0.16949943  -0.44010195  -0.38399984   0.31560351 -0.016559978 -0.064920639 0.0089753899  -0.32402479  -0.31356637   0.72411977        0.075    1.3908104        1e-10 1.609155e-11    6.2144416     2.449725    31.520363 -0.00093174224  -0.20955425 0.0038009382   0.19264557   0.92552205  -0.66139965 
 1059000    4.0191949     1.287692    2.7315029  -0.23614131    0.8585101    1.0008703   0.76007763   -1.2298232            1  -0.14372755  -0.42381353  -0.37149424   0.36412512 -0.006437558 0.0045150767 -0.0036775073  -0.30051285  -0.28659681   0.71796578        0.075    1.3936002        1e-10 1.5954795e-11    6.2677082    2.4452751    31.520363 0.0027561248  -0.20717707 0.0035284609   0.18702833   -1.0995044    1.9140621 
 1060000    4.0228889    1.2671118     2.755777  -0.23095693    0.8447892   0.99038241   0.74411818   -1.2298232            1  -0.23704128  -0.46367709  -0.49711731   0.24967057 -0.0066977602  0.019942694  0.051521357  -0.39053454  -0.37841344    0.7112689        0.075    1.3933852        1e-10 1.5805976e-11    6.3267211    2.4563305    31.520363 -0.0061313312  -0.22574433 0.0062911184   0.16816058  -0.46739831  -0.87625064 
 1061000    4.0304267    1.2749935    2.7554332   -0.2268693   0.85004396   0.99963086   0.74660975   -1.2298232            1  -0.22985331  -0.47056721  -0.46988719   0.25089448 0.0052986894  0.064650996 -0.0057264989  -0.38386052  -0.37254564   0.71350571        0.075    1.4065494        1e-10 1.5855682e-11    6.3068872    2.4479567    31.520363 -0.005543431  -0.17340221 0.00044392539   0.19183805  -0.47765364   0.98642381 
 1062000    4.0330962    1.2914433    2.7416529   -0.2338906    0.8610111    1.0213806   0.75011627   -1.2298232            1  -0.12653276  -0.40522097  -0.38029757   0.40592025 -0.011777784  0.098749478  0.035942237  -0.28126328  -0.27232976   0.72408056        0.075    1.3816333        1e-10 1.6090679e-11    6.2147781    2.4563948    31.520363 -0.0060493047  -0.22409158 -0.010558197    0.1942665 -0.011559408  -0.18548514 
 1063000    4.0389807    1.2902098    2.7487709  -0.22949623   0.86018874    1.0094411   0.75698705   -1.2298232            1 -0.097609074  -0.35623532   -0.3502377    0.4136458 -0.0036663828 -0.024868825 -0.032152301  -0.25375687  -0.24170176     0.717801        0.075    1.3806437        1e-10 1.5951133e-11     6.269147    2.4473012    31.520363 0.0010700619  -0.19514934 0.0016647919   0.18691983   -1.0201026     1.029401 
 1064000    4.0231398    1.2723605    2.7507792  -0.22822775   0.84828855   0.99409168   0.74747258   -1.2298232            1  -0.25777817   -0.4771008  -0.49335666   0.19712296   0.00887378 -0.032356768 -0.002594391  -0.41196336  -0.39967981   0.70704966        0.075    1.3883344        1e-10 1.5712215e-11    6.3644751    2.4414025    31.520363 -0.0090392692  -0.19151769 -0.00020838259   0.20083492  -0.31947881   0.29052783 
 1065000    4.0324913    1.2839793     2.748512  -0.23129522   0.85603484    1.0157753   0.74557481   -1.2298232            1   -0.2252465  -0.46284871   -0.4300935    0.2172027   0.01322096 -0.040955974 -0.0097354524  -0.37904023  -0.37024337   0.71162721        0.075    1.4014645        1e-10 1.5813938e-11    6.3235356    2.4515505    31.520363 -0.0054079764  -0.19478671 -0.00062849548   0.21165808  -0.30732361   -1.2736363 
 1066000    4.0292657    1.2722602    2.7570055  -0.23026585   0.84822168    1.0030575   0.74115499   -1.2298232            1 -0.099281429  -0.35636658  -0.36001982   0.41854211 -0.0065727136 -0.010303382  0.013962717  -0.25216346   -0.2424629   0.71501042        0.075    1.4133145        1e-10 1.5889121e-11    6.2936145    2.4472386    31.520363 0.0031303501  -0.19467013 -0.0051606215   0.20930598 -0.064709065   0.85691145 
 1067000    4.0330867    1.2802687     2.752818  -0.23269317   0.85356096    1.0001187   0.75222327   -1.2298232            1  -0.14102877  -0.40776588  -0.41626896   0.40094852 -0.013059986 -0.030363862 0.0035600096  -0.29619392  -0.28379075   0.70807668        0.075    1.4190753        1e-10 1.5735037e-11    6.3552439    2.4518287    31.520363 0.00096653828  -0.21904568 -0.00029722592   0.21190267 -0.081661031    1.9109595 
 1068000    4.0164541     1.287314    2.7291401  -0.23181062   0.85825808    1.0156494   0.74942389   -1.2298232            1  -0.18903158   -0.4042795  -0.45709352   0.29427829 -0.030482847 -0.071752808 -0.013238586  -0.34361928  -0.33401048   0.70893033        0.075    1.4063175        1e-10 1.5754007e-11    6.3475913       2.4484    31.520363 0.0020077236  -0.20141714 -0.016373793     0.210743   -1.7606324    3.1339356 
 1069000    4.0311006    1.2812039    2.7498968  -0.22662114   0.85418442   0.99946124   0.75373324   -1.2298232            1  -0.17603995  -0.44111058  -0.41667233   0.32966305 -0.016161449 -0.070977963 0.0099215408  -0.33151657  -0.31870807   0.71746856        0.075    1.4003663        1e-10 1.5943746e-11    6.2720518    2.4483226    31.520363  0.001454182  -0.20390558  -0.00133139    0.1854261    1.7403736  0.055802127 
 1070000    4.0266264    1.2785624     2.748064  -0.22746408   0.85242335   0.99846601   0.75144203   -1.2298232            1 -0.089368138   -0.3589447  -0.36213351    0.4529738 -0.0055045913  0.063976676  0.011636541  -0.24437213  -0.23189419   0.72274431        0.075    1.3866356        1e-10 1.6060985e-11    6.2262683    2.4454144    31.520363 -0.0012739641  -0.20412835 0.0019559257   0.20743495  -0.26242962    1.6745855 
 1071000    4.0202759    1.2961769    2.7240991  -0.23457061     0.864167    1.0151948   0.75973706   -1.2298232            1  -0.14080836  -0.38761927  -0.39577201   0.36096619 0.0077911492  0.024014832 -0.024102681  -0.29752342  -0.28572236   0.71752131        0.075    1.3872728        1e-10 1.5944918e-11    6.2715907    2.4438337    31.520363 -0.004550233  -0.20063815 0.0078105573   0.22166464    1.3102141   0.56317585 
 1072000    4.0281691    1.2803468    2.7478222  -0.23521034   0.85361304     1.004658   0.74917018   -1.2298232            1  -0.11944891  -0.37898429  -0.39106476   0.41170233 -0.0056930015 0.0055805763 0.0062846056  -0.27398427  -0.26285884   0.71553764        0.075    1.3828935        1e-10 1.5900836e-11    6.2889773    2.4473189    31.520363 -0.00084404445  -0.20798795 -0.0062667715   0.19091381   -1.1142706   0.30145818 
 1073000    4.0433235    1.2931846    2.7501389  -0.22562947   0.86217203    1.0116052   0.75884534   -1.2298232            1  -0.17833076  -0.45482551  -0.39128079   0.31111403 0.0056288567  0.042099716 -0.050170251  -0.33486187  -0.32273237   0.71985675        0.075    1.3685154        1e-10 1.5996817e-11    6.2512438    2.4530582    31.520363  -0.01133241  -0.17875521 -0.0065567141   0.20584128   0.21461121   0.84697279 
 1074000    4.0279751    1.2756822    2.7522928  -0.22129911   0.85050314   0.99528822   0.75039189   -1.2298232            1  -0.10541755  -0.36966074  -0.36008796   0.41349604 0.0099131928  0.030251638  0.046243664  -0.26020493  -0.24748999   0.72158904        0.075     1.369347        1e-10 1.6035312e-11    6.2362366    2.4475033    31.520363 -0.0065361255  -0.20996017 -0.011840729   0.23351604   0.97160788  -0.36869487 
 1075000     4.018537     1.269747      2.74879  -0.23763551   0.84654609   0.99130945    0.7464495   -1.2298232            1  -0.18635674  -0.45947597  -0.41905419   0.31945993 -0.0004318111   0.11964651 -0.010555601   -0.3403309  -0.32786124   0.71727665        0.075    1.3743031        1e-10 1.5939481e-11      6.27373    2.4429444    31.520363 0.0080666749  -0.17923625 -0.010736159   0.19205357   -1.1661925    2.3474794 
 1076000     4.036624    1.2847854    2.7518386   -0.2248132   0.85657226   0.98654289   0.76671337   -1.2298232            1  -0.21961106  -0.44967481  -0.46409667   0.25493831 -0.011877661 -0.0078366448 -0.038941767  -0.37776515  -0.36043515   0.70938852        0.075      1.38586        1e-10 1.5764189e-11    6.3434914    2.4376093    31.520363 -0.017347961  -0.20491075 -0.004162719   0.16151303   0.20636597  -0.41330114 
 1077000     4.024791    1.2832787    2.7415124  -0.23477482    0.8555677    1.0078822   0.75024648   -1.2298232            1  -0.12917544  -0.36103694  -0.41623284   0.38974345 -0.011589903  -0.10812279 -0.055003473  -0.28393282  -0.27304562   0.71685725        0.075    1.3945295        1e-10 1.5930161e-11    6.2774004    2.4386918    31.520363 0.00040402648  -0.18685101 0.0013806251   0.18522894  -0.48830503    2.7414744 
 1078000    4.0096721     1.276777     2.732895  -0.22816523   0.85123305   0.99457848   0.75211814   -1.2298232            1  -0.12344754  -0.38470423  -0.38773711   0.40209873 -0.0092129952 0.0065410353 3.4216057e-05  -0.27859099  -0.26541867   0.71898931        0.075     1.399109        1e-10 1.597754e-11    6.2587857    2.4389066    31.520363 -4.1017778e-05  -0.22480899 -0.010886711   0.19502072    0.3182152    2.6543853 
 1079000    4.0229967    1.2816808    2.7413159  -0.23130109   0.85450237   0.99771393   0.75548041   -1.2298232            1   -0.2273906  -0.46871336  -0.47260345   0.25914502  0.015163335  0.016763586 -0.0069418383  -0.38322761   -0.3698093   0.71554172        0.075    1.4194451        1e-10 1.5900927e-11    6.2889415    2.4483916    31.520363 4.7293789e-05  -0.21416683 0.00047132714   0.20572531  -0.50469081   -1.5778043 
 1080000    4.0197153    1.2855336    2.7341817  -0.23235263    0.8570711    1.0069894   0.75340826   -1.2298232            1  -0.10458937  -0.37992434  -0.34295781   0.40911405 0.0061273219 -0.044197733  0.027226566  -0.25999895  -0.24833209   0.71198131        0.075    1.4073303        1e-10 1.5821807e-11    6.3203906    2.4409101    31.520363 0.0086887311  -0.19304097 -0.0047445023   0.18672148   0.26340717    2.5085174 
 1081000    4.0125669    1.2789679    2.7335989  -0.23364277   0.85269373   0.98981128   0.75788872   -1.2298232            1  -0.20345743  -0.45652908  -0.44040128   0.28655808 -0.0065711512 -0.008324681 -0.047544883  -0.35979122  -0.34474806   0.71698918        0.075     1.401448        1e-10 1.5933093e-11    6.2762454    2.4467501    31.520363 -0.0089152015  -0.20836668 -0.0032212374   0.19601191   0.61897418   0.37385583 
 1082000    4.0116126    1.2709382    2.7406745  -0.22909828   0.84734024   0.98910005   0.74932221   -1.2298232            1 -0.098407727  -0.37900379  -0.32512288   0.40890349 -0.013224572 0.0081510042 -0.010985416  -0.25297445  -0.23959684   0.72073052        0.075    1.4039366        1e-10 1.6016234e-11    6.2436651     2.447753    31.520363 0.0013027105  -0.23690663 -0.0016848086   0.22253544   0.36724272     1.189273 
 1083000    4.0391921    1.2847115    2.7544807   -0.2307173   0.85652296   0.99392915   0.76151857   -1.2298232            1  -0.13961812  -0.36359545  -0.42539208   0.37013316   0.02221919 0.0045054094 -0.012156276  -0.29670066  -0.28149656   0.72170616        0.075    1.3959536        1e-10 1.6037915e-11    6.2352246    2.4471569    31.520363 -0.0084527937  -0.20452815 0.00062792666    0.1953241  -0.49632614  -0.36460275 
 1084000    4.0051809    1.2600763    2.7451046  -0.22965126   0.84009857   0.98314866   0.74118696   -1.2298232            1   -0.2024357   -0.4279558  -0.47477049    0.2954192  0.014618657 -0.062686733 -0.024009458  -0.35532432  -0.34277528   0.71849054        0.075    1.3784887        1e-10 1.5966457e-11    6.2631304    2.4465991    31.520363 -0.0050059228  -0.18467524 0.0039669358   0.18868772    1.4533393   0.81873535 
 1085000    4.0040223    1.2757494    2.7282729  -0.23414176    0.8505479    1.0021747   0.74570207   -1.2298232            1  -0.16961606  -0.43654436  -0.41946395   0.34716011 -0.0079522209 -0.010274868  0.038402311  -0.32343605  -0.31267152    0.7163301        0.075    1.3797846        1e-10 1.5918447e-11      6.28202    2.4469023    31.520363 -0.0018005887  -0.20230819 -0.0032580934   0.19158462    1.4649895  -0.63493109 
 1086000    4.0176804    1.2700203    2.7476601  -0.23033473   0.84672831   0.98490263   0.75119144   -1.2298232            1 -0.089388048    -0.327657  -0.36191939   0.42141225  0.015728111 -0.038423924 0.0047840785  -0.24434035    -0.229978   0.71621244        0.075     1.388927        1e-10 1.5915832e-11     6.283052    2.4416861    31.520363 -0.012096362  -0.20539423 -0.015625974   0.22213059   0.70882742    1.4304226 
 1087000    4.0065868      1.26783    2.7387568  -0.23382279   0.84526802     0.998544   0.73928047   -1.2298232            1 -0.075959767  -0.36190867  -0.34343523    0.4774646 -0.0047854911  -0.01309671 -0.015238968  -0.22845513  -0.21849695   0.71992858        0.075    1.3863631        1e-10 1.5998413e-11      6.25062    2.4568927    31.520363 -0.0041568289  -0.22480232 -0.015086777   0.21214008  -0.14828147    1.6166501 
 1088000    3.9937658    1.2561337     2.737632  -0.23434575   0.83747007   0.99496114   0.72856487   -1.2298232            1  -0.15421698  -0.39150214  -0.42706479   0.35591598 0.0040952148  0.045146084 -0.039331143  -0.30450198  -0.29624274   0.71974152        0.075    1.4067716        1e-10 1.5994256e-11    6.2522446    2.4437679    31.520363 -0.00035033472  -0.21441192 -0.010357664    0.2157756  -0.74166464   0.43399452 
 1089000    4.0172531    1.2727073    2.7445458  -0.22984175    0.8485197   0.99104994   0.74996864   -1.2298232            1  -0.21075266  -0.46830311  -0.45983078    0.2958759 -0.0023659705 -0.0052843541 -0.015073128  -0.36545273  -0.35222011   0.71630384        0.075     1.391081        1e-10 1.5917863e-11    6.2822503    2.4461765    31.520363 -0.010285418  -0.19507039  0.011098675   0.19679157    1.3296724   0.13537086 
 1090000    4.0180849    1.2728686    2.7452163  -0.22743775   0.84862725    1.0008699   0.74335509   -1.2298232            1  -0.19289507  -0.44143266  -0.44850137   0.31124881 0.0044453013  0.056861223 -0.011515138  -0.34623093  -0.33576428   0.71526066        0.075    1.3900978        1e-10 1.5894681e-11    6.2914127    2.4460619    31.520363 -0.0048724388  -0.22021997 -0.0056091771   0.17511022     -1.03284    1.3807257 
 1091000     4.016788    1.2685715    2.7482165  -0.22699509    0.8457624    1.0007077   0.73861974   -1.2298232            1  -0.17441286  -0.41545384  -0.41804816   0.31026342 -0.0009975125  0.072919743 0.0033130366  -0.32677193   -0.3172589   0.71185034        0.075    1.3965996        1e-10 1.5818896e-11    6.3215535    2.4427896    31.520363   0.00752489   -0.1901801 0.0020281355   0.19697674  -0.51595573    1.5258852 
 1092000    4.0324481    1.2949144    2.7375337  -0.22714462   0.86332533     1.011324   0.76099151   -1.2298232            1 -0.075452057  -0.36069679  -0.32577775   0.46011838 -0.011511432  0.070009415 0.0077647175  -0.23242587  -0.21981352   0.70772827        0.075    1.3891411        1e-10 1.5727295e-11    6.3583726    2.4393036    31.520363 0.0089524947   -0.2012523 -0.0016465095   0.21563722   -1.1797945  0.059971752 
 1093000    4.0102613    1.2647315    2.7455298  -0.22979051   0.84320222    1.0023248   0.73316857   -1.2298232            1  -0.19485417  -0.42447019  -0.44205569   0.28196336 -0.0045357293  0.060883343  0.028260038   -0.3460888  -0.33793105   0.71774549        0.075    1.4017936        1e-10  1.59499e-11    6.2696319    2.4452341    31.520363 0.0062370115  -0.22617082 -0.0026130222   0.19479839  -0.97651247   0.94017678 
 1094000    4.0333173    1.2778731    2.7554443  -0.22917731   0.85196377    1.0028836   0.74760732   -1.2298232            1  -0.10989539  -0.39289018  -0.37853642   0.44174043 -0.0079856187 0.0028406004 -0.0022563997  -0.26410838  -0.25305204   0.72098827        0.075    1.3955444        1e-10 1.6021961e-11    6.2414331    2.4565868    31.520363 0.0023219736  -0.22391081 -0.012128258   0.20342068  -0.97097863     1.197914 
 1095000    4.0171358    1.2757523    2.7413835  -0.22821689   0.85054988    1.0022145   0.74567792   -1.2298232            1  -0.13050155  -0.40588872  -0.40457797   0.41896203  0.015966286   0.05705264 0.0029196017  -0.28431655  -0.27356268   0.71930061        0.075    1.3761184        1e-10 1.5984458e-11     6.256077    2.4533244    31.520363 -0.00020805239   -0.1930908 -0.0091170706   0.19905147  -0.97587909  -0.48928792 
 1096000     4.029804    1.2853326    2.7444714    -0.231492   0.85693705     1.003825   0.75537119   -1.2298232            1  -0.14781336  -0.39387868  -0.42894995   0.37938855  0.013824946  0.031917162 -0.0046115772  -0.30362784  -0.29110439   0.71875977        0.075    1.3765914        1e-10 1.5972439e-11    6.2607844    2.4442861    31.520363 0.0074605093  -0.20819171 0.0012308025   0.18979755  -0.58188889 -0.044679029 
 1097000    4.0218946    1.2827596     2.739135  -0.22998247   0.85522163      1.00411   0.75227131   -1.2298232            1  -0.18303018  -0.40505727  -0.41398199   0.26994873 0.00083715681  0.098907354  0.016819227  -0.33820523  -0.32636188    0.7198992        0.075    1.3696968        1e-10 1.599776e-11    6.2508751    2.4323054    31.520363 -0.012559131  -0.19171122 0.00034300591   0.17695884  -0.98849666    2.2768535 
 1098000    4.0185806    1.2757532    2.7428274  -0.22564197   0.85055046    0.9983586   0.74834722   -1.2298232            1  -0.17353345   -0.3978537  -0.44854995   0.32580331 -0.0042712726  -0.02519266  0.043138873  -0.32789906  -0.31604417   0.71876864        0.075     1.375814        1e-10 1.5972636e-11    6.2607072     2.452498    31.520363 0.0089831153  -0.17432369 0.0021681776   0.18958073  0.089960871   0.20075991 
 1099000    4.0341237    1.2644201    2.7697036  -0.21958659   0.84299463   0.98568495   0.74433227   -1.2298232            1  -0.19457607  -0.43392391  -0.43841386   0.28860956 -0.0013281645  0.014644072  0.009955939   -0.3481135  -0.33527769   0.71867671        0.075    1.3766292        1e-10 1.5970594e-11     6.261508     2.449274    31.520363 0.0030312666   -0.1888067 0.0014152417   0.19531947   -1.0566985    1.2824874 
 1100000    4.0137314    1.2701282    2.7436032  -0.23106499   0.84680027   0.99316413   0.74559613   -1.2298232            1  -0.19078985  -0.42592143  -0.44433936   0.29789125 0.0098454245 -0.045059011 -0.015636637  -0.34458797  -0.33255908   0.71940172        0.075    1.3744048        1e-10 1.5986705e-11    6.2551978    2.4599392    31.520363 -0.0084887769  -0.18563694 0.0047889593   0.20138406   0.25550749   0.99329104 
 1101000    3.9984356    1.2666475     2.731788  -0.23408061   0.84447967   0.98860434   0.74482485   -1.2298232            1  -0.17418653  -0.43724159   -0.4313595   0.34604151 -0.0030579915  0.066664842  0.012822969  -0.32782556  -0.31530488   0.71463789        0.075    1.3881806        1e-10 1.5880842e-11    6.2968953     2.443164    31.520363 0.0069868921  -0.20115404 -0.007442771    0.2148777    1.5834961   0.62243936 
 1102000     4.018097    1.2761271      2.74197  -0.22055548    0.8507997   0.99000697    0.7545484   -1.2298232            1 -0.081696463  -0.36755963  -0.33335635   0.45582659 -0.0017051837 -0.017922499  -0.01645295  -0.23734122  -0.22301503   0.71779743        0.075    1.3844544        1e-10 1.5951054e-11    6.2691782    2.4508922    31.520363 0.00044485612  -0.18328883 0.0030722699   0.19619783   0.96759036    1.7854463 
 1103000    4.0149778    1.2780405    2.7369373  -0.22994215   0.85207539   0.99513531   0.75315812   -1.2298232            1  -0.20250472   -0.4448913  -0.46138605    0.2987632  0.010801675 -0.047148386 -0.0074669493   -0.3578627  -0.34455533   0.72012928        0.075    1.3988926        1e-10 1.6002873e-11     6.248878    2.4471254    31.520363  0.011735103  -0.23115119 -0.0043429209   0.22043732  -0.20974629   0.43063943 
 1104000    4.0020558     1.269698    2.7323578  -0.23355424   0.84651343   0.99816188   0.74165227   -1.2298232            1 -0.093515953  -0.36074367  -0.34039076   0.42058657 -0.0030352582 -0.031977597 -0.026001425  -0.24650056   -0.2359986   0.71889978        0.075    1.3718164        1e-10 1.5975551e-11    6.2595651    2.4499468    31.520363 0.0041228798  -0.17250639  0.012692273   0.20962532    1.1542279    1.7619918 
 1105000    4.0185932    1.2719144    2.7466789  -0.23248995   0.84799109   0.99762286   0.74452563   -1.2298232            1  -0.22350717  -0.46691736  -0.42922148   0.22561733 0.0052817965  0.024308031 -0.0084430538  -0.37708448  -0.36591287   0.71288262        0.075    1.3790026        1e-10 1.5841836e-11    6.3123996    2.4423765    31.520363 -0.011430018  -0.19559115 -0.0024145942   0.20562704 -0.054879153    1.0917553 
 1106000    4.0373607    1.2824379    2.7549228  -0.23059169    0.8550072   0.99565564   0.75775899   -1.2298232            1  -0.24000256  -0.46827036  -0.48939033   0.23765301 -0.0085550774  0.001051559 -0.013941258  -0.39630959  -0.38212745   0.71734759        0.075    1.3864457        1e-10 1.5941058e-11    6.2731095    2.4511842    31.520363 0.0079489767  -0.17923888 -0.0032959157   0.19442267  -0.11274552    0.6154661 
 1107000    4.0248379    1.2903344    2.7345036  -0.23437773   0.86027178    1.0193635   0.75026113   -1.2298232            1  -0.17660396  -0.45540977  -0.42864562   0.35424351 -0.0063340853 -0.042779718  0.013517198  -0.33136436  -0.32211303   0.72485214        0.075    1.3730635        1e-10 1.6107825e-11    6.2081627    2.4453403    31.520363 -0.0023285808  -0.19042916 -0.0033270753   0.20750336   0.20518092    2.1811611 
 1108000    4.0357712    1.2892932     2.746478   -0.2268713   0.85957761    1.0192304   0.74917862   -1.2298232            1  -0.12124816  -0.38145854  -0.37758014   0.39529421  0.007988682 -0.037438809 -0.020601313  -0.27578526  -0.26673822   0.71511331        0.075    1.3875814        1e-10 1.5891407e-11    6.2927091    2.4507561    31.520363 0.0035689313  -0.18190335  0.011207725   0.21667773  -0.19402973     1.416584 
 1109000    4.0320862     1.288014    2.7440721  -0.22280364   0.85872479    1.0030457   0.75893558   -1.2298232            1  -0.17030607  -0.44004777  -0.38591822   0.31504778 -0.0061079403 -0.089711433  0.020821073   -0.3268558  -0.31348585   0.70749988        0.075    1.3777387        1e-10 1.5722219e-11    6.3604251    2.4367455    31.520363 -0.001030866  -0.17715783 -0.017557966   0.20531143   0.73321471  -0.11851306 
 1110000    4.0244827    1.2753338    2.7491488  -0.22433364   0.85027086   0.99747481   0.74848569   -1.2298232            1  -0.19341823  -0.40955724  -0.46037802   0.28968057   0.01299086 -0.067354564 -0.038695732   -0.3478124   -0.3358028   0.71128792        0.075    1.3852239        1e-10 1.5806398e-11     6.326552    2.4372832    31.520363 -0.00016760292  -0.20364335 -0.0014419705   0.19247301  -0.76412987  -0.60226216 
 1111000    4.0095636    1.2764861    2.7330775  -0.23633813    0.8510391    1.0064128   0.74360048   -1.2298232            1  -0.15369668  -0.44116694    -0.398889    0.3789659 0.0019668587  0.068929621 -0.0089150721  -0.30708315  -0.29735709   0.71761961        0.075    1.3757939        1e-10 1.5947102e-11    6.2707317    2.4469661    31.520363 -0.0083854455  -0.22093278 -0.00090358384   0.18170637  -0.71853667   -1.0774433 
 1112000    4.0235053    1.2789298    2.7445755   -0.2322656   0.85266832    1.0089692   0.74458821   -1.2298232            1  -0.25942747    -0.491353  -0.49485937   0.20792996 -0.0073353256  0.026697265  0.027623043  -0.41301769   -0.4034528    0.7179719        0.075    1.3933785        1e-10 1.5954931e-11    6.2676548    2.4527889    31.520363  -0.01611232  -0.19581984 -0.00055449447   0.19219624   -1.1111882   0.18988181 
 1113000    4.0364357    1.2833179    2.7531178  -0.22983301    0.8555939    1.0038977   0.75304812   -1.2298232            1  -0.20488249  -0.44629727  -0.42713316   0.25878295  0.010243406 -0.060094448 -0.0048275762  -0.36021778   -0.3481839   0.71778911        0.075    1.3804653        1e-10 1.5950869e-11    6.2692509    2.4501984    31.520363  0.007344326  -0.18216086 -0.0078882588   0.20796832   0.39977031    1.1340018 
 1114000    4.0201739    1.2788229    2.7413509  -0.22392454   0.85259704    1.0088655   0.74453938   -1.2298232            1 -0.093418557  -0.37531073  -0.32787338   0.42292843 0.0018256315 -0.0088242594  0.037448416   -0.2469987  -0.23742908   0.71377978        0.075    1.3871761        1e-10 1.5861773e-11    6.3044655    2.4475717    31.520363 -2.0791571e-05  -0.19736477 -0.0052564884   0.17711172   -1.4272521   -1.0223974 
 1115000    4.0150944    1.2740856    2.7410088  -0.21741799   0.84943865   0.99872404   0.74621303   -1.2298232            1  -0.12091167  -0.39312411  -0.37542003   0.40580914 0.0026952269 -0.041132492 -0.019202999  -0.27483705  -0.26347456   0.71440694        0.075    1.4065758        1e-10 1.587571e-11     6.298931     2.466374    31.520363 -0.0044494148  -0.20565222 0.0058745486   0.21748057   0.76848096  -0.31047594 
 1116000    4.0138495    1.2742522    2.7395972  -0.23851007   0.84954975    1.0035354   0.74307151   -1.2298232            1 -0.057566439  -0.32425831  -0.31457402   0.46613301 -0.0022210965  0.045315043 -0.041806497   -0.2108438  -0.20081613   0.71633924        0.075    1.4184057        1e-10 1.591865e-11    6.2819399    2.4462063    31.520363 -0.0044795203  -0.20033743 -0.0092044173   0.20224903   -1.5884018  -0.34937273 
 1117000     4.021982    1.2765519    2.7454301  -0.23559323   0.85108294   0.98517322   0.75837268   -1.2298232            1 -0.064438531  -0.38246539  -0.31615472   0.50530451 0.00085886899 -0.036644858   0.04643626  -0.22087215  -0.20506711   0.71846631        0.075    1.4136674        1e-10 1.5965918e-11    6.2633417    2.4508026    31.520363 0.0023430657   -0.2085532 0.0067235124   0.20355421  -0.32694479    2.7624636 
 1118000    4.0268364    1.2725135     2.754323  -0.23520327    0.8483905   0.99961046   0.74382603   -1.2298232            1  -0.14433532  -0.41488795  -0.39401978   0.37590176  0.010054831   0.14280837  0.034516876  -0.29776832  -0.28702474   0.71902232        0.075    1.4145689        1e-10 1.5978274e-11    6.2584984    2.4486224    31.520363 -0.0047887765  -0.18844464 -0.0021805119   0.19611562   -2.4175141    0.4041336 
 1119000    3.9887056    1.2679308    2.7207748  -0.23679312   0.84533524   0.99417376   0.74241847   -1.2298232            1  -0.22266879  -0.45770528  -0.43473911   0.22443801 -0.0017299595   0.12319044 -0.00018250484  -0.37581145  -0.36458215   0.71894143        0.075    1.4127916        1e-10 1.5976476e-11    6.2592025     2.455128    31.520363 -0.0082988546    -0.202128 -0.0029614303   0.20558325  -0.25780202 -0.032982346 
 1120000    4.0072342    1.2838041      2.72343  -0.23160544   0.85591805    1.0059054   0.75220732   -1.2298232            1  -0.20442692  -0.47096682  -0.41941051   0.27709657 -0.016910347  0.015540917 -0.017176894  -0.35958877   -0.3480149   0.71497859        0.075    1.3985395        1e-10 1.5888413e-11    6.2938948    2.4539556    31.520363 -0.0024146787  -0.19356288 -0.0096200482   0.19777086  -0.57476851  -0.39263562 
 1121000    4.0232117    1.2741342    2.7490775  -0.22488312   0.84947105    0.9909362   0.75165714   -1.2298232            1  -0.15540008  -0.39819448  -0.43866472   0.37065895 0.0094971812 -0.019180743 -0.015092708  -0.31044845  -0.29685129   0.70909001        0.075    1.3959121        1e-10 1.5757556e-11    6.3461619    2.4388695    31.520363 -0.010399274  -0.21444233 0.0043573198   0.17760285    0.2646523    1.4882708 
 1122000    4.0265435    1.2828176    2.7437259  -0.22873131    0.8552603    1.0084684   0.74932071   -1.2298232            1   -0.2268201  -0.46112412  -0.46058593   0.24124975  0.013146201  0.015804719  0.082338612  -0.38138652  -0.37077394   0.71890418        0.075    1.3967345        1e-10 1.5975648e-11    6.2595268    2.4399344    31.520363 -0.010397554  -0.21028301 0.00076349209   0.17467719  -0.39920488   -0.1263779 
 1123000    4.0387607    1.3041251    2.7346356  -0.23146163   0.86946611     1.018221   0.76660953   -1.2298232            1  -0.10407741  -0.34353122  -0.39026482   0.42156379 -0.00094681917  -0.01695226 -0.026049016  -0.26221009   -0.2494234   0.72480998        0.075    1.3887867        1e-10 1.6106889e-11    6.2085237    2.4450365    31.520363 0.0029854443  -0.19301251  0.004572872   0.22494334   0.11324123   0.74033672 
 1124000    4.0444315    1.2879683    2.7564632  -0.22535843   0.85869431    1.0099161   0.75412955   -1.2298232            1  -0.16539927  -0.42982892  -0.38930564   0.32293674 0.0074229922 -0.022642397 -0.046443797  -0.32095764  -0.30955978   0.71647458        0.075     1.394156        1e-10 1.5921657e-11    6.2807532    2.4516245    31.520363 -0.001008601  -0.22777023 -0.001686686    0.2071622  0.087585882  -0.69048581 
 1125000    4.0319379    1.2908382    2.7410997  -0.23187971   0.86060771    1.0136443   0.75478731   -1.2298232            1  -0.14674354  -0.39229617   -0.4088392   0.36090475  0.024529325  0.033822663 -0.025869217  -0.30243758  -0.29143622   0.71180951        0.075    1.3913164        1e-10 1.5817989e-11    6.3219161    2.4479534    31.520363 0.0015194468  -0.18650965 -0.012255738   0.19608379 -0.051523536    2.0648144 
 1126000    4.0355977    1.2759399    2.7596578  -0.22726085   0.85067492    1.0022225   0.74588394   -1.2298232            1  -0.13181246   -0.3872823  -0.40780152   0.39964645 0.0027803041 -0.024615948 -0.015455243  -0.28566995  -0.27487474   0.70955845        0.075    1.4037627        1e-10 1.5767966e-11    6.3419722    2.4427646    31.520363  0.001859374  -0.19419141 -0.010656628   0.20120278   0.80665014    2.0595498 
 1127000     4.038394    1.2826561    2.7557379   -0.2253876   0.85515267    1.0002223   0.75484496   -1.2298232            1 -0.084681513  -0.33591456  -0.38513404   0.46700406 0.0014767708 -0.051288753 -0.034861132  -0.24038745  -0.22745827   0.71737504        0.075    1.3970746        1e-10 1.5941668e-11    6.2728695    2.4471458    31.520363 -0.011372109  -0.20358332 -0.0079475092   0.20063385   0.14218035   0.69360523 
 1128000     4.031872    1.2841384    2.7477336  -0.22707469    0.8561409    1.0122611   0.74818617   -1.2298232            1  -0.26281726  -0.49309479  -0.47285927   0.17750228 0.0068684049 -0.0021177762 -0.046112383  -0.41714965  -0.40731249   0.71675395        0.075    1.3944992        1e-10 1.5927866e-11    6.2783051    2.4369237    31.520363 -0.0014498023  -0.19193478 -0.0064574546   0.18488518  -0.89978152    1.3613501 
 1129000    4.0244248    1.2772894    2.7471353   -0.2292972   0.85157466    1.0045768   0.74577722   -1.2298232            1  -0.10702693  -0.37125058   -0.3387863   0.38895609 -0.012520993  -0.07925773 0.0035622065  -0.26086241  -0.25042527   0.71874062        0.075    1.3863156        1e-10 1.5972014e-11    6.2609513    2.4436376    31.520363 0.0026811522  -0.19184843 -0.0029037996   0.19161765    1.0085882     2.354298 
 1130000    4.0543853    1.2868096    2.7675757  -0.22316324   0.85792181    1.0127867   0.75083591   -1.2298232            1  -0.16298406  -0.42994661  -0.41149901   0.35249344 0.0048184562 -0.085828773 -0.0025708747  -0.31786302  -0.30755432   0.71624509        0.075    1.3933412        1e-10 1.5916558e-11    6.2827656     2.460785    31.520363 -0.0089179216  -0.19136542 0.00029973039   0.19318036    1.7829767   0.57774692 
 1131000    4.0327225     1.272044    2.7606785  -0.23273695   0.84807752    1.0026346   0.74120371   -1.2298232            1  -0.17739275  -0.43583619  -0.42155432   0.32521225 0.0068727427   0.03517257   0.01322258  -0.33028483  -0.32051385   0.71246194        0.075    1.3915579        1e-10 1.5832487e-11    6.3161269    2.4401676    31.520363 -0.012920542  -0.21335446 -0.0013988432   0.20210865    1.5085138   0.77886227 
 1132000    4.0478486    1.2967941    2.7510545   -0.2265027   0.86457851    1.0160853   0.75981712   -1.2298232            1 -0.042805148  -0.31082252  -0.33752478   0.51993186 0.0083648454 -0.091186604  0.012723269  -0.19953672  -0.18784627   0.71250687        0.075      1.39843        1e-10 1.5833486e-11    6.3157286    2.4365516    31.520363 -0.0043643271  -0.21585488 -0.0096410432   0.20541607   0.78883276    1.0602394 
 1133000    4.0407436    1.2892464    2.7514972  -0.22999407   0.85954642    1.0134987   0.75309222   -1.2298232            1  -0.30132221  -0.52203054  -0.52022648    0.1382904 -0.0091445368 -0.036660837 0.0097066683  -0.45666659  -0.44599411   0.71113215        0.075    1.4026894        1e-10 1.5802937e-11    6.3279378    2.4402222    31.520363 0.0036298485  -0.18891699 -0.0093124667   0.20378998   0.77258204  -0.98961308 
 1134000    4.0432063    1.2793883    2.7638179  -0.22524607   0.85297401    1.0116895   0.74322299   -1.2298232            1 -0.049845829  -0.30293712  -0.36690329   0.52030293 -0.0029960181  0.056586374 -0.022249278  -0.20315444  -0.19425947     0.712927        0.075    1.3977211        1e-10 1.5842822e-11    6.3120067    2.4446171    31.520363   0.00130131  -0.20992145 -0.0067314185   0.21230356   0.69317575    2.2638492 
 1135000    4.0338932    1.2786004    2.7552928  -0.23298392   0.85244867    1.0071573   0.74547037   -1.2298232            1   -0.1411712  -0.35318014   -0.4381308   0.36779733 -0.013451603  0.016667292  -0.03467548  -0.29494339   -0.2849379   0.71429818        0.075    1.4007998        1e-10 1.5873293e-11    6.2998901     2.455343    31.520363 -0.011517704  -0.19797335 -0.0036216282   0.20850844  -0.86300455   0.54900195 
 1136000    4.0411965    1.2939972    2.7471993  -0.23045763   0.86271384    1.0205518   0.75357101   -1.2298232            1  -0.18584992   -0.4336548  -0.43560906   0.31171411 -0.012562033 -0.080034863  0.037215138  -0.34129307  -0.33152861   0.71838123        0.075    1.3916124        1e-10 1.5964027e-11    6.2640835    2.4480467    31.520363 0.0024736603  -0.21241245 0.0073426518   0.22120251  -0.68776768   0.16206375 
 1137000    4.0267512    1.2888983     2.737853   -0.2254321   0.85931432    1.0165392   0.75059546   -1.2298232            1  -0.21301932   -0.4671258  -0.42212566    0.2501935  0.012710794 -0.021950832 -0.010628724  -0.36784869  -0.35812523   0.71543399        0.075    1.4022986        1e-10 1.5898533e-11    6.2898885    2.4463781    31.520363 0.0004749496  -0.20820686 -0.0014162561   0.19895684     -1.10592    1.9480469 
 1138000    4.0463022    1.2817611    2.7645411  -0.22440253   0.85455595   0.99995274   0.75402179   -1.2298232            1  -0.10601235  -0.39939061  -0.34920663   0.43056019  0.012378659  0.022946748 0.0034736702  -0.26154848  -0.24875063   0.71489871        0.075    1.3997475        1e-10 1.5886638e-11     6.294598    2.4477926    31.520363 0.0044828703   -0.2321822 0.0032724067   0.21788708   0.50079976    1.0616207 
 1139000    4.0429099    1.2895256    2.7533844  -0.22748648   0.85973255    1.0124758   0.75411506   -1.2298232            1  -0.19309316  -0.45331401   -0.4109963   0.28503084  0.012300855 -0.021891158  0.019548512  -0.34864853  -0.33761904   0.71373686        0.075    1.3818267        1e-10 1.5860819e-11    6.3048446    2.4466952    31.520363 0.0016302621  -0.18331039 0.0040728867   0.20708049   0.30354368     1.072778 
 1140000    4.0565807    1.2988757     2.757705   -0.2270998   0.86596635    1.0151871   0.76278703   -1.2298232            1  -0.23527986  -0.48234679  -0.44822135   0.22472856 -0.016886829 -0.0060075138 -0.0062598321  -0.39262405  -0.38019277   0.71642284        0.075    1.3686715        1e-10 1.5920508e-11    6.2812068    2.4484028    31.520363 0.0016072821  -0.21274757 -0.0025372536   0.22156166   0.93711994    1.3981061 
 1141000    4.0422603    1.2954074    2.7468529  -0.22966323   0.86365402    1.0038798   0.76669913   -1.2298232            1 -0.080429607  -0.37269236  -0.35756094   0.48896448  0.007138503  0.029626657  0.057904678  -0.23858076  -0.22372845   0.71690605        0.075    1.3728887        1e-10 1.5931246e-11    6.2769731      2.44483    31.520363 -0.0040570246  -0.19415471 -0.012429064   0.20551481  -0.92496044    1.3763091 
 1142000     4.009953    1.2785312    2.7314218  -0.22842704   0.85240258    1.0094825   0.74378335   -1.2298232            1  -0.17159291  -0.44123187  -0.40438336   0.33083652 -0.0069830279 -0.037546563 -0.034422786   -0.3250171  -0.31569151   0.71345067        0.075    1.3749955        1e-10 1.5854459e-11    6.3073737    2.4442495    31.520363 -0.0024285428  -0.20634974 -0.016823395   0.21998963  -0.41618274  -0.17907997 
 1143000    4.0196814    1.2768568    2.7428246  -0.23286876   0.85128622    1.0040053   0.74568465   -1.2298232            1  -0.17380816   -0.4262985  -0.44342718   0.34830121  -0.01227831  -0.06849338  0.042382745  -0.32762454  -0.31712491   0.71573122        0.075    1.3702166        1e-10 1.5905138e-11    6.2872764    2.4461513    31.520363 0.0084760069  -0.20280808 0.00050841031   0.20208792    1.4083152  -0.48781968 
 1144000    4.0163899    1.2744347    2.7419552  -0.22825367   0.84967138    1.0060439   0.74154141   -1.2298232            1  -0.10781632  -0.38705025   -0.3594736   0.42307489 -0.0025122156 -0.043517087 -0.0026587908  -0.26077806  -0.25142408   0.71780886        0.075     1.379934        1e-10 1.5951308e-11    6.2690784     2.463473    31.520363 0.0086931001  -0.19141015 -0.012103052   0.21438727   0.62522636    1.7810462 
 1145000    4.0097487    1.2699214    2.7398273  -0.23219172   0.84666233    1.0026554   0.73879467   -1.2298232            1  -0.16062079  -0.41333172  -0.41659227   0.34806163 0.0062699378  0.033863228  0.014156275  -0.31301594  -0.30374485   0.71748594        0.075    1.3577666        1e-10 1.5944132e-11    6.2718999    2.4412962    31.520363 -0.0097168989  -0.20035268 -0.0044333158   0.20919685  -0.69542209    1.8199244 
 1146000    4.0252417     1.273213    2.7520287  -0.22590722   0.84885691    1.0028983   0.74234004   -1.2298232            1  -0.10964412  -0.40042845  -0.35052731   0.42202341 -0.0081977778  0.056751723  0.038252129   -0.2627706  -0.25280286   0.71320735        0.075    1.3672306        1e-10 1.5849052e-11    6.3095255    2.4380099    31.520363 -0.0028105998   -0.2404357 -0.010682399   0.21799963   0.63057808    2.7695657 
 1147000    4.0302171    1.2723294    2.7578877  -0.22771324   0.84826779    1.0098971    0.7364999   -1.2298232            1  -0.15047348  -0.41053657  -0.35266395   0.31178007 0.0038774304  0.083585248  0.012907411  -0.30239528  -0.29463127    0.7131227        0.075    1.3710481        1e-10 1.5847171e-11    6.3102745    2.4542548    31.520363 -0.007408821  -0.18619969 -0.012265023   0.22678775   -0.1573854    2.2751334 
 1148000    4.0565437    1.3030911    2.7534526  -0.22752568   0.86877675    1.0134198   0.76876555   -1.2298232            1  -0.11554503  -0.33790347   -0.4046862   0.39595459 0.0047824194  0.070355733 -0.032683272  -0.27412244  -0.26020566   0.71282556        0.075    1.3670557        1e-10 1.5840568e-11     6.312905    2.4423812    31.520363  0.012272455  -0.19522402 0.0050778602   0.20017585  -0.45508582   0.14102636 
 1149000    4.0403438    1.2983625    2.7419813  -0.23181626   0.86562419    1.0140635   0.76298563   -1.2298232            1  -0.12535747  -0.39597719  -0.38821926   0.40812404  0.011140934 -0.003864216  0.049194403  -0.28274262  -0.27010999   0.71983161        0.075    1.3652776        1e-10 1.5996258e-11    6.2514621    2.4485741    31.520363 -0.0097633267  -0.19455059 -0.0045486721    0.1996224      1.45452    3.0383133 
 1150000      4.05224    1.2956168    2.7566232  -0.22528597   0.86379362    1.0127459   0.76079988   -1.2298232            1  -0.12568734  -0.40677999  -0.39629864    0.4260166 -0.011405173  0.077350939 -0.0036076231  -0.28262163  -0.27025178   0.72072396        0.075    1.3640354        1e-10 1.6016088e-11    6.2437219    2.4443106    31.520363 0.0049633228  -0.19076478 -0.0042219908   0.20408923  -0.72323516    1.8275189 
 1151000    4.0304828    1.2789882    2.7514946  -0.23872023   0.85270721    1.0098333   0.74405606   -1.2298232            1  -0.14395628  -0.40028774  -0.39031369   0.35873258 -0.002878667  0.062231925  0.037409658  -0.29743673  -0.28810496   0.71348694        0.075    1.3652397        1e-10 1.5855265e-11    6.3070531    2.4419257    31.520363 -0.0039862714   -0.1938105 0.00050362801   0.20755187    0.3499811    2.0855171 
 1152000    4.0463527    1.2797053    2.7666474  -0.23336982   0.85318535   0.99555643   0.75474488   -1.2298232            1  -0.20146903  -0.46023423   -0.4582227   0.31404985  0.014661623 -0.010142936  0.019463642  -0.35715431  -0.34357975   0.71066291        0.075    1.3785045        1e-10 1.5792509e-11     6.332116    2.4421079    31.520363 -0.000523764  -0.17375744 0.0062436099   0.20015135    1.2986126    2.4176948 
 1153000    4.0205375    1.2741056    2.7464319  -0.22808321   0.84945197   0.99946241   0.74572461   -1.2298232            1  -0.17630056  -0.43781378  -0.42088724   0.32979935 0.0094753578   0.01370757  -0.02925259  -0.33012519  -0.31896884   0.71885394        0.075    1.3657355        1e-10 1.5974532e-11    6.2599643     2.443488    31.520363 -6.8071937e-05  -0.21445325 -0.0045102203   0.21372759    0.2004793    2.0284143 
 1154000    4.0178759     1.280324    2.7375519  -0.23332411   0.85359783     1.011601   0.74433978   -1.2298232            1  -0.17233028  -0.39699538  -0.45248677    0.3324913  0.027949338  0.056737507   0.02750004  -0.32586926   -0.3167313   0.72325378        0.075     1.367754        1e-10 1.6072306e-11    6.2218824     2.447167    31.520363 0.00095714772  -0.20298636 0.0014433335   0.17378671   0.39728209    2.5904534 
 1155000    4.0237724    1.2767077    2.7470647  -0.22928769   0.85118684    0.9936076    0.7527118   -1.2298232            1  -0.14898801  -0.42672744  -0.41170736   0.39147077 -0.0049605535  0.074384657  0.029695195  -0.30425392  -0.29082055   0.71330223        0.075    1.3841943        1e-10 1.5851161e-11    6.3086863    2.4442746    31.520363 -0.0030623306  -0.21215087 0.0020214099   0.15281796   -2.5045321    2.6093148 
 1156000    4.0417273     1.286119    2.7556083  -0.22900385    0.8574614   0.99752113   0.76062083   -1.2298232            1  -0.20300563  -0.45846864  -0.43404684   0.28349858 -0.0062844942   0.13449765 -0.010234772  -0.35990299  -0.34539681   0.71353805        0.075    1.3930552        1e-10 1.5856401e-11    6.3066013    2.4499018    31.520363 0.0048546242  -0.20856315 -0.0016078989   0.19213971   -2.0642135     1.395117 
 1157000    4.0214933    1.2852771    2.7362163  -0.23543284   0.85690006    1.0078747   0.75250616   -1.2298232            1  -0.23660543  -0.44943481  -0.47142873   0.21104726  0.002421298  0.071855944 -0.015666097  -0.39182893  -0.38047453   0.71963877        0.075    1.3844727        1e-10 1.5991973e-11    6.2531372     2.447941    31.520363 -0.0044475243  -0.20686766 -0.017908031   0.20053029 -0.016375081   -1.0133176 
 1158000    4.0181512    1.2695598    2.7485914  -0.23259275   0.84642131    1.0056028   0.73634715   -1.2298232            1 -0.088070856  -0.35838439  -0.35405664   0.44822846 0.0053306981  0.017381886 -0.018505484  -0.23996115  -0.23161566   0.72084588        0.075    1.3901902        1e-10 1.6018797e-11    6.2426659    2.4406068    31.520363  0.010349556  -0.20229333  0.013569693   0.21294907    1.2731443    3.4705468 
 1159000    4.0070302     1.278262    2.7287683  -0.23102637   0.85222304   0.99797304   0.75144424   -1.2298232            1  -0.16044227  -0.41967109  -0.40054689   0.33889118 0.0034560539   0.03781155  0.020877549  -0.31544671  -0.30289795   0.71633159        0.075     1.390625        1e-10 1.591848e-11    6.2820069    2.4406832    31.520363 0.0022746961  -0.19944352 0.00035843771   0.19743702   -1.1199388    1.4360959 
 1160000    4.0163959    1.2708107    2.7455852  -0.23199409   0.84725523   0.99406862   0.74574006   -1.2298232            1  -0.21658563  -0.44055804  -0.46071654    0.2515177 -0.006622063   0.11216117 -0.016106378  -0.37041345  -0.35848398   0.72042142        0.075    1.3783394        1e-10 1.6009365e-11     6.246344    2.4550379    31.520363 -0.0083091527  -0.21855816  0.002114049   0.19764995   -1.7102496    0.2758997 
 1161000    4.0096083    1.2751448    2.7344635  -0.23330221   0.85014482   0.99221699    0.7519109   -1.2298232            1   -0.1570359  -0.39534552  -0.40066374   0.32490155  0.012734504  0.044445481 -0.015701092  -0.31213661  -0.29866994   0.71786124        0.075    1.3786502        1e-10 1.5952472e-11     6.268621    2.4564069    31.520363 -0.0007956326  -0.18400367 -0.0059115918   0.18792619   -1.3008966  -0.62930533 
 1162000    4.0174175     1.266575    2.7508425  -0.22561264   0.84443133    0.9917245   0.74258388   -1.2298232            1  -0.10188149  -0.35443164  -0.36953727   0.41832442 0.0036578614 -0.032514391 -0.026962387  -0.25505827  -0.24344523   0.71322541        0.075    1.3876719        1e-10 1.5849453e-11    6.3093658    2.4445733    31.520363 0.0019898987  -0.18331704 -0.0070866731   0.19774684   0.89618809   0.78286313 
 1163000    4.0198575     1.274878    2.7449795  -0.23741699   0.84996695    1.0022295   0.74468119   -1.2298232            1  -0.20517263  -0.42394361  -0.47791894   0.28634465 0.0015400152  0.053542784 -0.0049826505  -0.35878203   -0.3482359   0.72243897        0.075    1.3906952        1e-10 1.6054199e-11    6.2288998    2.4426242    31.520363 0.0033947752  -0.19900666  0.015656962   0.19037349   -0.2493162    1.1620025 
 1164000    4.0069073    1.2777968    2.7291105  -0.23167938   0.85191296   0.99898236   0.75022107   -1.2298232            1 -0.084269946  -0.35610579  -0.34258112   0.44587707 -0.0098119528 -0.076794137 -0.0053416247  -0.23902208  -0.22686971   0.72246259        0.075    1.3843779        1e-10 1.6054724e-11    6.2286963    2.4409506    31.520363 0.0028920486  -0.18745866 0.0021377211   0.19703057  -0.51232854    1.1291531 
 1165000    4.0048582    1.2725729    2.7322854  -0.23244476   0.84843011   0.99589961   0.74646101   -1.2298232            1  -0.12569056   -0.3868258  -0.36501934   0.37477347 0.00092619982 -0.044907361 -0.0055736078  -0.27966709  -0.26785027    0.7174812        0.075    1.3815136        1e-10 1.5944027e-11    6.2719414    2.4411144    31.520363 0.0060759395  -0.20512055 0.0056474384   0.20396572  -0.12492845    1.4475434 
 1166000     3.997352    1.2573009    2.7400511  -0.22789031   0.83824819   0.98169902   0.73905908   -1.2298232            1 -0.090738905  -0.37694298  -0.34276776   0.44749402 0.0052961196  0.087177276 -0.023187467   -0.2431886  -0.23087156   0.71430448        0.075    1.3928622        1e-10 1.5873433e-11    6.2998345    2.4666401    31.520363 0.0080613166  -0.18186331 -0.0012616662   0.17628053   -1.0053875   0.98041303 
 1167000      4.01582    1.2745281    2.7412919  -0.22715033   0.84973367    1.0018035   0.74458123   -1.2298232            1  -0.11754349   -0.4018919  -0.40352739   0.45278882 -0.0025606818  0.055902523 -0.0044058647  -0.27113227  -0.26054595   0.71574053        0.075    1.4018958        1e-10 1.5905345e-11    6.2871946     2.447552    31.520363 -0.013220366   -0.2001339 -0.0095947874   0.18468908   0.52293251    1.5976743 
 1168000     4.027354    1.2867306    2.7406234  -0.23028519    0.8578691   0.99621764   0.76221273   -1.2298232            1  -0.21312919  -0.44040198  -0.44699843   0.24801284 -0.0049863234  0.045433514  0.017624151  -0.37035492   -0.3553343   0.71545649        0.075    1.4088412        1e-10 1.5899033e-11    6.2896906    2.4512783    31.520363  0.003000593  -0.20110696 -0.012550436   0.20075204   -1.9858032   -2.2974286 
 1169000    4.0144464    1.2804672    2.7339792  -0.22816965   0.85369331   0.98314994   0.76418984   -1.2298232            1  -0.15439802  -0.43489988  -0.41540859   0.38711441 0.0013019557 -0.0036200644  0.026929728  -0.31203157  -0.29473778   0.71317689        0.075    1.4192365        1e-10 1.5848375e-11    6.3097951    2.4475161    31.520363 0.0035069025  -0.19625644 0.0083919428     0.193165  -0.50160993   0.56740392 
 1170000    4.0136119    1.2738206    2.7397913  -0.22447124   0.84926195    1.0053215   0.74134854   -1.2298232            1  -0.17022751  -0.40007554     -0.40684     0.296233 -0.013757901 -0.0057690397 -0.0075001964  -0.32314947  -0.31373215   0.71368062        0.075    1.4065766        1e-10 1.5859569e-11    6.3053414    2.4626032    31.520363 0.0011901318  -0.19629576 0.0088055896   0.19799928  -0.59217091    1.4613654 
 1171000    4.0332179    1.2826801    2.7505378  -0.22449029   0.85516863    1.0047309   0.75175194   -1.2298232            1  -0.18731187   -0.4556538  -0.41192859   0.30564678  0.010613153   0.07073125 -0.032140864  -0.34237979  -0.33073221   0.71325935        0.075    1.3966828        1e-10 1.5850208e-11    6.3090656    2.4480905    31.520363 0.0026400651  -0.20182224 -0.010612026   0.20865352  -0.21695333   -1.0603685 
 1172000     4.053788    1.2946731    2.7591148  -0.23252468   0.86316447    1.0050862   0.76503592   -1.2298232            1  -0.14134544  -0.41566102  -0.41570055   0.40732525 0.0071239306  0.060043541 0.0084946234  -0.29915352  -0.28481649   0.72072137        0.075    1.3833463        1e-10 1.601603e-11    6.2437444    2.4384791    31.520363 -0.0068663054  -0.19481062 -0.0031180607   0.18344447   -1.2686898    2.1743463 
 1173000    4.0227835    1.2742827    2.7485008  -0.23315341   0.84957005     1.002185   0.74404031   -1.2298232            1  -0.17622486  -0.45283605  -0.41930892   0.34347038 0.0018397115 -0.025841429   0.02041522  -0.32970207  -0.31928179   0.72115209        0.075    1.3803145        1e-10 1.6025602e-11    6.2400152    2.4651527    31.520363 -0.0061418373  -0.20737482 0.0069797009   0.19868546   -1.5129018    2.6636161 
 1174000     4.032328    1.2874442    2.7448838  -0.23523726    0.8583449    1.0088836   0.75425286   -1.2298232            1  -0.17266584  -0.40291543  -0.43772497   0.32264287 0.00014833758 -0.076734425 -0.011990345  -0.32824964  -0.31667895   0.70940298        0.075    1.3914891        1e-10 1.5764511e-11    6.3433621    2.4535913    31.520363 -0.0029428891  -0.16884759 4.4821658e-06   0.19676952  -0.46716052  -0.13855172 
 1175000    4.0310824    1.2838015    2.7472809  -0.22087483   0.85591629    1.0034348   0.75391402   -1.2298232            1  -0.12512048  -0.38281287  -0.39504661   0.40249802 0.0061048679 -0.057568512  0.030154134  -0.28063439  -0.26835581   0.71058133        0.075    1.3728047        1e-10 1.5790696e-11     6.332843    2.4528431    31.520363 -0.0096711868  -0.18677355 -0.0089371731   0.21173514  -0.23578877    1.2495756 
 1176000    4.0321322    1.2850085    2.7471238  -0.23417703   0.85672098     1.008429   0.75181955   -1.2298232            1    -0.164062  -0.37799381  -0.43546303   0.32127084 0.0016501909 -0.038919193 -0.0029502843  -0.31914387  -0.30801023   0.72151439        0.075     1.389414        1e-10 1.6033653e-11    6.2368819    2.4506096    31.520363 0.0039111374  -0.19239324 0.0061440851    0.2084766   0.32700308 -0.058287286 
 1177000     4.033717    1.2892251    2.7444919   -0.2352952   0.85953221    1.0076354   0.75712564   -1.2298232            1  -0.15160905  -0.41537912  -0.41945181   0.38000378 -0.0038640745 -0.098043107 -0.018676871  -0.30778543  -0.29544399   0.72013637        0.075    1.3710714        1e-10 1.600303e-11    6.2488165     2.445757    31.520363 -0.011669006  -0.20319577 0.00076792725   0.18464002  -0.89324838  -0.57952778 
 1178000    4.0276831    1.2754932    2.7521898  -0.23414959   0.85037713    1.0002803   0.74672411   -1.2298232            1  -0.17518741  -0.38540935  -0.44184798   0.30169511 -0.0074474419 -0.057026505  0.041437884  -0.32921821  -0.31797244   0.71160895        0.075    1.3722715        1e-10 1.5813532e-11    6.3236979    2.4362715    31.520363 -0.001197261   -0.1816329 -0.017948579   0.22939587   -1.1597495    2.4894053 
 1179000    4.0270155    1.2861357    2.7408798  -0.22972959   0.85747252    1.0242192   0.74216424   -1.2298232            1  -0.34151468  -0.57150523  -0.57511307   0.12207426 0.0038994267 -0.050159714 -0.0015957869  -0.49460489  -0.48771688   0.70989643        0.075    1.3794454        1e-10 1.5775476e-11    6.3389528    2.4478053    31.520363 0.00065306601  -0.22138645 -0.0002985431   0.18182847   0.87270941    1.4371754 
 1180000    4.0280609    1.2827011    2.7453599  -0.23380917   0.85518262    1.0101438   0.74802983   -1.2298232            1  -0.15223536  -0.42140598  -0.40942864   0.37412855 -0.016315765 0.0031253377 0.0096792183   -0.3065355  -0.29642836   0.71943261        0.075    1.3899653        1e-10 1.5987391e-11    6.2549291    2.4573815    31.520363 -0.0055335793  -0.18968072 -0.012962159    0.2025939  -0.11533534    1.6124061 
 1181000    4.0162638     1.274918    2.7413457  -0.22874849   0.84999362    1.0123373   0.73773153   -1.2298232            1  -0.11544573  -0.38838539  -0.37932144   0.42136962 -0.005287995 -0.031943885 -0.0086876506  -0.26762159  -0.25995185   0.72262584        0.075    1.3916356        1e-10 1.6058352e-11    6.2272891    2.4364658    31.520363 -0.012404772   -0.1759601 -0.011199875   0.19473181 -0.006865811   0.54707956 
 1182000    4.0352894    1.2839065    2.7513828  -0.22685931   0.85598632     1.013199   0.74727554   -1.2298232            1  -0.26328504  -0.50558199  -0.49091931   0.20664617 -0.0078717988 -0.092054146 -0.011923685  -0.41742959  -0.40791416   0.71591718        0.075    1.3841625        1e-10 1.5909271e-11    6.2856433    2.4485338    31.520363 -0.0019266112  -0.21225104 -0.0098207016   0.19596351  -0.50772974    1.0241292 
 1183000    4.0306988    1.2677798    2.7629189   -0.2334561   0.84523456   0.98897546   0.74584539   -1.2298232            1  -0.14209239  -0.41353876   -0.4201777   0.40743928 -0.0029290282 -0.088652647  0.025724161  -0.29594194  -0.28326372   0.71004785        0.075     1.394678        1e-10 1.5778841e-11    6.3376011    2.4433753    31.520363 -0.0041357233  -0.21770668  0.011036877   0.21547101   0.79351814     1.318016 
 1184000     4.031555    1.2796754    2.7518796  -0.23146025    0.8531654    1.0012038   0.75080306   -1.2298232            1  -0.18439469  -0.43120066   -0.4647687   0.34278528 -0.008976334  0.023002016  0.025497528  -0.33926688  -0.32731156   0.71817028        0.075    1.3969408        1e-10 1.5959339e-11    6.2659235    2.4574781    31.520363 -0.0035800118  -0.21441148 0.0015350432   0.20233858  -0.29152833  -0.46220859 
 1185000    4.0459922    1.2869804    2.7590118  -0.21825935   0.85803569    1.0054861   0.75608071   -1.2298232            1  -0.09806269  -0.33846969  -0.34067109   0.38495271 -0.008514255   0.05730349  0.022710902  -0.25402353  -0.24159083   0.71797395        0.075    1.3874793        1e-10 1.5954977e-11    6.2676369    2.4563954    31.520363 -0.0016874171  -0.20485919 -0.0046690721    0.1785519   -1.3597754   0.42414509 
 1186000     4.047659    1.2904081    2.7572508  -0.22644273   0.86032097    1.0163716   0.75241475   -1.2298232            1   -0.1078302  -0.43110949  -0.36179483   0.46941371 0.00032060487 -0.026618817  0.052390265  -0.26303484   -0.2529122   0.71474726        0.075    1.4025127        1e-10 1.5883272e-11    6.2959318    2.4483278    31.520363 -0.0019922283  -0.21025463 -0.0017947432   0.20402011   0.35341397    2.6559406 
 1187000    4.0339842    1.2841528    2.7498314  -0.23077052   0.85615051    1.0134484   0.74738078   -1.2298232            1  -0.18545905  -0.43322007  -0.44932319   0.32616613  0.013261588   -0.1016576  0.015832447   -0.3396253  -0.33012377   0.70582457        0.075    1.4104432        1e-10 1.568499e-11    6.3755219    2.4427058    31.520363 0.0057166896  -0.18085305 -0.0017344287    0.2101925    1.5046952  -0.88186873 
 1188000    4.0317743    1.2825164    2.7492579  -0.22604743   0.85505953    1.0193795   0.74143031   -1.2298232            1  -0.17122113  -0.42207881  -0.39284481   0.30126023  0.017456195  -0.18381522  0.032302161  -0.32415995  -0.31673249   0.70979696        0.075    1.4053995        1e-10 1.5773266e-11    6.3398412    2.4486723    31.520363 -0.0065447444  -0.20486672 -0.0038196318   0.18523742    2.0225893    1.5589931 
 1189000    4.0275398    1.2786893    2.7488505  -0.22918943   0.85250798    1.0230437   0.73457716   -1.2298232            1  -0.20515493  -0.47481071  -0.43466909   0.29401501 0.0016637111 0.0063389107 -0.026416485  -0.35668012  -0.35118933   0.72569071        0.075    1.3931732        1e-10 1.612646e-11    6.2009888    2.4617334    31.520363 -0.0016331106   -0.2022505  0.010454621   0.22421475   0.50193147    1.0211343 
 1190000    4.0321573    1.2844024    2.7477549  -0.22958036   0.85631689    1.0034315   0.75459413   -1.2298232            1  -0.12877773  -0.37278897  -0.38102202    0.3674778 -0.024966041   0.08046893 0.0002298185  -0.28443193  -0.27201259   0.71312437        0.075    1.4140794        1e-10 1.5847208e-11    6.3102598    2.4464418    31.520363 0.0031016442  -0.21941662 -0.0020585362   0.17659576  -0.74487776    1.9386976 
 1191000    4.0278364    1.2723375    2.7554989  -0.22532988   0.84827318   0.99803815   0.74471558   -1.2298232            1 -0.093205485  -0.34869732  -0.34532103   0.41440189 0.0029590294 -0.036180116  0.019885555  -0.24682198  -0.23567047    0.7064683        0.075    1.4092363        1e-10 1.5699296e-11    6.3697126    2.4445695    31.520363 0.0025572009  -0.20170176 0.00060909879   0.18430106    0.1746589    3.1059378 
 1192000    4.0210972    1.2853197    2.7357775  -0.23379775    0.8569285    1.0092148   0.75162691   -1.2298232            1   -0.2478243  -0.47676499  -0.47805334   0.21134543 0.0012031606 -0.038655756 0.0020777599  -0.40286643  -0.39188469   0.71444933        0.075    1.3968751        1e-10 1.5876652e-11    6.2985572     2.441908    31.520363 -0.0020458933  -0.19703123 0.0057616835   0.18124144   0.60362357  -0.71786682 
 1193000     4.029961    1.2801241    2.7498369   -0.2418979   0.85346452    1.0123841   0.74357234   -1.2298232            1  -0.25586483  -0.51050533  -0.48235365   0.22526448 -0.0041000588 -0.043243165 0.0012492606   -0.4092455  -0.40037762    0.7223572        0.075    1.4036926        1e-10 1.6052382e-11     6.229605    2.4394384    31.520363 -0.0029065468  -0.20735235 0.00020178766   0.18974591   0.95357224   -1.0227301 
 1194000    4.0403782    1.2768005    2.7635777  -0.22128683   0.85124867    1.0023864   0.74674137   -1.2298232            1  -0.21694843  -0.47711667  -0.47669265   0.30296404  0.010382811  0.034383726 -0.024615516  -0.37098279   -0.3600341   0.71404531        0.075    1.4143823        1e-10 1.5867673e-11    6.3021211    2.4525812    31.520363 -0.00094897723  -0.19692273 -0.0029425929    0.2015884  -0.08701781   0.46464168 
 1195000    4.0188983    1.2795251    2.7393732  -0.23320201   0.85306519    1.0028041   0.74952612   -1.2298232            1  -0.11903088  -0.36349801  -0.40678018   0.41318556  0.010653329 -0.022190216 -0.026859734  -0.27363966  -0.26217617   0.71081425        0.075    1.4260839        1e-10 1.5795872e-11    6.3307678    2.4425159    31.520363 -0.011214739   -0.1875615 0.00031101584   0.21828852   0.24799533    1.6623581 
 1196000    4.0176698    1.2794098      2.73826  -0.23595542   0.85298832    1.0020808   0.74989655   -1.2298232            1    -0.156495  -0.40597918  -0.42936817   0.36586236 0.0013309606 -0.043936228   0.05219916   -0.3111802  -0.29953705    0.7177887        0.075     1.423046        1e-10 1.595086e-11    6.2692545    2.4508304    31.520363 -0.0023669458  -0.19386705 -0.009611378   0.20378732    -1.579927   0.55799808 
 1197000    4.0267837    1.2783797     2.748404  -0.22700747   0.85230156   0.98815184   0.75837348   -1.2298232            1  -0.23434528  -0.44345713  -0.47806642    0.2184877  0.015650914 -0.0038961409 -0.019660874  -0.39077907  -0.37539904   0.72152177        0.075     1.423354        1e-10 1.6033817e-11     6.236818    2.4609318    31.520363 -0.0067029904   -0.1971595 0.0018750297   0.18826416    2.7073867    1.0699584 
 1198000    4.0220046    1.2777338    2.7442707  -0.22995869   0.85187093   0.99042811    0.7560696   -1.2298232            1  -0.12235343   -0.3904799   -0.3810443    0.4044639 -0.009917747 -0.0033550188  0.010235681  -0.27831198  -0.26373212   0.72002806        0.075    1.4181928        1e-10 1.6000624e-11    6.2497564    2.4422986    31.520363 0.0057173248  -0.19481118 -0.012800387   0.23668926   0.76658797    1.8450103 
 1199000    4.0097129    1.2701871    2.7395259  -0.23052221   0.84683948    0.9867268   0.75011719   -1.2298232            1  -0.20916886  -0.43822194  -0.42959328   0.24030865 -0.0091108518  -0.04941385 -0.010295133  -0.36389957   -0.3500192   0.72210188        0.075    1.4177625        1e-10 1.6046708e-11    6.2318076    2.4464004    31.520363 0.0040383703  -0.19445806 -0.013023731   0.19086306    0.2049232   0.34671419 
 1200000    4.0177821    1.2728632    2.7449189    -0.224856   0.84862369   0.98156128   0.75671087   -1.2298232            1  -0.14601935  -0.35931742  -0.38976279   0.31102217 -0.0094453593 -0.025404704 0.00076645495  -0.30211017  -0.28613233   0.71884171        0.075    1.4229552        1e-10 1.597426e-11    6.2600708    2.4484778    31.520363 -0.0037625249  -0.21415532 0.0030655112   0.19456247   -1.2069342   0.28981745 
 1201000    4.0068396    1.2746469    2.7321927  -0.22387539   0.84981287   0.99644272   0.74842495   -1.2298232            1  -0.16006979  -0.39888459  -0.43023465   0.34890986  0.012316129 -0.066909456  0.010706255  -0.31445144  -0.30230703   0.71739571        0.075       1.4171        1e-10 1.5942127e-11    6.2726888       2.4499    31.520363 0.0011919533  -0.19909971 0.0098536249   0.20326064   0.70248839    1.1818342 
 1202000    4.0147444    1.2782655    2.7364789  -0.22908047   0.85222542   0.98798901   0.75835731   -1.2298232            1 -0.035267467   -0.3426865  -0.30360098   0.54048508 -0.0088307014 0.0044176556  -0.01516161  -0.19169791  -0.17629798   0.72171442        0.075    1.4161695        1e-10 1.6038098e-11    6.2351532     2.440128    31.520363 -0.0024442889  -0.20359174 -0.0028059558   0.21278062    1.9506757    5.0275348 
 1203000    4.0074952    1.2659973    2.7414979  -0.23889566   0.84404613   0.98218893   0.74853081   -1.2298232            1   -0.0801254  -0.34754303  -0.37391698   0.48108381  0.010054784 -0.054693575  0.024622675  -0.23452888  -0.22032798   0.72099421        0.075    1.4299957        1e-10 1.6022094e-11    6.2413816    2.4488304    31.520363 0.0061011206  -0.19970025 0.0023464444   0.22937899  0.082341516     2.332437 
 1204000    4.0069101    1.2772028    2.7297073  -0.23204397   0.85151691   0.99928341   0.74934259   -1.2298232            1  -0.23669707  -0.45705587   -0.4755491   0.22251375 -0.0063593113 -0.016400702  0.047995262    -0.391268  -0.37933981   0.71696027        0.075    1.4281792        1e-10 1.5932451e-11    6.2764984    2.4452244    31.520363 -0.0032602929  -0.17987354 -0.006293367   0.18319578   -1.3606842   0.11381409 
 1205000    4.0049107    1.2706494    2.7342613  -0.23510998   0.84714774   0.98337492   0.75295834   -1.2298232            1  -0.14176424  -0.38928548  -0.40874871   0.37274148  0.024376351  0.023267098 -0.044764885  -0.29708101  -0.28213611   0.71940279        0.075    1.4283025        1e-10 1.5986729e-11    6.2551884    2.4496447    31.520363 -0.00057000342   -0.2071487 0.0090557273   0.21059294   0.11883367   0.38496926 
 1206000    4.0083486     1.277849    2.7304996  -0.23823946   0.85194774   0.99807758   0.75090604   -1.2298232            1  -0.14743317  -0.42238873  -0.40752218   0.38761141 -0.0070588951  0.061731189  0.028021282   -0.3023266  -0.28990378   0.72208082        0.075    1.4287491        1e-10 1.604624e-11    6.2319894    2.4458974    31.520363 -0.0069060508  -0.19513876 0.0016345657   0.18637277   0.47784848    0.2149625 
 1207000    4.0242992    1.2844488    2.7398504  -0.22986005   0.85634783   0.98866744    0.7648634   -1.2298232            1  -0.10564292  -0.35795817  -0.38814927   0.42917869 0.00096418377 -0.069378981 -0.013382296  -0.26341541  -0.24677027   0.72192231        0.075    1.4361953        1e-10 1.6042718e-11    6.2333578     2.441346    31.520363 -0.0073850408  -0.18739146 -0.0059176022   0.22285893   0.84600526   0.88603515 
 1208000    4.0305608    1.2803815    2.7501794  -0.23341299   0.85363614   0.98581298   0.76225025   -1.2298232            1  -0.15606896  -0.37366165  -0.41562694    0.3210817 0.0028281664 -0.054157179   0.03315968  -0.31330243  -0.29678886   0.71953966        0.075    1.4207893        1e-10 1.598977e-11    6.2539986    2.4672376    31.520363 7.276478e-05  -0.18121679 -0.00064204895   0.19738323  -0.73677844   0.65286601 
 1209000    4.0384421    1.2905058    2.7479363  -0.22877898   0.86038605   0.98870634   0.77166958   -1.2298232            1   -0.1093615  -0.38514619  -0.36718769   0.42424937  -0.01645646  0.036193131 -0.029854383  -0.26853794  -0.25049441   0.71422567        0.075    1.4409409        1e-10 1.5871681e-11    6.3005297    2.4422773    31.520363 0.0081456127  -0.19119262 0.0069445705   0.18969457   -1.6164092    1.1365344 
 1210000    4.0095192    1.2806234    2.7288958    -0.237789   0.85379741   0.99951173   0.75304343   -1.2298232            1  -0.26657035  -0.47259166  -0.47960544   0.15248606 -0.0068771828   0.10970985  0.039500385  -0.42190467  -0.40924567   0.72055012        0.075    1.4389035        1e-10 1.6012225e-11    6.2452283    2.4485962    31.520363 -0.0040164542  -0.17974763 0.0040439983     0.173287  -0.14151463    1.2303204 
 1211000    4.0132558    1.2776886    2.7355672  -0.23050071   0.85184081    1.0006562   0.74894067   -1.2298232            1 -0.058629851  -0.31051648  -0.33708524   0.47171217 -0.018483155 -0.022285186  -0.01986792  -0.21311788  -0.20146855   0.72447798        0.075     1.430344        1e-10 1.6099511e-11    6.2113689    2.4532099    31.520363 0.0069158387  -0.21675628 -0.001899488   0.17152858   0.50533734     1.342135 
 1212000    4.0228079    1.2819614    2.7408466  -0.23383373   0.85468947    1.0047064   0.75095812   -1.2298232            1  -0.23185214  -0.46594193  -0.45174188   0.22212739 0.0036159874 -0.022227474   0.01122315  -0.38675632  -0.37526898   0.72172491        0.075    1.4210395        1e-10 1.6038331e-11    6.2350626    2.4772903    31.520363 -0.012680299   -0.1975036 -0.00062186124   0.19639015   -0.6591156   0.41509592 
 1213000    4.0117062    1.2750198    2.7366864  -0.23492684   0.85006146   0.99037251   0.75304625   -1.2298232            1   -0.1921544  -0.46074902  -0.42087008   0.30515591 0.00051719712 -0.031413863 -0.0056788156   -0.3474893  -0.33352514   0.71422078        0.075    1.4135883        1e-10 1.5871573e-11    6.3005728    2.4531858    31.520363 -0.0053481235  -0.20867615 0.0018211882   0.19013545  -0.53228587    2.2417359 
 1214000    4.0139329    1.2697686    2.7441643  -0.23684192   0.84656049   0.99060513   0.74696126   -1.2298232            1   -0.1466812  -0.38420742  -0.39345877    0.3376226 -0.0081204619 -0.064690175 -0.042367856  -0.30076092  -0.28808515   0.71648638        0.075    1.4160683        1e-10 1.592192e-11    6.2806497    2.4573335    31.520363 -0.0057150555  -0.21478826 0.0054418735   0.17763055   0.46944396   -0.1133661 
 1215000    4.0088393    1.2665493      2.74229  -0.23613061   0.84441415     1.008943   0.73063939   -1.2298232            1  -0.11842098  -0.36357565  -0.37286551   0.38117821 -0.016702697  0.017283819 -0.069444047   -0.2691339  -0.26244258   0.72527499        0.075    1.3926221        1e-10 1.6117222e-11    6.2045432     2.446482    31.520363 0.0030259063  -0.22468479  0.012476858   0.18052017  -0.42421583    2.7003336 
 1216000    4.0193744     1.280497    2.7388774  -0.22845989   0.85371314    1.0068666   0.74781121   -1.2298232            1  -0.13365962  -0.38465053  -0.38702881   0.37070049 0.0049092178  -0.12872731 -0.0030443804  -0.28791466  -0.27738481   0.72450031        0.075    1.3897245        1e-10 1.6100007e-11    6.2111775     2.459575    31.520363 -0.0048147714  -0.19786211 -0.014551509   0.23876888    2.0598973  -0.28508998 
 1217000     3.989267    1.2559456    2.7333214    -0.235729   0.83734466    0.9838823   0.73601935   -1.2298232            1  -0.13368522  -0.41165346  -0.41037817   0.42097595 0.0024088402  -0.05918429  0.024828509   -0.2855079  -0.27412953   0.71448897        0.075    1.3935932        1e-10 1.5877533e-11    6.2982078    2.4457418    31.520363 -0.00013879812  -0.18811984   0.00324856   0.19413963   0.67440034    2.1580801 
 1218000      3.98571    1.2716902    2.7140198  -0.23859029   0.84784162   0.99706118   0.74466141   -1.2298232            1  -0.14913871  -0.40305672   -0.4034477   0.35908829  0.011984214 -0.017968317 0.0010094567  -0.30274403  -0.29146423    0.7099075        0.075    1.4005514        1e-10 1.5775722e-11     6.338854    2.4376668    31.520363 -0.00010380135  -0.18053458 -0.012586881   0.20755207   0.72215225    1.8267962 
 1219000    4.0091546    1.2755318    2.7336228  -0.23314771   0.85040286   0.99613515   0.74963613   -1.2298232            1  -0.11275615  -0.36526967  -0.37181784   0.39881907  0.016253738  -0.02689848  0.022613808  -0.26738763  -0.25494948   0.71668933        0.075    1.4052667        1e-10 1.5926429e-11    6.2788712    2.4376164    31.520363 0.0042581887  -0.18568713 -0.0052550278   0.18734409  -0.26533486     1.712786 
 1220000     4.008048    1.2786048    2.7294433  -0.23162638    0.8524516    1.0098685   0.74359915   -1.2298232            1  -0.16600649  -0.40144046   -0.4062005    0.3096215 -0.015547087 -0.020318101 -0.011027681  -0.31939269   -0.3101602   0.72137578        0.075    1.4074589        1e-10 1.6030573e-11    6.2380802    2.4384786    31.520363 0.0098446902  -0.21731397 -0.00071571553   0.20020326   0.36492263    1.4415417 
 1221000    4.0170137    1.2764499    2.7405638  -0.23858212   0.85101494   0.98770679   0.75650436   -1.2298232            1  -0.12421888  -0.40913899  -0.38967531   0.42615766 -0.0020820257 0.0010200008  0.011615079  -0.28026711  -0.26520911    0.7224968        0.075      1.38792        1e-10 1.6055484e-11    6.2284013     2.441151    31.520363 -0.0061400425  -0.20493677   0.00363752   0.17386887   0.33777063    1.9310863 
 1222000    4.0157477    1.2778892    2.7378585  -0.22785847   0.85197455   0.99655256   0.75200675   -1.2298232            1 -0.074116611  -0.33507766  -0.37828794   0.49101577 -0.012743556 -0.043978703 -0.00073587829  -0.22923709  -0.21636953   0.71305295        0.075    1.4017487        1e-10 1.5845621e-11    6.3108918    2.4378056    31.520363 0.00059336052  -0.18888982 -0.0025405593    0.2095471  -0.26038979    2.1618286 
 1223000    4.0070384     1.271285    2.7357534  -0.22810405   0.84757146   0.99818501   0.74342657   -1.2298232            1  -0.12496266  -0.41263365  -0.38882796   0.42657363 -0.013445666 -0.049311461 -0.0087137095  -0.27831326   -0.2674486   0.70904182        0.075    1.3998624        1e-10 1.5756485e-11    6.3465932    2.4416761    31.520363 -0.0019746099  -0.21507124 -0.0031413666   0.21285599    0.7617332   0.33730094 
 1224000    4.0085032    1.2734565    2.7350467  -0.23401747   0.84901921    1.0087905    0.7385372   -1.2298232            1  -0.18736628  -0.41060533    -0.453524   0.30203047 -0.0029888852  0.046707682  0.030741892  -0.33970833   -0.3313661   0.72121808        0.075    1.4081722        1e-10 1.6027068e-11    6.2394443    2.4676402    31.520363 0.0017341902  -0.20599889 0.0032275458    0.2051474   -0.1115742    2.7373991 
 1225000    4.0199439    1.2838758    2.7360681  -0.23322043   0.85596582    1.0047385   0.75309564   -1.2298232            1  -0.17414117  -0.42227679  -0.40708948   0.30694276 -0.0089545667 -0.017588385  0.016410003  -0.32948626  -0.31756259     0.719467        0.075    1.4045884        1e-10 1.5988156e-11    6.2546302     2.448131    31.520363 -0.0039410985  -0.19540048 -0.010321153   0.19298078   0.44221319   0.23591574 
 1226000    4.0035751    1.2648044    2.7387706  -0.22973057   0.84325085   0.99531884   0.73809904   -1.2298232            1  -0.13176792  -0.38485332  -0.38656101   0.37611056 -0.0034989558   0.06729462 -0.016087339  -0.28401959  -0.27384473   0.71506329        0.075    1.3979069        1e-10 1.5890295e-11    6.2931492    2.4409219    31.520363 0.0015450974   -0.2141647  -0.01605738   0.20918595   0.56507577    2.1809694 
 1227000    4.0072535    1.2801926    2.7270609  -0.24012624   0.85351023   0.99746921   0.75397095   -1.2298232            1  -0.13634796  -0.35661743  -0.41846637   0.36603993 -0.0051774912  0.097560035  -0.00671978  -0.29187361  -0.27873173   0.71116993        0.075    1.3890912        1e-10 1.5803776e-11    6.3276016    2.4430319    31.520363 -0.0014492171  -0.20046435 -0.012690707   0.19369729    -1.986283   0.83979597 
 1228000    4.0313817    1.2703952    2.7609865  -0.22936917   0.84697827   0.98239799   0.75334763   -1.2298232            1    -0.124805  -0.38541487  -0.36664618   0.37764605 -0.0026374578  0.077666145 -0.012111711  -0.28020207  -0.26503742   0.71407743        0.075    1.4037046        1e-10 1.5868387e-11    6.3018376     2.441875    31.520363 0.0036915487  -0.19618734 -0.0013282767   0.20414681  -0.14831545   0.03049272 
 1229000    4.0218946    1.2785705    2.7433241  -0.22916969   0.85242877    1.0012689   0.74951156   -1.2298232            1  -0.16645866  -0.40484953  -0.43769916   0.34317271 0.00035559672   0.14851057 -0.057554781  -0.32106445  -0.30938481   0.71912608        0.075    1.4095251        1e-10 1.5980579e-11    6.2575954    2.4468215    31.520363 -0.0063991233  -0.21012139  -0.00775886   0.21104087  -0.58358196  -0.31107706 
 1230000    4.0283884    1.2938881    2.7345002  -0.23521909   0.86264108    1.0112388   0.75989264   -1.2298232            1  -0.11558139  -0.37814142  -0.37342377   0.40482102 -0.012403767  0.093379166   0.06127852  -0.27232854  -0.25993069   0.71923324        0.075    1.3934521        1e-10 1.5982961e-11     6.256663    2.4483194    31.520363 -0.0086756531   -0.2040073 -0.00073448992   0.17782273    1.2854683    1.9855561 
 1231000    4.0314701     1.296007    2.7354631   -0.2188624   0.86405378    1.0123432   0.76151878   -1.2298232            1  -0.12616317  -0.39858165  -0.38162901   0.40172115 -0.013058165  0.019204341 -0.022936023  -0.28324575  -0.27067013   0.71377246        0.075    1.3984467        1e-10 1.586161e-11    6.3045302    2.4539399    31.520363 -0.0064775583  -0.21706473 0.0013286798    0.2204861  -0.75760486  -0.64759467 
 1232000    4.0207651    1.2789557    2.7418095  -0.23502754   0.85268555    1.0034013   0.74847042   -1.2298232            1  -0.14192254  -0.38901526  -0.39287573   0.35612337 0.0052533135  0.077731256   0.02837456  -0.29631356  -0.28515308    0.7116716        0.075    1.4029145        1e-10 1.5814925e-11    6.3231411    2.4358173    31.520363 -0.00061255982   -0.1984417 0.0063895322   0.21409188  -0.19931759    1.5468122 
 1233000    4.0305465    1.2846727    2.7458738  -0.22599183   0.85649713    1.0093635   0.75079409   -1.2298232            1  -0.12380371  -0.42364967  -0.36517358   0.41741212 0.0059531226  0.066970881  0.012531539  -0.27867405  -0.26788533   0.71956844        0.075    1.4091593        1e-10 1.599041e-11    6.2537484    2.4484851    31.520363 0.0018417918  -0.19351737 -0.0014437999   0.16995179    1.1455238  -0.84911806 
 1234000    4.0157819    1.2789073    2.7368747   -0.2331672   0.85265328    1.0051409   0.74721196   -1.2298232            1  -0.14319349  -0.39439505  -0.39402774   0.35884233 0.0018987385  0.065118625  0.019719116  -0.29732492  -0.28667236   0.72188606        0.075    1.4179048        1e-10 1.6041912e-11    6.2336707    2.4398464    31.520363 -0.0081988928  -0.20191687 -0.0022729495   0.22566737   0.75361133   0.55118254 
 1235000    3.9827216    1.2633498    2.7193718  -0.23900575   0.84228107   0.98711108   0.74213795   -1.2298232            1   -0.2343423  -0.49167301  -0.47483339   0.26347951 -0.0064061163  0.062464184 -0.033630586  -0.38742709  -0.37524749   0.71463973        0.075    1.4100335        1e-10 1.5880883e-11    6.2968791    2.4472107    31.520363 0.0025545755  -0.21480901  0.006189903    0.2153393   -1.3868117   -0.2203469 
 1236000    3.9906339    1.2637514    2.7268825  -0.23774336    0.8425488   0.99199488   0.73921133   -1.2298232            1   -0.1309622   -0.4185634  -0.38638747   0.41206429 -0.0062270748  0.016280425 -0.0065832907   -0.2834433  -0.27256453   0.70911573        0.075    1.4071678        1e-10 1.5758127e-11    6.3459317    2.4428286    31.520363  0.011842372  -0.19160407 -0.0018832504    0.1684578  -0.90487174   -0.8187974 
 1237000    4.0102626    1.2748244    2.7354382  -0.22688543   0.84993123   0.98713557   0.75506589   -1.2298232            1  -0.17188053  -0.41841232  -0.43837477   0.34114551 -0.0056374588  0.030858891  0.051156902  -0.32763203  -0.31278922   0.71361963        0.075     1.408165        1e-10 1.5858214e-11    6.3058803    2.4484024    31.520363 -0.0056659038  -0.20380956 -0.0086566924   0.22370971   0.25984896  -0.62433494 
 1238000    4.0110503    1.2608126    2.7502377  -0.23327637   0.84058952   0.98301205   0.74211223   -1.2298232            1  -0.12297857  -0.38181827  -0.36740155   0.38028412 -0.0046442953 -0.0027160037  0.046529803  -0.27605805  -0.26329864   0.72202409        0.075    1.4008585        1e-10 1.604498e-11     6.232479    2.4541642    31.520363 -0.014450302  -0.19827759 -0.0082196399   0.17637056  -0.25888073    2.3407445 
 1239000    4.0160698    1.2798223    2.7362475  -0.23168956   0.85326333    0.9923398   0.75710278   -1.2298232            1   -0.2058384  -0.42669774  -0.44092638   0.25010891 -0.0093782598  -0.10012728 -0.047741844  -0.36201007  -0.34748997   0.72139884        0.075    1.3987589        1e-10 1.6031085e-11    6.2378808     2.433751    31.520363 -0.0062305546  -0.19942539 -0.013980998   0.22216414   0.10264857  -0.67704432 
 1240000    4.0091784    1.2705419    2.7386365   -0.2316841   0.84707605    1.0033518   0.73901281   -1.2298232            1  -0.18070998  -0.38857422  -0.45110124   0.29754553 -0.0045248545  -0.01642029  0.029460848  -0.33315013  -0.32393345   0.71794023        0.075    1.4273368        1e-10 1.5954227e-11    6.2679313    2.4522525    31.520363 -0.0083533027  -0.17724214 -0.0039578368   0.20043499   0.93822036   -2.0485499 
 1241000    4.0073653    1.2755351    2.7318302  -0.23324455   0.85040503   0.98738161   0.75569735   -1.2298232            1  0.037032496  -0.26896219  -0.24715515   0.62721483 0.00069463384 -0.087048603 -0.0051782407  -0.11884927  -0.10391132    0.7130116        0.075    1.4341245        1e-10 1.5844702e-11    6.3112578    2.4334078    31.520363 -0.0031390369   -0.1862125 -0.0030854455   0.18173226    1.1302933     3.840056 
 1242000    4.0205146    1.2796696     2.740845  -0.22954692   0.85316151    1.0015137   0.75058206   -1.2298232            1  -0.14238465  -0.40446824  -0.39517801   0.37249229 -0.0090415363  0.013711747  0.009024945  -0.29721126  -0.28534575   0.71262008        0.075     1.431169        1e-10 1.5836002e-11    6.3147252    2.4471791    31.520363 -0.0078473926  -0.19840654 -0.0040399819   0.20708867  -0.65081164    1.2697375 
 1243000    3.9987213    1.2777309    2.7209903  -0.22677799   0.85186901    1.0031037    0.7472947   -1.2298232            1 -0.070234775  -0.31599636   -0.3361989   0.44149093 -0.006842607 -0.010720414  0.069003382  -0.22438328  -0.21342284   0.71753128        0.075    1.4269637        1e-10 1.594514e-11    6.2715035    2.4570971    31.520363 0.0041620305  -0.20532823 0.0012821749   0.17271905  -0.46248628    2.0245384 
 1244000    4.0211428    1.2765075    2.7446353  -0.22638977   0.85105334    0.9966485   0.75038157   -1.2298232            1  -0.12791518  -0.40277033  -0.36415664   0.38318142 0.0069672029 0.0050350789 -0.0033481727  -0.28270043   -0.2701818   0.71728557        0.075    1.4205623        1e-10 1.5939679e-11    6.2736519    2.4415378    31.520363 -0.0071153562  -0.19692666 0.00032048412   0.18220598  -0.83091823  -0.79656746 
 1245000    4.0378113    1.2781262    2.7596851  -0.22977193   0.85213254   0.98601654   0.75956513   -1.2298232            1 -0.092587723  -0.36360368  -0.35216774   0.43800825 0.0022340365  -0.10581854  0.029689638  -0.24926731  -0.23333668   0.71839703        0.075    1.4118388        1e-10 1.5964379e-11    6.2639457    2.4408814    31.520363  0.001199614  -0.18618342 0.0060695689   0.21534847   0.23953107    1.3292238 
 1246000     4.004436    1.2762695    2.7281665  -0.23518771   0.85089465   0.99450542   0.75159607   -1.2298232            1 -0.082602738  -0.35672789   -0.3258508   0.43477048 -0.012511316 -0.037626331  0.076498846  -0.23763851  -0.22456344   0.72497314        0.075    1.4079101        1e-10 1.6110514e-11    6.2071265    2.4421333    31.520363 -0.00025728635  -0.22410822 -0.005151567   0.18630467   0.77832671    2.1226646 
 1247000    4.0082375    1.2710952    2.7371424  -0.22494168   0.84744491   0.99393436   0.74615393   -1.2298232            1  -0.15577799  -0.42239588  -0.41480994   0.36987184 9.1404053e-05 -0.054185892  0.016253221  -0.30969118  -0.29765718   0.71572745        0.075    1.3928919        1e-10 1.5905054e-11    6.2873095    2.4305145    31.520363 0.0042376256  -0.20152379 0.0061771119    0.2183864   0.88233874    1.4797997 
 1248000    4.0274855    1.2790496    2.7484359  -0.22094949   0.85274817    1.0009011   0.75030655   -1.2298232            1  -0.20329102  -0.41949375  -0.46473043   0.27435112 -0.012240107 -0.031240689 -0.039074606  -0.35806079  -0.34616467   0.71002089        0.075    1.4078036        1e-10 1.5778242e-11    6.3378417    2.4443835    31.520363 0.0045620422  -0.19787172 0.00031762606   0.20352884  -0.46432448  0.095229091 
 1249000    4.0230084      1.27377    2.7492384  -0.22391531   0.84922826   0.99805709   0.74631858   -1.2298232            1  -0.16247675   -0.4149526  -0.41883636   0.34635872  0.006243984   0.01196413 -0.013300247   -0.3164239  -0.30494443   0.71665158        0.075     1.394876        1e-10 1.5925591e-11     6.279202    2.4477207    31.520363 -0.0053983003     -0.20818 -0.002105568   0.19857442   0.55059226   -1.5095424 
 1250000    4.0086697    1.2679081    2.7407616  -0.22356754   0.84532009     1.007067   0.73347058   -1.2298232            1 -0.084411001  -0.36736556  -0.36262039   0.47675295 -0.010690523 0.0033222889  0.012608079  -0.23570793   -0.2281648    0.7229816        0.075    1.3864279        1e-10 1.6066258e-11    6.2242248    2.4499821    31.520363 -0.0073903286  -0.19558422 -0.014476989   0.22468754   0.50192432    2.5079412 
 1251000    4.0315047     1.276874    2.7546307  -0.22205979   0.85129769    1.0046186   0.74527962   -1.2298232            1  -0.20545897  -0.44727524    -0.427648   0.25854633 -0.0040026574   0.06277609 -0.034473027  -0.35919181  -0.34886328   0.71581812        0.075    1.3884394        1e-10 1.5907069e-11    6.2865131    2.4327348    31.520363 -0.0077933954  -0.20237051 -0.011431097   0.22134045    0.5910545 -0.081671619 
 1252000    4.0197691    1.2871391      2.73263  -0.23191548   0.85814147    1.0063679   0.75564949   -1.2298232            1  -0.15264952  -0.43284024   -0.3974715   0.37236317 0.0084734614  0.017267638 -0.024226955  -0.30852141  -0.29630353   0.70955768        0.075    1.3913316        1e-10 1.5767948e-11    6.3419791     2.448603    31.520363 -0.0006443639  -0.19481998 -0.0034533947   0.18367545  -0.15539594   -2.1960576 
 1253000    4.0138759    1.2740869     2.739789  -0.22678655   0.84943952   0.99529365   0.74858838   -1.2298232            1 -0.082440685  -0.35513345  -0.35852343   0.46633483  -0.02756003 -0.025212656 -0.038964328  -0.23685604   -0.2245139   0.71199674        0.075    1.3855736        1e-10 1.582215e-11    6.3202536    2.4423818    31.520363 0.0060503684   -0.1766929 0.0080691807   0.19966801   0.90824159   0.69755062 
 1254000    4.0280998    1.2748235    2.7532763  -0.23083652    0.8499306   0.99961717   0.74642741   -1.2298232            1  -0.20886174  -0.46201584  -0.45826382   0.29369443 0.0058978058   0.08190566  0.008323735  -0.36283134  -0.35155212   0.71947748        0.075    1.3856411        1e-10 1.5988388e-11     6.254539     2.436149    31.520363 -0.0078862668  -0.20387482 0.0062537541   0.21364995  -0.33098623    1.2285682 
 1255000    4.0192906    1.2827742    2.7365164  -0.23355307   0.85523137     1.006241    0.7508131   -1.2298232            1  -0.15194766  -0.41934383  -0.39672752   0.36022837 -0.0091800881  -0.02594714 0.0067516742  -0.30682192  -0.29558356    0.7183063        0.075    1.3842312        1e-10 1.5962362e-11    6.2647369    2.4426136    31.520363 0.0086373761  -0.21829317 -0.00082971955   0.17495567   -1.4295462  0.069300557 
 1256000     4.023267    1.2727422    2.7505248  -0.23110937   0.84854301   0.99488257   0.74735586   -1.2298232            1  -0.18029561  -0.41925825  -0.43054222   0.30891364 -0.0058765911  0.092809757  0.034737424  -0.33445673  -0.32231015   0.71574162        0.075    1.3918751        1e-10 1.5905369e-11    6.2871851    2.4498099    31.520363 -0.0069936263  -0.18194787  0.003722228   0.21321988   -1.0268495    1.3923493 
 1257000    4.0179742     1.281268    2.7367061  -0.23041996   0.85422722   0.99962553   0.75369197   -1.2298232            1  -0.13368717  -0.39871145   -0.3796293   0.37727923 -0.003355317  0.053231281  0.005706184  -0.28915527  -0.27637874   0.71911734        0.075    1.4038089        1e-10 1.5980385e-11    6.2576714    2.4478286    31.520363 -0.011531871  -0.22056994 -0.013247274   0.18900492  -0.10893985    2.7431088 
 1258000    4.0077574    1.2772841    2.7304733   -0.2293882   0.85157109    1.0079727   0.74342114   -1.2298232            1  -0.22194212  -0.44424286  -0.46260237   0.24101888 -0.00010096231  0.037709796  0.020185352   -0.3752916  -0.36582521   0.71667208        0.075    1.4057202        1e-10 1.5926046e-11    6.2790224    2.4379014    31.520363 0.0017779584  -0.20349752 -0.0014810837   0.19780781   -1.0093227   -1.1213579 
 1259000    4.0320499    1.2923948    2.7396551  -0.23425074   0.86164547    1.0017077   0.76480352   -1.2298232            1  -0.13356733  -0.38019311    -0.388019   0.36751011  0.025387195 -0.062535533  0.013206399  -0.29132747  -0.27655613   0.71617209        0.075    1.4234497        1e-10 1.5914935e-11    6.2834059    2.4406631    31.520363 0.0059383548  -0.18759161  0.003622321   0.18655777  -0.11430545    1.1682687 
 1260000    4.0112125    1.2705717    2.7406408  -0.23273526   0.84709592    0.9982595   0.74257035   -1.2298232            1 -0.096680174  -0.34849311  -0.38794539   0.44639797  0.014308743  -0.07337297 -0.060273408  -0.24985416  -0.23917675   0.72156849        0.075    1.4089333        1e-10 1.6034855e-11    6.2364143    2.4421936    31.520363 -0.006057383  -0.20399417 0.0043945695   0.20413754   0.93269097   0.34257191 
 1261000    4.0200457    1.2752324    2.7448132  -0.22467449   0.85020325    1.0016508   0.74548148   -1.2298232            1 -0.094818656  -0.35057746  -0.37966215   0.44578364 -0.010944615  0.015771485  0.041204192  -0.24859313  -0.23779932   0.72300813        0.075    1.4096313        1e-10 1.6066847e-11    6.2239964    2.4539526    31.520363 -0.0072170525  -0.21205272 -0.00054229194   0.19915812  -0.55263562    1.6650544 
 1262000    4.0039267    1.2724983    2.7314284  -0.23616772   0.84838042    1.0050553   0.74004106   -1.2298232            1  -0.11653454  -0.33283658  -0.40798182   0.39121479 0.0032303274 -0.066411493  0.020022636  -0.26918679  -0.26000118   0.71758962        0.075    1.3853532        1e-10 1.5946436e-11    6.2709937    2.4397188    31.520363 -0.00090330377  -0.19921002 -0.0025596008    0.1917377   0.14128223    2.7460328 
 1263000    4.0179963    1.2787817    2.7392145  -0.23391183   0.85256957    1.0038233   0.74798213   -1.2298232            1  -0.19364905   -0.4667694  -0.42071003   0.30653228  0.029650624   -0.0387066  0.008234218  -0.34793935  -0.33693983   0.71543322        0.075    1.3860853        1e-10 1.5898516e-11    6.2898952    2.4511685    31.520363 -0.001673033  -0.19275265 0.0083146408    0.2013181   0.30538214   0.42982848 
 1264000    4.0019665    1.2758479    2.7261186  -0.23440376    0.8506136    1.0101234   0.74031267   -1.2298232            1  -0.16844397   -0.4641932  -0.39395915   0.35282044 0.0032825442 0.0036741151 -0.015085805  -0.32115225  -0.31263407   0.71510853        0.075    1.3987889        1e-10 1.5891301e-11    6.2927511    2.4397629    31.520363 -0.009498664  -0.23261912 -0.0021003884   0.19795963   0.12707792   -1.7284713 
 1265000    4.0195837    1.2796567     2.739927  -0.22694475   0.85315292    1.0014301   0.75062538   -1.2298232            1  -0.12948144  -0.39258437  -0.38147611   0.38561617 -0.0022416166 -0.092802158 0.0075690477  -0.28431698   -0.2724306   0.71727358        0.075    1.4066936        1e-10 1.5939413e-11    6.2737568    2.4466135    31.520363 -0.0093155902  -0.21583383 -0.0010860577   0.17326549    0.7695981   0.03551772 
 1266000    4.0071012    1.2794092     2.727692  -0.23106886    0.8529879    1.0007523   0.75081515   -1.2298232            1   -0.3028314  -0.55613372  -0.50677811   0.15441764 0.0070726723   -0.0405425 -0.035158856  -0.45770608  -0.44568381   0.71509941        0.075    1.4098359        1e-10 1.5891098e-11    6.2928314    2.4455209    31.520363 -0.0010889153  -0.19764723   0.01131373    0.2228411    0.1911318   0.92091149 
 1267000    4.0099962    1.2737572     2.736239  -0.24115651    0.8492197   0.99304007   0.74977592   -1.2298232            1  -0.17994274  -0.38955588  -0.45324811   0.30297577 -0.011960375 -0.0081043048 0.0055549052  -0.33460306  -0.32169427   0.71637432        0.075    1.4138974        1e-10 1.5919429e-11    6.2816322    2.4505359    31.520363 -0.010013446  -0.20508874 -0.0043455945   0.17674198    1.3891822   -1.4475989 
 1268000     4.026697    1.2873962    2.7393008  -0.23297056   0.85831288    1.0004834    0.7600117   -1.2298232            1 -0.018869045  -0.28559049   -0.3056541   0.53463745 0.00097995974 -0.081696241  0.013210986  -0.17564075  -0.16168307   0.72026874        0.075    1.4022207        1e-10 1.6005972e-11    6.2476681    2.4362835    31.520363 0.0016605021  -0.20379835 -0.0013827963   0.19057393    1.1414686    2.9817843 
 1269000    4.0153696    1.2680107    2.7473589  -0.23398175   0.84538851   0.99861719    0.7394337   -1.2298232            1 -0.082866447  -0.35454321  -0.36678455   0.47272842 0.0019746665  0.049304177  0.027071802  -0.23539342  -0.22541408   0.71580361        0.075    1.4159493        1e-10 1.5906747e-11    6.2866405    2.4457338    31.520363  0.015345718   -0.1994417 -0.013193806   0.22265242   0.10573358    2.4710517 
 1270000     4.027349    1.2855117    2.7418373  -0.22421846    0.8570565       0.9944   0.76209554   -1.2298232            1   -0.2131519  -0.44040937  -0.46337445    0.2643281 0.0033671196 -0.049215226   0.02698108  -0.37035345  -0.35509756   0.71261624        0.075    1.3907796        1e-10 1.5835916e-11    6.3147593    2.4603484    31.520363 -0.0064905221  -0.19921473 0.0021869868   0.19206894 -0.061502757  -0.10772203 
 1271000    4.0239024    1.2829313    2.7409711  -0.23412817   0.85533614    1.0036232   0.75280194   -1.2298232            1  -0.14172979   -0.3852098  -0.40639037   0.36641079 -0.0026646174  0.037138506   0.01250119   -0.2970143  -0.28499201    0.7121141        0.075     1.409337        1e-10 1.5824758e-11    6.3192121    2.4410727    31.520363 -0.0022137936  -0.21096327  0.006836924    0.1843193  0.074934259    2.6789477 
 1272000    4.0130155    1.2809295     2.732086  -0.23204951   0.85400154    1.0086846    0.7470411   -1.2298232            1  -0.17769971  -0.44955563   -0.4175439   0.33400039 0.0040983379  0.091473793  0.030634854   -0.3317959  -0.32168442   0.71924075        0.075    1.4092944        1e-10 1.5983128e-11    6.2565977    2.4517184    31.520363 -0.0078016608  -0.21771116 -0.0060760818   0.22603873   -2.4788284  -0.82752256 
 1273000    4.0193029    1.2940307    2.7252723  -0.24170174   0.86273611    1.0178799   0.75545766   -1.2298232            1  -0.12969257  -0.39715694  -0.39107869   0.39915791 -0.0039634994  0.088729484 -0.019418037  -0.28552489  -0.27498987   0.72308651        0.075    1.4198832        1e-10 1.6068589e-11    6.2233218      2.45356    31.520363  0.001130631   -0.1872184 0.0026501549   0.20399281  -0.14398309    2.1213193 
 1274000    4.0219336    1.2793813    2.7425523  -0.22759467   0.85296933   0.99419534   0.75532124   -1.2298232            1  -0.29003681  -0.52606227  -0.49916717     0.155119  0.011013238  0.034173383 -0.0011577206  -0.44584099  -0.43195325   0.71591942        0.075    1.4156516        1e-10 1.590932e-11    6.2856236    2.4401181    31.520363 0.0086150107  -0.20090768 0.0012907365   0.18203217  -0.43590957   -1.1402758 
 1275000    4.0143734     1.279679    2.7346944  -0.22985758   0.85316779    1.0010762   0.75089543   -1.2298232            1  -0.11057443  -0.40240807  -0.34895217   0.41963694 -0.0070337078 -0.014467466 -0.040813343  -0.26546567  -0.25347308   0.70493923        0.075     1.418688        1e-10 1.5665316e-11     6.383529    2.4383847    31.520363 0.0037014277  -0.18713751 -0.0084156791   0.19355922     1.407567    1.6748765 
 1276000    4.0277837    1.2811689    2.7466148  -0.22309999   0.85416115   0.99890344   0.75407987   -1.2298232            1  -0.16565187  -0.42017077  -0.39856003    0.3217752 0.0092844582  0.035264362  0.036499558  -0.32119998  -0.30824036   0.71181491        0.075    1.4178916        1e-10 1.5818109e-11    6.3218681    2.4506694    31.520363 -0.010059113  -0.20016944 -0.009342604    0.2213366   0.67983016   0.32569539 
 1277000    4.0451678     1.292825    2.7523427  -0.23521628   0.86193233    1.0089568   0.76027248   -1.2298232            1   -0.1996064  -0.43357086  -0.45935022   0.29410188 -0.0034541139 -0.046012181  -0.03011023   -0.3564319  -0.34362997   0.72354849        0.075    1.4052344        1e-10 1.6078855e-11    6.2193482     2.438298    31.520363 -0.0054553116  -0.21633673 -0.0051203024   0.21624838   0.47559194   0.87569892 
 1278000    4.0339228    1.3033482    2.7305747   -0.2323506   0.86894814    1.0226644   0.76265815   -1.2298232            1  -0.12388092  -0.38419764  -0.35317528   0.36573016  0.013925629  -0.09347853 0.0089718593  -0.28119853  -0.26986118   0.72116794        0.075     1.400904        1e-10 1.6025954e-11     6.239878    2.4587314    31.520363  0.003474982  -0.19942722 0.00066557845   0.19812636    0.9563164    2.2850312 
 1279000    4.0344309    1.2795984    2.7548325  -0.22953099   0.85311407     1.009879   0.74471286   -1.2298232            1  -0.28225151  -0.52294454  -0.51983696   0.19602698  0.011012951  0.011875328 -0.041191996  -0.43586744  -0.42640672   0.71244011        0.075    1.4382785        1e-10 1.5832002e-11    6.3163204    2.4488319    31.520363 -0.0014550823  -0.17995007 -0.0053237953   0.20799598  -0.38483912   -2.2222421 
 1280000    4.0240178    1.2650816    2.7589361  -0.22866837   0.84343567   0.99270939   0.74021755   -1.2298232            1  -0.19554079  -0.43638273   -0.4602043   0.30996465 0.0013526433 -0.013111471  0.027420961  -0.34822946  -0.33724512   0.71079381        0.075     1.432737        1e-10 1.5795418e-11    6.3309499    2.4462387    31.520363  0.002635269  -0.18576307 -0.0035912614   0.21558331    1.6405658    2.6113065 
 1281000    4.0240885    1.2760155     2.748073  -0.22693853   0.85072534    1.0108406   0.74000545   -1.2298232            1  -0.19493163  -0.44549111  -0.46870825   0.32940447  0.002650788   0.15048006 0.0032199827  -0.34757654   -0.3392241   0.71857548        0.075    1.4159252        1e-10 1.5968344e-11    6.2623901    2.4550759    31.520363 -0.0066819275  -0.19327701 -0.00088075743   0.22653526  -0.82364588   0.85580526 
 1282000    4.0307055    1.2743292    2.7563763  -0.22614194   0.84960104    1.0051269   0.74205696   -1.2298232            1  -0.19106726   -0.4445891   -0.4709498   0.34233713 0.0019132879  0.057659555  0.090366193  -0.34413534  -0.33454412   0.71433627        0.075    1.4029159        1e-10 1.5874139e-11    6.2995541    2.4408142    31.520363 0.0033272724   -0.1808641 -0.0072053615   0.19101432    0.3434572  -0.70235006 
 1283000    4.0495063    1.2887508    2.7607554  -0.22806697   0.85921603    1.0176018   0.74969378   -1.2298232            1  -0.12908524  -0.38041724  -0.39061135   0.38377287 0.0042280004 -0.0050671492 0.0071111925  -0.28372861  -0.27434283   0.71134885        0.075    1.3903298        1e-10 1.5807752e-11    6.3260101     2.457076    31.520363 -0.013092579   -0.1765146 0.0001376624   0.20692339 -0.015568774    1.4083305 
 1284000    4.0315694    1.2841872    2.7473822  -0.22812907   0.85617341    1.0143454   0.74679883   -1.2298232            1   -0.1925424  -0.44860739  -0.43877455   0.30975474 -0.0081716306  0.057765414  0.074158207  -0.34658862  -0.33733516   0.71389691        0.075    1.4032814        1e-10 1.5864376e-11    6.3034311    2.4415983    31.520363 0.0071006699  -0.21157949   0.00408756   0.21004595   -1.6216155   -2.3541876 
 1285000    4.0355383    1.2860584    2.7494799  -0.22724514   0.85742094    1.0142419   0.74898136   -1.2298232            1  -0.14727634   -0.3863174  -0.42190915   0.36639752 0.0065538032   0.14944244  0.018275502  -0.30177276  -0.29205433   0.71736604        0.075     1.399924        1e-10 1.5941468e-11    6.2729482    2.4414578    31.520363 -0.0080470469  -0.21136291 -0.012914198   0.18843816   -1.2492182   0.93756187 
 1286000    4.0323832    1.2879894    2.7443938  -0.23030213   0.85870835    1.0221134   0.74571267   -1.2298232            1  -0.19210162  -0.47095117  -0.39826649   0.29291282 -0.010560881 -0.019885701  0.032376703  -0.34592378  -0.33800322   0.71889535        0.075    1.4025245        1e-10 1.5975452e-11    6.2596037    2.4448812    31.520363 -0.00095325574  -0.20011716 -0.0006489745   0.20708339  -0.69817592  0.064172636 
 1287000     4.024269    1.2802371    2.7440319  -0.22493041   0.85353987    1.0017941   0.75102819   -1.2298232            1  -0.14847666  -0.41314066  -0.36633505   0.33404572 -0.0016603554  0.039317647   0.01575112  -0.30339529  -0.29147779    0.7125161        0.075    1.3918204        1e-10 1.5833691e-11    6.3156468    2.4396194    31.520363 0.00017919822  -0.19732911  0.011130307   0.19542088   -1.2211316  -0.54333581 
 1288000    4.0483127    1.3026262    2.7456865  -0.22571403   0.86846677    1.0166761    0.7659876   -1.2298232            1  -0.10153474   -0.3641883  -0.36380707   0.42339116 0.0084392951 -0.089591476 -0.056771307  -0.25953912   -0.2466602   0.71474846        0.075    1.3798263        1e-10 1.5883299e-11    6.2959212    2.4436539    31.520363 0.0068311794  -0.20084342 -0.0049424082   0.18502675  -0.37229052  -0.53529623 
 1289000    4.0229936    1.2798142    2.7431794  -0.23599667   0.85325791    1.0078562    0.7463561   -1.2298232            1 -0.096563538  -0.35986367  -0.33951142   0.40968448 -0.0035311485  0.078640226  0.050564368  -0.25051843  -0.24042999   0.71861027        0.075    1.3832254        1e-10 1.5969117e-11    6.2620869    2.4356493    31.520363 0.00090090313   -0.1960753 -0.012816243   0.19532805   -1.6732028  0.082043498 
 1290000     4.021188    1.2834743    2.7377137  -0.23441082   0.85569815   0.99867235   0.75684055   -1.2298232            1  -0.16852083  -0.44887632  -0.44236103   0.38567487  0.013745973   0.03652529  0.019679708  -0.32463841  -0.31107634   0.71693179        0.075    1.4035998        1e-10 1.5931817e-11    6.2767478     2.452052    31.520363 -0.0010844407  -0.20046936 -0.0039902394   0.25295892    0.4576971    2.0153132 
 1291000    4.0204658    1.2814152    2.7390507   -0.2365107   0.85432532    1.0033568    0.7512759   -1.2298232            1  -0.24683346   -0.4725425  -0.49053156   0.22257367 -0.0064603391  0.070469988  0.058689208  -0.40180319  -0.39005765   0.71955954        0.075    1.4053233        1e-10 1.5990212e-11    6.2538258     2.454631    31.520363 -0.0052274958  -0.21453824 -0.0041428901   0.19390249   0.15663698    1.1334066 
 1292000     4.012199    1.2655373    2.7466618  -0.22932501   0.84373944   0.98617106   0.74525617   -1.2298232            1  -0.14406784  -0.38871706  -0.40559365   0.36210717 0.0066644195  0.036025107 -0.027091702  -0.29779585  -0.28483886   0.71773961        0.075    1.4180218        1e-10 1.5949769e-11    6.2696832    2.4429502    31.520363 0.0017941646  -0.20821538 -0.003243589   0.20245264  -0.03735853    0.8786563 
 1293000    3.9957616    1.2675869    2.7281747  -0.23708318   0.84510592   0.99185006   0.74363847   -1.2298232            1 -0.053357938   -0.3287906  -0.34407617   0.51279296 0.0055767635  0.072360443 -0.005350589  -0.20675225   -0.1949396   0.71515427        0.075    1.3995069        1e-10 1.5892317e-11    6.2923487     2.449707    31.520363 0.0036010778  -0.20670301 0.0012822018   0.19896656  -0.83685109    2.7066558 
 1294000    4.0292628    1.2866149    2.7426479  -0.23904132     0.857792     0.990808    0.7658258   -1.2298232            1   -0.2194213  -0.45439879  -0.44886755   0.24500244  0.012542082  0.023311446  0.029655101  -0.37739231  -0.36085421   0.71795957        0.075    1.3988365        1e-10 1.5954657e-11    6.2677624    2.4609376    31.520363 0.0073376131   -0.1866403 0.0026158142   0.18157518   0.27791482    1.0319982 
 1295000    4.0090022    1.2865018    2.7225004  -0.24014125   0.85771659    1.0024479   0.75764321   -1.2298232            1  -0.15012425  -0.35285683  -0.42688817   0.32937225 0.0093722091 -0.016030559  0.025113425   -0.3064074  -0.29321871   0.72276637        0.075    1.4045037        1e-10 1.6061475e-11    6.2260782    2.4410742    31.520363 0.0031231077   -0.1916373 -0.0019330096   0.20974525     0.542552   0.31489655 
 1296000    4.0073029    1.2702974    2.7370055  -0.23281342   0.84691304   0.99564069   0.74407314   -1.2298232            1 -0.076623704  -0.33037633  -0.36578762   0.46629284 0.0043731359 -0.050950994   0.06923915  -0.23010768  -0.21874646   0.71681568        0.075    1.4083569        1e-10 1.5929237e-11    6.2777644    2.4408033    31.520363 -0.0072907981  -0.21962822 -0.00055634299   0.19952571   0.60858129    1.3601223 
 1297000    4.0035611    1.2661733    2.7373878  -0.23096642   0.84416348   0.99151122   0.74227823   -1.2298232            1 -0.058292343  -0.33949297  -0.29803658   0.46265253 0.0049509804  -0.11994754 -0.0035371507  -0.21140607  -0.19982564   0.71309526        0.075    1.4141721        1e-10 1.5846561e-11    6.3105173    2.4493863    31.520363 -0.0022053844  -0.19227593 0.0023758915   0.20204652    0.7459638    2.3837174 
 1298000    4.0159829    1.2818161    2.7341668  -0.23438827   0.85459261    1.0021317   0.75257598   -1.2298232            1  -0.21293309  -0.47393321  -0.44327523   0.27840917 -0.00017574275  -0.12384537 -0.019547955  -0.36817099   -0.3559824   0.71784698        0.075    1.4149711        1e-10 1.5952155e-11    6.2687455    2.4456422    31.520363 -0.0028719843  -0.20884856 0.0077649142   0.18555538     1.040022  -0.29805029 
 1299000    4.0216393    1.2703237    2.7513156  -0.23220782   0.84693058   0.99872076   0.74197137   -1.2298232            1  -0.16588636  -0.42858183  -0.40698987   0.33791263  0.029474727  0.029444345 0.00043422271  -0.31893679  -0.30844878   0.72034241        0.075    1.4261653        1e-10 1.6007609e-11    6.2470291    2.4397177    31.520363 -0.0076534105  -0.19773057 -0.0065230493   0.19808739  -0.15536487    1.7789878 
 1300000    4.0108717    1.2781772    2.7326945  -0.23398791   0.85216651    1.0045325   0.74680935   -1.2298232            1   -0.1607246  -0.40916731  -0.42997999   0.35697351 -0.00057484875  0.015218191 -0.012273616  -0.31477298  -0.30411661   0.71290977        0.075    1.4259176        1e-10 1.5842439e-11    6.3121592    2.4397139    31.520363 -0.0057536046   -0.2100903  0.004545081   0.19729936   0.12975486 -0.072865433 
 1301000    4.0043649    1.2653574    2.7390075  -0.22458386   0.84361953   0.99851298   0.73651251   -1.2298232            1  -0.15271972  -0.42284239  -0.42182811   0.38651133 0.0033294153  0.049827708 -0.0047359554  -0.30464412  -0.29525248   0.71549964        0.075    1.4420834        1e-10 1.5899992e-11    6.2893114    2.4427623    31.520363  0.017760873  -0.19878365 -0.00028495023   0.19657623  -0.29958759   -0.3906575 
 1302000    4.0119369    1.2761716    2.7357652  -0.23743693   0.85082941    1.0108479   0.74017651   -1.2298232            1  -0.25752138  -0.49091524  -0.50369226   0.22204337 -0.0083114858  -0.11540078 -0.0034213487  -0.41020157  -0.40181488   0.71900297        0.075    1.4462011        1e-10 1.5977844e-11    6.2586668    2.4443264    31.520363  0.005397812  -0.20382167 -0.0043913491    0.2035778    1.9133775    1.1528231 
 1303000     4.032969    1.2832815    2.7496874  -0.23019302   0.85556961    1.0124958   0.74705707   -1.2298232            1 -0.057097479   -0.3376624  -0.31176115   0.47813111 -0.0068806265  -0.10708021 -0.015880744  -0.21119696  -0.20162622   0.71946344        0.075    1.4405289        1e-10 1.5988077e-11    6.2546611    2.4444085    31.520363 0.0052068861  -0.18804058 0.0039622808   0.22773799   0.24068873   0.97182505 
 1304000     4.028124    1.2806102    2.7475138   -0.2260398   0.85378865     1.001286   0.75180081   -1.2298232            1   -0.2600373  -0.50089488  -0.48793342   0.20871641 0.0018809177 -0.0024397746 0.0054764597   -0.4151153  -0.40296589   0.71334268        0.075    1.4168438        1e-10 1.585206e-11    6.3083285    2.4496803    31.520363 -0.0031994589  -0.19642679 -0.0090141881   0.21305409  -0.82987769  -0.71051033 
 1305000    4.0102651    1.2767004    2.7335648  -0.23183233   0.85118192    1.0059403   0.74416909   -1.2298232            1 -0.079992852  -0.38782092   -0.3621445   0.50998686 -0.0015246954  0.026632778  0.064882828  -0.23349662  -0.22358583   0.70695018        0.075    1.4207791        1e-10 1.5710004e-11    6.3653707      2.44708    31.520363 -0.0024626159  -0.19551967 0.0067041579   0.19927618   0.33260123    2.9901973 
 1306000    4.0366288     1.277592    2.7590368  -0.22387556   0.85177639    1.0023558   0.74765555   -1.2298232            1   -0.1078627  -0.37395085  -0.39342182   0.44378456  0.012204171 -0.0063429374 -0.014004947  -0.26208564    -0.250944   0.71192976        0.075     1.404018        1e-10 1.5820661e-11    6.3208483    2.4368111    31.520363 -0.0096188063  -0.19454772 0.0044976338   0.21671885   -0.1263105    3.3568122 
 1307000    4.0233371    1.2756648    2.7476723  -0.22981186   0.85049151    1.0091779   0.74076039   -1.2298232            1  -0.18838426   -0.4329794  -0.46804135   0.33586799 0.0098122787  0.023556473 -0.0054823664  -0.34118489  -0.33243938    0.7172504        0.075    1.4026993        1e-10 1.5938898e-11    6.2739596    2.4457834    31.520363 -0.011419974  -0.20174096 0.0015116978   0.19286846 -0.052324808    1.7114083 
 1308000    4.0232057    1.2806225    2.7425833  -0.22394188    0.8537968    1.0041185   0.74985449   -1.2298232            1  -0.17024788  -0.42305871  -0.41610444    0.3284195  -0.01040459  0.034224218 -0.039360064   -0.3249244   -0.3135808   0.71658631        0.075    1.4054569        1e-10 1.592414e-11    6.2797739    2.4535028    31.520363 -0.012200876  -0.21466978 -0.0055838249   0.19258533    1.4559291   -1.0091771 
 1309000    4.0228089    1.2686376    2.7541712  -0.23084858   0.84580647   0.99538575   0.74237712   -1.2298232            1 -0.088917099  -0.34824798   -0.3387411   0.42023779 -0.031422738  0.041185057 -0.047247544  -0.24205123  -0.23100346   0.71282225        0.075    1.3930103        1e-10 1.5840494e-11    6.3129343    2.4547143    31.520363 -0.0037034847  -0.19701627 0.0018586925   0.22581608   0.44177285    0.6684439 
 1310000    4.0096223    1.2790641    2.7305581  -0.22672438   0.85275787    1.0152267    0.7404095   -1.2298232            1  -0.10083873   -0.3578454  -0.37985421   0.43518342 0.0051021042  0.039570075 0.0047070405  -0.25356698  -0.24575729   0.71025654        0.075     1.404994        1e-10 1.5783479e-11    6.3357389    2.4448341    31.520363 0.00028472336  -0.18757636 -0.0077008648   0.20136858  -0.38361056    1.6240489 
 1311000    4.0129442    1.2829812     2.729963  -0.23415392   0.85536942    1.0023371   0.75374823   -1.2298232            1   -0.1255746  -0.38414214  -0.36619986   0.37361819 0.0014436151  0.030502507 -0.011792478  -0.28105431  -0.26865324   0.71717082        0.075    1.4061168        1e-10 1.5937129e-11    6.2746557    2.4516928    31.520363 0.0027417199  -0.21336914 -0.0067374298   0.21350806 -0.071213548   -1.1426262 
 1312000    4.0323114    1.2854449    2.7468664  -0.22005499   0.85701198     1.009783   0.75137499   -1.2298232            1  -0.14285066  -0.40276873  -0.39701649   0.37123322 -0.0083252852 0.0070073613  0.043523406  -0.29784083  -0.28699216   0.72040545        0.075    1.3973842        1e-10 1.600901e-11    6.2464825    2.4440272    31.520363 -0.00011686894  -0.23257576 -0.00063358361   0.21409716   -1.0274623    2.8159045 
 1313000    4.0216004    1.2768781    2.7447223  -0.22949147   0.85130044    1.0069338   0.74368216   -1.2298232            1  -0.21234035   -0.4430259  -0.48445951   0.29046437 -0.0067373745  0.095212982 -0.0012075209  -0.36574367  -0.35607513   0.71787703        0.075    1.3953988        1e-10 1.5952823e-11     6.268483    2.4358024    31.520363 0.0042091503  -0.19086554 0.0013503967   0.21183763  -0.57199147    1.1472591 
 1314000    4.0173987    1.2790329    2.7383657  -0.23428676   0.85273704    1.0038758   0.74822917   -1.2298232            1  -0.22341162  -0.47300093  -0.48812655   0.29089264  0.012883243  0.010971738 -0.0048463667  -0.37775287   -0.3667099    0.7165554        0.075    1.4082854        1e-10 1.5923453e-11    6.2800448    2.4406859    31.520363   0.01650011  -0.21514376 -0.0089294714    0.2194925  -0.11187301    2.7714334 
 1315000    4.0314943    1.2829663     2.748528  -0.23303735   0.85535944    1.0059382   0.75123934   -1.2298232            1  -0.17123715  -0.42436123  -0.40920757   0.31985734 -0.0026482224 -0.00068880751 0.00022132289  -0.32619934  -0.31482983   0.71448764        0.075    1.4160515        1e-10 1.5877503e-11    6.2982195    2.4441775    31.520363 -0.0089290895  -0.19651407 0.0014073027   0.20449363   0.52218126    2.1424734 
 1316000    4.0247646     1.269444    2.7553206  -0.22489894   0.84634407     1.007347   0.73500945   -1.2298232            1  -0.20424619  -0.43441831  -0.49506122   0.31674096 0.0071133903  0.062163018 -0.024129611  -0.35586055  -0.34803997   0.71380775        0.075    1.4059816        1e-10 1.5862394e-11    6.3042184      2.44539    31.520363 -0.0019788866  -0.20723182 -0.0023665486   0.21631461  -0.99998588    1.2690206 
 1317000    4.0362314    1.2861079    2.7501235  -0.22775312   0.85745399    1.0153413   0.74827649   -1.2298232            1  -0.16896715  -0.42261222   -0.4110258   0.32673657 0.0037130325  0.053799191 0.00071854156  -0.32331817  -0.31390207   0.71423272        0.075    1.4063836        1e-10 1.5871838e-11    6.3004675    2.4363708    31.520363 -0.0093434308   -0.2237072  0.004286236   0.22506205   0.83579771    2.2214955 
 1318000    4.0596234    1.2975266    2.7620968  -0.23269459    0.8650669    1.0180704   0.75926978   -1.2298232            1  -0.22220706  -0.44999944  -0.48979054   0.27316881 -0.018018398  0.022864009 7.3709407e-05  -0.37882572  -0.36753155   0.71759094        0.075    1.3998472        1e-10 1.5946465e-11    6.2709822    2.4487669    31.520363 -0.00067175541  -0.20571004  0.003859641   0.19952535   -1.0649227    1.4906228 
 1319000    4.0572514     1.299411    2.7578404  -0.22488946   0.86632321    1.0164435   0.76252145   -1.2298232            1 -0.035884758   -0.3138541  -0.30220874   0.50840857 -0.014525044  0.014354884 -0.0051428151  -0.19317416  -0.18097701   0.71256769        0.075    1.4111833        1e-10 1.5834838e-11    6.3151895    2.4412027    31.520363 -0.012753255  -0.19375501 -0.0047847805   0.22070979  -0.23018581    4.0333254 
 1320000    4.0488644    1.2900414     2.758823  -0.22275329   0.86007645    1.0228716   0.74750292   -1.2298232            1   -0.2189401  -0.47201404  -0.47999572   0.29518946 -0.018015597  0.039584491  0.053303938  -0.37313155  -0.36494993   0.71158574        0.075    1.4046605        1e-10 1.5813016e-11    6.3239042    2.4337348    31.520363 0.0027148958  -0.23179494 -0.0063559624   0.22116945  -0.43895415  -0.50981105 
 1321000    4.0433715    1.2937276    2.7496439  -0.22084559   0.86253405    1.0158241    0.7565384   -1.2298232            1 -0.060870756  -0.35789144  -0.30911497   0.48439414  0.012625718  0.046182717  0.046788744  -0.21692601   -0.2058746   0.71597931        0.075    1.4056706        1e-10 1.5910651e-11    6.2850978    2.4400881    31.520363 -0.003148281  -0.20333435 -0.0027619892   0.21627311  -0.36096793     2.541074 
 1322000    4.0362666    1.2766548    2.7596118   -0.2250809   0.85115158    1.0088333   0.74211579   -1.2298232            1  -0.15715348  -0.38712142  -0.40952076   0.32518174 -0.0026392883 0.0091571113  0.007747089   -0.3102337  -0.30115941    0.7115159        0.075    1.3840392        1e-10 1.5811465e-11    6.3245248    2.4475088    31.520363 0.0059347589  -0.18519958 -0.0039889589   0.19618731   0.24498178  -0.36798699 
 1323000    4.0259246    1.2785116     2.747413  -0.22489596   0.85238951    1.0069579    0.7455083   -1.2298232            1  -0.19222029    -0.430608  -0.43550341   0.28945054 0.0043874171  0.056784348 -0.0010128755   -0.3460003  -0.33595852   0.71317549        0.075    1.3738127        1e-10 1.5848344e-11    6.3098074    2.4530993    31.520363 -0.0056138218   -0.1704968 0.0051178025   0.19993158   -1.5054855    1.6719669 
 1324000    4.0293258    1.2929245    2.7364013  -0.22657666   0.86199863    1.0196235   0.75300322   -1.2298232            1  -0.19887108  -0.43731772  -0.41784643   0.25855092 -0.0011075894  0.056007435 0.0029988463  -0.35419711  -0.34441726   0.71419796        0.075    1.3604658        1e-10 1.5871066e-11    6.3007741    2.4426357    31.520363 -0.0018594271  -0.20188181 -0.0022570705   0.20374019   -1.5406878   0.32936889 
 1325000    4.0542111    1.2928358    2.7613754  -0.22932637   0.86193947    1.0180142   0.75401678   -1.2298232            1  -0.15266478  -0.40380874  -0.37240498   0.31821936 0.0021154379  0.019330865  0.062316581  -0.30819989  -0.29798124   0.71126823        0.075    1.3615985        1e-10 1.5805961e-11    6.3267271     2.438154    31.520363 -0.0037611771  -0.19508099 -0.0093299267   0.19661671    1.1330297     2.155255 
 1326000    4.0357378    1.2894457    2.7462921  -0.22333029   0.85967928    1.0090099   0.75642335   -1.2298232            1  -0.10507972  -0.36172715  -0.37210086   0.41858883 -0.015200379 -0.028964635  0.035951077  -0.26111124  -0.24911087   0.71146529        0.075    1.3451214        1e-10 1.581034e-11    6.3249748    2.4536654    31.520363 -0.0057142837  -0.19770313 -0.008705261   0.17411961   0.53981085    1.9449322 
 1327000    4.0617982    1.2941891    2.7676091  -0.22196294   0.86284177    1.0130292   0.75899325   -1.2298232            1  -0.16892379  -0.41960155  -0.43790399   0.35073416 -0.010755356 -0.069751008 0.0021283555  -0.32548542  -0.31352866   0.71155151        0.075    1.3471623        1e-10 1.5812256e-11    6.3242084    2.4500815    31.520363 -0.0082232749  -0.20259213 -0.0038249438   0.21582473    1.0023324   0.64793508 
 1328000    4.0521802    1.2982268    2.7539534  -0.22778317   0.86553371    1.0087087   0.76653811   -1.2298232            1  -0.16930598  -0.42899616  -0.41728552   0.33836373 0.00020647961 -0.089179556 -0.0012101788  -0.32742393  -0.31329413   0.71479845        0.075    1.3574828        1e-10 1.588441e-11    6.2954809    2.4470535    31.520363 0.0052232826  -0.21046065 0.0078276785   0.21682536   -0.7957161    1.7861658 
 1329000    4.0456996    1.2863371    2.7593625  -0.22047096   0.85760675     1.007523   0.75394537   -1.2298232            1  -0.13700542  -0.40795264  -0.37141442    0.3683508 -0.0073078701 -0.059394533  0.035075877  -0.29252579  -0.28082431   0.71468896        0.075    1.3660095        1e-10 1.5881977e-11    6.2964454    2.4499161    31.520363 -0.0024671961  -0.20403871 -0.0060392231   0.17492607  -0.14230945    1.8304749 
 1330000    4.0293837    1.2836012    2.7457825  -0.23314546   0.85578275    1.0050083   0.75259916   -1.2298232            1  -0.19193189  -0.42244278  -0.43497938   0.28162649 -0.0020661934 0.0070039674  0.016299425  -0.34717457  -0.33539182   0.71215231        0.075    1.3446682        1e-10 1.5825607e-11     6.318873    2.4401037    31.520363 -0.010839265   -0.1933624 0.0051560318   0.19885336   0.83603579  -0.34191877 
 1331000    4.0355623    1.2877064    2.7478559  -0.23002077   0.85851969    1.0239602   0.74411539   -1.2298232            1  -0.18783813  -0.42850081  -0.44644667   0.31143309 -0.0046732527  0.042603241 0.0034538473  -0.34133082  -0.33400336   0.71807646        0.075    1.3492807        1e-10 1.5957255e-11    6.2667422    2.4440165    31.520363 -0.002479483  -0.19857093 -0.00017614752   0.20511759 -0.023694712    1.1745375 
 1332000    4.0386123    1.2839893     2.754623  -0.22638871   0.85604151     1.010334   0.74935158   -1.2298232            1  -0.17106262  -0.40357346  -0.41988766   0.31027324 0.0077456863   0.02115249  0.019225577  -0.32563541  -0.31528277   0.71628846        0.075    1.3179396        1e-10 1.5917521e-11    6.2823851    2.4528424    31.520363 -0.005092505  -0.22647061 -0.00075995203   0.18331071     1.762311   0.73976146 
 1333000    4.0442605    1.2978551    2.7464054  -0.23330934   0.86528591    1.0189833   0.75900865   -1.2298232            1  -0.23645188  -0.49134709  -0.47099332   0.25298479 0.00010020869   0.10736118 0.0084701667  -0.39301668  -0.38190668   0.70990629        0.075    1.3112696        1e-10 1.5775695e-11    6.3388649    2.4484721    31.520363 -0.0093822026  -0.19165098 0.0037232268   0.21712803   -1.3822341   0.46388265 
 1334000      4.03987    1.2903655    2.7495045  -0.22480331   0.86029253    1.0150964    0.7532491   -1.2298232            1  -0.15083477  -0.39298859  -0.39440021   0.33488448 -0.032378238  0.072688038  0.041160302  -0.30621152  -0.29573473   0.71689659        0.075    1.3391543        1e-10 1.5931035e-11     6.277056    2.4584404    31.520363 -0.00051341619  -0.21115834 -0.0091783881   0.18451701  -0.14995246  -0.35342114 
 1335000    4.0391464    1.2870443    2.7521021  -0.23144054    0.8580783    1.0118026   0.75178174   -1.2298232            1  -0.26224077  -0.48548431  -0.50422249   0.20298449 -0.0021593594 0.0035786939 -0.0068940166  -0.41731484  -0.40667056   0.71533577        0.075    1.3437869        1e-10 1.5896351e-11    6.2907521    2.4450984    31.520363 -0.005543634  -0.19789414 0.0033306474   0.17950669  -0.29781922  -0.52140524 
 1336000    4.0250028    1.2779831    2.7470198   -0.2320672   0.85203711    1.0053381   0.74603293   -1.2298232            1  -0.16208967  -0.42231571  -0.43003699   0.36608367 -0.0073759065  0.004157665 -0.071661146   -0.3159779  -0.30559668   0.71070095        0.075    1.3533432        1e-10 1.5793354e-11    6.3317771    2.4447056    31.520363 0.0078458676  -0.21548781 0.0070824117   0.20324386   0.21732911    1.6928412 
 1337000    4.0443531    1.2878229    2.7565302  -0.22388223   0.85859737    1.0085601   0.75490391   -1.2298232            1  -0.13067747  -0.38692797   -0.3729846   0.36788017  -0.01080844  0.087605994 -0.077207189  -0.28639556   -0.2746444    0.7109373        0.075      1.36289        1e-10 1.5798607e-11    6.3296722    2.4405319    31.520363 -0.0051153645  -0.20418527 -0.011993767   0.19301992   0.66534023    1.9732804 
 1338000    4.0269199    1.2797025    2.7472174   -0.2222834   0.85318346    1.0074281   0.74652635   -1.2298232            1 -0.082182421  -0.34472916  -0.34854279   0.44672469 -0.00066850297  0.060501692 -0.0078618773  -0.23617243  -0.22598777    0.7100603        0.075    1.3712168        1e-10 1.5779118e-11    6.3374899    2.4425637    31.520363 -0.0082433657  -0.17396641 -0.0012967382   0.20901221   -1.1453235   0.53149408 
 1339000     4.015518    1.2726866    2.7428314  -0.22262154   0.84850594   0.99826674   0.74495124   -1.2298232            1  -0.07038882  -0.30604069  -0.32238483   0.41725905 0.0081334722 -0.042392653 0.0012404531  -0.22405392  -0.21288643   0.71571333        0.075    1.3740704        1e-10 1.5904741e-11    6.2874336    2.4617694    31.520363 -0.0061011137  -0.20153381 -0.0043128925   0.19795858  -0.15129182   0.37043228 
 1340000    4.0202134    1.2881081    2.7321053  -0.23884454   0.85878749     1.014606   0.75104174   -1.2298232            1  -0.13203819  -0.39302102  -0.36964829   0.36655472 -0.0070899739  -0.01672513 0.0029436011  -0.28695962  -0.27686816   0.71325967        0.075    1.3713393        1e-10 1.5850215e-11    6.3090627    2.4420463    31.520363 -0.0062041644  -0.18832404 -0.0010288578   0.19021175    1.3754465   0.65866644 
 1341000    4.0031035    1.2805684    2.7225351  -0.23372586   0.85376076    1.0044832    0.7495411   -1.2298232            1  -0.17048548  -0.42028578  -0.42446801   0.33329736 -0.0037417073 -0.052097557 -0.0024399741  -0.32509736  -0.31387046   0.71301961        0.075    1.3728292        1e-10 1.584488e-11    6.3111869    2.4534448    31.520363 -0.00013765342  -0.21301287 -0.0073644185   0.19980863    1.4451348   0.45049347 
 1342000    4.0223906    1.2775774    2.7448132  -0.22878592   0.85176665    1.0003527   0.74902517   -1.2298232            1  -0.13440171  -0.41480259  -0.34713515   0.35873262 0.0080771007 0.0094770821  0.027754349  -0.28890716  -0.27719708   0.71617045        0.075    1.3791673        1e-10 1.5914899e-11    6.2834204    2.4455732    31.520363 -0.0051523285  -0.20190459 -0.0054286344   0.18995945   -1.4440524    1.5092082 
 1343000    4.0253954    1.2759012    2.7494942  -0.22951481    0.8506491    1.0011776   0.74656335   -1.2298232            1  -0.14457916  -0.42020918  -0.39553979   0.38201148 -0.0025597451  0.036513446 -0.024789667  -0.29857681  -0.28749228   0.72081732        0.075    1.3762579        1e-10 1.6018163e-11    6.2429133    2.4519605    31.520363 -0.0065687683  -0.19617818 0.0017952479   0.22348782   -2.9268157    1.4286455 
 1344000    4.0379759    1.2777365    2.7602394   -0.2237278   0.85187272    1.0081303    0.7438225   -1.2298232            1  -0.24212187  -0.50528006   -0.4467676   0.22568206 0.0019915317  0.052182914  0.022790029  -0.39555414  -0.38602745   0.71414398        0.075    1.3923901        1e-10 1.5869866e-11    6.3012503    2.4437926    31.520363 0.00061758881  -0.19878058 0.0082769587   0.20634014   -2.0292213    -1.685703 
 1345000    4.0315459    1.2838971    2.7476489  -0.22723119   0.85598002    1.0070171   0.75154281   -1.2298232            1  -0.15373103  -0.43018065  -0.39680397   0.36579151 -0.0080687985  0.069288415  0.012944846  -0.30875582  -0.29747772   0.71011278        0.075     1.401335        1e-10 1.5780284e-11    6.3370216      2.43501    31.520363 -0.0090971907  -0.20030055  0.006165911   0.19435716   0.44341528    2.9446477 
 1346000    4.0269535    1.2890526    2.7379009  -0.23342081   0.85941719    1.0179695   0.74977973   -1.2298232            1  -0.22725683  -0.44511887  -0.47581349   0.23916186 0.0026167947 -0.038976105 -0.026555303  -0.38191793  -0.37256691   0.71490417        0.075     1.404808        1e-10 1.5886759e-11      6.29455    2.4395615    31.520363 0.0079234565  -0.19660325 -0.012626427   0.17346206   0.28947385  -0.25359514 
 1347000    4.0352124    1.2846383     2.750574  -0.23741117    0.8564742    1.0147555   0.74702396   -1.2298232            1  -0.16817283  -0.44689897  -0.40067122   0.34305171 -0.0030867078   0.04054575  0.012310173  -0.32226548  -0.31302413   0.71605534        0.075     1.413274        1e-10 1.5912341e-11    6.2844305    2.4368828    31.520363 0.0062958207  -0.18466032 0.0079640824   0.22259832  -0.33765995    1.4556127 
 1348000    4.0109488    1.2844423    2.7265065  -0.22797248    0.8563435    1.0166393   0.74549919   -1.2298232            1  -0.14034954  -0.38820881  -0.41098977   0.37814996 0.0032804315  0.044624429 -0.034537441  -0.29412767  -0.28546975   0.71227974        0.075     1.423451        1e-10 1.5828439e-11    6.3177425     2.447664    31.520363 0.0021861399  -0.20802642 -0.0065733501   0.20724383   -1.5504814   0.95257287 
 1349000    4.0374657    1.2822342    2.7552315  -0.22968481   0.85487135    1.0140184   0.74482184   -1.2298232            1  -0.14089142  -0.39818499  -0.41484596    0.3903567 -0.0041978326 -0.030594303  0.025939631  -0.29452983   -0.2856375   0.71387778        0.075      1.42039        1e-10 1.5863951e-11       6.3036    2.4450202    31.520363 0.0064204922  -0.17182227 -0.0017840901   0.21003669  -0.32653588    1.0066926 
 1350000    4.0346476    1.2800255    2.7546221  -0.23327074   0.85339879    1.0158557   0.74105871   -1.2298232            1  -0.26973172  -0.52243719  -0.47831913   0.19156117 -0.0030750776 -0.035815781 -0.001093261  -0.42259389  -0.41474006   0.71796564        0.075    1.4217218        1e-10 1.5954792e-11    6.2677094     2.448109    31.520363 -0.0094466174   -0.2147671 -0.0085269307    0.1986222   0.50233543   -1.6823087 
 1351000    4.0346176    1.2842148    2.7504028  -0.22681191   0.85619183    1.0140336   0.74704571   -1.2298232            1 -0.055133416  -0.34297448  -0.32339879   0.50097303 -0.0037374488 -0.054300134 -0.043988068  -0.20923056  -0.19988167   0.71282732        0.075    1.4253818        1e-10 1.5840607e-11    6.3128894     2.436365    31.520363  0.012504842  -0.21701922 -0.0017465851   0.20775065  -0.40391145     1.704993 
 1352000    4.0341828    1.2755042    2.7586786  -0.23501815   0.85038444    1.0097953     0.740152   -1.2298232            1  -0.15586764  -0.42018883  -0.39246288   0.34504879 -0.0054625593  -0.06265136  0.062275887  -0.30854278  -0.30001089   0.71277172        0.075    1.4282994        1e-10 1.5839371e-11    6.3133818    2.4426953    31.520363 -0.0067673164  -0.18252237 0.0068072626    0.2112442   0.71315861    1.0419778 
 1353000    4.0276496    1.2705892    2.7570604  -0.23327457   0.84710759   0.99633673   0.74392067   -1.2298232            1  -0.25919689  -0.51240805  -0.50492998   0.23974735 0.0014067794 -0.064312986 -0.045166251  -0.41264941    -0.401419   0.71508154        0.075    1.4448181        1e-10 1.5890701e-11    6.2929886     2.442029    31.520363 -0.0040783286   -0.1795667 -0.0035859443   0.18697425   0.35565918   0.24329548 
 1354000     4.033649    1.2840988    2.7495502  -0.22801739   0.85611447    1.0093994   0.75012174   -1.2298232            1 -0.034030215  -0.28922767  -0.33080891   0.51794593 -0.0012062429 -0.00045918278  0.026731536  -0.18876187  -0.17811696   0.71542036        0.075    1.4368652        1e-10 1.589823e-11    6.2900083    2.4475636    31.520363 -0.018251961  -0.19115433 0.0007814462   0.20186669  -0.37654275    3.7479457 
 1355000    4.0212571    1.2824699    2.7387872   -0.2358519   0.85502851    1.0172055   0.74288231   -1.2298232            1  -0.19506602  -0.45162925  -0.43022048   0.29665166  0.010038223  -0.00629263    0.0186765  -0.34830435  -0.34026704   0.71579246        0.075    1.4464879        1e-10 1.5906499e-11    6.2867385    2.4539637    31.520363 0.0018319211  -0.21812561 0.0011104661   0.21330557  -0.45082621    2.2588314 
 1356000    4.0177507    1.2702813    2.7474694  -0.22791641   0.84690228    1.0097404    0.7342978   -1.2298232            1  -0.25883808  -0.51211436   -0.4827639   0.21836403 -0.013479167 -0.045828038 -0.012126316  -0.41030564  -0.40297349   0.71933505        0.075    1.4328218        1e-10 1.5985223e-11    6.2557774    2.4609586    31.520363 0.0072683462  -0.18608656 -0.009293714   0.19461519  -0.54141562   0.36903754 
 1357000    4.0248302    1.2786815    2.7461487  -0.23100649   0.85250273    1.0060879   0.74630189   -1.2298232            1 -0.061015218  -0.36495751  -0.28452962   0.46644147 -0.0066075195 -0.077398637 -0.022289847  -0.21495893  -0.20462926   0.71396365        0.075    1.4331222        1e-10 1.5865859e-11    6.3028419    2.4321769    31.520363 -0.006941657   -0.1856056 -0.0087532568   0.19229912  -0.28723739    2.6949703 
 1358000    4.0299875    1.2814141    2.7485734  -0.22801316   0.85432462   0.99825347   0.75480626   -1.2298232            1  -0.12522557  -0.39642199  -0.38503916   0.40578444  0.014491288  0.021930529  -0.04431031  -0.28092352  -0.26772129   0.71634249        0.075     1.423982        1e-10 1.5918722e-11    6.2819113    2.4470498    31.520363 0.0073331877  -0.22160206 0.0033940943    0.2081103    2.1077723   0.82464465 
 1359000    4.0227634    1.2750992    2.7476643  -0.23625969    0.8501144   0.99546279   0.74961329   -1.2298232            1  -0.25661047  -0.50686716  -0.47981974    0.2168555 -0.0044086005 -0.0082670342 0.0009257037  -0.41123724  -0.39870783    0.7159927        0.075    1.4244777        1e-10 1.5910949e-11    6.2849803    2.4456987    31.520363 -0.0059169574  -0.20032775 -0.0042430517   0.20669466  -0.39070948   0.58746426 
 1360000    4.0376742    1.2908976    2.7467766  -0.23889148    0.8606473    1.0009175   0.76366141   -1.2298232            1  -0.25761285  -0.46496218  -0.49506005   0.18718367 -0.0096563664 -0.030313195  0.041129287   -0.4151374  -0.40048884   0.71561033        0.075    1.4165692        1e-10 1.5902452e-11    6.2883386    2.4514542    31.520363 7.8532669e-05  -0.17735462 0.00066729774   0.21092695   0.14513789    2.2882415 
 1361000    4.0265648    1.2921208     2.734444  -0.22689905   0.86146282    1.0155324   0.75492767   -1.2298232            1  -0.19839036  -0.44582697   -0.4326823   0.28333819 -0.0085076975 0.0040341966  0.011916763  -0.35411336  -0.34335255   0.71657165        0.075     1.411413        1e-10 1.5923814e-11    6.2799024    2.4651959    31.520363 -0.0045507495  -0.17607269 -0.00068648337   0.17750821  -0.64851912  -0.96099836 
 1362000    4.0387608    1.2912354    2.7475254  -0.22890726    0.8608725    1.0149972   0.75429909   -1.2298232            1   -0.1392824  -0.40160152  -0.41731708    0.4010714  0.013997467 -0.064801234 -0.0056442085  -0.29487574  -0.28416821   0.71819722        0.075    1.4148796        1e-10 1.5959938e-11    6.2656884    2.4460403    31.520363 0.0050724233   -0.2230843 0.0019832536   0.18953715   0.80638671    0.3845129 
 1363000    4.0148182    1.2872074    2.7276108  -0.23143062     0.858187     1.012176   0.75170725   -1.2298232            1  -0.18168563  -0.40542632  -0.43141147    0.2917809 -0.0034905243 -0.087031033 -0.015513439  -0.33674433  -0.32616872   0.72092895        0.075    1.4034003        1e-10 1.6020643e-11    6.2419465    2.4451698    31.520363 -0.0058289027  -0.20140994 0.0057434368   0.20830689    1.8175362  -0.39272212 
 1364000    4.0012564    1.2752338    2.7260225  -0.23285499   0.85020419    1.0123507   0.73807863   -1.2298232            1  -0.12841434  -0.38230001  -0.40001864   0.39707564  0.015981896 -0.041099865 -0.0089083421  -0.28066179  -0.27292236   0.71259833        0.075    1.3920225        1e-10 1.5835518e-11     6.314918    2.4464558    31.520363 0.0034197159  -0.20061359  0.002176925   0.21576655   0.99140064    1.8170412 
 1365000    4.0442455    1.2799928    2.7642527  -0.22913975   0.85337701     1.003596   0.74950572   -1.2298232            1  -0.14000638  -0.41756445  -0.42301657   0.42056189 -0.0093456649 -0.033690357 0.0077210089  -0.29461096  -0.28326471   0.70996033        0.075    1.4018135        1e-10 1.5776896e-11    6.3383823    2.4496983    31.520363 -0.0070262666  -0.19460416  0.001184853   0.20851102  -0.58717584    1.2444387 
 1366000    4.0357969    1.2823604    2.7534364  -0.22538821   0.85495551    1.0094159   0.74814928   -1.2298232            1  -0.10013076  -0.34125968   -0.3420522   0.38291959 -0.0087602504  -0.11170021  0.015087159  -0.25445554  -0.24421986   0.71644893        0.075    1.4051831        1e-10 1.5921087e-11    6.2809781    2.4446943    31.520363 -0.0020129968  -0.18394895 -0.0010215923   0.19567769  -0.40004875    2.0613975 
 1367000    4.0319776    1.2777418    2.7542357  -0.22475582   0.85187629    1.0054938   0.74565302   -1.2298232            1  -0.12440342  -0.38744826  -0.38358364   0.39782166 -0.014157872  -0.11287327  0.038931498  -0.27821328  -0.26793266   0.71983677        0.075    1.3933216        1e-10 1.5996373e-11    6.2514173    2.4547137    31.520363  0.004922386  -0.19189561 0.0091437568   0.18687708   0.49555975    2.4265294 
 1368000     4.027644    1.2737972    2.7538469  -0.22407108   0.84924634   0.99694718   0.74711724   -1.2298232            1  -0.12821073  -0.37864644  -0.40886005   0.40287429  0.012197167  0.097304566 0.0021441397  -0.28232263  -0.27051998   0.71567926        0.075    1.3970557        1e-10 1.5903983e-11    6.2877329    2.4511328    31.520363 0.0050467179  -0.17878437 -0.012751397   0.21366136  -0.68019214    2.1783848 
 1369000    4.0256726    1.2870096     2.738663  -0.23210366   0.85805514    1.0080637   0.75432992   -1.2298232            1  -0.07854522  -0.30403692  -0.38533974     0.453741 0.0042043513 -0.021262695  -0.01676042  -0.23414491   -0.2224413   0.71418706        0.075    1.3999074        1e-10 1.5870824e-11    6.3008702    2.4363094    31.520363 0.0053722896  -0.20069952 0.0077878757   0.21471065  -0.50442123    1.0034164 
 1370000     4.024019    1.2849083    2.7391107  -0.23106926   0.85665421    1.0069357   0.75273997   -1.2298232            1   -0.2291519  -0.47362816  -0.46826941   0.25444186 0.0040961195 0.0025718345 -0.024325756  -0.38442363  -0.37288697   0.72281369        0.075    1.4119936        1e-10 1.6062527e-11    6.2256707    2.4522376    31.520363  0.003566174  -0.20061254  0.005226522   0.22213728   -0.6147992  -0.40824272 
 1371000    4.0017294    1.2728403    2.7288891  -0.23287508   0.84860839   0.99350708   0.74841835   -1.2298232            1  -0.19495262  -0.44744595  -0.43216922    0.2947573 -0.010905063  -0.01556166  -0.04239104  -0.34933291  -0.33677082   0.72185418        0.075    1.4138731        1e-10 1.6041204e-11     6.233946    2.4525017    31.520363 -0.0057178946  -0.18935021 0.0039198684   0.19901065  -0.89780266    1.5727619 
 1372000    4.0021551    1.2635829    2.7385723  -0.23017565   0.84243644   0.97993065   0.74736979   -1.2298232            1  -0.13422007  -0.39649254  -0.40052012   0.39435244 -0.0088936649 -0.035689976 -0.054318544  -0.28838406   -0.2741003   0.71280429        0.075    1.4120302        1e-10 1.5840095e-11    6.3130933    2.4462607    31.520363 0.0066903056  -0.20277966 0.0048920797   0.19111756    0.9267829   0.70944012 
 1373000    4.0186017    1.2868108    2.7317909  -0.22953445   0.85792262    1.0145166   0.74964017   -1.2298232            1 -0.069512749  -0.31590676  -0.32649828   0.43386679 0.0092897658 -0.017116753 -0.016787885  -0.22414506  -0.21432995   0.71974126        0.075     1.411915        1e-10 1.599425e-11    6.2522468    2.4328573    31.520363 -0.0061467924  -0.19539221 -0.003525936   0.21783331  -0.71016785   0.66351724 
 1374000    4.0251318    1.2737587    2.7513731  -0.22845282   0.84922072    1.0027539   0.74305559   -1.2298232            1  -0.23021567  -0.46496845  -0.48479623   0.25911768 -0.0041705708 -0.043220979 -0.033366364  -0.38348975  -0.37335379   0.72039662        0.075    1.3930612        1e-10 1.6008814e-11     6.246559    2.4375716    31.520363 0.0015969432  -0.21106454 -0.0043022597   0.20558055  -0.14623169    1.2569846 
 1375000    4.0170913    1.2747604    2.7423309  -0.23593955   0.84988854   0.99219569   0.75149199   -1.2298232            1  -0.15872714  -0.41138744   -0.3838302   0.31903621 -0.0092901415  0.021310438 -0.0094333976  -0.31374144  -0.30035814   0.70923617        0.075    1.3952334        1e-10 1.5760804e-11    6.3448541      2.44825    31.520363  0.005645835  -0.21379316 -0.00097882316   0.19495521   0.53630149   0.54115073 
 1376000    4.0075175    1.2763391    2.7311784  -0.23313593   0.85094107   0.99943137   0.74826582   -1.2298232            1   -0.2320917  -0.49950262  -0.48998108    0.2932086 0.0038519785  0.039299234 -0.0067887909  -0.38644052  -0.37475556   0.71079745        0.075    1.3981999        1e-10 1.5795499e-11    6.3309175     2.441317    31.520363  0.001475606  -0.19888026 -0.009105042   0.20241253   0.45900647    1.8421477 
 1377000    4.0107215    1.2834365     2.727285  -0.23482138   0.85567297    1.0146332   0.74575285   -1.2298232            1  -0.16096551  -0.40000265  -0.40793219   0.32503831 -0.0098957078  0.028243682 0.0061936465  -0.31479596  -0.30579935    0.7265103        0.075    1.3807312        1e-10 1.6144673e-11    6.1939934    2.4577357    31.520363 0.0036089564  -0.20998514 -0.003248543   0.20760785  -0.26317285   -0.1563933 
 1378000    4.0106689    1.2624348     2.748234  -0.22769914   0.84167103   0.99136653   0.73816086   -1.2298232            1 -0.071392108  -0.34510355  -0.34612606   0.47705329 -0.012617257 -0.034008975  0.043900999  -0.22365652  -0.21290475   0.72294762        0.075    1.3715281        1e-10 1.6065503e-11    6.2245173    2.4435597    31.520363 0.0021747821  -0.20988984 -0.0080183505   0.23152682    0.4410994    1.0336061 
 1379000    4.0129178    1.2755337     2.737384  -0.23220257   0.85040413   0.99867398   0.74788137   -1.2298232            1  -0.17460673   -0.4288651  -0.39830128   0.30334618 -0.012290616  -0.03757005 0.0051356265  -0.32887625  -0.31716248   0.70837538        0.075    1.3907676        1e-10 1.5741675e-11    6.3525641    2.4481081    31.520363 -0.0044568171  -0.17230205 -0.013039427   0.17472435   0.10545933  -0.17987706 
 1380000    4.0107885    1.2665747    2.7442138  -0.22768942   0.84443112   0.98466287   0.74747025   -1.2298232            1  -0.15808699  -0.43612689  -0.38160554   0.34347146  0.012766341 0.0089602147 0.0036738376   -0.3122717  -0.29864271   0.71144606        0.075    1.4141128        1e-10 1.5809912e-11    6.3251457    2.4488872    31.520363 -0.0049961674  -0.18362787 -0.0030372081   0.18203714  -0.55964587    1.3596175 
 1381000    4.0278587    1.2853327     2.742526  -0.22742707   0.85693712    1.0032327   0.75578122   -1.2298232            1  -0.15040337  -0.41469295  -0.41099004    0.3744729 0.0028343326 -0.043168951 -0.014739815  -0.30630243  -0.29360984   0.72490273        0.075    1.4060005        1e-10 1.6108949e-11    6.2077294    2.4509715    31.520363 -0.0026515892  -0.22204952 0.0005987883   0.21479603  -0.18106392   0.66310034 
 1382000    4.0307462    1.2868943    2.7438519   -0.2263345   0.85797829    0.9925476   0.76493719   -1.2298232            1  -0.10907626  -0.38173177  -0.36770895   0.42221194  0.015201206  0.015587625 -0.036764604  -0.26686397  -0.25075749   0.72381017        0.075    1.4078822        1e-10 1.608467e-11    6.2170998    2.4467528    31.520363 0.0012814143  -0.20593851 0.0082223859   0.20550758   0.18377306  -0.48720007 
 1383000    4.0162864    1.2838499    2.7324364  -0.23109719   0.85594859    1.0118364   0.74815463   -1.2298232            1  -0.18135758  -0.41533024   -0.4474542   0.31871171 -0.0099831013 0.0075778768 -0.0047299305  -0.33568346  -0.32579219   0.71388706        0.075    1.4178068        1e-10 1.5864157e-11    6.3035181    2.4421848    31.520363 -0.00027911668  -0.18111976 -0.00066561445   0.20885995  -0.30078545  -0.24191789 
 1384000    4.0198838    1.2710693    2.7488146  -0.23122603   0.84742766    1.0000875   0.74186668   -1.2298232            1  -0.11740786  -0.36169234  -0.39168705   0.40115582 0.0077614566 -0.010677826  0.027062139  -0.27043669  -0.26016537   0.71147086        0.075    1.4060037        1e-10 1.5810464e-11    6.3249253    2.4546934    31.520363 0.0026268401   -0.1970622 -0.00063191423   0.19871829  -0.96503586   0.73928784 
 1385000    4.0343145    1.2728018    2.7615126  -0.22564823   0.84858276   0.99190757   0.74948186   -1.2298232            1  -0.21109005   -0.4333929  -0.48437507   0.28449782  0.010270185  0.066982584  0.037342546  -0.36568971  -0.35267992   0.71376354        0.075    1.3973033        1e-10 1.5861412e-11    6.3046089    2.4459012    31.520363 0.0028133919  -0.20993725 -0.0017252847   0.22515828  -0.16190645   0.90023921 
 1386000     4.058141    1.2972004    2.7609406   -0.2199201   0.86484942    1.0152249   0.76087093   -1.2298232            1 -0.074114219  -0.35231936  -0.34702499    0.4770017 0.00048887771  0.077709643 -0.066860289  -0.23106316  -0.21903252   0.71484204        0.075      1.41185        1e-10 1.5885379e-11    6.2950971    2.4471091    31.520363 -0.004035894  -0.20917657 0.0098201137   0.20265426   0.23099077    2.1295959 
 1387000    4.0321777    1.2935237    2.7386541  -0.23010222   0.86239809    1.0202986   0.75321197   -1.2298232            1   -0.1932008  -0.44613855  -0.42869538   0.29523153 -0.0014190471  0.027821349  0.060353602  -0.34856989  -0.33884334   0.71091934        0.075    1.4055014        1e-10 1.5798208e-11     6.329832    2.4533228    31.520363 -0.0019200312  -0.22360685 -0.0055711884   0.21047435   -1.0201957   -0.3548252 
 1388000    4.0523117    1.2956037     2.756708  -0.22534719   0.86378486    1.0119536   0.76133335   -1.2298232            1 -0.075284002   -0.2958706  -0.37344098   0.44345957 -0.0055747414  0.027677384  0.042981199  -0.23232833  -0.21973534   0.71367413        0.075    1.4046105        1e-10 1.5859425e-11    6.3053988    2.4449246    31.520363 0.0054611917  -0.20728365 -0.021892402   0.20065676   0.31042588   0.87854022 
 1389000    4.0357264    1.2914845    2.7442419  -0.23185341   0.86103859    1.0038219   0.76231358   -1.2298232            1  -0.17462293  -0.45034466  -0.38486237   0.31133825  0.003203555 -0.014762342  0.022345775  -0.33186945  -0.31791351   0.71952121        0.075    1.4077393        1e-10 1.598936e-11    6.2541589    2.4377468    31.520363 -0.015868614   -0.1995161 -0.0031129596    0.1861005   0.28252461  -0.59111477 
 1390000    4.0339196     1.283162    2.7507576  -0.22985091    0.8554899    1.0036557    0.7530396   -1.2298232            1  -0.11415785  -0.38210197  -0.38702416   0.42665259  0.018641975 -0.039031432 0.0012008123  -0.26949138  -0.25742471   0.71734532        0.075    1.4026858        1e-10 1.5941007e-11    6.2731294    2.4415929    31.520363 -0.0014627291  -0.20493221 0.00016536827   0.20869467  -0.13421957    1.9518207 
 1391000    4.0272181    1.2818838    2.7453343  -0.22588616   0.85463772   0.98775046   0.76260427   -1.2298232            1  -0.21472653  -0.46540977  -0.41884304   0.24007323  0.011077562 -0.026997237 -0.025364479  -0.37203302  -0.35572299    0.7122809        0.075    1.4048009        1e-10 1.5828464e-11    6.3177323    2.4460548    31.520363 -0.0079532925  -0.20646699 -0.0042209248   0.19727344  -0.36817988   0.58384444 
 1392000    4.0472684    1.2815427    2.7657256  -0.22227375   0.85441037   0.99280168   0.75872406   -1.2298232            1  -0.08100926  -0.35749857   -0.3854999   0.49997069 0.0018092858 -0.055150439   0.06185836  -0.23751536  -0.22272676   0.71649188        0.075     1.415068        1e-10 1.5922042e-11    6.2806015    2.4597604    31.520363 -0.0018144704  -0.21359743 -0.0073136491   0.21241935     1.134689   0.83232005 
 1393000    4.0406062    1.2939702     2.746636  -0.23556699   0.86269583    1.0105731   0.76044591   -1.2298232            1 -0.072168385  -0.32833994  -0.36275209   0.47458688 -0.0022724814  0.082926929 -0.012253529  -0.22902966  -0.21642267   0.71692947        0.075    1.4220519        1e-10 1.5931766e-11    6.2767681    2.4401159    31.520363 -0.010818654  -0.19381243  0.005161671    0.2237656  -0.25274891    1.3635221 
 1394000    4.0224379    1.2846554    2.7377825   -0.2321317    0.8564856    1.0099068   0.75039865   -1.2298232            1  -0.12392121  -0.35420293  -0.36573268   0.34817198 -0.011931986   0.04020887  0.031901045  -0.27870998  -0.26808038   0.71737091        0.075    1.4345435        1e-10 1.5941576e-11    6.2729056     2.441614    31.520363 -0.0067879208  -0.19212727 -0.00088759518   0.19483717   -1.2427659    2.2078971 
 1395000    4.0404807    1.2874005    2.7530802  -0.22351111   0.85831578   0.99540441   0.76353133   -1.2298232            1  -0.16499557  -0.40136811  -0.43654484   0.34292625 -0.0093906918 0.0042220252   -0.0318381  -0.32249328  -0.30708459   0.71559337        0.075    1.4317816        1e-10 1.5902075e-11    6.2884875    2.4506258    31.520363 -0.0069761122  -0.18841536 -0.0045485639   0.18678195   -1.0771138    1.7799488 
 1396000    4.0198252    1.2849029    2.7349223  -0.23380199   0.85665061    1.0095088   0.75095328   -1.2298232            1  -0.16883301  -0.43836186  -0.42107167    0.3529345 0.0076932017  0.020398827 0.0024121067  -0.32373619  -0.31293537   0.71567471        0.075    1.4230164        1e-10 1.5903882e-11    6.2877729    2.4391772    31.520363 0.0053381448  -0.19595504 -0.0019296082   0.19854774   -1.6351603      2.07768 
 1397000    4.0307898    1.2880361    2.7427537  -0.23431883   0.85873951    1.0088989   0.75490997   -1.2298232            1  -0.20876495  -0.46413461  -0.44987866   0.28771843 -0.010412954 -0.024723916  0.053115325  -0.36448429  -0.35278025   0.71486977        0.075    1.4071082        1e-10 1.5885995e-11    6.2948529    2.4542345    31.520363 -0.00070333927  -0.19884479 -0.0028585189   0.20340192    1.8779495   0.21198489 
 1398000    4.0097778    1.2717833    2.7379945  -0.23309281    0.8479037    1.0076866    0.7374135   -1.2298232            1  -0.14744071  -0.39556835  -0.39921541   0.35246164 -0.0031621778  0.098737771  0.011887927  -0.29955096  -0.29128296   0.71451078        0.075    1.4056921        1e-10 1.5878017e-11    6.2980156    2.4461513    31.520363 -0.0014090848  -0.19067668 -0.0072195376   0.21084476   -1.5447355    1.1829966 
 1399000    4.0528783     1.274892    2.7779863  -0.22768545   0.84997626   0.99359525   0.75067191   -1.2298232            1   -0.1656994  -0.41270562  -0.40742167   0.32302907 0.00087058718  0.024948892  0.051380289  -0.32054454  -0.30753018   0.71772609        0.075    1.4147444        1e-10 1.5949469e-11    6.2698014      2.46455    31.520363 -0.0032332706  -0.20129581 0.0054745543   0.18125802   -1.0394938    3.7154838 
 1400000    4.0379125    1.2977232    2.7401893  -0.24019147   0.86519793    1.0140691   0.76226048   -1.2298232            1  -0.20406792  -0.48048056  -0.43059673   0.29887355 6.1925238e-05 -0.024125642 -0.025732791  -0.36130349  -0.34882123   0.72299378        0.075    1.4243124        1e-10 1.6066528e-11      6.22412    2.4527314    31.520363 0.0050655427  -0.20893718 -0.0031372898   0.21472975   0.76162055    1.4017953 
 1401000    4.0361708    1.2906542    2.7455166  -0.22561044   0.86048504    1.0066544    0.7594168   -1.2298232            1  -0.13188818  -0.38284161  -0.39936873    0.3865458 0.0094613814   0.07634838 -0.0072191629  -0.28853717  -0.27558309   0.71472054        0.075    1.4224831        1e-10 1.5882679e-11    6.2961672    2.4508186    31.520363 -0.0075630788  -0.19281633 0.0059181848   0.23249585    1.9176035 -0.044248601 
 1402000    4.0246292    1.2757638    2.7488653   -0.2271559   0.85055755   0.99513157   0.75059236   -1.2298232            1  -0.23829798  -0.45717685  -0.52422245   0.26650537 0.0066176122  0.010941674  0.007671832   -0.3931267  -0.38034806   0.71186499        0.075    1.4157623        1e-10 1.5819222e-11    6.3214234    2.4448738    31.520363 -0.0086617899  -0.19343525 0.0025448173   0.20214308    0.2795937      0.89979 
 1403000    4.0289609    1.2796542    2.7493066  -0.23780881   0.85315128    1.0165298    0.7401734   -1.2298232            1  -0.10802248  -0.36367017  -0.39144579   0.43104853 0.0037070168  0.026223324  0.039510423  -0.26070203  -0.25312705    0.7236497        0.075    1.4181627        1e-10 1.6081105e-11    6.2184783    2.4702323    31.520363 0.0041944236  -0.22679578  0.005747436   0.19078072  -0.92463574    3.0249319 
 1404000     4.034899    1.2903772    2.7445219  -0.22855165   0.86030031    1.0082217   0.75801965   -1.2298232            1  -0.17143456  -0.42177859  -0.43135958   0.33883449 -0.0085675316 -0.011395267 0.0056952962  -0.32779535  -0.31535319   0.71849574        0.075    1.4099789        1e-10 1.5966572e-11    6.2630852    2.4445608    31.520363  -0.00297971  -0.18548985 -0.0032995509   0.21817155  -0.15663963  -0.31029924 
 1405000    4.0276916    1.2807836     2.746908  -0.23458547   0.85390427    1.0107907   0.74541906   -1.2298232            1   -0.2139605  -0.44550215  -0.45827923   0.26189989 0.00045138576 -0.020597501  0.047217937   -0.3677221  -0.35824584   0.71897429        0.075    1.4316302        1e-10 1.5977206e-11    6.2589164    2.4519317    31.520363 0.0014453966  -0.17427434 -0.0047032381   0.20161614   0.14885603    1.2059599 
 1406000    4.0297152    1.2815442     2.748171  -0.22789133   0.85441134    1.0072941   0.74869679   -1.2298232            1 -0.090589089  -0.35396515  -0.34868151   0.43087939 -0.0054173571 -0.016497176  0.039736526  -0.24502681  -0.23437531   0.71256743        0.075    1.4204277        1e-10 1.5834832e-11    6.3151918    2.4432292    31.520363 0.0057173813  -0.19750816  -0.01534281   0.18066203   0.74210811    3.7685511 
 1407000    4.0325108    1.2908783    2.7416325  -0.23103863   0.86063443    1.0159961   0.75320502   -1.2298232            1   -0.1933792  -0.42040911  -0.40877927   0.24905076 0.0064548709 -0.035103828 -0.012911763  -0.34874686   -0.3384076   0.71521475        0.075    1.4170845        1e-10 1.5893661e-11    6.2918165    2.4576446    31.520363 0.0018374611  -0.18830653 -0.00052485826   0.19478804   0.94820147   0.18652796 
 1408000     4.004699    1.2800461    2.7246529  -0.23362735   0.85341256    1.0122528   0.74357523   -1.2298232            1  -0.22963829  -0.46572087  -0.45390866   0.23071465 -0.0041906102 -0.083019613  0.042674336  -0.38301956  -0.37413235    0.7201611        0.075    1.4230357        1e-10 1.600358e-11    6.2486019    2.4431878    31.520363 0.0029039722  -0.21259703 -0.0045709582   0.18221301   0.20480066  -0.52547939 
 1409000    4.0087557    1.2721452    2.7366105  -0.23284721   0.84814497    1.0068827    0.7383781   -1.2298232            1  -0.17686843  -0.40166094  -0.45947273   0.33052839 -0.0052166556 -0.038823932  0.053652688  -0.32917765  -0.32059592   0.71817794        0.075    1.4079502        1e-10 1.595951e-11    6.2658566    2.4508202    31.520363 -0.00037013056  -0.18104568 0.0013027768   0.20910983   0.98844776   0.75745765 
 1410000    4.0380126    1.2798561    2.7581565  -0.22847875    0.8532859    1.0000722   0.75179002   -1.2298232            1  -0.13983038  -0.40081766  -0.41204851   0.39337503 -0.005443573 -0.038509216 -0.015773151  -0.29490616  -0.28258572   0.71070611        0.075    1.4235187        1e-10 1.5793469e-11    6.3317311    2.4470365    31.520363 -0.0063514302  -0.20406145 0.0035432779   0.17231106   0.65650942    2.9431983 
 1411000    4.0141465    1.2575855     2.756561  -0.22215667   0.83843797    1.0008253   0.72614458   -1.2298232            1  -0.17027537  -0.41480451  -0.41901399    0.3229924 -0.00063973006 -0.041425022 -0.035248744  -0.32006112   -0.3131382   0.71066292        0.075    1.4065989        1e-10 1.5792509e-11    6.3321159    2.4454278    31.520363  -0.00484921  -0.18588307 -0.0097716576   0.22661237     1.050017    2.3292559 
 1412000    4.0376568    1.2944866    2.7431702  -0.23203141   0.86304008    1.0094708   0.76179125   -1.2298232            1  -0.10081877  -0.38618603  -0.34395149   0.42768121 -0.0062548255  0.034743891 -0.026079062  -0.25795755   -0.2449157    0.7205369        0.075    1.4018236        1e-10 1.6011931e-11    6.2453429    2.4543479    31.520363 -0.0058191392  -0.19733925 -0.012698849    0.2271906   0.39969226    1.8812077 
 1413000     4.023762    1.2851289    2.7386331  -0.23157004   0.85680127    1.0045155   0.75466363   -1.2298232            1  -0.12790887  -0.39421394  -0.38038203   0.39086937 -0.0022989617  0.014333191  0.033433154   -0.2835774  -0.27129846   0.72024768        0.075    1.4177016        1e-10 1.6005504e-11    6.2478507    2.4436538    31.520363 0.0076516057  -0.18610407  -0.02142883   0.22000728   0.94792174   0.75408288 
 1414000    4.0315839    1.2788078     2.752776  -0.23087558   0.85258699   0.99214291   0.75609459   -1.2298232            1  -0.14704706  -0.38427942  -0.40401801   0.34715625 -0.0033184595  0.080406217 -0.018449913  -0.30301076  -0.28867053   0.71709753        0.075    1.4207726        1e-10 1.5935501e-11     6.275297    2.4540109    31.520363 -0.0036408334  -0.18422907 0.0030125232   0.21674451 -0.010097111    1.9941173 
 1415000    4.0263407    1.2835372    2.7428036  -0.22948754   0.85574005    0.9985544   0.75699308   -1.2298232            1  -0.15232431  -0.42611305  -0.36839304   0.33753317 -0.010441016  0.054904757 -0.00088871713  -0.30847335  -0.29486298    0.7121629        0.075     1.424986        1e-10 1.5825842e-11     6.318779    2.4385344    31.520363 -0.0032212673  -0.22205768 0.0013185146   0.18471201  -0.42366745    1.1176637 
 1416000    4.0061378     1.271171    2.7349669  -0.23500786   0.84749545   0.99845978   0.74310781   -1.2298232            1  -0.21191119  -0.47116651  -0.44992009   0.28535301 -0.00058761059  -0.10480172 -0.028037275  -0.36519604  -0.35443636   0.71504141        0.075    1.4208156        1e-10 1.5889809e-11    6.2933418     2.441128    31.520363  0.018349443  -0.21362165 -0.0085330384   0.22343052    1.4545398  -0.79820915 
 1417000    4.0257163    1.2826561    2.7430602  -0.23771627   0.85515264    1.0088414   0.74888036   -1.2298232            1  -0.18653705  -0.43215953  -0.47317608   0.34572448 0.0025489772 -0.072867527  -0.01307874  -0.34101263  -0.33054414   0.71742448        0.075     1.419045        1e-10 1.5942766e-11    6.2724372    2.4438854    31.520363 -0.0023019313  -0.17859985 0.0014129946   0.19334784   0.95355614   0.63530029 
 1418000    4.0152814    1.2785305    2.7367509  -0.22573115   0.85240211     1.002191   0.74882835   -1.2298232            1  -0.11600682   -0.3529798  -0.37612221   0.38108156 -0.013347854 -0.086464394  0.039378282  -0.27047167  -0.25906459   0.72240889        0.075    1.4210692        1e-10 1.6053531e-11    6.2291592    2.4552124    31.520363 -0.00078178031  -0.20732683 -0.0067143695   0.21762951   0.41259102  0.043100422 
 1419000    4.0188224     1.280056    2.7387664  -0.23401848   0.85341917    1.0027573   0.75015746   -1.2298232            1  -0.12751584  -0.38688096   -0.3792577   0.38359115  0.004042407 0.0098005228    0.0204837  -0.28225485  -0.27065445   0.72318278        0.075     1.411608        1e-10 1.6070728e-11    6.2224933    2.4883348    31.520363 -0.006455743  -0.22345043 -0.014118474   0.20211845   -1.4414275    2.7889568 
 1420000    4.0169324    1.2696009    2.7473316  -0.22194828   0.84644866    1.0049376   0.73685377   -1.2298232            1  -0.14798885  -0.41193334  -0.38925589   0.35722269 -0.010783786 -0.078456957 -0.0047462488  -0.29998364  -0.29143869   0.71550431        0.075    1.4131649        1e-10 1.5900096e-11    6.2892703    2.4511553    31.520363 -0.0017174742  -0.18679372 -0.0021112754    0.2213817  0.024646925   -0.2591381 
 1421000    4.0296148    1.2833323    2.7462825   -0.2229122   0.85560347   0.99904953   0.75641934   -1.2298232            1  -0.18148354  -0.42825797  -0.42806736   0.31187471 0.0094251807  0.079918899 -0.064912759  -0.33751423  -0.32409289    0.7156894        0.075    1.4083973        1e-10 1.5904209e-11    6.2876438    2.4505731    31.520363 -0.0070404312  -0.19579094 -0.0028836181   0.22398025   0.73206752  -0.47889738 
 1422000    4.0094825    1.2795228    2.7299598  -0.24437868   0.85306363    1.0087738   0.74539233   -1.2298232            1  -0.20346297  -0.45605813  -0.43863011   0.28429934 -0.0010364307  0.059120809 0.0088569019  -0.35721905  -0.34746041   0.71989965        0.075     1.412532        1e-10 1.599777e-11    6.2508712    2.4486913    31.520363 -0.0044438902  -0.18603818 0.0036825719   0.18327071   0.05821213  -0.74669161 
 1423000    4.0387136    1.2920708    2.7466428  -0.22796672   0.86142949    1.0093763   0.75913131   -1.2298232            1  -0.11608203  -0.39763548  -0.31663689   0.36602627 0.0082785553  0.059819047 0.0062151392  -0.27267214  -0.26016548   0.72114497        0.075     1.417262        1e-10 1.6025444e-11    6.2400768    2.4447901    31.520363 0.0037327362  -0.18953919 -0.0059825109   0.21036709   0.42850674    1.4261923 
 1424000    4.0231566    1.2752993    2.7478573  -0.23359657   0.85024781    1.0009374   0.74605058   -1.2298232            1 -0.066606695  -0.37711159  -0.32348106   0.50077256 -0.011340544  0.052979667  -0.07767838  -0.22049856  -0.20948552    0.7202197        0.075    1.4040107        1e-10 1.6004882e-11    6.2480935    2.4401368    31.520363 -0.00034820959  -0.21988645 0.0076034385   0.20794764  -0.38980752     2.781829 
 1425000     4.012051    1.2820957    2.7299552  -0.23567953   0.85477906   0.99451046   0.75816542   -1.2298232            1  -0.22598575  -0.47428224  -0.44930173   0.24562673 -0.0024116875 -0.029572931  0.020238293  -0.38237661  -0.36794717   0.71877723        0.075     1.412316        1e-10 1.5972827e-11    6.2606324    2.4446516    31.520363 0.0098991474  -0.19704353 -0.0058355975   0.20062979   0.56203289    -1.443151 
 1426000    4.0101368    1.2627096    2.7474273  -0.22791223    0.8418542   0.99091413   0.73878388   -1.2298232            1  -0.14681558  -0.36237065  -0.42576154   0.34768544 4.3057465e-05 -0.012567041 -0.010072363  -0.29920851  -0.28826364   0.71556161        0.075    1.4167541        1e-10 1.5901369e-11    6.2887667    2.4421747    31.520363 -0.0051150394  -0.21098621 -0.0078276207   0.20166508   -1.1644347    2.4335576 
 1427000    4.0167021    1.2786636    2.7380385  -0.23651419   0.85249082   0.99491644   0.75401254   -1.2298232            1 -0.060962188  -0.31275808    -0.357856   0.48772751  0.015497669 0.0033046072  0.013677807  -0.21649641  -0.20298156    0.7161039        0.075    1.4272645        1e-10 1.591342e-11    6.2840043    2.4473472    31.520363 0.0080795437  -0.20246381 0.0067116998   0.20519296  -0.95156585   0.71123862 
 1428000    4.0011883    1.2653431    2.7358452  -0.23157423   0.84360998   0.99926802   0.73597386   -1.2298232            1  -0.23036703  -0.46748832  -0.48627166   0.26265888 -0.0080714456 -0.012611162  0.035693269  -0.38218032  -0.37300757   0.71633472        0.075    1.4483447        1e-10 1.5918549e-11    6.2819795     2.437675    31.520363 -0.0042234966  -0.21143225 -0.014665451   0.21647581   -1.8458343   -2.7594973 
 1429000    4.0101908    1.2762422    2.7339487  -0.23349592   0.85087644    1.0025459   0.74600118   -1.2298232            1  -0.22147945  -0.45044726  -0.46502226   0.25103118 -0.00028319239 0.0025790823  0.026759033  -0.37536112  -0.36458788   0.71922714        0.075    1.4529317        1e-10 1.5982825e-11    6.2567161     2.440801    31.520363 -0.0096264872  -0.21078731 -0.0010149765   0.20834932  -0.62336871  0.025738398 
 1430000    4.0279969    1.2795141    2.7484827  -0.22707238   0.85305787    1.0098046   0.74466925   -1.2298232            1  -0.20228006  -0.41719174  -0.46911075   0.27946231 -0.016505386   0.05286784  0.025435421  -0.35588699  -0.34642464   0.71488526        0.075    1.4281764        1e-10 1.5886339e-11    6.2947165    2.4468205    31.520363 -0.0063840009  -0.23336322 0.0046218765    0.1797691    1.6930456   0.31134888 
 1431000    4.0105859    1.2847566    2.7258293  -0.23475575   0.85655306    1.0028981   0.75536288   -1.2298232            1 -0.024810198  -0.26108442  -0.28912941   0.47578324 0.0064257628 -0.049198651 -0.015863627  -0.18062297  -0.16796891   0.71377307        0.075    1.4272487        1e-10 1.5861624e-11    6.3045247     2.446005    31.520363 -0.0038415144  -0.19258779   7.0168e-05   0.19225489    1.0921317    1.6121522 
 1432000    4.0104006    1.2797084    2.7306922   -0.2345843   0.85318741     1.009435   0.74514426   -1.2298232            1  -0.18590402  -0.42165924  -0.41560603   0.27955321  0.001272368  0.057198626   0.01877067  -0.33960894  -0.32999584   0.71408568        0.075    1.4407542        1e-10 1.5868571e-11    6.3017648    2.4362162    31.520363 -0.00065556397  -0.19056077 -0.0074725567   0.18586778   -1.9327125 -0.073518978 
 1433000    4.0231489    1.2803327    2.7428162  -0.23219359   0.85360364    1.0090306   0.74612839   -1.2298232            1  -0.22152782  -0.45265968   -0.4619792   0.25005541 -0.0035919556   0.07059269  0.027267513  -0.37543575  -0.36556192   0.71385369        0.075    1.4345858        1e-10 1.5863415e-11    6.3038127    2.4451337    31.520363 0.0072171355  -0.19277653 -0.0093800215   0.17972357  -0.83828302    2.3985117 
 1434000    4.0109067    1.2776397     2.733267  -0.23223887   0.85180816    1.0016861   0.74817268   -1.2298232            1  -0.20088605  -0.44248015   -0.4614886   0.30131061 0.0014902473   0.01154986 -0.018626686  -0.35521566  -0.34387176   0.71526421        0.075    1.4422565        1e-10 1.589476e-11    6.2913815    2.4376403    31.520363 0.0021540344  -0.18108842 -0.0057175674   0.18538147  -0.40721848   0.51044214 
 1435000    4.0164126    1.2726898    2.7437229  -0.23042829   0.84850804   0.99460998   0.74748532   -1.2298232            1  -0.13838182  -0.38187628  -0.41302817   0.37975898 0.00022782585 -0.007691221 0.0064078416  -0.29256964  -0.28035745   0.72096028        0.075    1.4593908        1e-10 1.602134e-11    6.2416753    2.4541248    31.520363  0.011249775  -0.20455162 -0.014356681   0.20457635   0.22768055    3.6030049 
 1436000     4.031492    1.2839043    2.7475876  -0.22774751   0.85598484    1.0003411   0.75617088   -1.2298232            1  -0.23207729  -0.48261056  -0.44554042    0.2319191 -0.0018173905   0.06746781  0.010640838  -0.38805673  -0.37487101   0.71532053        0.075    1.4642364        1e-10 1.5896012e-11    6.2908861    2.4406695    31.520363 -0.0040572474  -0.18140639 0.0043308224   0.18270736   -2.2807183   0.86848931 
 1437000    4.0192187    1.2704729    2.7487458  -0.22641057   0.84703002   0.98662468   0.75051027   -1.2298232            1  -0.19611072  -0.44389822  -0.46474973   0.32031581 -0.0085619279 -0.031067288 -0.012215519  -0.35092251  -0.33694648   0.71738648        0.075    1.4615476        1e-10 1.5941922e-11    6.2727695    2.4428778    31.520363 -0.0039235246  -0.21349421 0.0018825895   0.18149364  -0.29685514  -0.39590144 
 1438000    4.0266546    1.2816848    2.7449699  -0.23021996   0.85450505   0.99751765   0.75562076   -1.2298232            1  -0.11159034  -0.37989552  -0.36237701    0.4075015 0.0070351516 -0.071788954  0.009516786   -0.2674563  -0.25398102   0.71968888        0.075    1.4470992        1e-10 1.5993086e-11    6.2527019     2.445305    31.520363 -0.0013642389  -0.20539085 -0.0074348037   0.20583033    1.4470344  0.035730978 
 1439000    4.0346937    1.2760148    2.7586789   -0.2243106   0.85072487   0.99640682   0.74999301   -1.2298232            1  -0.20373176   -0.4676391  -0.45619633   0.31264016 -0.015613037 -0.032525094  0.061869582  -0.35843685  -0.34596387   0.71879931        0.075    1.4451426        1e-10 1.5973318e-11      6.26044    2.4422579    31.520363  0.010262767  -0.22379109 -0.0062898014   0.18741616    1.9180183  0.089055684 
 1440000    4.0250698    1.2810676    2.7440022  -0.23202124   0.85409358   0.99797669   0.75460686   -1.2298232            1  -0.12902533  -0.38733053  -0.38101288    0.3812674 -0.0074715044  -0.13670742 0.0021190948  -0.28468215  -0.27148154   0.71542081        0.075    1.4155364        1e-10 1.589824e-11    6.2900043      2.43725    31.520363 -0.0039837193  -0.18721558 -0.0070350843   0.20892796    1.0419286    1.5260312 
 1441000    4.0283019    1.2865848    2.7417171  -0.23680636    0.8577719      1.00943   0.75290516   -1.2298232            1  -0.15587461  -0.40917271  -0.40729548   0.34884436 -0.0057785854 -0.016098221  0.069959799  -0.31118041  -0.29996572   0.71717905        0.075    1.4274213        1e-10 1.5937312e-11    6.2745837     2.457803    31.520363 0.0091202921  -0.19560386 0.00086679291   0.18466964   -1.5747142    0.3043747 
 1442000    4.0407512    1.2876834    2.7530679  -0.22012998   0.85850435    1.0052212   0.75705707   -1.2298232            1  -0.14151293  -0.39973389  -0.39742508   0.37262017 -0.0063112189 0.0039983248 0.0071080547  -0.29767517  -0.28500326   0.71732909        0.075     1.422441        1e-10 1.5940646e-11    6.2732713    2.4390382    31.520363  0.011422795  -0.18507074 0.0075577091   0.20419394  -0.88735068    1.8161355 
 1443000    4.0131505    1.2760485     2.737102  -0.23277142    0.8507473    1.0109032   0.73999927   -1.2298232            1  -0.23553008  -0.49966265  -0.46994478   0.26301718 -0.019313171 -0.0078939598  0.019298693  -0.38817372  -0.37983149   0.72191441        0.075    1.4281179        1e-10 1.6042542e-11    6.2334259    2.4520147    31.520363 0.0014634533  -0.19202342 -0.005542466    0.2063015  -0.19945337    2.6139566 
 1444000    4.0215847    1.2817223    2.7398624  -0.22922652   0.85453006    1.0132347   0.74478672   -1.2298232            1  -0.20261781   -0.4365292  -0.43548552   0.26416127 0.0031311218 2.7607695e-05  0.023837978  -0.35624898  -0.34725202   0.71863601        0.075    1.4222659        1e-10 1.5969689e-11    6.2618627    2.4510165    31.520363 -0.0037728549  -0.20955308 0.0027456784   0.21533105   0.83440376    1.7362393 
 1445000    4.0330398    1.2831983    2.7498415  -0.23085856   0.85551413   0.99696434   0.75771114   -1.2298232            1  -0.18572424  -0.41541044  -0.44990036   0.30813809 -0.00053461697 -0.0040167857 -0.042784352  -0.34202139  -0.32803594   0.71617038        0.075    1.4126356        1e-10 1.5914897e-11     6.283421    2.4462539    31.520363 0.0090122244  -0.18881426 -0.0015700965   0.18454119   -0.2400919  -0.34365462 
 1446000    4.0264704    1.2882317    2.7382387  -0.22855455   0.85886994    1.0168178    0.7496507   -1.2298232            1  -0.16877967   -0.4141035  -0.40501774   0.31278223 0.0009715033 -0.072703756 -0.022217749  -0.32341416  -0.31392535   0.71901243        0.075    1.4111498        1e-10 1.5978054e-11    6.2585845    2.4535285    31.520363  0.001927654  -0.19191346 0.0039194193   0.21001656   0.70633542    4.1582893 
 1447000    4.0156768      1.27601    2.7396668  -0.23617074   0.85072164     1.002413   0.74583121   -1.2298232            1  -0.14604131  -0.43066497  -0.40156745   0.39410849  0.018064744 0.0030701625  0.033063075  -0.29988793  -0.28913078   0.71900548        0.075    1.3903416        1e-10 1.5977899e-11     6.258645     2.446513    31.520363  -0.01062527  -0.21727075 -0.00037222962   0.19399259   0.52430159  -0.15682555 
 1448000    4.0281248    1.2771584    2.7509664  -0.23334527    0.8514873    0.9908346   0.75513915   -1.2298232            1   -0.1255775  -0.37175061   -0.3792968   0.37431492 0.0048340723  -0.01475977  0.058701607  -0.28134411   -0.2670142   0.71407016        0.075    1.3958703        1e-10 1.5868226e-11    6.3019017    2.4367041    31.520363 -0.0065183697  -0.17971531 0.0052059065    0.1980435   0.75861172    1.6208258 
 1449000    4.0278273    1.2894445    2.7383827  -0.23039572   0.85967853    1.0171937   0.75075882   -1.2298232            1  -0.02873289  -0.29735348  -0.29563675   0.50679155 -0.0021052509 -0.066231474  0.040400574  -0.18359595  -0.17393222   0.71324255        0.075    1.3963507        1e-10 1.5849835e-11    6.3092141    2.4436884    31.520363 -0.0049509741  -0.19690395  0.007253404   0.20911118    1.7847815    2.7823479 
 1450000    4.0486197    1.2864218    2.7621979  -0.22926902   0.85766325    1.0054746   0.75545851   -1.2298232            1  -0.23237397  -0.44823116  -0.46333823   0.21444749 -0.012303315  0.058547918  0.027979279  -0.38820646  -0.37590046   0.71329906        0.075    1.4240047        1e-10 1.585109e-11    6.3087143    2.4463724    31.520363 0.00078595233  -0.20139677 0.0059253917   0.18836426    -1.793191    1.9374847 
 1451000    4.0547409    1.3055452    2.7491957  -0.23241668   0.87041289    1.0339185   0.75734872   -1.2298232            1  -0.17167007  -0.43718866  -0.43030594   0.35248438 0.0016995222 -0.00059617375 0.0042005264  -0.32789247   -0.3192568   0.71755755        0.075    1.4179006        1e-10 1.5945723e-11     6.271274      2.43748    31.520363 -0.0035119597  -0.16550005  0.004372343   0.21761282   -2.1465569  -0.61911167 
 1452000    4.0444781    1.2933803    2.7510978   -0.2294392   0.86230249    1.0104662   0.75985431   -1.2298232            1  -0.20179285  -0.45105484  -0.42466419   0.27034048 -0.015932959 -0.093830324 0.0066782966  -0.35853209  -0.34603188   0.71441088        0.075    1.4220288        1e-10 1.5875797e-11    6.2988962     2.448426    31.520363 0.0060412598  -0.20495298 0.0052622342   0.20212974    1.1152661    1.1447098 
 1453000     4.026201     1.269664    2.7565369  -0.22861942   0.84649077   0.99808932   0.74166413   -1.2298232            1 -0.088393236  -0.31906605  -0.37825536   0.43214171 -0.0084299927  -0.11152004 -0.028813705  -0.24138029  -0.23086552   0.70997794        0.075    1.4119619        1e-10 1.5777288e-11    6.3382251    2.4520013    31.520363 -0.011078275  -0.16893507 -0.0096821583   0.20801194  0.038135192     1.881589 
 1454000    4.0314499    1.2823985    2.7490514  -0.22722517   0.85498089    1.0107712   0.74725434   -1.2298232            1   -0.1920632   -0.4350535   -0.4474083    0.3062722 -0.0042921245 -0.021732481 -0.018198052  -0.34620338  -0.33634576   0.71757409        0.075    1.3922717        1e-10 1.5946091e-11    6.2711295    2.4544257    31.520363 -0.00025723238  -0.20047332 -0.0014521413   0.18518937  -0.09248276  -0.30507846 
 1455000    4.0376849    1.2992721    2.7384128  -0.23321022   0.86623061    1.0162727   0.76248294   -1.2298232            1  -0.11257736  -0.37161041  -0.34568766     0.379566  0.006067977  0.027053308  0.043857108  -0.26985882  -0.25764523   0.71940718        0.075    1.3919814        1e-10 1.5986826e-11    6.2551502    2.4414602    31.520363 -0.0022553582  -0.24151367 0.00046298634   0.18642311   0.26415751 0.0025767035 
 1456000    4.0171671    1.2667305    2.7504366  -0.22668153   0.84453496   0.99619606   0.73966484   -1.2298232            1  -0.22275456  -0.47477726  -0.44371831   0.25023187 -0.013859982 -0.035681804 -0.040359684  -0.37532921   -0.3649566   0.71572445        0.075    1.3941665        1e-10 1.5904988e-11    6.2873359    2.4463249    31.520363 -0.0063961663  -0.20728257 -0.0025099283   0.20063387    1.9260953    1.8200568 
 1457000    4.0059938     1.263433    2.7425609  -0.22796519   0.84233649   0.99043255   0.73993322   -1.2298232            1  -0.17472851  -0.42784323  -0.42712484   0.33078255 -0.018803441 0.0045118508 -0.019813347  -0.32735852  -0.31610783   0.71367882        0.075    1.3931482        1e-10 1.5859529e-11    6.3053573    2.4507783    31.520363 -0.0023802633  -0.20965426 -0.0065480967   0.20349864   0.71803797   0.17071998 
 1458000    4.0267366    1.2755275    2.7512091  -0.23119944   0.85039997   0.99726812   0.74884721   -1.2298232            1  -0.20774173  -0.42803099  -0.46199019   0.26679599 0.0022669286  0.095472147  0.016024035  -0.36221048  -0.35009679   0.71452438        0.075    1.3962586        1e-10 1.5878319e-11    6.2978957    2.4386406    31.520363 -0.0051961503   -0.1905578 0.0068497976   0.20229011   -0.3041509   0.33546155 
 1459000     4.017219    1.2744916    2.7427275  -0.23654462   0.84970931   0.99755638   0.74747905   -1.2298232            1  -0.22985201  -0.47240161  -0.48507294   0.26791853 -0.025184302  -0.02026704 0.0010445853  -0.38403854  -0.37224822   0.71774366        0.075    1.4041305        1e-10 1.5949859e-11    6.2696478    2.4385378    31.520363 -0.013604906  -0.19156391 -0.00039267332   0.22507149 -0.010375498    2.4048386 
 1460000    4.0302028    1.2866786    2.7435243   -0.2227744   0.85783445    1.0083393   0.75376576   -1.2298232            1  -0.12802913  -0.38656332   -0.3708726   0.37334854 -0.013513629   0.14984372  0.013532213  -0.28351245  -0.27196454   0.71746113        0.075     1.405205        1e-10 1.5943581e-11    6.2721168    2.4424524    31.520363 0.0043306422  -0.21571118 -0.010006319   0.19614862  -0.24206862    3.3867233 
 1461000    4.0343268     1.287841    2.7464857  -0.23250655   0.85860947    1.0189537   0.74773186   -1.2298232            1  -0.10990567  -0.35974515  -0.38220235   0.41223049 -0.0031552864  0.045635669 -0.024703214  -0.26414435  -0.25535624   0.71590809        0.075    1.4079956        1e-10 1.5909069e-11    6.2857231    2.4441408    31.520363 -0.0032270214  -0.20078501 0.0090730192   0.23714588  -0.54419599    1.4843188 
 1462000    4.0325959    1.2892198    2.7433761  -0.22926595   0.85952871    1.0108851   0.75487093   -1.2298232            1  -0.16196096  -0.40403515  -0.44740963   0.36556189 -0.0023678714 -0.0078430317 0.00047309855  -0.31767225  -0.30625978   0.71110257        0.075    1.4032008        1e-10 1.5802279e-11     6.328201    2.4421478    31.520363 -0.0006040038  -0.17195108 -0.012491461   0.19025694    0.7236626    1.6991029 
 1463000    4.0412709    1.2867284    2.7545425  -0.22787882   0.85786768    1.0159666    0.7485438   -1.2298232            1  -0.24397752  -0.45415469  -0.50193003   0.22415218 0.0065810376 0.0041830078  -0.02275191  -0.39838367  -0.38900169   0.71219395        0.075    1.4107197        1e-10 1.5826532e-11    6.3185036    2.4469982    31.520363  0.004540813  -0.21286506 0.0037911639   0.19848368  -0.38074961  -0.68570459 
 1464000    4.0283624    1.2730103    2.7553521  -0.22519362   0.84872172   0.99312888   0.74887183   -1.2298232            1  -0.17633627  -0.42399368  -0.40724868   0.30223354 -0.0021299623  0.073899799 -0.018781837   -0.3308101  -0.31810048   0.71489982        0.075    1.4182582        1e-10 1.5886663e-11    6.2945882    2.4399943    31.520363 -0.0027490563  -0.20256414 0.0036594146   0.20282645   0.06803321   0.88923143 
 1465000    4.0233932    1.2786819    2.7447113  -0.22684621   0.85250301    1.0087787    0.7444403   -1.2298232            1  -0.15746675  -0.43251213  -0.41178607   0.37189796 0.0025122037    0.0728126 -0.0040060753  -0.31102646  -0.30146489   0.71410964        0.075    1.4030712        1e-10 1.5869103e-11    6.3015533    2.4386426    31.520363 -0.0033860026  -0.21486982 0.0031920467   0.17107551   0.26478688    3.2663756 
 1466000    4.0347587    1.2825058    2.7522529  -0.23552794   0.85505245    1.0054421   0.75106324   -1.2298232            1   -0.2172383  -0.45208442  -0.45923112   0.25960065 -0.0029477201 -0.042116342 -0.031430425  -0.37216416  -0.36076015   0.71391988        0.075    1.4161684        1e-10 1.5864886e-11    6.3032284    2.4497799    31.520363 -0.0046701886  -0.20751354 -0.0065100538   0.18947131   0.43389228   0.89031443 
 1467000     4.044695    1.2958673    2.7488276  -0.22686693   0.86396064    1.0193661   0.75650125   -1.2298232            1  -0.12615354  -0.35242409  -0.39009524   0.36405871 0.0092245379 -0.057747488 -0.043852044  -0.28220112  -0.27166298   0.71650853        0.075    1.3956762        1e-10 1.5922412e-11    6.2804556    2.4425035    31.520363   0.00406938  -0.18311168 0.0014766361   0.17274762   0.25262151    2.2499679 
 1468000    4.0413055    1.2754829    2.7658225   -0.2206789   0.85037027    1.0139368     0.737262   -1.2298232            1  -0.14367224  -0.41649298  -0.41625995   0.40173622 -0.010255639   0.00629157  0.039245899  -0.29575124  -0.28840667   0.71584209        0.075     1.383902        1e-10 1.5907602e-11    6.2863026    2.4401531    31.520363 -0.0084170286  -0.22412353 -0.0066932596   0.19370849  0.072964027    0.7990561 
 1469000    4.0462734    1.2905978    2.7556756  -0.23100317   0.86044741     1.002081   0.76251801   -1.2298232            1  -0.14552412  -0.40621594  -0.44442547   0.41406904 -0.0057094359  0.039347144  0.015678978  -0.30281282  -0.28856619   0.71339703        0.075    1.3833547        1e-10 1.5853267e-11     6.307848    2.4394801    31.520363 -0.0016919347  -0.18582607 0.0043922288   0.19727933  -0.46421833    3.8263968 
 1470000    4.0327684    1.2850016    2.7477668  -0.23286879   0.85671637    1.0097859   0.75087282   -1.2298232            1  -0.10349482  -0.38800268  -0.36285196    0.4403702 0.0018203121 -0.047128658 -0.027095863  -0.25838139  -0.24763672   0.71921473        0.075    1.3883056        1e-10 1.598255e-11     6.256824    2.4432737    31.520363 0.0072841939  -0.20398492 0.0058197623   0.21370767    2.1082074    3.0567975 
 1471000    4.0350175    1.2759834    2.7590341  -0.22698642   0.85070393   0.99254938   0.75262697   -1.2298232            1  -0.23162842  -0.46112189  -0.49223735   0.25847398 -0.0035813107  0.012150629 -0.0025800912  -0.38687684  -0.37330991   0.71729992        0.075    1.3801106        1e-10 1.5939998e-11    6.2735264     2.445411    31.520363 0.0045554949  -0.18954755 0.0027838762   0.18888303   0.11089141   0.65584874 
 1472000    4.0526843    1.2887863    2.7638981  -0.22898244   0.85923966     1.005306   0.75824258   -1.2298232            1  -0.12466154  -0.40800914  -0.38323969    0.4172642 -0.015152964  0.035686626 -0.018049899  -0.28106832  -0.26816398    0.7142097        0.075     1.367743        1e-10 1.5871327e-11    6.3006705    2.4511912    31.520363 -0.016027478   -0.2260536 0.0067822389   0.19270689   0.61965626    4.4434734 
 1473000    4.0301789    1.2820195    2.7481594  -0.22947376   0.85472819    1.0102331   0.74719909   -1.2298232            1 -0.090362265  -0.37953483  -0.35206329   0.46051132 -0.00028396283  0.019131119  0.011017721  -0.24449104  -0.23456802   0.71437845        0.075    1.3754564        1e-10 1.5875077e-11    6.2991822    2.4482185    31.520363 -0.0094205766  -0.20502952 -0.007963809   0.19446037   -1.2563089  -0.49516557 
 1474000    4.0305969    1.2710871    2.7595098  -0.22213733   0.84743954   0.99950632   0.74228897   -1.2298232            1  -0.20363131  -0.45878935  -0.42798124   0.27587665 -0.013037699  0.016299396  0.039525952  -0.35674725  -0.34630586   0.71284084        0.075    1.3641487        1e-10 1.5840908e-11    6.3127696    2.4599849    31.520363 0.0045022999  -0.20256325 -0.00029547935    0.2067957  -0.38916523      -2.0057 
 1475000    4.0454754    1.2946387    2.7508367  -0.23514933   0.86314148    1.0084768   0.76265071   -1.2298232            1  -0.17962228  -0.45756878  -0.42334786   0.34204979 -0.0054945393 -0.011145057  0.015533083  -0.33693835  -0.32357732   0.70911542        0.075    1.3832165        1e-10 1.575812e-11    6.3459345    2.4415801    31.520363 0.0019292619  -0.17596649 -0.0038407683   0.19575131    1.4896576    2.1988126 
 1476000    4.0547728    1.2836488     2.771124  -0.22152419   0.85581447    1.0014198   0.75513611   -1.2298232            1   -0.1363826  -0.43011779  -0.37337933   0.39434934 0.00015287886 0.0086094673  0.020949273  -0.29214859  -0.27933029   0.71242841        0.075    1.3942353        1e-10 1.5831742e-11    6.3164241    2.4445865    31.520363 -0.011651155  -0.19845987 0.0038233786   0.19843842    1.0586972 -0.046833179 
 1477000    4.0368586    1.2866104    2.7502481  -0.22864127     0.857789    1.0121328   0.75106373   -1.2298232            1  -0.12813115  -0.38871155  -0.38233105   0.38664916 -0.00097559927 -0.0065343004   0.03084446  -0.28305711  -0.27260806   0.71383798        0.075    1.3964441        1e-10 1.5863066e-11    6.3039515    2.4486506    31.520363 -0.004935679  -0.19097086 -0.0041703314   0.18060156  -0.47050733    1.4062996 
 1478000    4.0314276    1.2881182    2.7433095  -0.22927741   0.85879423     1.017523   0.74903459   -1.2298232            1  -0.19994588  -0.43969965  -0.46014206   0.30000408 0.0041838594  -0.13651927  0.086136938  -0.35445327  -0.34519222   0.71711433        0.075    1.4002983        1e-10 1.5935874e-11      6.27515    2.4492241    31.520363 0.0058195355  -0.21357775 0.00058494885   0.23419687  0.025779887   0.99186091 
 1479000    4.0430278    1.2820298    2.7609981   -0.2233747   0.85473508     1.007961    0.7487831   -1.2298232            1 -0.068609691  -0.31941504  -0.31454405   0.42813001 0.0041319868  0.017790078 -0.009938488  -0.22306521   -0.2124911   0.71674523        0.075    1.3873992        1e-10 1.5927672e-11    6.2783816    2.4544995    31.520363 -0.00021998965   -0.2038534 -0.0013046102   0.21966001  -0.32085104   0.87823463 
 1480000    4.0561696    1.2941262    2.7620434  -0.22878487   0.86279982   0.99975174    0.7681104   -1.2298232            1  -0.21197702  -0.45797296  -0.45167634   0.27371823 -0.0034437336  0.048549115   0.06530415  -0.37041929  -0.35468661   0.71186298        0.075    1.4044021        1e-10 1.5819177e-11    6.3214412    2.4403708    31.520363 0.0066536772  -0.19710245 0.0074842536   0.21364626  -0.72102596 0.0095227585 
 1481000    4.0455445    1.2896442    2.7559002  -0.23642284   0.85981167    1.0168494   0.75122234   -1.2298232            1  -0.13314705  -0.40512179  -0.39726997    0.4029506 -0.001049106  0.026456575   0.02295276  -0.28810573  -0.27829724   0.71660676        0.075    1.4007293        1e-10 1.5924595e-11    6.2795947    2.4572082    31.520363 -0.0034893629  -0.20199293 -0.0034277488   0.15511726   0.63716853   0.93866498 
 1482000    4.0418284    1.2859184      2.75591  -0.22718003   0.85732762    1.0027495   0.75677636   -1.2298232            1  -0.16659106  -0.42833558   -0.4170423    0.3456047 -0.0075494901 -0.065326655  0.057786326  -0.32269539  -0.30972856   0.72177017        0.075    1.3843969        1e-10 1.6039337e-11    6.2346716     2.463029    31.520363 0.0071510218  -0.21211054 -0.0057642086   0.22025246  -0.15756068   0.31346813 
 1483000    4.0276392    1.2760642     2.751575  -0.23312485   0.85075778    1.0095991   0.74091945   -1.2298232            1  -0.15046261  -0.42780473  -0.38769796   0.36411485 -0.0019633074 -0.091961127 -0.025375826  -0.30329606  -0.29457787   0.71352981        0.075    1.3960774        1e-10 1.5856218e-11    6.3066742    2.4455696    31.520363 -0.0060018322  -0.18466462 0.0039089254   0.20661673   0.25487932    2.5709323 
 1484000    4.0394413    1.2847312    2.7547101  -0.22998301   0.85653611    1.0135728    0.7479472   -1.2298232            1  -0.22708194  -0.45827573  -0.44483394   0.22186386 -7.7000401e-06    0.0158289   0.01831537  -0.38136503  -0.37176441   0.71051472        0.075    1.4056939        1e-10 1.5789216e-11    6.3334367    2.4440529    31.520363 0.0030663727  -0.18910279 -0.0095186055   0.18905578   0.93245066   -1.6654721 
 1485000    4.0140383     1.274448    2.7395903  -0.22737302   0.84968026    1.0128156   0.73687034   -1.2298232            1 0.0088345863  -0.28761433  -0.25205883   0.56617693 0.0089058325  -0.10462877 -0.023227818  -0.14316363   -0.1357398   0.70984255        0.075    1.4007001        1e-10 1.5774279e-11     6.339434    2.4377208    31.520363  0.017413661  -0.20903434 0.0019112248   0.20772784    2.0043938    3.4442131 
 1486000    4.0336317    1.2917897     2.741842  -0.22987504   0.86124207    1.0239892    0.7487019   -1.2298232            1  -0.18718195   -0.4224925  -0.43400238   0.29494903 -0.0054470291 -0.090165772 -0.00075455333  -0.34162072  -0.33335131   0.71792758        0.075    1.4151965        1e-10 1.5953946e-11    6.2680417    2.4542527    31.520363 -0.0045044543  -0.21121626 -0.005622406   0.21406572  -0.43880623  -0.10954832 
 1487000    4.0433539    1.2897432    2.7536107  -0.23259431   0.85987767    1.0199191   0.74920973   -1.2298232            1   -0.2085417  -0.43439734   -0.4433003   0.25207255  0.007270001   0.08136499    0.0638799  -0.36308522  -0.35413008   0.71410297        0.075    1.4126891        1e-10 1.5868955e-11    6.3016122    2.4417352    31.520363 0.00029286063  -0.20284347 -0.0060158447   0.20839659   0.27057136    2.0120754 
 1488000    4.0374279    1.2802609     2.757167   -0.2273347   0.85355576    1.0202003   0.73831778   -1.2298232            1  -0.14326894  -0.39212836  -0.41637323   0.37869478 -0.0032556791 -0.033334828 -0.035438045  -0.29556572  -0.28889746   0.71581964        0.075    1.4035187        1e-10 1.5907103e-11    6.2864997    2.4450756    31.520363 -0.0062788264  -0.21813143 0.0008465439   0.18628347  -0.41402966  -0.42119798 
 1489000    4.0302457    1.2876514    2.7425944  -0.22616313     0.858483    1.0283666   0.74100405   -1.2298232            1  -0.18241993  -0.42786837  -0.41601315   0.29662173 0.0092774484   -0.0159884 0.00031142903  -0.33527082  -0.32921414   0.71791151        0.075    1.3987632        1e-10 1.5953589e-11     6.268182     2.447522    31.520363 -0.0049365019  -0.20538864 0.00037873665   0.18676087    1.9867082    1.1748314 
 1490000     4.044008     1.286498      2.75751  -0.22899262   0.85771405    1.0068177   0.75461503   -1.2298232            1  -0.14506294  -0.42676389  -0.39701351   0.38858858 -0.012656694 -0.037001833   0.03212326  -0.30072145  -0.28878115   0.71421955        0.075    1.3956821        1e-10 1.5871546e-11    6.3005836    2.4473204    31.520363 -0.0027903105  -0.20131631 -0.0097419812    0.2237463   0.88419131    2.4845165 
 1491000    4.0290782    1.2864435    2.7426348  -0.23438169   0.85767769    1.0135992   0.74986056   -1.2298232            1  -0.26895911  -0.50516456  -0.49779718   0.19608442 -0.0082621685 -0.027885316 -0.011830736  -0.42363688  -0.41364535     0.716216        0.075    1.4101193        1e-10 1.5915911e-11    6.2830208    2.4607774    31.520363 -0.0032697027  -0.19910083 0.00096796638    0.2214977    1.1127988   -1.6985881 
 1492000    4.0191291    1.2724861    2.7466429  -0.22976696   0.84837229    1.0029059   0.74151471   -1.2298232            1   -0.1659861  -0.42374874  -0.40156885   0.32735928 -0.0019981822 -0.018490451  0.040678134  -0.31894233  -0.30914593   0.71352669        0.075    1.4126418        1e-10 1.5856149e-11    6.3067017    2.4480383    31.520363 -0.0046239537  -0.23148407 0.0012554464   0.20301648   0.35612101   0.86775494 
 1493000    4.0208105     1.284716    2.7360945  -0.23203407   0.85652599    1.0032183   0.75509549   -1.2298232            1  -0.16148439  -0.40011723  -0.40180883   0.31747288 -0.0044756235   0.10645002 -0.035892426    -0.317242  -0.30468881   0.71396043        0.075    1.3913991        1e-10 1.5865787e-11    6.3028703     2.443358    31.520363 0.0058348426  -0.19133433 -0.0006080901   0.19126319   -1.1020443  0.091721544 
 1494000     4.018444    1.2784787    2.7399653  -0.22282572   0.85236752    1.0007426    0.7497721   -1.2298232            1  -0.15301727  -0.38567919  -0.39632355   0.32295091 0.0010359922 0.0018957877  0.035429325   -0.3076768  -0.29586831   0.71797927        0.075    1.3792803        1e-10 1.5955095e-11    6.2675904    2.4430239    31.520363 -0.0047586661  -0.19719826 0.0069433277   0.18979985   -0.4440706   0.14604452 
 1495000    4.0082853    1.2704833     2.737802  -0.23515295   0.84703697   0.99993879   0.74130852   -1.2298232            1  -0.17159897  -0.40927853  -0.42731551   0.32179714 -0.019370432 -0.005165344  0.012144232  -0.32451267  -0.31433525   0.72016265        0.075    1.3818602        1e-10 1.6003614e-11    6.2485885    2.4532392    31.520363  0.010737664  -0.19927644 -0.0055955542   0.20418782  -0.88315812     1.202372 
 1496000    4.0393909    1.2902261    2.7491649  -0.23112293   0.86019958    1.0076935    0.7582147   -1.2298232            1  -0.10677171  -0.37934121   -0.3649522    0.4239783  0.010513521  0.087186991  0.024689863  -0.26317273  -0.25061494   0.71272874        0.075    1.3717047        1e-10 1.5838416e-11    6.3137625    2.4449809    31.520363 -0.0057342363  -0.20282759 0.0069613541   0.18469889  -0.18305805   -0.1029656 
 1497000    4.0093287    1.2683548    2.7409738   -0.2226246   0.84561794   0.98729858   0.74765453   -1.2298232            1  -0.11345228   -0.3293358  -0.39869935   0.38767831 -0.0041596783 -0.0063825557 -0.0036897906  -0.26767501  -0.25438424   0.71253676        0.075    1.3657588        1e-10 1.583415e-11    6.3154637    2.4424626    31.520363 0.0059428785  -0.19791917 -0.005922558   0.18825497   0.30375515    1.8408331 
 1498000    4.0167663    1.2765735    2.7401927  -0.23533849   0.85109737   0.99300976   0.75297412   -1.2298232            1   -0.1137973  -0.39848092  -0.34705256   0.40414156  0.014519555 -0.025144686  0.020151685  -0.26911733  -0.25554451   0.71724315        0.075     1.375641        1e-10 1.5938737e-11    6.2740229    2.4449646    31.520363 -0.0046460403  -0.19552639 -0.014667333   0.17850647   0.33190629   0.77605547 
 1499000    4.0254842    1.2762072     2.749277  -0.22576814   0.85085312   0.99511677   0.75110274   -1.2298232            1  -0.19470352  -0.45955674    -0.436412   0.31185819 -0.013701323  0.019898862 -0.023543336  -0.34963752  -0.33675148   0.71431921        0.075    1.3712917        1e-10 1.587376e-11    6.2997046    2.4438888    31.520363 0.0041416273  -0.23340477 0.0035920348   0.20899588  -0.95683542   -0.7289213 
 1500000    4.0281887    1.2732357     2.754953  -0.22288844   0.84887202   0.98726257   0.75318571   -1.2298232            1 -0.078340694  -0.32135628  -0.35319278   0.43952698 -0.012846701 -0.059919435  0.033318563  -0.23370437  -0.21926751   0.71635967        0.075    1.3787754        1e-10 1.5919104e-11    6.2817607    2.4627027    31.520363 -0.0024045271  -0.18192799 -0.00077537011   0.18441081   0.88748326    1.1680036 
 1501000    4.0260557    1.2746392    2.7514165  -0.22709814   0.84980776   0.99805471    0.7473008   -1.2298232            1  -0.11197757  -0.41585506  -0.35398721   0.43390957 -0.0058541274 -0.0036215425 -0.028517629  -0.26612733  -0.25444491   0.71808686        0.075    1.3700814        1e-10 1.5957486e-11    6.2666514    2.4558572    31.520363 0.0061201895  -0.18188209 0.0041273055    0.2080995   0.54084987  -0.17287321 
 1502000    4.0297594    1.2771484     2.752611   -0.2223494   0.85148063   0.99787933   0.75025283   -1.2298232            1  -0.16134559  -0.40601539  -0.40527404   0.32725265 0.0064064799 -0.0057356311 -0.019142643  -0.31610428   -0.3037879    0.7208593        0.075    1.3696429        1e-10 1.6019096e-11    6.2425497    2.4615357    31.520363 -0.007430727  -0.19677191 0.0053980056   0.19555405    0.7885235    2.5683624 
 1503000     4.025577    1.2788803    2.7466967  -0.22799793   0.85263531    1.0075687   0.74550151   -1.2298232            1  -0.17698901  -0.42836919  -0.42469994    0.3221021 -0.0016235453  -0.13054466 -0.00072708802  -0.33076762  -0.32081443   0.71672545        0.075    1.3870218        1e-10 1.5927232e-11    6.2785548    2.4449253    31.520363 -0.0042067858  -0.19144433 -0.0097066061   0.19470624    1.4541948  -0.69002554 
 1504000     4.022238    1.2857473    2.7364907  -0.22988733   0.85721353    1.0096306   0.75182153   -1.2298232            1   -0.1253867  -0.38389744  -0.38750424   0.39524159 0.0077617787 -0.023296975  0.029670937  -0.28046897  -0.26950644   0.71548601        0.075    1.3895824        1e-10 1.5899689e-11    6.2894312    2.4474555    31.520363 -0.0031868163   -0.1816048 -0.0070323438   0.20273551  -0.46483727  -0.63958677 
 1505000    4.0278865    1.2805924    2.7472941  -0.22886836   0.85377675    1.0051269   0.74912274   -1.2298232            1  -0.27797944  -0.49129183  -0.50887384   0.16622734 -0.012062571 -0.019034755 -0.026032147  -0.43250502   -0.4214563   0.71566556        0.075    1.3890049        1e-10 1.5903679e-11    6.2878532    2.4499293    31.520363 0.0067760754   -0.1822193 -0.0027472826   0.17507096    1.0640212  -0.97689642 
 1506000    4.0284085    1.2865178    2.7418907  -0.22562181   0.85772726    1.0102393   0.75226956   -1.2298232            1  -0.20792513  -0.42709246   -0.4883163   0.29163338 -0.022792231  0.024633408  0.046065706  -0.36309982  -0.35213176   0.71829925        0.075    1.4011352        1e-10 1.5962206e-11    6.2647984    2.4483722    31.520363 -0.0014143765  -0.21037829 0.00023261773   0.18905172   0.64843392    1.0894189 
 1507000    4.0240025    1.2796501    2.7443524  -0.23161445   0.85314854      1.00379   0.74898484   -1.2298232            1 -0.097058599  -0.33273178  -0.37142859   0.41298457 0.0092765845  0.013724107 -0.015061245  -0.25155573  -0.24034463   0.71634911        0.075    1.4026413        1e-10 1.5918869e-11    6.2818533    2.4413346    31.520363 -0.0004103805   -0.1893926 0.0095658368   0.22542201  -0.64658721    1.1887338 
 1508000      4.04211    1.2948612    2.7472487  -0.22376228   0.86328985    1.0196733   0.75515361   -1.2298232            1  -0.15215091  -0.40604382  -0.40635871   0.35594982 -0.0018965607 -0.0015488041 -0.042394021  -0.30792051   -0.2977042    0.7145573        0.075    1.4026809        1e-10 1.5879051e-11    6.2976055    2.4500319    31.520363 -0.0028730118  -0.18948717  0.002071615   0.19460276  -0.91399856    4.1784274 
 1509000    4.0538577    1.2932273    2.7606304  -0.23319173   0.86220052    1.0152523   0.75636976   -1.2298232            1  -0.19315114  -0.44291159   -0.4794441   0.34290227 -0.0018294291  0.035728004 -0.0053810777   -0.3491716  -0.33807335   0.71284476        0.075    1.3949323        1e-10 1.5840995e-11     6.312735      2.44448    31.520363 -0.0053993948   -0.2364208 0.0026121917   0.18816509  -0.37208469    1.2864447 
 1510000    4.0519745    1.2929948    2.7589797  -0.22428837   0.86204549    1.0230377   0.75071984   -1.2298232            1 -0.069823217  -0.31464913  -0.33785749   0.44303697 0.0045205586  0.024735902  -0.01648408  -0.22467824  -0.21585675   0.71469207        0.075    1.3833339        1e-10 1.5882046e-11     6.296418    2.4483037    31.520363 -0.0059038101  -0.21176864   0.00234075   0.18524393  0.032279719    2.3606422 
 1511000    4.0333417    1.2814192    2.7519225  -0.22582202   0.85432802    1.0180197   0.74113352   -1.2298232            1  -0.11607276  -0.37917794  -0.40031766   0.43127733  0.015740964 0.0048861974 0.00079510189  -0.26895036  -0.26139001   0.71452197        0.075    1.4092394        1e-10 1.5878266e-11     6.297917    2.4529635    31.520363 -0.010710495  -0.20340377 -0.009324654   0.18793845    1.1371479   0.72838024 
 1512000    4.0643485    1.3048771    2.7594714  -0.22672927   0.86996749    1.0235911   0.76374174   -1.2298232            1  -0.18947489  -0.42376444  -0.43513721   0.29047697  0.012649599  0.021621013 -0.0076536073  -0.34701601  -0.33558743   0.71139554        0.075    1.3980203        1e-10 1.580879e-11    6.3255949    2.4507498    31.520363 -0.0073207642  -0.23735855  0.010839397   0.18523404   -1.8903873    0.8390791 
 1513000     4.055174      1.29099    2.7641839  -0.22800775    0.8607089    1.0225534   0.74879335   -1.2298232            1  -0.22195856  -0.46863327  -0.46283478   0.26559237 0.0091662377  0.040268184   0.02412976   -0.3764162  -0.36792297   0.71250429        0.075    1.4062193        1e-10 1.5833429e-11    6.3157514    2.4397535    31.520363 -0.0009446889  -0.18292399 -0.0091749854   0.20576678   -2.2657496  -0.56885144 
 1514000     4.056228     1.295633    2.7605951  -0.22138758   0.86380439    1.0239718   0.75304965   -1.2298232            1  -0.13838143  -0.37702076   -0.3797037   0.34158016 -0.0043094801  0.035160001   0.06455611  -0.29371704  -0.28454831   0.71373012        0.075     1.432047        1e-10 1.5860669e-11    6.3049042    2.4453129    31.520363 -0.0032228855  -0.21491685  0.011091084   0.20209309  -0.50356101    2.4860395 
 1515000    4.0506106    1.2819117    2.7686989  -0.22783651   0.85465637    1.0194783   0.74067977   -1.2298232            1  -0.12093365  -0.39957533  -0.37220301   0.40897738 0.0079661011   0.12388059  -0.04014626  -0.27371766  -0.26645911    0.7157947        0.075    1.4255634        1e-10 1.5906549e-11    6.2867188    2.4483322    31.520363 -0.0079363066  -0.21263555 -0.0079396446   0.19529687   -1.2952699    2.4672306 
 1516000    4.0429739    1.2886211    2.7543528   -0.2321536   0.85912955    1.0150022   0.75134641   -1.2298232            1 -0.077173371  -0.35158589  -0.34629507   0.46636085  0.020373266 0.0010733033 0.0069274347  -0.23215764  -0.22205989   0.71350789        0.075    1.4277097        1e-10 1.5855731e-11    6.3068678    2.4411334    31.520363   0.00427449  -0.20610704 -0.0041117279   0.18443175  -0.15649668 -0.039474654 
 1517000    4.0496217    1.2947808    2.7548409  -0.23352438   0.86323627    1.0253967   0.75110229   -1.2298232            1  -0.20146503  -0.43562436  -0.46482338   0.29605266 -0.020201447  0.050555042  0.030945941  -0.35639894  -0.34783531   0.71114671        0.075    1.4059596        1e-10 1.580326e-11    6.3278082    2.4485577    31.520363 0.0036304322  -0.20719648 -0.0025159991   0.19021215   -0.9599126    1.4952531 
 1518000    4.0283462    1.2899359    2.7384103  -0.22714337   0.86000611     1.023252   0.74712072   -1.2298232            1  -0.12325476  -0.41013442  -0.37042929   0.41079942 -0.017492468 -0.0071610572 -0.018311949  -0.27736737  -0.26931889   0.71125303        0.075    1.4059407        1e-10 1.5805623e-11    6.3268623    2.4374694    31.520363 -0.004927363   -0.1929532 0.0034980306   0.19947686  -0.66093737    1.5067478 
 1519000    4.0413691    1.2788712    2.7624979  -0.22795725   0.85262922    1.0188864   0.73765921   -1.2298232            1 -0.050286314   -0.3708438  -0.28215478   0.50213964 0.00070591135  0.079633753 0.0025119319  -0.20244725  -0.19572728   0.71487512        0.075    1.4024389        1e-10 1.5886114e-11    6.2948057    2.4416954    31.520363 0.0048967154  -0.22025843 0.0060861757   0.20989548 -0.037078009   0.53672977 
 1520000     4.051886    1.2823502    2.7695358  -0.22507689    0.8549487    1.0148539   0.74437461   -1.2298232            1 -0.097803734  -0.35909192  -0.38142923   0.44710995 -0.0043237261 -0.093151205  0.050411269  -0.25134989  -0.24266907   0.71752953        0.075    1.3966673        1e-10 1.5945101e-11    6.2715189    2.4485565    31.520363 -0.0030557777  -0.18382075 0.0018553149   0.20390832   0.57386911    1.0055622 
 1521000    4.0398798    1.2899496    2.7499302  -0.22875391   0.86001529    1.0158084   0.75228728   -1.2298232            1  -0.28313528  -0.52285829  -0.51759869   0.19105113 0.0034388967 -0.076541908 -0.029633391  -0.43831363  -0.42813688   0.71180732        0.075    1.4009557        1e-10 1.5817941e-11    6.3219355    2.4415225    31.520363 -0.0063787006  -0.17788467 0.0020909999   0.19290627  -0.44608635   -0.5809811 
 1522000     4.041464    1.2908604    2.7506036  -0.22948353    0.8606225     1.027255   0.74539351   -1.2298232            1   -0.2018583  -0.44263344   -0.4751979   0.31225645 0.0092286882 -0.036623336 -0.017403718  -0.35561463  -0.34849385   0.70737879        0.075    1.4246527        1e-10 1.5719529e-11    6.3615139    2.4476755    31.520363 -0.0060489527  -0.19882659 -0.0021214535   0.19288777   -1.4959798    2.6970317 
 1523000    4.0253437    1.2737419    2.7516019  -0.23075939   0.84920947    1.0088634   0.73880867   -1.2298232            1  -0.17026273  -0.41214173  -0.44506816   0.34642168 -0.0072085729  0.048230922 -0.055567515  -0.32266078  -0.31427297   0.71121714        0.075    1.4313275        1e-10 1.5804825e-11    6.3271816    2.4436189    31.520363 -0.0076287878  -0.20088911 0.00050551891   0.19092553  -0.57340589    2.7772066 
 1524000    4.0564006    1.2964234    2.7599772  -0.22705888   0.86433134    1.0181253   0.75798717   -1.2298232            1  -0.23201551  -0.47492615  -0.46650425   0.24538387 0.0037888787  -0.11255586  0.023098608  -0.38836961  -0.37734783   0.71756215        0.075    1.4286033        1e-10 1.5945826e-11    6.2712338    2.4383815    31.520363 -0.0021159294  -0.22139362 0.0045079171   0.22385299   0.75651063  -0.81198422 
 1525000    4.0530397    1.3032467    2.7497931  -0.23380935   0.86888046    1.0260319    0.7602133   -1.2298232            1  -0.19209727  -0.43216504  -0.42206922   0.27794247  0.015473541  -0.14978291 -0.043319726  -0.34891056  -0.33855822   0.71744711        0.075    1.4328035        1e-10 1.5943269e-11    6.2722394    2.4572849    31.520363 -0.0044306361  -0.19807534  0.012830771   0.18201443    1.0000383    2.3536949 
 1526000     4.037894    1.2797899     2.758104  -0.22780862   0.85324176    1.0079307   0.74627717   -1.2298232            1   -0.2712981  -0.50827166  -0.49517414   0.18955151 -0.0057022047 -0.099111773 -0.0018050226  -0.42523671  -0.41517519   0.71095935        0.075    1.4558508        1e-10 1.5799097e-11    6.3294758    2.4534326    31.520363 0.0015459807  -0.18818935 -0.0052224122   0.18571923   0.83809483  -0.20934783 
 1527000    4.0464762     1.294404    2.7520722  -0.22859539   0.86298503    1.0358502   0.74344323   -1.2298232            1  -0.13516701  -0.40472235  -0.40669527   0.40591659  0.010377077 0.0011484885 -0.016312795  -0.28852105  -0.28302947   0.71221867        0.075    1.4559059        1e-10 1.5827081e-11    6.3182843    2.4468237    31.520363 -0.0019985031   -0.2016751 -0.0079161319   0.19159059  -0.74727901  -0.31345445 
 1528000    4.0263158    1.2913811    2.7349347  -0.23447237   0.86096963    1.0158062   0.75390361   -1.2298232            1   -0.1895462  -0.41543504  -0.43599769   0.28279415 0.0079596333  -0.10313883 0.0081507768  -0.34505795  -0.33454748   0.72140831        0.075    1.4312142        1e-10 1.6031296e-11    6.2377989    2.4478749    31.520363 -0.00044613475   -0.1897118 -0.0030957172   0.20767231    1.0083227   0.97732084 
 1529000    4.0254537    1.3002805    2.7251733  -0.23612581   0.86690289    1.0280143    0.7554952   -1.2298232            1 -0.094816127   -0.3757344  -0.33334437   0.42463039 0.0028263814  0.017904676  0.051258145  -0.25065619  -0.24156006   0.71707148        0.075    1.4244991        1e-10 1.5934922e-11     6.275525    2.4381285    31.520363 -0.0040351516  -0.18059988 0.0024948262   0.18866212  -0.80099584    1.7452998 
 1530000    4.0225478    1.2805573    2.7419905  -0.22812153   0.85375337    1.0134574   0.74331836   -1.2298232            1  -0.18775738  -0.44449376  -0.42577743   0.30699904 0.0031480219  0.060177053  0.020977287  -0.34108566  -0.33242338   0.70916995        0.075    1.4218192        1e-10 1.5759332e-11    6.3454465    2.4459795    31.520363 0.0026046983  -0.19333569 0.0029393698   0.20438609   -1.2048123   0.14853625 
 1531000    4.0294954    1.2804804     2.749015   -0.2340415    0.8537021    1.0039142   0.74983557   -1.2298232            1  -0.16896428  -0.40951438  -0.40556198   0.30818352 -0.014892363  0.029191176  -0.00335673   -0.3236369  -0.31226805   0.71541627        0.075    1.4196782        1e-10 1.5898139e-11    6.2900442    2.4587861    31.520363 -0.0041326609  -0.19247807 -0.00037785943   0.18439053  -0.23906249    1.0656305 
 1532000    4.0367764    1.2888401    2.7479363  -0.23143001   0.85927554   0.99880398    0.7628028   -1.2298232            1 -0.095478228  -0.36005025  -0.35929071   0.43290628 0.0050141023 -0.015205415 -0.028224345  -0.25282567  -0.23805253   0.71962024        0.075    1.4242398        1e-10 1.5991561e-11    6.2532983    2.4531332    31.520363 -0.017182341  -0.21798946 0.0011813891   0.19479856 -0.085463334  -0.61759862 
 1533000     4.037309    1.2763597    2.7609493  -0.23030079   0.85095482     1.002924   0.74587212   -1.2298232            1  -0.19341928  -0.40928619  -0.44959113   0.27861947 -0.0090047912  0.001880387  0.070214106  -0.34727434  -0.33658169   0.71626369        0.075    1.4310032        1e-10 1.5916971e-11    6.2826024    2.4490688    31.520363 -0.0032425806   -0.2101789 -0.0013092484   0.18973624     1.894579   0.77028868 
 1534000    4.0103278    1.2693421    2.7409857  -0.23147095   0.84627611    1.0045419   0.73683563   -1.2298232            1  -0.13117173  -0.38688173  -0.39903705   0.39240358 -0.009735864  0.029301569  0.020883396  -0.28316279   -0.2745651   0.71124335        0.075    1.4319319        1e-10 1.5805408e-11    6.3269484    2.4569953    31.520363 -0.0040410635  -0.18904379 0.0035440116   0.21879455  0.081880838   -1.1173641 
 1535000     4.021187    1.2814891    2.7396978  -0.23344085   0.85437463    1.0070439   0.74880783   -1.2298232            1  -0.18231015  -0.43948233  -0.44195748   0.33450935 -0.0038680772  0.035775044 -0.026720501  -0.33677078  -0.32606066   0.70924633        0.075    1.4349059        1e-10 1.576103e-11    6.3447632     2.440573    31.520363 -0.011725487  -0.21429291 0.0014243517   0.18789487   0.17323143   -1.9497682 
 1536000    4.0193186    1.2690736    2.7502449  -0.23261891   0.84609715   0.99986668   0.73976813   -1.2298232            1  -0.13763942  -0.39222996  -0.38742616   0.36673787 0.0077064364  0.018430093  0.048795607  -0.29023537  -0.28036541   0.71422513        0.075    1.4405175        1e-10 1.587167e-11    6.3005344    2.4399844    31.520363 -0.0039451694  -0.17966275 -0.00064893493   0.18379462   0.57208157     1.469287 
 1537000    4.0220285    1.2836868    2.7383417  -0.22813258   0.85583982    1.0029056   0.75415082   -1.2298232            1  -0.11965264  -0.38904243  -0.34689379   0.37697829  0.023711321  -0.11300208  0.017077788  -0.27521539  -0.26281243   0.72037275        0.075    1.4388934        1e-10 1.6008283e-11     6.246766    2.4578132    31.520363 -0.0010215274  -0.19317436 -0.0023416066   0.16186675   0.65603464   0.86275929 
 1538000    4.0345679    1.2758818    2.7586861  -0.22953137   0.85063618   0.99216784   0.75277635   -1.2298232            1 -0.098819575  -0.37234526   -0.3694704   0.44535694 -0.014734066 -0.055643158 -0.025242076  -0.25409881   -0.2404466   0.71541467        0.075    1.4320406        1e-10 1.5898104e-11    6.2900583    2.4486057    31.520363 0.0031004514  -0.22275203 -0.012162007   0.21242302   0.99174978    1.1090329 
 1539000    4.0327841    1.2857154    2.7470688  -0.23384039   0.85719227    1.0025148   0.75670974   -1.2298232            1  -0.13448289  -0.39035155  -0.42480598   0.41170887 -0.0035508562 -0.088007572 -0.037840877  -0.29057348  -0.27758689   0.71498943        0.075    1.4405138        1e-10 1.5888654e-11    6.2937993    2.4517128    31.520363 -0.0059194511  -0.20953677 -0.0042059698   0.21046118    1.7385298    2.5159378 
 1540000    4.0366926    1.2941464    2.7425462  -0.22993387   0.86281327    1.0086318   0.76198805   -1.2298232            1  -0.15948429  -0.38482013  -0.41104859   0.31741586 0.00026075785 -0.0014874473 0.0018206251  -0.31666367  -0.30346146   0.71655016        0.075    1.4527727        1e-10 1.5923337e-11    6.2800907    2.4406177    31.520363 -0.012907148  -0.22048212 0.0067402593   0.21827365  -0.38341376    0.2096578 
 1541000     4.005495    1.2703994    2.7350956  -0.23328717   0.84698108    1.0031872   0.73896596   -1.2298232            1  -0.18952042  -0.44169659  -0.42723736   0.30037269 0.0045705373 -0.081276732 -0.0040939279  -0.34195091  -0.33272041   0.71985977        0.075    1.4600069        1e-10 1.5996884e-11    6.2512175    2.4408507    31.520363 0.0058216129   -0.2163745 -0.0041239325   0.20596832   0.17491096   0.97629548 
 1542000    4.0282184    1.2849853    2.7432331  -0.23231849   0.85670553    1.0039781   0.75487348   -1.2298232            1  -0.10807166  -0.37381328  -0.36795438   0.41755267 -0.016792727 -0.018511752 -0.024046895  -0.26378348  -0.25138455   0.71937602        0.075     1.459124        1e-10 1.5986134e-11    6.2554212     2.456259    31.520363 -0.017013149  -0.21353808 0.0090226131   0.18512114   0.94510738   0.64795439 
 1543000     4.035778    1.2852031    2.7505749  -0.22978141   0.85685077    1.0122793   0.74937473   -1.2298232            1  -0.05523097  -0.30987433  -0.33351012   0.47769154 0.0039835781  -0.02809672   0.02996828  -0.20980853  -0.19972881   0.71915688        0.075    1.4568343        1e-10 1.5981264e-11    6.2573274    2.4444426    31.520363 0.00048433215  -0.20828385 0.00072422184    0.1906586     1.486523    1.8686695 
 1544000    4.0444768    1.2928935    2.7515833  -0.23084206   0.86197793    1.0051966   0.76295174   -1.2298232            1  -0.20648665  -0.47769627  -0.46729895   0.32553527 -0.0068120219  0.012924846 0.0038768643  -0.36386481  -0.34997347   0.71713955        0.075    1.4781591        1e-10 1.5936434e-11    6.2749294    2.4733406    31.520363 -0.0011583629  -0.21605994 -0.0015560937    0.2028888  -0.88288979  -0.10239254 
 1545000    4.0463728    1.2838051    2.7625677  -0.22162187   0.85591866    1.0053587   0.75258666   -1.2298232            1  -0.17838828  -0.40656266  -0.43034385   0.30174168 0.0056390715   0.07103696  0.019863065  -0.33362838  -0.32189823   0.71007718        0.075    1.4511092        1e-10 1.5779493e-11    6.3373393    2.4421662    31.520363 0.0026136814  -0.18810717 -0.0049026501   0.19340936  -0.81859194   0.87270935 
 1546000    4.0420412    1.2921854    2.7498558  -0.22872941   0.86150588    1.0037141   0.76317892   -1.2298232            1  -0.11173084  -0.39763772  -0.36178545   0.42423063 0.00020804329   0.17952413 -0.014205739  -0.26915587  -0.25500604   0.71684802        0.075    1.4450507        1e-10 1.5929956e-11    6.2774812    2.4456602    31.520363 0.0047026766  -0.21504757 0.0067444164     0.179195   -2.0185209    2.2937331 
 1547000    4.0163968    1.2836132    2.7327836  -0.23402946   0.85579074    1.0102403   0.74899208   -1.2298232            1  -0.15376655  -0.37087994  -0.43193842    0.3415187 -0.015337357   0.04531832  0.037242511  -0.30826518  -0.29797332   0.71556058        0.075    1.4542816        1e-10 1.5901346e-11    6.2887757    2.4466482    31.520363 -0.0064559992    -0.192986 0.0042488866   0.18550682  -0.80598507   0.79325437 
 1548000    4.0210392    1.2787422     2.742297  -0.22998141   0.85254321   0.99766446   0.75219952   -1.2298232            1 -0.079096345  -0.38161128  -0.34345504   0.48777729 0.0038954363  0.045859413  -0.01014477  -0.23425659  -0.22150798   0.71638332        0.075    1.4594486        1e-10 1.5919629e-11    6.2815533    2.4326806    31.520363  0.004707271  -0.19987937 -0.0061568409   0.20831979  -0.33048508    2.4626585 
 1549000    4.0179258    1.2715992    2.7463266  -0.23018745   0.84778097    0.9946803   0.74620639   -1.2298232            1  -0.12659473  -0.38141562  -0.37979471   0.38142615 -0.019199662  0.014762514  0.028875536  -0.28051874  -0.26858039   0.71949571        0.075    1.4579373        1e-10 1.5988794e-11    6.2543806    2.4543001    31.520363  0.002999822  -0.20466539    0.0103894   0.19525238  -0.69004718    2.7467766 
 1550000    4.0223834     1.270704    2.7516795  -0.22623629   0.84718409    1.0011581   0.74071369   -1.2298232            1  -0.10010733  -0.38921591   -0.3308731   0.41976702 -0.021834311 -0.058163096 -0.028515695  -0.25289833  -0.24301766   0.71603523        0.075    1.4628785        1e-10 1.5911894e-11     6.284607    2.4417883    31.520363 -0.0055397109  -0.20701132 -0.020149242   0.20914982  0.035153045    2.4107608 
 1551000     4.022789     1.277845     2.744944  -0.22670781   0.85194506    1.0114691    0.7416344   -1.2298232            1  -0.19493861   -0.4147085  -0.45654387   0.28643652  0.011986192 -0.012570932 -0.0076961056  -0.34791953   -0.3393208   0.71388257        0.075    1.4759865        1e-10 1.5864057e-11    6.3035578    2.4474877    31.520363 0.0064182722  -0.19523958 -0.00026130473   0.20773627    1.0941723   -1.0844595 
 1552000    4.0242642    1.2835923    2.7406719  -0.23199978   0.85577681   0.99965916   0.75629077   -1.2298232            1 0.0092670185   -0.2818301  -0.26646527   0.57609643 -0.0017386932 -0.015351584 -0.023300528  -0.14673715  -0.13342935   0.70975009        0.075    1.4682279        1e-10 1.5772224e-11    6.3402599    2.4404331    31.520363 0.0085370865  -0.20899318 -0.0053584989   0.20217966   0.60437151    2.0574459 
 1553000    4.0397144    1.2867571    2.7529573  -0.23956909   0.85788677    1.0016178   0.75850561   -1.2298232            1  -0.14287627  -0.39553558  -0.42720981   0.39411657 0.0096611775 -0.044467878 -0.025400611  -0.29933731  -0.28585224   0.71474411        0.075    1.4614906        1e-10 1.5883202e-11    6.2959595    2.4535676    31.520363 0.0095676948  -0.18407446 -0.0011791225   0.18558194  -0.76063762    3.0106784 
 1554000    4.0212187    1.2796645    2.7415542  -0.22899203   0.85315816    1.0091008   0.74532601   -1.2298232            1  -0.15874188  -0.41009944  -0.39026391    0.3241377 0.0014553161  0.062670795  0.008690227  -0.31248429    -0.302786   0.71937443        0.075    1.4685504        1e-10 1.5986098e-11     6.255435    2.4458909    31.520363 -0.00056748122  -0.20961518 -0.0023575776   0.19369779   -1.0635374   0.85961035 
 1555000     4.025452    1.2760864    2.7493656  -0.22151647   0.85077261   0.99662936   0.74991978   -1.2298232            1  -0.15641038  -0.37969449  -0.43094292   0.34140625 0.00036682022 -0.052018688  0.016536449  -0.31110037  -0.29867427   0.71798975        0.075    1.4515608        1e-10 1.5955328e-11    6.2674989    2.4417906    31.520363 0.0044096901  -0.19580349 -0.011815401   0.20329046 -0.042751623    0.1738687 
 1556000    3.9983405    1.2649838    2.7333567  -0.23220174   0.84337044   0.99494121   0.73856272   -1.2298232            1  -0.17419269  -0.41046851  -0.45229093   0.34018138 0.00014280595   0.07064966  0.012173794     -0.32654  -0.31621559   0.71344143        0.075     1.480174        1e-10 1.5854254e-11    6.3074554    2.4409284    31.520363 -0.0042490912  -0.18556404 0.0022673572   0.21483652  -0.26888897    2.1341635 
 1557000     4.003966    1.2582992    2.7456668  -0.22830395   0.83891376   0.99038272   0.73417607   -1.2298232            1  -0.13533514  -0.40616432   -0.3705772    0.3707361  0.011671805   0.02977109 -0.00087384508  -0.28677759  -0.27670735   0.71892535        0.075    1.4644632        1e-10 1.5976119e-11    6.2593425    2.4390871    31.520363 0.0028485575  -0.18976546 -0.0069609446   0.20680461  -0.92277911    3.1562775 
 1558000    4.0057734    1.2682141    2.7375593   -0.2345561    0.8455241   0.99116013   0.74482351   -1.2298232            1  -0.12752643  -0.37478939  -0.40042239   0.39263249 -0.0080799906 0.0050465798 -0.014816026  -0.28116518  -0.26900961   0.72423477        0.075    1.4524434        1e-10 1.6094106e-11    6.2134548    2.4462359    31.520363 -0.013175393  -0.21365704 0.0084469014   0.18658362   -1.3257719     -1.23532 
 1559000    4.0266293    1.2796539    2.7469754  -0.23231794   0.85315103   0.99397559   0.75578077   -1.2298232            1  -0.10143427   -0.3944293  -0.35733971   0.44746621 -0.0031770499  0.024341236   0.02207432  -0.25733324  -0.24331934   0.71953696        0.075    1.4448053        1e-10 1.598971e-11    6.2540221    2.4414768    31.520363 0.0010309554  -0.20764418 -0.0085648616   0.19908606   0.86310899   0.30839105 
 1560000    4.0048602    1.2618305    2.7430297  -0.22584357   0.84126814   0.98652311   0.74083085   -1.2298232            1    -0.176082  -0.44878723  -0.40431095   0.32485217 0.00081619094 -0.060804686 -0.0036606772  -0.32889717  -0.31690327   0.70786025        0.075     1.447119        1e-10 1.5730228e-11     6.357187     2.442751    31.520363 -0.0029613138  -0.18008376 -0.0034993066   0.20182903    1.1927878    2.2180292 
 1561000    4.0289198    1.2756105    2.7533093  -0.23218259   0.85045529   0.99884045   0.74785274   -1.2298232            1  -0.15545937  -0.41142828  -0.40844727   0.35349745  -0.01029999 -0.080535476  0.013714004  -0.30972298  -0.29803887   0.71864338        0.075    1.4404517        1e-10 1.5969853e-11    6.2617984    2.4398798    31.520363 -0.0059120229  -0.17106649 0.0058660746    0.2127939 -0.035040583    2.1803677 
 1562000    4.0039077    1.2805033    2.7234044  -0.23402106   0.85371739    1.0191866   0.73929278   -1.2298232            1  -0.14005389  -0.38164115  -0.39805337   0.35953286 0.0015546805 -0.0018238677 0.0059381649  -0.29255179  -0.28553771   0.73012007        0.075     1.433187        1e-10 1.622489e-11    6.1633698    2.4541074    31.520363 -0.00024440318  -0.19509874 -0.012163659   0.20920789 -0.046706817    0.5359575 
 1563000    4.0235465     1.276375    2.7471714  -0.22436163   0.85096503   0.99946662   0.74828196   -1.2298232            1   -0.1075195  -0.35220966  -0.37900703   0.40865818 -0.014436385   0.04008219 -0.030827051  -0.26187165  -0.25018839    0.7194075        0.075    1.4211925        1e-10 1.5986833e-11    6.2551474    2.4447367    31.520363 -0.012642216  -0.19864041 -0.0082118685   0.18282163   -1.3207691    2.6547434 
 1564000    4.0183441    1.2741503    2.7441939  -0.22996208   0.84948178   0.99779171    0.7469312   -1.2298232            1  -0.24788911  -0.46812599  -0.47657116   0.20102982 -0.0026200729 -0.096782921  0.021383568  -0.40196263  -0.39031891   0.70713716        0.075    1.4328373        1e-10 1.5714159e-11    6.3636877    2.4471263    31.520363 0.0019890116  -0.19219818 -0.010290453   0.19535827   0.43384726    2.2765312 
 1565000    4.0371432    1.2699515    2.7671917  -0.22435591   0.84668246   0.98723031   0.74950306   -1.2298232            1  -0.11864751  -0.34515928  -0.38007592   0.36929266 -0.0082542725   -0.0590363 -0.035711353  -0.27325154  -0.25956973   0.70899088        0.075    1.4546862        1e-10 1.5755353e-11    6.3470492    2.4491797    31.520363 -0.0063712684  -0.18513867 0.0082410084   0.18220459    1.3092036    2.0055652 
 1566000    4.0321757    1.2735551    2.7586206  -0.23594255   0.84908496   0.99513613   0.74809743   -1.2298232            1  -0.11409407  -0.40156847   -0.3879233   0.44720958  0.017561982 -0.099529691 -0.0097922341  -0.26840815   -0.2561448   0.72558986        0.075    1.4396324        1e-10 1.6124219e-11    6.2018507    2.4459894    31.520363 -0.002406141  -0.19888386 -0.0089966733    0.2205329   -2.1156475    1.7697735 
 1567000    4.0326799     1.288979    2.7437008  -0.22746966   0.85936817    1.0037132   0.75956229   -1.2298232            1  -0.14046221  -0.39758885  -0.39780135   0.37400357  0.012366062 -0.0066354345  0.025588941  -0.29714121  -0.28373728   0.71916418        0.075    1.4165863        1e-10 1.5981426e-11    6.2572638    2.4365712    31.520363 -0.00061342755  -0.21260107 -0.0068973969   0.22108572   0.23093223   0.26714583 
 1568000    4.0185309    1.2771834    2.7413475  -0.22646971     0.851504   0.99244921   0.75405008   -1.2298232            1  -0.19902079  -0.46418858  -0.40995963   0.27708584 0.0060611545  0.071265698  0.015354759  -0.35456276  -0.34068798   0.70998626        0.075    1.4263372        1e-10 1.5777472e-11    6.3381508    2.4476908    31.520363  0.001135225  -0.20413102 -0.0015655555   0.18486857   -0.4828503  0.088324996 
 1569000    3.9962311    1.2601605    2.7360706   -0.2430075   0.84015473   0.99775022   0.73117753   -1.2298232            1  -0.19911548  -0.44220954  -0.42952836   0.27439145 0.0007432195 -0.0065042349 -0.019174757  -0.34993941  -0.34153936   0.71364791        0.075    1.4316247        1e-10 1.5858842e-11    6.3056305    2.4483874    31.520363 0.0029712005  -0.20287885 -0.0045252119   0.20016721    0.7039424     1.340214 
 1570000    4.0285289    1.2777645    2.7507644  -0.23896011   0.85189141    1.0010049   0.74878499   -1.2298232            1  -0.13543471  -0.40665724  -0.37446289   0.37481599 0.0012531678  0.050738571 -0.015933535  -0.28989062  -0.27832318   0.72678399        0.075    1.4353063        1e-10 1.6150755e-11    6.1916609    2.4526519    31.520363 -0.002718173  -0.23370957 0.0013750224   0.18269148   0.59026403  -0.92714655 
 1571000     4.017979    1.2692198    2.7487592  -0.23145696    0.8461946   0.98816971   0.74802747   -1.2298232            1  -0.22590098  -0.46388951  -0.50711561   0.29330217 -0.0025899611 -0.066995404 -0.016726817  -0.38020064  -0.36695729   0.72062568        0.075    1.4247997        1e-10 1.6013904e-11    6.2445734    2.4414727    31.520363 0.0041762777  -0.22017572 -0.0061216384    0.1944497  0.066631848  -0.64368284 
 1572000    4.0187891    1.2720676    2.7467214  -0.23433787   0.84809327    1.0009816   0.74237422   -1.2298232            1  -0.19662062  -0.43783268  -0.44463027   0.29260107  0.010747709 -0.019894508 -0.035017735  -0.34975415  -0.33950577   0.71049786        0.075    1.4209651        1e-10 1.5788841e-11     6.333587    2.4456645    31.520363 0.0011325484  -0.17818151 0.00084376233   0.19094709    1.0414719   0.43220437 
 1573000    4.0240018    1.2699093    2.7540926  -0.22602323   0.84665426   0.98956057   0.74784278   -1.2298232            1  -0.09719412  -0.40085931  -0.33278612   0.44206308 -0.007394196 -0.0036163509 -0.024140769  -0.25145568  -0.23844897   0.70893955        0.075    1.4071754        1e-10 1.5754212e-11    6.3475087    2.4413183    31.520363 -0.0014516963  -0.19705416 0.0017468867   0.19814179   0.19195093   0.46826791 
 1574000    4.0092446    1.2722172    2.7370275    -0.238984   0.84819295    1.0063278   0.73884329   -1.2298232            1  -0.12847582  -0.37617417  -0.39588642   0.38663313  0.015050452   0.04298256 0.0077257075  -0.28088101  -0.27212411   0.72218793        0.075    1.4069631        1e-10 1.6048621e-11    6.2310651     2.467078    31.520363 -0.0029756012  -0.21636913 0.0089207067   0.19936312  -0.71519778  -0.55327335 
 1575000    4.0141604    1.2849044     2.729256  -0.23074589    0.8566516    1.0079799   0.75201299   -1.2298232            1  -0.14740044  -0.34856631  -0.43271734   0.33908232  0.022503684 -0.063017205 -0.016828948  -0.30252221  -0.29128455   0.72402492        0.075    1.4157068        1e-10 1.6089443e-11    6.2152557    2.4462917    31.520363 -0.0021693309  -0.19602172 -0.0069540562   0.19494909  -0.91271911   0.66487461 
 1576000    4.0243154    1.2734635    2.7508519  -0.22414078   0.84902387    1.0051356   0.74107431   -1.2298232            1  -0.16199442  -0.39317302  -0.43817409   0.34536384 0.0066430323  0.031242533 -0.022399519  -0.31485981  -0.30547253   0.71418869        0.075    1.4096752        1e-10 1.587086e-11    6.3008559    2.4499364    31.520363 0.0019265685  -0.18843584 -0.003014467    0.2060849  -0.64118803   0.60348699 
 1577000    4.0259027    1.2846654    2.7412374  -0.22407688   0.85649224    1.0080092   0.75172301   -1.2298232            1 -0.092713733  -0.32060454  -0.36728093   0.40974427 0.0023546507 -0.0048317419 -0.032780263  -0.24777569  -0.23660204   0.70793493        0.075     1.426002        1e-10 1.5731887e-11    6.3565164    2.4417667    31.520363 -0.0048793008  -0.21827163 -0.010940805   0.20962447   0.84062901    1.3388502 
 1578000    4.0095986    1.2667328    2.7428659  -0.23594413   0.84453648   0.99351391   0.74152351   -1.2298232            1  -0.20410128  -0.43828154  -0.45212314   0.27810084 -0.0096451748  0.012288204  0.021386672  -0.35705933  -0.34592045   0.72284607        0.075    1.4177142        1e-10 1.6063246e-11    6.2253918    2.4438009    31.520363 0.0049728196  -0.19180988 0.0065788622   0.22925349    1.1984212   -1.2201628 
 1579000    4.0196646    1.2805167    2.7391479  -0.23150436   0.85372627   0.99626164   0.75517217   -1.2298232            1 -0.069555376  -0.36519664  -0.30232214   0.45885265  0.016621931  0.082496067  0.020485534  -0.22532881  -0.21176677   0.72726876        0.075    1.4121235        1e-10 1.6161528e-11    6.1875338    2.4496559    31.520363 -0.0066853835  -0.21208601 -0.0023794858   0.20523281  -0.44853058    1.6532368 
 1580000    4.0012275    1.2671716    2.7340559  -0.22963433   0.84482903    0.9917963   0.74320713   -1.2298232            1  -0.20288761  -0.45372581  -0.45950721   0.30457018 -0.0070090438  0.030570988  0.030754963  -0.35619295   -0.3444616   0.72036581        0.075    1.3884037        1e-10 1.6008129e-11    6.2468262    2.4503812    31.520363 -0.0038793149  -0.19698606 0.0061947073   0.21108917  -0.10353021   0.30631575 
 1581000    4.0099485    1.2573565    2.7525919   -0.2253957   0.83828532   0.97342081   0.74485053   -1.2298232            1  -0.19114222  -0.46734062    -0.433265   0.32717896 0.00060572369   0.10693042  0.042205696  -0.34478655   -0.3300932   0.71264858        0.075    1.3998356        1e-10 1.5836635e-11    6.3144727    2.4386242    31.520363 -0.0068395796  -0.20964382 -0.0050808488   0.22294199  -0.35783659    1.1817345 
 1582000    3.9970945    1.2605339    2.7365606  -0.23065951   0.84040369   0.98566182   0.73996412   -1.2298232            1  -0.23002566  -0.46453029  -0.46513364   0.23958695 -0.021001901  0.061965322 -0.038522193  -0.38266204  -0.37072398   0.71629697        0.075    1.4005512        1e-10 1.591771e-11    6.2823105    2.4381561    31.520363 0.0029558255  -0.19050003 0.0073864055   0.20246719  -0.12757051  0.014702261 
 1583000    3.9898651    1.2702358    2.7196293  -0.23958674   0.84687198    0.9976614    0.7426053   -1.2298232            1 -0.0013863243  -0.30055605  -0.28169133    0.5780884 0.0097100723 -0.030907048  0.015115588  -0.15456752  -0.14379753   0.72589711        0.075    1.4221033        1e-10 1.6131047e-11    6.1992257     2.439023    31.520363 0.0096513303  -0.21774993 -0.0049675468   0.21084767  -0.53455109    4.0004064 
 1584000     4.012366    1.2717948    2.7405713  -0.23197888   0.84791134   0.99000219   0.74966429   -1.2298232            1  -0.17701678  -0.39464574  -0.45196392   0.31555931 0.0022154118  0.017138052  0.017643084  -0.33165407  -0.31833467   0.71743011        0.075    1.4331312        1e-10 1.5942891e-11     6.272388     2.437586    31.520363 -0.00035943009  -0.20764764 0.0025269591   0.20596467  -0.22862307   0.51225326 
 1585000    3.9909927     1.257175    2.7338177  -0.22774617   0.83816426   0.98761439   0.73482357   -1.2298232            1  -0.22032124  -0.44512194  -0.48462038    0.2687786  0.010374416 0.0082070603 -0.017379788  -0.37189725  -0.36129828   0.71296782        0.075    1.4199061        1e-10 1.5843729e-11    6.3116453    2.4443006    31.520363 0.00058241008  -0.19457055 -0.00021362851   0.20512004 -0.010279186   0.54290745 
 1586000     4.008455    1.2716784    2.7367766  -0.23165222   0.84783376   0.99155939   0.74845542   -1.2298232            1 -0.079836016   -0.3665028  -0.35874987   0.48574462 0.0075271407  -0.03663681 0.0025431789  -0.23422395  -0.22137619    0.7183048        0.075    1.4296931        1e-10 1.5962329e-11      6.26475    2.4457344    31.520363 0.0038511456  -0.20399198 -0.0041970573   0.20060867  -0.39213797    1.9250626 
 1587000    4.0009527    1.2599273    2.7410254  -0.23298805   0.83999926   0.99230127   0.73468519   -1.2298232            1  -0.16599555  -0.41872795  -0.41327212   0.33401341 0.0085959743 -0.013013676 0.0096321885  -0.31754302  -0.30764162   0.72111495        0.075      1.41363        1e-10 1.6024777e-11    6.2403366    2.4502267    31.520363 -0.00054633661  -0.20480484 0.0012267042   0.19525498   -1.5218443    3.9472212 
 1588000    3.9990052    1.2743064    2.7246988  -0.23164492   0.84958586   0.99551649    0.7486818   -1.2298232            1  -0.20401313  -0.42701608  -0.47667816   0.29165486  -0.00582228  -0.10115353 -0.034423981  -0.35844775  -0.34611815   0.71430792        0.075     1.414804        1e-10 1.5873509e-11    6.2998042    2.4369883    31.520363 -0.0032970755  -0.21682502 0.0011011335   0.21449277    1.2281563    0.1893269 
 1589000    4.0282842    1.2852255    2.7430587  -0.22846747   0.85686568   0.99817712   0.75915885   -1.2298232            1  -0.22211437  -0.47068774  -0.47443434   0.27877897 0.0058846147  0.013591608 -0.058575878  -0.37871015  -0.36459919   0.71473153        0.075    1.4270989        1e-10 1.5882923e-11    6.2960704    2.4561883    31.520363 -0.006552612  -0.19321016 0.0010931566   0.20390041   0.20131357   -1.1113997 
 1590000    4.0123516     1.268927    2.7434247  -0.22678319   0.84599937   0.99534085   0.74273461   -1.2298232            1 -0.072264548  -0.33034819   -0.3260027   0.43955725 -0.024375324 -0.069413374  0.023562994  -0.22547241   -0.2143445   0.71908746        0.075    1.4316394        1e-10 1.5979721e-11    6.2579314    2.4395857    31.520363 0.0028313925  -0.19869849 0.0006689657   0.19713473   0.11923106    1.8748546 
 1591000     4.025511    1.2948901    2.7306209  -0.23328936   0.86330913    1.0093143   0.76235478   -1.2298232            1  -0.11717254  -0.37062433  -0.37477972   0.39388643 -0.0050961137 -0.072091496 -0.0020451269  -0.27442757  -0.26124714   0.71957656        0.075    1.4239746        1e-10 1.599059e-11    6.2536779    2.4545259    31.520363 -0.010012634  -0.20153028 -0.0061998918   0.18849318    1.9720521    0.8284015 
 1592000    4.0206454    1.2710856    2.7495598  -0.23009217   0.84743853   0.99745776   0.74370489   -1.2298232            1  -0.13602155  -0.40719553  -0.39483738   0.39396825 -0.023470934 0.0020287766  0.047623609  -0.28942956  -0.27840368   0.71406274        0.075    1.4387789        1e-10 1.5868061e-11    6.3019672    2.4456646    31.520363  0.001811047   -0.1884029 -0.0066907538   0.19055373  -0.91097921    1.4353042 
 1593000    4.0293477    1.2911593    2.7381885  -0.23569418   0.86082174   0.99411477   0.76866413   -1.2298232            1  -0.19068436  -0.46054383  -0.41562233   0.30411308  0.017054451  0.017393011 -0.0054784881  -0.34924085   -0.3325893   0.71678941        0.075    1.4408095        1e-10 1.5928654e-11    6.2779945    2.4442034    31.520363 -0.0025145049   -0.1920034 -0.0018965159   0.20469717    1.0230035   0.14086815 
 1594000    4.0318689    1.2693679     2.762501  -0.22195316   0.84629334   0.99503702   0.74344229   -1.2298232            1  -0.15252107  -0.38021367  -0.42310939   0.34575985 -0.012055521  0.025344683 -0.025542323  -0.30587492  -0.29455766   0.71752603        0.075    1.4474036        1e-10 1.5945023e-11    6.2715495    2.4497706    31.520363 -0.0028685569  -0.20171917  0.004175037   0.20619797 0.0019136211   0.63065896 
 1595000    4.0079213    1.2764084    2.7315129    -0.220411   0.85098729     1.000121   0.74786679   -1.2298232            1  -0.10616475   -0.3766964  -0.37242541   0.43062756 0.0054470461  -0.00072475  0.074561939  -0.26043126  -0.24892704   0.71533176        0.075    1.4479526        1e-10 1.5896261e-11    6.2907874    2.4483676    31.520363 -0.00016055672  -0.19072226   0.02077575    0.2128541    0.6276153  0.099824502 
 1596000    4.0105834    1.2780049    2.7325786  -0.22776248   0.85205166    1.0056704   0.74582756   -1.2298232            1  -0.13197366  -0.36303155  -0.38868119   0.35579175 -0.0093451477  0.048246915 0.0080294704  -0.28581953  -0.27552811   0.71754446        0.075    1.4323117        1e-10 1.5945432e-11    6.2713884    2.4605299    31.520363 0.0031060064    -0.195643 0.0064346594   0.19109305  -0.23414971    0.8046538 
 1597000    4.0237273     1.280486    2.7432413  -0.23376792   0.85370582    1.0036802    0.7500038   -1.2298232            1  -0.22847346  -0.46601153  -0.45490237   0.23549353 -0.0036753345   0.03478952 0.0032084654  -0.38318078  -0.37174382    0.7182652        0.075    1.4307632        1e-10 1.5961449e-11    6.2650954    2.4437062    31.520363 0.0014519619  -0.20631903 -0.0057643844   0.19429705  -0.70517725    0.5752864 
 1598000    4.0089747     1.265802    2.7431727  -0.22382785   0.84391593    0.9849399   0.74640678   -1.2298232            1  -0.10353188  -0.37097697  -0.37694899   0.43733033 0.0082702814  0.043403689  0.034400854  -0.25749722  -0.24412715   0.71869591        0.075    1.4266912        1e-10 1.597102e-11    6.2613408    2.4448891    31.520363 0.0037562261  -0.21301987 0.0026111587   0.20829145  -0.35544232    1.2480007 
 1599000    4.0056481    1.2742827    2.7313653   -0.2306042   0.84957008   0.99372773   0.74989293   -1.2298232            1 -0.092151439  -0.36253437  -0.34355401   0.42963406 -0.0010503859   0.10316104 -0.021845116  -0.24683589  -0.23400113   0.71929901        0.075     1.418993        1e-10 1.5984423e-11    6.2560909    2.4534388    31.520363 0.0015336812  -0.20474281 -0.0045577362   0.21286768   -1.7757862    1.1137422 
 1600000    4.0124284    1.2765947    2.7358337  -0.23344173   0.85111146   0.99855998   0.74915714   -1.2298232            1  -0.15527799  -0.38258549  -0.38481937   0.30157088 -0.0074387304  0.081350847 -0.013555611  -0.30981067  -0.29781746   0.71572861        0.075    1.4068128        1e-10 1.590508e-11    6.2872993    2.4387148    31.520363 -0.0053823484  -0.19328846 -0.0039263004   0.19303163  -0.36539885  -0.10990857 
 1601000    3.9979638    1.2640281    2.7339357  -0.23408881   0.84273325    1.0000309   0.73396243   -1.2298232            1  -0.12056326  -0.36763339  -0.38199666   0.38794027  0.011380107  0.003032507  0.024616137  -0.27196164  -0.26331269    0.7170022        0.075    1.4155017        1e-10 1.5933382e-11    6.2761313     2.449216    31.520363 0.0014139039  -0.17888603 0.0041623785   0.22027614   0.61612666  -0.44693937 
 1602000     3.998592    1.2661443    2.7324477   -0.2351296   0.84414416   0.98362859   0.74770042   -1.2298232            1  -0.16781834  -0.42637842  -0.42864596   0.35156937 0.0067988917   0.11825738  -0.01367936  -0.32205053  -0.30822642   0.71660248        0.075    1.4056278        1e-10  1.59245e-11    6.2796322    2.4385397    31.520363 -0.0021735622  -0.19425852 -0.0010518991   0.21079269  -0.84057405   -1.3158282 
 1603000    3.9945916    1.2640724    2.7305191  -0.23313691   0.84276282   0.98272492   0.74598839   -1.2298232            1  -0.18148771  -0.43152219  -0.40519414    0.2922532  0.005785742  0.031936724  0.013886595  -0.33536675   -0.3217668    0.7195002        0.075    1.4121137        1e-10 1.5988893e-11    6.2543416    2.4427753    31.520363 0.0014369758  -0.19479776 0.0025069488   0.18482594   0.96659947  -0.81373348 
 1604000    4.0225954    1.2665666    2.7560287  -0.22495205   0.84442571   0.98447979   0.74758779   -1.2298232            1  -0.15359094  -0.40510891  -0.41802945   0.36236552 -0.009204215 -0.025387208  0.017423401   -0.3077999  -0.29412054   0.71917191        0.075    1.3934625        1e-10 1.5981598e-11    6.2571965    2.4537365    31.520363 0.0099211554  -0.21376209 0.0037774771   0.17691961   0.47001714    1.8227881 
 1605000     4.013544    1.2713603    2.7421837  -0.22564064   0.84762171   0.98599281   0.75194873   -1.2298232            1  -0.21357916  -0.44351269  -0.45200772   0.25478291 -0.011977713 -0.027263499 0.0013473527  -0.36868768  -0.35432473   0.70896195        0.075    1.4033238        1e-10 1.575471e-11    6.3473082    2.4394358    31.520363 0.0020785487  -0.22142657 0.0043784934   0.19875989  -0.46000772    1.3260129 
 1606000    3.9976503    1.2733579    2.7242924  -0.22923231   0.84895351   0.99663586   0.74683717   -1.2298232            1  -0.12748738  -0.41313442   -0.3499077   0.38057998 -0.0041310841  0.050885688 -0.013488367  -0.28154151  -0.26975219   0.71470798        0.075    1.4125875        1e-10  1.58824e-11    6.2962778    2.4547997    31.520363 0.0023115593  -0.18652147 0.0016750719   0.18970355   -2.3557461   0.17229061 
 1607000    4.0188278    1.2720396    2.7467883  -0.23433245   0.84807454    1.0032267   0.74078893   -1.2298232            1  -0.18654101  -0.41333103  -0.42956344   0.28327143 0.0033355316  0.011806307 0.0053060203  -0.33934753  -0.32974663   0.72424854        0.075    1.4092524        1e-10 1.6094412e-11    6.2133366    2.4517365    31.520363 0.00053654831  -0.19048533 -0.00071384815   0.20040372    -0.287311    1.5589848 
 1608000    4.0401197    1.2762164    2.7639033  -0.22758355   0.85085927   0.98779492   0.75617995   -1.2298232            1  -0.18246697  -0.45028561  -0.41384463   0.31672933 -0.0035776221  0.059931003 0.0098110954  -0.33844828  -0.32346978   0.71882259        0.075    1.3975717        1e-10 1.5973835e-11    6.2602373    2.4422119    31.520363 -0.0015110304  -0.20514813 0.0078108622   0.19447316    1.4837337 -0.026998426 
 1609000    4.0301296    1.2834031    2.7467265  -0.23829598   0.85565067    1.0056311   0.75194471   -1.2298232            1  -0.17559547  -0.46631946  -0.39075385   0.33028689  0.010009852  0.005678838 -0.026289804  -0.33070316   -0.3191443   0.71085987        0.075    1.4075405        1e-10 1.5796886e-11    6.3303616    2.4333154    31.520363 0.0016718207  -0.20308696  0.007438529   0.20058815   0.39019692   0.60512902 
 1610000    4.0104231    1.2632012    2.7472219  -0.23332381   0.84218197   0.98329751   0.74460929   -1.2298232            1  -0.26232123  -0.50252224  -0.50566741   0.22122597 8.0863527e-05   0.05592305  -0.05566042  -0.41591579  -0.40268205   0.71269018        0.075      1.40168        1e-10 1.5837559e-11    6.3141041    2.4403275    31.520363 -0.011070066  -0.17912333 -0.010343361    0.1924361  -0.78106049    1.9269106 
 1611000    4.0198832    1.2833885    2.7364946  -0.23503889   0.85564097    1.0000483   0.75579164   -1.2298232            1  -0.11696291  -0.38021727  -0.38985414   0.41918269 0.0021317806 -0.019087292 -0.054736821  -0.27286412  -0.25971482   0.72554591        0.075    1.4148094        1e-10 1.6123243e-11    6.2022264    2.4397794    31.520363 -0.0020930363  -0.20118106 -0.0019497827   0.17542987   0.33917048    1.0941359 
 1612000     3.998668    1.2695446    2.7291234  -0.23229479   0.84641116   0.99745715    0.7419669   -1.2298232            1  -0.16927565  -0.41036803  -0.43374003   0.33628112 -0.0096239855  0.035359948 -0.013235368  -0.32232516  -0.31165769   0.71831131        0.075    1.4051296        1e-10 1.5962474e-11    6.2646932    2.4383583    31.520363 0.0034785127  -0.19736708 -0.0096403369   0.20655411    1.2937096    1.7070805 
 1613000    4.0150785    1.2718534    2.7432252  -0.23372009   0.84795041   0.99657856   0.74517947   -1.2298232            1  -0.16999018  -0.42048798  -0.41152819   0.32204563 -0.0070476876  0.030694343   0.04139404  -0.32370236  -0.31224681   0.71535695        0.075    1.4160297        1e-10 1.5896821e-11    6.2905659    2.4666267    31.520363 -0.0040371666  -0.19650781 -0.0078939845   0.20352332  -0.28645679   0.93225433 
 1614000    4.0200591     1.267322    2.7527371  -0.23221557    0.8449293   0.98343434   0.74916339   -1.2298232            1  -0.22372488   -0.4492764  -0.46024403   0.23834578 -0.0062161085  0.059667487 -0.046503058  -0.37825885  -0.36410524   0.71151704        0.075    1.4322361        1e-10 1.581149e-11    6.3245147    2.4362349    31.520363 0.0023330246  -0.17554066 -0.011923508   0.17278403   -1.2996109   -1.2132563 
 1615000    4.0000563    1.2690705    2.7309858  -0.23097445   0.84609503    1.0010763   0.73892749   -1.2298232            1 -0.042989919  -0.29898666  -0.31736314   0.48738004  0.015872399 -0.057351294  0.081246811  -0.19541247  -0.18588858   0.72005392        0.075     1.423616        1e-10 1.6001198e-11     6.249532     2.447156    31.520363 -0.010241119   -0.2000026 -0.0078117388    0.2119037  -0.31189448    2.5733636 
 1616000    4.0111823    1.2743152    2.7368671  -0.22987411   0.84959173    1.0007396   0.74507729   -1.2298232            1  -0.19054523  -0.44325312  -0.42987578    0.3014932 -0.00033215273 0.0095490114  0.047321767  -0.34423634  -0.33339583   0.72298338        0.075    1.4264032        1e-10 1.6066297e-11    6.2242095    2.4460925    31.520363 -0.00040616607  -0.21585656 -0.0049881103   0.20554038 -0.056908315   -2.5499949 
 1617000    4.0258631    1.2791604    2.7467027  -0.22879675   0.85282203   0.99672687   0.75332014   -1.2298232            1  -0.15499302  -0.40572109  -0.38455434   0.32529636 0.0036336355  -0.08383398 -0.014060572  -0.31038442  -0.29727082   0.72085204        0.075    1.4311417        1e-10 1.6018934e-11    6.2426125    2.4450284    31.520363 0.0016507933  -0.18354904 -0.0019677947   0.18674692   0.19926128    -1.036659 
 1618000    4.0180304    1.2777503    2.7402801  -0.23025599   0.85188194    1.0018028    0.7482168   -1.2298232            1   -0.1116166  -0.35657577  -0.39237583    0.4141018 -0.0065518755 -0.0089235501  0.019702447  -0.26595531  -0.25461897   0.71962644        0.075    1.4366342        1e-10 1.5991699e-11    6.2532443    2.4457748    31.520363 0.0023989344  -0.21297736 0.0073552258   0.20081777   0.42780212    1.3819705 
 1619000    4.0018117    1.2642227     2.737589  -0.23525912   0.84286304   0.98931478   0.74159771   -1.2298232            1  -0.22157375  -0.47742945   -0.4719904   0.28469861 -0.011247497    0.1015298 -0.010966745   -0.3745471  -0.36279351   0.71824439        0.075    1.4439546        1e-10 1.5960986e-11    6.2652769    2.4392611    31.520363 -0.012767518  -0.19640639 0.0022558462    0.1731755   -2.2914006   0.58542484 
 1620000    4.0096493    1.2829567    2.7266926  -0.23720137   0.85535303   0.99767864   0.75694423   -1.2298232            1  -0.10147798  -0.40030525   -0.3387516    0.4346229 0.0014261058 -0.029886508 -0.0080286948  -0.25761694  -0.24389165   0.71891674        0.075    1.4226002        1e-10 1.5975927e-11    6.2594175    2.4396998    31.520363 -0.008738262  -0.19909785 -0.005521978   0.21360202   0.11851576   0.70185503 
 1621000     4.000055    1.2680994    2.7319556  -0.23155472   0.84544763   0.99550314    0.7416887   -1.2298232            1  -0.15492688  -0.41070636  -0.40332583   0.34925156 0.0061488649   0.12068363 -0.025544317    -0.307919     -0.29703   0.71591646        0.075    1.4340438        1e-10 1.5909255e-11    6.2856495    2.4493135    31.520363 0.0016556506  -0.21404002 -0.0093735589    0.2116508   -1.4772633   -1.5316308 
 1622000    4.0264038     1.265632    2.7607718   -0.2304145    0.8438026   0.98420133   0.74672612   -1.2298232            1  -0.21867313  -0.46750512   -0.4702162   0.28170194 -0.015449636  0.096967146 -0.0026217616  -0.37270434  -0.35916297   0.71097157        0.075    1.4292456        1e-10 1.5799368e-11     6.329367    2.4344221    31.520363 -0.0067174779  -0.16339966 -0.0011266019   0.19045283   0.34972497   0.10641416 
 1623000      4.03463    1.2740028    2.7606272  -0.22854519   0.84938344    0.9890357   0.75282406   -1.2298232            1  -0.14472027  -0.39870972  -0.38580021   0.35034912 0.0045608286  0.042118981 -0.014508592  -0.30000934   -0.2859002   0.71841883        0.075    1.4166491        1e-10 1.5964863e-11    6.2637557    2.4633648    31.520363 0.0085718805  -0.18880249 -0.0027286192   0.18816323  -0.30705164   0.73354374 
 1624000    4.0205453     1.289227    2.7313183  -0.23097376   0.85953351    1.0036478   0.75988736   -1.2298232            1  -0.10232308  -0.37636741  -0.36454131   0.43393948 -0.0017015323 -0.0076270831  0.026366314  -0.25906914   -0.2455888    0.7234789        0.075     1.433634        1e-10 1.6077309e-11    6.2199464     2.458615    31.520363 -0.0031558976  -0.19691918 0.0044641211   0.20884852 -0.048708839    2.8520995 
 1625000    4.0183639    1.2910452    2.7273187  -0.22801371   0.86074572    1.0011238   0.76368516   -1.2298232            1  -0.13550268  -0.37761925  -0.38308151   0.35419273 -0.0037899346  0.026045633 -0.014728484  -0.29303213  -0.27840812   0.71574448        0.075    1.4247984        1e-10 1.5905433e-11    6.2871599    2.4478925    31.520363 0.0075441893  -0.19560736 -0.0028243302   0.18801729    0.9254534    3.4174166 
 1626000    3.9922638    1.2567153    2.7355485  -0.22969044   0.83785778   0.98337386   0.73723945   -1.2298232            1  -0.16925153  -0.40204868  -0.43720192     0.331496 -0.0055095308 -0.098804388  0.012223023  -0.32132588  -0.30962326   0.70980777        0.075    1.4141641        1e-10 1.5773506e-11    6.3397447    2.4521458    31.520363 -0.0079007204  -0.20089382 -0.0028871013   0.18292918   0.97642116   0.33057311 
 1627000    4.0085352    1.2746723    2.7338629  -0.23033356   0.84982983    1.0002287    0.7458337   -1.2298232            1  -0.12909106   -0.4054919  -0.37553132   0.39375004  0.013284902  0.057045735  0.037522348   -0.2829382  -0.27186874   0.71467839        0.075    1.4230268        1e-10 1.5881742e-11    6.2965385    2.4556175    31.520363 -0.0090849353  -0.18959408 0.0082018711   0.20359726   0.44516627    3.6414709 
 1628000    4.0107335    1.2683868    2.7423467  -0.22801975   0.84563926   0.99156591   0.74473757   -1.2298232            1  -0.08799656  -0.34908516  -0.35387794   0.43897342 0.00070719382 -0.028084324  0.022846988  -0.24161759  -0.22953766   0.72101602        0.075      1.41744        1e-10 1.6022578e-11    6.2411928    2.4450977    31.520363 -0.0072277941  -0.20776146 -0.0025148258   0.20100862  -0.27465733    2.6399004 
 1629000    4.0380367    1.2970173    2.7410194  -0.23079908   0.86472734    1.0063357   0.76681578   -1.2298232            1  -0.19219301  -0.44698525  -0.44454389   0.31495011 0.0087955347  -0.03933719 -0.013770514  -0.35036823  -0.33584243   0.71960818        0.075    1.4010337        1e-10 1.5991293e-11    6.2534031    2.4410383    31.520363 -0.0023698033  -0.20507448 0.0037711702   0.18395628    0.8848976     3.117893 
 1630000    4.0135374     1.279179    2.7343584  -0.23069791   0.85283446   0.99076874   0.75746428   -1.2298232            1  -0.21704384  -0.43060324  -0.46855672   0.24802845  0.010802084 -0.034771533 -0.018529192  -0.37329007  -0.35847114   0.71743515        0.075    1.4083548        1e-10 1.5943003e-11    6.2723439    2.4479698    31.520363 0.00060098893  -0.19829956 -0.00058726118   0.20574954  -0.23239048  -0.87566265 
 1631000    4.0058008    1.2819995    2.7238013  -0.22993747   0.85471488    0.9962402   0.75685984   -1.2298232            1  -0.10810065  -0.37840858  -0.37741169   0.43151832 -0.0083361696   0.12280579  0.061135514  -0.26422221  -0.25030898    0.7103495        0.075    1.4232435        1e-10 1.5785545e-11    6.3349098    2.4481142    31.520363 -0.0035974084  -0.18579522 -0.0020355595   0.20633376  -0.48964594    3.6718806 
 1632000    4.0008612    1.2729182     2.727943   -0.2349785   0.84866037   0.98950277   0.75127733   -1.2298232            1  -0.14846236  -0.42408708  -0.41017783   0.38887782 -0.0027272491  -0.06921585  0.020185053  -0.30343238  -0.28970896   0.71228618        0.075    1.4048942        1e-10 1.5828582e-11    6.3176854    2.4448009    31.520363 -0.0039943217  -0.20404515 0.0050437755    0.2038989   0.13902127     1.993525 
 1633000    4.0156981    1.2762407    2.7394574  -0.23054177   0.85087547   0.99086172    0.7540851   -1.2298232            1 -0.093745177  -0.37296106  -0.32623639   0.41796192 -0.00034102257 -0.077133536 -0.020740704  -0.24929437  -0.23518576    0.7208688        0.075    1.4064602        1e-10 1.6019307e-11    6.2424674    2.4432311    31.520363 0.00071373191   -0.2284222 -0.0068718883   0.19820146   0.19832325   0.53122716 
 1634000    4.0356127    1.2845456     2.751067  -0.22890173    0.8564124   0.99711493   0.75912689   -1.2298232            1  -0.12451171  -0.38523198  -0.40869899   0.42039583 0.0031721744   -0.0751296 -0.002343921   -0.2811009  -0.26684491   0.72298711        0.075    1.4052085        1e-10 1.606638e-11    6.2241773     2.449282    31.520363 0.0099444761   -0.2233278 -0.0045112493   0.19368669    0.9653314     1.937505 
 1635000    4.0193961    1.2742048    2.7451913  -0.22945008   0.84951812     1.003676   0.74292068   -1.2298232            1  -0.10997727  -0.39381207   -0.3586835   0.42256377 0.0025736324 -0.087793147 -0.034707694  -0.26322352  -0.25324702   0.71678152        0.075     1.408352        1e-10 1.5928478e-11    6.2780636    2.4495919    31.520363 -0.011974112  -0.19270096 0.00055816972   0.16747287    1.2459764  -0.59395624 
 1636000    4.0440134    1.2866588    2.7573546  -0.22869026   0.85782129    1.0025311   0.75776285   -1.2298232            1  -0.11689231  -0.39120996  -0.39370023   0.43423326 -0.014541546 -0.012085116 0.0049004106  -0.27320013  -0.25999863   0.71484709        0.075     1.398686        1e-10 1.5885491e-11    6.2950525    2.4471335    31.520363 -0.0044356703  -0.19360464 -0.0040881053   0.20296716    0.9637511    1.6810108 
 1637000    4.0344732    1.2900482     2.744425  -0.23275169   0.86008097    1.0155461   0.75257994   -1.2298232            1   -0.1188351  -0.35645633   -0.3919616   0.39191265 -0.015559671 -0.062205514 -0.016958592  -0.27407381  -0.26379925    0.7203391        0.075    1.4011216        1e-10 1.6007536e-11    6.2470578    2.4497147    31.520363 -0.019705414  -0.19322489 -0.0094984326    0.2167229   0.15228809     1.182107 
 1638000    4.0315983    1.2809924     2.750606  -0.22476829   0.85404342    1.0064051   0.74868942   -1.2298232            1  -0.15584449  -0.42137861  -0.41431878   0.36816393 -0.0034388406  0.010694661 -0.066481474  -0.31028069  -0.29950381   0.71161904        0.075    1.3995182        1e-10 1.5813757e-11    6.3236082    2.4376575    31.520363  -0.00288741  -0.20183443 0.0023641619    0.1862869  -0.38638128   0.65091305 
 1639000    4.0271717    1.2750719    2.7520998  -0.23221311   0.85009623     1.005134   0.74288995   -1.2298232            1  -0.10364556  -0.37606725  -0.34907688   0.41420746 -0.0011985565  0.028154959  0.016919244  -0.25688547  -0.24712344   0.71304564        0.075    1.3922211        1e-10 1.5845459e-11    6.3109565    2.4457276    31.520363 -0.0033211278  -0.20919242 0.0022078045   0.22070987  -0.21824128    2.1564205 
 1640000    4.0375669    1.2813408    2.7562261  -0.22805266   0.85427574    1.0172633   0.74156849   -1.2298232            1  -0.10070913  -0.35210478   -0.4018815   0.45185888   0.00133024  -0.10679098  0.018847076  -0.25367646  -0.24591842   0.71810952        0.075    1.3914741        1e-10 1.5957989e-11    6.2664536    2.4386785    31.520363 -0.0054386859  -0.19424149  0.002047334   0.20687353    1.0831417    1.4068647 
 1641000    4.0212223    1.2831399    2.7380824  -0.23301012    0.8554752    1.0112279   0.74777472   -1.2298232            1  -0.10955405  -0.36871663  -0.35733826   0.39739275 0.0047921737 -0.014149196 -0.012847287  -0.26380157   -0.2539018   0.71969426        0.075    1.4080835        1e-10 1.5993206e-11    6.2526551    2.4599819    31.520363 -0.0052599784  -0.19179938 -0.0053260135   0.19177083   0.96873139    0.4046997 
 1642000    4.0417431    1.2854363    2.7563068  -0.22922924   0.85700622    1.0138849   0.74852665   -1.2298232            1  -0.21931029  -0.45351056  -0.45690636   0.25248606 0.0080340046  -0.07407502  0.036099798  -0.37371291  -0.36403732    0.7201117        0.075    1.3908591        1e-10 1.6002482e-11    6.2490305    2.4606613    31.520363 0.0082037404  -0.21384185 -0.0039691036   0.18828184     1.004119   -1.8818031 
 1643000    4.0168756     1.277855    2.7390206  -0.22685149   0.85195172    1.0143759   0.73963417   -1.2298232            1  -0.19930498  -0.43541874  -0.44469726   0.28220106  0.012583556  0.031566973  0.049200102   -0.3518733  -0.34410209   0.71409313        0.075    1.4090665        1e-10 1.5868736e-11     6.301699    2.4346459    31.520363 0.0088507175  -0.20581399 0.0001340935    0.1908903   0.19696871    3.0651402 
 1644000    4.0283806    1.2831527    2.7452279  -0.22501782   0.85548371     1.017858   0.74320102   -1.2298232            1 -0.093875735  -0.38175378  -0.33901479   0.43914136 -0.020215083  -0.02562966  0.057513926  -0.24717981   -0.2391699   0.71367427        0.075    1.4012794        1e-10 1.5859428e-11    6.3053976    2.4475861    31.520363 0.0044252564  -0.19137493 0.0011376354     0.188665   0.63212173  -0.23906732 
 1645000    4.0328099     1.301601    2.7312089  -0.23431131   0.86778333    1.0197245   0.76272163   -1.2298232            1  -0.12083827  -0.38483542  -0.37953508   0.40185569 -0.013796914  0.011799774 -0.0021956263  -0.27816897  -0.26639887   0.71190047        0.075    1.3984074        1e-10 1.582001e-11    6.3211083    2.4478016    31.520363 0.0040490538  -0.18837947 -0.0049334923   0.20249901   -1.2952304    2.0073337 
 1646000    4.0161352    1.2701917    2.7459435  -0.21653963   0.84684257   0.99386103   0.74518545   -1.2298232            1  -0.10815013  -0.36526678  -0.36709103   0.40790743 0.0045384161 -0.034361484  0.021264183  -0.26186355  -0.25001885   0.71661727        0.075    1.3978747        1e-10 1.5924828e-11    6.2795026    2.4473803    31.520363 0.0080716164  -0.19688504 -0.010085733    0.2317253   0.16450711  -0.57269811 
 1647000    4.0217115    1.2896412    2.7320703   -0.2326565   0.85980966    1.0072663   0.75785055   -1.2298232            1 -0.070505058  -0.35921215  -0.36265087   0.51034785 -0.012848714  0.044765659  0.009196192  -0.22683097  -0.21428731   0.71825936        0.075    1.3847197        1e-10 1.5961319e-11    6.2651464    2.4629564    31.520363 0.0039663257  -0.19307295 0.0014260076   0.18194611  -0.44808808    2.8767544 
 1648000    4.0022988    1.2657179    2.7365809  -0.22945997   0.84385988   0.98670355   0.74509148   -1.2298232            1  -0.24351206  -0.48515879  -0.47977699   0.23439959  0.018530307  0.047447942 0.0038000306   -0.3972061  -0.38435909   0.71647317        0.075    1.3937346        1e-10 1.5921626e-11    6.2807656    2.4598829    31.520363 0.0046709397  -0.19614617 -0.0082955426   0.20657098   0.78658419    1.1056065 
 1649000    4.0165144    1.2808465    2.7356679  -0.23471467   0.85394619    1.0078808   0.74750372   -1.2298232            1  -0.15773958  -0.40925061  -0.42359164   0.35962353  0.014503958 -0.013957691 -0.016984021  -0.31193119  -0.30160954   0.71536749        0.075    1.3941215        1e-10 1.5897055e-11    6.2904732    2.4427505    31.520363 -0.002701654  -0.19810405 0.0033073077   0.18765136  -0.73615092   0.71720989 
 1650000    4.0246784    1.2730578    2.7516206   -0.2219694   0.84875341    1.0023342   0.74255525   -1.2298232            1 -0.068562977  -0.32503886  -0.31730581   0.43665574 -0.0019872112  -0.10308864 -0.038978831  -0.22173385   -0.2116412   0.71556692        0.075    1.3753781        1e-10 1.5901487e-11      6.28872    2.4383472    31.520363 -0.0087862932  -0.17062494 0.00039986867   0.22393899   0.30140477   0.88099581 
 1651000    4.0101938    1.2754514    2.7347424  -0.24299894   0.85034923    1.0045718    0.7437071   -1.2298232            1  -0.16201399  -0.42893079  -0.40500233   0.34789114 0.0089847046 -0.019574736 0.0031463722  -0.31542246  -0.30541162   0.71710358        0.075    1.3833691        1e-10 1.5935635e-11    6.2752441    2.4404597    31.520363 -0.0064822292  -0.19839767 -3.726449e-06   0.20077868    1.0254978   0.54414185 
 1652000    4.0320058    1.2875336    2.7444722  -0.23160441   0.85840451   0.99920662   0.76105028   -1.2298232            1 -0.044270453  -0.33442934  -0.34001681   0.54163479  0.011394234 -0.082969167  -0.02083796  -0.20125639  -0.18690223   0.71869601        0.075    1.3928419        1e-10 1.5971022e-11    6.2613399    2.4392018    31.520363 -0.010222656  -0.21407466 0.0013040401   0.20725179   0.10527702    2.5868799 
 1653000    4.0053829    1.2788866    2.7264962  -0.23150766   0.85263953    1.0004442   0.75043891   -1.2298232            1   -0.2053898  -0.44570396  -0.45083547   0.28037003 -0.0086794817  0.020451571  0.028982772  -0.36018687  -0.34819823   0.71717125        0.075    1.3976396        1e-10 1.5937139e-11     6.274652     2.452185    31.520363 -0.0019592783  -0.18311853  0.011962266   0.18458618  -0.82696997  -0.87624653 
 1654000    3.9939272    1.2633656    2.7305616  -0.23745334   0.84229155   0.99681728   0.73543887   -1.2298232            1  -0.12493435  -0.37715179  -0.39469856   0.39704731 -0.00084934784 0.0076448401  -0.08596262  -0.27663728  -0.26722505   0.71841813        0.075    1.4059273        1e-10 1.5964847e-11    6.2637617    2.4542431    31.520363 0.00050051655  -0.18540302 -0.0091882567   0.19024307   -1.4029482    1.6817496 
 1655000    4.0120222     1.281199    2.7308232  -0.23810184   0.85418117    1.0063743   0.74894381   -1.2298232            1  -0.25742854  -0.52702634  -0.47718566   0.23192637 0.0056429918 -0.028556315 -0.047495397  -0.41191721  -0.40108346   0.72359657        0.075    1.3932985        1e-10 1.6079924e-11    6.2189349     2.455726    31.520363   0.01546703  -0.23392447 -0.0018842667   0.18453206 -0.079700853  -0.32997229 
 1656000    4.0193474    1.2698756    2.7494718  -0.23481955   0.84663181    0.9944902   0.74439343   -1.2298232            1  -0.13583776   -0.3720835  -0.40663072   0.37120095 -0.0027015384    0.0341675 0.0076742007   -0.2893878  -0.27779628   0.72134889        0.075    1.4097091        1e-10 1.6029975e-11    6.2383128    2.4435794    31.520363 0.0078265602  -0.20366084 0.0070810772   0.18981862  -0.76737334    2.5572473 
 1657000     4.007755     1.273454     2.734301  -0.22999146   0.84901759    1.0021531   0.74312763   -1.2298232            1  -0.11262118  -0.36063749   -0.3662703   0.38904424 0.0063762581  0.057392549 0.0028141603  -0.26591012  -0.25567355    0.7142924        0.075    1.3968656        1e-10 1.5873164e-11     6.299941    2.4419882    31.520363 0.0064198517  -0.18570251 -0.0027165333   0.18691734   -1.7523214   0.88031098 
 1658000    4.0180248    1.2629639    2.7550609  -0.22527611   0.84202375   0.98058357   0.74621964   -1.2298232            1  -0.15003424  -0.39561592  -0.39272201   0.33823521 -0.0064766166 -0.018651214 -0.004729406  -0.30396098  -0.29000767   0.71223481        0.075    1.3978687        1e-10 1.582744e-11     6.318141    2.4526622    31.520363 0.0030479034  -0.17052105 -0.0057493745   0.20321975   -1.0970139    2.0148081 
 1659000    4.0172536    1.2790447    2.7382089  -0.23170647   0.85274488   0.98837155   0.75897158   -1.2298232            1  -0.18811753   -0.4194616  -0.45731884   0.31242785 -0.0061775186   0.10687953  0.072416899  -0.34467468  -0.32920265   0.71824883        0.075    1.4016545        1e-10 1.5961085e-11    6.2652382    2.4374989    31.520363 0.0018729783  -0.24480984 -0.0041134127   0.20283557   -1.6865434  0.073490841 
 1660000    4.0236945     1.291827    2.7318676  -0.23540463   0.86126692    1.0063774   0.76093151   -1.2298232            1   -0.1112944  -0.38670956  -0.37305229   0.42587865 -0.011395498 -0.039119879 0.0079913082  -0.26825584  -0.25494977   0.72350853        0.075    1.3984544        1e-10 1.6077967e-11    6.2196917    2.4490734    31.520363 -0.0034521478  -0.21562793  0.016674188   0.20666589   0.82983664    3.3783406 
 1661000    4.0289651    1.2736995    2.7552656  -0.22409734   0.84918124   0.99360112    0.7493226   -1.2298232            1  -0.18917518  -0.41377409  -0.42428661   0.27053516 0.0020340492 -0.079162651 -0.0006748005  -0.34374199   -0.3310068   0.71300876        0.075    1.3993827        1e-10 1.5844639e-11    6.3112829    2.4416456    31.520363 0.00099277577  -0.17301886 0.0019239685   0.22236599   0.64469355   -0.3321022 
 1662000     4.009558    1.2668448    2.7427132  -0.23015531   0.84461115    1.0027243   0.73527618   -1.2298232            1  -0.23536735  -0.46553482  -0.46472347   0.22415625 -0.0051324206 -0.070265856  0.029575812  -0.38703672  -0.37850124   0.71348004        0.075    1.3795534        1e-10 1.5855112e-11    6.3071141    2.4551195    31.520363 -0.0010936487  -0.18557957 0.0024132297   0.18159018     1.036258   -2.6752572 
 1663000    4.0121987    1.2833888    2.7288099  -0.23911339   0.85564115    1.0121277   0.74743285   -1.2298232            1 -0.060339555  -0.32889087  -0.32067247   0.46854468 -0.0064748238  -0.07435242 -0.030863392  -0.21451655  -0.20481575   0.72008129        0.075    1.3719554        1e-10 1.6001806e-11    6.2492945    2.4438866    31.520363  0.002248353  -0.20533217 0.0033335362   0.22389225   0.54727524    2.1336749 
 1664000    4.0218376    1.2728535    2.7489841  -0.22977348   0.84861723   0.99545786   0.74708334   -1.2298232            1  -0.18935428  -0.41432897  -0.44933339   0.29559952 0.0051976327  0.016360932  0.025178184  -0.34345918  -0.33145093   0.71402659        0.075    1.3734418        1e-10 1.5867257e-11    6.3022863    2.4442562    31.520363  0.010781147   -0.2027157  0.011297731   0.19043996  -0.64025888   0.78572464 
 1665000    4.0273962    1.2856333    2.7417629  -0.22451757   0.85713756    1.0055232   0.75453531   -1.2298232            1   -0.1508628  -0.39932875  -0.38889982   0.33564018 0.0044161435  0.037362822 0.0086526489  -0.30650486  -0.29439623   0.71450647        0.075    1.3842026        1e-10 1.5877922e-11    6.2980535    2.4452496    31.520363 0.0023000529   -0.1940088 0.0057537903   0.22132159  -0.70220512   0.64412606 
 1666000    4.0561161    1.3136815    2.7424347  -0.22691463   0.87583739    1.0356248   0.76534681   -1.2298232            1  -0.13195536  -0.37593501  -0.39109723   0.37116617 0.0041321057  0.071102884 -0.034088545  -0.28982756  -0.27978564   0.71765829        0.075    1.4010239        1e-10 1.5947962e-11    6.2703937    2.4491544    31.520363 -0.0017618561  -0.20004475 -0.0071631512     0.214571   -1.1545509    1.1611884 
 1667000    4.0456264    1.2894284     2.756198  -0.22644979   0.85966777    1.0197137   0.74899672   -1.2298232            1  -0.18504522  -0.45473555  -0.42889016   0.32849003 -0.010505575   0.10967296 -0.0012985591  -0.33954481  -0.33060428   0.71722668        0.075    1.3995197        1e-10 1.5938371e-11     6.274167    2.4539216    31.520363 -0.0076188117  -0.19649787 -0.0018964716   0.20231241 -0.028194251    3.0578995 
 1668000    4.0423334      1.30445    2.7378833  -0.22990309   0.86968277    1.0356708   0.75490065   -1.2298232            1  -0.11190577  -0.38590771  -0.35438741   0.40457781 0.0049520182  0.043883523   0.01366275  -0.26762319  -0.25974263   0.71532731        0.075    1.4030018        1e-10 1.5896162e-11    6.2908265    2.4459238    31.520363 0.0052891733   -0.2003424 -0.0059567315   0.21572284   0.98523515    1.2656027 
 1669000    4.0297431    1.2892786    2.7404645  -0.23022291   0.85956789    1.0135901   0.75306532   -1.2298232            1   -0.1446396  -0.40195026  -0.38550252   0.35353397  -0.01218387   0.02012461 -0.015132606  -0.29997844  -0.28932455   0.71316057        0.075    1.3988992        1e-10 1.5848013e-11    6.3099395    2.4466033    31.520363 0.0051038699  -0.17621381 0.0019196266   0.18856888  -0.34455817   0.30988501 
 1670000    4.0516646    1.2939083    2.7577563  -0.22894428   0.86265455     1.022262   0.75228719   -1.2298232            1  -0.12269572  -0.37396251  -0.40777483   0.41365018   0.01285767 -0.082533751 0.0051089633  -0.27787405  -0.26861854   0.71092347        0.075    1.3998651        1e-10 1.5798299e-11    6.3297953    2.4431381    31.520363 0.0054749444  -0.19905291 -0.010655945   0.20530724  -0.46851318     3.185522 
 1671000    3.9951733    1.2590931    2.7360801  -0.23225982   0.83944309     1.007346     0.723333   -1.2298232            1  -0.14606844   -0.4166502  -0.36308778   0.34153265  -0.01013117 -0.040960249 -0.029553543  -0.29527424  -0.28986207   0.71270014        0.075    1.4110156        1e-10 1.5837781e-11    6.3140158    2.4489829    31.520363 -0.0087023382  -0.19036176 0.0016791877   0.19947759   0.45070975   -1.7221901 
 1672000    4.0328431    1.2867698    2.7460733  -0.22581633   0.85789527    1.0104227   0.75242692   -1.2298232            1  -0.15021117  -0.38774444  -0.40983075   0.34694169 -0.016843172 -0.0075232785 -0.023155694  -0.30541832  -0.29444398   0.71314538        0.075    1.3957572        1e-10 1.5847675e-11    6.3100738    2.4499688    31.520363 -0.002510768  -0.19147068 -0.0076972906   0.21508048  -0.40722619    2.8539898 
 1673000    4.0151516    1.2746914    2.7404602  -0.23670481   0.84984253   0.99973564    0.7461964   -1.2298232            1  -0.20160884  -0.44981279  -0.45438057   0.29936685 -0.017046115 -0.040565395 0.0014546813  -0.35553079  -0.34431613   0.71559405        0.075    1.3908109        1e-10 1.590209e-11    6.2884815    2.4409507    31.520363 -0.0027991222  -0.21469438 -0.013779604   0.20459197 -0.029171502  -0.44273906 
 1674000    4.0308879    1.2846898    2.7461981  -0.22900234   0.85650854    1.0039907   0.75453149   -1.2298232            1   -0.2159121  -0.48118849   -0.4471674   0.28061958 -0.010339332  -0.15383426   0.02600347  -0.37155338  -0.35922677   0.71623418        0.075    1.3908924        1e-10 1.5916315e-11    6.2828613    2.4488186    31.520363 -0.0030126429    -0.207676 -0.0053560867   0.20319312   0.79890939    2.0548997 
 1675000    4.0477161     1.294546    2.7531701  -0.22688924   0.86307966    1.0086616   0.76241818   -1.2298232            1  -0.16378998  -0.44381721  -0.41568714   0.36813442 0.00042451139  -0.12009906  0.045801515  -0.32105808  -0.30777141    0.7165519        0.075    1.4005337        1e-10 1.5923375e-11    6.2800755    2.4426829    31.520363 -0.0017335674  -0.20154884 0.0077227187   0.21999346   0.58844123    1.7455627 
 1676000    4.0332325    1.2955102    2.7377223  -0.23767417   0.86372254    1.0119812   0.76120884   -1.2298232            1 -0.034567563  -0.30555772  -0.30423092   0.50608595  0.023327141 -0.025092216 -0.062702461  -0.19158621  -0.17902284   0.71713823        0.075    1.3998167        1e-10 1.5936405e-11    6.2749409    2.4460412    31.520363 0.0063917629  -0.18940391 0.0042799316   0.22142422  -0.24336005    3.0836603 
 1677000    4.0310519    1.2883838    2.7426681   -0.2296633   0.85897133    1.0186504   0.74855411   -1.2298232            1  -0.18057374   -0.4216084  -0.43404635   0.31393351  0.019576822  0.069622295  0.045215627  -0.33498203  -0.32598102   0.71313698        0.075    1.4138173        1e-10 1.5847488e-11    6.3101482    2.4486496    31.520363 -0.00068810448  -0.19847381 -0.00057904928   0.19082705  -0.55384915   0.33476785 
 1678000    4.0311768    1.2815535    2.7496233  -0.23037097   0.85441755    1.0028061   0.75181301   -1.2298232            1  -0.20802484   -0.4328449  -0.46176493    0.2705353 -0.0061311015  0.037474901 0.0075210737  -0.36310536  -0.35117043   0.71518379        0.075     1.407907        1e-10 1.5892973e-11     6.292089    2.4420168    31.520363  -0.01314094   -0.1943612 -0.028388088   0.23267035   0.37312711   0.44385124 
 1679000     4.030585    1.2877632    2.7428218  -0.23640215   0.85855756     1.014547   0.75069357   -1.2298232            1  -0.14566537   -0.4347035  -0.39618137   0.39388876 -0.0082915106 -0.029056168  0.010344359  -0.30051497   -0.2904869   0.72029964        0.075    1.3936616        1e-10 1.6006659e-11       6.2474    2.4704597    31.520363  0.012645487  -0.19190301 -0.0010739764   0.17059897  -0.96106664    2.5774604 
 1680000    4.0345854    1.2787124     2.755873  -0.23078271   0.85252336    1.0095048   0.74397227   -1.2298232            1  -0.20484612   -0.4360232  -0.45177057   0.27325541 -0.0095385058 -0.020767835  0.035405126  -0.35830929  -0.34894791   0.71812259        0.075    1.4030177        1e-10 1.595828e-11    6.2663396    2.4433135    31.520363 -0.0087336834  -0.21904294 0.0061207984   0.20738931  -0.29387994   0.36376319 
 1681000    4.0240072    1.2711969    2.7528103  -0.23028152   0.84751276   0.99413434   0.74613034   -1.2298232            1  -0.13753262  -0.40661045  -0.40236503   0.39637762 0.0040036945 -0.0070417882  0.010246565  -0.29144095  -0.27944035   0.71679874        0.075    1.4008377        1e-10 1.5928861e-11    6.2779128    2.4443629    31.520363 -0.0042125338  -0.20349172 0.0021309555   0.21639523    2.2914875    1.3151616 
 1682000    4.0331228    1.2762424    2.7568804  -0.22367363    0.8508766   0.99408474   0.75185665   -1.2298232            1  -0.21625818  -0.48184531  -0.43607619   0.26914698 -0.0077945556 -0.026984514 -0.050032454   -0.3713477  -0.35815883   0.71358891        0.075      1.38306        1e-10 1.5857531e-11    6.3061518    2.4543123    31.520363 0.00032374652   -0.1955355 -0.0097339286   0.21310892   0.13431327   0.86199658 
 1683000    4.0175687    1.2776669    2.7399017     -0.22747   0.85182635    0.9999957   0.74937327   -1.2298232            1  -0.15833081  -0.43374567  -0.38037973   0.33913297 0.0087727793  0.025505914  0.018800407  -0.31290807  -0.30107522    0.7155989        0.075    1.4035988        1e-10 1.5902198e-11     6.288439    2.4394068    31.520363 0.0009274172  -0.21256504 -0.0020178079   0.19483754   -1.1395276   0.43506441 
 1684000    4.0211139    1.2906676    2.7304463  -0.23402752   0.86049395    1.0153745   0.75339745   -1.2298232            1  -0.19958541   -0.4420242  -0.45464342    0.2979114 -0.0040685161  0.059108065  0.038311341  -0.35499275  -0.34452507   0.71753341        0.075    1.4040927        1e-10 1.5945187e-11     6.271485    2.4344325    31.520363 -0.0071883786  -0.19314358 0.0037306183   0.21505157   -1.7722275   0.31608538 
 1685000    4.0274796    1.2769865    2.7504931  -0.23169895   0.85137267    1.0018212   0.74734231   -1.2298232            1  -0.20096382  -0.47314176  -0.44512235   0.31537265  0.022889758  0.073230945  0.024101898  -0.35512214  -0.34396882   0.71592277        0.075    1.4158584        1e-10 1.5909395e-11    6.2855942    2.4418827    31.520363 0.00015667804   -0.2038363 -0.001610469   0.20157314   -2.2625361  -0.29357338 
 1686000    4.0533427    1.2889118    2.7644309  -0.22607561   0.85932333    1.0044263   0.75899291   -1.2298232            1  -0.21517613  -0.45739076  -0.45851626   0.27037862 0.0022535909 -0.034623058 -0.045352853  -0.37173769    -0.358553   0.71484332        0.075    1.4162572        1e-10 1.5885407e-11    6.2950857    2.4543484    31.520363 -0.0034531931  -0.18072599 -0.0065477559   0.21161777    2.8941547   0.30244078 
 1687000    4.0346261     1.283552    2.7510741  -0.22772426   0.85574994    1.0222044   0.74064371   -1.2298232            1  -0.20360801  -0.45101103  -0.44639125   0.28657824 -0.0043652571  0.052189405 -0.012389833  -0.35638458  -0.34952261   0.71482541        0.075    1.4138594        1e-10 1.5885009e-11    6.2952435    2.4410505    31.520363 -0.0081854679  -0.19876249  0.004862293   0.20897326  -0.88668532     2.169759 
 1688000     4.035658    1.2819463    2.7537118  -0.22761935   0.85467938    1.0021277   0.75272557   -1.2298232            1  -0.15244432  -0.40550021  -0.42233524   0.37050249 -0.0044075217 -0.063965278 -0.0016465482  -0.30771308  -0.29549306   0.71842127        0.075    1.4215126        1e-10 1.5964917e-11    6.2637343    2.4462632    31.520363 -0.0099972983  -0.19431362 -0.0051893777   0.20268335  -0.35607919 -0.0010698893 
 1689000    4.0312218    1.2838298    2.7473919  -0.22870642   0.85593516    1.0142553   0.74645801   -1.2298232            1  -0.23138765  -0.46963735  -0.45539123   0.23086563 -0.0014556899 -0.059918898 -0.0054633083  -0.38536356  -0.37616755   0.71815175        0.075    1.4115616        1e-10 1.5958928e-11    6.2660852    2.4355246    31.520363 -0.0042684511   -0.1877241 -0.0036516498   0.21284403  -0.38094298   0.31630739 
 1690000    4.0420788    1.2928311    2.7492477  -0.23923514   0.86193635    1.0148332   0.75621277   -1.2298232            1  -0.14421975   -0.4136837  -0.42263507   0.40365953 -0.013622228 -0.056917875  0.018643497  -0.30020783  -0.28908213    0.7170046        0.075    1.3909175        1e-10 1.5933436e-11    6.2761104    2.4583475    31.520363 -0.0043025005  -0.20796486 -0.0020725739   0.19461093   0.75236919     3.345268 
 1691000    4.0073369    1.2758945    2.7314424  -0.23108286   0.85064466    1.0014129     0.746393   -1.2298232            1  -0.10866235  -0.37840607  -0.36269236    0.4151114 0.00021731224  -0.10761411  0.004446652  -0.26262485  -0.25160905   0.71771717        0.075    1.3668905        1e-10 1.594927e-11    6.2698793    2.4517295    31.520363 -0.011545776  -0.20011546 -0.0099529879   0.22224969   0.58529055    1.3380138 
 1692000    4.0150949     1.281523    2.7335719  -0.23005662    0.8543972    1.0078142   0.74831294   -1.2298232            1  -0.11783824  -0.38071226  -0.37183178   0.39902933  0.014568421 -0.042649418  0.014942833  -0.27219678   -0.2616987   0.71205205        0.075    1.3731018        1e-10 1.5823379e-11    6.3197627     2.450173    31.520363 -0.0011073664  -0.18051358 -0.0098848035   0.20171393 -0.074710396    2.3116089 
 1693000     4.022591    1.2799733    2.7426177  -0.22991937     0.853364   0.99654929   0.75436011   -1.2298232            1  -0.09415916  -0.36731441  -0.32664434   0.41148127 -0.0054209294  -0.02619971  0.027715763  -0.24976508  -0.23641161   0.71493936        0.075    1.3555348        1e-10 1.5887541e-11    6.2942401    2.4436693    31.520363 0.0042477844  -0.19994035 0.0025611707   0.20206336   0.22682969    1.4638542 
 1694000    4.0203845    1.2806957    2.7396888  -0.23142137   0.85384563    1.0032583   0.75053235   -1.2298232            1  -0.13284054  -0.38140956  -0.41119168    0.3940796 -0.012116601 -0.048001546 -0.030369016  -0.28765689  -0.27605068   0.71934621        0.075    1.3471058        1e-10 1.5985471e-11    6.2556804    2.4541594    31.520363 0.0019438718  -0.19820616 -0.0041036643   0.20815017   0.80047724    4.0685004 
 1695000    4.0296112    1.2864592    2.7431519  -0.23273223   0.85768822    1.0104892   0.75203056   -1.2298232            1  -0.23902719  -0.50727322  -0.49754827   0.28773991 -0.0046362519 -0.026706821  0.044616741  -0.39415259   -0.3832695      0.71579        0.075    1.3557894        1e-10 1.5906445e-11    6.2867601    2.4582308    31.520363 -0.0056429673   -0.1902006 -0.0020604494   0.19377609   0.58503039    1.2298438 
 1696000     4.038947    1.2873008    2.7516462  -0.23010266   0.85824931    1.0098505     0.753422   -1.2298232            1  -0.24069241  -0.47577051  -0.45609537   0.20978867 -0.010528733 -0.019762991  0.035083479  -0.39610482  -0.38484354   0.71386911        0.075    1.3750398        1e-10 1.5863758e-11    6.3036766    2.4429965    31.520363 0.0023793258  -0.18593873 -0.0017507201   0.21148843   0.49424018  -0.37819239 
 1697000    4.0239828    1.2776893    2.7462936  -0.23080622   0.85184122   0.99751694   0.75111378   -1.2298232            1 -0.049015512  -0.32781089  -0.33730084   0.51806519 -0.010912736  0.044362344  0.017961518   -0.2039518  -0.19140609   0.71804426        0.075    1.3632786        1e-10 1.5956539e-11    6.2670231    2.4593786    31.520363 0.0018526894  -0.19416789 -0.0041438982   0.21217224   0.64353319    2.5308946 
 1698000    4.0414038    1.2883963    2.7530076  -0.23259374   0.85897964    1.0062355    0.7571594   -1.2298232            1  -0.22595147    -0.446232  -0.47897532    0.2473529 -0.0038034789   0.13974494  -0.03548599  -0.38213482  -0.36958658    0.7214523        0.075     1.363224        1e-10 1.6032273e-11    6.2374186    2.4364718    31.520363 -0.0028481251  -0.22479759 -0.00054287298   0.19583381   -0.9955326 -0.060769186 
 1699000    4.0176265    1.2743731    2.7432534   -0.2281225   0.84963032    1.0018334   0.74438562   -1.2298232            1  -0.10213952  -0.37340916  -0.40372176   0.47071236  0.013112647  0.041785053 -0.025385125  -0.25568795  -0.24514626    0.7190754        0.075     1.385746        1e-10 1.5979453e-11    6.2580364    2.4688926    31.520363 -0.0049517023  -0.20146963 -0.0065659483   0.19829179  -0.49806621  -0.94654029 
 1700000    4.0380019    1.2808386    2.7571634  -0.22895104   0.85394088   0.99602376   0.75569992   -1.2298232            1 -0.070485821  -0.31852884  -0.34907997   0.45615134  -0.01185381  0.015988393 -0.014891425  -0.22636811  -0.21266326   0.71161199        0.075    1.3674705        1e-10  1.58136e-11    6.3236709    2.4377015    31.520363 -0.010554941  -0.19385271 -0.0029507381   0.17110264   0.31551333    2.1159938 
 1701000    4.0256456    1.2834192    2.7422264  -0.22628275   0.85566141    1.0095445   0.74925471   -1.2298232            1  -0.13927885  -0.40102544  -0.39808056   0.38126945  -0.02063028 -0.047687784 -0.017352569  -0.29383165  -0.28338631   0.71310305        0.075    1.3776086        1e-10 1.5846734e-11    6.3104484    2.4512554    31.520363 0.0034694514   -0.2148407 0.0098909366   0.20602394 -0.028975609  -0.14507096 
 1702000    4.0409376    1.2869871    2.7539505  -0.23090324   0.85804015    1.0026237   0.75806911   -1.2298232            1  -0.20337964  -0.44761596   -0.4853693   0.32284633 -0.019805776   0.03396786 0.00081307948  -0.35975064  -0.34649918   0.71726455        0.075    1.3802358        1e-10 1.5939212e-11    6.2738358     2.444006    31.520363 -0.0054369808  -0.19305105 0.0041050296   0.19827213    1.0513915    1.5343823 
 1703000     4.020558    1.2765005    2.7440575  -0.23260294   0.85104867    1.0114495   0.74013119   -1.2298232            1 -0.092832031  -0.37871207  -0.31500496   0.41522094 0.0094842267   0.11544145  0.031023808  -0.24550288  -0.23721141   0.72150348        0.075    1.3885112        1e-10 1.6033411e-11    6.2369761    2.4391109    31.520363 -0.0024469866  -0.19799945 -0.0075509105   0.20639045    -1.512646    1.1223767 
 1704000    4.0310958    1.2891425    2.7419533  -0.22656334   0.85947714    1.0124792   0.75368052   -1.2298232            1  -0.11386995   -0.3496418  -0.37765303   0.38568498 0.0084474648 -0.032542781 -0.043395057  -0.26933569  -0.25839632   0.71902038        0.075    1.3929163        1e-10 1.5978231e-11    6.2585152    2.4456506    31.520363 0.0048207971   -0.2047019 -0.0083851776   0.21137092  -0.28116761    3.2428406 
 1705000    4.0384654    1.2733691    2.7650963  -0.22597081   0.84896094   0.98830885   0.75261213   -1.2298232            1  -0.19776501  -0.42661095  -0.46603252   0.29934844  0.016490971 -0.0056852323   0.02954633  -0.35301036  -0.33884118   0.71110166        0.075    1.3966589        1e-10 1.5802259e-11    6.3282091     2.452568    31.520363 -0.0021971504  -0.21855521 -0.0042597541   0.18616362   -0.8459394    2.6284343 
 1706000    4.0217874    1.2665161    2.7552713  -0.22505373   0.84439201   0.99559929   0.73983594   -1.2298232            1   -0.2127088  -0.43916535  -0.44429437   0.24533331 0.0024097197 -0.084383435 -0.00099644951  -0.36531874  -0.35482565   0.71022866        0.075    1.4030125        1e-10 1.5782859e-11    6.3359876    2.4444519    31.520363 -0.0083338575  -0.21310548 0.0029209012   0.18653619    1.2444869   0.95831371 
 1707000    4.0445114    1.2914996    2.7530118   -0.2287796   0.86104865    1.0132373   0.75581506   -1.2298232            1  -0.10469178  -0.36911349   -0.3510133   0.40605144 -0.0049443197  0.053901318 -0.012722875  -0.26059783  -0.24932637   0.71836592        0.075    1.3990871        1e-10 1.5963687e-11     6.264217    2.4457874    31.520363 -0.0049372274  -0.18468246 0.00076081351   0.20756455    1.5115056    2.2257308 
 1708000    4.0210204     1.272001    2.7490194  -0.23439824   0.84804884    1.0053497    0.7392763   -1.2298232            1  -0.14851847  -0.39146279  -0.40110685   0.34701423 0.0015264187  0.078857167  0.044786486  -0.30101298  -0.29202714    0.7173766        0.075    1.3972865        1e-10 1.5941702e-11    6.2728558    2.4483466    31.520363 -0.0018251551  -0.19132028 -0.00053293367   0.18780309   -1.5967422    2.1586849 
 1709000    4.0454962    1.2877018    2.7577944  -0.22711187   0.85851661    1.0031538   0.75850848   -1.2298232            1  -0.14726365  -0.39681916  -0.41988173   0.37490994 0.0047091784 -0.033167581  0.029948544  -0.30372528  -0.29045886   0.71189683        0.075    1.4043412        1e-10 1.581993e-11    6.3211407    2.4527137    31.520363 -0.010273013  -0.20262883 -0.00022974542   0.20820378  -0.63925847    1.5511349 
 1710000    4.0390579    1.2944112    2.7446467  -0.22569549   0.86298983     1.013263   0.75908194   -1.2298232            1   -0.2182706  -0.48919944  -0.43614863   0.27053627 -0.0070361105 -0.047335747  0.051088725  -0.37485052  -0.36290886   0.71180206        0.075    1.4032396        1e-10 1.5817824e-11    6.3219822    2.4397911    31.520363 -0.0048250873  -0.19412899 0.0025624321   0.20584315  -0.88534629    2.7927999 
 1711000    4.0426433    1.2880083     2.754635  -0.22950852     0.858721    1.0138247   0.75146997   -1.2298232            1  -0.18361585   -0.4353041  -0.42868244   0.31313898 -0.0038917517 -0.040203878  0.020385378  -0.33862561  -0.32833428   0.71970896        0.075    1.4110976        1e-10 1.5993532e-11    6.2525274    2.4441946    31.520363 0.0028603298  -0.18737647 -0.0088683638   0.18926139    1.5316065    -1.484508 
 1712000    4.0248665    1.2651419    2.7597246  -0.22868397   0.84347585    1.0002534   0.73506499   -1.2298232            1  -0.12144918  -0.38782195  -0.39543801    0.4189124 -0.017673668 -0.067142118   0.05046792    -0.273075  -0.26423038   0.71723634        0.075    1.3944277        1e-10 1.5938585e-11    6.2740825    2.4437478    31.520363 -0.0052534243  -0.19810229 -0.0021219815   0.20332029   0.71840408    2.5897976 
 1713000    4.0256319    1.2771328    2.7484992  -0.23280627   0.85147022    1.0205708   0.73453247   -1.2298232            1  -0.19326229  -0.43335404  -0.47394698   0.32751417 -0.0015233733 -0.042582001 -0.011489177  -0.34477825  -0.33894369   0.71292819        0.075    1.3997217        1e-10 1.5842849e-11    6.3119961    2.4443841    31.520363 -6.8347013e-05  -0.20041233 -0.0031944992   0.20018803  0.075523963     2.328178 
 1714000    4.0215334    1.2795376    2.7419958   -0.2219519   0.85307352    1.0100886   0.74449923   -1.2298232            1  -0.17414112  -0.43651044  -0.42521769   0.33930478 -0.008710025 -0.014099815  0.020869891  -0.32771298  -0.31832624    0.7094733        0.075    1.3970411        1e-10 1.5766073e-11    6.3427334     2.444565    31.520363 -0.0016327187  -0.21383346  -0.01146813   0.19450565  0.025702296    2.1256176 
 1715000    4.0230932    1.2752003     2.747893  -0.22759599    0.8501818    1.0062908   0.74223422   -1.2298232            1  -0.21600704  -0.47271918  -0.45743733   0.28213539 -0.0056414743 -0.043279463 -0.063977991  -0.36911169  -0.35965005   0.70986091        0.075    1.3927516        1e-10 1.5774687e-11    6.3392701    2.4415819    31.520363 -0.0024907428  -0.19034769 -0.0043451611   0.18744199    0.6308631    1.4213433 
 1716000    4.0485295    1.2856851    2.7628444  -0.23151222   0.85717208    1.0103694   0.75124014   -1.2298232            1  -0.15057165  -0.39568669  -0.37284621   0.31681795 -0.011886499  -0.03136903 -0.0077177864    -0.305534  -0.29479685   0.71633455        0.075    1.3994664        1e-10 1.5918546e-11    6.2819809     2.443232    31.520363 -0.004109684  -0.20508308 0.0026041275    0.2014137  -0.65856432  0.054648821 
 1717000    4.0371032    1.2837731    2.7533301  -0.23388022   0.85589738    1.0242905   0.73944961   -1.2298232            1  -0.18587687  -0.42908284  -0.43535693   0.30680915 -0.0050192176  0.073947588   0.04980629  -0.33840713  -0.33208925   0.71831716        0.075    1.4006311        1e-10 1.5962604e-11    6.2646422    2.4482598    31.520363 0.0025987657  -0.18784882 -0.0029558653   0.19742129   -1.4892854    2.4299791 
 1718000    4.0299866    1.2768663    2.7531203  -0.22815632   0.85129254    1.0076777   0.74315396   -1.2298232            1  -0.19137051  -0.42057154  -0.45685908    0.3033191 -0.0048294261  0.010939681 -0.0068586619  -0.34466487  -0.33521149   0.71454974        0.075    1.3923175        1e-10 1.5878883e-11    6.2976721    2.4610418    31.520363 -0.0046068465  -0.17796823 -0.0022906806   0.22583399  -0.32083013    1.5764438 
 1719000    4.0382056    1.2734469    2.7647588  -0.22244373    0.8490128    1.0002689   0.74442341   -1.2298232            1  -0.11479999  -0.34804676  -0.39389196   0.39753874 0.0015682984  0.076368159 0.0011663616  -0.26835622   -0.2575834   0.70787403        0.075    1.3948039        1e-10 1.5730534e-11    6.3570633    2.4401557    31.520363 0.0069452233  -0.19973803   -0.0111555   0.18712688   -1.4982471    1.4045179 
 1720000    4.0392891    1.2857395    2.7535496  -0.23250528   0.85720835     1.014679   0.74831917   -1.2298232            1  -0.18257632  -0.43972281  -0.44423892   0.33623275 0.0069701669 -0.015808066  0.051270319  -0.33693615  -0.32741671   0.71538184        0.075    1.3831363        1e-10 1.5897374e-11     6.290347    2.4650298    31.520363 -0.0041798574  -0.20014022 -0.006713815   0.22168854  -0.31866737   0.81157976 
 1721000    4.0471767    1.2880532    2.7591235  -0.22033338    0.8587509    1.0097643   0.75433036   -1.2298232            1 -0.057449785  -0.33546016  -0.32609481   0.48920561 -0.0045751207 -0.053808287 -0.015384911  -0.21304957  -0.20158862   0.71441182        0.075    1.3826745        1e-10 1.5875818e-11     6.298888    2.4410229    31.520363 -0.0084844241  -0.19965207 0.00065630932   0.21547818   -1.2757213    2.4203652 
 1722000    4.0305846    1.2796812    2.7509034  -0.22600287   0.85316928    1.0108738    0.7441179   -1.2298232            1  -0.28680955  -0.51159737  -0.50875591   0.15992464  0.012727791  0.050889395 -0.017546336  -0.44030275  -0.43110675   0.71369025        0.075    1.3770175        1e-10 1.5859783e-11    6.3052564    2.4488398    31.520363 -0.0040313328  -0.23021525 8.9087162e-05   0.20305697   -1.5023073  -0.49066268 
 1723000    4.0378265    1.2824708    2.7553557  -0.22575722   0.85502909   0.99977892   0.75494268   -1.2298232            1  -0.23099745  -0.45792194  -0.49561826   0.26054784 -0.017060471 -0.0084088506  0.019740555  -0.38672355  -0.37371092   0.71246045        0.075    1.3585774        1e-10 1.5832454e-11    6.3161401    2.4452547    31.520363 -0.0016392943  -0.20540973 -0.0045332098   0.20745889   -0.5549582   0.10601782 
 1724000    4.0279355    1.2804152    2.7475202  -0.22443604   0.85365864    1.0011938   0.75164462   -1.2298232            1  -0.17241399  -0.44681337   -0.4296421   0.35921351  -0.00092779  0.023798931   0.05885248  -0.32745977  -0.31532942   0.71507373        0.075    1.3614364        1e-10 1.5890527e-11    6.2930573    2.4521459    31.520363 0.0070869204  -0.18655276 -0.0038529965   0.22052876    1.8214857   0.90627061 
 1725000    4.0236531    1.2774102    2.7462429  -0.22886196   0.85165517   0.99600351   0.75184627   -1.2298232            1  -0.14674469  -0.40732986  -0.41901896   0.38611476  0.011100401  0.015003354 -0.052766926  -0.30183206  -0.28891923   0.71608843        0.075    1.3655335        1e-10 1.5913076e-11    6.2841401    2.4556061    31.520363 0.00034384571  -0.18509216 -0.012359636   0.23082092   -1.1282793    3.7250078 
 1726000    4.0182892    1.2634139    2.7548753  -0.23283993    0.8423238   0.99039535    0.7399375   -1.2298232            1  -0.18331593   -0.4420718  -0.44108848   0.33321249  0.010773123 -0.063073335 -0.0021064037  -0.33594682  -0.32468994   0.71976365        0.075    1.3736484        1e-10 1.5994748e-11    6.2520523    2.4436431    31.520363 -0.0028770066  -0.22722431 0.0032636869   0.20640288   0.23720103    1.7155107 
 1727000    4.0141929    1.2697981    2.7443948  -0.22625708   0.84658017     1.006036   0.73631622   -1.2298232            1  -0.22429327  -0.48096008  -0.45034255   0.25842282 0.0092670217 0.0072828485 -0.022782267  -0.37617718   -0.3678999   0.71444529        0.075    1.3841402        1e-10 1.5876562e-11    6.2985928     2.446079    31.520363 -0.0018252451  -0.21536451 -0.0061350263   0.20953898  -0.55449119  -0.01968265 
 1728000    4.0170482    1.2709533    2.7460949  -0.23254218   0.84735033   0.99919621   0.74235263   -1.2298232            1   -0.1772071   -0.4094658  -0.44762143   0.32546592  0.017931144 -0.068731115  0.013348277  -0.33033618  -0.31983739     0.707965        0.075    1.3763023        1e-10 1.5732555e-11    6.3562465    2.4442747    31.520363 -0.0022879058  -0.19305106  0.009251827   0.20287994   0.83055315    1.2846094 
 1729000    4.0491484    1.2895246    2.7596238  -0.22470284   0.85973187    1.0079571    0.7572409   -1.2298232            1  -0.10180279  -0.35252465  -0.38028192   0.42739819 -0.0034127348  0.067483892 -0.011034798  -0.25800295  -0.24568365   0.71235022        0.075    1.3683559        1e-10 1.5830005e-11    6.3171174    2.4455967    31.520363 -0.0019301494  -0.20606631 -0.0094120458   0.19425612   -0.2452674  -0.20075084 
 1730000    4.0343302    1.2813266    2.7530036  -0.22851995   0.85426625    1.0104175   0.74628985   -1.2298232            1  -0.12260014  -0.38888874  -0.38261853   0.40370684  0.024983293  0.068455341 -0.0039743925  -0.27654137  -0.26683221   0.72023927        0.075    1.3773857        1e-10 1.6005317e-11    6.2479237    2.4584668    31.520363 0.0049865477  -0.21258281 0.0055595062   0.20572452   0.56248822    2.8433651 
 1731000    4.0430885    1.2878718    2.7552167  -0.22810248   0.85862997    1.0094159   0.75436683   -1.2298232            1  -0.26238005  -0.49677819  -0.51392712   0.22356515 0.0093915773  0.026257641  0.071493105  -0.41798736  -0.40646915    0.7167431        0.075    1.3726249        1e-10 1.5927624e-11    6.2784002    2.4460873    31.520363 0.0067184691  -0.20705389 -0.0060378697   0.23247546   0.67550352  -0.35582249 
 1732000    4.0468694    1.2879488    2.7589206  -0.22685038   0.85868131    1.0200121   0.74712103   -1.2298232            1  -0.15074066  -0.40233691  -0.40957189   0.35968682 0.0013458142  0.057071474 0.00042445659  -0.30485334  -0.29634231   0.71839102        0.075    1.3853056        1e-10 1.5964245e-11    6.2639981    2.4557265    31.520363 0.0079101893  -0.20566163 0.0055675181   0.19316063  -0.77440154   0.95323965 
 1733000    4.0565461    1.2859781     2.770568  -0.22299404   0.85736744    1.0103674   0.75157205   -1.2298232            1 -0.087724682  -0.36070841  -0.36944601   0.46698037 -0.0013168485  0.049131657  0.050954354   -0.2427555   -0.2319496   0.71150855        0.075    1.3783396        1e-10 1.5811301e-11    6.3245902    2.4548228    31.520363 -0.0020440855  -0.18586316 0.0033091803    0.2055417    -1.852364    1.3024645 
 1734000    4.0531579    1.2937815    2.7593764  -0.23509999   0.86256999    1.0095439   0.76094517   -1.2298232            1  -0.21430922  -0.47651484  -0.49309139   0.32667856 -0.0061890318  0.082900389 -0.0050985852  -0.37127348  -0.35841659   0.71017555        0.075    1.3769189        1e-10 1.5781679e-11    6.3364615     2.451485    31.520363 0.0061432713  -0.20037665 -0.0030410635   0.18308297  -0.32017685    2.5685714 
 1735000    4.0405453    1.2895422    2.7510031  -0.23617272   0.85974361    1.0233952   0.74657744   -1.2298232            1  -0.23939591  -0.51062718  -0.46636714   0.25880658 -0.0073217929  0.061514483 -0.0059614629  -0.39339646  -0.38548048   0.71622561        0.075    1.3766822        1e-10 1.5916125e-11    6.2829365    2.4419523    31.520363 0.0022281038  -0.19279976 -0.008301599   0.21660738   0.94323399    1.8922972 
 1736000    4.0631827    1.2945278    2.7686549  -0.22223267   0.86306756    1.0156876   0.75753562   -1.2298232            1   -0.2471437  -0.45415352  -0.50452188   0.21724429 0.0049893029 -0.020351385  0.019199415  -0.40340465  -0.39212806   0.71855505        0.075    1.3649638        1e-10 1.596789e-11    6.2625682    2.4509567    31.520363 -0.0049190027  -0.20277804 0.0023967258   0.20744752  -0.33642161    1.6884715 
 1737000    4.0471392    1.2945947    2.7525445  -0.22343578   0.86311216    1.0195397   0.75494538   -1.2298232            1 -0.065747336  -0.32175768   -0.3288023   0.45331797  0.020994609  0.068554936  0.018325097  -0.22147398  -0.21128156   0.71221989        0.075    1.3682654        1e-10 1.5827109e-11    6.3182734     2.442671    31.520363 0.0035705858   -0.2154078 -0.0074431097   0.19997894 0.0089607538    3.3665548 
 1738000    4.0350556    1.2779362    2.7571193  -0.21656846   0.85200589    1.0083937   0.74386558   -1.2298232            1  -0.10020521  -0.38616555  -0.33083216   0.41638206 -0.0019768402 -0.055763238 -0.0017978023  -0.25364637  -0.24414839   0.70885562        0.075    1.3605501        1e-10 1.5752347e-11    6.3482603    2.4448489    31.520363 -0.0067475018   -0.1986694 -0.0083362333   0.21813694   0.95744816    1.5226361 
 1739000    4.0623182    1.2931277    2.7691906  -0.21723274   0.86213409    1.0104453   0.75958385   -1.2298232            1  -0.16060177  -0.42567985  -0.39145509   0.33532964 0.0040769707  0.026345608  0.013547707  -0.31728522   -0.3048378   0.70982688        0.075    1.3906062        1e-10 1.5773931e-11    6.3395739     2.437595    31.520363 0.0044071919  -0.17912068 0.0063130109   0.18939551 -0.032960927     1.010915 
 1740000    4.0443581    1.2915557    2.7528024  -0.22452104   0.86108604     1.030856   0.74368597   -1.2298232            1  -0.22341181  -0.47223437  -0.45789911   0.25989805 -0.00043579253  0.056910612   0.03958914  -0.37681592  -0.37056138   0.71802688        0.075     1.395425        1e-10 1.5956153e-11    6.2671748    2.4393564    31.520363 0.0042608703  -0.20767783 -0.0041584425   0.20155534  -0.56446721    1.1960019 
 1741000    4.0496514    1.2778842    2.7717673  -0.22356128   0.85197119    1.0154132   0.73894928   -1.2298232            1  -0.12010205  -0.37766591   -0.3754908   0.39285054 -0.024928993 -0.023350413 0.0052632076   -0.2725291  -0.26504723   0.71204198        0.075    1.3980229        1e-10 1.5823155e-11    6.3198521    2.4567269    31.520363 0.00065958248  -0.19526277 0.0055026483   0.18943404  -0.83528076    0.5287017 
 1742000    4.0579052    1.2935676    2.7643376  -0.22184076   0.86242738    1.0190469   0.75412768   -1.2298232            1 -0.068061487  -0.33572746  -0.36074233   0.49228533 -0.00093743098  0.048221874  0.057094952  -0.22361946  -0.21352537   0.71023234        0.075     1.419728        1e-10 1.5782941e-11    6.3359548    2.4614667    31.520363 -0.0033114671  -0.24111403 0.0071236633   0.22101482  -0.34750238    1.0300508 
 1743000    4.0244848    1.2731793    2.7513055    -0.233019   0.84883441    1.0137836    0.7347692   -1.2298232            1  -0.16036764  -0.40147809  -0.45185144   0.37222662 -0.015992637  0.041403595 0.0075309796  -0.31193244   -0.3050802   0.71819026        0.075    1.4284255        1e-10 1.5959784e-11    6.2657491    2.4528707    31.520363 -0.016842726  -0.19771179 0.0012716842   0.18938014  -0.13583747 -0.023031826 
 1744000    4.0507259    1.2867547    2.7639713  -0.22949244   0.85788517    1.0295575   0.73916833   -1.2298232            1  -0.14790648  -0.41857465  -0.38812288    0.3629781 -0.011069157 -0.030490288  0.095696182  -0.30037871  -0.29487069   0.71969731        0.075    1.4102179        1e-10 1.5993274e-11    6.2526286    2.4507116    31.520363 -0.0054061364  -0.21256624 -0.0087778336   0.19468637   0.27068286    2.4171875 
 1745000    4.0367393     1.285529    2.7512103  -0.23401793   0.85706803    1.0145959   0.74813923   -1.2298232            1  -0.22507344  -0.48216965  -0.47747391   0.28442323  -0.01606585 -0.018183201 -0.025788533  -0.37939615  -0.36990196   0.71006561        0.075    1.4127128        1e-10 1.5779236e-11    6.3374425    2.4460027    31.520363 0.0077719066  -0.19119786 -0.0024893916   0.18969858     1.191318    2.1207148 
 1746000    4.0245424    1.2745275     2.750015  -0.23369743   0.84973325    1.0061061   0.74160304   -1.2298232            1  -0.19647842  -0.42248723    -0.473616   0.30666798 -0.0033858913 -0.077344436  -0.06690643  -0.34945287  -0.34009506   0.70835006        0.075    1.4255519        1e-10 1.5741113e-11    6.3527911    2.4430931    31.520363 -0.0033095204  -0.18469007 0.0012221323   0.17078093   0.81867871   0.46441118 
 1747000    4.0137906    1.2863802    2.7274104  -0.23805954    0.8576355    1.0197928   0.74550317   -1.2298232            1 -0.088207449  -0.34199894  -0.35098816   0.42836475 -0.0039338842  -0.03654744    0.0429689   -0.2419864   -0.2337778   0.72128046        0.075    1.4342293        1e-10 1.6028455e-11    6.2389046    2.4470413    31.520363 0.0056732637  -0.21285471 -0.0021536818   0.22601374   0.49600593    2.1075147 
 1748000     4.015567    1.2698307    2.7457363  -0.22857031   0.84660189   0.99646091   0.74297904   -1.2298232            1  -0.21154064  -0.47306967  -0.47458367   0.31303143 -0.0090795407  0.030544061 -0.046668359  -0.36479892  -0.35378047   0.71986761        0.075     1.410062        1e-10 1.5997058e-11    6.2511495    2.4457538    31.520363 -0.0012932103  -0.21869947 0.0087758831   0.21059687   -1.6171086    1.7649672 
 1749000    4.0492475    1.2984782    2.7507693  -0.23479892   0.86570134    1.0012253   0.77200036   -1.2298232            1  -0.12910749  -0.38238303  -0.39851779   0.39357837 -0.0018257744  0.058216245 -0.036431243  -0.28835216  -0.27202741   0.71258724        0.075    1.3988793        1e-10 1.5835272e-11    6.3150162    2.4512407    31.520363 0.0026868966  -0.22011722 -0.011819237   0.17703548  -0.57586134    2.3563651 
 1750000    4.0204987    1.2758928    2.7446059  -0.22791923   0.85064354    1.0038241   0.74472249   -1.2298232            1  -0.13985812  -0.41816993  -0.36255546   0.36115105 -0.0057761801  0.024036326 -0.0097799443  -0.29347603  -0.28314902   0.71748483        0.075    1.3916648        1e-10 1.5944107e-11    6.2719096    2.4520453    31.520363 0.0010410145  -0.20743729 -0.0077454407   0.20346884 -0.097280858    -0.235448 
 1751000    4.0342865    1.2919696    2.7423168  -0.23472983   0.86136202    1.0104289   0.75828879   -1.2298232            1  -0.19109135  -0.42954753  -0.49052814   0.34680161 -0.010519011 -0.0029298947 -0.0079074208  -0.34750766  -0.33532504   0.71875959        0.075    1.4084067        1e-10 1.5972435e-11    6.2607861    2.4485119    31.520363 -0.0051948844  -0.19014022 0.0018984254   0.21936811  -0.54698322    1.2325277 
 1752000    4.0406006    1.2758899    2.7647107  -0.22909729   0.85064156   0.99860474   0.74833105   -1.2298232            1  -0.19899649  -0.44436806   -0.4521963   0.29957491 0.00061477066 -0.052706528  0.010848193  -0.35335876  -0.34154234    0.7122754        0.075    1.3974072        1e-10 1.5828342e-11     6.317781    2.4389639    31.520363 -0.0060747432  -0.18147663 -0.0084078228   0.17640811   0.46598124   0.97305107 
 1753000    4.0287504    1.2819569    2.7467934  -0.22925918   0.85468651   0.99583152   0.75709465   -1.2298232            1  -0.22927421  -0.46914545  -0.45464066   0.23596347  0.014872456 -0.045499781 -0.036385507   -0.3854442  -0.37142421    0.7192767        0.075    1.4081679        1e-10 1.5983927e-11     6.256285    2.4543405    31.520363 0.0013132772  -0.18779309 -0.015608891   0.20438657  -0.78407988   -1.3031055 
 1754000    4.0223322    1.2862491    2.7360831  -0.23396039    0.8575481    1.0065076   0.75454876   -1.2298232            1   -0.1194358  -0.39184239  -0.36398051   0.39751549 0.0055295155 -0.028153705 0.0023873246  -0.27508064  -0.26310976    0.7181688        0.075    1.4092878        1e-10 1.5959307e-11    6.2659364    2.4436628    31.520363 0.0016953883  -0.20879859  -0.00131225   0.21338777    1.1369989   0.20378956 
 1755000    4.0217767    1.2726715    2.7491053  -0.22532341   0.84849586     1.000111   0.74365793   -1.2298232            1  -0.10363509  -0.35464057  -0.31951729   0.36325258 0.00025183619 -0.076169072 0.00019547868  -0.25703342  -0.24639596   0.71315149        0.075    1.4038082        1e-10 1.5847811e-11    6.3100198    2.4523458    31.520363 -0.0071452137  -0.20167113 -0.0055958648    0.2158589   0.33231125   0.53954453 
 1756000    4.0125916    1.2684436     2.744148  -0.23097333   0.84567712    1.0092779    0.7325447   -1.2298232            1 -0.099023502  -0.38127743  -0.36817502   0.45238194 -0.014481961  0.024334299 -0.010498841  -0.25012944   -0.2430929   0.70917186        0.075    1.4189861        1e-10 1.5759375e-11    6.3454294    2.4573339    31.520363 -0.0085410977  -0.20418168 -0.0035681303   0.19622804     1.339337    1.3812671 
 1757000    4.0308187    1.2769121    2.7539066  -0.21590751   0.85132311    1.0015666   0.74743463   -1.2298232            1  -0.10155627  -0.36425699  -0.39662895   0.45621714 -0.014448286 -0.049751413  0.049257101  -0.25573363  -0.24452492   0.71672455        0.075    1.4008846        1e-10 1.5927212e-11    6.2785626    2.4441382    31.520363 0.0019673325  -0.20722512 0.0044214737   0.20421588   0.88242348    1.7216903 
 1758000    4.0426708    1.2973998     2.745271  -0.24018983   0.86498232    1.0234153   0.75542794   -1.2298232            1  -0.16998469  -0.42224444  -0.43302272   0.34531308 -0.00075967846  -0.10811921  0.001529233  -0.32581088  -0.31607214   0.72230212        0.075     1.395524        1e-10 1.6051158e-11      6.23008    2.4435852    31.520363 0.0059768523  -0.17655551 0.0016297753   0.20597609   0.11126789    1.4778844 
 1759000    4.0235509    1.2744336    2.7491173  -0.22457809   0.84967066    1.0121748   0.73729752   -1.2298232            1 -0.080819762  -0.35903546  -0.33631581   0.45289199  0.003328805 -0.086626935 -0.025299598  -0.23290609  -0.22530268   0.71795021        0.075     1.401547        1e-10 1.5954449e-11    6.2678441    2.4488985    31.520363  0.007047489  -0.19840377  0.001113361   0.17721246  0.089816078   0.61887078 
 1760000     4.014762    1.2659256    2.7488364  -0.22770843   0.84399831    1.0035894    0.7336405   -1.2298232            1   -0.1885185  -0.44313839  -0.41754008   0.29512298 -0.016205991 -0.041339688 -0.0061044336  -0.33985048  -0.33177589   0.71138038        0.075    1.4011924        1e-10 1.5808453e-11    6.3257297    2.4440905    31.520363 -0.0021301947  -0.18049804 -0.00029287609   0.20757566  -0.49572328  -0.42371647 
 1761000    4.0340349    1.2815187    2.7525162  -0.22846956   0.85439432     0.998517   0.75474183   -1.2298232            1  -0.19657414  -0.43458876  -0.44779312   0.29265947  0.015843919  0.026459823  0.011463963   -0.3522588  -0.33910747      0.71759        0.075     1.395368        1e-10 1.5946444e-11    6.2709904    2.4551806    31.520363 0.0036502618  -0.19805281  0.007473188   0.19116291   0.38947004    1.7389278 
 1762000    4.0636463    1.2993246    2.7643218  -0.23084972   0.86626559    1.0171824   0.76191264   -1.2298232            1  -0.14501347  -0.43778743  -0.37248038   0.37522741 -0.0068191065  0.033440281 -0.0044434576  -0.30217729  -0.29021119   0.72078605        0.075    1.3869372        1e-10 1.6017468e-11    6.2431841    2.4547859    31.520363 -0.00035981519  -0.20610029 -0.0068486135   0.20813158   0.34581077   0.83744976 
 1763000    4.0541228    1.2900344    2.7640883  -0.22766385   0.86007182    1.0057304     0.759357   -1.2298232            1  -0.18611016  -0.39954747  -0.43361877   0.27483574 -0.0012548424 -0.093845076  0.014488363  -0.34274682  -0.32967318   0.70912216        0.075    1.3827966        1e-10 1.575827e-11    6.3458741    2.4449803    31.520363 0.0045473915  -0.21291928 -0.0026596913   0.20530597   0.75812558    1.5149867 
 1764000    4.0216869    1.2701186    2.7515684  -0.23065086   0.84679382    1.0047981   0.73753436   -1.2298232            1  -0.24956403  -0.46747167  -0.47523214   0.19401171 -0.0048827536 -0.046270753  0.011519108  -0.40169922  -0.39299396    0.7099911        0.075    1.3743742        1e-10 1.577758e-11    6.3381076    2.4556541    31.520363 0.0039554277  -0.20283497 -0.00066878661   0.20209014  -0.80666736  -0.41218998 
 1765000    4.0435552    1.2873981    2.7561571  -0.22630973   0.85831417    1.0139942   0.75066422   -1.2298232            1  -0.18166484  -0.42162705  -0.42327083   0.29990336 0.0036532065 -0.0065821566 -0.025971887  -0.33650839  -0.32640747    0.7184162        0.075    1.3712682        1e-10 1.5964804e-11    6.2637786    2.4494288    31.520363 0.0091409835  -0.18340117 0.0014994888   0.20395156   0.96826049     1.870948 
 1766000    4.0396571    1.2856397    2.7540174   -0.2273789   0.85714181    1.0217524    0.7433117   -1.2298232            1  -0.13358126  -0.41318916  -0.35646067   0.36890607 -0.0097836259 -0.068090632 -0.050640175  -0.28690816  -0.27943133   0.71705217        0.075    1.3779993        1e-10 1.5934493e-11     6.275694    2.4342175    31.520363 -0.0080534732  -0.20650645 0.00096553647   0.23743533   0.84526468    1.4032854 
 1767000    4.0359037     1.297762    2.7381417  -0.22768452   0.86522383    1.0301447   0.75117979   -1.2298232            1  -0.13278452  -0.41107956  -0.36541805   0.37814406 -0.0030127378  0.096051347 -0.027012768  -0.28773442  -0.27983255   0.71131365        0.075    1.3941387        1e-10 1.580697e-11    6.3263231    2.4557272    31.520363 -0.0073358301  -0.21206722 0.0053743465    0.1962102   -1.0035404    1.4890186 
 1768000    4.0397478    1.2823619    2.7573859   -0.2224892   0.85495652    1.0096614   0.74798105   -1.2298232            1  -0.18756223  -0.44942512  -0.44893051   0.33566894 -0.016052368 0.0030892581 -0.074742567  -0.34185231  -0.33168638   0.70458296        0.075    1.4033259        1e-10 1.5657399e-11    6.3867568    2.4443314    31.520363 0.0079785827  -0.20719184 0.0036105915   0.20759945   -1.3082243   0.22747126 
 1769000    4.0511409    1.2868669     2.764274   -0.2255005   0.85796002    1.0058591   0.75569458   -1.2298232            1  -0.17853035  -0.45194154  -0.41709553   0.33344601  -0.01283137   0.04766105 -0.037437866  -0.33441154  -0.32211173   0.70844739        0.075    1.4091306        1e-10 1.5743275e-11    6.3519184     2.447113    31.520363 0.0038779767  -0.20034632 -0.0061416361   0.21280546   -1.6456249    0.9666983 
 1770000    4.0559227    1.2935699    2.7623528  -0.22677118   0.86242891    1.0168238   0.75566874   -1.2298232            1  -0.19830617  -0.47673756  -0.43203286    0.3138519  -0.03125647   0.04534649  0.056852415  -0.35418203   -0.3434527   0.71817482        0.075    1.4018577        1e-10 1.5959441e-11    6.2658838    2.4557169    31.520363 0.0047527633  -0.18987502 -0.0020676993   0.19983942   -1.5381983    1.4980528 
 1771000    4.0423719    1.2909051    2.7514668  -0.22519132   0.86065228    1.0159093   0.75329533   -1.2298232            1  -0.17092865  -0.42183669  -0.42091629   0.32996703 -0.0077401465  0.052222895 -0.033244028  -0.32631493  -0.31594464   0.71474338        0.075    1.3964021        1e-10 1.5883186e-11     6.295966    2.4419352    31.520363 -0.0044392257  -0.19738239 -0.0063570296   0.20732871  0.029961303   0.91116497 
 1772000     4.048912    1.2990074    2.7499046  -0.22532694   0.86605415    1.0221251   0.75813446   -1.2298232            1  -0.15089563  -0.39434327  -0.42469775   0.36635413  -0.01494641 -0.022753824  0.024852648  -0.30728011   -0.2967989   0.70875526        0.075     1.402795        1e-10 1.5750117e-11    6.3491592    2.4544633    31.520363 0.0056303317  -0.20999609 0.0014440935   0.19400064   0.27683071   0.46750176 
 1773000    4.0366576    1.2902153    2.7464423   -0.2279117   0.86019239    1.0201827   0.74955987   -1.2298232            1  -0.22537009  -0.45188594   -0.4441761   0.21995178 0.0016085726  0.018513591  -0.02628367  -0.37998584  -0.37099609   0.71280853        0.075    1.4269481        1e-10 1.584019e-11    6.3130558    2.4543797    31.520363 -0.0040048278  -0.19201481 -0.0022079717   0.18452569   -0.1418436    2.3283351 
 1774000    4.0414314    1.2790874     2.762344  -0.23424454   0.85277335    1.0086027   0.74501954   -1.2298232            1  -0.21434679  -0.50380205  -0.44449694   0.30525863  0.015572689 -0.070261482 0.0034413638  -0.36802598  -0.35831981   0.71619296        0.075    1.4340217        1e-10 1.5915399e-11    6.2832229    2.4404004    31.520363 -0.010382739  -0.19165413 0.0024718848   0.20140884    0.6867676    2.1189804 
 1775000    4.0352235    1.2863887    2.7488348  -0.23008383   0.85764117    1.0092514    0.7528075   -1.2298232            1  -0.24243621  -0.44643412  -0.49670668   0.21583217 -0.014611523 -0.044271331 -0.061983793  -0.39772186  -0.38650183   0.71540046        0.075    1.4273716        1e-10 1.5897788e-11    6.2901833    2.4415175    31.520363 -0.0050627641   -0.1959788  0.011769692   0.19995406    0.4265076   0.44685008 
 1776000    4.0359877    1.2818787     2.754109  -0.22891076   0.85463432    1.0139351   0.74447842   -1.2298232            1  -0.16418326  -0.41944334  -0.39729785   0.32419142  0.017481979 -0.012392078  -0.02434059  -0.31775083  -0.30891745   0.71200302        0.075     1.416903        1e-10 1.5822289e-11    6.3201979     2.438666    31.520363 -0.0021046621  -0.20817963 -0.010135621    0.1925289  -0.30875879   0.48964771 
 1777000    4.0184636    1.2765514    2.7419123    -0.230307   0.85108258    1.0021917   0.74659508   -1.2298232            1  -0.23166642  -0.45403919  -0.47011495   0.22915488 -0.0037909307   0.10065023  0.031567615  -0.38567061   -0.3747243   0.71216988        0.075     1.414302        1e-10 1.5825997e-11    6.3187171    2.4514663    31.520363 -0.017154933  -0.19111465 -0.0093986651   0.21541683  -0.11080174   0.93843984 
 1778000    4.0417555    1.2895695     2.752186   -0.2295703   0.85976185    1.0083535    0.7570173   -1.2298232            1  -0.15892396  -0.42022898    -0.403434   0.34689109 0.0083579035 -0.00099785798  0.040173471    -0.315078  -0.30286141   0.71358931        0.075    1.4101173        1e-10 1.585754e-11    6.3061483    2.4455049    31.520363 0.0012177942  -0.18916211 -0.0026469144   0.21189427  -0.23136999    1.6472132 
 1779000    4.0384843    1.2859319    2.7525524  -0.23252291   0.85733664   0.99677845   0.76092366   -1.2298232            1   -0.1428517  -0.39831254  -0.38839296   0.35815039 -0.0067037314  0.026356061  0.001652071  -0.29981152  -0.28513687   0.71630642        0.075     1.402818        1e-10 1.591792e-11    6.2822276    2.4429576    31.520363 0.0057764175  -0.20983447 0.0070539318   0.17851034  -0.65229015   0.45337407 
 1780000     4.045474    1.2907918    2.7546822  -0.22775808   0.86057672    1.0052997   0.76050939   -1.2298232            1  -0.10096213  -0.35978406  -0.38874582   0.44564349  0.010198662 -0.015904457 -0.058253544   -0.2578365  -0.24446367   0.71312054        0.075    1.4190172        1e-10 1.5847123e-11    6.3102936    2.4420399    31.520363 -0.0002077442  -0.19144165 0.0018813277    0.2082749  -0.43864827    1.5626525 
 1781000    4.0502571    1.2948474    2.7554096  -0.22283046   0.86328066    1.0063393   0.76436536   -1.2298232            1  -0.20667891  -0.45137486  -0.45896588     0.290304 -0.0067944935  0.093109771 -0.066917896  -0.36434867  -0.35032884   0.71123765        0.075    1.4196716        1e-10 1.5805281e-11    6.3269991    2.4517833    31.520363 0.00073419142  -0.21552516 -0.0017997372   0.19115715   -1.2533937    1.3253419 
 1782000    4.0394021    1.2846716    2.7547306   -0.2239519   0.85649637     1.012007   0.74896351   -1.2298232            1 -0.075933198  -0.36654057  -0.34371991   0.48246089  0.016086566  0.084703283  0.017252788  -0.23042593  -0.22039216   0.71703143        0.075     1.437276        1e-10 1.5934032e-11    6.2758755    2.4410405    31.520363 -0.00027876133  -0.21327051 -0.0013806604    0.2129126   -1.5376009   0.46919744 
 1783000    4.0274742    1.2809245    2.7465497  -0.23020924   0.85399819    1.0115315   0.74506538   -1.2298232            1   -0.0926971  -0.38872615  -0.35478362   0.46541847  0.010249395  0.055199575  0.059703236  -0.24638575  -0.23708818   0.72026199        0.075    1.4475131        1e-10 1.6005822e-11    6.2477266     2.447682    31.520363 -0.0069203479  -0.18246216 -0.013879153   0.20260575  -0.82112522    2.4290502 
 1784000    4.0153339    1.2905164    2.7248176  -0.23571175   0.86039311    1.0168174   0.75222835   -1.2298232            1    -0.199381  -0.41021403  -0.47224521   0.28431625 0.0050909811  0.094518345  -0.03746984  -0.35454719  -0.34452662   0.71506829        0.075     1.429991        1e-10 1.5890407e-11    6.2931052    2.4475198    31.520363 0.00033568231  -0.19006477 -0.011568459   0.22008852 0.0093996403   0.77831094 
 1785000    4.0224108    1.2762718     2.746139  -0.22514862   0.85089619    1.0005354   0.74742584   -1.2298232            1  -0.25402702  -0.47089277  -0.51340168    0.2222134 0.0012675519  0.049363881 0.0013832584  -0.40820257  -0.39684847   0.71142402        0.075    1.4184383        1e-10 1.5809423e-11    6.3253417    2.4499802    31.520363 -0.00094086947  -0.20171811 0.00017753864   0.19262491   0.27336259 -0.018217119 
 1786000    4.0140215    1.2659727    2.7480488  -0.23312969   0.84402978   0.99935106   0.73662673   -1.2298232            1    -0.151644  -0.42460495  -0.41370901   0.38338195 -0.0085265637  0.027893254 0.0082737539  -0.30359196  -0.29429639   0.71513649        0.075    1.4235286        1e-10 1.5891922e-11    6.2925051    2.4450875    31.520363 -0.0066010158  -0.19912162 0.0013129219   0.21558523    1.6315825    1.5723829 
 1787000     4.025907    1.2730625    2.7528445  -0.23024455   0.84875653    0.9965626   0.74655456   -1.2298232            1   -0.1819608  -0.42034637  -0.47323494    0.3476989 0.0010213845   -0.1187414 6.6725933e-05  -0.33595663  -0.32421516   0.71865982        0.075     1.420014        1e-10 1.5970218e-11    6.2616552     2.453918    31.520363 -0.010505979  -0.19830929  -0.01242532   0.22439301    1.0554132   0.15477179 
 1788000    4.0349475    1.2849946     2.749953  -0.23030037    0.8567117   0.99597081   0.76042509   -1.2298232            1  -0.15910208  -0.36703516  -0.42348747    0.3132164 -0.011059295 -0.075239957  0.027773308  -0.31595906  -0.30127196   0.71049286        0.075    1.4238147        1e-10 1.578873e-11    6.3336316    2.4365048    31.520363 -0.0038425364  -0.19719458 0.0042488952   0.18246804   0.85447252    2.5108351 
 1789000    4.0180009    1.2771728     2.740828  -0.22776682   0.85149693    1.0080717   0.74322717   -1.2298232            1  -0.19319553  -0.44504173  -0.44461426   0.31006941 0.0071266701 -0.015222936  0.023024038    -0.346505  -0.33709275   0.71352025        0.075    1.4386537        1e-10 1.5856006e-11    6.3067586     2.446794    31.520363 0.0025288551  -0.18615332 0.0090720158   0.19002061  -0.74892315 -0.084003161 
 1790000    4.0280174    1.2818213    2.7461961  -0.23130091   0.85459607    1.0130229   0.74504498   -1.2298232            1 -0.099266721    -0.381276  -0.36457257   0.44804841 0.0026235408 -0.078728977 -0.0034504248  -0.25295116   -0.2438707   0.71997482        0.075    1.4244682        1e-10 1.599944e-11    6.2502186    2.4543578    31.520363 0.0095486185   -0.1829645 0.0085038168   0.20841048    1.0658358    2.8405021 
 1791000    4.0216458    1.2911182    2.7305277  -0.24227731   0.86079433    1.0095541   0.75793357   -1.2298232            1  -0.14267635  -0.39029443   -0.4249763   0.38724168 -0.0029782332 -0.041421615  0.038004754  -0.29901939  -0.28678517   0.72326555        0.075    1.4287237        1e-10 1.6072568e-11    6.2217812    2.4556787    31.520363 -0.0031275043  -0.21017174 -0.0052334428   0.20697816    2.3114153    1.9092872 
 1792000    4.0249866    1.2805731    2.7444135  -0.22726738   0.85376388    1.0065371   0.74812507   -1.2298232            1  -0.14338259  -0.37241639  -0.41481193   0.35708054 -0.012618437 -0.023201503  0.036229588  -0.29770238  -0.28706075   0.71581957        0.075    1.4191074        1e-10 1.5907102e-11    6.2865003     2.451706    31.520363 -0.0026669132  -0.20016675 -0.0017648002   0.21188309  -0.16598727    2.0699166 
 1793000    4.0331347    1.2989573    2.7341775  -0.23276666   0.86602071    1.0110452   0.76574525   -1.2298232            1 -0.088352545  -0.37501537  -0.35463405   0.46459179  0.019245366  0.037220038  0.082902011  -0.24630694  -0.23267422   0.71692665        0.075    1.4390746        1e-10 1.5931703e-11    6.2767927    2.4381612    31.520363 -0.0043478273  -0.18183673 -0.00046212631   0.20921167  0.038264307    2.7856721 
 1794000    4.0209663    1.2641518    2.7568144  -0.22467283   0.84281577     1.000757   0.73359959   -1.2298232            1 -0.084317933  -0.33631982  -0.35234947   0.43571549 0.0041920267 -0.017365819 -0.013693772  -0.23564147  -0.22717101   0.71706325        0.075    1.4247213        1e-10 1.5934739e-11     6.275597    2.4481309    31.520363 -0.0043997887  -0.19744076 -0.0028495677   0.20266524   -1.6632533    1.8491808 
 1795000     4.029821    1.2799229    2.7498981  -0.23365331   0.85333042    1.0020124   0.75052272   -1.2298232            1  -0.19106986  -0.40044045   -0.4716517   0.29888256 0.0095364592 -0.016359795 -0.0051279739  -0.34588423  -0.33410215    0.7160509        0.075    1.4355216        1e-10 1.5912242e-11    6.2844695    2.4410254    31.520363 -0.0034805617   -0.1984941  0.008922317    0.2162239  -0.38526542    2.9159179 
 1796000    4.0265715    1.2788558    2.7477157  -0.23253898   0.85261899    1.0039144   0.74800271   -1.2298232            1   -0.2108208  -0.44265743  -0.42518059   0.23537562 0.0068139137  -0.13371316 -0.035298056  -0.36511535  -0.35412459   0.71691492        0.075     1.438463        1e-10 1.5931443e-11    6.2768954    2.4447112    31.520363 -0.0085750704   -0.1683678 -0.0041245499   0.19657027  -0.18542343   0.38816785 
 1797000    4.0257736     1.283928    2.7418457  -0.22500629   0.85600062    1.0008639   0.75583582   -1.2298232            1  -0.17351098  -0.43342581  -0.39191032    0.3048032 -0.010875799  -0.21327867  0.034178619   -0.3294213  -0.31637931   0.71544149        0.075    1.4324285        1e-10  1.58987e-11    6.2898225    2.4490307    31.520363 -0.0030409714  -0.18663037 0.0088030429   0.20473312  0.087208712  -0.55947942 
 1798000    4.0541492    1.3000369    2.7541124  -0.22832125   0.86674047    1.0141149   0.76483893   -1.2298232            1 -0.031171732  -0.30500736  -0.29070271   0.50219487 -0.00059852743  -0.10402218 0.0085986518  -0.18893918  -0.17593159    0.7135353        0.075    1.4239617        1e-10 1.585634e-11    6.3066256    2.4418328    31.520363 -0.00077291575  -0.18110825 0.0054603787   0.20081115   0.72747287    3.7002527 
 1799000    4.0396211    1.2811424    2.7584787  -0.23442601   0.85414344     1.001901   0.75197556   -1.2298232            1  -0.16021404  -0.39654982  -0.41120036   0.32710807  0.012835648 -0.097496007  0.011737619  -0.31532808  -0.30323042   0.71765287        0.075    1.4214493        1e-10 1.5947842e-11     6.270441    2.4491411    31.520363 -0.0012445209  -0.19415357 0.00080785286   0.19423068   0.38557922  -0.73434794 
 1800000    4.0001706    1.2757174    2.7244532  -0.23029547    0.8505266   0.99980743   0.74730424   -1.2298232            1   -0.2189988  -0.48437931  -0.45850331   0.28588621 -0.014594006  0.022401349 0.0032027073  -0.37314927  -0.36171634   0.71234633        0.075     1.410599        1e-10 1.5829919e-11    6.3171519    2.4339456    31.520363 -0.010438062  -0.20267432 0.0026165197   0.20059396   -1.3129453    1.9303323 
 1801000      4.03507    1.2812145    2.7538556  -0.23865485   0.85419149    1.0000184   0.75335964   -1.2298232            1  -0.17918472  -0.41467335  -0.44007395   0.31719315 -0.0044495195 -0.056685818 0.0014041776  -0.33458427  -0.32193237   0.71690548        0.075     1.422152        1e-10 1.5931233e-11    6.2769781     2.449343    31.520363 -0.0012124244  -0.19739753 -0.00045017389   0.18502634 -0.0066513564   0.49128436 
 1802000    4.0273432    1.2822487    2.7450945  -0.23603802   0.85488105    1.0116049   0.74650842   -1.2298232            1   -0.2275795  -0.47448568  -0.44417729   0.23592447 -0.012294652 -0.080556809  0.043571779  -0.38156581  -0.37198107   0.72025149        0.075    1.4267349        1e-10 1.6005589e-11    6.2478177    2.4458243    31.520363  -0.01128267  -0.19219378 -0.011440213   0.22421353   0.89473134    1.6041561 
 1803000     4.036192    1.2996366    2.7365554   -0.2373277   0.86647364    1.0076758   0.76884337   -1.2298232            1  -0.19831541  -0.44737673   -0.4080745     0.260505 -0.0024704772 -0.085647635  0.029354929  -0.35690887  -0.34215612   0.71748818        0.075    1.4166531        1e-10 1.5944182e-11    6.2718804     2.443724    31.520363 -0.0023592867  -0.18173876 0.0072311559   0.16331767    0.7634544    1.4241745 
 1804000     4.033961    1.2796993    2.7542617  -0.22705229   0.85318131    1.0070619   0.74677611   -1.2298232            1   -0.1108155  -0.38899466  -0.38998003    0.4465282 0.00094957053  -0.01624897  0.012305638  -0.26485703  -0.25456858   0.70915088        0.075    1.4316208        1e-10 1.5758908e-11    6.3456172    2.4442558    31.520363 0.0026033192  -0.17376412  0.001733889   0.19739915  -0.26472844    1.8384245 
 1805000    4.0204232    1.2837172     2.736706  -0.22823409   0.85586009      1.00867   0.75019612   -1.2298232            1   -0.2340709  -0.45829631  -0.50354442   0.25962803 0.0026335138  0.037938378 -0.029338761  -0.38881789  -0.37805352   0.71610457        0.075    1.4154535        1e-10 1.5913435e-11    6.2839984    2.4555261    31.520363 -0.0036142696  -0.20118131 0.0025015371   0.22363049    0.5085505  -0.56790239 
 1806000    4.0284286    1.2849716     2.743457  -0.23566436    0.8566964    1.0248749   0.74039725   -1.2298232            1  -0.22842874  -0.46297414  -0.46627794   0.24396585 -0.005681249  0.059977255  0.001861104  -0.38115447  -0.37472453   0.71984744        0.075    1.4119073        1e-10 1.599661e-11    6.2513246    2.4431163    31.520363 -0.010039554  -0.19410365 -0.0058576473   0.19648013   -1.3595285    1.5218783 
 1807000    4.0244547     1.277518    2.7469367  -0.23677345   0.85172702    1.0151246   0.73873584   -1.2298232            1  -0.25612642  -0.51426024  -0.49242378   0.23830476 -0.0026496605  0.074386084 -0.015835276  -0.40850944  -0.40103041   0.72017795        0.075    1.4296148        1e-10 1.6003955e-11    6.2484557     2.441061    31.520363 -0.011190486  -0.20809966 -0.007901065   0.19915862   0.28913879   -0.3252069 
 1808000    4.0317454    1.2900102    2.7417352  -0.23101899   0.86005568     1.005281   0.75964069   -1.2298232            1  -0.22575446  -0.46552874  -0.47258392    0.2608493 0.0076317121  0.050284082  0.011131171  -0.38244963  -0.36925332   0.71835467        0.075    1.4212483        1e-10 1.5963437e-11    6.2643151    2.4674088    31.520363  0.011156896  -0.19501089 0.0022397951   0.21088341   -1.2282979    1.0996349 
 1809000    4.0118755    1.2732228    2.7386527  -0.22973148   0.84886344   0.98709672   0.75328596   -1.2298232            1  -0.16378203  -0.41567349  -0.43324906   0.35757646 -0.0023589563 -0.00046426979  0.067076823  -0.31916638  -0.30468518   0.71512614        0.075    1.4273957        1e-10 1.5891692e-11    6.2925961    2.4522909    31.520363 -0.0074589559  -0.19169969    0.0024957   0.21166938  -0.13594781    1.4923105 
 1810000    4.0032074    1.2743451    2.7288622  -0.23386285   0.84961169    1.0052466   0.74199213   -1.2298232            1  -0.12628767   -0.3387931   -0.4051273   0.36505738 -0.012575114  0.047819125 -0.041688708  -0.27934238  -0.26978163   0.71708628        0.075    1.4228945        1e-10 1.5935251e-11    6.2753955    2.4516409    31.520363 -0.0071332153  -0.18809876 0.0097044404   0.17496975  -0.37235108    2.3275426 
 1811000    4.0131467    1.2704491    2.7426976   -0.2285882   0.84701418    1.0032764   0.73896029   -1.2298232            1  -0.18847275  -0.42634161  -0.44770675    0.3086301 -0.0040886399 -0.0094111822 -0.042425161  -0.34090207  -0.33168546   0.71825619        0.075    1.4282552        1e-10 1.5961249e-11     6.265174    2.4376306    31.520363  0.001011868  -0.19932791 -0.012363735   0.18932826   0.48004924    2.0562128 
 1812000    4.0207549    1.2838497    2.7369051  -0.23398134   0.85594844   0.99614414   0.75901363   -1.2298232            1  -0.12103855  -0.36830511    -0.389607   0.39479647 -0.010264165 -0.054882991 -0.0088303232  -0.27760437  -0.26323317    0.7188189        0.075    1.4229809        1e-10 1.5973753e-11    6.2602695    2.4415349    31.520363 0.0094591661  -0.21376573 -0.0032753214   0.18797555   0.30248065    3.6548566 
 1813000    4.0100782    1.2742908    2.7357874  -0.23386265   0.84957548    1.0007817   0.74502066   -1.2298232            1  -0.18754943  -0.44121613  -0.41869207   0.29725992 -0.0029309351 -0.040005057 -0.038860906  -0.34122885  -0.33040603   0.71328686        0.075    1.4152397        1e-10 1.5850819e-11    6.3088223    2.4415504    31.520363 0.0021622801  -0.17344508 -0.00028543332   0.18065841   0.69314437  -0.60477652 
 1814000    4.0058123    1.2666653    2.7391471  -0.23320541   0.84449147   0.99873135   0.73783682   -1.2298232            1  -0.10464785  -0.33431575  -0.38863737   0.40900957   0.00138118 0.0057114245  0.023146922  -0.25684542  -0.24721178   0.71465191        0.075    1.4271483        1e-10 1.5881153e-11    6.2967718    2.4417626    31.520363 0.0055039248  -0.19500372 -0.014386608    0.1788977   0.98441027  -0.24237046 
 1815000     4.010697    1.2753279    2.7353691  -0.23443284   0.85026689    1.0039016   0.74403161   -1.2298232            1 -0.055202637  -0.33555495  -0.33742364   0.50737068 -0.0027374786 -0.029154786 -0.0023290477  -0.20867804  -0.19850459   0.71969883        0.075    1.4374561        1e-10 1.5993307e-11    6.2526154    2.4509292    31.520363 -0.0081542256  -0.22051286 -0.0066893695   0.20831815  0.053204308    2.3510081 
 1816000    4.0016155    1.2762443    2.7253712  -0.23236144   0.85087789    1.0052053   0.74416327   -1.2298232            1  -0.10534714  -0.36692568  -0.36081721   0.41170146  -0.01857808  0.072035795 -0.0068585265  -0.25884971   -0.2488352   0.71500556        0.075    1.4442971        1e-10 1.5889012e-11    6.2936574    2.4431673    31.520363 -0.0035491945  -0.20826143 0.0036755717   0.19841392  -0.70288229  -0.22847025 
 1817000    4.0290137    1.2879699    2.7410438  -0.23044685   0.85869539   0.99919651   0.76154948   -1.2298232            1  -0.12290852  -0.40264934  -0.37432811   0.40825189 -0.0078981952  0.081796473  0.005782899  -0.27999743  -0.26553885   0.71644142        0.075    1.4512042        1e-10 1.592092e-11    6.2810439    2.4495237    31.520363 -0.0069526375  -0.19158205 -0.0041516325   0.18740189   -1.7140921    1.7225956 
 1818000    4.0040497    1.2713304    2.7327193  -0.23377467   0.84760177    1.0019056   0.74090318   -1.2298232            1  -0.19993925  -0.46871396  -0.41274578     0.281642 0.0098611712  0.073056246  0.026289676  -0.35276934  -0.34295628   0.71550136        0.075    1.4576119        1e-10 1.590003e-11    6.2892962    2.4359479    31.520363 -0.0066011663  -0.19543999 -0.0022568918   0.20096473   -1.5384096    1.2560447 
 1819000    4.0031299    1.2579351    2.7451948  -0.23287007   0.83867105   0.99037164   0.73377306   -1.2298232            1  -0.13342494  -0.39199244  -0.38752645   0.37924409 -0.0064370827  0.038907829  0.018154582  -0.28478426  -0.27479556   0.71763766        0.075    1.4549395        1e-10 1.5947504e-11    6.2705739    2.4411306    31.520363 0.0055396735  -0.18729446 0.0023827403   0.21246337   -1.1552747    1.8607431 
 1820000    3.9957456    1.2771831    2.7185624  -0.23460465   0.85150379   0.99805203   0.75017252   -1.2298232            1  -0.23756495  -0.48462874  -0.48143234   0.25336623 -0.0044607759 -0.026005122 0.0032579061  -0.39230707  -0.38003191   0.71719489        0.075    1.4463381        1e-10 1.5937664e-11    6.2744452    2.4365386    31.520363 -0.0028849547  -0.19662888 -0.003316573   0.19807538 0.0031375123  -0.00182087 
 1821000    4.0123832    1.2715372     2.740846   -0.2306556   0.84773964   0.98764881   0.75100232   -1.2298232            1  -0.16334159  -0.42773757  -0.42018356   0.35789635 0.0049509785 -0.079193958 -0.0035175662  -0.31825489  -0.30432355   0.72581187        0.075    1.4483477        1e-10 1.6129153e-11    6.1999537    2.4735105    31.520363 0.0043842285  -0.23447653 -0.00069712924   0.21745412   0.41966235    2.0539858 
 1822000     4.011256    1.2885477    2.7227083  -0.23320842   0.85908057    1.0113695    0.7537774   -1.2298232            1   -0.1973565  -0.46442045  -0.44907651   0.32142747 0.0071522288 -0.076618735 -0.016755833  -0.35284222  -0.34172446   0.72095206        0.075    1.4489038        1e-10 1.6021157e-11    6.2417465    2.4433028    31.520363 0.0023126571  -0.20539503 0.00074913465   0.22643307 -0.026321691    2.6016776 
 1823000    4.0300236    1.2961967    2.7338269  -0.23695196   0.86418021    1.0136645   0.76081834   -1.2298232            1 -0.093679233  -0.34119325  -0.39698346   0.45713901 0.0096934716  0.039921317  0.028369158  -0.25061733   -0.2383748   0.71607943        0.075    1.4436968        1e-10 1.5912876e-11    6.2842191    2.4481593    31.520363 -0.011453585  -0.20730988 -0.0070684976   0.19207992  -0.69170672    2.4412838 
 1824000    4.0122478     1.271293    2.7409548  -0.22770102   0.84757685    1.0163234   0.73088367   -1.2298232            1  -0.22114924   -0.4713898  -0.47337833   0.28132041  -0.01085775  -0.02356879  -0.02511062  -0.37191255  -0.36622435    0.7136996        0.075    1.4415605        1e-10 1.5859991e-11    6.3051737    2.4375238    31.520363 0.0079375815  -0.21245025 0.0059983718   0.21834235  -0.95303183  -0.30747807 
 1825000    4.0275127    1.2816988    2.7458139  -0.23610676   0.85451439    0.9984801   0.75497055   -1.2298232            1  -0.17537037  -0.42672062  -0.39414744   0.29475695 -0.0095696741  0.028608945 -0.0032467533  -0.33110221  -0.31789843   0.72002222        0.075    1.4115802        1e-10 1.6000494e-11    6.2498071    2.4472659    31.520363 -0.0019006801  -0.19289083 -0.010049541   0.19846285    1.3129564  -0.50241472 
 1826000    4.0204606    1.2732135     2.747247  -0.22957948   0.84885723    1.0138146   0.73478639   -1.2298232            1  -0.03239063  -0.31014034  -0.30687324    0.5198417  0.017308197 -0.023839036  0.019288979  -0.18395897  -0.17710762   0.71711595        0.075    1.4108649        1e-10 1.593591e-11    6.2751358     2.438296    31.520363 4.3194344e-05  -0.22248562  0.001085951   0.19705271     2.063922    1.8409812 
 1827000    4.0359227    1.2873044    2.7486183  -0.22592228   0.85825171    1.0020647   0.75881388   -1.2298232            1  -0.14756704  -0.41227417  -0.36445267   0.33402572 0.0050376907  0.082029581  0.030226172  -0.30409166   -0.2906068   0.71570264        0.075    1.4150427        1e-10 1.5904503e-11    6.2875274    2.4569077    31.520363 -0.0097374644  -0.19370593 0.00069223058   0.18686777  -0.46474947   0.61539411 
 1828000    4.0230006    1.2729172    2.7500833  -0.22783706    0.8486597    1.0100865   0.73703201   -1.2298232            1  -0.17163609  -0.42082309  -0.40910002   0.31501484 -0.00067911701  0.019880317 -0.048250554  -0.32366765  -0.31582092   0.71582147        0.075    1.4199588        1e-10 1.5907144e-11    6.2864837    2.4550535    31.520363 -0.005685227  -0.20915943 0.0078514899   0.19665554  -0.69998917    1.0339566 
 1829000    4.0161865     1.281402    2.7347845  -0.23001139    0.8543165    1.0059349   0.74947686   -1.2298232            1  -0.15273282  -0.41702283  -0.39979131   0.35861568 -0.023189212 -0.027889811 -0.022584213  -0.30733145  -0.29632503   0.71692253        0.075    1.4307043        1e-10 1.5931612e-11    6.2768289    2.4391514    31.520363 -0.0010542134  -0.21593844   0.01078303   0.19225288   -2.0484564  0.087685617 
 1830000    4.0209471    1.2827928    2.7381543  -0.23352692   0.85524378    1.0095975   0.74851135   -1.2298232            1  -0.28023244  -0.50749453  -0.48903958   0.15583677 -0.0084524752 -0.049128962 -0.024171246  -0.43463191  -0.42434747    0.7205138        0.075    1.4131627        1e-10 1.6011418e-11    6.2455431    2.4522967    31.520363 -0.0089805704  -0.19156352 -0.0048491985   0.21251774   0.17775074    -1.701076 
 1831000    4.0308578     1.284675    2.7461828  -0.22930559   0.85649863    1.0097544   0.75052614   -1.2298232            1  -0.19915593  -0.45271267  -0.44058396   0.29582884 0.0064234659 -0.019986403  -0.02153489    -0.353971  -0.34329335   0.71731025        0.075    1.3985207        1e-10 1.5940228e-11    6.2734361    2.4531414    31.520363 -0.0048908843  -0.20811395  0.021954569   0.21650105   0.63822794  -0.13426334 
 1832000    4.0004278     1.286662    2.7137658  -0.23590938   0.85782338    1.0120524   0.75117755   -1.2298232            1 -0.035234528  -0.33549114  -0.31960898   0.54939654 0.0027753967  0.064124856 0.0014207743  -0.19018396  -0.17969997   0.71599753        0.075    1.4034761        1e-10 1.5911056e-11    6.2849379    2.4436111    31.520363 -0.00063672558  -0.20787113 0.0086837763     0.198783   -0.4572926    1.7232388 
 1833000    3.9999123    1.2667495    2.7331629  -0.22920032   0.84454761   0.99671177   0.73932938   -1.2298232            1  -0.13227347  -0.37093101  -0.43832581   0.41243642  0.014022667 -0.023062118 -0.061150406  -0.28477892  -0.27454911   0.71362942        0.075    1.4054196        1e-10 1.5858432e-11    6.3057938    2.4415739    31.520363 -0.0078409501  -0.20866483 -0.0057955258   0.20833187  -0.40519292  -0.62306027 
 1834000    4.0131798     1.270684    2.7424958  -0.23272629   0.84717077    1.0056015   0.73761624   -1.2298232            1  -0.17529365  -0.43814063  -0.41360912   0.32586879 -0.0098807712  0.034348892 -0.020568505  -0.32744572  -0.31883826   0.71643905        0.075    1.3990665        1e-10 1.5920868e-11    6.2810647     2.441072    31.520363 0.0049729434  -0.18777304 -0.012052862   0.19284311  -0.50674374   0.21542269 
 1835000    4.0431167    1.2827394    2.7603773   -0.2278056   0.85520819   0.99521722   0.75840248   -1.2298232            1 -0.041176847  -0.30131113  -0.30598381    0.4837644  0.010036021 -0.014223321 -0.044406562  -0.19761661  -0.18323915   0.71677711        0.075    1.3631732        1e-10 1.592838e-11    6.2781022    2.4511103    31.520363 -0.0051010154  -0.18617303 -0.0067493155   0.21031204  -0.21342958    2.6015365 
 1836000    4.0461711    1.2857288    2.7604422  -0.23109684   0.85720124    1.0115512   0.75047163   -1.2298232            1  -0.22537125  -0.45160996  -0.45931077   0.23480698 0.00044250224 -0.075452115 -0.0025227954  -0.38017508  -0.36976515   0.71440738        0.075    1.3777452        1e-10 1.587572e-11    6.2989271    2.4466972    31.520363 0.0016602947  -0.18232043 -0.0033543791   0.18909871  -0.49390157   0.27845199 
 1837000    4.0360599    1.2861163    2.7499436  -0.23355451   0.85745957    1.0068953   0.75413068   -1.2298232            1  -0.25548433    -0.486431   -0.5272465    0.2472245 0.0075154476  0.050356386  0.021912161  -0.41104293  -0.39921363   0.71480227        0.075    1.3854785        1e-10 1.5884495e-11    6.2954473    2.4480811    31.520363 -0.0064190367  -0.18960474 -0.0026902571   0.21026025   0.43017948   0.34705614 
 1838000    4.0369244    1.2919255    2.7449989  -0.22310315   0.86133262    1.0253611   0.74790578   -1.2298232            1  -0.14854249  -0.42118544  -0.37873804   0.35429599  0.014372096  0.042943469 -0.048785739  -0.30281705  -0.29490768   0.71549967        0.075    1.3639355        1e-10 1.5899993e-11    6.2893111    2.4406754    31.520363 -0.0017925263   -0.2061886 -0.0013908797   0.19314466   0.41923025 -0.030890653 
 1839000    4.0210331    1.2844029    2.7366302  -0.23325717   0.85631722    1.0082372    0.7512691   -1.2298232            1  -0.20703051  -0.45325976  -0.47132999   0.30349822 -0.0098195453  0.037785775 -0.026970506  -0.36199883  -0.35095135   0.71635075        0.075     1.370351        1e-10 1.5918906e-11    6.2818389     2.441829    31.520363 0.0020440291  -0.21558586 -0.0020697677   0.19592167  -0.56603702   0.41967497 
 1840000     4.034079    1.2820544    2.7520246  -0.23085474   0.85475149    1.0018953   0.75300836   -1.2298232            1 -0.085458574  -0.37348252  -0.35051958   0.46762638  0.010249608 -0.063977553  0.036824941  -0.24078566  -0.22847415   0.71159469        0.075      1.37413        1e-10 1.5813215e-11    6.3238246    2.4492098    31.520363 -0.016078952  -0.20055655 -0.0026400687   0.19495683  -0.71628222   0.60503126 
 1841000    4.0309891    1.2813675    2.7496216   -0.2262224   0.85429354    1.0055774   0.74968542   -1.2298232            1  -0.19780546  -0.46316952  -0.45278013   0.32253328 -0.021120236 -0.024749852 -0.026769401   -0.3524471  -0.34134663   0.71310417        0.075    1.3750377        1e-10 1.5846759e-11    6.3104385       2.4706    31.520363 0.0031985152  -0.20996375 0.0059771759   0.23221716  -0.63076692    0.3610908 
 1842000    4.0213966    1.2789184    2.7424782  -0.22263103   0.85266069    1.0147879    0.7405487   -1.2298232            1  -0.17838867  -0.41190082  -0.44719706   0.32393185 -0.0065508625   0.10102087  0.032022718  -0.33114564  -0.32324459   0.72063248        0.075    1.3848351        1e-10 1.6014055e-11    6.2445145    2.4508794    31.520363 -4.613157e-05  -0.21704405 -0.006212145   0.17635312   -1.3506417   -2.6519196 
 1843000    4.0390083    1.2754218    2.7635865  -0.22708595   0.85032953   0.99016174   0.75364571   -1.2298232            1  -0.13530145  -0.39089171  -0.43126365   0.41625102 0.0056433426   0.09161024  0.054575968  -0.29076001  -0.27664211   0.71884649        0.075    1.3675003        1e-10 1.5974366e-11    6.2600292    2.4428071    31.520363 -0.0016360539  -0.19963822 0.0075751702   0.22872346 -0.033210771    0.8296642 
 1844000    4.0227399    1.2787878    2.7439521   -0.2214694   0.85257365   0.99418535   0.75465862   -1.2298232            1  -0.10052987  -0.40614257  -0.35268546   0.45723843 0.0083234004  0.093823568 -0.024984362  -0.25619736  -0.24244488   0.71585524        0.075    1.3589196        1e-10 1.5907894e-11    6.2861871    2.4512797    31.520363 -0.0046066544  -0.19131807 0.0058329799   0.22146345  -0.63588525   0.23841839 
 1845000    4.0078597    1.2707006    2.7371591  -0.23265272   0.84718187    1.0039588   0.73877183   -1.2298232            1  -0.22731653   -0.4745879  -0.46247788   0.25511619 -0.00046864471  0.087583161 -0.0074068314  -0.37970697  -0.37062665   0.71847353        0.075    1.3704567        1e-10 1.5966079e-11    6.2632787    2.4455264    31.520363  0.012849861  -0.20054549 0.0062958345   0.20725421  -0.95417497 -0.073659803 
 1846000    4.0204176    1.2852596     2.735158  -0.23118326   0.85688841    1.0044286    0.7548712   -1.2298232            1  -0.12458816  -0.38082447  -0.36716594   0.37422594 -0.0065049045 -0.049709011 -0.008361002   -0.2802995  -0.26796534   0.72060435        0.075    1.3649679        1e-10 1.601343e-11    6.2447583    2.4415051    31.520363 -0.00034893208  -0.21160416 -0.0024323517   0.21518869   0.21892761   0.90252331 
 1847000     4.021242    1.2728479    2.7483941  -0.23349527   0.84861347   0.99475268   0.74756497   -1.2298232            1  -0.18361458  -0.40631806  -0.45929978   0.31477412 -0.00066459867  0.048792012 -0.0041295262  -0.33781883  -0.32561057   0.71608989        0.075    1.3782536        1e-10 1.5913109e-11    6.2841273    2.4439722    31.520363 -0.0024432649  -0.20942214 -0.013735804   0.19604909   0.41298778   -1.8489393 
 1848000    4.0069678    1.2736341    2.7333337  -0.23514174   0.84913766    1.0044734   0.74172514   -1.2298232            1  -0.10581434  -0.38301799  -0.36308132   0.42865629 0.0010122836  0.018061092 4.2391175e-05  -0.25881398  -0.24919792   0.71757662        0.075    1.3670275        1e-10 1.5946147e-11    6.2711073    2.4592305    31.520363 0.0055273282  -0.18548913  0.007227538   0.21721556   0.11085275   0.84533252 
 1849000    4.0200934    1.2815754     2.738518  -0.24077242   0.85443215   0.99141568   0.75972004   -1.2298232            1  -0.17984462  -0.46067996  -0.44220574   0.36335185   0.00234761 -0.048508031  0.017182799  -0.33655616  -0.32136427   0.72385194        0.075    1.3834455        1e-10 1.6085599e-11     6.216741    2.4639556    31.520363 0.0036514699  -0.21086291 -0.013706619   0.23507906  -0.71435185   0.87213071 
 1850000    4.0294254    1.2853281    2.7440973  -0.22477471   0.85693411    1.0076057   0.75274992   -1.2298232            1 -0.080161549   -0.3426815  -0.35037502   0.45257187 0.0021838196 -0.028576846  0.031290008  -0.23543533  -0.22399226   0.71482953        0.075     1.372067        1e-10 1.5885101e-11    6.2952072    2.4397184    31.520363 0.0049358977  -0.20218256 0.0080128221    0.2101825   -1.1311654    3.7873573 
 1851000    4.0410781    1.2830803    2.7579979  -0.22685495   0.85543543   0.98924408   0.76292049   -1.2298232            1  -0.22458747  -0.45617908  -0.47390868   0.25632535 0.0038797925 -0.069725655  0.052027665  -0.38195919  -0.36579714   0.71418865        0.075    1.3524119        1e-10 1.5870859e-11    6.3008562    2.4714037    31.520363 -0.011198503  -0.19269764 0.0084658128   0.20734098   0.65744159   0.23722953 
 1852000    4.0401375     1.288192    2.7519455  -0.23675129   0.85884342    1.0016712   0.76008744   -1.2298232            1  -0.13925345  -0.37443537  -0.40742135   0.36409638 -0.018538177 -0.067634483 -0.047810319  -0.29604078  -0.28223703   0.72029995        0.075    1.3704506        1e-10 1.6006666e-11    6.2473973    2.4514556    31.520363  0.011211625  -0.21810885 -0.0070961249   0.21035193    1.1347445  -0.65077275 
 1853000    4.0362432    1.2735287    2.7627144  -0.22115338   0.84906738   0.99830625   0.74587392   -1.2298232            1  -0.15712461  -0.41330876  -0.40211024   0.34404516 -0.030774866  0.011438851 -0.062950511  -0.31098004  -0.29962786   0.71521944        0.075    1.3706223        1e-10 1.5893765e-11    6.2917753    2.4387556    31.520363 -0.0042778948  -0.19837244 -0.015263731    0.2196058   0.37766216    1.6472133 
 1854000    4.0283516    1.2762264    2.7521252  -0.22950666   0.85086594    1.0069801    0.7429149   -1.2298232            1  -0.16186739  -0.39748116  -0.38554665   0.29742563 0.0047532228 -0.052491364  0.012670697  -0.31511245  -0.30560879   0.70988905        0.075    1.3785496        1e-10 1.5775312e-11    6.3390188    2.4489361    31.520363 0.0023705788  -0.19657753 -0.015825137   0.18760442   0.47855168   0.65006263 
 1855000    4.0352797    1.2951872    2.7400925  -0.23062542   0.86350719    1.0050686   0.76562804   -1.2298232            1  -0.23407107  -0.48563186  -0.44599343   0.22941207  0.011636901  0.026933468  0.010806449  -0.39200129  -0.37753961   0.70862596        0.075    1.3782094        1e-10 1.5747244e-11    6.3503177    2.4471727    31.520363 -0.006240435  -0.17865427 -0.0060959724   0.19918312   0.11792731   0.26468181 
 1856000    4.0278143    1.2871054    2.7407089  -0.22568802   0.85811902    1.0032584   0.75776335   -1.2298232            1  -0.20641702   -0.4519332   -0.4360175   0.26869964 -0.012999924  0.018259857  0.003341054  -0.36272494  -0.34962716   0.71206673        0.075    1.3814627        1e-10 1.5823705e-11    6.3196325    2.4344499    31.520363 -0.0010043532  -0.20893277    0.0129651   0.21720632    1.6739387   0.60698957 
 1857000    4.0135427    1.2699259    2.7436168  -0.22302786   0.84666539    1.0052102    0.7370319   -1.2298232            1  -0.13270227  -0.40272826  -0.37976431   0.38438577 0.0044286344 -0.048946363 -0.043820258  -0.28473381  -0.27619102   0.71713833        0.075    1.3836658        1e-10 1.5936407e-11      6.27494    2.4565886    31.520363 -0.010054854  -0.20305655 0.0075283717   0.21853029    1.1716518    1.6264896 
 1858000    4.0217446    1.2719168    2.7498278  -0.22472109   0.84799272    1.0088991   0.73672507   -1.2298232            1  -0.33401866  -0.54126055   -0.5620173   0.10122188 0.0097510737 0.0029510312   0.03358566   -0.4859869  -0.47803399   0.71159233        0.075    1.3926075        1e-10 1.5813163e-11    6.3238456    2.4474516    31.520363 -0.0059820954   -0.2085616 -0.0021025416   0.17339957   -1.0784392   -2.2699462 
 1859000    4.0368597     1.279981    2.7568787  -0.22898957   0.85336915    1.0111432   0.74426964   -1.2298232            1   -0.2041417  -0.44213114  -0.45696652   0.28667254 0.0068695346  0.026373128 -0.016086277  -0.35766621  -0.34847737   0.71103382        0.075    1.4090234        1e-10 1.5800752e-11    6.3288129    2.4432676    31.520363  0.006130512  -0.17821005 0.00096263583   0.20957113   -1.5213381   0.22149021 
 1860000    4.0236708    1.2904388     2.733232  -0.22758233   0.86034141    1.0100858   0.75679919   -1.2298232            1  -0.17646822  -0.42979878  -0.37860796   0.27900207 0.0021573333  0.028773004 -0.030311675  -0.33257727  -0.32065295    0.7199634        0.075    1.3986446        1e-10 1.5999187e-11    6.2503177    2.4555238    31.520363 0.0051971566  -0.20062096 -0.00042209582   0.21488503   0.34662578    1.1244941 
 1861000    4.0259774    1.2780296    2.7479479   -0.2283337   0.85206813    1.0044803     0.746679   -1.2298232            1  -0.14516656  -0.37154955  -0.42385156   0.35990142 -0.004456545   0.10997227  0.022989501  -0.29918806  -0.28855113   0.72293626        0.075    1.3908699        1e-10 1.606525e-11    6.2246152    2.4570259    31.520363 -0.0088321275  -0.19604851 -0.0011233899    0.2122202   -1.0753136   0.56216144 
 1862000    4.0287959     1.276984    2.7518119  -0.23489936   0.85137104   0.99226265   0.75395421   -1.2298232            1 -0.085657658  -0.35577534  -0.35226823    0.4510706 -0.020506831  0.014466109 -0.002479928  -0.24117985  -0.22729821   0.71313073        0.075    1.4099799        1e-10 1.584735e-11    6.3102035    2.4420363    31.520363 -0.0066456969  -0.19431154 0.0011841322   0.19076354  -0.72046945   -1.5280501 
 1863000    4.0245844    1.2836681    2.7409163  -0.22978228   0.85582736   0.99700172   0.75821529   -1.2298232            1  -0.19875333  -0.45271045  -0.44419692    0.3006474  0.001713406  0.015633705 -0.027920278  -0.35515448  -0.34107036   0.71395656        0.075    1.4194088        1e-10 1.5865701e-11    6.3029044    2.4495722    31.520363 -0.0074888478  -0.18679308  0.002237585   0.19577094   0.61068356    1.4843849 
 1864000    4.0144417    1.2777437    2.7366981  -0.23386359    0.8518775    1.0017637   0.74823635   -1.2298232            1  -0.17578486  -0.46742602  -0.39986359   0.33993503 -0.004101868 -0.015336448  0.005555025   -0.3301276  -0.31878164   0.72367759        0.075    1.4217351        1e-10 1.6081724e-11    6.2182387    2.4726111    31.520363 -0.0068921585   -0.1906784 0.0038369078   0.21317036   0.59902059  -0.62613754 
 1865000    4.0277695    1.2886984    2.7390711  -0.22478529   0.85918108    1.0025043   0.76008227   -1.2298232            1   -0.2074743  -0.47108351  -0.42768095   0.27634157  0.011426353 -0.025834814 -0.0090418711  -0.36426056  -0.35057681    0.7206228        0.075    1.4023468        1e-10 1.601384e-11    6.2445985    2.4413419    31.520363 0.0052047748  -0.21413808 -0.0037888284   0.17953149  -0.70387022   -0.2817307 
 1866000     4.028498    1.2768136    2.7516844  -0.23447705   0.85125744   0.99052882   0.75496181   -1.2298232            1  -0.11165886  -0.38487736  -0.37009334   0.41999412 -0.00061665057 -0.063502396  0.025559037   -0.2673889  -0.25305192   0.71658138        0.075    1.4059061        1e-10 1.5924031e-11    6.2798171    2.4501772    31.520363 -0.0079709332   -0.1932394  0.003476425   0.18135185     1.306764    4.5224351 
 1867000    4.0110749    1.2699238     2.741151  -0.22945468   0.84666399   0.99143287   0.74656358   -1.2298232            1  -0.18066294  -0.42525511  -0.44791385   0.33118014 0.0035978334 0.00053960133 -0.0097728468  -0.33466063  -0.32218505   0.71423379        0.075    1.4212175        1e-10 1.5871862e-11     6.300458    2.4556382    31.520363 -0.0048188583  -0.19582831 -0.0013432377   0.19440945   0.70054195    1.4236515 
 1868000    4.0053334    1.2777685    2.7275649  -0.23144802   0.85189406    1.0078969   0.74402016   -1.2298232            1 0.00076123218   -0.3085753  -0.28808561    0.5989446  0.021886967 -0.011353169 -0.024498419  -0.15271181  -0.14311103   0.72028712        0.075    1.3982433        1e-10 1.600638e-11    6.2475086    2.4448393    31.520363 0.0038202836  -0.19875855 0.0012969951   0.19529751   0.34178051    2.8833958 
 1869000    4.0259396    1.2789791    2.7469605  -0.23323473   0.85270118   0.99329912    0.7554877   -1.2298232            1  -0.12919432  -0.39007416  -0.36732874   0.36981995 -0.0044439273  0.082809855  -0.01244303  -0.28503283  -0.27098282   0.72151091        0.075    1.4060865        1e-10 1.6033576e-11    6.2369119    2.4425487    31.520363 -0.0085583876  -0.19966959 -0.0024222605   0.19668849  -0.47109492   -1.1108166 
 1870000    4.0297803    1.2847152    2.7450651  -0.23161776   0.85652548    1.0002279   0.75716401   -1.2298232            1  -0.15540618  -0.43022877  -0.40990546   0.37391569 -0.001388185  0.026972367  0.044302401  -0.31159048  -0.29818374   0.71783021        0.075    1.4030799        1e-10 1.5951782e-11    6.2688919     2.449093    31.520363 0.00061004535  -0.22185768 -0.005182668   0.15844585    1.0550299   0.46016462 
 1871000    4.0106787    1.2795903    2.7310883  -0.22487578   0.85310868   0.99721757   0.75346562   -1.2298232            1  -0.17195223  -0.41503399  -0.42492244   0.32409974 -0.0091554263 -0.0096385651  -0.01698341  -0.32737364  -0.31430008    0.7132298        0.075    1.3940889        1e-10 1.5849551e-11    6.3093269    2.4407687    31.520363 0.00028797222  -0.19521369 0.0050102638   0.20185305   0.35709163    1.7021288 
 1872000    3.9894897    1.2541506    2.7353391    -0.236783   0.83614791   0.99027039    0.7295737   -1.2298232            1  -0.14209065  -0.39812857  -0.37651893   0.34837555  0.006577705  0.031440598 -0.0088818911  -0.29258375  -0.28344682   0.71722537        0.075    1.4229757        1e-10 1.5938342e-11    6.2741785    2.4500572    31.520363 -0.0029265144  -0.18786078 -0.0084337777   0.19859643    -0.401363   -0.6813623 
 1873000    3.9992653    1.2656103     2.733655  -0.23461857   0.84378814   0.99796824   0.73717478   -1.2298232            1   -0.1338764   -0.4174166  -0.38232736   0.39811478 0.0025979175 -0.016837823 0.0072365061  -0.28593741   -0.2763314   0.72154659        0.075    1.4229174        1e-10 1.6034369e-11    6.2366035    2.4479058    31.520363  0.002426906  -0.21320719 -0.0086079328   0.20155578  -0.13417942   0.28218265 
 1874000    4.0134084    1.2766433    2.7367651  -0.23153636   0.85114389   0.99135698   0.75419658   -1.2298232            1  -0.10718476  -0.36181721  -0.38428592   0.42454885  0.009225818  0.047912088  0.061191597  -0.26275695  -0.24869603   0.72382722        0.075    1.3975586        1e-10 1.6085049e-11    6.2169533     2.452608    31.520363 -0.0050009046  -0.19049556 0.00054377255   0.19770579    1.3890254   0.59314004 
 1875000    3.9934886    1.2607387    2.7327499  -0.22928284   0.84054022   0.99123379   0.73633927   -1.2298232            1  -0.11363306   -0.3811805  -0.36085468     0.401136 -0.0030928996  0.060727278 0.0059516467  -0.26552172  -0.25512675   0.71282905        0.075    1.4054433        1e-10 1.5840646e-11     6.312874    2.4382182    31.520363 -0.011071114  -0.20874631 0.0010482471   0.20203156   -1.2731217    1.9149144 
 1876000    4.0015476    1.2615635    2.7399842  -0.23007946   0.84109008   0.98129316   0.74414872   -1.2298232            1  -0.16747436  -0.42622523  -0.39976915   0.32357129 0.00042917914 -0.0037243746 -0.025019564  -0.32097393  -0.30754908   0.72001166        0.075    1.4227358        1e-10 1.6000259e-11    6.2498988    2.4676657    31.520363 -0.0057271775  -0.19380061 0.0035208916   0.18439417  -0.87165851   0.43706523 
 1877000    3.9961174    1.2660363    2.7300811  -0.22667441   0.84407215    1.0014922   0.73521671   -1.2298232            1  -0.17990995  -0.41950276   -0.4355209    0.3152938 0.0029546439  0.016937095 -0.046482711  -0.33156706  -0.32286799   0.72481357        0.075    1.4097394        1e-10 1.6106968e-11     6.208493    2.4520787    31.520363 -0.0053107808  -0.21708253 -0.0026431764   0.23353392  -0.37007016   0.96981846 
 1878000     4.027119    1.2645545    2.7625646  -0.23202419    0.8430842   0.99577254    0.7375031   -1.2298232            1 -0.096985036  -0.35731858  -0.37772138   0.44408485 0.0076985555 0.0055801401  -0.03347637  -0.24911377  -0.23912661    0.7170443        0.075    1.4080202        1e-10 1.5934318e-11    6.2757629    2.4401635    31.520363 0.00064150733  -0.21896368 0.0024628193   0.16088684    1.9763911    2.6773307 
 1879000    4.0116869    1.2710187    2.7406682  -0.23319731   0.84739397   0.98579178   0.75170249   -1.2298232            1  -0.24204689  -0.50879361  -0.44270812   0.22536108 -0.0068808448 -0.085135355 0.0080105625  -0.39710461  -0.38276376   0.71291726        0.075     1.415414        1e-10 1.5842606e-11     6.312093    2.4512593    31.520363 -0.0028369852  -0.16134251  0.002732878   0.19149637    1.9592634   0.26503984 
 1880000    4.0341644    1.2837491    2.7504153  -0.23680359   0.85588136   0.99638646   0.75873244   -1.2298232            1  -0.16051934  -0.41721736  -0.42905287   0.36471219 -0.0090360739 -0.058655675 0.0018585857  -0.31702717  -0.30274855   0.71358794        0.075    1.4236145        1e-10 1.585751e-11    6.3061604    2.4474527    31.520363 -0.017561519  -0.19686581 0.0040826283   0.18300833  -0.23770051   0.34440698 
 1881000    4.0267134    1.2893265    2.7373869  -0.23147589   0.85959984    1.0067633    0.7578436   -1.2298232            1  -0.14612831  -0.37372585  -0.41487128   0.35021219 -0.00046193607  0.026613952  0.041808727  -0.30245279  -0.28983877   0.72138395        0.075    1.4220562        1e-10 1.6030754e-11    6.2380096    2.4575448    31.520363 -0.0053726711  -0.19286411 -0.004755491   0.21117337   -1.3187554   0.30742078 
 1882000    4.0252253    1.2877869    2.7374385  -0.23079906   0.85857335     1.006634   0.75619616   -1.2298232            1  -0.14723324  -0.40153168  -0.42252294   0.38235489 0.0076363396  0.050315737   0.04961329   -0.3032179  -0.29092524   0.71815089        0.075    1.4377038        1e-10 1.5958909e-11    6.2660927     2.443112    31.520363 0.0024756267  -0.21012569 -0.014285248   0.18731718   0.67965627    2.1131434 
 1883000    4.0216145    1.2786119    2.7430026  -0.23078466   0.85245633   0.99744398    0.7522051   -1.2298232            1  -0.22465757  -0.48412848  -0.47614089   0.28629667 -0.0030774461  0.015835004  0.031729583  -0.37981896  -0.36703773   0.71542158        0.075    1.4435606        1e-10 1.5898257e-11    6.2899976    2.4490435    31.520363 -0.0067368587  -0.23649039 -0.007605367   0.18800742   -1.2159411   -2.1042137 
 1884000    3.9952169    1.2674715    2.7277454  -0.23028699   0.84502898    1.0063649   0.73346385   -1.2298232            1  -0.16390054  -0.43276078  -0.40566989   0.34672905 0.0028836133  0.017680294  -0.01921048  -0.31519608  -0.30755412   0.71407667        0.075    1.4272963        1e-10 1.586837e-11    6.3018443    2.4395351    31.520363 0.0083389744   -0.1806266 0.00067529866   0.20178815  0.055873785    1.7720627 
 1885000    4.0160725     1.278081    2.7379915  -0.23648348   0.85210241   0.99694407   0.75195217   -1.2298232            1  -0.17318991  -0.43438932  -0.39757661   0.31239621 -0.0047576995  0.017284337  0.010160418  -0.32829913  -0.31549871   0.72195733        0.075    1.4254452        1e-10 1.6043496e-11    6.2330554    2.4423626    31.520363 -0.001201542  -0.20584091 -0.0083690669   0.20087865   0.21518006   0.70757431 
 1886000    3.9880742    1.2701533    2.7179209  -0.23378808   0.84681698    1.0016499   0.73975215   -1.2298232            1  -0.17838808  -0.43715097   -0.4498154   0.35180212  0.017080056   0.12639404  0.032053348  -0.33098074  -0.32136862    0.7281837        0.075    1.4031266        1e-10 1.618186e-11    6.1797593    2.4565604    31.520363 -0.0012330268  -0.21070081 -0.0079047893   0.23473279   0.76797892   0.39078439 
 1887000     4.008624    1.2745086    2.7341155  -0.23722182   0.84972066   0.99168573   0.75156082   -1.2298232            1  -0.14794408   -0.4213995  -0.40579054   0.38335779 -0.0026909121  0.065544683 -0.021536745  -0.30297258  -0.28950229   0.71991989        0.075     1.426953        1e-10 1.599822e-11    6.2506955    2.4448843    31.520363 0.0019622432  -0.18507571 -0.0084123749   0.21380357   0.31944238   -0.4299793 
 1888000    3.9908801    1.2701889    2.7206912  -0.23130779   0.84684073   0.98534578   0.75107498   -1.2298232            1  -0.16880898  -0.41544781  -0.41651394   0.32553482 0.0025239661 0.0024638382  0.070202375  -0.32373726  -0.30946219   0.71149509        0.075    1.4326267        1e-10 1.5811002e-11    6.3247099    2.4426682    31.520363  -0.01921653  -0.21262508 -0.006759361   0.15406427    1.0675066   0.89351822 
 1889000    4.0252493    1.2827384    2.7425109  -0.23211383   0.85520751   0.99380234   0.75938044   -1.2298232            1 0.0029640701  -0.28103172  -0.30049614   0.59042007  0.011059248  -0.03160538   0.04422065  -0.15367742  -0.13889627   0.71931547        0.075     1.419397        1e-10 1.5984788e-11    6.2559478    2.4403181    31.520363 -0.006553539  -0.18362379 -0.0060975885   0.21618568  -0.45236243    3.7165692 
 1890000    4.0233948    1.2884123    2.7349825  -0.23095577   0.85899033    1.0030165   0.75940511   -1.2298232            1 -0.078037813  -0.37614014  -0.31714778   0.45917448 -0.0062109011 -0.039460712  0.038210569  -0.23468439  -0.22121342   0.72315201        0.075    1.4167031        1e-10 1.6070045e-11    6.2227581    2.4528719    31.520363 -0.0013284344  -0.21051657 -0.011251182   0.20946987   -1.0260176    1.6677693 
 1891000     4.028547    1.2707958    2.7577512  -0.22557429    0.8472453   0.99578415    0.7445361   -1.2298232            1  -0.10654861  -0.38523476  -0.36330307   0.42889198  0.009707746 -0.047136977  0.035869351  -0.26012808  -0.24869185   0.71646313        0.075    1.3961327        1e-10 1.5921403e-11    6.2808535    2.4517982    31.520363 -0.0078875718  -0.19113357  0.012320245   0.22147349    1.4589851   0.28991173 
 1892000    4.0142101    1.2871299    2.7270802  -0.23011541   0.85813535    1.0013303   0.75912523   -1.2298232            1  -0.15927263  -0.44793581  -0.39137215   0.36149007 0.0041724819  0.041451162 0.0042268751  -0.31586148  -0.30220755   0.70982123        0.075    1.4041318        1e-10 1.5773805e-11    6.3396244    2.4451291    31.520363 -0.00077805406  -0.20615111 -0.0037738907   0.20131473  -0.63863309   -1.2241317 
 1893000    4.0316377    1.2895576    2.7420801  -0.23106492   0.85975391    1.0041138   0.75993778   -1.2298232            1  -0.24232113  -0.48758854  -0.45476588   0.21539103  0.010172842 -0.090925596   0.04109582  -0.39907759  -0.38565338   0.71397112        0.075    1.3943451        1e-10 1.5866025e-11    6.3027759    2.4588481    31.520363 -0.0084375857  -0.17516624 0.0045716829   0.18430025   0.33323972   0.29132869 
 1894000    4.0297202    1.2844162     2.745304  -0.22241051    0.8563261    1.0025063   0.75524999   -1.2298232            1  -0.17294799  -0.42471633   -0.4068612   0.31273355 -0.016659326 -0.041239782 -0.015735746  -0.32873748  -0.31605078   0.72157778        0.075    1.3985891        1e-10 1.6035062e-11    6.2363339    2.4564564    31.520363 -0.0041492072  -0.20348103  -0.01027264   0.23051608   -2.0507645  -0.93638427 
 1895000     4.016133    1.2700564    2.7460766  -0.23576624   0.84675235    1.0086513   0.73479772   -1.2298232            1  -0.14914952  -0.42156571  -0.40400691   0.37812407 0.0050615869  0.088147377 -0.021245363   -0.3007202  -0.29312948   0.71881696        0.075    1.3856273        1e-10 1.597371e-11    6.2602863    2.4532715    31.520363 0.0010120672  -0.20826395 -0.010436958   0.22047961   0.24136399    2.3470268 
 1896000    4.0308163    1.2831774    2.7476389  -0.23517208    0.8555002    1.0012281   0.75473701   -1.2298232            1   -0.1991781  -0.44254062  -0.42598866   0.27099498 0.0070864567  0.081677417  0.005107964  -0.35486177  -0.34209843   0.71134359        0.075    1.3904783        1e-10 1.5807635e-11    6.3260568    2.4446532    31.520363 -0.0011638849  -0.22395825  0.005239985   0.20319096  -0.69620536    1.2777838 
 1897000     4.025666     1.272378    2.7532881  -0.23107445   0.84830016   0.99316665   0.74813237   -1.2298232            1  -0.16402515  -0.43315674  -0.43049495   0.37157624 0.0055846884  0.074019193  0.016026503  -0.31834644  -0.30579475   0.71141936        0.075    1.3916366        1e-10 1.5809319e-11    6.3253831    2.4363175    31.520363 0.00043285225  -0.18440081 -0.0040539177   0.19527621  -0.91057033   0.89005908 
 1898000    4.0463312    1.2899644    2.7563668  -0.23011962   0.86002509     1.006242    0.7589239   -1.2298232            1 -0.076434928  -0.34857883  -0.34206195     0.461336 -0.013768936 -0.050669666 -0.044970691  -0.23298225  -0.22007097   0.71540295        0.075    1.4000781        1e-10 1.5897843e-11    6.2901614    2.4478102    31.520363 0.0039717772  -0.18580154 -0.0058914976   0.20770305  -0.28865783    1.1680211 
 1899000    4.0124947    1.2772817     2.735213  -0.23188892   0.85156949    1.0135784   0.73953923   -1.2298232            1  -0.18507171  -0.43334017  -0.42454343   0.30266846 0.0010230755 -0.040648094  -0.02511905  -0.33762045  -0.32975499     0.717391        0.075    1.4076462        1e-10 1.5942022e-11    6.2727299     2.450481    31.520363 0.0053980364  -0.18405884 -0.0039073197   0.18703675   0.45372249  -0.96764198 
 1900000    4.0339258    1.2889245    2.7450012  -0.23457793   0.85933183    1.0097643   0.75531341   -1.2298232            1  -0.18092375  -0.43849384  -0.43766793   0.33339051 -0.0082456789 -0.072615896 -0.032025556  -0.33672632  -0.32506258   0.71192652        0.075    1.4034754        1e-10 1.5820589e-11    6.3208771    2.4395265    31.520363 0.0024290122  -0.17905417 0.0071299648   0.20614251   0.19721403   0.83665352 
 1901000    4.0201283    1.2901822    2.7299461  -0.23138257   0.86017035     1.016461   0.75209805   -1.2298232            1 -0.081526917  -0.33562044  -0.34546304   0.43650273 0.0091833998  0.045289849  0.036032532  -0.23666623  -0.22662167   0.71433149        0.075    1.4268725        1e-10 1.5874033e-11    6.2995963    2.4569809    31.520363 -0.0096072971  -0.20838572 0.0054393112   0.19705486   -0.3232106     2.129872 
 1902000    4.0484792    1.2973254    2.7511538  -0.22978322   0.86493275    1.0184804   0.75875906   -1.2298232            1   -0.2145435  -0.46471666  -0.45391667   0.27500282 -0.012846962 -0.024755548 -0.022652731  -0.37105682  -0.35992652    0.7162395        0.075    1.4227764        1e-10 1.5916433e-11    6.2828146    2.4529037    31.520363 -0.017961879  -0.20670489 -0.010380451    0.2144325   -1.4125414  -0.12984234 
 1903000    4.0181625    1.2730061    2.7451564   -0.2305756   0.84871896    1.0039931     0.741349   -1.2298232            1 -0.074251677  -0.35153129  -0.35900295    0.4877792   0.00507765  0.042136939 -0.035386431  -0.22717373   -0.2175667   0.72136368        0.075    1.4085849        1e-10 1.6030304e-11    6.2381849    2.4606781    31.520363 0.0089887095  -0.19026357 0.0012512442   0.21201459  -0.13937188    4.3276039 
 1904000    4.0207151    1.2820095    2.7387056  -0.23086558   0.85472158    1.0088087   0.74817364   -1.2298232            1 -0.083982082  -0.34323878  -0.34648563   0.43777816 0.0031098464 -0.025696339 -0.063471641  -0.23831189   -0.2279845   0.71612482        0.075    1.3752028        1e-10 1.5913885e-11    6.2838207    2.4467964    31.520363 -0.0068456371  -0.21101645 -0.012406219   0.18328121  0.094706866   0.17949061 
 1905000    4.0214721    1.2752263    2.7462458  -0.22600869   0.85019916    1.0006221   0.74618644   -1.2298232            1 -0.063331956  -0.34891596  -0.32110706   0.48002715 -0.014025784 -0.083149196 -0.013397752  -0.21725185  -0.20616578   0.71697928        0.075    1.4010498        1e-10 1.5932873e-11     6.276332    2.4419895    31.520363 0.00031730016  -0.20307895 0.0058264175   0.21369464    1.1511915    1.7261068 
 1906000    4.0217567     1.284002    2.7377547  -0.23397577   0.85604995    1.0123518   0.74796947   -1.2298232            1  -0.24581725  -0.47680138  -0.49305253   0.23240216 -0.0058760846 -0.052973162 -0.043735737  -0.40010494  -0.39032544   0.71906879        0.075    1.4029541        1e-10 1.5979306e-11    6.2580939    2.4489971    31.520363 0.0051821763  -0.16937167 -0.0086535449   0.17783026    0.9069465  -0.85829564 
 1907000    4.0351946    1.3006397    2.7345549  -0.23009567   0.86714239     1.015932   0.76426155   -1.2298232            1   -0.1944347  -0.41332053  -0.45521211   0.28522852 0.0052263821   0.04879677  0.013668454  -0.35208305  -0.33945395   0.71794126        0.075    1.3972436        1e-10 1.595425e-11    6.2679223    2.4504502    31.520363 -0.004405393  -0.21489008 9.4313357e-05   0.21567139  -0.86821087    1.9078472 
 1908000    4.0205774    1.2811239    2.7394535  -0.22644032   0.85413114    1.0089822   0.74705444   -1.2298232            1  -0.07712946  -0.35760129  -0.34208619    0.4682991 -0.0011164457  0.002844373 -0.028118241   -0.2312284  -0.22115665    0.7143034        0.075    1.3911221        1e-10 1.5873409e-11     6.299844     2.452759    31.520363 0.0093728508  -0.17980545  0.013924161   0.19027942   -0.5383355    2.7424151 
 1909000    4.0287947    1.2844089    2.7443858  -0.22953677   0.85632121    1.0030962   0.75483348   -1.2298232            1  -0.23020896  -0.49302275  -0.45015907   0.25255493 0.0019102706   0.14016712  0.020656505  -0.38591253  -0.37339596   0.71358748        0.075    1.4034926        1e-10  1.58575e-11    6.3061644    2.4441053    31.520363 -0.0077579627  -0.19574787 -0.0038688558   0.19597763  -0.99248071   -0.4712071 
 1910000    4.0043909    1.2667644    2.7376266   -0.2275086   0.84455755   0.99503415   0.74050713   -1.2298232            1  -0.18427084  -0.42511679  -0.41827339   0.29057766  -0.01104151 -0.068760253 -0.016206163  -0.33701923  -0.32630701   0.72043497        0.075    1.3893639        1e-10 1.6009666e-11    6.2462265     2.456838    31.520363 -0.0046348136     -0.20439 -0.0039796622   0.19968353  -0.27639116    3.1018755 
 1911000    4.0096972    1.2752939    2.7344033   -0.2326348   0.85024426    1.0045715   0.74352967   -1.2298232            1 -0.053781806  -0.32519186  -0.32824773   0.49209417 -0.0047384357  0.064398564 -0.050356949  -0.20715367   -0.1971794   0.72149598        0.075    1.4033853        1e-10 1.6033244e-11     6.237041    2.4408262    31.520363 -0.006441441  -0.19355127 -0.016296708    0.1987417   0.48090996    1.1401284 
 1912000     4.016813    1.2799769    2.7368361   -0.2263287    0.8533664    1.0055902   0.74810773   -1.2298232            1  -0.22202907  -0.47556442  -0.45837635   0.26785356 -0.0049108534 0.0013607522  0.017042803  -0.37634528  -0.36557207   0.71739108        0.075    1.3805688        1e-10 1.5942024e-11    6.2727292     2.450283    31.520363 -0.0095028755  -0.19146973 -0.0036711627   0.18817088    1.5082375  0.088791084 
 1913000    4.0147892    1.2863075    2.7284818  -0.23122304   0.85758702    1.0123174   0.75059416   -1.2298232            1  -0.20159727  -0.47072779  -0.40563941   0.27157539 -0.0033375911  0.048740902 0.00027739812  -0.35642637  -0.34610055   0.71223055        0.075    1.3885309        1e-10 1.5827346e-11    6.3181788    2.4444697    31.520363 0.0017761891  -0.18830601 0.0068037781   0.21274283  -0.66798424    2.3291125 
 1914000    4.0345199    1.2913444    2.7431755  -0.23656014   0.86094519    1.0006105   0.76437786   -1.2298232            1  -0.14102043  -0.39142522  -0.40509219   0.37345613   0.01588509  -0.03667305 -0.018368389  -0.29869276   -0.2838526   0.71754482        0.075     1.395669        1e-10 1.594544e-11    6.2713853    2.4545852    31.520363 -0.0014887494   -0.2076795 0.0015285375   0.16496072  -0.39833496    1.5897332 
 1915000    4.0052092    1.2766274    2.7285818  -0.23154849   0.85113325    1.0066486   0.74359661   -1.2298232            1 -0.049522516  -0.34202208  -0.30777312   0.50122766 0.0058226928 -0.014290566  0.031810107  -0.20290819  -0.19321659   0.72602265        0.075    1.3931423        1e-10 1.6133837e-11    6.1981537    2.4449704    31.520363 0.0038889402  -0.21899577 -0.00091047146   0.19409412   0.14017195     2.184979 
 1916000    4.0150134    1.2691518    2.7458615  -0.23690079   0.84614928    1.0025577   0.73799414   -1.2298232            1  -0.17282924  -0.41026882  -0.42290784   0.31468894  0.003154618   0.01860189 -0.066275764  -0.32505927  -0.31593936   0.72034598        0.075    1.3808907        1e-10 1.6007689e-11    6.2469981    2.4460617    31.520363 -0.0066993409  -0.20552807 -0.0031608009   0.20707865   0.48570306  0.092447066 
 1917000    4.0400494    1.2838259    2.7562235  -0.23215737   0.85593256    0.9989222    0.7570643   -1.2298232            1  -0.19266514  -0.45205045  -0.44886166   0.32291669 -0.0038897412 -0.041889281 -0.025915698  -0.34882887  -0.33525631   0.71252549        0.075    1.3788677        1e-10  1.58339e-11    6.3155635    2.4657951    31.520363 -0.009377157  -0.21027548  0.014507924   0.20733236   0.92284599    1.7033676 
 1918000    4.0217898    1.2782071    2.7435828  -0.22747574   0.85218645    1.0101997   0.74292132   -1.2298232            1  -0.16189538  -0.40013638  -0.41732194   0.33177216 0.00084799777  0.011265759  0.025547789  -0.31514176  -0.30609636    0.7114389        0.075    1.3860481        1e-10 1.5809753e-11    6.3252094    2.4424899    31.520363 0.0091039927  -0.19681799 0.0015478453   0.19615894   0.59931385    1.3568564 
 1919000    4.0312494    1.2962743    2.7349751  -0.22831915   0.86423196    1.0130448   0.76133481   -1.2298232            1  -0.19546878  -0.45672044  -0.42751547   0.29782958 -0.0016464165 -0.086289028  -0.02784114  -0.35251341  -0.34007588   0.72211697        0.075    1.3825361        1e-10 1.6047044e-11    6.2316774    2.4703377    31.520363 -0.0050906358  -0.18740001 -0.0072445134   0.21979023  -0.36793386  -0.82295573 
 1920000    4.0170937    1.2752906    2.7418031  -0.22787176   0.85024202    1.0020733   0.74525468   -1.2298232            1   -0.1202605  -0.37434099  -0.38722519   0.40078469 -0.012212409  -0.03530585  0.023007175  -0.27398819  -0.26330148   0.72239078        0.075    1.3937078        1e-10 1.6053129e-11    6.2293154    2.4349969    31.520363 -0.0047071697  -0.21948045 -0.0022330806   0.21844632  -0.68696349   0.68098416 
 1921000    4.0211029    1.2787377    2.7423652  -0.23134131   0.85254022    1.0137337   0.74107436   -1.2298232            1  -0.15754479  -0.41787643  -0.39743113   0.34267321 0.0099336659   0.01139579 -0.017359575  -0.31041018  -0.30225023   0.71474874        0.075    1.3813919        1e-10 1.5883305e-11    6.2959187    2.4409511    31.520363 -0.0028559921   -0.2024797 -0.0079357282   0.19983903  -0.43744681    1.4139714 
 1922000    4.0390766    1.2811255    2.7579511   -0.2256945   0.85413217    1.0052772   0.74962009   -1.2298232            1  -0.20490934  -0.42622543    -0.465844   0.27734141  -0.01186545  0.055922095 -0.014405255  -0.35953751  -0.34840766   0.70883543        0.075    1.3941546        1e-10 1.5751898e-11    6.3484412     2.437204    31.520363 -0.0091208833  -0.20346054 -0.0010279818   0.20246431   0.50794764   0.39359815 
 1923000    4.0310744    1.2936138    2.7374606  -0.23227417   0.86245821    1.0214347   0.75252748   -1.2298232            1  -0.20046433  -0.44805971  -0.43656211   0.28322882 0.0029383356 -0.082360939 -0.0017704531  -0.35569223  -0.34626905   0.71543744        0.075    1.3825752        1e-10 1.589861e-11    6.2898582    2.4411269    31.520363 0.0021346825  -0.19232687 0.0036573078   0.20445488    0.3922654   -1.2744776 
 1924000    4.0371755    1.2877656    2.7494099  -0.22368844   0.85855919    1.0104491   0.75353206   -1.2298232            1 -0.010437361  -0.30742735  -0.29917258   0.57528785 0.0026828343 -0.021457542  0.045017479  -0.16587248  -0.15467395   0.71793407        0.075    1.3954431        1e-10 1.595409e-11     6.267985    2.4388948    31.520363 0.0011253889  -0.20863832 0.0012396051   0.20636438   -1.0922884    1.5067273 
 1925000    4.0068797    1.2742581    2.7326216  -0.23247885   0.84955369    1.0005639   0.74513446   -1.2298232            1  -0.10736801  -0.39297614  -0.37730022   0.44817234 -0.016527647  0.052512231 -0.058837389   -0.2610709  -0.25019353   0.71407447        0.075     1.371392        1e-10 1.5868322e-11    6.3018637     2.441497    31.520363 -0.0012911079  -0.20831968 -0.0011313596   0.21699612  -0.56217973    2.9861852 
 1926000     4.030836    1.2883777    2.7424583  -0.22572553   0.85896728    1.0111988   0.75370382   -1.2298232            1  -0.21302791  -0.44594168  -0.45295039   0.25980834 0.0052887499 -0.0054048959 -0.039441591  -0.36849845  -0.35737151   0.71605492        0.075    1.3779576        1e-10 1.5912332e-11    6.2844341     2.440296    31.520363 0.00054264732  -0.21154156 -0.0036564494   0.19714974   0.43110793  -0.77545733 
 1927000    4.0444936    1.2932075     2.751286   -0.2245429   0.86218734     1.011918   0.75865482   -1.2298232            1  -0.11490391  -0.39075384  -0.32920175   0.37524386 -0.0054627886 -0.042868481  0.021096985  -0.27139573  -0.25935017   0.71638415        0.075    1.3810663        1e-10 1.5919648e-11     6.281546    2.4407294    31.520363 0.0021433213  -0.19347407 0.0041071377   0.20533701   -1.1608812    2.3550376 
 1928000    4.0222822    1.2739096    2.7483726  -0.22719144   0.84932129    1.0080204   0.73958124   -1.2298232            1  -0.25149038  -0.48249132  -0.48733616   0.21535633  0.026380357  0.088909975  0.010148378  -0.40404779  -0.39538028   0.71370963        0.075    1.3771226        1e-10 1.5860214e-11    6.3050852     2.447434    31.520363 0.0014627244  -0.18241493  0.015737708    0.1983443   -1.3230676    1.0312763 
 1929000    4.0187699    1.2835928    2.7351771  -0.23252525   0.85577718    1.0071229   0.75112641   -1.2298232            1 -0.094454415  -0.35457516   -0.3778898   0.44910172 -0.0099973945  0.026332929 -0.013684475   -0.2493933  -0.23821619    0.7184593        0.075    1.3830477        1e-10 1.5965762e-11    6.2634028    2.4454716    31.520363 -0.0080652958  -0.19856056 0.0025284728   0.16497393   -1.2159988    3.5664295 
 1930000    4.0302931    1.2920234    2.7382697  -0.22735839   0.86139785     1.012037   0.75723657   -1.2298232            1  -0.11800545  -0.39049008   -0.3778883   0.41436204  0.021715147 -0.042805585  0.027541732  -0.27420471  -0.26246869   0.71685749        0.075      1.39769        1e-10 1.5930166e-11    6.2773983    2.4440659    31.520363 0.0038462862  -0.18969617 -0.012473444   0.19275309   0.51803745     3.306132 
 1931000    4.0274329    1.2804932    2.7469397   -0.2274486    0.8537106   0.99168002   0.75831618   -1.2298232            1  -0.12481409  -0.39392979  -0.36504868   0.38453619 -0.0062897559  0.030670266  0.036279025  -0.28123606  -0.26637148   0.71629285        0.075    1.3857595        1e-10 1.5917619e-11    6.2823467    2.4404324    31.520363 -0.0035054568  -0.19983648 0.0042783948   0.18548443     -1.04119     1.892749 
 1932000    4.0356614    1.2806293    2.7550321  -0.22238225   0.85380136    1.0085781   0.74677608   -1.2298232            1  -0.16484332   -0.4103954  -0.40971629   0.32558173 0.0063034495   0.11776782 0.0049118284  -0.31888484  -0.30881283   0.71999108        0.075    1.4022729        1e-10 1.5999802e-11    6.2500774     2.446532    31.520363 0.0084878336  -0.21287845 -0.00066542545   0.18399283    -1.063192    1.1348972 
 1933000    4.0253681    1.2825303    2.7428378  -0.23269531   0.85506878    1.0045853   0.75168374   -1.2298232            1  -0.15897284  -0.39483541  -0.42263183   0.34054871 -0.014929485  0.070148643 -0.017086911   -0.3140267   -0.3023724   0.71799078        0.075    1.4071124        1e-10 1.5955351e-11    6.2674899    2.4531303    31.520363 0.00072044555  -0.21064138  0.011076652   0.20519568  -0.17646165  -0.11453392 
 1934000    4.0243615    1.2806504     2.743711  -0.22712489   0.85381546    1.0176304   0.74053564   -1.2298232            1  -0.13712642  -0.41521712  -0.40392025    0.4077581 -0.015076456  0.028785408  0.029615667  -0.28988069   -0.2823881   0.71376025        0.075    1.4013244        1e-10 1.5861339e-11     6.304638    2.4450923    31.520363  0.011068574  -0.21572173 -0.0094941448   0.19039506    1.7468802    1.9872054 
 1935000    4.0429532    1.2869722     2.755981  -0.23312278   0.85803024     1.010425    0.7526537   -1.2298232            1  -0.22256542  -0.44976559  -0.48623054   0.26829988 0.0019733933  0.027253117 -0.0070064493  -0.37781935  -0.36679856   0.71559383        0.075    1.3966155        1e-10 1.5902085e-11    6.2884835    2.4574409    31.520363 0.0071767334  -0.19129598  0.008863916   0.18538536  -0.21259471   0.12570894 
 1936000    4.0329068    1.2816864    2.7512204   -0.2345544   0.85450612    1.0155099   0.74317173   -1.2298232            1  -0.19632144  -0.46818425  -0.45381617   0.33303611 -0.003559197 -0.021691865  0.007533343  -0.34961947  -0.34128042   0.71366732        0.075    1.3968305        1e-10 1.5859274e-11     6.305459    2.4517963    31.520363 0.00032875102  -0.20196841 0.0072034874   0.20441485  -0.16190815  -0.70533197 
 1937000    4.0273289    1.2827674    2.7445614  -0.23389051   0.85522687    1.0127919   0.74627218   -1.2298232            1  -0.16545656  -0.39478089  -0.42549943   0.32391065  0.013710781 -0.035051672  0.065317577  -0.31939414  -0.31002757   0.71571501        0.075    1.3861318        1e-10 1.5904778e-11    6.2874187    2.4491137    31.520363 -0.011101839  -0.19954557 -0.0010646343   0.20217034 -0.034402605    2.4251933 
 1938000    4.0425712    1.2953909    2.7471803  -0.23121104   0.86364296    1.0168658   0.75769397   -1.2298232            1  -0.17436722  -0.41087072  -0.41622122   0.30399029 -0.0010117731  0.048128544 -0.010600801  -0.33066083  -0.31951975   0.71999343        0.075    1.3855459        1e-10 1.5999854e-11    6.2500571    2.4619888    31.520363 -0.007155257  -0.22195161  0.008153153   0.18339071   0.56185996    1.4559818 
 1939000    4.0477849    1.2958131    2.7519718  -0.23095468   0.86392446    1.0201666   0.75588607   -1.2298232            1  -0.18245878  -0.41716395  -0.45079866   0.32058626 0.0060105895   0.02836623 0.0022148378  -0.33837947  -0.32808249   0.71785761        0.075    1.3942887        1e-10 1.5952391e-11    6.2686526    2.4457788    31.520363 -0.0021501274  -0.20743218 -0.0030774266   0.19910426   -1.1460765   0.65571971 
 1940000    4.0444262    1.2849256    2.7595006  -0.22782742    0.8566657   0.99800114   0.75894225   -1.2298232            1 -0.090088284  -0.35364242  -0.34030219   0.42367975 0.0025573389 -0.076709053  0.030506215  -0.24663939  -0.23254798   0.71234075        0.075    1.4039141        1e-10 1.5829794e-11    6.3172014    2.4367808    31.520363 -0.0087710737  -0.19770971 -0.0055068529   0.19577598    1.8446388     2.143737 
 1941000    4.0484991    1.2857434    2.7627558   -0.2212714   0.85721093    1.0142886    0.7485937   -1.2298232            1  -0.18400885  -0.42679699  -0.44222058   0.31699102 -0.0012412619 -0.052337808  0.047866271   -0.3384253   -0.3287935   0.71120742        0.075    1.4049747        1e-10 1.5804609e-11    6.3272681    2.4448642    31.520363 -0.0010060887  -0.20856645 -0.0067880232   0.18480091     1.123826    1.6147168 
 1942000    4.0269331    1.2805554    2.7463777  -0.23020519   0.85375207    1.0162745   0.74136668   -1.2298232            1   -0.1116053  -0.36630477   -0.3520475   0.38353638  0.018348837 0.0059304802 0.0087993204  -0.26453099  -0.25667343   0.71686643        0.075    1.4053735        1e-10 1.5930365e-11      6.27732    2.4493136    31.520363 0.0023093927  -0.19649089 0.0026408947   0.21565855  -0.24731086    2.6099121 
 1943000    4.0490163    1.2961775    2.7528388  -0.22374298   0.86416745    1.0135705   0.76086183   -1.2298232            1  -0.22803714  -0.44748294  -0.46491559   0.22828711 -0.0017562697  0.040857207 -0.017982658   -0.3849842  -0.37271928   0.72121962        0.075    1.3928392        1e-10 1.6027103e-11    6.2394309    2.4440591    31.520363 0.0012162638  -0.19902254 0.0066916147   0.18130479  -0.83876143   0.59350609 
 1944000    4.0249548    1.2798189    2.7451359  -0.23388341   0.85326105    1.0165092   0.74037338   -1.2298232            1   -0.1744213  -0.43322588    -0.443705     0.353667 0.0043291907   0.13776673 0.0054599697   -0.3271421  -0.31952293   0.72056698        0.075     1.416867        1e-10  1.60126e-11    6.2450822    2.4640085    31.520363 -0.0020735054   -0.1848756 -0.0076671023   0.20330033   -2.3073935    1.3693202 
 1945000     4.028386    1.2866129    2.7417731  -0.22482838   0.85779067    1.0055411   0.75562808   -1.2298232            1   -0.2159228  -0.43233867  -0.47225487   0.25682515 -0.011082461  0.044543959 -0.013525545  -0.37179027  -0.35945878   0.71080736        0.075    1.4277128        1e-10 1.5795719e-11    6.3308292    2.4486576    31.520363 -0.0058827478  -0.19652858 0.0049825709   0.18933992  -0.41166181    1.5051556 
 1946000    4.0026699    1.2757142    2.7269558   -0.2323102   0.85052442    1.0091862   0.74081031   -1.2298232            1  -0.17093972  -0.42011289  -0.44673358    0.3540273 -0.018855398 0.0081653579 -0.014767877  -0.32375066  -0.31499604   0.71063292        0.075    1.4331516        1e-10 1.5791843e-11    6.3323833     2.440726    31.520363 -0.0051998291  -0.20451211 0.0024426786   0.18805868  -0.34536565  -0.96989888 
 1947000    4.0424624    1.2901757    2.7522867  -0.23411865   0.86016599    1.0000277   0.76346269   -1.2298232            1 -0.072591271  -0.36393062  -0.32563483   0.47179163 0.0090902306  0.017389416  0.040957044  -0.23007483  -0.21534025   0.72241859        0.075    1.4394099        1e-10 1.6053746e-11    6.2290756    2.4423046    31.520363 -0.0034869356  -0.18697273 -0.0013185225   0.17333892  -0.95442875    1.3999761 
 1948000    4.0237816    1.2713003    2.7524813  -0.22492561   0.84758168   0.99287075   0.74712138   -1.2298232            1  -0.13770109  -0.41305414  -0.39885852   0.39880939 -0.0041325104 0.0052854764  0.016162251  -0.29181384  -0.27942845   0.71892214        0.075    1.4155582        1e-10 1.5976047e-11    6.2593705    2.4335075    31.520363 -0.0029235071  -0.20575082 0.0098447215   0.20350213    1.1649467    1.1620705 
 1949000    4.0215779     1.284636    2.7369419   -0.2333254   0.85647267    1.0048804   0.75385512   -1.2298232            1  -0.11121069  -0.36936453  -0.38069906   0.41643153  0.012767326 -0.022748891 -0.029529385  -0.26671244  -0.25465236   0.71034169        0.075    1.4248645        1e-10 1.5785371e-11    6.3349794    2.4461026    31.520363 0.0011178467  -0.18517951 -0.0023051203   0.21260449    1.4817532    1.3762177 
 1950000     4.016015    1.2740932    2.7419218  -0.23071416   0.84944372    1.0046407   0.74212724   -1.2298232            1  -0.14651688  -0.41279388  -0.39501087   0.36825412 0.0031601272 -0.079336703 -0.00067518262  -0.29959946  -0.28992434   0.71176486        0.075     1.423567        1e-10 1.5816997e-11    6.3223127    2.4495533    31.520363 0.00053116502  -0.19383956 -0.0041404336   0.17103932    2.1628264  -0.43259695 
 1951000    4.0098213    1.2745601    2.7352612  -0.23511915   0.84975498    0.9992982   0.74635097   -1.2298232            1 -0.091203294  -0.35395381  -0.37739804   0.45774196 -0.0087946351  0.014415473  0.010740625  -0.24515713  -0.23384814    0.7265451        0.075    1.4320154        1e-10 1.6145447e-11    6.1936967    2.4555283    31.520363 0.00043204302  -0.19769194 0.0026666226   0.20691971   -1.7487336    3.9599351 
 1952000    4.0401672    1.2961579    2.7440093  -0.23131009   0.86415436    1.0062942   0.76587498   -1.2298232            1  -0.17425576  -0.42012777  -0.41943732   0.31679782 -0.0094588976 -0.095072603  0.026201627  -0.33223691  -0.31789924   0.72822665        0.075    1.4201971        1e-10 1.6182814e-11    6.1793948    2.4604115    31.520363 0.0039908739  -0.19905726 -0.0080747488   0.20496787   -1.3725824   -1.1494143 
 1953000    4.0157528    1.2711668    2.7445861  -0.23023539   0.84749265   0.99320266   0.74674106   -1.2298232            1  -0.18824593  -0.45448106   -0.4057292   0.29547246 0.0032084691 -0.0061355964 0.0099162893  -0.34228023  -0.33002067    0.7111861        0.075     1.429575        1e-10 1.5804136e-11    6.3274578    2.4405635    31.520363 0.0041475089  -0.19601541 9.4617631e-05   0.18641841   0.68832785   0.22905685 
 1954000    4.0237786    1.2770911    2.7466875  -0.23058064   0.85144244   0.99834247   0.74986772   -1.2298232            1   -0.2001103  -0.46165473  -0.43983747    0.3011613 0.0057340315  0.053715186 -0.033563324  -0.35478955  -0.34261872   0.71028042        0.075    1.4152043        1e-10 1.5784009e-11    6.3355259    2.4414673    31.520363 0.0016383468  -0.19757979 -0.007803143   0.21133794   0.16247931    0.3171863 
 1955000    4.0149667    1.2871959    2.7277708  -0.23956539   0.85817936    1.0009246   0.75948045   -1.2298232            1  -0.12863532  -0.39031086  -0.33508282   0.33948772 0.0073981816 -0.0050060118  -0.00704281  -0.28529744  -0.27151233   0.72449892        0.075    1.3904654        1e-10 1.6099976e-11    6.2111894     2.450497    31.520363 0.00078072733  -0.18913204 0.0011803611    0.1978016   -2.2516342  -0.25417458 
 1956000    4.0069377    1.2764173    2.7305204  -0.23311037   0.85099319   0.99674957   0.75020984   -1.2298232            1  -0.25813285  -0.44517289  -0.52996354   0.20073788 -7.997862e-05 -0.050756107 -0.010300386  -0.41288267  -0.40041389   0.72372189        0.075    1.3971376        1e-10 1.6082709e-11    6.2178581    2.4404367    31.520363 0.0040800455  -0.21334435 0.0044119617   0.17756757  -0.24162261    1.6153305 
 1957000    4.0192087    1.2859384    2.7332703    -0.225494   0.85734094   0.99694625   0.76081482   -1.2298232            1  -0.13234432  -0.38170956  -0.41302452   0.39770113 0.0039515418 -0.040001839  0.021791195  -0.28928169  -0.27465344   0.71585583        0.075    1.4080694        1e-10 1.5907907e-11     6.286182    2.4471682    31.520363 -0.0092856378  -0.19616314 -0.011923459   0.22184873    0.3067161   0.78689328 
 1958000    4.0293894    1.2742896    2.7550998  -0.22830544   0.84957466   0.99513562   0.74892641   -1.2298232            1  -0.17200805  -0.44784152   -0.4129742   0.34479158  0.010075789 -0.028918517 -0.010246704  -0.32649313  -0.31405871   0.71205662        0.075    1.4065215        1e-10 1.582348e-11    6.3197222    2.4523712    31.520363 0.0079049623  -0.19250857 0.0095562138   0.20947119    1.6421483    1.1002079 
 1959000    4.0255947    1.2879503    2.7376445  -0.22529947   0.85868229    1.0199501    0.7471656   -1.2298232            1  -0.06899504  -0.33592951  -0.34493785   0.47388224  0.014256768   -0.0796229  0.037356796  -0.22311691  -0.21458784    0.7191026        0.075    1.4193731        1e-10 1.5980058e-11    6.2577996    2.4369156    31.520363 -0.0056628522  -0.23281261 -0.0016565389   0.20394407    1.5112451     2.499432 
 1960000    4.0270521    1.2875484    2.7395038  -0.23537054   0.85841434     1.010821   0.75302964   -1.2298232            1  -0.14877333  -0.38733124  -0.45117537   0.39218661 -0.015819801  -0.12570995 -0.012466218  -0.30410481    -0.293063   0.71903085        0.075    1.4099511        1e-10 1.5978463e-11    6.2584241    2.4474858    31.520363 0.00050402658   -0.2023041 -0.011209491    0.1917161 -0.031411556    2.2278102 
 1961000    4.0192942    1.2762887    2.7430055  -0.22939004   0.85090744    1.0028243     0.745861   -1.2298232            1  -0.14976193  -0.42250906  -0.38946509   0.36268835 0.00087068626  -0.11434281  0.028558319   -0.3036147  -0.29291011   0.71620352        0.075    1.4087288        1e-10 1.5915634e-11    6.2831303    2.4429085    31.520363 -0.0012829822  -0.18212417 -0.0056046771    0.2141936   -0.2491431   0.64488989 
 1962000    4.0253603    1.2709184     2.754442  -0.22624099   0.84732706    1.0054027   0.73801825   -1.2298232            1  -0.13767705  -0.39073293  -0.39482698   0.37252876 0.0067879986  0.039713578 -0.033076902  -0.28991205  -0.28119329   0.71589994        0.075    1.4112513        1e-10 1.5908888e-11    6.2857946    2.4514622    31.520363 -0.011409232  -0.17618843 0.0062437951   0.20170147   0.62680857     1.862614 
 1963000    4.0218507    1.2691534    2.7526973   -0.2222925   0.84615034     1.002559     0.737995   -1.2298232            1  -0.14767267  -0.41522094  -0.40858843   0.38079135 -0.020806566   0.14779636 0.0083537259  -0.29990287  -0.29078299   0.72024703        0.075    1.4144437        1e-10 1.6005489e-11    6.2478564    2.4489059    31.520363 -0.0046905951  -0.18527141  0.010211825   0.20915452    1.3688081    4.8332813 
 1964000    4.0427423    1.2942104    2.7485319  -0.23053528   0.86285595    1.0112598   0.76024169   -1.2298232            1  -0.11727958  -0.38640946  -0.39272489    0.4272956 -0.0072778764  0.001956052 -0.0039659378  -0.27409873  -0.26163188   0.71584466        0.075    1.3984535        1e-10 1.5907659e-11      6.28628    2.4366743    31.520363 -0.0023556095  -0.18890614  0.013148425   0.20865782   -1.0817595    2.9746587 
 1965000    4.0054019    1.2637211    2.7416808  -0.22838092   0.84252861   0.99092759   0.73991574   -1.2298232            1   -0.1180368  -0.35924611  -0.40108921   0.40622492 0.0020875299  0.083074531  0.026033353   -0.2706632  -0.25948678   0.71363439        0.075    1.3893442        1e-10 1.5858542e-11      6.30575    2.4534846    31.520363 0.00017710455  -0.20581985 0.0074223092   0.18904647  -0.60412953  -0.32832996 
 1966000    4.0260615    1.2845015    2.7415601  -0.22805972   0.85638295    1.0071724   0.75211721   -1.2298232            1    -0.123882  -0.38214919  -0.37287463   0.38337784 0.00054517783  0.039846747   0.01862426  -0.27902526  -0.26765084   0.71315725        0.075    1.3917652        1e-10 1.5847939e-11    6.3099688    2.4519711    31.520363 -0.0008950584    -0.213955 -0.0026695112   0.19292604  -0.42171954   0.64673081 
 1967000    4.0099533    1.2704501    2.7395032  -0.22980394   0.84701486    1.0006001   0.74081345   -1.2298232            1  -0.13760434  -0.43005713  -0.36369759    0.3809417 -0.0095979087  0.065373334  0.027823918  -0.29041592  -0.28043503   0.71714807        0.075    1.3977365        1e-10 1.5936624e-11    6.2748548    2.4397849    31.520363 -0.0041434551   -0.2059128 -0.0096509738   0.21412398    1.0176153    1.9241452 
 1968000    4.0332165    1.2755009    2.7577156  -0.23185007   0.85038224    1.0067333   0.74226715   -1.2298232            1   -0.2437666  -0.47334143  -0.48685174   0.22889338 -0.00073541873 -0.066047899 -0.056899297  -0.39687804  -0.38747277   0.72098591        0.075    1.3933539        1e-10 1.6021909e-11    6.2414534    2.4476093    31.520363 -0.014412029  -0.17441368 -0.0029623152   0.19025195   0.72044213   0.56625816 
 1969000    4.0270273    1.2810239    2.7460034  -0.22620798   0.85406445    1.0054827    0.7493633   -1.2298232            1  -0.16579399  -0.44437932  -0.40461699   0.35161433 -0.020429165 -0.066430679 -0.0025389768   -0.3203692  -0.30932165   0.71564902        0.075    1.3910989        1e-10 1.5903312e-11    6.2879985    2.4476318    31.520363 -0.0056631342  -0.22973124 5.4366835e-05   0.21670124    0.5420533    1.7057122 
 1970000    4.0261221    1.2816006    2.7445215  -0.22862767   0.85444895    1.0062743    0.7494661   -1.2298232            1  -0.15087676  -0.40962676  -0.43710942    0.3941059 -0.0096566912   0.00131378  0.032701427  -0.30547317  -0.29451742   0.71123997        0.075    1.3865605        1e-10 1.5805333e-11    6.3269785    2.4397327    31.520363 -0.0077637996  -0.20246068 0.0040944512   0.20501041    1.3079324    2.4055412 
 1971000    4.0311135    1.2842593    2.7468543  -0.23460024   0.85622147   0.99997045   0.75682777   -1.2298232            1  -0.17824916  -0.43432254  -0.41422464    0.3137997 -0.0027795713 -0.043841074  0.014750053   -0.3343641  -0.32098997   0.71487399        0.075    1.3845209        1e-10 1.5886089e-11    6.2948157    2.4385826    31.520363 -0.00073260299  -0.18077837 -0.0011967848   0.20045524   0.83102624  -0.49758876 
 1972000    4.0226445    1.2903638    2.7322807  -0.23044227   0.86029138    1.0060889   0.75948046   -1.2298232            1  -0.10706572  -0.34008993  -0.37289287   0.39178562 -0.0042746607 -0.058310844 -0.039225793  -0.26372785  -0.25067991   0.72107763        0.075    1.3917018        1e-10 1.6023947e-11    6.2406596    2.4466518    31.520363  0.011037977  -0.20034828 -0.0058611926   0.22600107   0.34687118    1.7345656 
 1973000    4.0312777    1.2886152    2.7426625  -0.22548325   0.85912557    1.0103082   0.75458801   -1.2298232            1  -0.20148588  -0.41994791  -0.45041226   0.26590253 -0.013093621 -0.023782532 -0.059222154  -0.35713881  -0.34570234   0.71616491        0.075    1.3863472        1e-10 1.5914776e-11     6.283469    2.4397446    31.520363 -0.0060482568  -0.20378505 -0.0057638806   0.19772104    1.3565727    1.6882165 
 1974000    4.0353533    1.2882683     2.747085  -0.22452058   0.85889431    1.0049692    0.7578913   -1.2298232            1  -0.15048828  -0.42328717  -0.42757917   0.39940149 -0.012133002 -0.079144579  0.039137545   -0.3068226  -0.29394264   0.71081536        0.075    1.4016557        1e-10 1.5795897e-11     6.330758    2.4534901    31.520363 -0.0057834314  -0.22221166  0.002112615   0.18679497   0.89227133   0.82672617 
 1975000    4.0275999      1.26897      2.75863  -0.22701597   0.84602805   0.99426516   0.74352753   -1.2298232            1  -0.14055541  -0.41831486    -0.370174   0.36682263  0.010792151  -0.14022126 0.0016823513  -0.29392683  -0.28248181    0.7124044        0.075    1.4064826        1e-10 1.5831209e-11     6.316637      2.44094    31.520363 -0.0027230277  -0.19627345 -0.0040095098   0.19260803   0.16341927    1.6527753 
 1976000    4.0299153    1.2817007    2.7482146  -0.23223571   0.85451569    1.0078681   0.74847615   -1.2298232            1 -0.053405727  -0.34733155  -0.32928051   0.51639488 0.0025451661  -0.10181684 -0.0019887386  -0.20779793  -0.19727388   0.72058491        0.075    1.4135693        1e-10 1.6012998e-11    6.2449268    2.4455771    31.520363 0.0039004054   -0.1923993 -0.0060742044   0.23767375  -0.56666403    2.5444917 
 1977000    4.0500299    1.2942888    2.7557411  -0.22733677   0.86290823    1.0120826   0.75976074   -1.2298232            1 -0.093890375  -0.32909489  -0.38257253   0.42999629 0.0088560766 -0.0053158549  0.013669643  -0.25061031  -0.23836013   0.71788344        0.075    1.4152264        1e-10 1.5952965e-11    6.2684271    2.4555475    31.520363 0.0079705854  -0.18648814 -0.0039142033   0.19015642   0.38968399    3.2690675 
 1978000    4.0250135     1.265642    2.7593715  -0.22981004   0.84380926   0.99637446   0.73831343   -1.2298232            1  -0.16125221  -0.44925551  -0.39806157   0.36356045 -0.0041444662 -0.016650856  0.048278479   -0.3135481  -0.30347971   0.71220835        0.075    1.4043484        1e-10 1.5826852e-11    6.3183758    2.4419358    31.520363 0.0089264318  -0.20689325 -0.0013864926    0.2069999  -0.23470862  -0.81825141 
 1979000    4.0439718    1.2741749    2.7697969  -0.21625159   0.84949818   0.99374386   0.74976011   -1.2298232            1  -0.09220569  -0.30444165  -0.39626531   0.42408989 -0.002885661 -0.019206977 -0.014127328  -0.24686274  -0.23405768   0.70921092        0.075    1.3995389        1e-10 1.5760243e-11      6.34508    2.4562066    31.520363 -0.011949791  -0.19513605 0.0085191246   0.20388934  -0.37398157    4.0540961 
 1980000     4.029897     1.276686     2.753211  -0.22491352   0.85117233    1.0062373   0.74394738   -1.2298232            1  -0.14294353    -0.408932  -0.39105676   0.37115817 0.0058631371 -0.0074190094 0.0086531919  -0.29640156  -0.28657889   0.71538614        0.075    1.3951458        1e-10 1.589747e-11    6.2903092    2.4424523    31.520363  0.006343002  -0.21776592 -0.011264459   0.19623148    1.7091094   0.11086943 
 1981000      4.02924    1.2790413    2.7501987  -0.23389739   0.85274265    1.0115066    0.7429581   -1.2298232            1  -0.14206337  -0.38719661  -0.41840672   0.37941322 0.00053347762 -0.041824257 -0.0039196243  -0.29531734   -0.2864509   0.71996619        0.075    1.3975095        1e-10 1.5999249e-11    6.2502935     2.438059    31.520363 0.0039624623  -0.21331118 -0.014848669   0.20710638   0.58173704   0.88270009 
 1982000    4.0335273    1.2731877    2.7603395  -0.22991513   0.84884003   0.99755167    0.7460114   -1.2298232            1  -0.10173606  -0.39933254  -0.35501551   0.44913987  0.011152024   -0.1140492  0.019714805  -0.25561985   -0.2441316    0.7117058        0.075    1.4155824        1e-10 1.5815684e-11    6.3228373    2.4398231    31.520363 -0.010837979  -0.21423383  0.012896342   0.20570471    2.0936679    3.4541384 
 1983000    4.0460259    1.2798778     2.766148  -0.22700065   0.85330037   0.99031472   0.75856683   -1.2298232            1  -0.20382201  -0.44509352  -0.43749407   0.27112156 -0.0075396915  -0.14201308 -0.071227712  -0.36029567  -0.34518451   0.70497678        0.075     1.415452        1e-10 1.5666151e-11     6.383189    2.4476717    31.520363 -0.0067140349  -0.20302362 0.0026926819   0.19834125    2.2998448    1.1536101 
 1984000    4.0116964    1.2644536    2.7472429  -0.23187653   0.84301693    1.0033421     0.732151   -1.2298232            1 -0.099304128  -0.34375408   -0.3903988    0.4362405 -0.0070824123 -0.075174072 -0.031137672  -0.25032886  -0.24252623   0.70829056        0.075    1.4186498        1e-10 1.573979e-11    6.3533248    2.4380769    31.520363 -0.0059742841  -0.20283248 -2.4982105e-05   0.20087157  0.011479263    1.7900804 
 1985000    4.0541741    1.2904613    2.7637129  -0.23205304    0.8603564    1.0253886   0.74623485   -1.2298232            1 -0.084807525  -0.35292444  -0.34831545   0.44681732 -0.011588363 -0.059444805 0.0076577102   -0.2387374  -0.23117665   0.72267404        0.075    1.3994641        1e-10 1.6059423e-11    6.2268737    2.4547405    31.520363 0.0043240921  -0.18066012 -0.0054084773   0.19057259  -0.71579962   0.61572389 
 1986000    4.0316397      1.29113    2.7405097  -0.22759899   0.86080225    1.0123449   0.75601565   -1.2298232            1  -0.11570912  -0.35039991  -0.35130168   0.35457424 0.0072072468  0.040733432  -0.02625695  -0.27165654  -0.26021632    0.7191273        0.075    1.3934685        1e-10 1.5980607e-11    6.2575847    2.4520674    31.520363   0.01440602  -0.22307287 -0.00096820754   0.18502679   0.17651808   0.34686408 
 1987000    4.0469815    1.2909245     2.756057  -0.22412104   0.86066524    1.0105874   0.75700004   -1.2298232            1  -0.18895103  -0.43688022  -0.46538852   0.33541564  0.009488623 -0.020430394 -0.034347168  -0.34510151  -0.33320736   0.71098665        0.075    1.3970608        1e-10 1.5799703e-11    6.3292327    2.4477723    31.520363  0.005125972  -0.22576079 -5.1716808e-05   0.20846158   0.64873983   0.92133534 
 1988000    4.0327261     1.283036      2.74969  -0.22962025   0.85540595    1.0220892   0.74014142   -1.2298232            1 -0.073084102  -0.33564574  -0.35032643   0.46671985 0.0088667745 -0.044258183 0.0041952505  -0.22575706  -0.21898224   0.71460973        0.075    1.4027109        1e-10 1.5880216e-11    6.2971435    2.4490795    31.520363 0.0018447077  -0.21327154 -0.0075399701   0.21816804     1.059236   0.80492257 
 1989000    4.0297774    1.2828866    2.7468908  -0.22926356   0.85530635    1.0210306   0.74070539   -1.2298232            1  -0.12203123  -0.39368315  -0.39655182    0.4241413 -0.0063344836 0.00057611966 -0.022910155  -0.27482052  -0.26777827   0.71962879        0.075    1.3894061        1e-10 1.5991751e-11     6.253224    2.4398868    31.520363 0.00029793353  -0.21666695 -2.9559184e-05   0.21153013  -0.97023169    1.5941966 
 1990000    4.0575412    1.2911045    2.7664367   -0.2315439   0.86078522     1.018563   0.75168385   -1.2298232            1  -0.19382288  -0.42657993  -0.46084667   0.30595795 -0.0010287166  -0.05111311 -0.0018923111  -0.34887676  -0.33921769   0.71809978        0.075    1.3764463        1e-10 1.5957773e-11    6.2665386    2.4655721    31.520363 0.0052215753  -0.21510826 -0.010869525    0.2018243   0.73636901  -0.62543744 
 1991000     4.046874    1.2862754    2.7605987  -0.22821356   0.85756562    1.0198547    0.7453421   -1.2298232            1  -0.19332072  -0.44096422  -0.44213302   0.30313508 -0.0010052857  0.026483585 -0.022021871  -0.34706645   -0.3388999    0.7087053        0.075    1.3737293        1e-10 1.5749007e-11    6.3496068    2.4465122    31.520363 -0.0036538014  -0.19409368 0.0062125956   0.21511833  0.062120803 -0.095305032 
 1992000    4.0432972    1.2899737    2.7533235  -0.21903541   0.86003133    1.0208566   0.74882102   -1.2298232            1  -0.14870196  -0.39550621  -0.38383533   0.33323567  0.010390213 -0.043964853 -0.016766774   -0.3031653  -0.29442415   0.71098904        0.075    1.3660054        1e-10 1.5799756e-11    6.3292115    2.4385635    31.520363 -0.003858174  -0.18581378 -0.012603489   0.21296421   0.99089099   0.68599145 
 1993000    4.0394931    1.3005133    2.7389798   -0.2281542    0.8670581    1.0323258   0.75277422   -1.2298232            1  -0.14148271  -0.40256884  -0.39335635   0.37147706 0.0034454377  0.069976796 -0.010156019   -0.2967615  -0.28884209   0.71561067        0.075     1.371661        1e-10 1.5902459e-11    6.2883355    2.4509144    31.520363  0.002461683  -0.19560223 -0.0082214464   0.20938588  -0.05859348    1.9387363 
 1994000    4.0421018    1.2946225    2.7474793  -0.22523204    0.8631307    1.0157218   0.75761881   -1.2298232            1  -0.12724951   -0.4389258  -0.34880156   0.40597884  0.014987955 -0.050149047   0.01980488  -0.28352762  -0.27223874     0.716909        0.075    1.3752246        1e-10 1.5931311e-11    6.2769473    2.4540118    31.520363 -0.0030858743  -0.19508282 0.0076007326   0.20541942   0.13298808    2.4022258 
 1995000    4.0177376    1.2829833    2.7347544  -0.22432625   0.85537076    1.0137771   0.74583388   -1.2298232            1  -0.14365287  -0.37050102  -0.39365253   0.33319494 0.00018081462   0.01026448 -0.014265153  -0.29750004  -0.28836451   0.71540478        0.075    1.3779339        1e-10 1.5897884e-11    6.2901453    2.4447077    31.520363 -0.014233456  -0.20413958 -0.0050135046   0.21287157   -1.1444964   0.34205508 
 1996000    4.0244527     1.270335    2.7541177  -0.22449027   0.84693809    1.0051377   0.73754346   -1.2298232            1  -0.16537838   -0.4062461  -0.44631351   0.35642448 -0.0043626948 -0.014302151 -0.023344656  -0.31751544  -0.30885679   0.71379381        0.075    1.3842342        1e-10 1.5862085e-11    6.3043416    2.4497618    31.520363 -0.0033106201  -0.19449495 -0.0017933753   0.19654791   -0.2149357    1.4078439 
 1997000    4.0169289    1.2809485    2.7359804  -0.23290322   0.85401419    1.0264568   0.73476393   -1.2298232            1 -0.052936168   -0.3325511  -0.32269663   0.49643922 -0.0027961397  0.081610424 -0.015231972  -0.20449988  -0.19945777    0.7119258        0.075    1.3755108        1e-10 1.5820573e-11    6.3208834    2.4451632    31.520363 -0.0078953139  -0.18989113 0.0049175217   0.18877912  -0.68355675    3.0237976 
 1998000    4.0496909    1.2951453    2.7545456  -0.22417112   0.86347928     1.019679   0.75547023   -1.2298232            1  -0.21653624  -0.44864074  -0.45815179    0.2571838 0.0013077617  0.048513184  0.026696637  -0.37237116  -0.36209034    0.7139665        0.075     1.354773        1e-10 1.5865922e-11    6.3028167    2.4536286    31.520363 -0.00091208053  -0.20709443 -0.0048958404   0.21430307  -0.33232177   0.89829677 
 1999000     4.060929    1.2948043    2.7661247  -0.22555142   0.86325191    1.0153532     0.758079   -1.2298232            1  -0.14309816   -0.3887855  -0.39054526   0.35003626 0.0026108707 -0.028025102  0.028769169   -0.2994712  -0.28803478   0.71103299        0.075    1.3787488        1e-10 1.5800733e-11    6.3288203    2.4387646    31.520363 -0.0033276842  -0.20027865 -0.0039193558   0.19759029  -0.71983379    4.1790418 
 2000000    4.0611234    1.2933694     2.767754  -0.23180153   0.86229528    1.0162004     0.755874   -1.2298232            1  -0.16638584  -0.41712753  -0.43897636   0.35694635 -0.00089830041 -0.020615379 -0.0098719888  -0.32230404  -0.31144339   0.71454595        0.075    1.3742966        1e-10 1.5878799e-11    6.2977056    2.4427024    31.520363  0.016442603  -0.19378972 -0.0090149852   0.20805336  -0.11229655   0.66125248 
 2001000    4.0745416    1.2954891    2.7790525  -0.22631934   0.86370849    1.0143417   0.75955156   -1.2298232            1  -0.23714013  -0.48198188  -0.46136064   0.23192214 0.0023666984 -0.023915451 0.0063705582  -0.39381692  -0.38193235    0.7124366        0.075    1.3738961        1e-10 1.5831924e-11    6.3163515    2.4500682    31.520363 0.0078677138  -0.23538872 -0.0093729171   0.21146175   -1.0846484   -1.5285428 
 2002000    4.0389667    1.2819323    2.7570344  -0.22766285    0.8546701    1.0125933   0.74546751   -1.2298232            1  -0.20948476  -0.43801237  -0.45367435   0.26323243 0.0099941289   0.10258034 -0.020185885  -0.36325636  -0.35402742   0.71563883        0.075    1.3778382        1e-10 1.5903085e-11    6.2880881    2.4416462    31.520363 -0.006599239  -0.21298522  0.006858476   0.19895686  -0.68573921     -0.80338 
 2003000    4.0417837    1.2965618    2.7452219  -0.22896085   0.86442365    1.0170001   0.75892205   -1.2298232            1 -0.071654613  -0.33415394   -0.3422629     0.461453 0.0042454531  0.022794682 -0.0037745622  -0.22820155  -0.21682631   0.71422994        0.075    1.3800632        1e-10 1.5871776e-11     6.300492    2.4363543    31.520363 -0.011631591  -0.19492831 -0.0068692537   0.22817595  -0.36265772   0.50591367 
 2004000    4.0430477    1.2844848    2.7585629  -0.22506139   0.85637187    1.0205358   0.74285076   -1.2298232            1  -0.18978152    -0.431855  -0.41781017    0.2803206 0.0015778493  0.078168437 0.0097846296  -0.34301335  -0.33545794   0.70961864        0.075    1.3799014        1e-10 1.5769303e-11    6.3414343    2.4594355    31.520363  0.007559115  -0.18367514 0.0010158406   0.20302256    -2.589645  -0.42016151 
 2005000    4.0476739    1.2939394    2.7537344  -0.21953499    0.8626753    1.0215395    0.7528223   -1.2298232            1 -0.072368575  -0.33702606  -0.33027735   0.45019768 0.0066063976   0.10328429 -0.040775218  -0.22765728  -0.21818826   0.70948551        0.075    1.3746865        1e-10 1.5766345e-11    6.3426243    2.4477885    31.520363 -0.0081591157  -0.18770734 0.0036189325   0.24133255   -1.6579995     1.702687 
 2006000    4.0489946    1.2898149    2.7591798  -0.22276008   0.85992542    1.0220575   0.74781075   -1.2298232            1 -0.084126783  -0.33624107  -0.36153157    0.4453923  0.012670124  0.028895984  0.066190873  -0.23838173   -0.2300204   0.71167739        0.075    1.3735706        1e-10 1.5815053e-11    6.3230897    2.4383984    31.520363 -0.0035518224  -0.21109991 -0.0036163177    0.1906012 -0.005988088    2.2928044 
 2007000    4.0612946    1.2948729    2.7664217  -0.22581305   0.86329766    1.0166908   0.75723078   -1.2298232            1  -0.20806819  -0.44268949  -0.43688712   0.25537204 -0.014074908 -0.051121712  0.020980989  -0.36426626  -0.35319574   0.71525335        0.075    1.3724509        1e-10 1.5894519e-11     6.291477    2.4441286    31.520363 -0.0082257459  -0.19423965 -0.0069147993   0.20332025  -0.55879554   -0.7060107 
 2008000    4.0304235    1.2781649    2.7522587  -0.23153426   0.85215831    1.0141692   0.74012679   -1.2298232            1  -0.24248919   -0.4875286  -0.46646513   0.22652617 -0.0029934502 -0.0029238739 -0.0044313087  -0.39515912  -0.38725679   0.71625216        0.075    1.3739019        1e-10 1.5916715e-11    6.2827036    2.4404345    31.520363 0.0042265139  -0.17302628 -0.0034227623   0.20264535   -0.8001722    1.0761161 
 2009000    4.0416686     1.296095    2.7455737   -0.2387158   0.86411239    1.0213691    0.7553719   -1.2298232            1  -0.17116424  -0.42382188  -0.42941149   0.33974065 0.0047301223 -0.0079597093 -0.0040028779  -0.32697887   -0.3169596   0.71493984        0.075     1.377068        1e-10 1.5887552e-11    6.2942359    2.4446941    31.520363 -0.0038816247  -0.18154904 0.0049926353   0.18842515     1.475161    2.4234071 
 2010000     4.036664     1.283187     2.753477  -0.23318507   0.85550659    1.0137064   0.74611264   -1.2298232            1  -0.14087227  -0.39860632  -0.40459277   0.38058228 -0.0026868466 -0.064313922 -0.0052565895  -0.29477694  -0.28557382    0.7149432        0.075    1.3931006        1e-10 1.5887627e-11    6.2942063    2.4426057    31.520363 0.0041640498  -0.19168865 -0.0029910854   0.20670699   0.91512753    1.3652948 
 2011000    4.0188216    1.2773362    2.7414853  -0.22975891   0.85160587    1.0061371   0.74475024   -1.2298232            1  -0.24172077  -0.50329757  -0.47298094    0.2511162 -0.0010751331 -0.036653643 0.0094198216  -0.39534441  -0.38534184   0.71338396        0.075    1.3710041        1e-10 1.5852977e-11    6.3079635     2.450307    31.520363 -0.00043490915  -0.18444244 6.7615834e-05   0.19947991   0.40245984    1.0879448 
 2012000    4.0235793    1.2721685    2.7514107  -0.22916194   0.84816054   0.98983586   0.75020106   -1.2298232            1   -0.1955051  -0.40538478   -0.4711808   0.29005029  0.012218825   0.02688837  0.042440779  -0.35025311  -0.33679924   0.71473173        0.075    1.3788393        1e-10 1.5882927e-11    6.2960686    2.4605673    31.520363 0.0050383636  -0.18229118 0.00082742335   0.20262507   0.38481802  -0.68758692 
 2013000    4.0203024    1.2796093     2.740693  -0.23316569   0.85312135    1.0030387   0.74945877   -1.2298232            1  -0.12680009  -0.35546451  -0.38816404   0.36322827 -0.0029132969 -0.0072721245 0.0008275529  -0.28139499  -0.26997888   0.71834192        0.075     1.368647        1e-10 1.5963154e-11    6.2644263     2.468192    31.520363 0.0023388516  -0.20254989 -0.0034407994   0.20835105   0.19421775    2.6522092 
 2014000    4.0257517    1.2803271    2.7454246  -0.23968715   0.85359988    1.0151273   0.74190303   -1.2298232            1  -0.13075584  -0.42138334  -0.37867429   0.40779012 0.00065708021  0.042045657 -0.029051871  -0.28379217  -0.27566021   0.72098213        0.075    1.3795981        1e-10 1.6021825e-11    6.2414862    2.4423541    31.520363 0.0086293362  -0.17517343 -0.011215896   0.19138165  -0.24364728     1.030326 
 2015000    4.0479959    1.2919431    2.7560529  -0.22841208   0.86134432    1.0033779   0.76313815   -1.2298232            1  -0.14366957  -0.37807236  -0.41695819   0.36402183 3.4448267e-05 -0.027265748  0.029178578  -0.30108619  -0.28689678    0.7171978        0.075    1.3722566        1e-10 1.5937729e-11    6.2744197    2.4461998    31.520363 -0.0013984515  -0.21098758 0.0028022044   0.17910702   0.90577105   0.18535195 
 2016000    4.0252671     1.285669    2.7395981  -0.22786475   0.85716137     1.000476   0.75806833   -1.2298232            1  -0.14517348  -0.40017287  -0.40374547   0.36839791 -0.0061984379 -0.042567046 -0.0076864394  -0.30154431  -0.28798645   0.70900853        0.075    1.3751314        1e-10 1.5755745e-11    6.3468912    2.4379728    31.520363 -0.0099557067  -0.18390957 -0.0050656848   0.19571552     0.972619    0.7339263 
 2017000    4.0325691     1.281406    2.7511631  -0.23170747    0.8543192    1.0034282   0.75121614   -1.2298232            1   -0.2138661  -0.46321194  -0.43693287   0.25854652  0.004986381 -0.079376841   0.00865586  -0.36882349  -0.35710047   0.71462249        0.075     1.362799        1e-10  1.58805e-11     6.297031    2.4491641    31.520363 0.0034231816  -0.20048055 -0.0082909157   0.20853918    1.2534963  -0.31165132 
 2018000    4.0324351    1.2823736    2.7500615  -0.23233624   0.85496429    1.0057512   0.75070017   -1.2298232            1  -0.13352601  -0.39500143  -0.39910084   0.39352423 0.0048383434 0.0051924597  0.011478377  -0.28837698  -0.27709199   0.71804968        0.075    1.3573312        1e-10 1.595666e-11    6.2669758    2.4490815    31.520363  0.014487795  -0.21824441 -0.0026609245   0.20893111    2.5285255    1.8870295 
 2019000    4.0372371    1.2886704    2.7485667  -0.23014581   0.85916242    1.0081481   0.75614514   -1.2298232            1   -0.1374967   -0.3674114  -0.37993648   0.33485779  0.016637194  0.087482792  0.057200204  -0.29347083  -0.28140482   0.71545818        0.075    1.3622311        1e-10 1.5899071e-11    6.2896758    2.4489747    31.520363 -0.0063007752  -0.18997324 -0.013757856   0.21789146    -1.103548   0.37042341 
 2020000    4.0134465    1.2770262    2.7364203  -0.23146265   0.85139917    1.0003901   0.74837748   -1.2298232            1   -0.1647983  -0.43746458  -0.39516363   0.33823332 0.0058839514  0.020944264 -0.0065258941  -0.31917015  -0.30759901   0.71356912        0.075    1.3738273        1e-10 1.5857091e-11    6.3063267    2.4518792    31.520363 0.0020325659  -0.20434206 -0.001588939   0.21669855   -1.0388477   0.38138596 
 2021000    4.0111752    1.2624108    2.7487645  -0.22568245   0.84165498   0.99817168   0.73342446   -1.2298232            1  -0.11063554  -0.36090619  -0.35064319   0.37964275 -0.010324017  0.030709132 0.0053333545  -0.26192295  -0.25311958   0.72164294        0.075    1.3748035        1e-10 1.603651e-11    6.2357709    2.4685906    31.520363 0.0013477212  -0.20135572 0.00065023681   0.19713393  -0.26606825    1.4547985 
 2022000    4.0232631    1.2764661     2.746797  -0.23011358   0.85102572    1.0007499   0.74749662   -1.2298232            1  -0.16318344  -0.41262157  -0.40491684   0.32798811  0.007646964  0.076246946 -0.0093939436  -0.31737359   -0.3060355   0.71763783        0.075    1.3658185        1e-10 1.5947507e-11    6.2705724    2.4355245    31.520363 -0.011655613  -0.21127028 -0.00061848691   0.17189272  -0.84503507    0.3053212 
 2023000    4.0122179    1.2535667    2.7586512  -0.21802798   0.83575859   0.98445678     0.732938   -1.2298232            1   -0.1209417  -0.40950108   -0.3907134   0.43738938 -0.012194893  0.036380195  0.020006412  -0.27212877  -0.26146801   0.72054896        0.075    1.3633184        1e-10 1.6012199e-11    6.2452383    2.4605136    31.520363 0.0030834532  -0.23072615 -0.0028362664   0.20827272    1.1039503    2.1759291 
 2024000    4.0208825    1.2663484    2.7545341  -0.23229729   0.84428024    0.9944055   0.74047293   -1.2298232            1 -0.095178762  -0.36434092  -0.36635504   0.44515968 -0.0087217557 -0.026668811 -0.0015126226   -0.2479201   -0.2371252   0.71668105        0.075    1.3711045        1e-10 1.5926246e-11    6.2789437    2.4378502    31.520363 0.0016259318  -0.21039796 0.0076382509   0.20221474   0.21093874    1.7703631 
 2025000    4.0182761    1.2735562    2.7447199  -0.22906404   0.84908568    0.9909995   0.75096125   -1.2298232            1  -0.16770079  -0.41325189  -0.44811201   0.35826152 0.0013035629 -0.072920573 -0.020700497  -0.32260561  -0.30916104   0.71761123        0.075    1.3573851        1e-10 1.5946916e-11    6.2708049    2.4444309    31.520363 0.0059976174  -0.20942196 -0.0026916182   0.20340393   0.43268003  -0.54129348 
 2026000    4.0174965    1.2766314    2.7408652  -0.23092538   0.85113594    1.0095107   0.74162057   -1.2298232            1  -0.19242777  -0.43123655   -0.4670858   0.32103903 -0.0029401949 -0.039777969  0.015382284  -0.34540584   -0.3365304   0.71480848        0.075    1.3597327        1e-10 1.5884633e-11    6.2953926    2.4444192    31.520363 0.0021939214  -0.19997277 -0.004428629   0.20873882  -0.52088173    2.8166808 
 2027000    4.0180623    1.2709271    2.7471352  -0.22440965   0.84733284   0.99785091   0.74325399   -1.2298232            1  -0.23443076  -0.44535068  -0.48164213   0.22370054 -0.0011237955  0.017021695 -0.012960211  -0.38774576  -0.37686901   0.71498003        0.075    1.3728126        1e-10 1.5888445e-11    6.2938821    2.4401236    31.520363 -0.0034398474  -0.21603235  0.013774568   0.23839771    1.4258484  -0.37981142 
 2028000    4.0010532    1.2745931    2.7264601  -0.23009391   0.84977698    1.0023611   0.74426861   -1.2298232            1  -0.20221199  -0.42688681  -0.44507064   0.26532149 -0.0055807253  0.035059074  0.017741047  -0.35573628  -0.34529405   0.72077313        0.075    1.3763043        1e-10 1.6017181e-11     6.243296    2.4593826    31.520363 -0.0036490734  -0.21014346 -0.0026446538   0.18512228   -0.0272253   0.61766131 
 2029000    4.0209984    1.2599793    2.7610191  -0.23736714   0.84003392   0.99058817   0.73592934   -1.2298232            1 -0.082587638  -0.37399437  -0.34788145    0.4741129 0.0060367244 -0.092657565 -0.057549079  -0.23439175  -0.22398917   0.72066918        0.075    1.3696509        1e-10 1.6014871e-11    6.2441965    2.4445255    31.520363 -0.0048502556  -0.18354744 -0.0068080209   0.17996459    -0.171738    1.2742016 
 2030000    4.0114644    1.2840658    2.7273986  -0.23422647   0.85609248    1.0150311   0.74618738   -1.2298232            1  -0.14397276  -0.42643964  -0.38873324   0.38325462  0.011859428 -0.059714784  0.032799266  -0.29789284  -0.28886339   0.71580875        0.075    1.3659481        1e-10 1.5906861e-11    6.2865954    2.4353739    31.520363 -0.0021764222  -0.20456067 -0.0057418595   0.21718157  -0.48942845    1.9190765 
 2031000    4.0180033    1.2767417    2.7412616   -0.2314029   0.85120946    1.0007886   0.74778071   -1.2298232            1  -0.13617168  -0.38264857  -0.39945395   0.37358748 -0.019182738  0.071580086 -0.003584707  -0.29042043  -0.27902928   0.71380667        0.075    1.3706575        1e-10 1.5862371e-11     6.304228    2.4550272    31.520363 -0.005282083  -0.21240684 -0.0025859291   0.19323794   0.26877478     2.096138 
 2032000    4.0241957    1.2848953    2.7393005  -0.23002803    0.8566455   0.99860891   0.75848747   -1.2298232            1  -0.16672651  -0.42352897   -0.4215059   0.34485535 0.0036067351   0.07231753  0.022432316   -0.3231838  -0.30927296   0.71607183        0.075    1.3687384        1e-10 1.5912707e-11    6.2842858    2.4458469    31.520363 -0.013845975  -0.19924025 0.0086341701   0.19689761   -1.1026859  -0.45282335 
 2033000    4.0218777    1.2771005    2.7447772  -0.23384961   0.85144868    1.0054835   0.74493656   -1.2298232            1  -0.13764933  -0.38610848  -0.39689444   0.37005494  -0.02098783 0.0079877005  0.036920922   -0.2913114   -0.2811771   0.71998224        0.075    1.3750822        1e-10 1.5999605e-11    6.2501542    2.4397129    31.520363 0.0059524429  -0.23138856 0.0012425696   0.21059645  -0.31483369    2.5402006 
 2034000    4.0188555    1.2710292    2.7478263  -0.22976184   0.84740092   0.99920474   0.74243233   -1.2298232            1  -0.13035923  -0.37765408   -0.3997264   0.38630278 -0.015735069 -0.019968525  0.018010465  -0.28350475  -0.27299074   0.71311109        0.075     1.366266        1e-10 1.5846913e-11    6.3103773    2.4457277    31.520363 -0.0035282333  -0.20132765 0.0066623476   0.21048606   0.47462326   0.62000973 
 2035000    4.0238334    1.2714377    2.7523957  -0.22948425   0.84767328   0.99976481   0.74250562   -1.2298232            1  -0.22366601  -0.46968721  -0.45415026   0.25283944 0.0010448393 -0.046708137 -0.00062190484  -0.37682664  -0.36637746   0.71336646        0.075    1.3756334        1e-10 1.5852588e-11    6.3081183    2.4461052    31.520363  0.010123623  -0.21413705 0.0037869672   0.21570604 -0.057402049  -0.30932174 
 2036000    4.0140924    1.2754845    2.7386079  -0.23029929   0.85037134    1.0170678   0.73509714   -1.2298232            1  -0.05269626  -0.32661956  -0.31796707   0.48649785 -0.0055151083  0.029801681 -0.024709231   -0.2043287  -0.19787763   0.71788816        0.075    1.3766749        1e-10 1.595307e-11    6.2683859    2.4376079    31.520363 -0.0079188554  -0.21381791 0.0037024147   0.18908238  -0.55779522    1.5078998 
 2037000    4.0154856    1.2738276     2.741658  -0.23781521   0.84926663    1.0040623   0.74222781   -1.2298232            1  -0.19102585  -0.44021259  -0.42799289   0.29512793 -0.0047559367 -0.057064565 -0.0071949728  -0.34412918  -0.33435075   0.72573493        0.075    1.3657975        1e-10 1.6127443e-11     6.200611    2.4661055    31.520363 0.0074111191  -0.21124058 0.0014390068   0.19868138   0.97426833    1.2177222 
 2038000    4.0255948      1.28582    2.7397748  -0.22770641   0.85726202     1.003575   0.75609412   -1.2298232            1  -0.13706506  -0.40252107  -0.41579315   0.40711902 0.0081644726  0.030359664  0.028285375  -0.29302867   -0.2803204   0.71624789        0.075    1.3796605        1e-10 1.591662e-11    6.2827411    2.4443846    31.520363 0.0073754233  -0.19733992 -0.004708071    0.2156249  -0.69123072    2.9027639 
 2039000    4.0322657    1.2911209    2.7411448  -0.23363545   0.86079616    1.0027102    0.7626727   -1.2298232            1   -0.2411543  -0.49034942  -0.48630227   0.25318878 -0.00019913275 -0.060543839 0.0018459411  -0.39847491  -0.38428619   0.71161523        0.075    1.3781996        1e-10 1.5813672e-11    6.3236421    2.4391823    31.520363 -0.0035388769  -0.21184607 -0.0013366139   0.19021055  -0.96967179    1.3062314 
 2040000    4.0419595    1.2903104    2.7516492  -0.22703524   0.86025578    1.0016218   0.76251148   -1.2298232            1  -0.15294766  -0.43018354  -0.40441405   0.37575461 -0.0033182215  0.025995142 0.0040660579  -0.31023501   -0.2959242   0.71802175        0.075    1.3744134        1e-10 1.5956039e-11    6.2672196    2.4545804    31.520363 -0.012192215  -0.20057294 0.0043716563   0.19634602  -0.34247531    1.7067836 
 2041000    4.0212382    1.2922612     2.728977  -0.24132636   0.86155641    1.0131588    0.7567286   -1.2298232            1  -0.06708505  -0.32300021  -0.31139718   0.43314225 -0.018943313  0.048100622 -0.024112681  -0.22317953  -0.21170842   0.72170549        0.075    1.3717047        1e-10  1.60379e-11    6.2352304    2.4499113    31.520363  0.011746339  -0.18765675 0.00051213123   0.21428564   -0.2921823    3.2850102 
 2042000     4.021051    1.2742284    2.7468226  -0.22339671   0.84953384    1.0000567   0.74545189   -1.2298232            1  -0.17595879  -0.43837461  -0.40215529   0.31265354 -0.016681005 -0.036610865  0.022044804  -0.32972716  -0.31871191   0.72092853        0.075    1.3782405        1e-10 1.6020634e-11    6.2419503    2.4601084    31.520363 -0.0026755378  -0.20626082 0.0016797586   0.20802151   -1.0638997    1.5785656 
 2043000     4.018752     1.271476     2.747276  -0.23148217   0.84769881    0.9804924   0.75588555   -1.2298232            1  -0.17796752  -0.42044993  -0.45031977   0.33686713 0.0043094003  0.020306329  0.022955303   -0.3338881  -0.31792793   0.70978893        0.075    1.3716868        1e-10 1.5773087e-11    6.3399129    2.4516376    31.520363 0.00075216112  -0.21716781 -0.0067028802   0.20066454  -0.54229812    1.0258655 
 2044000    4.0218369    1.2702197    2.7516172  -0.22813973   0.84686122   0.98580032   0.75079511   -1.2298232            1  -0.15579397  -0.41240022  -0.41472627    0.3597446 -0.0055449851  0.064994904 -0.031475198  -0.31066451  -0.29651206   0.71697132        0.075     1.360267        1e-10 1.5932696e-11    6.2764017    2.4472726    31.520363 -0.00031308657  -0.20203887 -0.0041984182   0.21365947  -0.70014663    1.5611074 
 2045000      4.01748    1.2719169    2.7455631  -0.23533817   0.84799275   0.99233705   0.74818628   -1.2298232            1  -0.17083755  -0.42548299  -0.39322539   0.30619574 -0.014401172  0.051865053 -0.0094997179  -0.32516996  -0.31248872   0.72224334        0.075    1.3622277        1e-10 1.6049852e-11    6.2305871    2.4426458    31.520363  0.016476696  -0.20173307  0.022406255   0.19394823   -1.0140991   0.63875495 
 2046000     4.020412    1.2748835    2.7455285  -0.23038795   0.84997061   0.99440096   0.75010478   -1.2298232            1 -0.097536396  -0.36872315  -0.31494709   0.39106106 -0.010689293  0.035999743  0.026846229  -0.25226455  -0.23948219   0.71252775        0.075    1.3650395        1e-10 1.583395e-11    6.3155435    2.4435997    31.520363 -0.0017483255  -0.19690891 0.0068116054   0.20407131   0.13422219    1.7639348 
 2047000    4.0211631    1.2752743    2.7458888  -0.23023041   0.85023115   0.99267704   0.75173863   -1.2298232            1  -0.27321042  -0.49794311  -0.51235142   0.19066328 -0.0016987796 -0.041556671 0.0064126881  -0.42827559  -0.41491012   0.71098194        0.075    1.3713354        1e-10 1.5799599e-11    6.3292747    2.4441227    31.520363 -0.0016346783  -0.18002283 0.0020438129   0.22060767  -0.12741452   0.34947649 
 2048000    4.0197578    1.2851001    2.7346577  -0.23272938   0.85678209      1.00826   0.75203992   -1.2298232            1 -0.098097744  -0.35125426  -0.38213821   0.43909924 -0.0015839104  0.024938463 -0.0036971645  -0.25322507  -0.24202185   0.71864442        0.075    1.3791343        1e-10 1.5969876e-11    6.2617894    2.4668298    31.520363 -0.007390779  -0.22547289 -0.0031552152    0.2003891    -1.041295     1.508875 
 2049000    4.0396478    1.2846499    2.7549979  -0.22616644   0.85648194   0.99273757   0.76227375   -1.2298232            1  -0.14267445  -0.41856519  -0.37535043   0.36589225  -0.01236816 0.0086833976  0.038602962  -0.29991277   -0.2843828   0.72011416        0.075    1.3709649        1e-10 1.6002537e-11    6.2490092    2.4603619    31.520363 -0.00062333876  -0.18104919 -0.0048421926   0.20840737    1.4314788  -0.26208987 
 2050000    4.0299047    1.2835697     2.746335  -0.22476994   0.85576176    1.0026363   0.75420506   -1.2298232            1  -0.14567934  -0.39809719  -0.41599925   0.37705843  0.012760569 -0.068167368 -0.052749062  -0.30125328  -0.28880068   0.71343226        0.075    1.3636278        1e-10 1.585405e-11    6.3075364    2.4446068    31.520363  0.008919082  -0.21438465 0.0087502624   0.19574458   -0.1469789   0.75084384 
 2051000    4.0287024    1.2942609    2.7344415  -0.23951139   0.86288963    1.0145306   0.75803518   -1.2298232            1  -0.19302626  -0.44301264  -0.44101794    0.3049518 -0.0022201589 -0.038033513 0.0019227826  -0.34939026  -0.33784546   0.70992408        0.075    1.3694382        1e-10 1.5776091e-11     6.338706    2.4498329    31.520363 -0.0011260504   -0.1963619 0.0048265303    0.1810852  -0.86511542   -1.3974919 
 2052000    4.0439925    1.2892691    2.7547234  -0.23123549   0.85956157    1.0105608   0.75515092   -1.2298232            1  -0.12482552  -0.39438898  -0.38792068   0.40783311 0.0029752384 -0.057604543 -0.0045324229  -0.28059456  -0.26907804   0.71531322        0.075    1.3679352        1e-10 1.5895849e-11    6.2909505    2.4462874    31.520363 0.00019600571  -0.19876959 -0.0096278144   0.20243567  -0.62796778    1.4872681 
 2053000    4.0066319    1.2759555    2.7306764  -0.23699686   0.85068535    1.0222423   0.73204769   -1.2298232            1  -0.10965048  -0.37315225  -0.35769503   0.40189584  0.010400354 -0.021984399  0.016290742   -0.2606539  -0.25557048   0.72053764        0.075    1.3501917        1e-10 1.6011948e-11    6.2453365    2.4436902    31.520363 -0.0039538992   -0.2070152 -0.0089043448   0.19236904   0.69961225    2.2602231 
 2054000    4.0163117    1.2836901    2.7326216  -0.23683869   0.85584202    1.0073406   0.75108544   -1.2298232            1  -0.13397474  -0.39167519  -0.39330935   0.38306031 0.0037247518  0.027799045   0.02826229  -0.28890518  -0.27776761   0.71426146        0.075    1.3717103        1e-10 1.5872477e-11    6.3002139    2.4428751    31.520363 0.0043024376  -0.20305614 -0.0078184021   0.19722813  -0.15665232     1.527347 
 2055000     4.039305    1.2866343    2.7526707  -0.22678349   0.85780493    1.0022058   0.75796025   -1.2298232            1  -0.19419829   -0.4485846  -0.43653132   0.30252105 0.0068310096  0.056865097 -0.012873311  -0.35054683  -0.33725819   0.71066414        0.075    1.3809232        1e-10 1.5792536e-11     6.332105    2.4749666    31.520363 -0.0019194548  -0.18864977 -0.0043540245    0.1881621   -1.7676748   -1.3312577 
 2056000    4.0233584    1.2806579    2.7427006  -0.24115721   0.85382043    1.0081574   0.74709951   -1.2298232            1    -0.103913  -0.36207644  -0.37992841   0.43026583  0.018406946  0.033666142   0.01071802  -0.25802124  -0.24782245   0.71729911        0.075    1.3753435        1e-10 1.593998e-11    6.2735335    2.4384212    31.520363 0.00020596782  -0.20960985 -0.0032108375   0.17412818    -1.319453  -0.48653756 
 2057000    4.0371875    1.2843171    2.7528704  -0.23089562   0.85626007   0.99884106   0.75767463   -1.2298232            1  -0.15288452  -0.42877476  -0.42238877   0.39250996 0.0061727617   0.11838508  0.023937424  -0.30917415  -0.29546412   0.72060396        0.075    1.3718011        1e-10 1.6013421e-11    6.2447617    2.4405864    31.520363 -0.0037682473  -0.19347748  -0.00412367   0.20217317  -0.76403937    1.4379196 
 2058000    4.0208507    1.2760155    2.7448352   -0.2238557   0.85072535   0.99898372   0.74821056   -1.2298232            1  -0.21246603  -0.44528853  -0.43861687    0.2465073 -0.0083314967  0.024559917 -0.0023069817  -0.36680346  -0.35506599   0.71519575        0.075    1.3641187        1e-10 1.5893239e-11    6.2919837     2.444958    31.520363 0.0064817714  -0.20898163 -0.0080691055   0.20058482   0.56928419    1.1563111 
 2059000    4.0135327    1.2799189    2.7336138  -0.23237164   0.85332771    1.0038743   0.74922967   -1.2298232            1  -0.14186284  -0.38634902  -0.38270356   0.34346406 0.00052777756 -0.041246673 -0.037857154  -0.29641048  -0.28516091   0.71608842        0.075    1.3761099        1e-10 1.5913076e-11    6.2841402     2.456144    31.520363 0.0037124157  -0.18456204 0.0049089439   0.21954642  -0.65553478   -1.2785437 
 2060000    4.0194793    1.2755874    2.7438919  -0.23021332   0.85043993     1.001674   0.74586591   -1.2298232            1  -0.16374798  -0.42127368  -0.42198979   0.35201955  0.014826565  -0.03095309 0.0061913813  -0.31760175  -0.30673196   0.72129406        0.075    1.3759759        1e-10 1.6028757e-11     6.238787    2.4610091    31.520363 -0.0076167469  -0.20497528  0.003336865   0.20799516  -0.33763033  -0.77066261 
 2061000     4.017835    1.2766344    2.7412006  -0.23861864   0.85113793   0.99984934   0.74830967   -1.2298232            1  -0.21759399  -0.43106749  -0.46843252   0.24671803 -0.008513017 -0.018718246 -0.033205245  -0.37195186  -0.36031751    0.7194969        0.075    1.3705278        1e-10 1.598882e-11    6.2543702    2.4511798    31.520363 -0.0057256102  -0.21593647 -0.0019063549    0.1903039   0.38141402   0.19401044 
 2062000    4.0066501    1.2626146    2.7440355   -0.2310947   0.84179088    0.9897698   0.73946862   -1.2298232            1  -0.20185595  -0.48358775  -0.45163686   0.32965677 -0.0035280331  0.018831546  -0.02483866  -0.35439012  -0.34314066   0.71890019        0.075     1.374481        1e-10 1.597556e-11    6.2595615    2.4461016    31.520363 -0.0015605726  -0.21447377 -0.008864588   0.18989499  -0.60473222     1.287151 
 2063000    4.0334663    1.2822012    2.7512651  -0.22679098   0.85484935   0.98757696   0.76308243   -1.2298232            1  -0.19110431  -0.40383251   -0.4426615    0.2731811 0.0039092039  0.060400185  0.049154424  -0.34850943    -0.332076   0.71424384        0.075     1.375883        1e-10 1.5872085e-11    6.3003693     2.446111    31.520363 0.0015129472   -0.1882132 0.0029800207    0.1829039   0.45213325   0.10366587 
 2064000    4.0194797    1.2853914    2.7340884  -0.23089308   0.85697626    1.0055964   0.75421169   -1.2298232            1  -0.26448145  -0.49797189  -0.47714997   0.18167752 -0.016697199  0.018446319 0.0018511955  -0.42005675  -0.40802534   0.71474705        0.075    1.3798952        1e-10 1.5883268e-11    6.2959337    2.4431579    31.520363 -0.004120988  -0.19060196 -0.0067236584    0.1936075   0.09464254   0.58485921 
 2065000    4.0099278    1.2754094    2.7345184  -0.23376633   0.85032121    1.0022426   0.74527152   -1.2298232            1  -0.10744218  -0.35503093  -0.39267851    0.4253829  0.013438216 -0.011303615  0.017846152  -0.26117335  -0.25050733   0.71943982        0.075    1.3728689        1e-10 1.5987552e-11    6.2548664    2.4426817    31.520363 0.0024544641  -0.20591639 -0.0069012618   0.18143252   0.43210317    1.2938502 
 2066000    4.0231191    1.2908217    2.7322974  -0.22838792   0.86059667    1.0128438   0.75532257   -1.2298232            1  -0.11690063  -0.36786495  -0.40787192     0.425035 -0.0019938277 -0.069324728  0.043276944  -0.27270508  -0.26147904   0.72100475        0.075    1.3711739        1e-10 1.6022328e-11    6.2412903    2.4422801    31.520363 -0.0058335316  -0.23741037 -0.0027920386   0.21993054    1.8358123  -0.71891521 
 2067000    4.0303867    1.2863603    2.7440264  -0.23507039   0.85762225   0.99489936    0.7627073   -1.2298232            1  -0.15282815  -0.39048425  -0.39620595   0.32820574 -0.011973406 -0.049242446 -0.039709764  -0.31015589  -0.29484508   0.71422115        0.075    1.3779219        1e-10 1.5871581e-11    6.3005695    2.4423488    31.520363 -0.0058056682  -0.20200126  0.012645159   0.19085223   0.23575353    1.2599169 
 2068000    4.0283071    1.2743586    2.7539486  -0.22419999   0.84962065   0.99641087   0.74812174   -1.2298232            1  -0.20223965   -0.4322516  -0.45928271   0.28481537 -0.0044633208 -0.063639778 -0.0092455888  -0.35655875  -0.34447234   0.71058037        0.075    1.3652627        1e-10 1.5790675e-11    6.3328516    2.4400799    31.520363 -0.013672206  -0.19145983 -0.0031586392   0.19025573  -0.86832716   0.60911423 
 2069000     4.015272    1.2726332    2.7426388  -0.23567359   0.84847033   0.99872875   0.74457127   -1.2298232            1  -0.11815658  -0.35908003  -0.40260116   0.40721145 -0.0053491876  0.061359465 0.0037191392   -0.2717433  -0.26072014    0.7226074        0.075    1.3706029        1e-10 1.6057942e-11     6.227448    2.4471388    31.520363 -0.0018069111  -0.24459972 -0.016227164   0.21373077   0.21023932   0.08196005 
 2070000    4.0321908    1.2903976    2.7417932  -0.23338669   0.86031393     1.017261   0.75178741   -1.2298232            1  -0.22898902  -0.47152901  -0.44256875   0.22713071 -0.0038390416  0.027500696  0.049623195  -0.38406426  -0.37419796   0.72099664        0.075    1.3666751        1e-10 1.6022148e-11    6.2413606    2.4582495    31.520363 -0.0082046325  -0.20464189 0.0028391252   0.18314847  -0.10729256      1.00989 
 2071000    4.0171447    1.2663534    2.7507913  -0.22077361   0.84428353    0.9846163   0.74725274   -1.2298232            1  -0.10317287   -0.3633486  -0.38203209   0.43586208 0.0081284378 -0.0097479029 -0.074243426  -0.25731272  -0.24372195   0.71089879        0.075    1.3720262        1e-10 1.5797751e-11     6.330015    2.4462634    31.520363 -0.0016566271  -0.19988418 -9.9363885e-05   0.21791505  -0.82336693    1.4518074 
 2072000    4.0315005    1.2774253    2.7540752   -0.2215836   0.85166525    1.0094873   0.74253234   -1.2298232            1  -0.17007644  -0.42047425  -0.41413741   0.32438234 -0.0041920519   -0.0368451   0.03808017  -0.32324258  -0.31417573   0.71138517        0.075    1.3668873        1e-10 1.5808559e-11    6.3256871    2.4346942    31.520363 0.00012616208  -0.19101791 -0.0031971927   0.22140175  -0.44538455    1.9935312 
 2073000    4.0189119      1.27675     2.742162  -0.23580394     0.851215   0.99872481   0.74921828   -1.2298232            1  -0.20230593  -0.46400676  -0.41352521   0.27061416 -0.021374706  0.051455428   0.02925514  -0.35685122  -0.34486893   0.71966512        0.075    1.3565774        1e-10 1.5992558e-11    6.2529083    2.4488793    31.520363 -0.0031191248  -0.21201567  -0.01025732   0.22227031   0.89452108     1.855039 
 2074000    4.0399753    1.2753001    2.7646752  -0.22760564   0.85024838    1.0025103   0.74496305   -1.2298232            1   -0.1895082  -0.45383525  -0.45439858   0.33970923 0.0035042643   0.07632678 -0.015455188  -0.34317574  -0.33261156   0.71965527        0.075    1.3634957        1e-10 1.5992339e-11    6.2529939    2.4403972    31.520363 0.00034730381  -0.19682357  0.002638177   0.18357112    0.7882349   -0.1757599 
 2075000     4.035894    1.2784632    2.7574308  -0.22934342   0.85235724   0.99875214   0.75113216   -1.2298232            1  -0.27460206  -0.51837634  -0.52059067   0.21516084  0.003590352  0.020883945  0.011936796  -0.42954213  -0.41716896   0.71597341        0.075    1.3717604        1e-10 1.591052e-11    6.2851496    2.4491273    31.520363 -0.0059079527   -0.1901617 -0.0025683438   0.18615774  -0.69947967   -1.1161931 
 2076000    4.0318252    1.2911655    2.7406597  -0.22959923   0.86082589    1.0141018   0.75483991   -1.2298232            1   -0.1463204  -0.41202026  -0.37699094      0.35005 -0.0012722826 -0.047929227  0.015759278  -0.30202529  -0.29107838   0.71519936        0.075    1.3930273        1e-10 1.5893319e-11     6.291952    2.4417019    31.520363 0.0029850933  -0.18530425  0.013510996   0.18304358 -0.027824736 -0.076699378 
 2077000    4.0161429    1.2656162    2.7505267  -0.22502909   0.84379206   0.99875731   0.73663537   -1.2298232            1  -0.26794576  -0.48396829  -0.50219324   0.18232424 -0.012508629 0.0067389768  0.024491602   -0.4198955   -0.4105134   0.71764448        0.075    1.3969466        1e-10 1.5947655e-11    6.2705144    2.4535277    31.520363    0.0034149  -0.20499947 -0.0089668283   0.21902458   -1.1717039  -0.78835675 
 2078000    4.0341807    1.2778027     2.756378  -0.23380931   0.85191686   0.99328781   0.75416836   -1.2298232            1  -0.10389506  -0.36884559  -0.38401516   0.44117556 -0.005021784  0.043338379  0.014656138  -0.25946143  -0.24568196   0.71892642        0.075    1.3803488        1e-10 1.5976143e-11    6.2593332    2.4416639    31.520363 -0.0043180277  -0.18837058 0.0071078219   0.18441853   0.61014832    1.0938296 
 2079000    4.0343535    1.2860413    2.7483122  -0.23174714   0.85740955    1.0087468    0.7527648   -1.2298232            1  -0.19351535   -0.4263114  -0.47867161   0.32443695 0.0062460902   0.04551351  0.028461077   -0.3487922  -0.33750894    0.7186986        0.075    1.4088947        1e-10 1.597108e-11    6.2613173    2.4499725    31.520363 0.00082596276  -0.21856039 -0.0072694679   0.18389022   -1.8928206   0.78125887 
 2080000    4.0290285    1.2844017    2.7446268  -0.23281638   0.85631643    1.0075553   0.75173962   -1.2298232            1  -0.24928274  -0.48303099  -0.51999603   0.25517878  0.004194734 -0.0043216237 -0.013547124  -0.40434812  -0.39310625   0.71539696        0.075    1.3946048        1e-10 1.589771e-11    6.2902141    2.4402813    31.520363 -0.0004951966  -0.19972315 -0.0014168043   0.20510521  -0.85323431  -0.11494428 
 2081000    4.0334471    1.2920595    2.7413876  -0.22690745    0.8614219    1.0201251    0.7516802   -1.2298232            1 -0.082899337  -0.33919428  -0.35773865   0.44823492 -0.00013476381  0.031531321 0.0099488716  -0.23795246  -0.22851712   0.71825437        0.075    1.4076017        1e-10 1.5961208e-11    6.2651899    2.4439626    31.520363 -0.0069749271  -0.20390911 -0.0068221553   0.17204619   0.59477049    4.5931093 
 2082000    4.0225832    1.2769132      2.74567  -0.23066415   0.85132381   0.99178093   0.75420764   -1.2298232            1  -0.18162663  -0.43166962   -0.4080205   0.29481021  0.005249771   0.13784058 -0.035806823  -0.33720111  -0.32319843   0.71722588        0.075    1.4021498        1e-10 1.5938353e-11    6.2741741    2.4499396    31.520363 -0.0086950469  -0.20192362 2.7140954e-05   0.18786604  -0.77401243  -0.22350192 
 2083000     3.997821    1.2627286    2.7350924  -0.23070145   0.84186686   0.98727112    0.7413263   -1.2298232            1  -0.17913913  -0.42157806  -0.43466288   0.31882356  0.011901122   0.16085789  0.040758683   -0.3320565  -0.32006717    0.7139793        0.075    1.4045036        1e-10 1.5866207e-11    6.3027037    2.4409992    31.520363 -0.0016665221  -0.18699337 0.0080204979   0.20219429   -2.8401356   0.31349505 
 2084000    3.9911898    1.2624019    2.7287879  -0.22487601   0.84164909   0.98824023   0.74028718   -1.2298232            1  -0.12010281  -0.37420938   -0.3845127   0.39841365 -0.013336032  0.023244907 0.0090706533  -0.27280583  -0.26116918   0.71714054        0.075    1.3917012        1e-10 1.5936456e-11    6.2749207    2.4641954    31.520363 -0.0043352745   -0.1999119 0.0041272182   0.19442057    1.4342846    1.6680335 
 2085000    4.0181221    1.2709492    2.7471728  -0.22928611   0.84734763   0.99932763   0.74225712   -1.2298232            1  -0.18397039  -0.44108331   -0.4171097   0.30628183 0.0091986323   0.02890934  0.053858252  -0.33707976  -0.32661944   0.71632364        0.075    1.3983166        1e-10 1.5918303e-11    6.2820767    2.4376315    31.520363 -0.0084690222  -0.20691106 0.0092999098   0.21179388   0.24376622  -0.54173427 
 2086000    4.0072399    1.2716555    2.7355844  -0.23122502   0.84781851   0.99646036   0.74503807   -1.2298232            1  -0.19755762  -0.44124732  -0.44738078   0.29595525 -0.00085796215 -0.025632923  0.014993924  -0.35124063  -0.33979737   0.71971431        0.075    1.4137166        1e-10 1.5993651e-11    6.2524809    2.4597123    31.520363 0.00047619607   -0.2185166 -0.011521259   0.17557302    0.6166364    2.2144387 
 2087000    4.0085429    1.2734607    2.7350822  -0.23288296     0.849022   0.99862957    0.7455734   -1.2298232            1  -0.15015946  -0.39975256  -0.41654263    0.3658168 -0.00078352084  0.053119441  0.016476043   -0.3039529  -0.29270887   0.72070317        0.075    1.4117959        1e-10 1.6015626e-11     6.243902     2.441026    31.520363 -0.00066012158  -0.18753104 -0.0017678397   0.19047704   -1.3524863   0.06002124 
 2088000    4.0351648    1.2841187    2.7510461  -0.23302531   0.85612776    1.0030812   0.75451655   -1.2298232            1  -0.22743882  -0.50758365  -0.47723105   0.30249822 -0.0049185271 -0.011568206  0.019424746  -0.38307702  -0.37062367   0.71867389        0.075    1.4099494        1e-10 1.5970531e-11    6.2615326    2.4485552    31.520363 -0.0074805053  -0.20922817 -0.00012875994   0.19579332     0.568243   0.95623345 
 2089000    4.0279838    1.2890213    2.7389625  -0.22517428   0.85939635    1.0070293   0.75731523   -1.2298232            1   -0.1233788  -0.38445537  -0.38135017   0.39566914 -0.0013817103 -0.0043671351 -0.0082650024  -0.27959429  -0.26712721   0.71030793        0.075     1.414442        1e-10 1.5784621e-11    6.3352805    2.4485602    31.520363 -0.0058516296  -0.18635995 0.0019444027    0.1906027    0.1301373    2.8392609 
 2090000    4.0142422    1.2729658    2.7412764  -0.22841412   0.84869207   0.99741761    0.7458538   -1.2298232            1  -0.11124199  -0.36292782  -0.36233391   0.39153577 -0.0040322676   0.10538724  0.045752892  -0.26509327  -0.25361839   0.71604489        0.075    1.4257747        1e-10 1.5912109e-11    6.2845222    2.4580109    31.520363 -0.0090061727  -0.18355995 0.0052196291   0.20530425   -1.3135423    2.3808091 
 2091000     4.006739    1.2747618    2.7319773  -0.22834569   0.84988945     0.999153     0.746679   -1.2298232            1  -0.20456915  -0.44153178  -0.45375334   0.28157767 -0.005372557  0.042952985  0.025521201  -0.35859065  -0.34719327   0.72160292        0.075    1.4402389        1e-10 1.603562e-11    6.2361167    2.4570372    31.520363 -0.0094973825  -0.21189401 0.0060463089   0.22150495  -0.37755445   -2.2031153 
 2092000    4.0248635    1.2817817    2.7430818  -0.23473495   0.85456965    1.0004326   0.75371291   -1.2298232            1  -0.12205497  -0.40589859  -0.38202778   0.42176147 -0.0074891367 -0.0072419249 -0.009827664  -0.27752739  -0.26486174   0.71567008        0.075    1.4276364        1e-10 1.590378e-11    6.2878135    2.4458043    31.520363 -0.0061736905  -0.19115484 -0.00099068267   0.21219039  -0.47330177    2.7259488 
 2093000    4.0021659      1.26243    2.7397359  -0.23120575    0.8416678   0.99644277   0.73464259   -1.2298232            1  -0.18567596  -0.39469419   -0.4314183   0.26908461 -0.0088833875  0.027911009  0.050267762  -0.33721464  -0.32791321   0.71092632        0.075    1.4102426        1e-10 1.5798363e-11    6.3297699    2.4465824    31.520363 -0.015896539  -0.20495513  0.014295434   0.19216383  -0.80184575    1.4757268 
 2094000    4.0164504    1.2726011    2.7438493  -0.22600208   0.84844894    1.0040335   0.74086414   -1.2298232            1  -0.13281597  -0.36629378  -0.39719841   0.36504427 -0.010045701 -0.029425104 -0.0057530751  -0.28563801  -0.27613676   0.71585226        0.075    1.4269344        1e-10 1.5907828e-11    6.2862133    2.4489924    31.520363 -0.0010584898  -0.20766084 -0.006390628   0.23145556    1.6443087     1.087733 
 2095000    4.0200617    1.2786085    2.7414532  -0.23008026   0.85245409     1.003119    0.7482741   -1.2298232            1  -0.16974165  -0.41018685  -0.43509318    0.3360551 0.0032351949  0.043983591 -0.0053461449  -0.32409217   -0.3129319   0.71836298        0.075    1.4214006        1e-10 1.5963622e-11    6.2642426    2.4419226    31.520363  0.009035622  -0.21442669 -0.0056237467   0.20072696   -0.5801401  -0.11207985 
 2096000    4.0079058    1.2696601    2.7382457  -0.23738347   0.84648814    0.9971979   0.74227656   -1.2298232            1  -0.14320745  -0.42697354  -0.38365441   0.38100561  0.016320979 -0.027861686  0.011763622  -0.29632083  -0.28555249   0.71480028        0.075    1.4052627        1e-10 1.5884451e-11    6.2954648    2.4436475    31.520363 0.0078407215  -0.19045123 -0.004933962   0.19610478  -0.21964727  -0.22317765 
 2097000    4.0057476     1.268096    2.7376517  -0.22623864   0.84544533   0.98976821   0.74565345   -1.2298232            1   -0.2252422  -0.48945751  -0.50171267   0.31544357  -0.01129162  0.027627849 -0.0070323126  -0.37905215  -0.36652669   0.71302479        0.075    1.4092929        1e-10 1.5844995e-11    6.3111411    2.4447515    31.520363 -0.00012879098  -0.21924315 -0.012841003   0.21119031   -1.6434497    1.4739684 
 2098000    4.0234661    1.2815232     2.741943  -0.22798255    0.8543973   0.99421924   0.75772098   -1.2298232            1  -0.11612407  -0.41428595  -0.38112429   0.44703805 0.0037841796  0.060505091  0.057684673  -0.27242325  -0.25804392   0.71478053        0.075    1.4036754        1e-10 1.5884012e-11    6.2956387    2.4556567    31.520363 -0.00070234587  -0.19174798 -0.001491311   0.19156325  -0.73974711   -1.3970815 
 2099000    4.0124656    1.2779788    2.7344868  -0.23773263   0.85203425   0.99267846   0.75478869   -1.2298232            1  -0.13350941  -0.39037486  -0.39700328    0.3868499 -0.0061690973  0.066817422 -0.029339986  -0.28920374  -0.27520932   0.72057734        0.075    1.3880404        1e-10 1.601283e-11    6.2449924    2.4469452    31.520363 -0.0039136523  -0.22559043 -0.0013507744   0.20567584   0.30773351   0.56573938 
 2100000     3.992051    1.2665559    2.7254951  -0.23336174    0.8444186   0.98935521    0.7442019   -1.2298232            1  -0.15190332  -0.38725014  -0.39525267   0.32679283  0.017207816  0.047925605 -0.017271567  -0.30541386  -0.29312886   0.71887847        0.075    1.3993601        1e-10 1.5975077e-11    6.2597507    2.4402207    31.520363 -0.0066700781  -0.23083122 0.00095543381   0.22922514   -1.2902942   0.88996189 
 2101000    4.0060866    1.2645487    2.7415379  -0.23016417   0.84308033   0.98376173   0.74580816   -1.2298232            1  -0.14930203    -0.428649  -0.40060124   0.38134416  -0.01017138   0.10798056 -0.040450697  -0.30314389  -0.28972912   0.71608323        0.075    1.4018613        1e-10 1.5912961e-11    6.2841857    2.4440572    31.520363 0.0034584849  -0.20894214 -0.0012338228    0.2196975   -1.2454865   0.35435361 
 2102000    4.0052588    1.2763385    2.7289203  -0.23017805   0.85094069   0.98986328   0.75488639   -1.2298232            1  -0.11545671  -0.37104685  -0.40484202   0.42951874 0.00090549701 0.0045649435 -0.00062416064  -0.27117119  -0.25675477   0.71603395        0.075    1.4114647        1e-10 1.5911866e-11    6.2846182    2.4438565    31.520363 0.00030181586  -0.21139712 -0.0029712939    0.2181156  -0.37012888   0.35856509 
 2103000    4.0221544    1.2793218    2.7428326  -0.22995412   0.85292964   0.98885024   0.75895296   -1.2298232            1 -0.039306828  -0.31201932  -0.35520646   0.54930529 0.0088872642 -0.026749659 -0.046798219  -0.19586014  -0.18046028    0.7169974        0.075    1.4156482        1e-10 1.5933276e-11    6.2761733    2.4538331    31.520363 -0.0026566458  -0.21687177 -0.0012911044   0.19324256   0.88702047   0.80189825 
 2104000    4.0193346    1.2880319    2.7313027  -0.23161158   0.85873673    1.0006085   0.76064229   -1.2298232            1  -0.11875237  -0.37434736  -0.38100988   0.39910014 -0.018495192  0.033576412 -0.002076313  -0.27565415  -0.26158426   0.71964822        0.075    1.4134492        1e-10 1.5992183e-11    6.2530551    2.4518876    31.520363 -0.0017821869   -0.1981783 -0.0025466909     0.195796   0.24336733  -0.86022971 
 2105000     4.011812    1.2765084    2.7353036  -0.23745436   0.85105392     1.003242    0.7458198   -1.2298232            1  -0.11427901  -0.37916741  -0.37589836   0.41222875 -0.0025368233  0.056049609 0.0091220911  -0.26812327   -0.2574868   0.72222478        0.075    1.4122349        1e-10 1.604944e-11    6.2307472    2.4514822    31.520363 0.0051006181  -0.20871444 -0.0049092664   0.18868988     -2.42236   0.68646731 
 2106000    4.0198402    1.2792655    2.7405746  -0.22668758   0.85289214   0.99518109   0.75450848   -1.2298232            1  -0.12347489  -0.39723473    -0.347345   0.37415505 0.0073148047 0.0099237315  0.002790795  -0.27911142  -0.26553204   0.71650642        0.075    1.4073239        1e-10 1.5922365e-11    6.2804741    2.4451686    31.520363 -0.0040832208  -0.20458277 -0.0039667951   0.19347316   -1.3871347  0.082955855 
 2107000    4.0141326    1.2772603    2.7368723  -0.23122607   0.85155522   0.99315126   0.75365093   -1.2298232            1    -0.205818   -0.4509537  -0.43296056   0.26646028 -0.0043903568  0.010982156 -0.051299615  -0.36127763   -0.3475854   0.71371805        0.075    1.4160862        1e-10 1.5860401e-11    6.3050108    2.4479154    31.520363 -0.011920121  -0.19724101 -0.012923071   0.20440313  0.049807555   0.18327133 
 2108000    4.0129913     1.278016    2.7349753   -0.2278017   0.85205908    1.0074232   0.74462714   -1.2298232            1  -0.14254294  -0.40962921  -0.37158267   0.35358305 -0.0055843123 -0.014908316 -0.024467924  -0.29614119   -0.2863476   0.71365727        0.075    1.4228696        1e-10 1.585905e-11    6.3055478    2.4293216    31.520363 0.0024486187  -0.19005802  0.014567643   0.23186907   0.64105992   0.88834588 
 2109000    4.0045185    1.2628348    2.7416836  -0.23736633   0.84193771   0.99280595   0.73761602   -1.2298232            1  -0.17057078  -0.40145888  -0.43927562   0.32902214 -0.0019368643  0.047984198 -0.026730912  -0.32272281  -0.31228889   0.71741116        0.075    1.4200704        1e-10 1.594247e-11    6.2725536    2.4498041    31.520363 -0.0088734304  -0.19920417 -0.0059986933   0.20342296      1.40033   -1.6594551 
 2110000    4.0251891    1.2869132    2.7382759   -0.2295836   0.85799085    1.0065027   0.75530138   -1.2298232            1  -0.12419608  -0.38670922  -0.40685093   0.42097191 -0.0031507883  -0.01104677 0.0013000706  -0.27999616  -0.26786933   0.71850338        0.075    1.4153145        1e-10 1.5966742e-11    6.2630186    2.4494755    31.520363 -0.0093600907  -0.19049125 0.0065329927   0.20928136   -1.9596249    1.5393037 
 2111000    4.0419268    1.2866574    2.7552694  -0.22565594   0.85782033     1.002208   0.75798484   -1.2298232            1  -0.14288369  -0.39948028  -0.40436426   0.37519346 -0.010138199  -0.11584073 -0.016307831  -0.29923731  -0.28594389    0.7169466        0.075    1.4149918        1e-10 1.5932147e-11    6.2766181    2.4494487    31.520363 -0.0071507172  -0.18962422 -0.008765413   0.20358087   0.73668099   0.65227742 
 2112000    4.0318858    1.2858072    2.7460786  -0.22797835   0.85725348    1.0085007   0.75267098   -1.2298232            1  -0.11945995  -0.37069851  -0.39274471   0.40506337 -0.0018796395 -0.055356008 -0.037354877  -0.27471744  -0.26341841    0.7105321        0.075    1.4212466        1e-10 1.5789602e-11    6.3332818    2.4411452    31.520363 -0.0011995513   -0.1919179 0.0069076189   0.20560995   0.66383864   0.71292074 
 2113000    4.0409265    1.2898653    2.7510612     -0.23226   0.85995906    1.0077727   0.75775291   -1.2298232            1  -0.16714891  -0.46264157  -0.41390443   0.37509925  0.010552723  0.047752205 0.0053410437  -0.32345469  -0.31100345   0.71726789        0.075    1.4134346        1e-10 1.5939287e-11    6.2738065    2.4382675    31.520363 2.8155623e-05  -0.19349716 0.0051294746   0.19107637  -0.54665185    1.9787504 
 2114000    4.0146548    1.2637343    2.7509205  -0.23146095   0.84253737    1.0034978   0.73123183   -1.2298232            1 -0.063279822  -0.35432964  -0.31962254   0.48411272  0.014218696  0.011164521  0.043065614  -0.21411495  -0.20652414   0.72229532        0.075    1.4149286        1e-10 1.6051007e-11    6.2301387    2.4550226    31.520363 -0.0058188734  -0.23631088 -0.0023435964   0.20881195  -0.31490441    1.1581311 
 2115000    4.0058205    1.2751109    2.7307096  -0.23589256   0.85012222    1.0002733   0.74629761   -1.2298232            1  -0.15798967  -0.42388114  -0.40102561   0.35093775 0.0058884035 -0.004593335   -0.0429112  -0.31193249   -0.3007737   0.71426359        0.075    1.4203709        1e-10 1.5872524e-11    6.3001951    2.4470333    31.520363 0.0068430808  -0.19068194 -0.00059470262   0.19611837  -0.59114126  -0.89766743 
 2116000    4.0338766    1.2834663    2.7504103  -0.22672958    0.8556928    1.0067019   0.75127496   -1.2298232            1 -0.029013187  -0.29903172  -0.34425392   0.55624609 -0.0035721652 -0.017062911  0.011409845  -0.18398272  -0.17271487   0.71039915        0.075    1.3975226        1e-10 1.5786648e-11    6.3344671    2.4390417    31.520363 0.0029499749  -0.20543972 0.0037732577   0.22174274    1.0578386    2.2287742 
 2117000    4.0273974    1.2806253    2.7467721  -0.23481674   0.85379872    1.0167867   0.74109119   -1.2298232            1  -0.12793825  -0.39308542  -0.40730224   0.41657291 -0.0051350659 -0.016539985 0.0055567536  -0.28080712  -0.27307949   0.71787197        0.075    1.3978672        1e-10 1.595271e-11    6.2685272    2.4540346    31.520363 0.0012255455  -0.21230514 0.0012083146   0.19898627    1.4393505   0.91217688 
 2118000    4.0452633     1.291953    2.7533104  -0.22825462    0.8613509    1.0082615   0.75976979   -1.2298232            1  -0.17037676  -0.42626985   -0.4376543   0.35279388 -0.0035993476  0.022892858 0.0063090345  -0.32709856  -0.31430107   0.72393565        0.075    1.3973576        1e-10 1.6087459e-11    6.2160221      2.44804    31.520363 -0.0059595848  -0.21846537 -0.0014017005   0.19287431   0.58620603    2.5687911 
 2119000    4.0328152     1.285408    2.7474072  -0.23281222   0.85698734    1.0110451   0.75045991   -1.2298232            1  -0.14998959     -0.40169  -0.39252968   0.34425092 -0.0010414765 -0.041954672  -0.04302665  -0.30479099  -0.29431125   0.71529167        0.075    1.4116233        1e-10 1.5895371e-11    6.2911399    2.4419583    31.520363 -0.0050167799   -0.1923867 -0.0035826337   0.20094805  -0.48649758    1.6359777 
 2120000    4.0335345    1.2818291    2.7517053    -0.219151   0.85460129    1.0090522   0.74780156   -1.2298232            1    -0.246702  -0.48520718   -0.4881303   0.23323147 0.0059889832 -0.0059133327 -0.020184978  -0.40095506  -0.39073919   0.71065776        0.075    1.4204576        1e-10 1.5792395e-11    6.3321619    2.4385755    31.520363 -0.0035567188  -0.17789703 -0.00035708261    0.1999779   0.14812745    0.5290832 
 2121000    4.0379975    1.2825337    2.7554637  -0.22135482   0.85507107    1.0102844   0.74774376   -1.2298232            1  -0.17560875   -0.4466357  -0.42231836    0.3421278 0.0031720233 -0.043924239 0.0068881041  -0.32984988  -0.31982183   0.71552356        0.075    1.4264143        1e-10 1.5900524e-11    6.2891011    2.4391949    31.520363 0.0012565485  -0.22695722 0.0008617628   0.17937965   0.77686778   0.81381247 
 2122000    4.0311225    1.2832183    2.7479042  -0.22712213    0.8555275    1.0149633   0.74527826   -1.2298232            1  -0.18178205   -0.4134954  -0.42231155   0.29046078 -0.0025479188 -0.099438848 -0.005938818  -0.33551461  -0.32666302   0.71300948        0.075    1.4230059        1e-10 1.5844655e-11    6.3112765    2.4433835    31.520363 -0.0026397117  -0.16742492 -0.010666588   0.20971698   0.80638426    1.9854672 
 2123000    4.0415202    1.2897409    2.7517792  -0.22888036   0.85987613    1.0059178   0.75889622   -1.2298232            1  -0.14611182  -0.39342159  -0.38803858   0.34312472 -0.011283028  0.051636699 -0.042556718  -0.30265342  -0.28970158   0.71413398        0.075     1.408529        1e-10 1.5869644e-11    6.3013386    2.4519421    31.520363 0.0016298721  -0.18704443 0.0086426784   0.18572606  -0.73960379   -1.5766657 
 2124000    4.0142283    1.2793824    2.7348459  -0.22851408   0.85297004    1.0089282   0.74512715   -1.2298232            1  -0.11601922  -0.33751263  -0.40293562   0.39239058  0.015132293  0.015094958  0.013687225  -0.26972061   -0.2600387   0.71721272        0.075    1.4216505        1e-10 1.593806e-11    6.2742892     2.445994    31.520363 -0.00034462359  -0.22368592 -0.0032655343   0.21274858   0.15271802    1.2135636 
 2125000    4.0373709    1.2878887    2.7494822  -0.23355341   0.85864125    1.0070033   0.75605545   -1.2298232            1  -0.16105164  -0.46274821  -0.36709421    0.3466875  0.012120771 -0.019162947 -0.021567229  -0.31700727  -0.30479635   0.71504928        0.075    1.4107872        1e-10 1.5889984e-11    6.2932726    2.4446362    31.520363 0.0015842944  -0.20424334 0.0024537421   0.19532341  -0.39281266   0.48292332 
 2126000     4.034274    1.2883812    2.7458928  -0.23060097    0.8589696    1.0079582   0.75595027   -1.2298232            1  -0.18857681     -0.43054  -0.43405385   0.29886341  0.012097558  0.023240429 -0.0038505367  -0.34451074  -0.33245783   0.71185569        0.075    1.4114172        1e-10 1.5819015e-11     6.321506    2.4481936    31.520363 -0.0058449288  -0.18351614 -0.013685999   0.18707523  -0.20409518    1.0358658 
 2127000    4.0374061    1.2953019    2.7421042  -0.23300374   0.86358365    1.0055099   0.76545204   -1.2298232            1  -0.30060437  -0.50861698   -0.5293241   0.13612796  0.012012798  0.099262079 -0.048873447  -0.45849829   -0.4441359   0.71639684        0.075    1.4158953        1e-10 1.591993e-11    6.2814347    2.4448327    31.520363 -0.0039866735  -0.22375818 0.0018729499   0.20408238   -1.0908674   -1.5541508 
 2128000     4.014825    1.2756328    2.7391922  -0.23100252   0.85047019    1.0114124   0.73917804   -1.2298232            1  -0.17470038  -0.39668343  -0.45271543   0.32529771  0.001714384  -0.01310088 -0.015505231  -0.32717462  -0.31907447    0.7177335        0.075    1.4041728        1e-10 1.5949633e-11    6.2697366    2.4402398    31.520363 -0.0029080066  -0.18478147 -0.0065239736   0.19084598  -0.95327662   0.96989573 
 2129000    4.0388072    1.2943092     2.744498  -0.23114509   0.86292185    1.0189626   0.75502276   -1.2298232            1  -0.13840496  -0.41640109  -0.36447857   0.36566477 0.00032915113 -0.050564567  -0.01366954  -0.29414757   -0.2838568   0.71114831        0.075    1.3955854        1e-10 1.5803296e-11     6.327794    2.4500358    31.520363 -0.0099089227   -0.1982213 0.0036964472   0.17954661    1.5852768  -0.56162064 
 2130000    4.0284033    1.2765087    2.7518946  -0.22985111   0.85105417    1.0141184   0.73829355   -1.2298232            1  -0.10912408  -0.35188407  -0.35453059   0.37904241  0.017171068   -0.1134487  0.010704211  -0.26141587  -0.25388444   0.70920356        0.075    1.3956141        1e-10 1.5760079e-11    6.3451458    2.4410769    31.520363 -0.0012503029  -0.19460601 -0.0012309175   0.20855919   0.51987489  0.094013256 
 2131000    4.0329823    1.2914988    2.7414836  -0.23123987   0.86104809     1.013901   0.75535484   -1.2298232            1  -0.10643677  -0.38866844   -0.3682481   0.43760623 -0.0022246666 -0.057251208  -0.01923667  -0.26224788  -0.25116609   0.71811388        0.075    1.3871421        1e-10 1.5958086e-11    6.2664156    2.4603038    31.520363 0.0077334746  -0.19140689 -0.0017293043   0.19164344   0.14946621    1.9807402 
 2132000    4.0439631    1.2860851     2.757878  -0.22593943   0.85743877    1.0180359   0.74638606   -1.2298232            1  -0.19961268  -0.45745886  -0.42559881   0.28421963  0.011024099  0.018417947   -0.0096122  -0.35357375  -0.34493224   0.71978013        0.075    1.4030512        1e-10 1.5995114e-11    6.2519091    2.4429555    31.520363 -0.0045526824  -0.18685515 -0.010038724   0.19811832   0.19588967    2.1143529 
 2133000    4.0210357    1.2836103    2.7374254  -0.22835537   0.85578879    1.0137186   0.74658173   -1.2298232            1  -0.17302713  -0.38888429  -0.44030977   0.31011266 0.0059728377 -0.0091497551  0.010251021  -0.32702856  -0.31773042   0.71424792        0.075    1.4171732        1e-10 1.5872176e-11    6.3003334    2.4489882    31.520363  0.010221819  -0.18753512 -0.0030625654   0.17448572    1.3500381    1.9550425 
 2134000    4.0311921     1.283803    2.7473891  -0.22276417   0.85591726    1.0136576   0.74684135   -1.2298232            1  -0.22080073  -0.44719678  -0.43799374   0.22278834 0.0053324232  -0.13064327 -0.034979568  -0.37485571   -0.3654953   0.71303126        0.075     1.405205        1e-10 1.5845139e-11    6.3110838    2.4561318    31.520363 -0.00035138592  -0.17371859  0.008716364   0.18040016  -0.82260726    1.0584714 
 2135000     4.046877    1.2882059    2.7586711  -0.22862379   0.85885271    1.0122107   0.75280972   -1.2298232            1  -0.18765218  -0.45173483  -0.40848906   0.29726736 -0.0043341639 -0.087796773  0.023118291  -0.34293829  -0.33214022   0.71620901        0.075    1.4102663        1e-10 1.5915756e-11    6.2830821    2.4582252    31.520363 -0.0039138115  -0.20587593 -0.016613847   0.21603527   0.55162653  -0.13254558 
 2136000    4.0401382    1.2936066    2.7465315  -0.22884565   0.86245341    1.0262378   0.74919558   -1.2298232            1  -0.16945528  -0.42332787  -0.45407323   0.36903525 -0.0058240846 -0.061292212 0.0052301568  -0.32399589  -0.31594562   0.71281526        0.075    1.4165404        1e-10 1.5840339e-11    6.3129962      2.44425    31.520363 0.0080862005  -0.22237273 -0.00067183285   0.21723993   0.78478925   0.30880666 
 2137000    4.0446931    1.2911592    2.7535339  -0.22338875   0.86082172    1.0209038   0.75012577   -1.2298232            1  -0.14821254  -0.40867949  -0.39456761   0.35860948  0.012694687  0.094164758  0.033179551  -0.30294502  -0.29394148   0.71474075        0.075    1.4145465        1e-10 1.5883128e-11    6.2959892    2.4604538    31.520363 -0.00017358763  -0.20846135 7.9097806e-05   0.22441282   0.24704356  -0.13265162 
 2138000    4.0598408    1.2815268     2.778314  -0.22202616   0.85439972    1.0108309   0.74622958   -1.2298232            1   -0.1141668  -0.38463532  -0.37600381   0.41813874 -0.011107627 -0.052488726 -0.00092362321  -0.26809559  -0.25845788   0.70688164        0.075    1.4173043        1e-10 1.5708481e-11     6.365988    2.4364679    31.520363 0.0038035032  -0.16777625 0.00034104143   0.20998845    0.1656671    1.6782197 
 2139000    4.0473771      1.28591    2.7614671  -0.22592245   0.85732202    1.0201868   0.74470006   -1.2298232            1  -0.26759806  -0.50810276  -0.49359183    0.1989004 0.00067571119  0.040035479 0.0034965155  -0.42121136  -0.41322465   0.71207882        0.075     1.420059        1e-10 1.5823974e-11    6.3195252    2.4520268    31.520363  -0.01500971  -0.21007195 -0.0010241957   0.20602447   -1.2135189   0.27047722 
 2140000    4.0376453    1.2933876    2.7442576  -0.22626364   0.86230741    1.0257005   0.74932031   -1.2298232            1 -0.066673786  -0.32954707  -0.32519017   0.45471588 0.00019069163 -0.0087556541 0.00064624166  -0.22124012  -0.21308743   0.71578973        0.075     1.416753        1e-10 1.5906439e-11    6.2867624    2.4648987    31.520363 -0.0030277932  -0.22501959 -0.0073711128   0.19789829     0.257307   -1.2985965 
 2141000    4.0266568    1.2775659    2.7490909  -0.23463474   0.85175898    1.0145889   0.73916064   -1.2298232            1  -0.21746233  -0.46406681  -0.45820262   0.26988244 0.00052300323  0.038323013 -0.053183851  -0.36993297  -0.36228984    0.7156459        0.075    1.4138886        1e-10 1.5903242e-11    6.2880259    2.4410375    31.520363 0.0047158771  -0.24296851 -0.010071957   0.17920686  -0.59467146   0.60032255 
 2142000    4.0313555    1.2801635     2.751192  -0.23391441   0.85349085   0.99751794   0.75390443   -1.2298232            1  -0.15569336  -0.37817255  -0.43854841   0.34964089 -0.00031307216 -0.0043704539  0.011138571  -0.31120529  -0.29808408   0.71552643        0.075    1.4078073        1e-10 1.5900587e-11    6.2890759    2.4369549    31.520363 -0.001458121  -0.18606306  0.005016934   0.20857093   0.64547431    1.7834323 
 2143000    4.0208563    1.2853942    2.7354621  -0.22888495   0.85697813    1.0231568   0.74206287   -1.2298232            1 -0.079310756  -0.35046773  -0.36030467   0.47284014 -0.0020251778 -0.061658194 -0.0033446296  -0.23238006   -0.2253613   0.71558687        0.075    1.3883409        1e-10 1.590193e-11    6.2885447     2.438506    31.520363 -0.0013872295  -0.19959629 0.0041046663   0.20082447  -0.88247375    1.9742595 
 2144000    4.0396632    1.2879519    2.7517112  -0.22626244    0.8586834    1.0132991   0.75177002   -1.2298232            1  -0.11284983  -0.38923656  -0.36011342   0.41080048 -0.0070840408 -0.054473155 -0.00030632349  -0.26792148  -0.25749324   0.71192989        0.075    1.4029221        1e-10 1.5820664e-11    6.3208472    2.4431449    31.520363 0.0055220257  -0.18168963 -0.014743528    0.2188236   0.16925453    1.1830249 
 2145000    4.0406893    1.2895637    2.7511256  -0.22565712   0.85975796    1.0150064   0.75240684   -1.2298232            1  -0.12745022  -0.37979084  -0.38186248   0.37930265 0.0061266269  0.028583001 -0.010258139  -0.28265323  -0.27233734   0.71311315        0.075    1.4066645        1e-10 1.5846959e-11     6.310359    2.4438573    31.520363 -0.0032627222  -0.21811745 -0.0020237435   0.18738474   0.34035618     2.362223 
 2146000    4.0474207    1.2946583    2.7527625  -0.23158848   0.86315456    1.0306351   0.74733899   -1.2298232            1   -0.2318344  -0.47414205  -0.49362339   0.27226224 -0.00030285163 -0.0058197664 0.0047231249  -0.38599204  -0.37895244   0.72048848        0.075    1.4057218        1e-10 1.6010855e-11    6.2457626    2.4529828    31.520363 -0.0031473329   -0.2004562 0.0039945417   0.20407549  -0.75412073   0.58143405 
 2147000    4.0230088    1.2881985    2.7348103  -0.23235682    0.8588478    1.0265276   0.74289393   -1.2298232            1  -0.22204448  -0.44540358  -0.45521512   0.23448526  0.015490955  0.032747977 -0.0096610714  -0.37528521  -0.36857618   0.71414611        0.075    1.4204448        1e-10 1.5869914e-11    6.3012315    2.4521261    31.520363 -0.0036519977  -0.20548499  0.001698301   0.21795818  -0.69154155   0.32732792 
 2148000    4.0496606    1.3033483    2.7463123  -0.22479939   0.86894821    1.0193252   0.76496907   -1.2298232            1  -0.11067307  -0.38946027  -0.37721265   0.43465372 -0.0026363587 -0.014414261 -0.016745573  -0.26846736  -0.25617667    0.7087558        0.075    1.4242195        1e-10 1.5750129e-11    6.3491544    2.4428248    31.520363 -0.0033543825  -0.19658798 -0.003585858   0.19752623  -0.63884699    2.4710678 
 2149000    4.0573044    1.3003219    2.7569825  -0.22692019    0.8669305    1.0221684   0.75958735   -1.2298232            1  -0.20626811  -0.45390803  -0.45146697   0.28657068 -0.00093150545  0.039479449 -0.064138227  -0.36295228  -0.35217757   0.71237068        0.075    1.4303505        1e-10 1.583046e-11     6.316936    2.4373677    31.520363 0.0050169569  -0.20248043 0.0082425288   0.19720059  -0.24203605    2.4437503 
 2150000    4.0366341    1.2901074    2.7465267   -0.2234187   0.86012043    1.0233358   0.74725609   -1.2298232            1  -0.24475302  -0.46345028  -0.49801639    0.2272076 -0.0083996672  0.079500732   -0.0157707  -0.39889356  -0.39082912   0.72091974        0.075    1.4115992        1e-10 1.6020439e-11    6.2420263    2.4630389    31.520363 0.00020025417  -0.17834862 -0.00090867647   0.21055963  -0.32082071   -1.1565216 
 2151000    4.0285707     1.302773    2.7257977  -0.23150068   0.86856466    1.0348719   0.75356156   -1.2298232            1  -0.18680035  -0.43802447  -0.41584478   0.29346819 0.0040861013 -0.036732306  0.011999921  -0.34224155  -0.33452317    0.7152966        0.075    1.4172487        1e-10 1.589548e-11    6.2910966    2.4421742    31.520363 0.0062205704   -0.2216902 -0.0068347574   0.19369442  -0.74917744     2.103667 
 2152000    4.0555874    1.2872376    2.7683498  -0.22728541   0.85820716    1.0163176   0.74887533   -1.2298232            1  -0.13081445  -0.40026418  -0.38853261   0.39635343 0.0033834531 -0.001966425 -0.037738187    -0.285289  -0.27588874   0.71157934        0.075      1.42352        1e-10 1.5812874e-11     6.323961    2.4442004    31.520363 0.0094877699  -0.19758855  0.004829072   0.19413733   -2.4287932    3.7609208 
 2153000    4.0413386    1.2981638    2.7431749  -0.23198339   0.86549168    1.0344332   0.74866534   -1.2298232            1  -0.17876639  -0.44719825  -0.41369869   0.32459777 0.0011495438 0.0099681228  -0.03494972  -0.33319762  -0.32642658   0.70963225        0.075     1.415838        1e-10 1.5769606e-11    6.3413127    2.4378838    31.520363 0.0032329272  -0.17321609 0.0004169773   0.19369459    0.6785106   0.83216893 
 2154000    4.0647236    1.3044588    2.7602648  -0.22932223    0.8696886    1.0380765   0.75324574   -1.2298232            1  -0.15883631  -0.42424476  -0.42411894   0.37185478  0.010104327 -0.013631736  0.031723024  -0.31421236  -0.30701657   0.71269708        0.075    1.4275927        1e-10 1.5837713e-11     6.314043    2.4424288    31.520363 -0.0011322814   -0.2028947 -0.0014467057   0.20431418   0.97461166    1.6775464 
 2155000    4.0562773     1.293604    2.7626733  -0.23468198   0.86245167    1.0236007    0.7510175   -1.2298232            1  -0.26934788  -0.50664421  -0.48846703   0.18706761 0.0015197433 -0.00061501968 -0.052365629   -0.4242643  -0.41546179   0.71554482        0.075    1.4254925        1e-10 1.5900996e-11    6.2889142     2.445212    31.520363 -0.0030039794  -0.18835918 -0.00014131924    0.1899653   -0.2458053 -0.097458652 
 2156000    4.0659961    1.3044888    2.7615072   -0.2323274   0.86970863    1.0247142   0.76252652   -1.2298232            1  -0.14167548  -0.39494351  -0.47942057   0.44933766 -0.0099396354 -0.008646861 -0.011652707  -0.29896593  -0.28794833     0.710696        0.075    1.4117679        1e-10 1.5793244e-11    6.3318212    2.4422636    31.520363 0.00066614502   -0.2199492 -0.011707157   0.19839523  -0.61004696    3.3450385 
 2157000     4.055504    1.3167741      2.73873  -0.23290123   0.87789924    1.0411654   0.76500149   -1.2298232            1  -0.21112589  -0.46345435  -0.48627348   0.31635017 -0.013506871 -0.034330621 -0.076529401  -0.36892687  -0.35974707   0.71169985        0.075    1.4196589        1e-10 1.5815552e-11    6.3228902    2.4623635    31.520363 0.0042984657  -0.22136172 -0.0085528261   0.19046644  -0.48568013    2.9460919 
 2158000    4.0278915    1.2928507    2.7350408  -0.23226055   0.86194942    1.0243127   0.74967495   -1.2298232            1  -0.10989476  -0.38452469  -0.35467561   0.40951601 -0.019223024   0.03333459 -0.021135724  -0.26453425  -0.25611031   0.71354013        0.075     1.413503        1e-10 1.5856447e-11     6.306583    2.4438472    31.520363 0.0017940427  -0.19784439 -0.0068519397   0.20370983  -0.31208658     2.106613 
 2159000    4.0405688    1.2872727    2.7532961  -0.22608874   0.85823056    1.0072619   0.75518156   -1.2298232            1  -0.17123771  -0.46074581  -0.38715341   0.33418608  0.021737284 0.0019090423  0.005307895  -0.32701308  -0.31501934   0.71758976        0.075    1.4161378        1e-10 1.5946439e-11    6.2709925     2.449532    31.520363  0.016174988   -0.2168112 0.0069867311   0.22307533  -0.16243898 0.0096966856 
 2160000    4.0298086    1.2768398    2.7529689   -0.2340051   0.85127486   0.99245722   0.75365681   -1.2298232            1  -0.11891634   -0.3779512  -0.39640231   0.41760449 -0.0066339078  0.072940579 0.0061066922  -0.27437719  -0.26058467   0.71981217        0.075    1.4180436        1e-10 1.5995826e-11    6.2516309    2.4473618    31.520363 -0.0038023118  -0.19336325 -0.0082647548   0.20393313   0.54763764    0.6675697 
 2161000     4.025141    1.2909874    2.7341535  -0.22941866   0.86070717    1.0076106   0.75913097   -1.2298232            1  -0.22112467  -0.46347957  -0.44802344   0.24812901 -0.001830451 -0.012477088 -0.025999284   -0.3777147  -0.36495607   0.71787285        0.075     1.409356        1e-10 1.595273e-11    6.2685195    2.4454351    31.520363 0.00056723888  -0.19053024 -0.00054997769   0.21255763   -1.2885663  -0.27526315 
 2162000    4.0202315    1.2702894    2.7499421  -0.23076325   0.84690772    1.0005698   0.74065311   -1.2298232            1  -0.15729967  -0.40002332  -0.45930432   0.38742862 0.0096886271  -0.13288758  0.037509776  -0.31007818  -0.30012604   0.71597437        0.075    1.4051094        1e-10 1.5910541e-11    6.2851412    2.4423284    31.520363 -0.0041148434  -0.20133737 -0.0041635027   0.20390594   0.21756679    1.0901429 
 2163000    4.0128657     1.278433    2.7344328  -0.22796963   0.85233706    1.0044348   0.74716553   -1.2298232            1  -0.23640497  -0.48195995  -0.43699053   0.20973557 0.0028235321  0.030494591 -0.0044024615  -0.39052683  -0.37978305   0.71544466        0.075    1.4152474        1e-10 1.589877e-11    6.2897947    2.4435939    31.520363 0.0094612698  -0.20504062 -0.015724145    0.2160393    -1.123179    1.9441397 
 2164000    4.0153058    1.2622388     2.753067  -0.23637595   0.84154034   0.99004722    0.7388527   -1.2298232            1  -0.17593027  -0.43263076  -0.45457924   0.35941919  0.034631442  0.016109028 0.0088561614   -0.3283374  -0.31725459   0.71971015        0.075    1.4033884        1e-10 1.5993559e-11    6.2525171     2.459056    31.520363 0.00043674839  -0.19152094 0.0075236068   0.23417518   -1.3543959  -0.72681292 
 2165000    4.0296265     1.285011    2.7446155  -0.22809612   0.85672265    1.0027036   0.75578445   -1.2298232            1  -0.18061182  -0.40336883  -0.43230302    0.2938364 -0.0078961903  0.038073086 -0.011604732  -0.33651154  -0.32374276   0.72420809        0.075    1.4059544        1e-10 1.6093513e-11    6.2136837    2.4441024    31.520363 -0.0031681824  -0.19298651 -0.0076472203   0.18745652    -2.104821   0.58374771 
 2166000    4.0358115    1.2800672    2.7557443  -0.23063602   0.85342663   0.99234526   0.75737533   -1.2298232            1  -0.19087022  -0.45677215  -0.44216649     0.326328 -0.010553574 -0.0061355348 0.0098095539   -0.3470981  -0.33252256   0.72039217        0.075    1.4033057        1e-10 1.6008715e-11    6.2465976    2.4399933    31.520363 -0.00015442495  -0.18928802 0.0072453328   0.18621124  -0.51529198   0.31103918 
 2167000    4.0183217    1.2674512    2.7508704  -0.22852255   0.84501548    0.9968756   0.74000769   -1.2298232            1  -0.15214521   -0.4023329  -0.40152317   0.34742044 -0.00033589213  0.050526867 -0.018910438  -0.30479058  -0.29444424   0.71555919        0.075    1.4297606        1e-10 1.5901315e-11    6.2887879     2.437764    31.520363 -0.0012438062  -0.19684139 -0.0021865511   0.18271208    1.1953769     2.264205 
 2168000    4.0358273    1.2854707    2.7503565   -0.2329692   0.85702918   0.99934953   0.75862418   -1.2298232            1  -0.11718305  -0.36014112  -0.37450776   0.38309972  0.001495151 0.0056368244  -0.02394667  -0.27366855  -0.25983523   0.71670406        0.075    1.4296794        1e-10 1.5926757e-11    6.2787422    2.4515427    31.520363 -0.00060257546  -0.19690142 -0.0080815623    0.2185284   -1.0676375   0.47292606 
 2169000     4.019455    1.2753825    2.7440725  -0.22897211   0.85030332   0.99586564   0.74965419   -1.2298232            1  -0.10342781  -0.36654996  -0.36759475   0.42386129 0.0024608855   -0.1115304 -0.039814836  -0.25806301  -0.24558267   0.71798754        0.075     1.411096        1e-10 1.5955279e-11    6.2675183    2.4582839    31.520363 0.0046188112  -0.20361627 0.0071774679   0.21782719   0.49045063    1.9690571 
 2170000     4.027965    1.2915729    2.7363921  -0.23600517    0.8610975    1.0039454   0.76232785   -1.2298232            1  -0.14109877  -0.36381952  -0.42584716   0.36637037  0.012060617  -0.11850848  0.021435531  -0.29834824  -0.28440698   0.71981393        0.075    1.4248535        1e-10 1.5995865e-11    6.2516156    2.4430746    31.520363   0.01481868  -0.18455814 -0.0081587387   0.22688064   0.81360987   0.34747784 
 2171000    4.0354119    1.2920257    2.7433862  -0.22838152   0.86139937     1.014475   0.75555199   -1.2298232            1  -0.26656921  -0.48674883  -0.49598776   0.18302896 0.0097883935 -0.041483399  0.073709148  -0.42242099  -0.41138047    0.7182113        0.075    1.4260869        1e-10 1.5960251e-11    6.2655656    2.4461631    31.520363 -0.0079890947  -0.18874521 0.00055082241    0.1848248    1.4533088   -2.0848308 
 2172000    4.0139459    1.2715565    2.7423894  -0.23137483   0.84775249   0.98881345   0.75021811   -1.2298232            1  -0.18829166  -0.44282096  -0.39555239   0.27349838 -0.0016908767 -0.021826383 -0.013713952  -0.34304319  -0.32943986   0.71829914        0.075    1.4191572        1e-10 1.5962203e-11    6.2647993    2.4483745    31.520363 -0.0014504954  -0.21474487  0.004648547   0.21526533    1.0892921      2.08989 
 2173000    4.0361222    1.2763322      2.75979  -0.22618346   0.85093646   0.99402783   0.75199733   -1.2298232            1  -0.27286094  -0.51512024  -0.49227864   0.18881605 -0.0064689551 -0.058913701 -0.014233034  -0.42797948  -0.41475347   0.71709072        0.075    1.4373047        1e-10 1.5935349e-11    6.2753566    2.4425811    31.520363 -0.0062532131  -0.21268584 -0.0026208298    0.1853318  -0.17548012   0.68387509 
 2174000    4.0335457     1.277803    2.7557427  -0.22756233   0.85191707    1.0073714    0.7444227   -1.2298232            1  -0.18650391   -0.4708284  -0.39708952    0.3084062 0.0040796711 -0.084253335 -0.019355941  -0.34005999  -0.33030117   0.71706054        0.075    1.4294567        1e-10 1.5934679e-11    6.2756208    2.4463424    31.520363 0.0049478941  -0.18895866 0.00094404832   0.17900332   0.85603593    1.1650383 
 2175000    4.0326699    1.2866371    2.7460328  -0.22966088   0.85780679    1.0025984   0.75769174   -1.2298232            1  -0.16784372  -0.42193355  -0.42395695   0.34235933  0.024914348  0.072573105 -0.024316102  -0.32413687  -0.31095965   0.71932128        0.075    1.4345164        1e-10 1.5984917e-11    6.2558973    2.4425129    31.520363 -0.0049444382  -0.20768337 -0.0036470363   0.20366235  -0.30927201    1.3472658 
 2176000    4.0269295    1.2732743    2.7536552  -0.22566103   0.84889776   0.99335364   0.74901417   -1.2298232            1  -0.22145292  -0.45836967  -0.44734619    0.2413571 0.0029524786 -0.023349514 -0.030580976  -0.37595611  -0.36324921   0.71320054        0.075    1.4290684        1e-10 1.5848901e-11    6.3095858     2.446765    31.520363 -0.0038533205  -0.20579821 -0.00014887299   0.19855083     1.521918   0.34139061 
 2177000    4.0133157    1.2661026    2.7472131  -0.23243873   0.84411634   0.98684802   0.74542545   -1.2298232            1  -0.19286508  -0.43016312  -0.48082504   0.33239293  0.011508346 -0.0063693249 -0.029875722    -0.346628  -0.33373272   0.71520752        0.075    1.4253994        1e-10  1.58935e-11    6.2918802    2.4470221    31.520363 -0.0052225325  -0.18905359 -0.014189607   0.20149223   -1.8360863 -0.044278222 
 2178000     4.009748    1.2649818    2.7447663   -0.2298357   0.84336908   0.98546218   0.74512003   -1.2298232            1  -0.15978593  -0.43538891  -0.41557635   0.37160746 0.0043914416  0.061605462 -0.029626061  -0.31348586  -0.30045576   0.71911104        0.075    1.4078172        1e-10 1.5980245e-11    6.2577262    2.4366909    31.520363 -0.007298063  -0.20831021 0.0028792684   0.22211434   -2.0725404    1.6271973 
 2179000    4.0037021    1.2772053    2.7264968  -0.23095173    0.8515186   0.99734909   0.75068402   -1.2298232            1 -0.069975232  -0.32831662  -0.32996729   0.44835821 -0.0035539005  0.056400359 0.0032483665  -0.22482287  -0.21234185   0.71870866        0.075     1.422036        1e-10 1.5971303e-11    6.2612297    2.4614481    31.520363 -0.0053616753  -0.21846029 -0.0046048487   0.18071391  -0.14806995     1.691975 
 2180000    4.0261232    1.2934421    2.7326811  -0.23631569   0.86234371     1.005984   0.76302585   -1.2298232            1  -0.16325101  -0.41142168   -0.4117226   0.33339125 -0.014765244 0.0024228226  0.046295491  -0.32064446  -0.30685021   0.71509031        0.075    1.4322156        1e-10 1.5890896e-11    6.2929115    2.4457885    31.520363 -0.0038222047  -0.20361693 -0.0040578872   0.20203798  -0.65352162   0.58459688 
 2181000    4.0009729    1.2713678    2.7296051  -0.23375636   0.84762671    1.0027748   0.74034387   -1.2298232            1  -0.13393144  -0.36719057  -0.39085036    0.3562466 0.0080781136  0.041344919  0.042479172  -0.28664616  -0.27707256    0.7222989        0.075    1.4417452        1e-10 1.6051087e-11    6.2301078    2.4649197    31.520363 -0.0071170361  -0.18524023 -0.0010409089   0.20192992  -0.64363858    2.4922652 
 2182000    4.0232341    1.2807703    2.7424639  -0.22821866   0.85389534    0.9895047   0.76013413   -1.2298232            1  -0.13389267  -0.40474406  -0.36367565    0.3667417 -0.0012644168   0.01396772 0.0095176922  -0.29068963  -0.27513954   0.71993325        0.075    1.4308106        1e-10 1.5998517e-11    6.2505795    2.4428234    31.520363   0.01426163   -0.2175621 -0.012083121   0.19986221  -0.58395182  -0.21401999 
 2183000    4.0269861    1.2722652    2.7547209     -0.23178   0.84822498   0.98855488   0.75119655   -1.2298232            1   -0.1889295  -0.43207319  -0.43167084   0.29695552 -0.0037908048  0.053546418  0.051644456  -0.34388286   -0.3300408   0.72029168        0.075    1.4312127        1e-10 1.6006482e-11    6.2474691    2.4429734    31.520363 -0.011319021  -0.19591277 7.3900982e-05   0.20932565  -0.99391801    1.4760174 
 2184000    4.0306418     1.281143    2.7494988  -0.23237193   0.85414385    1.0021066   0.75183396   -1.2298232            1  -0.15431136  -0.42579141  -0.41282295   0.37568027 -0.0042855611  0.014150617 -0.035267651   -0.3093962   -0.2973571   0.71730275        0.075    1.4164862        1e-10 1.5940061e-11    6.2735017    2.4448643    31.520363 0.00081146806  -0.18784598 -0.015039232   0.20449653   0.41411344    1.6738299 
 2185000    4.0025939    1.2718456    2.7307483  -0.22906441   0.84794521    1.0078409   0.73737697   -1.2298232            1  -0.10902553  -0.39246696  -0.37605821   0.44144858 -0.011077252  0.051269339 0.0071533533  -0.26112825  -0.25288981   0.71705575        0.075    1.4209838        1e-10 1.5934572e-11    6.2756626    2.4485261    31.520363 0.00042170216  -0.18501236 -0.0023638557   0.18327261  -0.98585299   0.90996032 
 2186000    4.0178283    1.2809412     2.736887  -0.22613463   0.85400934   0.99333371   0.75767731   -1.2298232            1  -0.04069497   -0.3140108  -0.32926723   0.52119312  0.006896579  0.013333736  0.017265791  -0.19698515  -0.18248841   0.71485675        0.075    1.4180924        1e-10 1.5885706e-11    6.2949675    2.4589038    31.520363 0.0014907236  -0.20242273 -0.010705266   0.21451538  -0.39272536    1.4598404 
 2187000    4.0381279    1.2786813    2.7594466  -0.22778941   0.85250265    1.0004714   0.75018849   -1.2298232            1  -0.15679983  -0.41803381  -0.42236879   0.37000312 0.0097709096   0.10327535 -0.012602354  -0.31154525  -0.29961214   0.71543243        0.075     1.418527        1e-10 1.5898498e-11    6.2899022       2.4529    31.520363 -0.0061113271  -0.20207746 0.0038507613   0.17395694   -1.5536006    -1.418575 
 2188000    4.0185336    1.2661235    2.7524101  -0.23065846   0.84413031   0.99051549   0.74291116   -1.2298232            1  -0.21125497   -0.4683893  -0.44310489   0.27772927 -0.022234984  0.043050258  0.032021767  -0.36449926  -0.35264613   0.71535319        0.075    1.4238933        1e-10 1.5896738e-11    6.2905989    2.4437724    31.520363 0.0038634342  -0.19566277 -0.006975633   0.19995565   0.15277824   0.68575358 
 2189000    4.0167164    1.2669827    2.7497336  -0.23811556   0.84470315   0.99418271    0.7413427   -1.2298232            1  -0.20901358  -0.47067131  -0.41840141   0.26203199  0.012558031 -0.075729506 -0.012604306  -0.36193433  -0.35092821   0.71944753        0.075     1.418484        1e-10 1.5987723e-11    6.2547994    2.4421318    31.520363 0.0081026198  -0.19340292 -0.0015061785   0.19813058   0.50391499    1.3713662 
 2190000    4.0196343    1.2759331    2.7437012  -0.23533472   0.85067039    1.0058363   0.74337553   -1.2298232            1  -0.12203675   -0.3947925  -0.39624016   0.42492239 -0.017609781  0.028136249 -0.026098422  -0.27537683  -0.26561488   0.71563524        0.075    1.4227273        1e-10 1.5903005e-11    6.2881196    2.4609545    31.520363 0.0031374183  -0.17131152 -0.0066029072   0.19980024  -0.36578133  -0.52220757 
 2191000    4.0271978    1.2805847    2.7466131  -0.22571252   0.85377166    1.0015571   0.75158442   -1.2298232            1 -0.074778503  -0.31825391  -0.34409648   0.43801489 -0.0046422163  0.022794338  0.025568292  -0.22981187   -0.2177458   0.71370668        0.075    1.4513292        1e-10 1.5860148e-11    6.3051112    2.4506233    31.520363 -0.0039528878  -0.18984159 -0.0033922908   0.23416682 0.0084586338    1.5875912 
 2192000    4.0182634    1.2824228    2.7358406  -0.22911816   0.85499713    1.0039856    0.7519775   -1.2298232            1  -0.15645224  -0.38677274  -0.42338083   0.34079684 -0.0012278764  0.045909212  0.013161242  -0.31156669   -0.2997662   0.71944792        0.075    1.4415755        1e-10 1.5987732e-11     6.254796    2.4563083    31.520363 0.0037611092  -0.20975128 0.0083988598   0.20812152   0.62854917    1.4404835 
 2193000    4.0470935    1.2939207    2.7531728  -0.22633253   0.86266283    1.0016505   0.76656464   -1.2298232            1   -0.1247399  -0.38035003  -0.39278505    0.3989154 -0.0037390561 -0.034689232 -0.010345299  -0.28286331  -0.26772052   0.71959615        0.075    1.4406959        1e-10 1.5991026e-11    6.2535076    2.4442479    31.520363 -0.0030173337  -0.19822208 -0.013726568   0.20404966   0.18204693   0.11806741 
 2194000    4.0048038    1.2733872    2.7314167    -0.236763   0.84897302   0.99413208   0.74860283   -1.2298232            1  -0.25226843  -0.45658582  -0.47135802   0.17113855 0.0083585551 -0.0017024645  0.010347768  -0.40668676  -0.39417584   0.71278787        0.075    1.4394284        1e-10 1.5839731e-11    6.3132387    2.4493377    31.520363 -0.0039598106  -0.16843513 0.0023390153   0.19321645  -0.33865768   -1.7769281 
 2195000    4.0090825    1.2741859    2.7348966  -0.22732893    0.8495055    1.0026006    0.7436435   -1.2298232            1  0.049013371   -0.2579467  -0.24697066   0.65195748 0.0046051758  0.022800934  0.020578651  -0.10438198 -0.094102882   0.71501014        0.075    1.4344754        1e-10 1.5889114e-11    6.2936171     2.459163    31.520363 -0.0024921357  -0.20053582 0.0081710407   0.18260316   0.38313932     3.445547 
 2196000    4.0137851    1.2734485    2.7403366  -0.23967277   0.84901388    1.0060498    0.7404248   -1.2298232            1  -0.12811971  -0.39013609  -0.41380432   0.41958127 0.0049033841 -0.060619871 -0.044053085  -0.28085112  -0.27172831   0.71932588        0.075    1.4371306        1e-10 1.598502e-11    6.2558572    2.4469169    31.520363 0.0060270918  -0.18619122 0.0030032839   0.19220329    0.1759606  -0.24868329 
 2197000    4.0247596    1.2893766     2.735383  -0.23182883   0.85963324    1.0022866   0.76099808   -1.2298232            1  -0.26324357  -0.45637664  -0.49830822   0.16495416 0.0033187275 -0.0076063237 -0.0063094569  -0.42021874  -0.40631499   0.71891175        0.075    1.4343723        1e-10 1.5975817e-11    6.2594609    2.4416106    31.520363 0.0016806638  -0.20461999  0.006091792   0.22143929    1.5852575  -0.23825229 
 2198000    4.0205014     1.287606    2.7328955  -0.23746616   0.85845273    1.0056651   0.75666257   -1.2298232            1  -0.26967676  -0.47857518   -0.4872926   0.15683749 0.0066071995  0.016980864 -0.030548182  -0.42575763  -0.41323045   0.71669808        0.075    1.4396764        1e-10 1.5926624e-11    6.2787945    2.4561508    31.520363  0.002178973  -0.21756367 -0.0028049296   0.21353348   0.59559712   0.57386227 
 2199000    4.0166473    1.2709511    2.7456962   -0.2299281    0.8473489   0.99743652   0.74356793   -1.2298232            1 -0.061504472  -0.34846057  -0.33943425    0.5033814 -0.00070451321 0.0027872676     -0.05062  -0.21488423  -0.20388357   0.71934243        0.075    1.4388152        1e-10 1.5985387e-11    6.2557133    2.4427337    31.520363 -0.0055984468  -0.19232514 -0.0024152998   0.22019363 -0.074641705    3.2894151 
 2200000    4.0166121     1.288093    2.7285192    -0.229377   0.85877744   0.99958503   0.76141946   -1.2298232            1 -0.098199665   -0.3514164   -0.3256819   0.38249931 0.0043306729  0.095527325  0.010442312  -0.25526176  -0.24088545   0.71842438        0.075     1.434273        1e-10 1.5964986e-11    6.2637073    2.4476626    31.520363 0.0036404408  -0.21589402 -0.0063081521   0.20967778  -0.66085502   0.41605819 
 2201000    4.0272339    1.2783338    2.7489002  -0.22873065   0.85227091   0.99960805   0.75039378   -1.2298232            1  -0.16469587  -0.41986786  -0.44124641   0.36702668 -0.0014754158  0.042881557 -0.041770799  -0.31948363  -0.30738494   0.72340757        0.075    1.4295986        1e-10 1.6075724e-11    6.2205597    2.4585004    31.520363  -0.01167148  -0.18530465 0.00094401505   0.18613216   -1.1554985   0.60540049 
 2202000    4.0193461    1.2800328    2.7393133  -0.23019309   0.85340368    1.0149896   0.74166633   -1.2298232            1  -0.15158546  -0.45232023  -0.36007519   0.35763905 0.0033802966  0.072068458 -0.0016870094  -0.30457296  -0.29647018   0.72213639        0.075    1.4377569        1e-10 1.6047475e-11    6.2315098    2.4547355    31.520363 0.0087049298  -0.19708275 -0.0057450844   0.18290328   -0.6714052    2.9401002 
 2203000     4.014728    1.2783899    2.7363381  -0.22981497   0.85230836   0.99526271   0.75346418   -1.2298232            1  -0.24551324  -0.47433209  -0.50374966   0.24154204 -0.0028078004 -0.0046665631  0.048908392  -0.40093435  -0.38758204   0.71506739        0.075    1.4242213        1e-10 1.5890386e-11    6.2931132    2.4585616    31.520363  0.010541055  -0.19012967 0.00046834125   0.18949286  -0.15506912   0.53502256 
 2204000    4.0254576    1.2799381    2.7455195  -0.22145388   0.85334057   0.99694471   0.75404681   -1.2298232            1  -0.11452746  -0.38231834  -0.38345317   0.42218912  0.011167996  0.040328846 -0.046724625  -0.27006876  -0.25683636   0.71473311        0.075    1.4435544        1e-10 1.5882958e-11    6.2960564     2.446646    31.520363 -0.0080002586  -0.22693694 0.00034127803   0.21496526 -0.024012236    5.2425559 
 2205000    4.0285633    1.2728744    2.7556889  -0.22835007   0.84863115   0.98765102   0.75250932   -1.2298232            1  -0.28717956  -0.51768398  -0.49841198   0.15455726 -0.00023972061  0.037038701   0.00964181  -0.44240371  -0.42816183   0.71708344        0.075    1.4432344        1e-10 1.5935188e-11    6.2754203    2.4480187    31.520363 -0.011032718  -0.21419332 -0.00074473734   0.20026422  -0.26753452   0.77861399 
 2206000    4.0245943    1.2898371    2.7347571   -0.2346914   0.85994026    1.0057042   0.75915255   -1.2298232            1  -0.15976298  -0.40520748   -0.4299748   0.35589335 -0.0056567414 -0.046455847  -0.02505765  -0.31635746  -0.30332224   0.72452363        0.075    1.4264823        1e-10 1.6100525e-11    6.2109776    2.4504176    31.520363  -0.01118359  -0.21440637 -0.0059158408   0.21867385    0.5196857   0.42362141 
 2207000     4.028754    1.2768138    2.7519401  -0.22502311   0.85125758   0.99408121   0.75250376   -1.2298232            1  -0.17250166  -0.40587271  -0.45161197   0.33997971  0.021480573  0.088638902  0.053035998  -0.32772466   -0.3144018    0.7156019        0.075    1.4349613        1e-10 1.5902264e-11    6.2884126    2.4383162    31.520363 -0.0015903212  -0.21156523 0.0058640224   0.19645454    -1.558291    1.6289724 
 2208000    4.0264996    1.2762919    2.7502076  -0.22795728   0.85090963   0.99535772   0.75103163   -1.2298232            1 -0.094302391  -0.38911125  -0.33081238   0.43701645 0.0028221484  0.015940752 -0.059885006  -0.24922173  -0.23638475   0.71729501        0.075    1.4168537        1e-10 1.5939889e-11    6.2735694    2.4350256    31.520363 0.0049947119  -0.16643123 -0.009334826   0.20466732  -0.47973702    2.7614076 
 2209000    4.0382319    1.2833802    2.7548518  -0.23105359   0.85563538   0.99426337   0.75978541   -1.2298232            1  -0.18712707  -0.41235917  -0.43146053    0.2824385 0.0016925334 -0.019396307 -0.018514492  -0.34385209  -0.32905321   0.72340387        0.075    1.4308011        1e-10 1.6075642e-11    6.2205916    2.4600182    31.520363 -0.0045570728  -0.20677045 -0.002229097   0.20962518  -0.58545451   -1.0579035 
 2210000    4.0321708    1.2957527    2.7364181  -0.23284979   0.86388424    1.0126073   0.76104917   -1.2298232            1  -0.11662267   -0.3964984  -0.35430591   0.40093631 0.0082024469 -0.088596595  0.070269836  -0.27360838  -0.26116732    0.7174387        0.075    1.4097503        1e-10 1.5943082e-11    6.2723129     2.441352    31.520363 -0.0014963843  -0.19597418  -0.01219773   0.19596902    1.1972217    2.2905965 
 2211000    4.0595803    1.2933574    2.7662228  -0.22436039   0.86228727    1.0015094   0.76602677   -1.2298232            1  -0.19305439   -0.4213194   -0.4620236   0.30417984 -0.004646287 -0.043778436  0.049356565  -0.35106685  -0.33601487    0.7105527        0.075    1.4233218        1e-10 1.579006e-11    6.3330981    2.4497189    31.520363 -0.0023565749   -0.2088958  0.013506478   0.17348683    1.9873042  -0.68478185 
 2212000    4.0373105    1.2685973    2.7687132  -0.23279779   0.84577959    1.0009596   0.73847449   -1.2298232            1  -0.15539715  -0.43271745  -0.38347074   0.34999673 0.0037208967  0.068890088  0.021459604  -0.30772626  -0.29827915   0.71349886        0.075    1.4173485        1e-10 1.585553e-11    6.3069477     2.450656    31.520363 -0.0044983362  -0.20546097 -0.0087346591   0.19189659  -0.71695786    1.9734481 
 2213000    4.0126189    1.2736648    2.7389542  -0.22465786    0.8491581   0.99637299   0.74736526   -1.2298232            1 -0.073509479  -0.32855343  -0.32798784   0.43601283 -0.0095941443  0.032049847 -0.008103931  -0.22767254  -0.21573677   0.71897324        0.075    1.4104064        1e-10 1.5977183e-11    6.2589256    2.4496744    31.520363 -0.0048687407  -0.20466936 -0.0043993007   0.19659757    0.1067141    -2.130661 
 2214000    4.0320422    1.2956402     2.736402  -0.23334577    0.8638092    1.0053501   0.76594428   -1.2298232            1 -0.056793603   -0.3314383  -0.32579151   0.48684901 -0.0014902246  0.052968539 -0.012118775  -0.21478905  -0.20030232   0.71679261        0.075    1.4129927        1e-10 1.5928725e-11    6.2779665     2.434894    31.520363 0.0010648032  -0.21865321 0.0075984007   0.22140488   -1.3848736    2.2307796 
 2215000    4.0271474    1.2732977    2.7538497  -0.22233649   0.84891337   0.99434285   0.74835604   -1.2298232            1  -0.12611503  -0.36716815  -0.40297923   0.39180229 -0.0068034858 0.0059512041 -0.0063780801  -0.28048246  -0.26805252   0.71524178        0.075    1.4205528        1e-10 1.5894262e-11    6.2915788    2.4393089    31.520363 0.0057974042  -0.21319828 -0.006029678    0.2016888    -1.105129    1.0908534 
 2216000    4.0142109    1.2710437    2.7431672  -0.23504354   0.84741062   0.99644619   0.74435768   -1.2298232            1 -0.073879017  -0.33440882  -0.33248745   0.44525922 0.0042624722 -0.055506493 0.0010853591  -0.22742168  -0.21611675   0.71444088        0.075    1.4277463        1e-10 1.5876464e-11    6.2986317    2.4420492    31.520363 0.0060871443  -0.20730105 -0.0049445051   0.17316899    1.3772731  0.099122777 
 2217000    4.0182364    1.2910005    2.7272358  -0.23469824   0.86071591    1.0091059     0.758111   -1.2298232            1  -0.19391098  -0.42874386  -0.41986408     0.266875 -0.014461541 -0.015792029 -0.043077307  -0.35029062  -0.33795583   0.71784534        0.075    1.4250512        1e-10 1.5952119e-11    6.2687598     2.442675    31.520363 -0.0030446664  -0.21628971 -0.0043044794    0.1923151   -0.3469071   -1.5315392 
 2218000    4.0092131    1.2789496    2.7302635  -0.22894294   0.85268153    1.0020321   0.74941113   -1.2298232            1  -0.21561629  -0.49177736  -0.46502423   0.30995273 0.0051806974 -0.027008208 -0.027615119  -0.37020136  -0.35865138   0.71267576        0.075     1.439868        1e-10 1.5837239e-11    6.3142318    2.4447493    31.520363 0.0054041833   -0.1886531 -0.0016038302   0.18635486   -1.2352102    1.0783929 
 2219000    4.0177427    1.2804481    2.7372946  -0.22951591   0.85368056   0.99833643   0.75365903   -1.2298232            1  -0.11297788   -0.3849414  -0.37415737   0.42016514 0.0098571731  0.030192932  -0.02915421  -0.26843918  -0.25548544   0.71482108        0.075    1.4183073        1e-10 1.5884913e-11    6.2952816    2.4536552    31.520363 -0.0078737382  -0.19654987 0.00016827616   0.20470167  -0.84583206    2.4881046 
 2220000    4.0365632    1.2688113    2.7677519  -0.23180404   0.84592224    1.0008871   0.73876605   -1.2298232            1  -0.19443926  -0.49303652  -0.44064022   0.35035897 -0.00090446668  0.064409253  0.051708987  -0.34682851   -0.3373109   0.71841734        0.075    1.4161485        1e-10 1.596483e-11    6.2637686    2.4340066    31.520363 -0.0012691301  -0.21406044 -0.010944074   0.20114026  -0.47170308   0.79048726 
 2221000    4.0413453    1.2983564    2.7429889  -0.23510027   0.86562013    1.0087427   0.76666083   -1.2298232            1  -0.20382458  -0.46379994  -0.42831291   0.28063911 -0.017825061  0.070638304  0.011574093  -0.36196784  -0.34781758   0.71724255        0.075     1.412268        1e-10 1.5938723e-11    6.2740283    2.4352653    31.520363 0.0029082366  -0.20350384 -0.0081946425   0.19120687  -0.67139527    4.2812913 
 2222000    4.0272466    1.2725693    2.7546773  -0.22701328   0.84842775    1.0072647   0.73859226   -1.2298232            1  -0.15988624  -0.37914126  -0.45913382   0.35861634  0.011657425 -0.072631243 -0.014912311  -0.31223965  -0.30366826   0.71485515        0.075    1.4301593        1e-10 1.588567e-11    6.2949816    2.4610663    31.520363 -0.010684679  -0.19139097 -0.015116291   0.18666417 -0.062976507    3.8950099 
 2223000    4.0251523    1.2673488    2.7578035  -0.23230326   0.84494722   0.99372854   0.74206999   -1.2298232            1  -0.10223891  -0.37865491  -0.37404233   0.44598052 0.0045507944 -0.055348333  -0.03546394  -0.25530968  -0.24408872   0.71646653        0.075    1.4308791        1e-10 1.5921479e-11    6.2808237    2.4563947    31.520363 -0.0020310833  -0.18956766 -0.0061299506   0.20118082  0.029854215    1.8076063 
 2224000    4.0490333    1.2956788    2.7533545  -0.22709374   0.86383491    1.0144645   0.75968047   -1.2298232            1  -0.18383974  -0.47323886  -0.39500588   0.31672553 -0.015230578 -0.086089681 5.3566383e-06  -0.34054312   -0.3286495   0.72004247        0.075    1.4383304        1e-10 1.6000944e-11    6.2496314    2.4463752    31.520363 0.0098695584  -0.20458801 0.0059357956   0.19159755   0.84154826   0.38232246 
 2225000    4.0364035    1.2969534    2.7394501  -0.23094467   0.86468472    1.0195396   0.75760638   -1.2298232            1  -0.25270332  -0.49243429  -0.50760114   0.24192548 -0.0073151706  0.084228197  0.040816047  -0.40897886  -0.39823753   0.71377863        0.075    1.4476445        1e-10 1.5861747e-11    6.3044756    2.4407548    31.520363 -0.012585693  -0.19617452 0.0034199338   0.17889658   -1.2309574     1.539226 
 2226000    4.0408442    1.2906015    2.7502427  -0.23106263   0.86044988    1.0052194   0.76035036   -1.2298232            1  -0.09609194  -0.35472996  -0.38377341   0.45022755 0.0020270071  -0.02822776 -0.060194749   -0.2529335  -0.23958201   0.71882749        0.075    1.4132319        1e-10 1.5973944e-11    6.2601946    2.4463209    31.520363 -0.0056066504  -0.18961132 -0.0016376049    0.2109771   0.76974507    4.2566378 
 2227000    4.0214861    1.2873722    2.7341139  -0.22842459   0.85829691    1.0220636   0.74505091   -1.2298232            1   -0.1178408  -0.39880545  -0.36398519   0.40926825 -0.0080457866 -0.018406667 0.0061378832  -0.27152646  -0.26373529   0.72102176        0.075    1.4206764        1e-10 1.6022706e-11    6.2411431    2.4601034    31.520363 -0.0052662224  -0.21946942 0.0081734005    0.2072237  -0.57162286    1.2891624 
 2228000    4.0189623    1.2756311    2.7433313  -0.23050447   0.85046902    1.0083779   0.74127591   -1.2298232            1  -0.13390219  -0.40130086  -0.40304538   0.40263968 0.0071395785 -0.00062252755   0.02838729  -0.28680916  -0.27784312   0.71650365        0.075    1.4343593        1e-10 1.5922303e-11    6.2804984    2.4361667    31.520363 -0.010707557  -0.19125992 -0.001301147   0.19855286   -0.3549592    2.5458432 
 2229000     4.033323    1.2806076    2.7527154   -0.2249171   0.85378688    1.0058159   0.74866306   -1.2298232            1  -0.16449326  -0.39497143  -0.39343874    0.2949304 -0.0058658966  0.032537152 -0.036537489  -0.31892402  -0.30806847   0.71830942        0.075    1.4228604        1e-10 1.5962432e-11    6.2647097    2.4617124    31.520363 0.0007573485  -0.21079209 -0.00067574859   0.22909722   0.31651967   0.34504643 
 2230000    4.0538757    1.2871627     2.766713  -0.23102628   0.85815719   0.99610765   0.76277633   -1.2298232            1  -0.15714805  -0.39576467  -0.43835064   0.36267116  0.011833923  0.020044146  0.026428303  -0.31449003  -0.29933746   0.71483376        0.075    1.4302758        1e-10 1.5885195e-11    6.2951699    2.4490829    31.520363 0.0080222043  -0.22164102 0.0047203287   0.19452722  -0.26630258    1.8767339 
 2231000     4.037548    1.2849581    2.7525899  -0.22740225   0.85668738     1.009188   0.75123748   -1.2298232            1  -0.21591906  -0.43492229   -0.4515595   0.23872461 -0.010699386 -0.036442865 -0.037827269  -0.37088086  -0.35997563   0.71651046        0.075    1.4193783        1e-10 1.5922455e-11    6.2804386    2.4479803    31.520363  -0.00142372  -0.23250411 -0.0036079102   0.20111962  -0.19512596    1.4576297 
 2232000    4.0318709    1.2959684    2.7359025  -0.24007821   0.86402801    1.0111993   0.76226675   -1.2298232            1   -0.1467841   -0.4115462    -0.401577   0.37277091 -0.014012437  0.081987766 -0.023684521  -0.30402097  -0.29112777   0.71756618        0.075    1.4255972        1e-10 1.5945915e-11    6.2711986    2.4545973    31.520363 -0.0045858358  -0.19891427 -0.0047866455   0.20848675   -1.3105706    1.5372293 
 2233000    4.0315034    1.2821419    2.7493615  -0.22463928   0.85480983    1.0060764   0.75021375   -1.2298232            1  -0.12525154  -0.37909718  -0.39786143     0.401204 -0.011265711 -0.014587331  -0.02189964  -0.28000216  -0.26886393   0.71165177        0.075    1.4144814        1e-10 1.5814484e-11    6.3233174     2.436323    31.520363 -0.0096843702  -0.18123636 -0.0044230285   0.19829203  -0.95466001    3.2159469 
 2234000    4.0369626    1.2866499    2.7503127  -0.23028559    0.8578153     1.025029   0.74218386   -1.2298232            1  -0.16880256  -0.40552722  -0.42266241   0.32178196 -0.0062126154 -0.037272132  0.012588454  -0.32189682  -0.31512035   0.71597674        0.075    1.4121162        1e-10 1.5910594e-11    6.2851204    2.4485998    31.520363 -0.00016020979  -0.19166529 0.0020829757   0.18757479   -1.3290966    1.9724187 
 2235000    4.0302921    1.2868204    2.7434717  -0.23053883   0.85792903    1.0199336   0.74590239   -1.2298232            1   -0.2052051  -0.42540987  -0.46099359   0.27078816 -0.013166851   -0.1018833  0.015917178   -0.3590664  -0.35079555   0.71295106        0.075    1.4135279        1e-10 1.5843357e-11    6.3117937    2.4386999    31.520363 -0.012706554  -0.18539012 -0.0043043311   0.20564953   0.68913357    1.1677372 
 2236000    4.0224906    1.2792623    2.7432284  -0.22393911   0.85288996    1.0075677   0.74593312   -1.2298232            1  -0.19055992  -0.43266995  -0.44937165   0.31036183 0.0040810235   0.06443949  0.008091782  -0.34442756  -0.33438519   0.70898037        0.075    1.3976821        1e-10 1.5755119e-11    6.3471433    2.4414706    31.520363 -0.002984569  -0.21279046 0.0099853283    0.1990741   0.87267637  -0.62528156 
 2237000    4.0317841    1.2600635    2.7717206  -0.23019819   0.84009003   0.99692154   0.73164151   -1.2298232            1  -0.15708747   -0.3898959  -0.44581346   0.36444695 0.0032409534 -0.027390948 -0.014833025   -0.3080071  -0.29939306    0.7140141        0.075    1.3968682        1e-10 1.586698e-11    6.3023965    2.4340809    31.520363 -0.017220273  -0.18124299 -0.0045858522   0.19454197    1.6280832   0.71074322 
 2238000    4.0304164    1.2933841    2.7370323  -0.22731339   0.86230508    1.0094168   0.76058488   -1.2298232            1  -0.10267118  -0.38018931  -0.34686962   0.41904539 -0.0053985449  -0.02538896   0.01028012  -0.25956112  -0.24676041   0.72060079        0.075    1.3981441        1e-10 1.6013351e-11    6.2447892    2.4442344    31.520363 -0.0060465327  -0.21617955  0.007434622   0.21234638  -0.78765809    2.9229251 
 2239000    4.0236863    1.2659471    2.7577391  -0.22723819    0.8440127   0.99926686   0.73665609   -1.2298232            1 -0.082536709  -0.33639933  -0.37492741   0.46371661 -0.010289281 -0.074515449 -0.0044497495  -0.23449073  -0.22517708   0.71486714        0.075    1.4021451        1e-10 1.5885937e-11     6.294876    2.4405838    31.520363 0.0035522695  -0.20713939  0.008238873   0.20209982  -0.73764612    2.1462259 
 2240000    4.0126951    1.2605239    2.7521712  -0.23070669   0.84039698   0.97579238   0.74678253   -1.2298232            1  -0.22568157  -0.47501128  -0.45293564   0.25090222 -0.00058161703 -0.0059895475  0.071040316  -0.37972442  -0.36497108    0.7159685        0.075    1.4061313        1e-10 1.5910411e-11    6.2851927    2.4595785    31.520363 -0.0046318945   -0.2109129 -0.0073964449   0.21205459   0.28440773   0.26269441 
 2241000    4.0171418    1.2739688     2.743173  -0.23188104    0.8493608    1.0033941   0.74284959   -1.2298232            1  -0.12205386  -0.40231601  -0.35538882   0.39154326   0.01421522 -1.4015117e-05 0.0010276413  -0.27528544  -0.26528337   0.71851921        0.075     1.394934        1e-10 1.5967094e-11    6.2628805    2.4487859    31.520363 -0.019143861    -0.212635 0.0034049544   0.22826474  -0.22661601    2.7376476 
 2242000    4.0370922    1.2824731    2.7546191  -0.23546884   0.85503066    1.0132057   0.74565382   -1.2298232            1   -0.2367805  -0.46864396  -0.49074022   0.24904269 -0.0061507676 -0.023238359 -0.014643001  -0.39059052  -0.38141057   0.72290602        0.075    1.3990511        1e-10 1.6064578e-11    6.2248755    2.4531616    31.520363 -0.0009846804  -0.20419537 0.00044239134    0.2083586  -0.62957254   0.95856113 
 2243000    4.0371178    1.2810546    2.7560632  -0.22864116   0.85408494   0.99566993   0.75618854   -1.2298232            1    -0.209838  -0.42367332  -0.43743068      0.23159 -0.0060337798 -0.077192437 -0.029027753  -0.36582108  -0.35196493    0.7136962        0.075    1.3906696        1e-10 1.5859915e-11    6.3052038    2.4442713    31.520363 -0.0047371999  -0.18266686 -0.004798041   0.20715681 -0.098499588   0.22767079 
 2244000    4.0224862    1.2949113    2.7275749  -0.23251469   0.86332322    1.0101217   0.76181994   -1.2298232            1  -0.19187034   -0.4226276  -0.46268293    0.3096995 -0.0021952798  -0.12000082 -0.062598994  -0.34901505  -0.33606019   0.71218936        0.075    1.4004246        1e-10 1.582643e-11    6.3185443    2.4477282    31.520363 0.0071630985  -0.20394924 -0.0071387233   0.19137017    2.1129986    2.8243868 
 2245000    4.0055264    1.2674516    2.7380748   -0.2318495   0.84501576    1.0095944   0.73120659   -1.2298232            1  -0.12002308  -0.36173229  -0.40436149   0.40602454 -0.013040776 -0.031966731  0.025343733    -0.270853  -0.26413766   0.71651973        0.075     1.416102        1e-10 1.5922661e-11    6.2803574    2.4487097    31.520363 -0.0029835094  -0.19141224 -0.00073754145    0.2065812 -0.041716371    1.3493189 
 2246000    4.0214945     1.276731    2.7447636   -0.2369326   0.85120232    1.0085663   0.74238636   -1.2298232            1  -0.11278486  -0.38152279  -0.38518557   0.42835378 -0.015353921 -0.014785144  -0.01528184   -0.2659209  -0.25675269   0.72648759        0.075    1.4241929        1e-10 1.6144169e-11     6.194187    2.4453595    31.520363 0.00065403701  -0.16602503 0.00089652359   0.16307548    1.0995784    3.6910261 
 2247000    4.0487985     1.300604    2.7481945  -0.22594541   0.86711858    1.0090179   0.76900594   -1.2298232            1  -0.11147706  -0.35912528  -0.37429792   0.39899203 0.0016870622  -0.01782858 -0.0053288548  -0.27010405  -0.25550934    0.7212608        0.075    1.4130639        1e-10 1.6028018e-11    6.2390747    2.4453343    31.520363 -0.011884204  -0.17799045  0.007040537   0.19127776   0.18080349    1.4662763 
 2248000    4.0159793    1.2793721    2.7366072  -0.22873458   0.85296318   0.98919865    0.7587686   -1.2298232            1  -0.12147643  -0.36610254  -0.37724723   0.37892048  0.013937992 -0.0095758461  0.048288142  -0.27799172  -0.26267962   0.71502574        0.075    1.4157018        1e-10 1.5889461e-11    6.2934797    2.4525231    31.520363 -0.0068157534  -0.19170538  0.004732363   0.20820473  -0.53416618    2.8666233 
 2249000    4.0413303    1.2934033     2.747927  -0.23376126   0.86231782   0.99498307   0.77059478   -1.2298232            1  -0.17171515  -0.43371845  -0.39235281   0.31092582  0.012882771  0.034113394 -0.0075316617  -0.33066988  -0.31374403   0.71597627        0.075    1.4174243        1e-10 1.5910584e-11    6.2851245    2.4510127    31.520363 -0.0017267138  -0.19489473 0.0010064771   0.18239092  -0.23890941   -1.3714051 
 2250000    4.0214241    1.2743379    2.7470862  -0.23748795   0.84960683   0.99712013   0.74760754   -1.2298232            1 -0.097884451  -0.33382046    -0.389615   0.42978211  0.018397594 -0.035227214  0.037784869  -0.25209748  -0.24021839    0.7263174        0.075     1.412359        1e-10 1.6140387e-11    6.1956384    2.4640855    31.520363 -0.0013130357  -0.20737997 -0.0050354816   0.21114755    1.5097617    3.6293151 
 2251000    4.0337225    1.2874531    2.7462694  -0.22870369   0.85835081     1.006664   0.75579883   -1.2298232            1  -0.12040128  -0.41060863  -0.34789848   0.39730329 -0.0091393374  0.024753724 -0.050116275  -0.27630397  -0.26409756   0.72310874        0.075    1.4144567        1e-10 1.6069083e-11    6.2231304    2.4561643    31.520363 -0.00057320967  -0.19830597 -0.00032208768   0.18486401   -1.0846752    2.6082007 
 2252000    4.0250269    1.2705897    2.7544372  -0.22476464   0.84710793   0.99024377   0.74813764   -1.2298232            1  -0.20811973  -0.47026641  -0.48078269   0.32668991  -0.01089206 -0.043190301   0.01406552  -0.36244211   -0.3494721   0.71646696        0.075    1.4095988        1e-10 1.5921488e-11      6.28082    2.4657939    31.520363 -0.0089060818  -0.22840806 -0.003080247   0.22072827   0.25281673   0.20328627 
 2253000    4.0196082     1.286812    2.7327962  -0.23597543   0.85792342    1.0113643   0.75182298   -1.2298232            1  -0.17545514  -0.44489044  -0.40544135   0.32396637  0.012904677  -0.10350468 -0.034467949  -0.33053771  -0.31982236   0.71446121        0.075    1.4005322        1e-10 1.5876916e-11    6.2984525     2.453444    31.520363 -0.0021651576  -0.17972432 -0.007567918    0.2077725    0.8037823    1.5641453 
 2254000    4.0147446    1.2721623    2.7425823  -0.22761139   0.84815635    1.0062607   0.73882776   -1.2298232            1  -0.14797876  -0.42180235  -0.39186548   0.36973156 -0.0012775092  0.035769141 -0.019067674  -0.30038074  -0.29161747   0.71704174        0.075    1.4068106        1e-10 1.5934261e-11    6.2757853    2.4463498    31.520363 -0.0027142506  -0.18310285 -0.00030732246   0.20275031  -0.75432427   0.14722524 
 2255000    4.0363748    1.2739784    2.7623963  -0.23100303   0.84936721   0.98778803   0.75366001   -1.2298232            1  -0.11715025  -0.39655179  -0.39193862   0.43703967 -0.0067241087  -0.11072781 0.0052710974  -0.27261175  -0.25815207   0.71912383        0.075    1.3979629        1e-10 1.598053e-11    6.2576149    2.4524883    31.520363 -0.0031030077  -0.20870206 -0.0079088758     0.187707   0.18553511  -0.32744678 
 2256000    4.0429037    1.2844308    2.7584729  -0.22345585   0.85633582     0.995989   0.75977648   -1.2298232            1  -0.24169767  -0.47168762   -0.4360601   0.18265471 -0.0053922901  0.025271579  0.044746558  -0.39842086  -0.38387014   0.71795507        0.075    1.4105441        1e-10 1.5954557e-11    6.2678017    2.4571757    31.520363 0.0052778059  -0.20862953 0.00046788133   0.20994231  -0.94821681  -0.57232587 
 2257000    4.0407684    1.2841929    2.7565755  -0.21536626   0.85617723    1.0159564   0.74569043   -1.2298232            1  -0.19630889  -0.42317991  -0.45383962   0.28809285 -0.0013759435    0.1349218 -0.031881909  -0.35012647  -0.34133162   0.71244883        0.075     1.400559        1e-10 1.5832196e-11    6.3162431    2.4403222    31.520363 0.00017866796  -0.17124298 -0.0068737276   0.20646371  -0.32168837   -0.2371719 
 2258000     4.023161    1.2816786    2.7414824  -0.23396848   0.85450095    1.0032951   0.75161574   -1.2298232            1  -0.13511334  -0.38454311  -0.42194168   0.40114478   0.01481578  0.027450093  0.031667544  -0.29015316  -0.27832873   0.71922447        0.075    1.3840448        1e-10 1.5982766e-11    6.2567393    2.4434935    31.520363   0.00427566  -0.17890784 0.0075518661   0.18295736  -0.25028109     4.756553 
 2259000    4.0335279     1.285838    2.7476898  -0.22548265   0.85727405   0.99910322   0.75920898   -1.2298232            1  -0.13932079  -0.40354974  -0.39726164   0.38284901 0.0095285136  0.007808773 -0.020420576  -0.29592691   -0.2819378   0.71926808        0.075    1.3829964        1e-10 1.5983735e-11      6.25636    2.4412709    31.520363 -0.0099105734  -0.20152912  0.011375119   0.20942733   -1.7005631  -0.75796572 
 2260000    4.0438372    1.2915617    2.7522755  -0.23162599   0.86109004    1.0041913   0.76214506   -1.2298232            1  -0.17991227  -0.45239696  -0.40512658   0.31778674 0.00056701289  -0.02554115 -0.014146593  -0.33712403  -0.32325557   0.71817133        0.075    1.3907799        1e-10 1.5959363e-11    6.2659143    2.4433567    31.520363 -0.0045929772  -0.22197813 -0.0083623554   0.19892901  -0.32279975    0.8885752 
 2261000    4.0190596    1.2841125    2.7349471  -0.22634845   0.85612363    1.0079494    0.7511407   -1.2298232            1  -0.26095832   -0.5180721  -0.48105495    0.2162521 0.0014097562  0.062043388  0.011805812  -0.41590015  -0.40483807   0.71665516        0.075    1.4011227        1e-10 1.592567e-11    6.2791706    2.4459507    31.520363 0.0013400364  -0.21547459 0.0044298409   0.21655977   0.46545611   -0.4876773 
 2262000    4.0327602    1.2920831     2.740677  -0.23020344   0.86143769    1.0074433   0.76048284   -1.2298232            1  -0.13187044  -0.35672882  -0.38990746   0.35102496 -0.019269563  0.013677343 0.0068575331  -0.28873933  -0.27567796   0.71382382        0.075    1.3989979        1e-10 1.5862752e-11    6.3040765    2.4431355    31.520363 0.0047536527  -0.18556889 -0.012368143   0.18387935   0.15111887    1.4499273 
 2263000    4.0272318    1.2828648     2.744367  -0.22856173   0.85529177   0.99537817   0.75843252   -1.2298232            1  -0.14994248  -0.41562918   -0.3675286   0.33333035  0.011517139 -0.013964291 0.0091217692  -0.30638844  -0.29202776   0.71456136        0.075    1.4027571        1e-10 1.5879141e-11    6.2975698    2.4443569    31.520363 -0.0066363233  -0.19807405 0.0080072509   0.18558452   -1.3173917    2.2664799 
 2264000     4.036527    1.2939682    2.7425588  -0.23269221   0.86269447    1.0122012   0.75931696   -1.2298232            1  -0.17634947   -0.4442513  -0.43436294   0.34956583 -0.0010597245  0.022350676  0.013067791  -0.33297787  -0.32083615   0.71759162        0.075    1.4004093        1e-10 1.5946481e-11    6.2709762     2.455786    31.520363 -0.00032787769  -0.21050699 -0.0025891815   0.18822978    1.6699659   0.21391479 
 2265000    4.0068499    1.2772204    2.7296295  -0.23725865   0.85152862    1.0104896    0.7416076   -1.2298232            1  -0.18015333  -0.43639963   -0.4210783   0.31701793  0.011220293 -0.039199964 -0.0054887586  -0.33312872  -0.32439569    0.7201001        0.075    1.3983174        1e-10 1.6002224e-11    6.2491312    2.4447407    31.520363 -0.0071778608  -0.19607513   -0.0100527   0.19241749     1.128607  -0.95195728 
 2266000    4.0324682      1.29021    2.7422583  -0.23380301   0.86018885    1.0144456   0.75352401   -1.2298232            1  -0.11423661  -0.39432994  -0.38069645   0.43231657 -0.0020199121 -0.049011878   0.01954646  -0.26967006  -0.25904367   0.71615832        0.075    1.4026504        1e-10 1.5914629e-11    6.2835268    2.4552325    31.520363 -0.00087686429  -0.19992191 -0.0077614399   0.18651738     1.182897  -0.36386134 
 2267000    4.0316125    1.2868676    2.7447449  -0.23015389    0.8579605    1.0143144   0.74984417   -1.2298232            1 -0.073941024  -0.36547305  -0.33224842   0.47589839  0.013248075 -0.0041344658  0.007170763  -0.22861542  -0.21872936   0.71230927        0.075    1.4071744        1e-10 1.5829095e-11    6.3174806    2.4540783    31.520363 0.0011402064  -0.17280002 -0.0039707533    0.1851094  -0.70097764    1.4830901 
 2268000      4.02141    1.2763068    2.7451031  -0.23188729   0.85091955     1.010788   0.74037046   -1.2298232            1  -0.24324857  -0.47398871  -0.46989379   0.21413679 0.0058436187    0.0530866 0.0022729891  -0.39596877  -0.38753353   0.71506413        0.075     1.390865        1e-10 1.5890314e-11    6.2931418    2.4596345    31.520363 -0.00031740826  -0.17701751 0.0049698752   0.18797784  -0.53767579  -0.19666352 
 2269000    4.0275959    1.2823537    2.7452422  -0.22605798   0.85495103    1.0010718   0.75391591   -1.2298232            1 -0.096066021  -0.37321995  -0.36902886   0.45405074 0.0043432609 -0.091577934 0.0073718015  -0.25158031  -0.23896404   0.72212714        0.075    1.3956377        1e-10 1.604727e-11    6.2315897    2.4459662    31.520363 -0.014595169   -0.2253964 -0.0072065679   0.21520763    1.0344004    2.3692757 
 2270000    4.0280998     1.286055    2.7420448  -0.22648958   0.85741868   0.99847528   0.75988825   -1.2298232            1  -0.11860026  -0.37648385  -0.38920457   0.40988765 0.0045848822   0.02060031  0.043221659   -0.2753465  -0.26112764   0.72083825        0.075    1.4010204        1e-10 1.6018628e-11     6.242732    2.4442184    31.520363 -0.0059043472  -0.21368188 -0.0059912782   0.21365403  -0.10419346    1.7611999 
 2271000    4.0165047    1.2616774    2.7548273  -0.22549887   0.84116604   0.98944967   0.73863286   -1.2298232            1 -0.094812936  -0.34591019   -0.3885776   0.45004898 -0.0027210852   0.10578755 0.0053507783  -0.24717471  -0.23605195   0.71182238        0.075    1.3931384        1e-10 1.5818275e-11    6.3218018    2.4368043    31.520363  0.013941327  -0.21739121 -0.0093425102   0.21061729   -1.2712094    2.4366774 
 2272000    4.0250352    1.2744039    2.7506313  -0.22587177   0.84965085   0.98740122   0.75440763   -1.2298232            1  -0.23780444  -0.51063066  -0.45537707   0.25259441 0.0023201661  0.064133737 0.0066068077  -0.39342016  -0.37875105    0.7129432        0.075    1.4069046        1e-10 1.5843182e-11    6.3118633      2.44462    31.520363 -0.00071154845   -0.1806789 0.0052122208   0.18310405   0.34708151  -0.94514215 
 2273000    4.0147471    1.2770001    2.7377469  -0.23089232   0.85138178    0.9986936   0.74952209   -1.2298232            1  -0.16747726  -0.39638829  -0.43867147   0.33262797 -0.013231431   0.04008075 -0.010165156  -0.32208522  -0.31003581   0.72163615        0.075    1.4071882        1e-10 1.6036359e-11    6.2358295     2.454102    31.520363 -0.011271062  -0.21855566 0.0033558942    0.2064564   -0.2764815    0.2148274 
 2274000    4.0321204    1.2822011    2.7499193  -0.23225686   0.85484928    1.0068393   0.74975256   -1.2298232            1  -0.23144362  -0.44524459  -0.47964475   0.23055849 -0.00024040173 -0.021187145 -0.0080256113  -0.38609911  -0.37516491   0.71964322        0.075    1.3813885        1e-10 1.5992072e-11    6.2530985    2.4388799    31.520363 0.0035107347  -0.18963389 0.0040977846    0.2028886   0.21276662   0.77296664 
 2275000    4.0265508    1.2866835    2.7398674  -0.22817817   0.85783772    1.0086875   0.75353033   -1.2298232            1  -0.23208131  -0.44527906  -0.47189029   0.22092541 0.0060157875  0.090221554  0.019741436  -0.38751607  -0.37606643   0.71438152        0.075    1.3684499        1e-10 1.5875145e-11    6.2991551     2.445432    31.520363 -0.0021533494  -0.18559489 -0.0039382725   0.20678819   -1.5716468   0.47271343 
 2276000    4.0265163    1.2765043     2.750012  -0.22550616   0.85105123     1.003371   0.74572595   -1.2298232            1  -0.12051836  -0.34167824  -0.36240061   0.34252377  -0.01549193  0.016941199  -0.01005016  -0.27434327  -0.26374458   0.71126741        0.075    1.3783337        1e-10 1.5805942e-11    6.3267344     2.439199    31.520363 0.0024510617  -0.20342349 -0.0076511529   0.18323359   -2.1616231    1.5831413 
 2277000    4.0230685    1.2756339    2.7474346  -0.22619605   0.85047088   0.99897757   0.74778423   -1.2298232            1  -0.22039729  -0.45440941  -0.44157454   0.23479208 0.0023638705 0.00096997926 -0.0072572566  -0.37464677  -0.36299637   0.71466894        0.075    1.3913741        1e-10 1.5881532e-11    6.2966218    2.4550832    31.520363 0.00023533783  -0.22276225 0.0021129562   0.20781735    -1.857811    1.0075901 
 2278000    4.0134733     1.283796    2.7296773  -0.23911606   0.85591263    1.0097963   0.74950559   -1.2298232            1  -0.12061424  -0.38379252   -0.3887803    0.4107301 0.0098813072 -0.036145538 -0.0085827188  -0.27521879  -0.26475763   0.71629474        0.075    1.3932336        1e-10 1.5917661e-11    6.2823301    2.4441079    31.520363 -0.010571187  -0.20685756 0.0040188529   0.21016624   0.53658425    1.0036281 
 2279000      4.01706    1.2795696    2.7374904  -0.22941272   0.85309486    1.0017805   0.75028464   -1.2298232            1  -0.21435177  -0.43219728  -0.42667079   0.21581276  0.011508548  0.052978259  0.025161099  -0.36911702  -0.35735095   0.71690737        0.075    1.3783741        1e-10 1.5931275e-11    6.2769616    2.4343755    31.520363 0.0010685384  -0.20285327 0.0057940286   0.20557668 -0.039754537  -0.29049387 
 2280000    4.0334086    1.2705723    2.7628363  -0.23138477    0.8470963   0.99880518   0.74219338   -1.2298232            1  -0.11977922  -0.40076035  -0.35416303   0.39558572 -0.015115389 -0.074165607 -0.032326625  -0.27287544  -0.26235369   0.71445088        0.075    1.3843153        1e-10 1.5876686e-11    6.2985436    2.4490016    31.520363 -0.0082275729  -0.18315451 -0.0080944881   0.18569961  -0.59454513    2.3707077 
 2281000    4.0203236     1.281326    2.7389976  -0.22473152   0.85426588    1.0071885   0.74852372   -1.2298232            1  -0.12865497  -0.39512256  -0.38065925   0.38981691  0.006297868  0.035842112 -0.0069486654  -0.28305699  -0.27242612   0.71368997        0.075    1.3876011        1e-10 1.5859777e-11    6.3052589    2.4503706    31.520363 -0.0062969561  -0.22784713 -0.0016184785   0.20402232    -1.700702      1.29022 
 2282000     4.029696    1.2848635    2.7448326  -0.22958989   0.85662432    1.0073422   0.75240813   -1.2298232            1  -0.17554747  -0.43712689  -0.40945935   0.31994383 0.00011002548  0.018922295 0.0038990051  -0.33075075  -0.31934055   0.71900609        0.075    1.3875136        1e-10 1.5977913e-11    6.2586396    2.4632598    31.520363 -0.010845934  -0.19895537 -0.0012281829   0.19338368  -0.78210775   0.06063015 
 2283000    4.0130264    1.2803463    2.7326801  -0.22846418   0.85361272    1.0125608    0.7437008   -1.2298232            1  -0.13919091  -0.37443066  -0.40699044   0.36384838 -0.0046654318 -0.053953499 -0.021677519  -0.29259808  -0.28372893   0.71738376        0.075    1.3942534        1e-10 1.5941861e-11    6.2727932    2.4448152    31.520363 0.0044589101  -0.20536478 -0.0015454159   0.20566583  -0.50800756   0.51540561 
 2284000    4.0211234    1.2669592    2.7541643  -0.23044311   0.84468742    1.0042243   0.73436717   -1.2298232            1   -0.1354749  -0.42302463   -0.4044596   0.42105954 -0.0022511321 0.00036307058 -0.0043305591  -0.28695677  -0.27882292   0.71487415        0.075    1.4130935        1e-10 1.5886092e-11    6.2948143    2.4427438    31.520363 -0.0038509648  -0.20052623 0.00034242395   0.20202706   0.11309019    0.3040431 
 2285000    4.0063393     1.261874    2.7444653  -0.22426119   0.84129712   0.99279807   0.73653752   -1.2298232            1  -0.10243851  -0.34772008  -0.34719367   0.38759823 -0.0063679072 -0.027528675  0.044932238  -0.25436807  -0.24415549   0.71280172        0.075     1.420089        1e-10 1.5840038e-11    6.3131161     2.443924    31.520363 -0.00013143122  -0.17280568  0.015519898   0.21008686   0.56895457    1.4795043 
 2286000    4.0182791    1.2880593    2.7302198   -0.2364415   0.85875496    1.0042026   0.75818604   -1.2298232            1  -0.11484516  -0.37433746  -0.40943097   0.43923294 0.0040044218 -0.046506561  0.038400301  -0.27124028  -0.25819008   0.71657597        0.075    1.4031677        1e-10 1.5923911e-11    6.2798645    2.4414617    31.520363 -0.001624194  -0.22304621 -0.0066640392   0.20163767   0.75252768   -2.0919244 
 2287000    4.0212311    1.2769266    2.7443045  -0.23193954   0.85133276    1.0009264     0.747894   -1.2298232            1  -0.11782021  -0.41058541  -0.33704948   0.39417427 0.0082271627 -0.018904933 -0.033083908  -0.27209233  -0.26069747   0.71950465        0.075    1.4042522        1e-10 1.5988992e-11    6.2543029    2.4500952    31.520363 -0.00081129022   -0.2085686 -0.00087648361    0.1714652   -0.9470966    2.1906136 
 2288000    4.0324652    1.2949892     2.737476  -0.22676746   0.86337518    1.0120965   0.76054127   -1.2298232            1  -0.10408876  -0.35014406  -0.37768631   0.41556408 -0.0051670098  0.013773298  0.031146701  -0.26096971   -0.2485605   0.70954821        0.075    1.3906143        1e-10 1.5767738e-11    6.3420638    2.4366957    31.520363  0.001186646  -0.18863678 0.0056094165   0.20776213 -0.096659458   0.69464584 
 2289000    4.0379659    1.2854404    2.7525255  -0.23407143   0.85700895    1.0080556   0.75256523   -1.2298232            1   -0.1077934  -0.38466006   -0.3558548   0.41713467 0.0014879654 0.00077619974  0.038545491  -0.26302908  -0.25168832   0.70886025        0.075    1.3827378        1e-10 1.575245e-11    6.3482189    2.4383114    31.520363 -0.015253365  -0.19918415 -0.0027716111   0.18832568  -0.77900256    1.0223752 
 2290000    4.0036435    1.2826071    2.7210365  -0.23572898   0.85511995    1.0135401   0.74557354   -1.2298232            1  -0.14112155  -0.38382467  -0.40869441   0.36915442 0.00075389008 -0.027604579  0.046981907  -0.29491502  -0.28579935   0.71614088        0.075    1.3618838        1e-10 1.5914242e-11    6.2836798    2.4502393    31.520363 0.0020652549  -0.20618984 0.0096258658   0.17955401   0.93292387  -0.26151363 
 2291000    4.0426401    1.2892525    2.7533876  -0.22802063   0.85955051    1.0128047   0.75357939   -1.2298232            1  -0.18881342  -0.43952993  -0.41095112    0.2840408  0.014721481 -0.068034361  0.014782861   -0.3442583  -0.33338625   0.71363748        0.075    1.3775495        1e-10 1.5858611e-11    6.3057226     2.451323    31.520363 -0.0051471921  -0.19034257 -0.0014402039   0.21648674   0.58091734   -0.3172292 
 2292000    4.0435686    1.2884178    2.7551508  -0.22499644   0.85899401    1.0131166   0.75242191   -1.2298232            1 -0.088571926  -0.34490607  -0.35614916   0.43533946 0.00011576707 -0.087496979  0.018703536  -0.24377805  -0.23318928   0.71128268        0.075    1.3877148        1e-10 1.5806282e-11    6.3265986     2.452114    31.520363 -0.0029551595  -0.20081823 -0.013428094   0.21643984    1.3362339    1.3156074 
 2293000     4.055032    1.2958271    2.7592049  -0.22335636   0.86393379    1.0106518   0.76248622   -1.2298232            1 -0.081483022  -0.32584489  -0.38101372   0.46240954 0.0076974246 -0.0088774622 -0.070467901  -0.23876516  -0.22574854    0.7079116        0.075     1.392128        1e-10 1.5731369e-11    6.3567259    2.4430551    31.520363 -0.0021089975  -0.17727528 0.0013752381   0.18169386  -0.77822417    3.1727665 
 2294000    4.0389732    1.2895182     2.749455  -0.23113796   0.85972766    1.0125266    0.7540716   -1.2298232            1 -0.081401878  -0.33678614  -0.36303207   0.45561258 -0.017333507   0.10758832 0.0039523879  -0.23694829  -0.22593501   0.71387452        0.075    1.3737142        1e-10 1.5863878e-11    6.3036288    2.4452268    31.520363   0.01042802  -0.20459408 -0.0051724801   0.19427199    -1.213449   0.92664057 
 2295000     4.031559    1.2963052    2.7352538  -0.23657004   0.86425256    1.0318935   0.74832611   -1.2298232            1  -0.19368692  -0.45089727  -0.44171443   0.31155094 0.0048631484 0.00054533929 -0.034115969  -0.34804818  -0.34098458   0.71478004        0.075    1.3645023        1e-10 1.5884001e-11     6.295643    2.4550759    31.520363 -0.0016400963  -0.19454035 0.0031934869   0.20785951   0.93840776    1.2308634 
 2296000    4.0259427    1.2678846     2.758058  -0.22329008   0.84530445   0.99786572   0.73981148   -1.2298232            1   -0.1898496  -0.43869055  -0.43223444    0.3013762   0.00978219 -0.039424795 -0.015624843   -0.3424545  -0.33228996   0.71307122        0.075    1.3848936        1e-10 1.5846027e-11    6.3107301     2.449238    31.520363  0.014845031  -0.19145891 -0.00027172956    0.1894018     1.293913 -0.0031408568 
 2297000    4.0331973    1.2814894    2.7517079  -0.22608453    0.8543748    1.0110344   0.74604661   -1.2298232            1  -0.19232522  -0.44748279  -0.47349273   0.34399988 -0.0018915009 -0.034480189   0.03259897  -0.34621627  -0.33664535   0.71323038        0.075     1.395673        1e-10 1.5849564e-11    6.3093218    2.4453417    31.520363 -0.0049070441  -0.21311622 -0.011650813   0.22586524 -0.099473778    3.5066673 
 2298000    4.0294343    1.2669198    2.7625144  -0.22395244    0.8446612   0.99917468   0.73781722   -1.2298232            1  -0.10427733  -0.39571686  -0.35530398   0.43818885 0.0093551637 -4.0517683e-05 -0.0028120849  -0.25647086  -0.24690454   0.71502437        0.075    1.4097266        1e-10 1.588943e-11    6.2934918    2.4411991    31.520363 0.0032245403  -0.23974392 -0.0060014656   0.20063503    1.8367414    2.4696775 
 2299000    4.0280599     1.288987    2.7390729  -0.23406434    0.8593735    1.0239628   0.74555836   -1.2298232            1  -0.14640639  -0.40892301  -0.41037227   0.38007611   0.00678711 -0.068346697 -0.0018496321  -0.30019673  -0.29257198   0.72372247        0.075    1.3916534        1e-10 1.6082722e-11    6.2178531    2.4378378    31.520363 -0.011284173  -0.19300748 0.0019070149   0.21787819   0.36071835 -0.00054752725 
 2300000    4.0058289    1.2828201    2.7230088  -0.23727198   0.85526202    1.0118833    0.7469604   -1.2298232            1  -0.25152543  -0.50915996  -0.48538281   0.23996646 -0.020797434  0.015425571 -0.00055569621  -0.40560498  -0.39596675   0.72003333        0.075    1.4115723        1e-10 1.6000741e-11    6.2497107    2.4398294    31.520363 0.0023536034  -0.22854869 -0.0037910664   0.19818017   -1.0841515     1.412957 
 2301000    4.0147184     1.262144    2.7525744   -0.2259338   0.84147712   0.98923641   0.73930681   -1.2298232            1  -0.15455246  -0.40548251  -0.40340291   0.34522804 -0.012530094  -0.03486431  0.029869918  -0.30705326  -0.29576104   0.70747284        0.075    1.4125223        1e-10 1.5721619e-11    6.3606682    2.4384126    31.520363 -0.001486662   -0.2098307 0.0064423394   0.18663406    1.0665642   -1.1450805 
 2302000    4.0229667     1.280028    2.7429387  -0.22495129   0.85340048     1.006082   0.74782511   -1.2298232            1 -0.069501582  -0.34919332  -0.32769734   0.46838591 -0.0086176869 -0.061715303  0.039716256  -0.22375949  -0.21311478   0.70946372        0.075    1.4109076        1e-10 1.576586e-11    6.3428191    2.4371341    31.520363 -0.010926084  -0.18863635 -0.0096460637   0.19029995     1.298615    1.6765765 
 2303000    4.0300699    1.2926509     2.737419  -0.23170496   0.86181622    1.0168997   0.75457947   -1.2298232            1  -0.23809513  -0.47053352  -0.45999036   0.21623849 0.0045586242 -0.064302947 -0.037505282   -0.3937463   -0.3832525   0.72299001        0.075    1.4165233        1e-10 1.6066445e-11    6.2241524    2.4454351    31.520363 0.00082043078  -0.21991032 -0.0095706449   0.20790852    1.6905783   0.33459769 
 2304000    4.0461669    1.2861991    2.7599678  -0.22855468   0.85751476    1.0039023   0.75629526   -1.2298232            1  -0.10557392  -0.38857228  -0.36486721   0.43671774  0.016175683 -0.076011009 -0.0084218416  -0.26157901  -0.24887598   0.72171828        0.075    1.4273352        1e-10 1.6038184e-11    6.2351199    2.4473314    31.520363 0.0045250448  -0.20081894 0.0047129838   0.21513613  -0.25877125    2.6686417 
 2305000    4.0291097    1.2709681    2.7581417  -0.22971872   0.84736018   0.99969363   0.74202507   -1.2298232            1  -0.15705873  -0.41837844  -0.40634383   0.35354608 -0.0070548489  -0.12447551 -0.0052371355  -0.31012024  -0.29976002   0.71382737        0.075    1.4336789        1e-10 1.5862831e-11    6.3040452    2.4426239    31.520363 -0.0051952816  -0.21463482 0.0088959481   0.18014592    2.1150522    2.0478711 
 2306000    4.0271217    1.2796265    2.7474952   -0.2307361   0.85313281   0.99955643   0.75188792   -1.2298232            1  -0.11524736  -0.38892868  -0.38113653   0.42432312  0.010111579 -0.028084008 -0.034119959  -0.27034333  -0.25792907   0.71143535        0.075    1.4315182        1e-10 1.5809674e-11    6.3252409     2.455746    31.520363 0.00061998975  -0.17794522 -0.016745574   0.20090144     1.719005    2.0374677 
 2307000    4.0404743    1.2901992    2.7502752  -0.23237021   0.86018166    1.0113336   0.75566541   -1.2298232            1  -0.17478247  -0.45724937  -0.39701126    0.3299132 -0.00027973685 -0.079543136  -0.04220407  -0.33065765  -0.31914531   0.71750578        0.075     1.435067        1e-10 1.5944573e-11    6.2717265    2.4559189    31.520363 -0.0072090361  -0.21038392 -0.0031788416   0.19002696    1.4598176    3.1040711 
 2308000    4.0234196    1.2884103    2.7350093  -0.22661179   0.85898897    1.0196982   0.74785884   -1.2298232            1  -0.16591758  -0.40523241  -0.43755621   0.34503589 -0.0052911112 -0.025685814  -0.02809681  -0.32018245  -0.31147442    0.7172978        0.075    1.4274054        1e-10 1.5939951e-11    6.2735449    2.4347813    31.520363 -0.001762419  -0.19279496 0.0043649224   0.21100725  -0.62712038    2.1999569 
 2309000    4.0377263     1.285666    2.7520603  -0.22591276   0.85715934    1.0072849   0.75335303   -1.2298232            1  -0.16047441   -0.4184677  -0.43874044   0.37578491 -0.010745063 0.0041759912  0.022537557   -0.3158726  -0.30425932   0.71582905        0.075    1.4322267        1e-10 1.5907312e-11    6.2864172    2.4520074    31.520363 0.0070100222  -0.20013623 -0.0014287142   0.20402478   -0.3992276    2.5847629 
 2310000    4.0306228    1.2787008     2.751922  -0.23636773    0.8525156    1.0059464   0.74642163   -1.2298232            1  -0.17222139   -0.4130057  -0.42138789   0.31772943   0.01440319 -0.038981059  0.013089043   -0.3261898  -0.31581523   0.71113104        0.075    1.4177759        1e-10 1.5802912e-11    6.3279476    2.4475783    31.520363 -0.0038209033  -0.20858656 0.0038590993   0.19896633    0.9886463    1.6699677 
 2311000    4.0437334    1.2890507    2.7546827  -0.22713456   0.85941596       1.0067   0.75757627   -1.2298232            1  -0.18235252  -0.40907997  -0.45291107   0.31493348 -0.0040637918  0.082941686  0.030402978  -0.33862186  -0.32605394   0.71188253        0.075    1.4118704        1e-10 1.5819612e-11    6.3212676    2.4422403    31.520363 -0.0077150031  -0.19843513 -0.0089194913   0.19595017    1.1446379    1.0571194 
 2312000    4.0517805    1.3073556    2.7444249   -0.2380671   0.87161995    1.0254745   0.76523456   -1.2298232            1  -0.17580932  -0.49051625  -0.39613776   0.35922605 0.00091315334 -0.0098051644  0.086310176  -0.33365837   -0.3221907   0.71822514        0.075     1.402496        1e-10 1.5960559e-11    6.2654448    2.4456126    31.520363 -0.0073475431  -0.19149252  0.002480764   0.19477595  -0.29837747  -0.25529226 
 2313000    4.0192237    1.2749697     2.744254   -0.2310222   0.85002808     1.003237   0.74408736   -1.2298232            1  -0.14806613  -0.40773134  -0.39825464    0.3617876   0.02427435 -0.022975174  0.031391903  -0.30155303  -0.29127322   0.71534382        0.075    1.4022415        1e-10 1.5896529e-11    6.2906813    2.4500663    31.520363  0.005504958  -0.21169437 -0.0018589452   0.18992769   -1.0222297    2.1186005 
 2314000    4.0303936    1.2773953    2.7529983  -0.22717917   0.85164524    0.9968377    0.7512522   -1.2298232            1  -0.18746944  -0.42601268  -0.42369874    0.2873031  0.011990611 -0.0065634672 -0.037045925  -0.34243428  -0.32976306   0.71092919        0.075    1.4057672        1e-10 1.5798426e-11    6.3297443    2.4428645    31.520363  -0.01436287  -0.19990032 0.0035117562   0.21492608    1.3130856   0.63617733 
 2315000    4.0171371    1.2661076    2.7510295  -0.23053845   0.84411967   0.98110902   0.74940256   -1.2298232            1 -0.043422581  -0.30273124  -0.34221223   0.51467573 -0.0055012159  0.071520543  -0.05518339  -0.19800588  -0.18347101   0.71055481        0.075    1.4291475        1e-10 1.5790107e-11    6.3330793    2.4397223    31.520363 -0.0060266417  -0.17200376 -0.0030967988   0.21803753    1.3922939    2.2361381 
 2316000    4.0137179    1.2742343    2.7394836  -0.23498201   0.84953779    1.0048636   0.74213212   -1.2298232            1  -0.13761809  -0.42445897  -0.37390547   0.38551016 -0.0093832679  0.062438644  0.025450598  -0.29070168  -0.28105738   0.72205171        0.075    1.4151565        1e-10 1.6045594e-11    6.2322406    2.4486363    31.520363 -0.012756294  -0.17667987 -0.0097928606   0.21316912   0.55585503  -0.38190032 
 2317000     4.006285    1.2738997    2.7323853  -0.23120113   0.84931473    1.0011975   0.74429167   -1.2298232            1   -0.1322782  -0.39600275  -0.38397421   0.38314236  -0.02934793 -0.090907327  0.038618738  -0.28580725  -0.27519417   0.72076037        0.075    1.4249413        1e-10 1.6016897e-11    6.2434065    2.4503203    31.520363 -0.0039088905  -0.18690685 0.0053740193   0.19572377   0.82898351  -0.31546643 
 2318000    4.0252533    1.2811623     2.744091  -0.22482273   0.85415672   0.99861616   0.75427118   -1.2298232            1   -0.1508928  -0.41169825  -0.40032635    0.3593462 -0.0039404481  0.096248698 -0.045263315  -0.30648038  -0.29344029   0.71236945        0.075    1.4382012        1e-10 1.5830432e-11    6.3169469      2.44086    31.520363 0.0056148539  -0.21507615 -0.00043927915   0.19946532  -0.16167335    1.6965269 
 2319000    4.0295551    1.2648069    2.7647482  -0.22596603    0.8432525   0.99347645   0.73937679   -1.2298232            1  -0.21001625  -0.47226453  -0.44268305   0.28489883 -0.0021219329  0.023380353 -0.045083994  -0.36253148  -0.35183007   0.71615729        0.075    1.4213398        1e-10 1.5914606e-11    6.2835358    2.4616578    31.520363 0.0036156834  -0.21370552 0.0041917011    0.1803456    1.2227607   -1.1737122 
 2320000    4.0267818    1.2745827    2.7521991   -0.2292983   0.84977007   0.99802803   0.74725548   -1.2298232            1  -0.14588322  -0.41594632  -0.41242494   0.39072161 -0.0010499262 -0.031929645  0.060806896  -0.30002363  -0.28834675   0.71817016        0.075    1.4346459        1e-10 1.5959337e-11    6.2659245      2.44825    31.520363 -0.003487242  -0.20348442  0.010682072   0.24449235 -0.035644069    2.2834779 
 2321000    4.0450077    1.2926651    2.7523426  -0.23689935   0.86182572    1.0211446   0.75165801   -1.2298232            1  -0.16990227  -0.44065741  -0.39603925   0.32698985 -0.012854686 -0.057600552 -0.031156835  -0.32495082  -0.31566558   0.71987092        0.075    1.4411931        1e-10 1.5997132e-11    6.2511207    2.4447501    31.520363 0.0017444256  -0.19392184 -0.013754511   0.17540593    -1.422734    2.0404155 
 2322000    4.0205361    1.2782864    2.7422497  -0.23902781   0.85223937    1.0143395    0.7401461   -1.2298232            1  -0.27166376  -0.49256521  -0.52659969   0.20417362 -0.0054776229 0.0055164242 -0.003616579  -0.42433768  -0.41645567   0.72098479        0.075    1.4220547        1e-10 1.6021884e-11    6.2414632    2.4483053    31.520363 0.0027850869  -0.19596482 -0.020515097   0.17374193 -0.061325409    1.2252299 
 2323000    4.0123425     1.276738    2.7356045   -0.2335439   0.85120701    1.0021792   0.74681426   -1.2298232            1  -0.15808994  -0.38890014  -0.38271321   0.29734352 -0.013950183   0.11994402  0.025899068  -0.31213934  -0.30114604   0.71311885        0.075    1.4106431        1e-10 1.5847086e-11    6.3103086    2.4337573    31.520363 0.0021977137   -0.1977747 0.0050363073    0.1765246   0.70301522      2.07328 
 2324000    4.0416073    1.2949003     2.746707  -0.22350929   0.86331592    1.0087941   0.76272629   -1.2298232            1  -0.18757214  -0.41383272  -0.42756089   0.27867721 -0.0023701089  0.070289241 -0.026966115   -0.3449038  -0.33157247   0.71701567        0.075    1.4136639        1e-10 1.5933682e-11    6.2760134    2.4496124    31.520363 0.0035807149  -0.22210852  0.007846575   0.19748099   0.10691893    0.5248083 
 2325000    4.0126246    1.2906877    2.7219368  -0.23579814   0.86050738    1.0155737   0.75328238   -1.2298232            1 -0.066396186  -0.35423424  -0.30050381   0.45554949 -0.0015641419 -0.039806991  0.038757102   -0.2217798  -0.21136428   0.71836167        0.075    1.4202835        1e-10 1.5963593e-11    6.2642541    2.4502108    31.520363 -0.0033008505  -0.17190221 -0.0093425564   0.20363653   0.48930658    1.7644728 
 2326000    4.0323384    1.2865405    2.7457979  -0.23193663   0.85774241   0.99655866   0.76176237   -1.2298232            1  -0.14952895  -0.39999855  -0.41970687   0.37111858 -0.0064804469 -0.081290249  0.022934805  -0.30666177  -0.29178274   0.71988212        0.075    1.4069553        1e-10 1.599738e-11    6.2510235    2.4499499    31.520363 -0.00074960854  -0.19947764 -0.010810777   0.21220802   0.12818044     1.493755 
 2327000    4.0248413    1.2776886    2.7471527  -0.23031121    0.8518408    1.0066405   0.74479946   -1.2298232            1  -0.10945032  -0.37928825  -0.37816697   0.42910428 0.00046494735 -0.0068568375 -0.013199827  -0.26308411  -0.25314324   0.71454465        0.075    1.4019038        1e-10 1.587877e-11     6.297717    2.4440545    31.520363 0.0022575589  -0.20828068 -0.0033982546   0.18856373   0.21570305   0.53657952 
 2328000    4.0236572     1.278515    2.7451422  -0.23117441   0.85239174     1.007225   0.74532719   -1.2298232            1   -0.1395876  -0.43209584  -0.39656692   0.40989997 -0.0073338564 -0.049881218   0.02600427  -0.29333025  -0.28336396   0.71517581        0.075    1.3990845        1e-10 1.5892796e-11    6.2921591    2.4685758    31.520363  0.010917906  -0.19277417 0.0061818062   0.20074134     1.553575   0.74254074 
 2329000    4.0449722    1.2880024    2.7569699  -0.22974946   0.85871702      1.00246   0.75932771   -1.2298232            1  -0.16071148  -0.40787165  -0.42119203   0.34692923 -0.0083159286 0.0076663225 -0.021005351   -0.3173421  -0.30380766   0.71394137        0.075    1.4015586        1e-10 1.5865364e-11    6.3030386    2.4550844    31.520363 -0.0085595759  -0.20555613 -0.0055105194   0.19998739    1.1627273   0.86402722 
 2330000    4.0171021    1.2655753    2.7515267  -0.22922754   0.84376482    1.0094882   0.72916341   -1.2298232            1   -0.2201656  -0.45447556  -0.48140706   0.27538581 -0.0066662747 -0.038799379  -0.01860813  -0.37057407  -0.36426501   0.71316157        0.075    1.3923208        1e-10 1.5848035e-11    6.3099306    2.4577856    31.520363   0.01063976  -0.20486219  0.015786893   0.20083487    0.4267374   0.84646691 
 2331000    4.0363841    1.2777032    2.7586808  -0.23263632   0.85185056    1.0054679   0.74562742   -1.2298232            1   -0.2090788  -0.44129821  -0.46047897   0.27454078 -0.003126842  -0.13250203  0.014326028  -0.36288338  -0.35260434   0.71279024        0.075    1.3812617        1e-10 1.5839783e-11    6.3132177    2.4390808    31.520363 0.0029730643  -0.20166486 -0.0023527591   0.20394895   0.75336763    1.7050828 
 2332000    4.0261855    1.2724747    2.7537108  -0.22691191   0.84836464   0.99933317   0.74397417   -1.2298232            1  -0.10434384  -0.33751614  -0.39610594   0.42059056 0.0015946803  0.031077338 -0.016179362   -0.2578074  -0.24699368   0.71236387        0.075     1.369629        1e-10 1.5830308e-11    6.3169964    2.4443608    31.520363 -0.0091292303  -0.21144717 -0.0065855194   0.18501227    1.7522895    1.7283444 
 2333000    4.0510408    1.2950686    2.7559722  -0.23018337   0.86342812    1.0065044   0.76450064   -1.2298232            1  -0.27821503  -0.51573655  -0.48678689   0.16787835 -0.010789228  0.096733906  0.019043207  -0.43591269  -0.42188852   0.71467071        0.075    1.3640603        1e-10 1.5881571e-11    6.2966062     2.443978    31.520363 -0.0097069827  -0.19429275 0.0080249079   0.18250213   0.87184813   0.12437729 
 2334000    4.0221607    1.2905659    2.7315949  -0.23044682   0.86042612    1.0088088   0.75782624   -1.2298232            1 -0.025599688  -0.30146236  -0.30348335   0.52814665 0.00042753577  0.023061792 -0.068881526  -0.18192059  -0.16960213   0.71849854        0.075    1.3650803        1e-10 1.5966634e-11    6.2630608    2.4401227    31.520363 -0.010346905   -0.2037089 -0.0017514689   0.18841332    -1.206283    3.6795246 
 2335000    4.0281748    1.2742036    2.7539712  -0.22702566    0.8495173   0.98887533   0.75316154   -1.2298232            1  -0.16079183  -0.39881877  -0.41015811   0.32660138 -0.00057350057   -0.0286441 -0.010300176  -0.31615052  -0.30194886    0.7138846        0.075    1.3608206        1e-10 1.5864102e-11    6.3035398    2.4425414    31.520363 0.0047829434  -0.21931666 0.0018370111   0.19246085  -0.84697998  0.061913379 
 2336000    4.0197533    1.2707017    2.7490517  -0.22999283   0.84718257    1.0027574   0.73960437   -1.2298232            1  -0.11264257  -0.37231329  -0.37256867   0.40695424  0.006879046 -0.067478213 0.0046456269  -0.26520475   -0.2557812   0.71446944        0.075    1.3738931        1e-10 1.5877099e-11      6.29838    2.4469137    31.520363 0.00011723179  -0.19549941 -0.0033914458   0.20293894   0.50586155    1.6876115 
 2337000    4.0282963    1.2763989    2.7518973  -0.22658985   0.85098096   0.99486885   0.75149063   -1.2298232            1 -0.078443916  -0.33037463  -0.31548507   0.41052794 -0.010511627  0.011888597 -0.0042346447  -0.23345794  -0.22045649   0.71161396        0.075    1.3745659        1e-10 1.5813644e-11    6.3236534    2.4461897    31.520363 0.0094502011  -0.22659807 -0.0079365424   0.20209767  -0.41025244     1.005308 
 2338000    4.0276914    1.2714492    2.7562422  -0.22152277   0.84768093   0.99984906   0.74246026   -1.2298232            1 -0.039036143  -0.33506495  -0.31139249   0.52934901 -0.0022226906 -0.031134634 -0.010549553  -0.19218742  -0.18175962   0.71018362        0.075    1.3877367        1e-10 1.5781858e-11    6.3363894    2.4402867    31.520363 -0.0071052652  -0.20838893 -0.0063950212   0.18766322  -0.16659945    1.8711736 
 2339000    4.0174389    1.2755797    2.7418592  -0.23579325   0.85043478    1.0098334    0.7402108   -1.2298232            1  -0.18231887  -0.41820259  -0.43074564   0.30199161 -0.010355519 0.0018320375  0.018978443  -0.33500614  -0.32646756   0.71836406        0.075    1.3891965        1e-10 1.5963646e-11    6.2642332    2.4421436    31.520363 0.0041428154  -0.22356592 -0.0017761347   0.19395782   0.30533783    1.6073641 
 2340000    4.0266287    1.2876006    2.7390281  -0.23488449   0.85844917    1.0113405   0.75272908   -1.2298232            1 -0.052902501  -0.29785489  -0.33817338   0.47732077  0.003937363  0.053586826 -0.016411636  -0.20817198  -0.19726632   0.72275844        0.075    1.3748524        1e-10 1.6061299e-11    6.2261466    2.4439683    31.520363 -0.00037668913  -0.18347726 -0.0019001589   0.19166483   -0.7131885     2.243976 
 2341000    4.0220477    1.2722056    2.7498421  -0.22657598   0.84818525    1.0074385   0.73806162   -1.2298232            1  -0.22216007  -0.44739151  -0.45813175   0.23904305 -0.018583344 0.0013736672  0.016480974  -0.37440402  -0.36596691   0.71807277        0.075    1.3805671        1e-10 1.5957173e-11    6.2667744    2.4609289    31.520363 0.0035199575  -0.19226481 -0.00074033199   0.17888495   0.75663624   0.82433997 
 2342000    4.0106451    1.2742803    2.7363648  -0.22970603   0.84956844    1.0053125   0.74187338   -1.2298232            1      -0.1145  -0.38737496  -0.37832373    0.4221987  0.013515507  0.043228619 -0.014870759  -0.26753021  -0.25800335   0.71092239        0.075    1.3775099        1e-10 1.5798275e-11    6.3298049    2.4378764    31.520363 -0.0099814662  -0.21063415 -0.0034227478    0.2130262   0.64564142  0.094713656 
 2343000    4.0258992    1.2708532     2.755046  -0.22630768   0.84728359    1.0031108   0.73953076   -1.2298232            1 -0.047882831  -0.29664454  -0.31990353   0.47289958  0.013323652 -0.0060243034  0.017332751  -0.20042982  -0.19107191   0.71381841        0.075    1.3721155        1e-10 1.5862631e-11    6.3041243    2.4486343    31.520363 -0.001535682  -0.16310996 -0.013004348   0.22200815   0.53517877    1.4306544 
 2344000    4.0322201    1.2842833    2.7479368  -0.23206041    0.8562375    1.0103981   0.74963884   -1.2298232            1  -0.22018108  -0.49751378  -0.45274344   0.28971398 0.0015294333  -0.10313425  0.047272679  -0.37481312  -0.36441038    0.7199441        0.075    1.3682285        1e-10 1.5998758e-11    6.2504853    2.4408002    31.520363  -0.00606291  -0.20272494 0.0040250423   0.21154247   0.12876937   -1.5035743 
 2345000    4.0392267    1.2918176    2.7474092  -0.23152768   0.86126062    1.0179491    0.7529131   -1.2298232            1  -0.13169265  -0.41027044  -0.36039903   0.37559151 -0.0011566917 -0.044716109  0.026531729  -0.28700009  -0.27699983   0.72610267        0.075    1.3774866        1e-10 1.6135615e-11    6.1974707    2.4520869    31.520363 0.0012159332   -0.1825428 -0.0039043786   0.23334268  0.018328038    2.1382028 
 2346000    4.0277164    1.2889236    2.7387928  -0.22870092   0.85933122    1.0100594   0.75510814   -1.2298232            1  -0.11810586   -0.3653672  -0.39206518    0.4031148 -0.0082493358 0.0072296626 0.0043884071  -0.27386608  -0.26228681   0.71648355        0.075    1.3939363        1e-10 1.5921857e-11    6.2806746    2.4556156    31.520363 0.0031712361  -0.19544491 -0.0023042325   0.20089549   0.43651076   0.42272441 
 2347000    4.0267691    1.2859031     2.740866  -0.22989634   0.85731746   0.99489278   0.76219611   -1.2298232            1  -0.27225415  -0.48070932  -0.50446079   0.16840767  0.010112504  0.032668155  0.046313257  -0.42947644  -0.41427014   0.70992339        0.075    1.4002631        1e-10 1.5776075e-11    6.3387121    2.4372467    31.520363 0.0001294366  -0.21156106 -0.0018979441   0.19016163   0.24552832    1.3975613 
 2348000    4.0180122    1.2646756    2.7533367  -0.22907623   0.84316496   0.98883815   0.74243842   -1.2298232            1 -0.083589311   -0.3442551  -0.35634736   0.44983452 0.0017815764  0.039507677 -0.057187746  -0.23673608  -0.22474104   0.71521536        0.075    1.3793726        1e-10 1.5893675e-11    6.2918112     2.448777    31.520363 -0.0094564034  -0.19867406 0.0012420891   0.19184846   0.22300581    2.1363466 
 2349000    4.0286279    1.2855145    2.7431134   -0.2268976   0.85705838   0.99105038   0.76441671   -1.2298232            1  -0.12587371  -0.40341245  -0.35777311   0.38356444 -0.00042390841  -0.10920008 -0.019075638  -0.28355406  -0.26734122    0.7222372        0.075    1.3805362        1e-10 1.6049715e-11    6.2306401    2.4478174    31.520363 -0.0001098839  -0.23637798 0.0015600668   0.19500345   0.42693202   0.15600984 
 2350000    4.0127227    1.2721924    2.7405303  -0.23185512   0.84817645   0.99398835    0.7473544   -1.2298232            1  -0.14090585   -0.4063115  -0.38108838   0.36468233 -0.0061971146  -0.04655433 -0.016410647  -0.29506667  -0.28279274   0.71716161        0.075    1.3766342        1e-10 1.5936925e-11    6.2747363    2.4451185    31.520363 0.0071985724  -0.20131995 -0.0084804753   0.20444832     1.086603    1.2535074 
 2351000    4.0281204    1.2900663    2.7380541  -0.22641737   0.86009306    1.0019109   0.76203611   -1.2298232            1  -0.18829415  -0.43300479  -0.43679744   0.30491978 -0.0013458108 -0.023484695 -0.027338063  -0.34548344  -0.33131195   0.71343573        0.075    1.3725195        1e-10 1.5854127e-11    6.3075058    2.4538828    31.520363 -0.0064573804  -0.19974799 0.0047079059   0.18388492    1.4436873    2.7500405 
 2352000    4.0189787    1.2861509    2.7328278  -0.23018183   0.85748262   0.99493676   0.76244514   -1.2298232            1  -0.15283621  -0.43565761  -0.36494221   0.34209118 -0.014594928  0.011839111  0.019150755  -0.31010988  -0.29485848   0.72000104        0.075    1.3790198        1e-10 1.6000023e-11     6.249991     2.457466    31.520363 0.0032884764  -0.17256815 0.0020109956   0.19453082   -0.6728776   -1.5428133 
 2353000    4.0123598    1.2692909     2.743069  -0.23638154   0.84624198   0.98029063   0.75356007   -1.2298232            1   -0.1746378  -0.42623569  -0.42815517   0.33047746 -0.0032392762 -0.016288191  0.049747432  -0.33007869  -0.31456941   0.71970768        0.075    1.3879668        1e-10 1.5993504e-11    6.2525385    2.4390456    31.520363 0.0095411919   -0.1921318 0.0017083565   0.21426012  -0.32266103   0.30840397 
 2354000    4.0304309    1.2740815    2.7563494  -0.22816693   0.84943589   0.98628575   0.75481581   -1.2298232            1  -0.10151357  -0.35483699  -0.35253174   0.40282803 -0.016112941 -0.017818583  0.009215662  -0.25721349  -0.24230095    0.7170714        0.075    1.3873988        1e-10 1.593492e-11    6.2755257    2.4444935    31.520363 -0.0063218354  -0.22033334 -0.00055836273   0.19032997 -0.066115051    1.8853986 
 2355000    4.0252891    1.2769721     2.748317  -0.22374013   0.85136308    1.0026749   0.74673535   -1.2298232            1 -0.092174356  -0.34785178  -0.36531649    0.4366452 0.0081557187  0.031854452  0.029029137  -0.24620748  -0.23530121    0.7195631        0.075    1.3740715        1e-10 1.5990291e-11    6.2537948    2.4478764    31.520363 -0.0020170095  -0.19672676 -0.0032310526   0.18347508  -0.30280754    1.5802801 
 2356000    4.0271826    1.2725898    2.7545928  -0.22890254   0.84844138   0.98814026   0.75184964   -1.2298232            1  -0.20734265  -0.45798082  -0.48103344   0.31698631 -0.0097529656  0.029147292  0.010521491  -0.36243072  -0.34839475   0.72028982        0.075    1.3772373        1e-10 1.600644e-11    6.2474852    2.4589741    31.520363 -0.011761869  -0.19278975 -0.0075224735   0.20592455  -0.65449541   0.11899926 
 2357000    4.0243374    1.2725689    2.7517684  -0.22859073   0.84842747    1.0042652   0.74066747   -1.2298232            1  -0.11538986  -0.38351621  -0.37404494   0.41139155 0.0098788111 -0.052999989 -0.049744516  -0.26817133  -0.25874372   0.71673711        0.075     1.384242        1e-10 1.5927491e-11    6.2784527    2.4425045    31.520363 -0.0046070361   -0.1734115 -0.0047195457    0.2149897   0.25541064    2.7231881 
 2358000    4.0170464    1.2684709    2.7485754  -0.22520827   0.84569533   0.99349369   0.74349839   -1.2298232            1  -0.15504477  -0.40720822  -0.37962609   0.32170001 0.0053340164 0.0011765896 -0.016077018  -0.30841018  -0.29686105   0.71369069        0.075    1.3870895        1e-10 1.5859793e-11    6.3052525    2.4419266    31.520363 -0.0080301499  -0.18559081 -0.0082065876   0.17794042   -1.9222235   0.37463868 
 2359000    4.0215016    1.2725766     2.748925  -0.22713219   0.84843257   0.99963927   0.74387728   -1.2298232            1  -0.12655326  -0.35971602  -0.40573491   0.38579115  0.011322672  0.050209201  0.042357636  -0.27999683  -0.26924679   0.71805444        0.075    1.3981066        1e-10 1.5956765e-11    6.2669343    2.4556863    31.520363 0.00022559775  -0.20030854 -0.0033318348   0.18685655  -0.13800157    1.9763055 
 2360000    4.0359433    1.2760721    2.7598712  -0.22918827   0.85076303   0.98897756   0.75519871   -1.2298232            1  -0.14603256  -0.38074314  -0.40239124    0.3450367 0.0083789237  0.086074252  0.016344995  -0.30181146  -0.28720418   0.71595901        0.075    1.3828996        1e-10  1.59102e-11     6.285276    2.4388895    31.520363 -0.00088324844  -0.19655829 -0.0043502468   0.18692618   0.57675472    1.2779048 
 2361000    4.0421312    1.2788909    2.7632403  -0.22152346   0.85264234    1.0014566   0.74974303   -1.2298232            1   -0.1372737  -0.38068508  -0.40772823   0.37659222 0.0081647088  0.091082894  0.027082723  -0.29192723  -0.28022665   0.71704307        0.075    1.3936386        1e-10 1.593429e-11    6.2757737    2.4575115    31.520363 0.0013111683   -0.2077562 0.0070798083   0.21846853   0.59149818   0.87856287 
 2362000    4.0065203    1.2720757    2.7344446  -0.23139024   0.84809861    0.9989261   0.74380572   -1.2298232            1  -0.12347034  -0.39585077   -0.3644799   0.38991965 -0.022583577 -0.033327707 -0.041948105  -0.27689915  -0.26606207   0.71906655        0.075      1.39605        1e-10 1.5979257e-11    6.2581134    2.4655067    31.520363 0.0051932065  -0.19485642 -0.0020441364   0.22984154  -0.12543859    1.5995326 
 2363000    4.0098193    1.2692136    2.7406057   -0.2303525   0.84619045    1.0105893   0.73250584   -1.2298232            1 -0.062874169  -0.32569938  -0.33618544   0.47326231 -0.0091492093 -0.038505753 -0.021971751  -0.21397209  -0.20713076   0.71679228        0.075    1.3979348        1e-10 1.5928717e-11    6.2779694    2.4402462    31.520363 -0.0082526441  -0.23632341 0.0013888228   0.20403513   0.29304222  0.077243428 
 2364000    4.0265488    1.2856991    2.7408497  -0.22865805   0.85718143    1.0156578    0.7475963   -1.2298232            1  -0.16330299   -0.4072475   -0.4143608   0.33169932 -0.0023802387  0.091021998 -0.039045098  -0.31751371  -0.30828309    0.7164191        0.075    1.3804086        1e-10 1.5920424e-11    6.2812396    2.4456483    31.520363 -0.0053814267  -0.20731086 -0.0082087631   0.21512727  -0.88454929    1.7145868 
 2365000    4.0435165    1.2826868    2.7608297  -0.22311445   0.85517308    1.0067699   0.75034848   -1.2298232            1  -0.14418694  -0.38321126   -0.3879385   0.33858895 0.0025570619  0.061338059  0.058287501  -0.29896536  -0.28789833   0.71170878        0.075    1.3876681        1e-10 1.5815751e-11    6.3228108    2.4547708    31.520363 -0.014552177  -0.20920848 0.0059897452    0.2184525    0.1354805  -0.61034616 
 2366000    4.0408625    1.2866653    2.7541971  -0.23241202   0.85782563    1.0166035   0.74803188   -1.2298232            1    -0.172427  -0.42424435   -0.4338857   0.34084906 -0.010925225  0.010380272 -0.032685203  -0.32672756  -0.31754209   0.70668457        0.075    1.3785645        1e-10 1.5704102e-11    6.3677632    2.4422832    31.520363 -0.0012412198  -0.18990777 -0.0039156662   0.20263721  -0.01032361   0.17249732 
 2367000     4.035706    1.2921841    2.7435219  -0.23142566     0.861505    1.0057302    0.7617823   -1.2298232            1  -0.17351595  -0.39454891  -0.42943616   0.30343723 0.0016606364 -0.027669466 -0.031763344  -0.33065288  -0.31707892   0.71485629        0.075    1.3764125        1e-10 1.5885695e-11    6.2949715    2.4514321    31.520363  0.017292069  -0.19614026 0.00075387084   0.20819862   0.33704746    1.0460331 
 2368000    4.0263714    1.2786745    2.7476969  -0.22613585   0.85249812     1.008032   0.74494879   -1.2298232            1 -0.076436074  -0.37585143  -0.30084247   0.44738568 -0.0064722362 -0.065421881 -0.026425976  -0.23010067  -0.22032762   0.71972872        0.075    1.3767847        1e-10 1.5993972e-11    6.2523557    2.4442325    31.520363 0.0064306772  -0.20199255 0.0031934957   0.20333624   0.23402872    1.9839506 
 2369000    4.0462253    1.2841993     2.762026  -0.22582378   0.85618147    1.0034083   0.75438102   -1.2298232            1  -0.06928308  -0.36779098  -0.32752345   0.48746519 -0.013316908  0.046749595  0.027208643  -0.22489332  -0.21251463   0.71488274        0.075    1.3746952        1e-10 1.5886283e-11    6.2947386    2.4596071    31.520363  0.003471186  -0.21302444 0.0047490814   0.18955645   0.21085784   0.99531441 
 2370000    4.0391178    1.2846053    2.7545125  -0.22804133   0.85645221    1.0092553   0.75079298   -1.2298232            1  -0.19269711  -0.44354363  -0.42858944   0.29404173 -0.0089032436 0.0054062682 -0.030130992  -0.34756722  -0.33676329   0.71170128        0.075    1.3727481        1e-10 1.5815584e-11    6.3228775    2.4431763    31.520363 -0.00040676851  -0.17240651 -0.016383828   0.19602365  -0.68789638    2.2860057 
 2371000    4.0330324    1.2922122    2.7408202  -0.22528252   0.86152376    1.0031388   0.76360726   -1.2298232            1  -0.17123705  -0.41687485  -0.42337433   0.32653803    0.0128895   0.06094159  0.023893971  -0.32875043  -0.31443012   0.71834697        0.075    1.3718424        1e-10 1.5963266e-11    6.2643822    2.4430551    31.520363 0.0020444231  -0.22918543 0.0019173377   0.22370157   -1.2705487   -1.0408041 
 2372000    4.0443014     1.278647    2.7656543  -0.22569257   0.85247977   0.99675203   0.75272359   -1.2298232            1    -0.177853  -0.42112692  -0.44763513   0.33520305 -0.0032076526  0.030627815  0.054696523  -0.33312135  -0.32013439   0.71817461        0.075    1.3677828        1e-10 1.5959436e-11    6.2658857    2.4545299    31.520363 -0.008605969   -0.1834827 -0.004477006   0.22097365  -0.37696525    2.3258834 
 2373000    4.0601841    1.2907349    2.7694492  -0.22689067    0.8605388    1.0127258   0.75530633   -1.2298232            1 -0.059823444  -0.34932476  -0.32069552   0.49054995 -0.0069168277 -0.053681524  -0.01549912  -0.21562455  -0.20438501   0.71662765        0.075    1.3617885        1e-10 1.5925059e-11    6.2794117    2.4405098    31.520363 -0.001627439  -0.20184278 9.7367199e-05   0.22819297   0.75225748    2.2688971 
 2374000    4.0391667    1.2953221    2.7438446  -0.22972121   0.86359712    1.0164312   0.75791716   -1.2298232            1   -0.1922095  -0.48951881  -0.41965289    0.3325432 0.0079650312 -0.055799296 -0.0059890596  -0.34854916  -0.33729999    0.7135945        0.075    1.3692183        1e-10 1.5857656e-11    6.3061024    2.4524786    31.520363 0.0081360344  -0.17908091 0.00031957175   0.20727717   0.37826319    -2.392916 
 2375000    4.0343143     1.284385    2.7499293  -0.22957743   0.85630533    1.0202618   0.74292783   -1.2298232            1  -0.20525887  -0.43185166  -0.41887609   0.23495115 -0.008840564 0.0089340975  0.018949671  -0.35850659  -0.35089616   0.71357039        0.075    1.3560472        1e-10 1.585712e-11    6.3063154    2.4482507    31.520363 -0.00015040615  -0.19672275 0.0033067003   0.20627673   0.29380241   -2.7540914 
 2376000    4.0576904    1.3021697    2.7555207  -0.22572856   0.86816247    1.0312821   0.75536522   -1.2298232            1 0.0090684774  -0.29335035  -0.27463236   0.59518814 0.00030205282  0.013911494 -0.024462046  -0.14674477  -0.13814191   0.71812798        0.075    1.3465072        1e-10 1.5958399e-11    6.2662926    2.4409099    31.520363 -0.0063403599  -0.20752251 -0.0023504395   0.19687871   0.22558169    2.4463405 
 2377000    4.0355944    1.2772963    2.7582981   -0.2250817   0.85157924    1.0191514   0.73569914   -1.2298232            1  -0.14252311  -0.36324782  -0.40824456   0.34392304   0.01475466  0.027811666 -0.045371736  -0.29427974  -0.28800191   0.71324161        0.075    1.3368712        1e-10 1.5849814e-11    6.3092224    2.4451665    31.520363 0.0053813762  -0.19200907 -0.012715153   0.21878779   -1.6200162    1.1043174 
 2378000    4.0468351    1.2872334    2.7596017  -0.22446514   0.85820437    1.0219046   0.74500437   -1.2298232            1 -0.080794694  -0.36983402  -0.33535176    0.4628017 0.0032812694  -0.01968927 -0.010284955  -0.23447076  -0.22666649   0.71113298        0.075    1.3335709        1e-10 1.5802955e-11    6.3279304    2.4565081    31.520363 -0.0028200327  -0.18050719 -0.0049658763   0.21032917    1.5634765    2.6450454 
 2379000    4.0498178    1.2922295    2.7575883  -0.22882355    0.8615353    1.0221519   0.75046951   -1.2298232            1   -0.0897825  -0.34504213  -0.33215452   0.40784915 0.0019312777 -0.010050555 0.0076033422  -0.24458589   -0.2356896   0.70589477        0.075    1.3353392        1e-10 1.568655e-11    6.3748879    2.4370445    31.520363 -0.0018851934   -0.1845748 -0.013399743   0.17102978    1.3567307    1.3785534 
 2380000    4.0512904    1.2865783    2.7647121  -0.22918805   0.85776758    1.0202874   0.74538441   -1.2298232            1  -0.13731889  -0.38500714  -0.39695532    0.3700058 -0.0082030417 0.0068463926 -0.030848364  -0.29107334  -0.28295983   0.71370136        0.075    1.3414246        1e-10 1.586003e-11    6.3051582      2.43795    31.520363 -0.0044721818  -0.19248949 0.0076095527    0.2067044     1.776835 -0.090922519 
 2381000    4.0492486    1.2957808    2.7534679  -0.22753564   0.86390292    1.0280653   0.75038363   -1.2298232            1 -0.034143046  -0.30637761  -0.29876289   0.50271137   0.01519032  0.045704328  0.015857745  -0.18892872  -0.18089425   0.71643007        0.075    1.3435315        1e-10 1.5920668e-11    6.2811434    2.4376115    31.520363 -0.0067742393  -0.23245288 0.0048069558   0.21377962   -1.2367385    2.6763403 
 2382000    4.0596031    1.3008465    2.7587567    -0.216394   0.86728024    1.0139482   0.76586762   -1.2298232            1  -0.11015523  -0.34819541  -0.36816081   0.38589051 -0.0040544597  0.033018937   0.01646971  -0.26813487   -0.2548913   0.71009179        0.075    1.3486978        1e-10 1.5779818e-11    6.3372089    2.4513135    31.520363 0.0021454466  -0.18097605 -0.0019839405   0.21057726   -1.0466838    3.1245935 
 2383000    4.0331809    1.2904573    2.7427237  -0.22568933   0.86035373    1.0229775   0.74789887   -1.2298232            1   -0.1696667  -0.41326789  -0.43666933   0.34093712 0.0059045363  0.048432114  0.041175567  -0.32393982  -0.31569164   0.70939789        0.075    1.3568213        1e-10 1.5764398e-11    6.3434077    2.4505011    31.520363 0.0075279754  -0.21432383 -0.0034253556   0.19807344   0.14969837   0.77853788 
 2384000    4.0359765    1.2877561    2.7482203  -0.23369584   0.85855286    1.0201108    0.7468354   -1.2298232            1  -0.10341856  -0.34751344  -0.37853744   0.41579519  0.009178133  0.030229682  0.026784863  -0.25747232   -0.2490343   0.71460392        0.075    1.3712719        1e-10 1.5880087e-11    6.2971947    2.4388371    31.520363 -3.1718499e-05  -0.22905239 -0.0044154323   0.20550121   0.99200382 -0.066131661 
 2385000    4.0107754    1.2621982    2.7485772  -0.23016348    0.8415133   0.99449585   0.73572844   -1.2298232            1  -0.21495571  -0.44086897  -0.47115837   0.26716022 0.0056062607  0.048707562 -0.019749279  -0.36671837  -0.35691504   0.71344092        0.075    1.3761426        1e-10 1.5854243e-11    6.3074599     2.442215    31.520363 -0.0033304936  -0.21677834 -0.015089565   0.16985104  -0.67392891   0.58007454 
 2386000    4.0404845    1.2825774    2.7579071  -0.22917485   0.85510016   0.98930566   0.76231056   -1.2298232            1  -0.19962396   -0.4214821  -0.44157307   0.26418328 -0.0028888237 -0.063344967  -0.01625255  -0.35686986  -0.34084242   0.71310955        0.075    1.3566924        1e-10 1.5846879e-11    6.3103909    2.4426196    31.520363 0.0024009606  -0.20532819 0.0029722203   0.20461593  0.013999206   0.51878326 
 2387000    4.0279039    1.2878659     2.740038  -0.22923146   0.85862605    1.0181366   0.74832538   -1.2298232            1  -0.12879181  -0.39231664  -0.37108292   0.37702413  0.013809002  -0.13519816  0.070251887  -0.28315292  -0.27412574   0.72094451        0.075    1.3523753        1e-10 1.6020989e-11    6.2418119    2.4413829    31.520363 -0.002492575   -0.1935832 0.0026990373   0.18592953   0.17997794    2.2547721 
 2388000    4.0327419    1.2883933    2.7443486  -0.23651948   0.85897769    1.0141508   0.75167862   -1.2298232            1    -0.120084  -0.36915172  -0.39114199   0.40004171 0.0034247486 -0.041360129 -0.027836423   -0.2751368  -0.26484898   0.71778815        0.075    1.3889682        1e-10 1.5950848e-11    6.2692592    2.4408374    31.520363 -0.0009837022   -0.2017701 -0.00078658593   0.19642502     1.055224  -0.78970683 
 2389000    4.0256711    1.2738506    2.7518205  -0.22655988     0.849282    1.0055567   0.74121966   -1.2298232            1  -0.13737354   -0.3840227  -0.38848513   0.36038719 0.0052148568 -0.065389216  0.022040031  -0.29026892  -0.28091177    0.7096286        0.075    1.4016433        1e-10 1.5769524e-11    6.3413453    2.4416039    31.520363 0.00080841571  -0.20576765 -0.010109963   0.18871815    1.3111718    1.5342845 
 2390000    4.0430065    1.2918536    2.7511528  -0.22121633   0.86128468     1.010196   0.75831905   -1.2298232            1 -0.090112718   -0.3476845  -0.34824028   0.42558663 0.0055589982  -0.11716346 -0.041766125  -0.24653527  -0.23431317   0.71104562        0.075    1.4143155        1e-10 1.5801014e-11    6.3287079    2.4428013    31.520363 -0.0052774328  -0.17333334 0.00093867733   0.20138584   0.35960444    0.7574194 
 2391000    4.0194276    1.2825279    2.7368997  -0.23686551   0.85506719    1.0059258   0.75075341   -1.2298232            1  -0.14598201  -0.39468507  -0.42706121   0.38380024 -0.0044924849 -0.082333166 -0.0050164284  -0.30084396  -0.28957292    0.7207941        0.075    1.4147139        1e-10 1.6017647e-11    6.2431143    2.4416276    31.520363 -0.0051177231  -0.21527169 0.0038460598   0.21092946   -1.1025565    0.2143296 
 2392000    4.0153235    1.2891223    2.7262011  -0.23430241   0.85946372    1.0184248   0.74954335   -1.2298232            1  -0.16721245  -0.40418776  -0.45679972   0.35935012   0.01391872 0.0085889622 -0.0088578598   -0.3218248  -0.31258753   0.72540094        0.075    1.4116343        1e-10 1.6120021e-11    6.2034659    2.4377691    31.520363 -0.0058752061   -0.2107355 -0.007506453    0.2158863  -0.23071868   0.39689464 
 2393000    4.0156684    1.2655523    2.7501161  -0.22713812   0.84374944   0.98190752   0.74822352   -1.2298232            1  -0.16653466  -0.43417236  -0.38641683   0.32098521 0.0077133764   0.13845981 -0.026277933  -0.32087475  -0.30669707   0.71444761        0.075    1.4143942        1e-10 1.5876614e-11    6.2985724    2.4399877    31.520363 0.0046595111  -0.18683508 -0.0074586091     0.210187   -1.2610548   0.75842795 
 2394000    4.0199648    1.2774816    2.7424832  -0.23657219   0.85170277   0.98796327   0.75749075   -1.2298232            1  -0.12645683  -0.40221173  -0.41082657    0.4336678 -0.022535679   0.14125475 -0.0093999088  -0.28270853  -0.26748367   0.70844325        0.075    1.4216521        1e-10 1.5743183e-11    6.3519555    2.4321517    31.520363 0.0034529728  -0.23973024 -0.0048715856   0.18326893  -0.78091014     1.197212 
 2395000    4.0111196    1.2787611    2.7323584  -0.23008959   0.85255585    1.0063097    0.7462383   -1.2298232            1  -0.10073234  -0.34386935  -0.38056515   0.42223747 0.0092659761 -0.050521956  -0.01980126  -0.25466293  -0.24437805   0.72141763        0.075    1.4319852        1e-10 1.6031503e-11    6.2377184    2.4372886    31.520363 -0.006084106  -0.19560444 -0.0076563181   0.20768728   -1.0641139    1.0413891 
 2396000    4.0200208    1.2790164    2.7410043  -0.23180556   0.85272606    1.0040205   0.74811045   -1.2298232            1  -0.12708228  -0.40424598  -0.37087288   0.39387203 0.0062092703   0.11024145 -0.038422982  -0.28139905  -0.27040121   0.72041702        0.075    1.4440746        1e-10 1.6009267e-11    6.2463821    2.4411232    31.520363  0.013620208  -0.20679705 0.0056421567    0.1917035  -0.46548739    1.6733361 
 2397000    4.0128923    1.2775521    2.7353402  -0.23343711   0.85174977   0.99769038   0.75083901   -1.2298232            1  -0.18898333  -0.43692345  -0.41209121   0.28206468 0.00084250832 0.0037010197 -0.0016624038  -0.34386293  -0.33139867   0.71242976        0.075    1.4357749        1e-10 1.5831773e-11    6.3164121    2.4491334    31.520363 0.00027806374  -0.19138266 -0.0085229623   0.20681443    1.0517098 -0.089106203 
 2398000    4.0237697    1.2789292    2.7448406  -0.22183156   0.85266788    0.9890571   0.75836687   -1.2298232            1  -0.17847532  -0.42525605  -0.45973897   0.34956905 -0.0042780554  0.030676878 -0.0097637196  -0.33490774   -0.3196583   0.71743921        0.075    1.4322612        1e-10 1.5943094e-11    6.2723084    2.4479371    31.520363 0.0020176231  -0.21332608 -0.0089206716   0.21465243  0.099451568   0.25672859 
 2399000    4.0101218    1.2695397    2.7405821  -0.23188156    0.8464079    0.9951373   0.74356675   -1.2298232            1  -0.16149595  -0.40577218  -0.39508008   0.31636442  0.016280215  -0.01965564 -0.047312589  -0.31487547  -0.30354685   0.72049302        0.075    1.4277254        1e-10 1.6010956e-11    6.2457232       2.4561    31.520363 -0.0075253292   -0.2087153 0.0032210377   0.17265163   -1.5160757    1.1636674 
 2400000    4.0205347    1.2717702    2.7487645  -0.22515723   0.84789494   0.99557868   0.74577754   -1.2298232            1  -0.15675668  -0.39897968  -0.43320919   0.36191884 0.0025175931 -0.073793079 0.0078620833  -0.31059223  -0.29887058   0.72287839        0.075    1.4264178        1e-10 1.6063964e-11    6.2251135    2.4448887    31.520363 -0.0041121794  -0.17592744 -0.00022782498   0.24148033   0.96500643    2.3068421 
 2401000    4.0246046    1.2784248    2.7461797  -0.22687563   0.85233165   0.99846267   0.75128917   -1.2298232            1  -0.16680136  -0.41145775  -0.41767949   0.32873315  0.018715763 -0.031684211 -0.016160904  -0.32177383  -0.30932694   0.71975083        0.075    1.4321769        1e-10 1.5994463e-11    6.2521637    2.4536664    31.520363 0.0026510088  -0.20646256 -0.019923326   0.21933143    2.9452779    2.7679193 
 2402000     4.017507    1.2715636    2.7459434  -0.22713521   0.84775725   0.98519654   0.75272911   -1.2298232            1 -0.029906954  -0.30479505  -0.28885044   0.50392462 -0.0021620989 -0.014887964 0.0089564885  -0.18517644  -0.17053886   0.71729758        0.075    1.4310594        1e-10 1.5939946e-11    6.2735469    2.4460602    31.520363  0.007222054  -0.18857015 -0.011556636   0.18207131    1.6126035    2.0523235 
 2403000    4.0185255    1.2716298    2.7468957   -0.2373991   0.84780136   0.99634877   0.74508628   -1.2298232            1  -0.16557643  -0.41686333  -0.42905128   0.34918532 0.0027521976  0.010279036  0.014733605  -0.31926939  -0.30780026    0.7145228        0.075    1.4314586        1e-10 1.5878284e-11    6.2979096    2.4480645    31.520363 -0.00012669288  -0.22558568 -0.0072459705   0.18370882  -0.13413303     1.882678 
 2404000    4.0100608    1.2699793    2.7400816  -0.23028326   0.84670095   0.99457519    0.7444516   -1.2298232            1  -0.17302908  -0.39791603  -0.44171148   0.32054028 0.0040040409  0.015939663 -0.016253079  -0.32659112  -0.31499974   0.71758761        0.075    1.4262201        1e-10 1.5946391e-11    6.2710113    2.4401897    31.520363 -0.008573041  -0.18626214 -0.0057087225   0.18763029  -0.24915176    1.4036962 
 2405000    4.0170123     1.275166    2.7418463  -0.22994752   0.85015897   0.98193166   0.75905242   -1.2298232            1 -0.090445249  -0.34449062  -0.33986452    0.4130194 -0.035665966 -0.038971032 -0.029887385  -0.24701908  -0.23061111   0.71844138        0.075    1.4215364        1e-10 1.5965364e-11     6.263559    2.4452762    31.520363 -0.0037067249  -0.22320636 -0.00033633875   0.20166608    1.2847399    0.1797315 
 2406000    4.0346306    1.2809406      2.75369  -0.23459996   0.85400894   0.99032659    0.7597576   -1.2298232            1 -0.087277334  -0.33387595  -0.34107876   0.41312271 -0.008865178 -0.019515816  -0.10337481  -0.24399663  -0.22864153   0.71956262        0.075    1.4148293        1e-10 1.5990281e-11     6.253799    2.4503973    31.520363 -0.0062672825  -0.15922425 0.0087588791   0.18173834     1.754905    3.5264988 
 2407000    4.0203408    1.2896428     2.730698  -0.23086773   0.85981072    1.0008623   0.76228401   -1.2298232            1  -0.17990081  -0.40920507   -0.4322277   0.30173034   0.01118026  0.048392163  0.028855725  -0.33714124  -0.32276892   0.71509773        0.075    1.4224927        1e-10 1.5891061e-11    6.2928461     2.441341    31.520363 0.0086602447   -0.1772149 -9.0546212e-05   0.21254509   0.83152608   -0.5426339 
 2408000    4.0131731    1.2752952    2.7378778  -0.23286127   0.85024511    1.0068732   0.74193832   -1.2298232            1  -0.22407397  -0.45103507  -0.44272665   0.22153982 0.0012376135 -0.0062754817   0.05389092  -0.37711758  -0.36780011   0.71675722        0.075    1.4297189        1e-10 1.5927938e-11    6.2782765    2.4517637    31.520363 -0.00074328866  -0.22496991    -0.003365   0.19946367  -0.72109307   0.86242737 
 2409000    4.0194785    1.2771168    2.7423618  -0.23077252   0.85145955    1.0050307   0.74526835   -1.2298232            1  -0.15926827  -0.40714432  -0.41984055   0.34918005  -0.01401811 -0.078821722  0.029865253  -0.31299879   -0.3027314   0.71382767        0.075    1.4278546        1e-10 1.5862837e-11    6.3040425    2.4330795    31.520363  -0.01211794  -0.19824498 0.0039194025   0.22365796    1.0845777    1.3563826 
 2410000    4.0287727    1.2677378    2.7610349  -0.22526913   0.84520653   0.98927853   0.74558823   -1.2298232            1  -0.20257077  -0.42474338  -0.45271068   0.26974177  0.002395451   0.07487948 -0.049492206  -0.35636727  -0.34378536   0.71552806        0.075    1.4193154        1e-10 1.5900624e-11    6.2890615     2.447444    31.520363 0.0010034639  -0.18590239 -0.008623802   0.19231879 -0.026377938  -0.72514738 
 2411000    4.0146947    1.2657128    2.7489818  -0.23585437   0.84385649   0.98623151   0.74541239   -1.2298232            1  -0.19076705  -0.47007267  -0.41700952   0.31478104   0.01496011  0.010992808 -0.0053479717  -0.34452728  -0.33154669   0.71926713        0.075    1.4048467        1e-10 1.5983714e-11    6.2563682    2.4426787    31.520363 0.0086556703  -0.23178639 -0.0087430986   0.22280828   0.51536882    1.7402522 
 2412000    4.0240837    1.2729963    2.7510874  -0.22661364   0.84871242   0.99561484   0.74713578   -1.2298232            1 -0.080156307  -0.32628023  -0.34466252   0.43047382 -0.019655818  0.032971235 -0.036268716  -0.23427203  -0.22227537    0.7185938        0.075    1.3906778        1e-10 1.5968751e-11    6.2622305    2.4432422    31.520363 0.0078184654  -0.18942033 -0.0019276043   0.21314434    -1.036761  -0.73774927 
 2413000    4.0386173    1.2891863    2.7494309  -0.23262532   0.85950639    1.0016408    0.7612303   -1.2298232            1    -0.171466  -0.41945895  -0.42287285    0.3279338 0.0034749718 -0.073029774  0.041614718  -0.32848908  -0.31444524   0.71573159        0.075    1.3869248        1e-10 1.5905146e-11    6.2872731    2.4418516    31.520363    0.0184881  -0.19591494   0.01007086   0.20713907  -0.20445936    0.3338133 
 2414000    3.9978391    1.2603042    2.7375349   -0.2295797   0.84025053   0.97800373   0.74500445   -1.2298232            1  -0.13297065  -0.39079671   -0.3772181   0.36910287 -0.0083829372 -0.079280621 -0.064223547  -0.28664673  -0.27257581    0.7166076        0.075     1.389871        1e-10 1.5924613e-11    6.2795873     2.455274    31.520363 0.0028741954  -0.19968511 -0.0025822155   0.19981377    0.9020275     3.066114 
 2415000    3.9902468    1.2555113    2.7347355  -0.22891831   0.83705509     0.973516   0.74270297   -1.2298232            1  -0.23949418   -0.4953224  -0.48230994    0.2591498 0.0034388551 -0.061596031 -0.033115621  -0.39269552  -0.37845875   0.71372873        0.075    1.3864588        1e-10 1.5860638e-11    6.3049164    2.4503896    31.520363 -0.0044377047   -0.1979375 -0.0091148472   0.19128819   0.79747962    1.7073387 
 2416000    4.0118918    1.2671556    2.7447362  -0.22406181   0.84481839    0.9865658   0.74680871   -1.2298232            1  -0.16055159  -0.41738456  -0.41393729   0.34966706  0.010303231 -0.0010784729  0.010685814  -0.31459985  -0.30137895   0.71592845        0.075    1.3872731        1e-10 1.5909521e-11    6.2855443    2.4457944    31.520363 -0.0045380132  -0.21130594 -0.00063755088   0.20294942   0.10415479 -0.057863092 
 2417000    4.0112439    1.2657389     2.745505  -0.22555864   0.84387385   0.98747894   0.74457854   -1.2298232            1  -0.18428168  -0.42236941  -0.44274038   0.31226475 0.0044182873 -0.010895516  0.016032945   -0.3378699  -0.32523938   0.72024105        0.075    1.3980989        1e-10 1.6005357e-11    6.2479083    2.4459017    31.520363 0.0061574298  -0.19200328 -0.0039975486   0.19369461   0.32044736   0.89860389 
 2418000    4.0238453    1.2752595    2.7485858  -0.22796565    0.8502213   0.99095171   0.75291591   -1.2298232            1  -0.13472516  -0.36911532  -0.37589646   0.34083631 0.0093257579  0.027843645 -0.031975054  -0.29003317  -0.27617858   0.72246629        0.075    1.3927055        1e-10 1.6054807e-11    6.2286643    2.4534454    31.520363 0.00061507357  -0.22642138 0.0011787288   0.17922224    -1.072866    1.7784972 
 2419000    4.0136596    1.2772946     2.736365  -0.22747995    0.8515781   0.99734471   0.75078772   -1.2298232            1 -0.099504627  -0.35630107  -0.35992435   0.41771153 -0.0064655275  0.030087439 -0.024316736  -0.25437365  -0.24187062   0.72050022        0.075    1.3947305        1e-10 1.6011116e-11    6.2456609    2.4579705    31.520363 0.0071829686  -0.20157884 0.0013196264   0.21624045 -0.083491975 -0.035500515 
 2420000    4.0303011    1.2839779    2.7463232  -0.22724578   0.85603387    1.0014424   0.75549175   -1.2298232            1  -0.18894926  -0.41053036  -0.43067212   0.27435468 -0.029711651  0.022648498 -0.038242915  -0.34478862  -0.33190018   0.71578714        0.075    1.3742714        1e-10 1.5906381e-11    6.2867852    2.4495647    31.520363 -0.0025461276  -0.19122081 -0.011284851   0.17278693   0.27564304 -0.024102136 
 2421000    4.0087641    1.2896533    2.7191109  -0.23580543   0.85981769    1.0064736   0.75841272   -1.2298232            1  -0.18807537  -0.46113001  -0.42802861   0.32493251 -0.015350542  -0.08152806 -0.0095956688  -0.34451725  -0.33174447   0.71575678        0.075    1.3947397        1e-10 1.5905706e-11    6.2870518    2.4428964    31.520363 0.0058700311  -0.21070354 -0.00038337622   0.19717484    1.2541701   0.10348016 
 2422000     4.038615    1.2803584    2.7582565  -0.22474068   0.85362077   0.99646952   0.75484978   -1.2298232            1   -0.1058848  -0.32610766  -0.41508418   0.42353745 -0.011379562  0.092005614  0.036138971  -0.26159173  -0.24812586   0.71709254        0.075    1.3970471        1e-10 1.593539e-11    6.2753407    2.4343686    31.520363 -0.0024654123  -0.20582094 0.0036205412   0.19441559   -1.4058408    1.3760942 
 2423000    4.0167673    1.2769728    2.7397945  -0.22798239   0.85136358    1.0005273   0.74822237   -1.2298232            1  -0.13947517  -0.36447742  -0.37582082   0.32187272 0.0047753924 0.0037013904 -0.020933278  -0.29381503  -0.28229546   0.71947957        0.075    1.3809449        1e-10 1.5988435e-11    6.2545209    2.4493594    31.520363 -0.0038614379  -0.20211354 -0.012248656   0.19958711   -1.0270938   -0.5173513 
 2424000    4.0209253    1.2757297    2.7451957  -0.22888972   0.85053476   0.99759015   0.74885244   -1.2298232            1  -0.10964753  -0.38572834   -0.3541421   0.41092785 -0.012197073 -0.023471416 -0.0057065016  -0.26411736  -0.25204856   0.71475096        0.075    1.4024731        1e-10 1.5883355e-11    6.2958992    2.4461081    31.520363 -0.0034951358  -0.19931075 -0.0022318461   0.20460653  -0.56996974    2.7731721 
 2425000    4.0216246    1.2743981    2.7472265  -0.22895802   0.84964698   0.98663878   0.75492869   -1.2298232            1  -0.17825564  -0.47501062  -0.40841843   0.34866213 0.0083340591  -0.14438708 -0.0047061042  -0.33397885  -0.31909342   0.71399086        0.075    1.3954481        1e-10 1.5866463e-11    6.3026017    2.4467323    31.520363 -0.0025919755  -0.20419599 0.0019381971   0.21724383    1.1047233   0.55201463 
 2426000    4.0090713    1.2786708    2.7304005  -0.23718763   0.85249564    1.0113211   0.74266848   -1.2298232            1 -0.097286538  -0.35255007  -0.35597717   0.41666762 -0.011264772  -0.15102255  0.010411531  -0.25048076  -0.24164759   0.72088593        0.075     1.399116        1e-10 1.6019687e-11    6.2423191    2.4398958    31.520363 -0.0034025452  -0.21697075  -0.01009857   0.20017436    1.6574116    3.8433903 
 2427000    4.0009272    1.2650838    2.7358434  -0.23068206   0.84343712   0.99452961   0.73896039   -1.2298232            1  -0.12946053  -0.40465244  -0.36676263   0.38303347  0.011208087 0.0045180997  0.028232061  -0.28188987  -0.27142469   0.72002212        0.075    1.3858615        1e-10 1.6000491e-11     6.249808     2.449349    31.520363 0.0003474816  -0.22414774 0.0085932222   0.20998191   -1.2973117   -0.3830127 
 2428000    4.0231161    1.2823086    2.7408075  -0.22842515   0.85492094    1.0026802   0.75275196   -1.2298232            1  -0.18510384  -0.45558373  -0.44518642   0.34545862 -0.0020485775 -0.0048883984 -0.019726649  -0.34037804  -0.32823145   0.71192989        0.075    1.4061136        1e-10 1.5820664e-11    6.3208471     2.462964    31.520363 0.0032601451  -0.20140926 -0.0084880909    0.1995112   -0.7269265  -0.17160402 
 2429000    4.0061865    1.2740462    2.7321403  -0.23902369   0.84941238   0.99798688   0.74667871   -1.2298232            1  -0.25632526  -0.48853222  -0.48484535    0.2044018  0.003877941 0.0061953344 -0.040662165  -0.41034669  -0.39878292   0.71085016        0.075    1.4031064        1e-10 1.579667e-11    6.3304481    2.4340709    31.520363 -0.012854443  -0.20155084 -0.010298171   0.20884425   0.29110625    3.9787701 
 2430000    4.0123274    1.2812007    2.7311267  -0.22961538   0.85418231    1.0012478   0.75249335   -1.2298232            1 -0.021242667  -0.31734275  -0.29556888   0.54918363 0.0048021079 -0.011132682  0.049486236  -0.17646352  -0.16416581   0.72630655        0.075    1.3962727        1e-10 1.6140146e-11     6.195731    2.4555385    31.520363 -0.015850859  -0.21458986 0.0014511051   0.23191479   0.88814487    2.6837452 
 2431000    4.0191536    1.2800336    2.7391201  -0.22828029   0.85340419   0.99829651   0.75321902   -1.2298232            1  -0.17883122   -0.4203119  -0.39823765    0.2820559 0.0057512383  0.023502949 -0.0042167567  -0.33420176  -0.32133308   0.72690355        0.075    1.3970506        1e-10 1.6153412e-11    6.1906425    2.4433184    31.520363 -0.0071215839  -0.21583279 -0.0035832366   0.21258064  0.069276253    1.2031927 
 2432000    4.0293112    1.2787823    2.7505289  -0.22454358   0.85256998   0.99443958   0.75447647   -1.2298232            1  -0.23138135  -0.44412806  -0.49230788    0.2422919 0.0046065841  -0.01519961 -0.0078002923  -0.38701127  -0.37333265   0.71481809        0.075    1.4070867        1e-10 1.5884846e-11    6.2953079    2.4479618    31.520363 -0.0052778083  -0.18813338 -0.011349062   0.17685954   -1.2601717    1.0824581 
 2433000    4.0225181     1.277341    2.7451771  -0.23432942   0.85160901   0.99872515   0.74988475   -1.2298232            1 -0.094525327  -0.39135243  -0.34002269   0.44779913 -0.008257666  0.064190122 0.00019565634  -0.24920809  -0.23708837   0.70739782        0.075    1.4082444        1e-10 1.5719952e-11    6.3613427    2.4388706    31.520363 0.0084009064  -0.19636249 -0.0048733459   0.20857833  -0.67242085     4.016466 
 2434000    4.0188713    1.2784392    2.7404321  -0.23650394   0.85234121    1.0019682    0.7488795   -1.2298232            1  -0.11411283  -0.37179175  -0.39118362   0.42063687 -0.00010187702  0.041543324  0.021502727  -0.26858824   -0.2571388    0.7136733        0.075    1.4097378        1e-10 1.5859407e-11    6.3054061    2.4470984    31.520363 0.0031182958  -0.21539321  0.010488104   0.20372133  -0.37720785    4.3746505 
 2435000    4.0043225    1.2641463    2.7401763  -0.23096933   0.84281205   0.99562423   0.73714523   -1.2298232            1  -0.20579557  -0.45583542  -0.44949881   0.28794751 -0.028836122 -0.057429977 0.0019935785  -0.35785049  -0.34791598   0.71801899        0.075    1.4018188        1e-10 1.5955977e-11    6.2672438    2.4395142    31.520363 0.0065051861  -0.19247116 -0.0052414591   0.19876658   -0.2892792    1.2305259 
 2436000    4.0064224    1.2736699    2.7327525  -0.23839826   0.84916148   0.99104113    0.7510607   -1.2298232            1  -0.13936119  -0.39378728  -0.40321788   0.37892158 -0.0087752548  0.047598699 -0.0047910739  -0.29428653  -0.28082739   0.71876426        0.075    1.3989806        1e-10 1.5972539e-11    6.2607454    2.4454372    31.520363 -0.003273093  -0.22266881  0.007672368   0.19303883   0.37714767    1.1830316 
 2437000    4.0184574    1.2757118    2.7427456  -0.23139908   0.85052287   0.98646491   0.75653111   -1.2298232            1  -0.14218936   -0.3855565  -0.40096406   0.35995247  0.013598694 -0.030775862 -0.021898385  -0.29824311  -0.28300232   0.71413655        0.075    1.4116499        1e-10 1.5869701e-11    6.3013159    2.4440395    31.520363 -0.0011162009  -0.20016661 0.00071940628     0.192449   0.38078983    2.1845666 
 2438000    4.0324026    1.2875058    2.7448968  -0.23517116   0.85838594    0.9909008   0.76676659   -1.2298232            1 -0.039603904  -0.32226559  -0.31954444   0.52299832 -0.0061361504 -0.069087023 -0.018768376  -0.19776898  -0.18105006   0.71831944        0.075    1.4048412        1e-10 1.5962654e-11    6.2646223    2.4478051    31.520363 0.00023492296  -0.21435592 -0.0039552906   0.20609616  -0.20074803    1.9542255 
 2439000    4.0131393    1.2607532    2.7523861  -0.22757734   0.84054988   0.98650092   0.73963082   -1.2298232            1  -0.14233531  -0.40784339  -0.39179028   0.37262773 0.0018658144  0.040727255  0.047431926  -0.29490295  -0.28315341   0.71950897        0.075    1.3902419        1e-10 1.5989088e-11    6.2542653     2.444284    31.520363  0.011148248   -0.1925752 -0.003548572   0.20046351  -0.81317561    1.4220872 
 2440000    4.0091727    1.2798222    2.7293505  -0.23430613   0.85326324    1.0017225   0.75060968   -1.2298232            1  -0.19873185  -0.45140687  -0.40854665   0.26375798 -0.0024077727  0.027792937 0.0077523744  -0.35356415  -0.34172275   0.71693002        0.075    1.3884301        1e-10 1.5931778e-11    6.2767633    2.4496886    31.520363 -0.0015134533  -0.22297466  -0.00472737   0.21260689  -0.89986483    -1.216971 
 2441000    4.0307854    1.2789334    2.7518519  -0.22056382   0.85267073   0.99578784   0.75371394   -1.2298232            1  -0.14260712  -0.40512901  -0.40963602   0.38694366 -0.0053088141 -0.034231952 -0.0011855345  -0.29807976  -0.28475088    0.7158617        0.075    1.4001034        1e-10 1.5908038e-11    6.2861304    2.4498171    31.520363 -0.0011970559  -0.18971697 0.0095018149   0.23163773    1.5101228    1.7916345 
 2442000    4.0223514    1.2856418    2.7367097  -0.23636141    0.8571432    1.0027002    0.7564984   -1.2298232            1  -0.21178907  -0.42629271  -0.47177115   0.26269664 -0.0043313888  0.026263473 -0.0012508753  -0.36783607  -0.35491954   0.71283738        0.075    1.3901414        1e-10 1.5840831e-11    6.3128002    2.4448454    31.520363 -0.0038502397  -0.19897515 -0.0062322958   0.21427467   0.35264352   0.51451318 
 2443000    4.0419275    1.2770086     2.764919  -0.22232182   0.85138742   0.99975317   0.74879839   -1.2298232            1   -0.2190923  -0.47494102  -0.44233569   0.25999981  0.012251623  0.025741396 -0.079338724  -0.37355098  -0.36180209   0.71405519        0.075    1.4111672        1e-10 1.5867893e-11    6.3020339    2.4554916    31.520363 -0.014927158  -0.19078169 -0.0066009364   0.20848442   0.39479367   -0.7829574 
 2444000    4.0253064    1.2858206    2.7394857  -0.23483754   0.85726246    1.0135974    0.7491592   -1.2298232            1 -0.086145855  -0.37980622  -0.33088953   0.45225819 -0.0095173965  0.056307605  0.030580165  -0.24067896  -0.23083185   0.71768205        0.075    1.4244622        1e-10 1.594849e-11    6.2701861    2.4530978    31.520363 0.0055515823  -0.21012528 -0.004323666   0.21349374  -0.82542708    2.9531069 
 2445000    4.0272256    1.2758464    2.7513792  -0.22499096    0.8506126    1.0025763   0.74553367   -1.2298232            1  -0.21037961  -0.44188748  -0.43784834   0.24859697 0.0020837773  0.011484504  -0.01313069  -0.36416486  -0.35349239   0.71773996        0.075     1.404284        1e-10 1.5949777e-11    6.2696801    2.4404729    31.520363 0.0060139576  -0.23977115 -0.0007894693   0.18604137   -1.3565181   0.47353972 
 2446000    4.0221023    1.2893902    2.7327121   -0.2305445   0.85964231    1.0214491   0.74775269   -1.2298232            1   -0.2019879  -0.42902303   -0.4674894   0.29054874 0.0008805136  0.027954276 -0.058676553  -0.35623087  -0.34779468    0.7133057        0.075    1.4038817        1e-10 1.5851238e-11    6.3086556    2.4356394    31.520363 -0.012226642    -0.221023 0.0038018661   0.18787377  -0.11242759   0.69532125 
 2447000    4.0433239     1.296047    2.7472769  -0.23214801   0.86408041    1.0175632   0.75795156   -1.2298232            1  -0.12528723  -0.38029415  -0.38492163    0.3893541 -0.011047285   0.02010349  0.013944579  -0.28163398  -0.27053931   0.71696716        0.075    1.4114815        1e-10 1.5932604e-11    6.2764381    2.4457834    31.520363 0.0011886953  -0.17995777 -0.0080855478   0.20394956    1.4774165    1.6851002 
 2448000    4.0149942     1.270938    2.7440562  -0.22692646   0.84734015   0.99784687   0.74326916   -1.2298232            1  -0.16447942  -0.39458046  -0.42082613   0.32196834 -0.0051821989 -0.045230213 -0.012805398  -0.31779755  -0.30691709   0.71622942        0.075    1.4151258        1e-10 1.5916209e-11     6.282903    2.4404827    31.520363 -0.015135712  -0.18884012 -0.00094684554   0.22334845    -0.351958   0.78816477 
 2449000    4.0259372    1.2793167    2.7466205   -0.2269714   0.85292627    1.0017147   0.75004486   -1.2298232            1  -0.11894043  -0.35830795  -0.38714393   0.38863059  0.018167404 -0.035015719 -0.012075052  -0.27365622  -0.26193023   0.71581675        0.075    1.4384017        1e-10 1.5907039e-11    6.2865251    2.4401245    31.520363 0.0093849327  -0.19319195 -0.011783923   0.19326945   -1.4083645    -1.294082 
 2450000    4.0394133     1.288741    2.7506723  -0.22779343   0.85920945    1.0021034   0.76040772   -1.2298232            1  -0.11901873  -0.38708629  -0.35865353   0.38868362  0.016775876 0.0065627335  0.061266641  -0.27587213  -0.26206401   0.71673313        0.075    1.4350518        1e-10 1.5927403e-11    6.2784875    2.4535333    31.520363 0.0018556514  -0.20293942 -0.010946895   0.18966716   0.21934428    1.0738474 
 2451000    4.0314963    1.2931194    2.7383769   -0.2313402    0.8621286     1.013186   0.75767796   -1.2298232            1  -0.20204164  -0.41874865   -0.4564693   0.26909305 0.0021828887  0.052440326  0.046979127  -0.35833195  -0.34666889   0.71952366        0.075     1.413045        1e-10 1.5989415e-11    6.2541376    2.4517428    31.520363 0.0049585812  -0.20200874 0.0053832797   0.23371767 -0.021508341   0.27553714 
 2452000    4.0199736    1.2851818    2.7347918  -0.23611145   0.85683652    1.0239724   0.74125888   -1.2298232            1  -0.12141848  -0.37829215  -0.35558274   0.36961944 2.3935427e-05 -0.076129202 -0.022571391  -0.27432194  -0.26758545   0.71572081        0.075     1.419744        1e-10 1.5904907e-11    6.2873679    2.4406679    31.520363 -0.0047751637  -0.19592814 -0.002738628   0.19316075   0.23202851    2.7311033 
 2453000    4.0310739    1.2796081    2.7514658  -0.23536637   0.85312051   0.99874158     0.752431   -1.2298232            1   -0.0709905  -0.32919167  -0.30939281   0.42561299 -0.0015265324 -0.072460386 -0.020007602  -0.22619849  -0.21355589   0.71464144        0.075    1.4286861        1e-10 1.5880921e-11    6.2968641    2.4452571    31.520363  0.005619202  -0.22523996 -0.00045190307   0.19299998  -0.43663725    2.3355567 
 2454000    4.0184356    1.2697636     2.748672  -0.23256508   0.84655715   0.99415586   0.74449847   -1.2298232            1  -0.18677552  -0.43497882  -0.44403347   0.31868575 -0.007579284  0.032636053 -0.0022976085  -0.34034722  -0.32868632   0.71364358        0.075    1.4299505        1e-10 1.5858746e-11    6.3056687    2.4363412    31.520363 -0.0067533014  -0.20243716 -0.0067753078   0.19222491  -0.67974397    1.8058135 
 2455000    4.0174065    1.2746118    2.7427946  -0.22955581   0.84978951   0.99365392    0.7503153   -1.2298232            1  -0.14425537  -0.39121112  -0.43548987   0.39393487  -0.01190144  0.038889557 -0.0054225769  -0.29902695  -0.28609453   0.71703501        0.075    1.4236509        1e-10 1.5934111e-11    6.2758442    2.4608214    31.520363 -0.00083205511  -0.19075657 -0.0071363438   0.19771114  -0.11290969   0.28267272 
 2456000    3.9964011    1.2673438    2.7290572  -0.23060706   0.84494389    1.0006601   0.73726765   -1.2298232            1  -0.26092314  -0.45612784  -0.50942429   0.18278272 -0.0050647544  0.084296699  0.029863601   -0.4130033  -0.40376239   0.72124808        0.075    1.4508798        1e-10 1.6027735e-11    6.2391847    2.4476331    31.520363 -0.0070259308  -0.19960699 -0.0014981744   0.19230957   -0.5558725  0.050606834 
 2457000    4.0115014    1.2634224     2.748079  -0.23404833   0.84232943   0.99016534   0.74010619   -1.2298232            1   -0.1050284  -0.33861067  -0.39788843   0.42141391 -0.0038069595  0.023950999 -0.032672045  -0.25769409  -0.24636957   0.71995763        0.075    1.4393257        1e-10 1.5999058e-11    6.2503678    2.4326318    31.520363 -0.0028284637  -0.19175593  0.010217536   0.22571266   -2.0465826   0.94822196 
 2458000    4.0286582     1.271304    2.7573542  -0.22836911   0.84758418   0.98401204   0.75325594   -1.2298232            1  -0.13618956  -0.41532671  -0.36437225   0.37113027 -0.0081301541  -0.02483991 -0.012940922  -0.29156772  -0.27665238   0.72023648        0.075    1.4364072        1e-10 1.6005255e-11    6.2479479    2.4470551    31.520363 -0.011914715  -0.20597793 -0.0089288696   0.19146894   -1.5419908   0.13263394 
 2459000    4.0237034    1.2871351    2.7365683  -0.22674153   0.85813881    1.0142833   0.75016746   -1.2298232            1  -0.19558608  -0.47655503   -0.4057306    0.2955274 -0.011171445     0.111585 -0.031933301  -0.35032716  -0.34036997   0.71742877        0.075    1.4510623        1e-10 1.5942862e-11    6.2723997    2.4502479    31.520363 -0.0085971656  -0.19750039 -0.0026606135   0.21561878   -1.2055876    -1.238955 
 2460000    3.9977654    1.2687647    2.7290007  -0.23028814   0.84589121   0.99533066   0.74255864   -1.2298232            1  -0.14471092  -0.42986695  -0.36703899   0.36277317 -0.0027531232  0.015251444 0.0046272531  -0.29788249  -0.28678942   0.71753454        0.075    1.4540392        1e-10 1.5945212e-11    6.2714751    2.4567348    31.520363 -0.00047469293  -0.19411255 0.0030952064   0.19625888   0.31959484   0.72546669 
 2461000    4.0209352    1.2837407    2.7371944   -0.2333348   0.85587578    1.0031702   0.75402857   -1.2298232            1  -0.18415198  -0.43315837  -0.44194367    0.3226461 -0.015298802  0.070493976  0.048660023  -0.33968951  -0.32734953   0.72045555        0.075    1.4431136        1e-10 1.6010123e-11    6.2460481    2.4481298    31.520363 -0.0017056587  -0.21111491 -0.0068292635   0.22441295   -1.9650197   0.27788143 
 2462000    4.0184163    1.2699016    2.7485147  -0.23732146   0.84664918   0.98692826   0.74965578   -1.2298232            1  -0.26531433  -0.50980974  -0.49179543   0.20566217  0.012031731  0.078623779 -0.015576844  -0.41994987  -0.40619343   0.71873605        0.075    1.4282083        1e-10 1.5971912e-11    6.2609911       2.4434    31.520363 0.0053226071  -0.20755267 0.0035151487   0.19431074  -0.78624601   0.47776521 
 2463000    3.9909666    1.2670205    2.7239461  -0.23195821   0.84472834   0.98838959   0.74539425   -1.2298232            1 -0.079388849  -0.36923737  -0.39307367   0.52414449 -0.00045612036 -0.0017798326 -0.0051334437  -0.23314533  -0.22047655   0.71429839        0.075    1.4217643        1e-10 1.5873298e-11    6.2998882    2.4498843    31.520363 -0.0037044128  -0.18752421 -0.0045078402   0.21400976  0.095517278    3.8612946 
 2464000    3.9918325    1.2571354    2.7346971  -0.22948898    0.8381379   0.98723457    0.7350418   -1.2298232            1 -0.018345412  -0.31165384  -0.26885136   0.52546896 0.00056509963 -0.016793291 0.00049159842  -0.16996644  -0.15926823   0.71791822        0.075    1.4311553        1e-10 1.5953738e-11    6.2681234    2.4507402    31.520363 -0.0085844551  -0.19381572 -0.0022205174   0.20267136   0.70273861    2.2676339 
 2465000      4.01117    1.2693704    2.7417996  -0.23050879     0.846295   0.99189279   0.74562095   -1.2298232            1  -0.13835745  -0.38031639  -0.41452394   0.37976797 -0.0039970697  0.068378207 -0.056250715   -0.2921607  -0.27994521   0.72129886        0.075    1.4218294        1e-10 1.6028864e-11    6.2387455    2.4378483    31.520363 -0.0011559614  -0.20482851  0.014664734   0.19546856   -2.0158943    2.1531445 
 2466000    4.0260601    1.2870771    2.7389831  -0.22992913   0.85810012    1.0093517   0.75351471   -1.2298232            1  -0.17664642  -0.40793763  -0.43644411   0.31444247 -0.0024796273 -0.023021465  0.012911369  -0.33207796  -0.32072636    0.7210533        0.075    1.4178493        1e-10 1.6023407e-11    6.2408701    2.4461351    31.520363 -0.0022580729  -0.17236208 0.0035779057   0.21702431  -0.77566795    -1.090763 
 2467000    4.0324731    1.2782973    2.7541758  -0.22680026   0.85224658    0.9937378    0.7544149   -1.2298232            1  -0.15302437   -0.4240666  -0.40447927   0.36947276 0.0036287353 -0.030930719  0.067289361  -0.30864159   -0.2948755   0.71113039        0.075    1.4229609        1e-10 1.5802897e-11    6.3279535    2.4465158    31.520363 -0.00050259667   -0.2015642 -0.0063860016   0.20444028   0.55486723   -1.0875344 
 2468000    4.0147939    1.2764787    2.7383152  -0.22756335   0.85103415    1.0018724   0.74673412   -1.2298232            1  -0.14958296  -0.38708911  -0.42720297   0.36554321  0.012152218 -0.050231991 -0.00094939874  -0.30361583  -0.29259525   0.71205589        0.075    1.4075045        1e-10 1.5823464e-11    6.3197287    2.4525884    31.520363 0.00054499272    -0.190363 -0.0063438374   0.21206009   0.58225987  -0.93269642 
 2469000    4.0153496    1.2805821    2.7347675  -0.22648762   0.85376991    1.0075104   0.74746176   -1.2298232            1  -0.21001358  -0.46522781  -0.44861734   0.28380442 -0.0015618868 0.0083189856 0.0094513331  -0.36419654  -0.35383067   0.72087279        0.075     1.420292        1e-10 1.6019395e-11    6.2424328    2.4377121    31.520363 -0.0052996106  -0.20889613 -0.0085701941   0.20428086  -0.20407189   -1.4267019 
 2470000    4.0306436    1.2772902    2.7533534   -0.2254791   0.85157517    1.0041854   0.74604896   -1.2298232            1  -0.16568368  -0.41836872  -0.41035052   0.33166821   0.01771794 -0.088815428 -0.012780345  -0.31957521  -0.30902614   0.71865312        0.075    1.4245098        1e-10 1.5970069e-11    6.2617136     2.439139    31.520363 -0.016323899  -0.21528457 -6.9483314e-05   0.24061675  -0.25930296    1.2909542 
 2471000    4.0156122    1.2707588    2.7448534  -0.23117472   0.84722063   0.99461171   0.74530569   -1.2298232            1  -0.21659385  -0.49091217  -0.43738545   0.27851606 -0.0077332899 -0.020743947  0.037652278  -0.37033207  -0.35856973   0.71498884        0.075    1.4329787        1e-10 1.5888641e-11    6.2938045    2.4529867    31.520363 0.0016065723  -0.19353717 3.3833478e-05   0.19428577  -0.24150591   -2.2182573 
 2472000    4.0028246    1.2656202    2.7372044  -0.23228775   0.84379476   0.98051054   0.74926692   -1.2298232            1  -0.18887051  -0.41482363  -0.48354522   0.33175733 0.0050827571  0.035453568 -0.051146894  -0.34342583  -0.32883351   0.71310989        0.075    1.4199088        1e-10 1.5846887e-11    6.3103878    2.4427044    31.520363  0.002695458  -0.22592659 -0.0030228211   0.19314579   0.50436182   0.33235865 
 2473000    4.0233117    1.2803606    2.7429512  -0.22369604    0.8536222    0.9902559   0.75915211   -1.2298232            1   -0.2194134  -0.45872138  -0.46697351   0.26745469 -0.00018164534 0.0072506857  0.066089586  -0.37600779   -0.3607675   0.71413085        0.075    1.4156232        1e-10 1.5869574e-11    6.3013662    2.4391091    31.520363 -0.0091650464  -0.21576309 -0.010523018   0.21787267   0.44727248    1.4627527 
 2474000    4.0441865    1.2821203    2.7620662  -0.23210237   0.85479544   0.99508631   0.75779465   -1.2298232            1  -0.15563515  -0.38588998  -0.41747287    0.3364574  0.015758687  0.005544758 -0.030334449  -0.31194953  -0.29767877   0.71865886        0.075    1.4197915        1e-10 1.5970197e-11    6.2616636    2.4488101    31.520363 -0.0095805292  -0.20601551 -0.0028010512   0.18800093   0.42666624   0.80765378 
 2475000    4.0319505    1.2978161    2.7341344  -0.22771582   0.86525985    1.0120831   0.76373957   -1.2298232            1 -0.048893527  -0.28618799  -0.31554745   0.45505486 -0.0039807652   0.01578687  -0.02951325   -0.2064342  -0.19336336    0.7198862        0.075    1.4074431        1e-10 1.5997471e-11     6.250988     2.445931    31.520363 -0.0060425731  -0.18806357 -0.0010108623   0.17393337 -0.019918904   0.82233534 
 2476000     4.026635    1.2850605    2.7415745  -0.23264473   0.85675569   0.99861872   0.75866714   -1.2298232            1  -0.15306877  -0.43741599    -0.408407   0.38661668 -0.010467444   0.17213583  0.018717032  -0.30956312  -0.29561662   0.71304634        0.075    1.4212969        1e-10 1.5845474e-11    6.3109503    2.4447883    31.520363 -0.0037837449  -0.20253441 -0.001592303    0.2244714   -2.1846544    2.8600439 
 2477000    4.0238657    1.2687287    2.7551369  -0.23337824   0.84586719   0.99685174   0.74146539   -1.2298232            1  -0.11518992  -0.37804623  -0.37517402    0.4076505 -0.0072330841    0.0845387 0.0044768405  -0.26813598  -0.25748554   0.71215058        0.075    1.4093095        1e-10 1.5825569e-11    6.3188883    2.4365468    31.520363 0.0030070199  -0.20840236   0.01186617   0.22234928   -1.8615495    2.0596633 
 2478000    3.9994645    1.2665535     2.732911  -0.23041572   0.84441697    1.0006406    0.7363895   -1.2298232            1  -0.17780443  -0.41852821  -0.43544335   0.32055828 -0.010882485  0.059102648  0.015974472  -0.32970346   -0.3206409   0.71987871        0.075     1.400575        1e-10 1.5997305e-11    6.2510531    2.4500286    31.520363 -0.009147487  -0.22064989 0.0014645777   0.19586566   -1.5920485   0.97823284 
 2479000     4.037913    1.2951062    2.7428068  -0.23332991   0.86345321    1.0154296   0.75836671   -1.2298232            1  -0.23732345  -0.44448076  -0.46208801   0.19459841 0.0035496185   -0.0672322 -0.029093574  -0.39375584  -0.38227098   0.72130496        0.075    1.4101319        1e-10 1.6028999e-11    6.2386927    2.4448777    31.520363 -0.0046064632  -0.20439495 0.0015165499   0.17636325  -0.52323736  -0.71577434 
 2480000    4.0300297    1.2780683    2.7519613  -0.22722283   0.85209395   0.99553225   0.75291485   -1.2298232            1  -0.17984828  -0.42164736  -0.44668324   0.32878577 -0.0037011754  -0.13521518  -0.03589968  -0.33515608  -0.32195555   0.71089972        0.075     1.418572        1e-10 1.5797772e-11    6.3300067    2.4357969    31.520363 -0.0097345383  -0.23964381 -0.0025743527   0.16467626   -0.3018415    1.7549219 
 2481000    4.0300319    1.2895472    2.7404847  -0.22532793   0.85974697    1.0006329   0.76233485   -1.2298232            1  -0.15922595  -0.42005943  -0.39684954   0.33923113 -0.0020327108  0.092622209 -0.0085508366  -0.31647686  -0.30206132   0.71266256        0.075    1.4044872        1e-10 1.5836946e-11    6.3143489     2.447274    31.520363 -0.010498552  -0.19011843 -0.010692188    0.2166792  -0.59043558   0.60834489 
 2482000     4.037487    1.2938589    2.7436281  -0.22750044   0.86262162    1.0110698   0.75997661   -1.2298232            1   -0.1269007   -0.3781553   -0.4057103   0.40316348  0.018720297 -0.010830658 -0.012089972  -0.28366517  -0.27122589   0.71788733        0.075    1.4242082        1e-10 1.5953052e-11    6.2683931    2.4354239    31.520363  0.007411065  -0.19427999 -0.00013300104   0.19585007   0.69536108  -0.38672453 
 2483000    4.0301824    1.2802233    2.7499592   -0.2304999   0.85353067    1.0121676   0.74383406   -1.2298232            1  -0.22504769  -0.45147122  -0.48452699   0.26085514 -0.0098731771  0.017506304  0.011901732  -0.37848235  -0.36952958   0.72426618        0.075    1.4145672        1e-10 1.6094804e-11    6.2131853    2.4523016    31.520363  0.004599889  -0.20044041 -0.00017471539   0.20947885   0.78116702   -1.9352259 
 2484000    4.0530667    1.2943511    2.7587156  -0.23071712   0.86294978    1.0110161   0.76056911   -1.2298232            1  -0.14609094  -0.39276975  -0.38392715   0.33842408 -0.0049991163 -0.050758303 -0.046318542  -0.30297763  -0.29040845   0.71972931        0.075    1.4086391        1e-10 1.5993985e-11    6.2523506    2.4413995    31.520363  0.001396072   -0.2266317 -0.0086379894   0.18154727    -1.386417    1.1587791 
 2485000    4.0268444    1.2714774     2.755367  -0.22904348   0.84769976   0.99296369   0.74725688   -1.2298232            1 -0.068147965  -0.34050666  -0.32592645   0.46198922 0.0074041728  0.076525806  0.029657172  -0.22228866  -0.20988859   0.71038805        0.075    1.4082576        1e-10 1.5786401e-11     6.334566    2.4402632    31.520363 0.0053657977  -0.19999335 -0.001747787   0.19851379   -2.2139298   0.31369921 
 2486000    4.0205806    1.2741224    2.7464582  -0.23063167   0.84946318    1.0067513   0.74069962   -1.2298232            1  -0.18195662  -0.45845016  -0.39841138   0.31099168 4.2510927e-05  0.022351712 -0.0075118184  -0.33474472  -0.32566536   0.71105004        0.075     1.430406        1e-10 1.5801112e-11    6.3286685    2.4517213    31.520363 0.0058652558  -0.19549345 -0.0074769696   0.19921285  -0.24006066    2.6145203 
 2487000     4.018413    1.2783728    2.7400402  -0.23524367   0.85229695    1.0150598   0.73974503   -1.2298232            1  -0.12543307  -0.37553813  -0.38503313   0.38427205  0.012330544  0.037839519 0.0077089506  -0.27802426  -0.27032781   0.71961479        0.075    1.4191134        1e-10 1.599144e-11    6.2533456    2.4410312    31.520363 -0.0092954975  -0.18561127 -0.0049558146   0.21468246  0.029907275   0.11854528 
 2488000    4.0151037    1.2708058    2.7442979  -0.23646085   0.84725203    1.0082093    0.7359491   -1.2298232            1  -0.14880041  -0.40705569   -0.3981048   0.35875925 -0.0034675762  0.036706388 -0.042380179   -0.3006086  -0.29271728   0.71967811        0.075    1.4348277        1e-10 1.5992847e-11    6.2527954    2.4521288    31.520363 -0.0046439978   -0.2119137 0.00072676696   0.19556733  -0.19487938    3.0436224 
 2489000    4.0190904    1.2659199    2.7531705  -0.22185296   0.84399455   0.99284131   0.74107195   -1.2298232            1  -0.22929542  -0.45918267  -0.47056424   0.24186066 0.0013271503  0.068697941  0.042761785  -0.38216032  -0.37101858    0.7121297        0.075    1.4239707        1e-10 1.5825104e-11    6.3190736    2.4423723    31.520363 0.0066634251  -0.21446559 0.0011492349   0.18990751  -0.62816856    1.8273246 
 2490000    4.0332774    1.2848975    2.7483799  -0.23202646   0.85664698    1.0004785   0.75719621   -1.2298232            1  -0.11832921  -0.37841391  -0.37824384   0.40167012   0.01823765   0.10771572  0.017574354  -0.27452015  -0.26114253   0.71339972        0.075    1.4193843        1e-10 1.5853327e-11    6.3078242     2.442163    31.520363 0.00010324107  -0.21084538 0.0085510317   0.18811812   -1.3181837    1.9278771 
 2491000    4.0189557    1.2733114    2.7456443  -0.22867659   0.84892247     1.003287   0.74218197   -1.2298232            1  -0.17836676  -0.42153606  -0.39712066   0.28355645 0.0055644833  0.026434186  0.037937331  -0.33146063  -0.32158098   0.71599927        0.075    1.4135883        1e-10 1.5911095e-11    6.2849226    2.4569589    31.520363 0.0093121497   -0.1939161 0.00057483799   0.18681568   0.43505772   0.21760062 
 2492000    4.0188211    1.2821025    2.7367186  -0.23048763   0.85478358    1.0060902   0.75015976   -1.2298232            1 -0.061331796  -0.33825596  -0.33385279   0.48811336 -0.0085839245 -0.095854173  0.010666242  -0.21607129  -0.20494617   0.71181363        0.075    1.4209221        1e-10 1.5818081e-11    6.3218796    2.4501429    31.520363 -0.00061716336  -0.18415124 -0.0056090132   0.21724507    1.4398204    3.9601425 
 2493000    4.0381124    1.2888608    2.7492516  -0.22879126   0.85928934    1.0108839   0.75446667   -1.2298232            1  -0.11587793  -0.36359853  -0.35742146   0.37338621 0.0090055852 -0.096639594 0.0043795238  -0.27150583  -0.26017658   0.71360404        0.075    1.4115029        1e-10 1.5857868e-11    6.3060181    2.4423337    31.520363 0.00064589178  -0.20665674 0.0024466568   0.21020218    1.0250146    1.8516113 
 2494000    4.0444603     1.282577    2.7618833  -0.22029187   0.85509994    1.0094432   0.74837475   -1.2298232            1 -0.086342349  -0.33150316  -0.36868708    0.4411632    0.0123908 -0.020559584 -0.018768995  -0.24071364  -0.23043535   0.71964644        0.075    1.3961632        1e-10 1.5992143e-11    6.2530706    2.4465497    31.520363  0.014477025  -0.22312735 -0.004061663   0.20487541   -1.1252593    3.4134368 
 2495000    4.0376171    1.2930781     2.744539  -0.22829967   0.86210105     1.012352    0.7582085   -1.2298232            1  -0.12687325  -0.39907134  -0.35867302   0.37712461  0.012644147  0.048036273   0.01735309    -0.283273  -0.27138145   0.71536688        0.075    1.3860433        1e-10 1.5897042e-11    6.2904786    2.4482021    31.520363 -0.011875638  -0.18685126  0.014895685   0.19965413   0.86604911     1.282347 
 2496000    4.0233646    1.2907986     2.732566  -0.22875024   0.86058131    1.0153845   0.75353841   -1.2298232            1 -0.040942851  -0.32591384  -0.30195041   0.50503571 0.0088093835  0.002788894 -0.006784955  -0.19637928  -0.18588393   0.70925439        0.075    1.3906241        1e-10 1.5761209e-11    6.3446911    2.4415192    31.520363 0.00040384699  -0.22380486 -0.0003390868   0.18750311    1.1943639     3.317733 
 2497000     4.022697    1.2882259    2.7344711  -0.21995671   0.85886603    1.0169844    0.7495288   -1.2298232            1  -0.27732293  -0.52160598  -0.47315588   0.16279306 -0.0025855314 -0.027627216  0.019072806  -0.43193227   -0.4224924   0.71315209        0.075    1.4063093        1e-10 1.5847824e-11    6.3100145    2.4441928    31.520363 -0.0026145207  -0.19197105 0.0021867022   0.19849099    0.1217651  -0.55669154 
 2498000    4.0416817    1.2947491    2.7469325  -0.23351025   0.86321512    1.0209065   0.75417379   -1.2298232            1  -0.17165896  -0.41413256  -0.44380522   0.34296089 0.0086381894 -0.064750595  0.034755013  -0.32722645  -0.31738829   0.71651661        0.075    1.4242207        1e-10 1.5922591e-11    6.2803848    2.4471838    31.520363 0.0087536796  -0.20015992 -0.0073656604   0.19137751   0.30340403    0.8552098 
 2499000    4.0195149    1.2839473    2.7355676  -0.23662736   0.85601352    1.0093808    0.7499638   -1.2298232            1 -0.042746551  -0.31500283  -0.30316418   0.48992735 -0.0021136601    0.0819489 -0.010204336  -0.19744562  -0.18683064   0.71822664        0.075    1.4113614        1e-10 1.5960592e-11    6.2654318    2.4554751    31.520363 -0.0072116704   -0.2021272 -0.0060752653   0.20230131  -0.78332432  0.085987837 
 2500000    4.0284719    1.2851582    2.7433137  -0.23123815   0.85682084    1.0015643   0.75673902   -1.2298232            1  -0.19136644  -0.46346859  -0.43769182    0.3270611 -0.006297847  0.035443624 -0.014106915  -0.34746307  -0.33433475    0.7168578        0.075    1.4203405        1e-10 1.5930173e-11    6.2773956     2.446146    31.520363 -0.0048407279  -0.19587127 -0.0012029737   0.19992443   0.94065709   0.33685332 
 2501000    4.0089527    1.2797164    2.7292364  -0.23709504   0.85319272    1.0075589   0.74645148   -1.2298232            1  -0.17756712  -0.42352127  -0.42649023   0.31731014 -0.0018488198   -0.1023112  0.029396055  -0.33154169  -0.32139114   0.71500321        0.075    1.4383415        1e-10 1.588896e-11     6.293678    2.4416835    31.520363 0.0026164742  -0.17237689 -0.0049105762   0.21806566   0.86205638   0.49741426 
 2502000    4.0354548    1.2896758    2.7457791  -0.22418537    0.8598327    1.0069553   0.75810477   -1.2298232            1  -0.11044181  -0.38509531  -0.37685304   0.43062292 0.0093460987 -0.0055197875   0.04733259  -0.26682016  -0.25417966   0.71478106        0.075    1.4429378        1e-10 1.5884024e-11    6.2956341    2.4435172    31.520363 5.3208759e-06  -0.18839408 0.0086339985   0.19536476   0.59644836   0.77757379 
 2503000    4.0155026    1.2724828    2.7430198  -0.23177544   0.84837007    1.0021494   0.74203448   -1.2298232            1  -0.17727346  -0.41738867  -0.42247845   0.30804674 -0.0033062714 -0.039986678  -0.04410245  -0.33033691   -0.3203253   0.71713587        0.075    1.4435657        1e-10 1.5936353e-11    6.2749615    2.4439136    31.520363 -0.0077612053  -0.18516204 -0.0096615154   0.20989334  -0.41935343   -1.1451769 
 2504000    4.0235158    1.2912702    2.7322456  -0.23366001   0.86089569    1.0236444   0.74835441   -1.2298232            1 -0.088309302  -0.32102672  -0.37388513   0.42998395 -0.0051877804 -0.034810289 -0.030213241   -0.2426764  -0.23442944   0.71979308        0.075    1.4587023        1e-10 1.5995402e-11    6.2517967    2.4442571    31.520363 -0.0042220342  -0.18182762 -0.0096510377   0.19873121   0.67809376   0.85718449 
 2505000    4.0229047    1.2759062    2.7469985  -0.23505363   0.85065246    1.0025891   0.74559227   -1.2298232            1  -0.20386557  -0.44944946  -0.44415508   0.28200783  0.015411271 -0.039823813   0.05826444   -0.3576629  -0.34698017   0.71754719        0.075    1.4625151        1e-10 1.5945493e-11    6.2713645    2.4453617    31.520363 -0.0086379059  -0.19331296 -0.018625997   0.19968417    1.2147861    1.5057605 
 2506000    4.0297534    1.2848936    2.7448598  -0.23114467   0.85664441     1.008751   0.75146715   -1.2298232            1  -0.18558079  -0.42696933  -0.45318948   0.32341644 0.0010314565 -0.0047898373 -0.037562637  -0.34058996  -0.32957498   0.71413378        0.075    1.4511669        1e-10 1.5869639e-11    6.3013404    2.4432574    31.520363 -0.0027858528  -0.18195645 0.0013556174   0.22299844   0.28099854    1.2474484 
 2507000    4.0208667    1.2703223    2.7505444   -0.2290212   0.84692964    1.0036453   0.73856196   -1.2298232            1  -0.14840324  -0.41239948  -0.41405857   0.38124832 0.00037670039  -0.10945791 -0.034437562   -0.3007504  -0.29166861   0.71348443        0.075     1.448755        1e-10 1.585521e-11    6.3070752    2.4403592    31.520363 0.0048507144  -0.19568148 -0.010519399   0.21774229   0.67428639     1.468934 
 2508000    4.0112757    1.2729841    2.7382916  -0.22670704   0.84870429    1.0060875    0.7398748   -1.2298232            1  -0.18006021  -0.43710938  -0.42107556   0.31800431 -0.0072664835 -0.049849035 0.0026420606  -0.33267817   -0.3236742   0.71687733        0.075    1.4488769        1e-10 1.5930607e-11    6.2772246    2.4480911    31.520363 -0.00081665777  -0.20810617 0.0060925839   0.20391657   0.48553546   0.95794755 
 2509000    4.0376237    1.2873647     2.750259  -0.22917615   0.85829186    1.0065031   0.75581045   -1.2298232            1  -0.13608177  -0.40054322  -0.37010214   0.36240005 0.00097065819 -0.022987638  0.021928886  -0.29198686  -0.27975507   0.71816552        0.075    1.4377662        1e-10 1.5959234e-11     6.265965    2.4366472    31.520363 -0.0069340389  -0.18986605 -0.0066939567   0.19257829  -0.48660197    2.3585847 
 2510000    4.0279681    1.2984066    2.7295615  -0.23320784    0.8656536     1.031154   0.75120854   -1.2298232            1  -0.24372557  -0.46577832  -0.46081805   0.19541967 0.0001598109  0.093958194 -0.031713204   -0.3986814  -0.39091768   0.72313323        0.075    1.4468744        1e-10 1.6069627e-11    6.2229196    2.4714178    31.520363 -0.0086100592   -0.1993489 0.00027687287   0.21543202  -0.42818653  0.037759825 
 2511000    4.0240528    1.2632538     2.760799  -0.22320507   0.84221702   0.99257384   0.73824927   -1.2298232            1  -0.18341934  -0.47138122  -0.36765563   0.28877884 -0.0020655674 -0.033512606  -0.01547367  -0.33570199  -0.32510431    0.7176607        0.075    1.4304183        1e-10 1.5948015e-11    6.2703727    2.4515059    31.520363 0.0019799988  -0.17144697 -0.0082105438   0.23038147   0.29744389   0.46692897 
 2512000    4.0318102    1.2922475    2.7395627   -0.2321795   0.86154726    1.0184262   0.75306796   -1.2298232            1  -0.13593072  -0.39988695  -0.39081448   0.38290927 0.0019319449 -0.027054111 -0.030467687   -0.2912701    -0.281306   0.71204352        0.075    1.4382132        1e-10 1.5823189e-11    6.3198384    2.4338362    31.520363 -0.003047317  -0.20123541 -0.0042811258   0.22166223  -0.13860369    3.2160163 
 2513000    4.0211477    1.2606341    2.7605136  -0.22502492   0.84047046   0.99703849   0.73220431   -1.2298232            1  -0.22879722  -0.51120113  -0.42747337   0.25228282 -0.00047279328  -0.03593572  0.032011313  -0.37983295  -0.37111951   0.71277522        0.075    1.4460906        1e-10 1.5839449e-11    6.3133508    2.4405883    31.520363 -0.0010595175   -0.1846443 -0.0033796749   0.21243259   0.66486517  -0.40696569 
 2514000    4.0360843    1.2929909    2.7430935  -0.23325132   0.86204289    1.0019188   0.76532992   -1.2298232            1  -0.24341455  -0.48803213  -0.48602638   0.24381486 -0.0054902458  0.040292366 -0.018407346  -0.40128328  -0.38643348   0.71555024        0.075    1.4514118        1e-10 1.5901116e-11    6.2888666    2.4399982    31.520363 -0.0089865977  -0.20888415 -0.010365886   0.20645051    0.1621864    1.1687921 
 2515000    4.0266974    1.2779525    2.7487449  -0.22363431   0.85201671   0.99746744   0.75144497   -1.2298232            1   -0.1578506  -0.41090537  -0.41106515   0.34841871  0.010246698 -0.025645961 -0.011667666   -0.3128552  -0.30023412   0.71048975        0.075    1.4455713        1e-10 1.5788661e-11    6.3336593    2.4373534    31.520363 -0.010069914  -0.21024049 0.0086731937   0.20338048  0.074516161   0.99186452 
 2516000    4.0138968    1.2748288     2.739068  -0.23837416   0.84993412    1.0013639   0.74522462   -1.2298232            1   -0.1294764   -0.3735998  -0.40553008   0.39070068 -0.0065293674 -0.097049864 -0.0068336474   -0.2831979  -0.27241612   0.71511722        0.075    1.4405747        1e-10 1.5891494e-11    6.2926746    2.4507517    31.520363 0.0053307449  -0.20842738 -0.0061848956   0.21605426   -0.5149924    2.8620184 
 2517000    4.0351899    1.2906756    2.7445143  -0.22741007   0.86049925    1.0054464   0.76027683   -1.2298232            1   -0.1558295   -0.4152309  -0.39887937   0.34662176 -0.00014632083 -0.030694705 -0.032466213   -0.3126559  -0.29935197   0.71742272        0.075    1.4255299        1e-10 1.5942727e-11    6.2724526    2.4423602    31.520363 -0.0040665648  -0.21447141 0.0053035698   0.18471713   0.66914274    1.9838735 
 2518000    4.0290564    1.2696952    2.7593612  -0.22097703   0.84651154    1.0057917   0.73636911   -1.2298232            1  -0.24328649  -0.48253905  -0.45877005   0.21144964 -0.0015333183 -0.026463808  0.022929019  -0.39518131  -0.38685825   0.71501127        0.075    1.4257124        1e-10 1.5889139e-11    6.2936071    2.4457995    31.520363 0.0057557327  -0.19461881 0.0068998656    0.2135629   0.88795338    1.3741037 
 2519000    4.0345985    1.2749616    2.7596369   -0.2327705   0.85002267   0.99546675   0.74945534   -1.2298232            1  -0.14831639  -0.41960246  -0.41610004   0.39075333  0.010566459   0.06154282 -0.030854195  -0.30291058  -0.29041431   0.71047507        0.075     1.424949        1e-10 1.5788335e-11    6.3337902    2.4439667    31.520363 -0.0086555585  -0.18512043 -0.0055985683   0.20308879  -0.24122576    1.9372222 
 2520000    4.0342227    1.2969684    2.7372543  -0.23232518    0.8646947    1.0174149   0.75909363   -1.2298232            1 -0.097717165  -0.35726934  -0.35448623   0.41860408  0.017087359 0.0064288597 0.0036323306   -0.2542995  -0.24294808   0.71173923        0.075     1.421333        1e-10 1.5816427e-11    6.3225403    2.4433731    31.520363 0.0029730471  -0.20770213 -0.0030653018   0.16846867   0.47325964    3.1384567 
 2521000    4.0291511     1.293536    2.7356151  -0.22959428   0.86240633    1.0111719    0.7595417   -1.2298232            1  -0.17857961  -0.45268596  -0.40638657    0.3233337 -0.025505724  0.029402428 -0.0048413365  -0.33525437  -0.32291936   0.71745196        0.075    1.4412611        1e-10 1.5943377e-11    6.2721969     2.450164    31.520363 0.0050444681  -0.20025712 -0.0042363637   0.20652121  -0.13353778   0.39796946 
 2522000     4.039437    1.2842859    2.7551511  -0.22902548   0.85623924    1.0034773   0.75443109   -1.2298232            1  -0.17177953  -0.41289155  -0.43116958   0.32872254  0.012685589 -0.042522078  0.046170033  -0.32740009  -0.31502092   0.71568028        0.075    1.4378702        1e-10 1.5904006e-11    6.2877239    2.4439454    31.520363 0.0020322223  -0.20427978 -0.0091937433   0.17457971   -1.0631732   0.92974008 
 2523000    4.0396693    1.2756777    2.7639916  -0.21993956   0.85050008    1.0075933   0.74187145   -1.2298232            1  -0.16994795  -0.40314228   -0.4054613   0.29875974 -0.00072898792 0.0035447388 0.0038063679  -0.32297777  -0.31377688   0.71195989        0.075    1.4475538        1e-10 1.5821331e-11    6.3205808    2.4457042    31.520363 0.0065426534  -0.20132413  0.004833914     0.191125    1.6613547   0.55412891 
 2524000     4.028022    1.2852149    2.7428072  -0.23919714   0.85685859    1.0158269   0.74693296   -1.2298232            1  -0.26630163  -0.49675386  -0.50582735   0.20367632 0.0098374635   0.10361105  0.010777311  -0.42037551  -0.41130587   0.71894313        0.075    1.4406471        1e-10 1.5976514e-11    6.2591877    2.4461423    31.520363 -0.00016636616  -0.18304408 -0.0036163492   0.16832189   -1.0414647    1.2120297 
 2525000    4.0428328     1.287531    2.7553017  -0.23466589   0.85840279    1.0117432    0.7523719   -1.2298232            1  -0.16491095  -0.40663001  -0.43560616   0.34750333  0.021785629  0.044526761  0.026351279  -0.32010675  -0.30933226   0.72057441        0.075    1.4458594        1e-10 1.6012765e-11    6.2450178    2.4411262    31.520363 0.00035286215  -0.22530136 -0.0072672888   0.19533295   0.53914651   0.55219975 
 2526000    4.0381721    1.2891032     2.749069  -0.22666084   0.85945093    1.0109089   0.75472283   -1.2298232            1 -0.096396103  -0.39984162  -0.33994902   0.45060233 -0.0053142961   -0.1225551 0.00018893424  -0.25207684  -0.24069832   0.71297605        0.075    1.4384562        1e-10 1.5843912e-11    6.3115725    2.4369907    31.520363 -0.0028570668  -0.19171135 -0.0011275733   0.18787005    1.2203135    1.1287522 
 2527000    4.0316833    1.2880616    2.7436217  -0.23345349   0.85875649    1.0066898   0.75646743   -1.2298232            1  -0.14112881  -0.39820009  -0.38723085   0.36204452 0.0093436449 0.0047311489 -0.014193183  -0.29716941  -0.28482877   0.71100582        0.075    1.4372065        1e-10 1.5800129e-11    6.3290621    2.4462483    31.520363 0.0069774827  -0.16952473 0.0051792806   0.21669884    0.1779272    1.7894865 
 2528000     4.011289    1.2766632    2.7346257  -0.22256079   0.85115718    1.0151109   0.73778107   -1.2298232            1  -0.13758269  -0.39008048  -0.41557578   0.39290818 -0.010183895 -0.050069434    0.0172553  -0.28976876  -0.28248472   0.71387671        0.075    1.4406435        1e-10 1.5863927e-11    6.3036095    2.4369872    31.520363 -0.00093268199  -0.18367168  0.010090404   0.20012042  -0.12238463    2.0627771 
 2529000    4.0299901    1.2898969    2.7400933  -0.23334568   0.85998009    1.0109284    0.7556047   -1.2298232            1  -0.20322912  -0.48222854  -0.42062631    0.2931675 0.0060424908 -0.030800779 -0.027180106  -0.35909177  -0.34753412   0.71903626        0.075    1.4520563        1e-10 1.5978584e-11     6.258377    2.4492298    31.520363  0.009633768  -0.20370292 -0.0057842307   0.22013206   0.11176145   -2.5600239 
 2530000    4.0156084     1.276926    2.7386824  -0.23140087   0.85133234    1.0029509   0.74649236   -1.2298232            1 -0.065372404  -0.31346661  -0.32866785   0.44601725 -0.012521929 0.0056333755 -0.012912748   -0.2193554  -0.20853865   0.71300357        0.075    1.4528961        1e-10 1.5844524e-11    6.3113288    2.4440883    31.520363 -0.0069107451  -0.20086873 0.0042813406   0.20432064  -0.17904838  -0.13264727 
 2531000     4.018712    1.2762731    2.7424389  -0.22854467    0.8508971   0.99778981   0.74932738   -1.2298232            1  -0.11692185   -0.3583672  -0.42393428   0.43153594 -0.0064895023 -0.036330622  0.027799942  -0.27148964  -0.25935138    0.7138273        0.075    1.4329699        1e-10 1.5862829e-11    6.3040459    2.4499085    31.520363 -0.0022824495  -0.22549083 -0.0010668851   0.18065641   0.21975204   0.42963121 
 2532000    4.0364812    1.2883125    2.7481687  -0.23236934    0.8589238     1.009494   0.75480999   -1.2298232            1  -0.16853682  -0.40138742  -0.42925392   0.32503088 -0.0041448931 -0.049206039 -0.051446548  -0.32423554  -0.31263706   0.71371959        0.075    1.4298361        1e-10 1.5860435e-11    6.3049972    2.4424978    31.520363 -0.0096876169  -0.18452457 0.0019445313   0.18251059   0.75424099    1.9628818 
 2533000    4.0407356    1.2875867    2.7531489  -0.23067238   0.85843989   0.99773358   0.76212952   -1.2298232            1  -0.10650081  -0.37485851  -0.38881351   0.44416959  0.017727722  -0.10195948 -0.033828319  -0.26370937  -0.24892231   0.71441291        0.075    1.4342533        1e-10 1.5875843e-11    6.2988783    2.4479854    31.520363 0.0022689476  -0.19331449 0.0015098233   0.18691945   0.86864646   0.96361004 
 2534000    4.0302045    1.2786775     2.751527  -0.23817723   0.85250008    1.0065928   0.74594806   -1.2298232            1  -0.12646156  -0.41055168  -0.37665717   0.40782416 -0.0073905627  0.014683262 0.0049589434  -0.28033228  -0.27014767   0.71833929        0.075     1.439707        1e-10 1.5963095e-11    6.2644492    2.4448666    31.520363 -0.014674286   -0.2187565 0.00037685972   0.17922613   0.44229895    1.6784732 
 2535000    4.0363962     1.291841    2.7445552  -0.23006563   0.86127624    1.0108815    0.7578304   -1.2298232            1  -0.17392937  -0.43542983  -0.42737808   0.34101981  0.008422996  0.033518074 -0.015058633  -0.33025112  -0.31822768   0.71545074        0.075    1.4307022        1e-10 1.5898905e-11    6.2897412    2.4481381    31.520363 -9.9368422e-05  -0.20697698 -0.010791137   0.19495283   0.59207706    3.8135988 
 2536000    4.0414942    1.2827009    2.7587933  -0.22920397   0.85518252    1.0137401     0.745541   -1.2298232            1  -0.23167544  -0.47677189  -0.45592905   0.23767461 -0.013678664  0.013518333  0.023585611   -0.3854622  -0.37638179    0.7138158        0.075    1.4407518        1e-10 1.5862573e-11    6.3041474    2.4576926    31.520363  0.001159613  -0.20825822   0.00597415   0.20837715    1.2111381  -0.35531993 
 2537000    4.0256255    1.2747368    2.7508887  -0.22717771   0.84987282   0.99973965   0.74624489   -1.2298232            1  -0.15074769  -0.41700541   -0.3883749   0.35313724 -0.0049669601  0.022294754 0.0081953068  -0.30467964  -0.29345555   0.71328325        0.075    1.4286034        1e-10 1.5850739e-11    6.3088541    2.4422593    31.520363 0.00086373188  -0.17783481 0.0092590904   0.18216516   0.89942025    2.5391673 
 2538000      4.02743    1.2791284    2.7483016  -0.23356927   0.85280071    0.9955079   0.75412761   -1.2298232            1  -0.19311716  -0.43770969   -0.4338785   0.29223673 0.0022069845 -0.022186261  0.023800384  -0.34867512  -0.33522095   0.72084207        0.075    1.4305325        1e-10 1.6018713e-11    6.2426989    2.4493972    31.520363 0.00096653133  -0.20491736 -0.011854858   0.19057136     1.554236    1.4259993 
 2539000    4.0407464    1.2935823    2.7471642  -0.22748207   0.86243717    1.0149967   0.75694709   -1.2298232            1  -0.14255655   -0.4128058  -0.37831219   0.36344834 -0.0029933912 -0.0096067238 -0.053264877  -0.29869611  -0.28744228   0.71592792        0.075    1.4536456        1e-10 1.5909509e-11     6.285549    2.4410434    31.520363 -0.0012337371  -0.22437949 -0.0073861305   0.17741538   0.46703128    1.3476097 
 2540000    4.0144182    1.2751094    2.7393088  -0.23048213   0.85012123    1.0035232   0.74404692   -1.2298232            1  -0.14554852  -0.38753033  -0.39293673   0.34382151 0.0055447718 0.0022164912 -0.052314497  -0.29902708  -0.28879647   0.71089467        0.075    1.4645543        1e-10 1.5797659e-11    6.3300517    2.4436721    31.520363 -0.0030217847  -0.18920843 0.0099884777    0.1928826    1.7151218    1.9302416 
 2541000    4.0290546    1.2878568    2.7411978   -0.2292699   0.85861996   0.99724593   0.76277167   -1.2298232            1 -0.099913591  -0.33141924  -0.34255494   0.37423341 -0.00073499119  0.022358613 -0.0078227696  -0.25725461  -0.24226549   0.71347755        0.075    1.4642911        1e-10 1.5855057e-11    6.3071361    2.4414989    31.520363 0.0015546322  -0.16885828 0.0030188678   0.21182149  -0.46529147    2.8390677 
 2542000    4.0501145    1.2957398    2.7543747  -0.23058005   0.86387561    1.0070973   0.76484754   -1.2298232            1  -0.15372897  -0.44104994  -0.35925353   0.33911657  0.013139599  0.026906443 -0.015233653  -0.31149819  -0.29748709   0.71838982        0.075    1.4480045        1e-10 1.5964218e-11    6.2640086    2.4569135    31.520363 0.0056248007  -0.19124118 0.0049341012   0.19749772  -0.31692929    1.8977485 
 2543000    4.0368373    1.2822294    2.7546079  -0.22275455   0.85486814    1.0047226   0.75124923   -1.2298232            1  -0.09805266  -0.36901577  -0.34976519   0.42462298 -0.0052471257  0.070691525 -0.048596684  -0.25301688  -0.24147182   0.71550013        0.075    1.4300966        1e-10 1.5900003e-11     6.289307    2.4344229    31.520363 -0.0028304547   -0.2319128 -0.0088025745   0.19592348   -0.6552885    1.9303989 
 2544000    4.0054354    1.2675603    2.7378751  -0.23948573   0.84508818    1.0089852   0.73175071   -1.2298232            1  -0.12575618  -0.36144384  -0.37983951   0.36401479 -0.013905258  0.037421498 -0.0059010142  -0.27669834   -0.2697838   0.71312994        0.075    1.4396398        1e-10 1.5847332e-11    6.3102105    2.4435531    31.520363 -0.0024476827  -0.18898387 -0.0014420871   0.21504422   0.24871686    2.4575062 
 2545000    4.0213103    1.2892374    2.7320729  -0.23515522   0.85954042     1.013412   0.75314209   -1.2298232            1  -0.26527267  -0.49620364  -0.49793848   0.19832412  0.012770646  -0.10400103 0.0083793567  -0.42062734  -0.40993218   0.71617532        0.075    1.4448282        1e-10 1.5915007e-11    6.2833777    2.4379259    31.520363  0.004085046  -0.21380411 0.0055803691   0.19276424   0.62577148  -0.10245395 
 2546000    4.0309887    1.2873071    2.7436816  -0.22843528   0.85825351    1.0122835   0.75174545   -1.2298232            1 -0.062599284  -0.33655931  -0.31483692   0.46359837 -0.010652059  -0.02881921 -0.0076871087  -0.21766587  -0.20709771   0.71903288        0.075    1.4425709        1e-10 1.5978508e-11    6.2584065    2.4497216    31.520363 -0.0031300057  -0.20056304 -0.014441193   0.20539177  -0.51445212    1.0551073 
 2547000    4.0132732    1.2809315    2.7323417  -0.23111915   0.85400286    1.0073493   0.74796739   -1.2298232            1  -0.17283934  -0.42183059   -0.4179408   0.32125339  0.016440396  0.025899078 -0.065399719   -0.3271266  -0.31663343   0.71457518        0.075    1.4385863        1e-10 1.5879448e-11     6.297448    2.4459928    31.520363 -0.0082380743  -0.19881669 -0.0053091892   0.21376293   -0.9990707    1.3153053 
 2548000    4.0089394    1.2633813    2.7455581   -0.2373736   0.84230205   0.99159844   0.73906815   -1.2298232            1  -0.11454716  -0.38182224  -0.35119065   0.38937141 -0.0034194929  0.014225564 -0.0090195781  -0.26699873   -0.2560929   0.71579723        0.075    1.4315603        1e-10 1.5906605e-11    6.2866965    2.4479432    31.520363  0.017762311  -0.20828358 -0.012740894   0.20661308  -0.20948995    2.1749627 
 2549000    4.0281205     1.289014    2.7391065  -0.22802298   0.85939148    1.0112256   0.75440308   -1.2298232            1 -0.089202047  -0.38016983  -0.31971979   0.43228349 0.0056845397 -0.011761662  0.031025219  -0.24481683  -0.23354947   0.72170277        0.075    1.4271201        1e-10 1.6037839e-11    6.2352539    2.4561308    31.520363 -0.00078475128  -0.21013342 -0.0067449457   0.19662015    0.2913202    2.1291323 
 2550000     4.023992    1.2705387    2.7534532  -0.23071598   0.84707395    1.0092266   0.73494383   -1.2298232            1  -0.12087477  -0.39244408  -0.40576608   0.43558585 0.0067780465 -0.0008210743 -0.0014785564  -0.27247559  -0.26493684   0.71897787        0.075    1.4232682        1e-10 1.5977286e-11    6.2588853    2.4447167    31.520363 -0.0046786671  -0.20566737 0.0053296031    0.1979352  -0.79609082    2.6564691 
 2551000     4.029012    1.2812819      2.74773  -0.22532047   0.85423649   0.99969385   0.75366038   -1.2298232            1  -0.21328427  -0.46607819  -0.46255096   0.28877634 -0.0042052522 -0.057572311 -0.041093708  -0.36874585  -0.35598559   0.71459321        0.075    1.4185681        1e-10 1.5879849e-11     6.297289    2.4497843    31.520363 0.0043413053  -0.22814456 -0.013639992   0.17292532   0.76584467     1.197736 
 2552000    4.0267182    1.2799365    2.7467818  -0.22183475   0.85333944    1.0065756   0.74738019   -1.2298232            1  -0.15042557  -0.42722124  -0.36993744   0.34588195 -0.010593781 -0.068408869  0.010369206  -0.30459171  -0.29410924   0.71173205        0.075     1.428304        1e-10 1.5816268e-11    6.3226041    2.4377718    31.520363 0.0016630279  -0.18211822 -0.00082181079   0.20146198    1.1748321    1.3282447 
 2553000    4.0049995     1.280314    2.7246855  -0.23272164   0.85359112    1.0199243   0.73856861   -1.2298232            1 -0.086958936  -0.34460349  -0.33421035   0.41793703 -0.014363967  0.041616314 -0.059168251  -0.23930746  -0.23254806   0.71770675        0.075    1.4252282        1e-10 1.5949039e-11    6.2699703     2.437994    31.520363 0.0027017114  -0.20975401 0.00068339785   0.20240096    1.1770809   0.67347053 
 2554000    4.0380797    1.2874586    2.7506211  -0.22865447   0.85835449    1.0202575   0.74639818   -1.2298232            1  -0.10070768  -0.36020988  -0.41918757   0.47727441  0.018055531   0.11096087  0.027527666  -0.25467125  -0.24634436   0.72012771        0.075    1.4401229        1e-10 1.6002838e-11    6.2488916    2.4459826    31.520363 0.00049294424  -0.20935439 0.0034389251   0.21366193  -0.22171726    2.3837717 
 2555000    4.0171641    1.2810284    2.7361357  -0.23181987   0.85406748    1.0171855   0.74126993   -1.2298232            1  -0.12106644  -0.35721559  -0.41312612   0.40714239 0.0045429149  0.070057867  0.011799521  -0.27397218  -0.26626461   0.71308694        0.075    1.4331698        1e-10 1.5846376e-11     6.310591    2.4481031    31.520363  0.010992142  -0.18428237 0.00053371083   0.21244317  -0.56805843    1.6139806 
 2556000    4.0591192    1.2903661    2.7687531  -0.22989388   0.86029291     1.006123   0.75945944   -1.2298232            1   -0.2846407  -0.54315092  -0.48008769   0.16931653 -0.010374877 -0.042521525 -0.038338967  -0.44129848  -0.42825975   0.70903579        0.075    1.4284857        1e-10 1.5756351e-11    6.3466472    2.4425487    31.520363 0.0018239484   -0.1953133 0.0044196146   0.19821687  -0.59140546   0.24016684 
 2557000    4.0322599    1.2721087    2.7601512  -0.23047535   0.84812066    1.0027232    0.7412154   -1.2298232            1   -0.1824055  -0.40949255  -0.45876776   0.32104381 -0.0091210903   0.10740275 0.0043725512  -0.33529999  -0.32553924   0.71261481        0.075    1.4119065        1e-10 1.5835885e-11    6.3147719    2.4502625    31.520363  0.012882029  -0.17223323 -0.00070403594   0.18135655   -1.1622427    2.6932181 
 2558000    4.0286582    1.2801005    2.7485577   -0.2256921   0.85344879    1.0061512   0.74785895   -1.2298232            1  -0.21042498  -0.44809891  -0.43244096   0.24926493 -0.010882431 -0.075891607 -0.014536776  -0.36468987  -0.35404805   0.71757564        0.075    1.4112592        1e-10 1.5946125e-11    6.2711159    2.4444861    31.520363 0.0050975046  -0.17379039 -0.0081038495    0.1885798  -0.84577847 -0.029715401 
 2559000    4.0061529      1.26118    2.7449729  -0.22997097   0.84083443   0.98772377   0.73926608   -1.2298232            1 -0.087933435  -0.40560892  -0.35693285   0.49874146 -0.0019346798  0.053925292 -0.023891122  -0.24042583  -0.22892609    0.7180485        0.075    1.4381435        1e-10 1.5956633e-11    6.2669862    2.4471552    31.520363 0.0087117714  -0.20741541 0.0047786921   0.19638516  -0.55687324    3.3084669 
 2560000     4.026915    1.2903974    2.7365176  -0.23033084   0.86031382    1.0202726   0.74970317   -1.2298232            1  -0.19885065   -0.3942044  -0.46195085   0.25960329 -0.012095634 -0.087371683  0.024679656  -0.35349596  -0.34448949   0.71499554        0.075     1.430204        1e-10 1.588879e-11    6.2937455    2.4504342    31.520363 -0.0039275725  -0.20340079 0.0076424291   0.20246911  -0.10147782   -1.3798226 
 2561000    4.0330703    1.2824226    2.7506476  -0.22829636   0.85499698    1.0016863   0.75356843   -1.2298232            1  -0.23523016  -0.49684418  -0.47348889   0.26464258 0.0048909713  0.012475461 -0.001173245  -0.39067278   -0.3782159   0.70925012        0.075    1.4208369        1e-10 1.5761114e-11    6.3447293    2.4420155    31.520363 5.3805524e-05  -0.20086907 -0.0077849107   0.18416142    2.2450109   -2.3331499 
 2562000       4.0472    1.2951065    2.7520935  -0.23510939    0.8634534    1.0180148    0.7565781   -1.2298232            1  -0.19689438  -0.43945866   -0.4418975   0.29067303 -0.010332651 -0.076926923  0.047446087  -0.35295782  -0.34221092   0.71484339        0.075    1.4087262        1e-10 1.5885409e-11    6.2950851    2.4526005    31.520363 -0.0056396966  -0.18912334 -0.0053775662    0.1999864    1.4757355    1.2059365 
 2563000    4.0338784    1.2875684      2.74631  -0.23037522   0.85842768   0.99876637   0.76139415   -1.2298232            1  -0.14577665  -0.40514101  -0.41157369   0.37938474 -0.0024229377 -0.027563654 -0.018736421  -0.30283352  -0.28834558   0.71953423        0.075    1.3968199        1e-10 1.598965e-11    6.2540457    2.4501596    31.520363 -0.015038476  -0.19415407 0.0031627535   0.19784159     1.444274  -0.57394075 
 2564000    4.0125744     1.267748    2.7448264  -0.22828118   0.84521332   0.99336602   0.74277114   -1.2298232            1  -0.15066158  -0.39394952  -0.44730953    0.3892743 -0.0041619122  0.037349532  0.021260762  -0.30387698  -0.29245964   0.71871722        0.075    1.4125962        1e-10 1.5971494e-11    6.2611551    2.4425875    31.520363 -0.00026294451  -0.22790365 -0.0080121716     0.220579   -1.6585754    1.1278041 
 2565000    4.0108627    1.2789821    2.7318806   -0.2239147   0.85270318    1.0024974   0.74912578   -1.2298232            1  -0.10030139  -0.34736831  -0.35764651   0.40411064  0.015952775  -0.03374861  0.020520098   -0.2548276  -0.24340291   0.71675105        0.075    1.4152999        1e-10 1.5927801e-11    6.2783305    2.4494139    31.520363 0.0014366893  -0.18819878 -0.0091390629   0.23280633   0.72541945   0.36643937 
 2566000    4.0234881    1.2740795    2.7494086  -0.22775472   0.84943457    1.0004135   0.74503698   -1.2298232            1  -0.11188314  -0.37014637  -0.37496636   0.40946331 -0.0069586663 -0.0056901363 0.0068967658  -0.26556593  -0.25468719    0.7153871        0.075    1.4259647        1e-10 1.5897491e-11    6.2903007    2.4471547    31.520363 0.0070314979  -0.22421627 0.0014566516   0.19038097  -0.24132575   0.88562651 
 2567000    4.0324887     1.279819    2.7526697  -0.23350776   0.85326117   0.99799883     0.753183   -1.2298232            1 -0.067988482  -0.34486986  -0.33873128   0.47963569 0.0045762288  0.035206518 0.0045301876   -0.2233516  -0.21044785   0.71343658        0.075    1.4366532        1e-10 1.5854146e-11    6.3074983    2.4502885    31.520363 -0.0080076532  -0.19512102 -0.0062377212   0.20741799   0.26973655    3.2049696 
 2568000    4.0219138    1.2678443    2.7540695   -0.2225135   0.84527754   0.99775781   0.73984063   -1.2298232            1 -0.034185451  -0.29380224   -0.3029525    0.4941984 0.0049117614  0.046733457  0.032018446  -0.18679636  -0.17661041   0.71109019        0.075    1.4324394        1e-10 1.5802004e-11    6.3283112    2.4414851    31.520363 -0.0085098894  -0.17343439 0.0086582734   0.16396982   -1.5090965  0.091978959 
 2569000    4.0218967    1.2884293    2.7334674  -0.24150523   0.85900166    1.0155359    0.7507607   -1.2298232            1  -0.21494646  -0.44666836  -0.48169277   0.28352174 2.1168771e-05 -0.065780113  0.069040326  -0.36980991  -0.35990916   0.71620526        0.075    1.4176429        1e-10 1.5915672e-11     6.283115    2.4478836    31.520363 0.0010229838  -0.20321726 0.0036274274   0.19743308  -0.96969457   0.39070257 
 2570000    4.0144583    1.2763247    2.7381336  -0.23541086   0.85093149    1.0074666   0.74268916   -1.2298232            1 -0.097020036  -0.38205779  -0.38173194   0.47272963 0.0061490468  0.018169457 -0.034463515  -0.25021853  -0.24083087     0.719817        0.075    1.4298206        1e-10 1.5995933e-11    6.2515889    2.4459803    31.520363 -0.0016496513   -0.1905284 0.0051176201   0.17778466   0.42334002    1.9519025 
 2571000    4.0419755    1.2924215     2.749554  -0.22767551   0.86166327    1.0132342   0.75685722   -1.2298232            1  -0.13092599  -0.37828055  -0.39838053   0.38388309 -0.0019878898  0.074645069  -0.02462528  -0.28704701  -0.27556013   0.71513559        0.075    1.4450005        1e-10 1.5891902e-11     6.292513    2.4510819    31.520363 -0.0063030414  -0.18824218 -0.008627715   0.18682437  -0.78522992   0.39757729 
 2572000     4.035367    1.2801139    2.7552531  -0.22311821   0.85345778    1.0031512   0.74995021   -1.2298232            1  -0.14797069  -0.40459822  -0.41245395   0.37314009 0.00036615753 -0.013182974 -0.026542815  -0.30266696  -0.29116553   0.71769557        0.075     1.442507        1e-10 1.594879e-11     6.270068      2.46174    31.520363 0.0012474824  -0.19163311 -0.002726018   0.19129332  -0.74057178   -0.6069425 
 2573000    4.0206796    1.2824361    2.7382435  -0.22746614   0.85500599    1.0125233    0.7460843   -1.2298232            1  -0.15313977  -0.39849329  -0.40109706   0.34017103 0.0066825407 -0.012913625 -0.022193976   -0.3070386  -0.29767244   0.72064799        0.075    1.4258704        1e-10  1.60144e-11    6.2443801    2.4529932    31.520363   0.01040978  -0.20508676 0.0033665912   0.19933102  -0.92131981    2.0257793 
 2574000    4.0196148    1.2713388    2.7482761  -0.23507835   0.84760732   0.99241163   0.74748248   -1.2298232            1  -0.22579725  -0.47571687  -0.45742837   0.25575349 -0.010584359 -0.064416922  0.042618759  -0.37998449  -0.36745907   0.71886887        0.075    1.4355395        1e-10 1.5974864e-11    6.2598343    2.4446938    31.520363 0.0046519855  -0.20665913 -0.0013980167   0.20012131  0.083818287   -1.1035313 
 2575000    4.0182052    1.2758148    2.7423904  -0.22890055   0.85059155    1.0030382   0.74517841   -1.2298232            1  -0.19770492  -0.43987973  -0.41562586   0.26239083 -0.00071686943  0.097532263  0.032728092  -0.35141688  -0.34088363   0.71646366        0.075     1.416204        1e-10 1.5921415e-11    6.2808489    2.4517858    31.520363 0.0010431065  -0.17284994 -0.0053051828   0.19721614   -1.2868514    1.0729118 
 2576000    4.0164865    1.2724756    2.7440109  -0.23062076   0.84836526    1.0002525   0.74333902   -1.2298232            1  -0.19885569   -0.4341964  -0.44437143   0.28200078 -0.0031023138 -0.041800281 -0.039021562  -0.35218823  -0.34163676   0.71213011        0.075    1.4296244        1e-10 1.5825114e-11      6.31907    2.4544767    31.520363 -0.00010093095  -0.19376869 0.0010101373   0.18655833    0.2412825    1.7243917 
 2577000    4.0237405    1.2864803    2.7372603  -0.22734894   0.85770224     1.010548   0.75201357   -1.2298232            1  -0.21541667  -0.46268125  -0.42346644   0.23989769  0.016262304 -0.044154982  0.080222154  -0.37053856  -0.35966737   0.71641053        0.075    1.4212746        1e-10 1.5920234e-11    6.2813147    2.4428013    31.520363 -0.0045129099   -0.2067934 -0.014972919   0.18422455   0.70614769   0.65128101 
 2578000    4.0402922    1.2910294    2.7492628  -0.23195849   0.86073518    1.0141865   0.75462781   -1.2298232            1  -0.15389803  -0.40045377  -0.39212949   0.33088917 -0.0035040813 0.0079535661 0.0066547492  -0.30955917   -0.2986681   0.72215169        0.075    1.4200188        1e-10 1.6047815e-11    6.2313778    2.4458138    31.520363 0.0022036094  -0.19671291 -0.019033094   0.21995557   0.63663713   0.21735255 
 2579000     4.043721    1.2856137    2.7581073  -0.23439179   0.85712447    1.0001931    0.7582017   -1.2298232            1  -0.11935775  -0.39731611  -0.35907234   0.39831519 0.00042449969  0.063444647  0.042095049   -0.2757561  -0.26213033   0.71612598        0.075    1.4132724        1e-10 1.5913911e-11    6.2838106    2.4544345    31.520363  0.002607105  -0.20526744 -0.0067519993   0.20165846   -0.7072635   0.52561066 
 2580000    4.0461608    1.2961943    2.7499665  -0.23377404   0.86417859    1.0084283   0.76443917   -1.2298232            1    -0.220841  -0.43143575  -0.46790041   0.23681317 -0.018521389 -0.012745353 0.0051691282  -0.37852598  -0.36478911   0.71421078        0.075    1.4210481        1e-10 1.5871351e-11     6.300661    2.4706175    31.520363 0.0006921823  -0.18580388 -0.00084188435   0.19500444  -0.42556257   0.61573859 
 2581000    4.0268677    1.2687926    2.7580751  -0.23922188    0.8459098    0.9991733   0.73993095   -1.2298232            1  -0.21853601  -0.46669421  -0.44379459   0.25488077 -0.011005086 -0.0039103793 -0.034838613  -0.37116555  -0.36116303   0.71746065        0.075    1.4228031        1e-10 1.594357e-11    6.2721209    2.4518418    31.520363 -0.0045356283  -0.20606427 0.0030131433   0.19974111   -1.3836924  -0.50690343 
 2582000    4.0407035    1.2897054    2.7509981  -0.22429884   0.85985247    1.0104193    0.7557411   -1.2298232            1  -0.17306737  -0.41102739  -0.44223883   0.33406412 0.0022556162  0.010150421  0.015771282  -0.32895815  -0.31729969   0.71508809        0.075     1.427376        1e-10 1.5890846e-11     6.292931    2.4458907    31.520363  0.013563097  -0.18261543 -0.00060714507   0.19581968   0.78856272   -2.2378651 
 2583000    4.0415889    1.2803643    2.7612246  -0.22883783   0.85362469    1.0116083   0.74438019   -1.2298232            1   -0.1990746  -0.42675288  -0.43979932   0.26932841  -0.02253202 -0.010636232 -0.0072226498  -0.35262191  -0.34347666   0.71419722        0.075    1.4500289        1e-10 1.5871049e-11    6.3007806     2.450946    31.520363 -0.004377302  -0.17569451  0.011398634   0.17983135    1.2767491    1.9942891 
 2584000    4.0263395    1.2775803    2.7487592  -0.23302561   0.85176857   0.99153109   0.75513311   -1.2298232            1  -0.15430703  -0.40378366  -0.40372238   0.34458495 -0.0038774847 -0.0033349422 -0.046824611   -0.3100724  -0.29584316   0.71904922        0.075    1.4636944        1e-10 1.5978872e-11    6.2582642    2.4523201    31.520363 0.0062388643  -0.20175824 -0.014256013   0.19910846  -0.65945036   0.34234937 
 2585000    4.0260467    1.2880692    2.7379775  -0.23511623   0.85876159     1.003273   0.75884051   -1.2298232            1  -0.12448884  -0.37490517  -0.38801575   0.38945438 0.0038576188 -0.0074082888  0.014474253  -0.28101896  -0.26770108   0.71845853        0.075    1.4555325        1e-10 1.5965745e-11    6.2634096    2.4366743    31.520363 -0.0002137385  -0.17345176 -0.0011651389    0.2095463   -1.4147401  -0.14673722 
 2586000    4.0305255    1.2878952    2.7426303  -0.23227566   0.85864558    1.0067549   0.75623468   -1.2298232            1  -0.17906353  -0.43030562  -0.44511851   0.33823352 -0.00044743334 -0.018309676 0.0023305802  -0.33505613  -0.32277279   0.71908954        0.075    1.4406916        1e-10 1.5979768e-11    6.2579133     2.463058    31.520363   0.00256274  -0.17858219 -0.0060956834    0.2002549   0.25513677   0.06044937 
 2587000    4.0097072    1.2726692     2.737038  -0.23721986    0.8484943    1.0113053   0.73590869   -1.2298232            1  -0.21311962  -0.50158917  -0.42700913   0.28923944  0.015346382 -0.063120646  0.025359698  -0.36491947  -0.35747843   0.71416948        0.075     1.442789        1e-10 1.5870433e-11    6.3010254    2.4438608    31.520363 3.5245112e-05  -0.20432603 -1.6380361e-05   0.19525111 -0.068611531    1.0664587 
 2588000    4.0228102    1.2670311    2.7557791  -0.22878608   0.84473538   0.98289092   0.74921131   -1.2298232            1  -0.22523812  -0.44969724  -0.47374961   0.24773248 -0.011411102  0.030157934  -0.01705905  -0.37978198  -0.36554091    0.7190676        0.075    1.4182276        1e-10 1.597928e-11    6.2581042    2.4503984    31.520363 -0.0013557074  -0.19838087 -0.0038464487   0.20663255  -0.34722878    1.7721315 
 2589000    4.0378645    1.2986269    2.7392376  -0.22402074   0.86580045    1.0204827   0.75884168   -1.2298232            1 -0.075738935  -0.32894567  -0.34629515   0.44802401 -0.014957784  0.013020942  0.033081533  -0.23226929  -0.22140777   0.71867073        0.075    1.4318641        1e-10 1.5970461e-11    6.2615602      2.44271    31.520363 0.0049068424  -0.23539028 0.0074308441   0.19776054   -1.9067683   0.58638101 
 2590000    4.0300582    1.2841052    2.7459529  -0.22933494   0.85611879    1.0037393   0.75404595   -1.2298232            1  -0.17491422  -0.46284096  -0.40276435   0.34086264 0.0084363258  0.021555192  -0.03343912  -0.33045534  -0.31819301   0.71644845        0.075    1.4459373        1e-10 1.5921077e-11    6.2809822    2.4522497    31.520363 -0.014377715  -0.21055813 -0.0026108562   0.20957823 -0.017254503   0.24810061 
 2591000    4.0176936    1.2727846     2.744909  -0.23667819   0.84857128   0.99346223   0.74838658   -1.2298232            1  -0.18959664  -0.45065898  -0.43967114   0.32154021 0.0037766751 -0.040296168 -0.027295154  -0.34397037  -0.33140843    0.7151306        0.075    1.4475277        1e-10 1.5891791e-11    6.2925569    2.4401019    31.520363 0.0076687103  -0.18294172 0.0036654299   0.19938066  -0.23233455   0.77073132 
 2592000    4.0148102    1.2772141     2.737596   -0.2307149   0.85152445    1.0003498   0.74861738   -1.2298232            1  -0.17990054  -0.46895933  -0.43522215   0.36447986 -0.0059046181 -0.027004274  0.094080738  -0.33432188   -0.3226955   0.71604471        0.075    1.4341182        1e-10 1.5912105e-11    6.2845238    2.4440649    31.520363 2.688368e-05  -0.20852557 -0.0095677691   0.20506056   0.34408788    1.0085699 
 2593000    4.0344341    1.2809455    2.7534885  -0.22851576    0.8540122    1.0020293   0.75166467   -1.2298232            1  -0.17311858  -0.38336517  -0.42511237   0.28912181 -0.0037861182  -0.03978719  0.046690399   -0.3281685  -0.31615328   0.72067725        0.075    1.4274394        1e-10 1.601505e-11    6.2441266    2.4503075    31.520363  0.013421472  -0.21058979 0.0014002336   0.19240659  -0.66247925   0.90213475 
 2594000    4.0287118    1.2908809     2.737831  -0.23138666   0.86063615     1.020757   0.74991337   -1.2298232            1  -0.18972137  -0.44020676  -0.45098245   0.32202511 0.0049460608 -0.029704998  0.010988306  -0.34441004  -0.33542935   0.72096152        0.075    1.4403872        1e-10 1.6021367e-11    6.2416646    2.4396345    31.520363 0.0060732192  -0.19800975 -0.0081374165    0.1740267   -0.6464803   0.73440422 
 2595000    4.0258077    1.2726507     2.753157  -0.22735489   0.84848198    1.0085147   0.73781902   -1.2298232            1  -0.19240933  -0.44025694  -0.44643778   0.30946674 -0.012208211 -0.0081860466  0.030984973  -0.34460323  -0.33636978   0.71101688        0.075    1.4237827        1e-10 1.5800375e-11    6.3289637    2.4333137    31.520363 0.0021492264  -0.19146344 -0.0050466623    0.2069442   -1.1808131     2.357792 
 2596000    4.0094054    1.2702239    2.7391815  -0.22837588   0.84686404   0.99358655   0.74541172   -1.2298232            1  -0.13551419  -0.39711243  -0.36008374    0.3506536 -0.004148459 -0.010434238  0.034728041  -0.28927428  -0.27734372   0.71582345        0.075    1.4196485        1e-10 1.5907188e-11    6.2864663     2.450456    31.520363 -0.0059612528   -0.1959625 -0.0045234325   0.18897133   0.46364549    2.6673569 
 2597000    4.0207883    1.2776359    2.7431524  -0.23441148   0.85180566    1.0132938   0.74013581   -1.2298232            1  -0.20212152  -0.44311921  -0.43646701   0.27322168 -0.00033468555  -0.08299892  0.034852814  -0.35479331  -0.34676417   0.72101035        0.075    1.4132122        1e-10 1.6022452e-11    6.2412419    2.4463406    31.520363 0.0032617078   -0.2093019 -0.0087481713   0.19682567    0.3795322  -0.91954506 
 2598000    4.0100681    1.2803519    2.7297162  -0.23087053    0.8536164    1.0069501   0.74758969   -1.2298232            1  -0.16815976  -0.41217503   -0.4016127   0.30930844 -0.0021347736  0.047405129  0.016600396  -0.32236911  -0.31189688   0.71589066        0.075    1.4176113        1e-10 1.5908681e-11    6.2858761    2.4530532    31.520363 4.3187048e-05  -0.19847749 0.0049041785   0.18775293   0.11666539   0.69242239 
 2599000    4.0242596    1.2818163    2.7424432  -0.22592704   0.85459277    1.0087534   0.74799391   -1.2298232            1  -0.12903733  -0.36870979  -0.38698903   0.36858684 -0.0064417415  -0.04502129 -0.038500221  -0.28333006  -0.27303186   0.71232416        0.075    1.4143852        1e-10 1.5829426e-11    6.3173485    2.4456137    31.520363 0.0023415051  -0.19612655 0.0021757428   0.17222622   0.10198226   0.31468211 
 2600000    4.0153756    1.2707865    2.7445891  -0.22687045   0.84723911    1.0027494   0.73970556   -1.2298232            1  -0.22622624  -0.47866128  -0.47554752   0.27553008 0.0003760855 -0.097775037 -0.0090699509  -0.37880929  -0.36936373   0.71790018        0.075    1.4231695        1e-10 1.5953337e-11    6.2682809    2.4453784    31.520363   0.00619808  -0.20096612 -0.005723052   0.18896709    1.0506945 -0.0017980453 
 2601000    4.0142992    1.2707249    2.7435742  -0.22773608   0.84719809    1.0035719     0.739067   -1.2298232            1  -0.19020802  -0.43499564  -0.44816423   0.31253582  0.002045341 -0.039827161 5.2228385e-06  -0.34265935  -0.33346291   0.71973554        0.075     1.442279        1e-10 1.5994123e-11    6.2522965     2.443156    31.520363 -0.0081015032  -0.19373775 -0.0023769214   0.20827706    1.4176673    0.4534742 
 2602000    4.0204353    1.2750023     2.745433  -0.23262124   0.85004981    0.9965973   0.74871891   -1.2298232            1  -0.13418301   -0.3915688  -0.39582993   0.38484971 -0.0010556579  -0.03802696  0.050278094  -0.28862529  -0.27644231      0.71426        0.075     1.436682        1e-10 1.5872444e-11    6.3002268    2.4503871    31.520363 0.0021453736  -0.20281563 0.0021567856   0.19177864    0.4025809   0.15256027 
 2603000    4.0233384    1.2675701    2.7557684   -0.2263417   0.84509472   0.98473771   0.74854135   -1.2298232            1 -0.049704203  -0.30247404  -0.31816515   0.47152658 0.00023469938   -0.0630061 -0.028326511  -0.20410986  -0.19027061   0.71214967        0.075    1.4319168        1e-10 1.5825548e-11    6.3188964    2.4462799    31.520363 0.0051746652  -0.18397452 0.0091984421   0.20450443   0.33388087    3.3570472 
 2604000    4.0175821    1.2702907    2.7472913  -0.23134961   0.84690861   0.99198719   0.74659391   -1.2298232            1  -0.14942046   -0.3977259  -0.38659221   0.33605673  0.010709983  0.028283499  0.035076804   -0.3034244  -0.29102169   0.71533334        0.075    1.4338952        1e-10 1.5896296e-11    6.2907735    2.4370934    31.520363 -0.0012062882  -0.21295697 -0.0051863018   0.21630861   0.20606532    1.4113493 
 2605000    4.0381079    1.2809763    2.7571316  -0.23423866    0.8540327    1.0131233   0.74402223   -1.2298232            1  -0.22051761  -0.44672095  -0.46641938   0.25158751 -0.0098375655 -0.011567129 -0.020138599  -0.37399108  -0.36513591   0.72003747        0.075     1.442124        1e-10 1.6000833e-11    6.2496747    2.4448507    31.520363 0.00029190221  -0.17998253 -0.0031027772   0.22056767   0.84147178   0.66102595 
 2606000    4.0319297    1.2732172    2.7587125   -0.2223527   0.84885965   0.99096004   0.75060609   -1.2298232            1 -0.099665074  -0.38885679  -0.39945037   0.48931193 -0.0085462772  0.033060451    0.0490241  -0.25449663  -0.24111969   0.71523609        0.075    1.4353711        1e-10 1.5894135e-11    6.2916288     2.440881    31.520363 -0.0044929744  -0.21014171 -0.007257815   0.20958268  -0.60898983    2.9433098 
 2607000    4.0130274    1.2611858    2.7518416  -0.22299052    0.8408383   0.99606257   0.73350207   -1.2298232            1  -0.14238383  -0.39871671  -0.39842238   0.36998759  0.017194872   0.12732707  0.025931688  -0.29368726  -0.28456681   0.71841429        0.075     1.418807        1e-10 1.5964762e-11    6.2637952    2.4411929    31.520363 -0.0074154167  -0.19620712 -0.0096771335   0.19149834   -2.0165006    1.3554682 
 2608000    4.0121003    1.2723638    2.7397364   -0.2283582   0.84829074   0.99841709   0.74448306   -1.2298232            1  -0.12300713  -0.38893121  -0.39643145   0.41634128 0.0030188525 0.00056920226 -0.051580713  -0.27657566   -0.2655262   0.71544451        0.075    1.4255093        1e-10 1.5898767e-11     6.289796    2.4457404    31.520363   0.01573299  -0.18940163 -0.0035602913   0.20938765  -0.95946348    1.1423097 
 2609000    4.0247567    1.2847955    2.7399612  -0.23477164   0.85657902    1.0054326   0.75365292   -1.2298232            1  -0.19870188  -0.45001393  -0.43913668   0.29304496  0.012703871  0.038464697  0.037057369  -0.35416193  -0.34222238   0.71174173        0.075    1.4277431        1e-10 1.5816483e-11    6.3225182    2.4427324    31.520363 -0.00014797842  -0.18837602 0.0020589814   0.20433895    1.0303924    1.1610917 
 2610000    4.0298348    1.2693317    2.7605031  -0.23202228   0.84626921   0.99678453   0.74219216   -1.2298232            1  -0.13343546  -0.39338286  -0.39948519   0.39256167 -0.0079571099  0.033340021  0.015085994  -0.28653143  -0.27572149   0.71706979        0.075     1.416895        1e-10 1.5934884e-11    6.2755398    2.4421113    31.520363  0.008914334  -0.18422666 0.0040095204    0.1901539    1.0022478   -2.7202682 
 2611000    4.0334224     1.300617    2.7328054  -0.22853254   0.86712726    1.0188809   0.76219531   -1.2298232            1  -0.14573332  -0.39239207  -0.40865395   0.36384606 -0.010552779  0.032336441   0.03274303  -0.30295545   -0.2911735     0.722139        0.075     1.425317        1e-10 1.6047533e-11    6.2314873     2.437094    31.520363 -0.011888424  -0.19084524  0.010097444   0.23009232   -1.5122844    2.0673372 
 2612000    4.0227957    1.2851368    2.7376589  -0.23121843   0.85680655     1.012567   0.74910083   -1.2298232            1  -0.14293469  -0.40391551   -0.4059667   0.38107813 0.0015371432 -0.013700887 0.0023271917  -0.29745575  -0.28747359   0.72000516        0.075    1.4220879        1e-10 1.6000115e-11    6.2499552    2.4441471    31.520363 0.0033812551  -0.19124011  0.005024432   0.18682568    1.2902276  -0.41121803 
 2613000    4.0159046    1.2678766     2.748028   -0.2289498    0.8452991    1.0053744   0.73460637   -1.2298232            1  -0.15019636  -0.41436459  -0.41126918   0.37504469 -0.0040354658  -0.11138287  0.047794757  -0.30172757  -0.29370855   0.71211902        0.075    1.4146381        1e-10 1.5824867e-11    6.3191684    2.4636444    31.520363 -0.009804935  -0.18577101 0.0064659949    0.1913838   0.56030257   0.46045859 
 2614000    4.0221751      1.28092    2.7412551  -0.22716791   0.85399515   0.99952019   0.75337218   -1.2298232            1  -0.23330804   -0.4726769  -0.46263278   0.23538554 0.0090358959 -0.032213004 -0.0024967747  -0.38871018  -0.37598458    0.7149596        0.075     1.419213        1e-10 1.5887991e-11    6.2940619    2.4565267    31.520363 -0.0089585001  -0.19480614  0.017046195   0.20926228   0.20837531    2.3304095 
 2615000    4.0266758    1.2784894    2.7481864  -0.22840139   0.85237468   0.99032394   0.75699409   -1.2298232            1  -0.15507493  -0.42560341  -0.40447625   0.36485486  0.010284661 -0.051970948 -0.017559558  -0.31122418  -0.29643875    0.7206763        0.075    1.4216798        1e-10 1.6015029e-11    6.2441348    2.4445567    31.520363 -0.012821379  -0.21059289 0.0074038138   0.21657283   0.39371086   -1.7866767 
 2616000    4.0374662    1.2804835    2.7569826  -0.22719935   0.85370419    0.9986697   0.75346839   -1.2298232            1  -0.12115187  -0.41301115  -0.36141123   0.41096677 -0.022327315  0.026453066  0.045943784  -0.27657385    -0.263707   0.71743799        0.075    1.4297887        1e-10 1.5943066e-11    6.2723191    2.4439719    31.520363 0.0010094886  -0.19886537 -0.0097536782   0.18968918   0.62088772   0.82967746 
 2617000    4.0209414    1.2847728    2.7361686  -0.22653365   0.85656385    1.0097721   0.75062429   -1.2298232            1 -0.081930936  -0.35173148  -0.34717451   0.45311319 -0.0049666246  0.013863036 0.0019413095  -0.23676625  -0.22607087   0.71379664        0.075    1.4195453        1e-10 1.5862147e-11    6.3043166    2.4559492    31.520363 -0.0065098841   -0.2023907 -0.00073314113   0.19194829  0.056390513   0.19619916 
 2618000    4.0314714    1.2879138    2.7435576  -0.22910347   0.85865798    1.0123264   0.75240012   -1.2298232            1  -0.27994212  -0.48106321  -0.53210359   0.17334043 -0.035133418 -0.045497548 -0.0062267864  -0.43514375  -0.42444669   0.71793958        0.075    1.4102578        1e-10 1.5954213e-11    6.2679369    2.4639547    31.520363 -0.0061361202  -0.19402839 -0.0024670093   0.19602096    1.1791152  -0.95719942 
 2619000    4.0223412    1.2866837    2.7356575  -0.22984304   0.85783783    1.0066205   0.75496092   -1.2298232            1  -0.10364051  -0.36731159  -0.40281416   0.45920423 0.0034736863 -0.045388773  0.025063068  -0.25937036  -0.24733057   0.71639495        0.075     1.410654        1e-10 1.5919888e-11    6.2814513    2.4363602    31.520363  0.000966466  -0.19820304 -0.0050550511   0.20778082    1.2665355  -0.23456639 
 2620000    4.0086766    1.2700031    2.7386735  -0.23329197   0.84671683    1.0003441   0.74048631   -1.2298232            1  -0.25563167   -0.5044325  -0.43788807   0.17542556 -0.0089006375  0.017928732 0.0060995394  -0.40837577  -0.39842582   0.71814764        0.075    1.4017483        1e-10 1.5958837e-11     6.266121    2.4505894    31.520363 -0.0073955341  -0.19525348 -0.0014535844   0.20422485   0.44209785   0.90072137 
 2621000    4.0345043    1.2832359    2.7512684  -0.23029421   0.85553919   0.99646447   0.75809945   -1.2298232            1 -0.088681235  -0.33713657  -0.34099563    0.4120885 -0.014311172  -0.12321812 -0.030632187  -0.24505849  -0.23092158    0.7189347        0.075    1.3873988        1e-10 1.5976327e-11    6.2592611    2.4660127    31.520363 -0.0046873521  -0.18851311 -0.0071028767   0.19501739  -0.45309847    1.6531254 
 2622000    4.0189234    1.2743618    2.7445617  -0.22893948   0.84962278    1.0067035   0.74100272   -1.2298232            1 -0.069876136  -0.33892246  -0.32568208   0.45497613 0.0016941525  0.070758949 -0.0081494969  -0.22272676  -0.21357805   0.71943854        0.075    1.4018363        1e-10 1.5987523e-11    6.2548776    2.4447112    31.520363 0.0010613986  -0.20982224 0.0041220533   0.20858178  -0.61021425    2.5767467 
 2623000    4.0050358    1.2729196    2.7321162  -0.23580902   0.84866127   0.99601513   0.74677222   -1.2298232            1  -0.13165411  -0.41413646   -0.3981063   0.41728042 -0.0046788917 0.0019592328 -0.035586134  -0.28569484  -0.27383032   0.71592145        0.075    1.4189947        1e-10 1.5909366e-11    6.2856058    2.4422827    31.520363 -0.00091135244  -0.19937491 0.00037040321   0.19201447  0.034898871   0.28519856 
 2624000     4.026318     1.272522     2.753796  -0.23174489   0.84839619    1.0007938   0.74301677   -1.2298232            1  -0.21722406  -0.45312678  -0.44805977   0.24951437 -0.0044019792 -0.043921864  -0.01587674  -0.37049013   -0.3600824   0.71983905        0.075    1.4174298        1e-10 1.5996423e-11    6.2513975    2.4563475    31.520363  0.003534695  -0.18695446 0.0029279221   0.19293795     1.338224  -0.34501645 
 2625000    4.0015545    1.2762584    2.7252961  -0.23960464   0.85088724    1.0174863   0.73568049   -1.2298232            1 -0.088243153  -0.37502123  -0.32248421   0.43277598 -0.0032833588  0.010000735 -0.028513221  -0.23999593  -0.23348426   0.71947009        0.075    1.4057836        1e-10 1.5988224e-11    6.2546033     2.442746    31.520363 0.0078718902  -0.18172785 -0.0089914329   0.20869182    0.3079149     2.474421 
 2626000    4.0238044    1.2823899    2.7414145  -0.22841487   0.85497517    1.0125531   0.74601159   -1.2298232            1  -0.21065379  -0.45386237  -0.44265162   0.26455261 0.0014299385  -0.12775036 -0.033258525  -0.36453762   -0.3551907   0.71533961        0.075    1.4140783        1e-10 1.5896436e-11    6.2907183    2.4462065    31.520363 0.0060466119  -0.21212713 -0.00029730774   0.22720618   0.40682394   -1.7243002 
 2627000    4.0254448    1.2821203    2.7433244  -0.22781703   0.85479545    1.0023379   0.75277649   -1.2298232            1 -0.081121658  -0.34710389  -0.35175644   0.45549535 -0.0030139133 -0.073129497  0.052214334  -0.23640092  -0.22420041   0.71569983        0.075    1.4173399        1e-10 1.5904441e-11    6.2875522    2.4419229    31.520363 0.00065907099  -0.20927189 -0.0088645616   0.20818515    1.0259484    1.5690424 
 2628000    4.0321952    1.2753294    2.7568658  -0.23469048   0.85026789   0.99581951   0.74962617   -1.2298232            1  -0.13870606  -0.38183589  -0.38729013   0.35300783 0.0032614934  0.078627242  0.015352929  -0.29333549  -0.28085434   0.72078544        0.075    1.4353172        1e-10 1.6017454e-11    6.2431894    2.4534121    31.520363 -0.0069970154   -0.1926079 -0.013038886   0.19251858   -1.2933896    1.3604398 
 2629000    4.0439547    1.2775379    2.7664168  -0.23131144   0.85174035   0.99799171   0.75061454   -1.2298232            1  -0.20137771  -0.45181345  -0.44725844   0.29493875 -0.0045404437 0.0058732704 -0.0085707399  -0.35621102  -0.34383607   0.72044887        0.075    1.4201487        1e-10 1.6009975e-11     6.246106    2.4498182    31.520363 -0.00083512958  -0.19077347 -0.011800213   0.19345049   0.42953023   -1.6437617 
 2630000    4.0110318    1.2710254    2.7400064  -0.22559905   0.84739839   0.99287947   0.74680521   -1.2298232            1  -0.16977268   -0.3944044  -0.43368772   0.31877407  0.012255189  0.010842775 -0.010781083  -0.32382022  -0.31150129   0.71775556        0.075    1.4391804        1e-10 1.5950124e-11    6.2695439    2.4483957    31.520363 -5.708093e-05   -0.1988611 4.7500013e-05   0.19317463  -0.43162913   -1.8049467 
 2631000    4.0057128    1.2727332    2.7329796  -0.22951955   0.84853701    1.0020033   0.74241805   -1.2298232            1  -0.14990744   -0.3762175  -0.38772575   0.31422094 0.0072201205 -0.0079304911  0.017628298  -0.30305001  -0.29293843   0.71524804        0.075    1.4289537        1e-10 1.5894401e-11    6.2915237    2.4442855    31.520363 -0.0060658099  -0.18233411 0.0045179924   0.20087208  0.013581581   0.71072145 
 2632000    4.0160233     1.283125    2.7328983  -0.23319069   0.85546529    1.0039548   0.75279103   -1.2298232            1  -0.17627667  -0.42418888  -0.42579635    0.3211552 -0.011459072 -0.030775913  -0.04098832  -0.33155893  -0.31958622   0.71865122        0.075    1.4223786        1e-10 1.5970027e-11    6.2617302    2.4474089    31.520363 -0.0031140777  -0.19534955 -0.0040520203   0.21006953  -0.10594295   0.90176639 
 2633000      4.03693    1.2859458    2.7509841   -0.2233159   0.85734592    1.0093991   0.75220576   -1.2298232            1  -0.11513209  -0.38468232  -0.37889851   0.41818456 -0.0086539726  0.011779755 -0.016903334  -0.27029362  -0.25921878   0.71635307        0.075    1.4246131        1e-10 1.5918957e-11    6.2818185    2.4424691    31.520363 -0.0035689423  -0.21008874 0.0030380846   0.18220884 -0.086883077    1.1060847 
 2634000    4.0148265     1.272098    2.7427285  -0.23204468   0.84811348   0.99537235   0.74629011   -1.2298232            1   -0.1880826  -0.41914829  -0.44073603   0.29563652 0.0068663187  0.038085954 -0.003164655  -0.34202388  -0.33016705   0.71585003        0.075    1.4145708        1e-10 1.5907779e-11    6.2862329    2.4432046    31.520363 -0.0031884409  -0.19879838 -0.0042083578    0.1982341  0.021084818 -0.037616391 
 2635000    4.0222873    1.2772264    2.7450609  -0.22988339   0.85153265   0.99932681   0.74933918   -1.2298232            1  -0.17973147  -0.43348459  -0.40112311   0.29541328 0.0035781975 -0.035971724 -0.0057574869   -0.3343017   -0.3223804   0.71258431        0.075    1.4194235        1e-10 1.5835207e-11    6.3150422    2.4428444    31.520363 0.0082718218  -0.18420432 -0.00019951108   0.20453885   0.25242459   0.53809066 
 2636000    4.0272414    1.2829913    2.7442501  -0.22793516   0.85537611    1.0041995    0.7524708   -1.2298232            1  -0.12940763  -0.37812792  -0.38327368   0.37317872 -0.0080914026  0.072279904 -0.016459332  -0.28462383   -0.2727521   0.71714824        0.075    1.4165998        1e-10 1.5936628e-11    6.2748533    2.4472832    31.520363 0.00040066603  -0.20004199 -0.0059646714    0.2024811  -0.92889763 0.0061852948 
 2637000    4.0126974    1.2641217    2.7485757  -0.22948551   0.84279566   0.99210245    0.7395546   -1.2298232            1 -0.061837828  -0.33682184  -0.32751778   0.47882613 0.0076970778  0.072069688 -0.009323774  -0.21438974  -0.20345552   0.71401659        0.075    1.4188934        1e-10 1.5867035e-11    6.3023746    2.4386503    31.520363 0.0060015384  -0.19563571 0.0013928533   0.20557983   0.73586937   -1.1116175 
 2638000    4.0116428    1.2649514    2.7466914  -0.23151781   0.84334886   0.99450425   0.73882859   -1.2298232            1  -0.12880757  -0.39121394  -0.38295959   0.38775083 0.0048979413  0.021217122 -0.084279386  -0.28120972   -0.2707681   0.71262564        0.075    1.4283234        1e-10 1.5836125e-11     6.314676     2.440026    31.520363 -0.006915419  -0.20649853 0.0039669597   0.21295598  -0.19564849    1.3091202 
 2639000    4.0142704    1.2878221    2.7264483  -0.23555511   0.85859686    1.0111756   0.75309309   -1.2298232            1  -0.20143618  -0.44625232  -0.45242764   0.29437142 0.0026035916  0.056087885  0.016543646  -0.35678075  -0.34577646   0.71737872        0.075    1.4299831        1e-10 1.5941749e-11    6.2728373    2.4521416    31.520363 0.0084264491  -0.21576361 7.8662522e-05   0.20397448   -1.7390252   -2.1051928 
 2640000    4.0346709    1.2788974    2.7557735   -0.2292868   0.85264672   0.99657899   0.75312583   -1.2298232            1  -0.19636136  -0.44818917  -0.45609859   0.31520369 -0.016535036  0.053696484 -0.0094541539  -0.35171268  -0.33861805   0.72692356        0.075    1.4141085        1e-10 1.6153857e-11    6.1904721    2.4434069    31.520363   0.00444778  -0.19851797 -0.0029571195   0.19042203  -0.97262311   0.08073262 
 2641000    4.0162185    1.2902996    2.7259189  -0.24090209   0.86024862   0.99990824   0.76368519   -1.2298232            1  -0.24731907  -0.51620835  -0.45453875   0.22878989 -0.015104408  0.073424276 0.0087183971  -0.40484853    -0.390051   0.72110223        0.075    1.4105495        1e-10 1.6024494e-11    6.2404467     2.442662    31.520363 -0.0023864933   -0.1865955 -0.0044325884   0.20821917   -1.3939822   0.51942547 
 2642000    4.0186716    1.2794413    2.7392303  -0.23250833    0.8530093   0.99257585   0.75650957   -1.2298232            1 -0.088114178  -0.34360228  -0.34477734   0.42403708  0.013999183  -0.04859563 -0.042339005  -0.24416348  -0.22979944   0.71350703        0.075    1.4246181        1e-10 1.5855712e-11    6.3068755    2.4457815    31.520363  -0.00599947  -0.18307524 -0.0029307685   0.20557032   0.40090676   0.30536724 
 2643000     4.035964    1.2849123    2.7510517  -0.22643258   0.85665685    1.0044951   0.75443333   -1.2298232            1 0.0097697436  -0.28114927   -0.2769325     0.587391 0.0013870931 -0.072164984 -0.029912357  -0.14585128  -0.13361694   0.71425711        0.075    1.4213973        1e-10 1.587238e-11    6.3002523    2.4340578    31.520363 -0.00026444319  -0.20178931 -0.0059391739   0.19680904    1.8360797    4.3960428 
 2644000    4.0340485    1.2990282    2.7350202   -0.2342007   0.86606803    1.0112476    0.7656853   -1.2298232            1   -0.0288506  -0.30533556  -0.31541064    0.5341944  0.002213496 -0.0027483148 0.0067541572  -0.18679263  -0.17320116   0.71844292        0.075    1.4319112        1e-10 1.5965398e-11    6.2635456    2.4400706    31.520363 -0.0078492693  -0.19237155 0.00059861606   0.20654064   0.63379522    1.2977833 
 2645000    4.0165401    1.2858653    2.7306748  -0.23178257   0.85729225    1.0028543   0.75664399   -1.2298232            1 -0.096250897   -0.3227201  -0.40525423   0.43922164 0.0063129626  0.013508637 -0.036382247  -0.25232793  -0.23940336   0.71932946        0.075    1.4143929        1e-10 1.5985099e-11    6.2558261    2.4476919    31.520363 0.0069630573  -0.19424803 -0.010107497     0.219285  -0.47994639   -0.9564153 
 2646000    4.0333569    1.2898069      2.74355  -0.22717307   0.85992012    1.0037327   0.76048279   -1.2298232            1  -0.21583509  -0.44457695  -0.48084391   0.27791557 0.00032057749  0.075284959 -0.022803076  -0.37270397  -0.35911294   0.71448044        0.075    1.4156909        1e-10 1.5877343e-11     6.298283    2.4480487    31.520363 -0.0011055447  -0.21138268 0.0092896806    0.1940792   -1.2487989   0.14332923 
 2647000    4.0389207    1.3018311    2.7370896  -0.22961374    0.8679367    1.0169654   0.76489048   -1.2298232            1 -0.099390799  -0.38864949  -0.34429651    0.4347736  0.011103402 0.0096996692 -7.026176e-05  -0.25716888  -0.24455755   0.71342742        0.075    1.4219183        1e-10 1.5853943e-11    6.3075793    2.4420054    31.520363 -0.0020727038  -0.18991742 -0.0099945896   0.19085163  -0.74762644    2.1381991 
 2648000    4.0114134    1.2743417    2.7370717  -0.23453831   0.84960942    1.0063795   0.74120433   -1.2298232            1  -0.17890434  -0.41819581  -0.44931653   0.33079933 0.0024683793 -0.015810072 -0.045881194  -0.33179655     -0.32256   0.71621671        0.075     1.418821        1e-10 1.5915927e-11    6.2830145    2.4435297    31.520363 -0.0076428515  -0.20923765 -0.013978111   0.20294406  -0.45468351    -1.817286 
 2649000    4.0259839    1.2829717    2.7430122   -0.2365064   0.85536303    1.0085238   0.74945615   -1.2298232            1  -0.26556638  -0.47733619  -0.49577338   0.17641044 -0.0075488007 -0.025674587 -0.015293363  -0.42016073  -0.40952814   0.71845923        0.075    1.4176025        1e-10 1.5965761e-11    6.2634034    2.4425586    31.520363 -0.0059920711  -0.21066055 0.0048512933   0.18584843   0.64632369  -0.06242418 
 2650000    4.0275313    1.2827445    2.7447868  -0.23092952   0.85521161    1.0041682    0.7522141   -1.2298232            1  -0.10479055  -0.38233911  -0.36624315   0.43421062  0.016086239 -0.013446315  0.018258642   -0.2599538  -0.24813056   0.71524718        0.075    1.4330238        1e-10 1.5894382e-11    6.2915313    2.4490264    31.520363 -0.010571184  -0.20444056 -0.010790834   0.18937372  -0.81721451     2.305333 
 2651000    4.0512478     1.289906    2.7613417  -0.23118111    0.8599862   0.99968385   0.76339643   -1.2298232            1  -0.13399797  -0.38085778  -0.41100528   0.38986916 0.0045889936   0.09189418 -0.026372503  -0.29146786  -0.27669786   0.71389938        0.075    1.4337182        1e-10 1.5864431e-11    6.3034093    2.4477003    31.520363 -0.0039992504  -0.18755827 -0.007807018   0.19966562 -0.014466155  -0.14652665 
 2652000    4.0534319     1.304442    2.7489899  -0.23226671    0.8696774    1.0126285    0.7708371   -1.2298232            1  -0.18298545  -0.41484055  -0.42456997   0.29045416 -0.00038044627 0.0061034493 -0.052061459  -0.34199017  -0.32753314   0.71620261        0.075    1.4255796        1e-10 1.5915614e-11    6.2831382    2.4437803    31.520363 -0.010319784  -0.17591091 -0.0018856971   0.18579832   0.63948939    1.5558601 
 2653000    4.0260496     1.285165    2.7408846   -0.2305094   0.85682536     1.017364   0.74581307   -1.2298232            1 -0.088494041  -0.34896197  -0.34523227   0.42871211 0.0099730212 0.0069162695  0.016547314  -0.24233692  -0.23371769   0.71835222        0.075    1.4268549        1e-10 1.5963383e-11    6.2643364     2.464615    31.520363 -0.0068957669  -0.19117791 -0.00049812389   0.19020846 0.0071039702    1.4821261 
 2654000    4.0304552    1.2933636    2.7370917  -0.22767318   0.86229135    1.0159093   0.75606881   -1.2298232            1  -0.16696644  -0.39809724  -0.40303818    0.3002361 0.00042618804   -0.1224389 -0.025153673  -0.32292483  -0.31198243   0.71350923        0.075    1.4245007        1e-10 1.5855761e-11    6.3068561    2.4500729    31.520363 0.0073116139  -0.20459902 -0.00071530635   0.18145038   0.55500868   -1.8193772 
 2655000    4.0444492    1.2846274    2.7598218  -0.22347384   0.85646691    1.0062003   0.75293198   -1.2298232            1  -0.17438658  -0.40337547  -0.45404654   0.33426227 -0.00093464398  0.049960344  0.025551638  -0.32969791  -0.31801666   0.71468206        0.075    1.4351441        1e-10 1.5881824e-11    6.2965062    2.4506505    31.520363 -0.00053975335  -0.20651303 -0.0022406456   0.21173719 -0.072781119    2.8286067 
 2656000    4.0250135    1.2779629    2.7470506  -0.22732213   0.85202363    1.0089879   0.74348442   -1.2298232            1  -0.07460891  -0.33760207  -0.32682567   0.44060101 0.0091630016 0.0037945266  0.069804459  -0.22797144  -0.21863691   0.72291668        0.075    1.4305276        1e-10 1.6064815e-11    6.2247838    2.4468703    31.520363 -0.0074518133  -0.20304211 -0.012140149   0.23001444  -0.66435599 -0.035679673 
 2657000     4.034389    1.2983485    2.7360405  -0.22990839   0.86561485    1.0178577   0.76034419   -1.2298232            1  -0.18150178  -0.44613109  -0.42759294    0.3292187  0.020295171 -0.091696865 0.00022494582  -0.33834207   -0.3267959   0.71634912        0.075    1.4180205        1e-10 1.5918869e-11    6.2818532    2.4458689    31.520363 0.0023707601  -0.21583387 -0.010769432   0.20439265   0.24695285   -0.3262187 
 2658000      4.04128    1.2755019    2.7657781  -0.22791606   0.85038288   0.99789646   0.74838347   -1.2298232            1 -0.084759203  -0.36234504  -0.35320358   0.46127101 0.0041412657  0.018909678 -0.0013028263  -0.23913229  -0.22720396    0.7140739        0.075    1.3979721        1e-10 1.5868309e-11    6.3018688    2.4378856    31.520363 -0.0057107698  -0.19893976 0.0011137101   0.18433964   -1.6290008    2.6564737 
 2659000    4.0376647     1.292265    2.7453998  -0.22672905   0.86155891    1.0082778   0.76011052   -1.2298232            1  -0.20363512  -0.45862441  -0.42589987   0.27361893 -0.0019962301  -0.06747636   0.01977923   -0.3604272  -0.34756175    0.7150188        0.075    1.3988515        1e-10 1.5889307e-11    6.2935408    2.4447636    31.520363 -0.0087380499  -0.19593578 -0.010446004   0.19175071   0.53846106   -1.3525685 
 2660000    4.0570864    1.3046745    2.7524118  -0.23286139   0.86983242     1.012777   0.77099668   -1.2298232            1  -0.11726121  -0.39808359  -0.33868052   0.38498047 -0.0013142482  0.051979146  0.033938594  -0.27629885  -0.26183009   0.71636257        0.075    1.4193778        1e-10 1.5919168e-11    6.2817353     2.459974    31.520363 -0.002728806  -0.19670479 -0.0011490022   0.19742772   -1.4383044  -0.39402352 
 2661000    4.0445089    1.2919984    2.7525105  -0.22890587   0.86138123    1.0106115    0.7581949   -1.2298232            1  -0.21840895  -0.46061457  -0.45663065   0.26201836 0.0018573029 0.0060246517 -0.042252006   -0.3748059  -0.36266872   0.71512233        0.075    1.4126365        1e-10 1.5891607e-11    6.2926297    2.4468536    31.520363 0.0040360666   -0.1972649 -0.0087799935   0.19464863   -1.4876746    -2.173824 
 2662000    4.0327257    1.2931981    2.7395276  -0.23290422   0.86218105    1.0219928   0.75167227   -1.2298232            1  -0.19857554  -0.45661715   -0.4508996   0.31179013 -0.018666561 0.0096732402 -0.012904353  -0.35362703  -0.34445993   0.71661304        0.075    1.4077351        1e-10 1.5924734e-11    6.2795397    2.4634117    31.520363 -0.0023540121  -0.18046377  0.004676444   0.17594288  -0.24917336    0.9966326 
 2663000    4.0463212    1.2922084    2.7541128  -0.22652396   0.86152117    1.0249463   0.74851187   -1.2298232            1  -0.14093689   -0.4071215  -0.39759303   0.38190386 0.0074096488 -0.092726024 -0.0036337637  -0.29533646  -0.28724287   0.71885727        0.075    1.4109173        1e-10 1.5974606e-11    6.2599353    2.4456318    31.520363 0.0019887704  -0.20349806 -0.0059216837   0.22774997    0.9232075    1.3430428 
 2664000    4.0415252    1.2816219    2.7599033  -0.23142275   0.85446312    1.0150863   0.74339209   -1.2298232            1  -0.14873978  -0.38613235   -0.3897455   0.32965852  0.011970036  0.019437305 -0.0079157384  -0.30208327   -0.2936383   0.71253739        0.075    1.4066529        1e-10 1.5834164e-11    6.3154581    2.4512665    31.520363 -0.010807116  -0.20425124 -0.0024355739   0.17556064    1.1665722    2.4393725 
 2665000    4.0353655    1.2825767    2.7527888  -0.23322532   0.85509972    1.0112223   0.74714323   -1.2298232            1  -0.10435762  -0.37813406  -0.39469061   0.45975181 -0.0075797517 -0.066616506  0.069241463  -0.25847488  -0.24870457   0.70713465        0.075     1.411373        1e-10 1.5714103e-11    6.3637102    2.4489613    31.520363 -0.00064423807  -0.18440283 -0.016270902   0.19450921   0.98248573    1.7861612 
 2666000    4.0354233    1.2798692    2.7555541  -0.23419714   0.85329463    1.0215458   0.73694487   -1.2298232            1   -0.2142705  -0.43733007  -0.48043265   0.27495122  0.001882911 -0.087471869  0.021125527  -0.36628408  -0.36009107   0.71470316        0.075    1.4076181        1e-10 1.5882293e-11    6.2963202    2.4441247    31.520363 0.0028977088  -0.20236615  0.012793683   0.21630153  -0.13019382    2.1892572 
 2667000       4.0539    1.3049333    2.7489667  -0.22248766   0.87000493    1.0280771   0.76070076   -1.2298232            1  -0.16730866  -0.40295941  -0.43661782   0.33765125 -0.010573206    0.0430973 -0.054939248   -0.3242225  -0.31406155   0.71827003        0.075    1.3908008        1e-10 1.5961556e-11    6.2650533    2.4393715    31.520363 -0.010345532  -0.21908932 -0.0074249013   0.21303829    1.6564996    1.5073821 
 2668000    4.0448262    1.3020125    2.7428137  -0.23277909   0.86805765    1.0127743   0.76799547   -1.2298232            1  -0.22363069  -0.45894439  -0.46968588   0.25773821 -0.0026655135  0.036607705 -0.044612451  -0.38204925  -0.36819918   0.71176687        0.075    1.3912283        1e-10 1.5817042e-11    6.3222948    2.4451117    31.520363 -0.0057876269  -0.19035651 -0.00064789347   0.18482673  -0.21940076    2.2304441 
 2669000    4.0384763    1.2813648    2.7571115  -0.23358062   0.85429173    1.0024683   0.75183392   -1.2298232            1  -0.12493909   -0.3726514  -0.41931167    0.4171458 -0.0016405873 -0.020030285 0.0031567289  -0.28002392  -0.26803645   0.70895476        0.075     1.400468        1e-10 1.575455e-11    6.3473726    2.4434028    31.520363 -0.0054340966  -0.21003548 -0.0020499685   0.19018167   0.18777461 -0.019532407 
 2670000    4.0283301    1.2882064    2.7401237  -0.22630305   0.85885309    1.0076491   0.75596705   -1.2298232            1  -0.10938981  -0.37223612  -0.34875672   0.39282341 0.0040700948  0.059176565 -0.012774703   -0.2653272   -0.2532267   0.71501663        0.075    1.4016957        1e-10 1.5889258e-11    6.2935599    2.4586574    31.520363 0.0025011693  -0.19034691 0.0089199072   0.17794833   -1.1536453    1.5373988 
 2671000    4.0297904    1.2873646    2.7424258  -0.22997264   0.85829184    1.0185018   0.74750718   -1.2298232            1  -0.20544313  -0.44565313  -0.44981882   0.27914256 -9.8271065e-06  -0.10335259 0.0087279723  -0.35963546  -0.35082919   0.71924592        0.075     1.411156        1e-10 1.5983243e-11    6.2565527    2.4544198    31.520363 0.0025342025  -0.20451871 0.0027623897   0.21343387    2.0772576    1.1118985 
 2672000    4.0218466    1.2959171    2.7259295   -0.2287438   0.86399381    1.0176018   0.75777829   -1.2298232            1  -0.25017716  -0.50766365  -0.46390593   0.22103812 0.0061035116  0.069707679 -0.047621729  -0.40648817  -0.39543475    0.7138336        0.075    1.3952503        1e-10 1.5862969e-11    6.3039902    2.4493275    31.520363 -0.00077287937  -0.19771845 -0.0035332941   0.22013015   -0.5095243  -0.19264698 
 2673000     4.030617    1.2761458    2.7544712  -0.22313411   0.85081221     1.001042    0.7469332   -1.2298232            1  -0.17554751   -0.4270416  -0.40698976   0.30738883 0.0018329115 -0.097802082   0.02129337  -0.32962144  -0.31844127   0.71619442        0.075    1.3851003        1e-10 1.5915432e-11      6.28321    2.4496065    31.520363 -0.0031386336  -0.17452753 -0.00030415404   0.17749563   0.47618527   -0.5071039 
 2674000    4.0433236    1.2986863    2.7446373  -0.23196047   0.86584006     1.014268    0.7632094   -1.2298232            1 -0.079833429  -0.36574815  -0.36202462   0.48827248 -0.0078664229 -0.032897998  0.059470796  -0.23726474  -0.22461514   0.71465124        0.075    1.3842018        1e-10 1.5881139e-11    6.2967777    2.4381799    31.520363  0.001327454  -0.20428362 -0.0062623757   0.18799106   -1.4261411    3.1942814 
 2675000    4.0442104    1.2821681    2.7620423  -0.21782505   0.85482731    1.0059609   0.75032326   -1.2298232            1  -0.17421726  -0.40285741  -0.45275998   0.33296561 0.0058675245 -0.052993904  0.030740404  -0.32899048  -0.31781317   0.71335247        0.075    1.3935191        1e-10 1.5852277e-11     6.308242    2.4374414    31.520363 0.0054174872  -0.22691053 0.0034696607   0.18434708   0.20901122  -0.21976456 
 2676000    4.0222974    1.2777683    2.7445291  -0.23146795   0.85189391    1.0016162   0.74836618   -1.2298232            1  -0.18976115  -0.43223165  -0.42594067   0.28888887  0.025425065  -0.03498783 -0.019723056  -0.34413067  -0.33273688   0.71153076        0.075    1.3823797        1e-10 1.5811795e-11    6.3243928    2.4449304    31.520363 0.0031013912  -0.18649907  0.001426368   0.18653988     2.375787    3.3649065 
 2677000      4.04228    1.2874937    2.7547862  -0.22928592   0.85837792    1.0090838   0.75417019   -1.2298232            1  -0.17143457    -0.415651  -0.43452449   0.33587177 -0.017503735 -0.048794624  0.060705116  -0.32700132  -0.31547626   0.71401319        0.075    1.3663495        1e-10 1.586696e-11    6.3024046    2.4562963    31.520363 -0.0039872239  -0.19271641 -0.0058385558    0.1900071   -0.2797975    0.1783421 
 2678000    4.0321808      1.26975    2.7624308  -0.21734874   0.84654811    1.0107015   0.73303336   -1.2298232            1  -0.17555133  -0.41806388  -0.45603775   0.34744763 -0.0098110139 0.0020284267 0.00058571548  -0.32675807  -0.31982395   0.71377261        0.075     1.344709        1e-10 1.5861614e-11    6.3045288    2.4418235    31.520363 0.0053662303  -0.20186499 0.0077802036    0.2152743  -0.75432805    1.9038694 
 2679000    4.0255526    1.2806576     2.744895  -0.22301875   0.85382024     1.011669   0.74466909   -1.2298232            1 -0.063197059  -0.33866714  -0.31125572   0.46033169  0.015704867 -0.073953387 -0.0021711451  -0.21680396  -0.20760777   0.71716767        0.075    1.3536368        1e-10 1.5937059e-11    6.2746833    2.4468269    31.520363 -0.0024394811  -0.21540367 0.0036245602   0.19157829  -0.49490184    2.2409402 
 2680000    4.0321673    1.2912282    2.7409391  -0.23259431   0.86086767    1.0118769   0.75645027   -1.2298232            1   -0.1595885  -0.40012275  -0.39083183   0.31218909 0.0044131516 0.0012953133 -0.0067155249  -0.31562557  -0.30402888   0.71566425        0.075    1.3622143        1e-10 1.590365e-11    6.2878647    2.4418027    31.520363 0.0078734569  -0.18347977 0.0048401809   0.18844458   0.54401613     1.680268 
 2681000     4.050727    1.2933267    2.7574003  -0.22429415   0.86226679     1.012406   0.75845154   -1.2298232            1 -0.094070931  -0.38462129  -0.32679249   0.42920099 0.0021919612 -0.037530466 -0.0041218791  -0.25052081  -0.23858685   0.71794125        0.075    1.3893198        1e-10 1.595425e-11    6.2679223    2.4446867    31.520363 0.0028120262  -0.21132079 0.0056980983   0.18902056   0.61481457    2.4017355 
 2682000    4.0448605    1.2886574    2.7562032  -0.22885168   0.85915371    1.0131799   0.75264834   -1.2298232            1   -0.1942346  -0.42848403  -0.43702583   0.28280605 0.0033146367  0.036665772 -0.024201363  -0.34948743  -0.33886099   0.72023491        0.075    1.4111346        1e-10 1.600522e-11    6.2479615    2.4486584    31.520363 -0.0066918467   -0.1961899 -0.0034622758   0.18284078  -0.48124542  0.090439978 
 2683000     4.038451     1.292718    2.7457329  -0.23416062   0.86186098    1.0139051   0.75672747   -1.2298232            1   -0.0399142  -0.32546568  -0.29981018   0.50553326 0.0033192885  0.027044108 0.00094717664  -0.19600845  -0.18464411    0.7164928        0.075    1.4024262        1e-10 1.5922062e-11    6.2805934    2.4433409    31.520363 -0.0098662145   -0.2009942 -2.5549819e-06   0.20963164   -1.3577726    3.4584592 
 2684000    4.0199376    1.2818424    2.7380952  -0.23334337   0.85461015    1.0054939   0.75027892   -1.2298232            1  -0.20591239  -0.46630976  -0.41947752    0.2680501 -0.0055857204  0.041778904  0.020971223  -0.36067647  -0.34944165    0.7160909        0.075    1.4142771        1e-10 1.5913131e-11    6.2841184    2.4498586    31.520363 -0.0012977121  -0.15682068 -0.0060209073   0.20103398   0.49332329  -0.72038078 
 2685000    4.0350236    1.2799288    2.7550948  -0.23211013   0.85333437    1.0043873   0.74888597   -1.2298232            1  -0.18890058  -0.46342066  -0.39997373   0.29669265 -0.015737185 -0.015939874  0.061707306  -0.34337732  -0.33227187   0.71840931        0.075    1.4261706        1e-10 1.5964651e-11    6.2638386    2.4426356    31.520363 0.0050971509   -0.1984117 -0.0053937876   0.18954492   0.52016946   0.71224758 
 2686000    4.0226298      1.28437    2.7382598  -0.22464765   0.85629533    1.0139373   0.74728755   -1.2298232            1  -0.12906179  -0.37624957  -0.40859993   0.39766412 0.0078076294  0.023609473  0.074657447  -0.28320882  -0.27379629   0.71789122        0.075    1.4135145        1e-10 1.5953138e-11    6.2683591     2.441545    31.520363 -0.0076122419  -0.20470849 0.0035189043   0.19147279  -0.12755726   0.49913767 
 2687000    4.0224351    1.2793973    2.7430378    -0.232535   0.85298001    1.0060165   0.74715891   -1.2298232            1  -0.23777743  -0.44333887  -0.48282338   0.21282997  0.019679804  0.043904765 0.00084537363  -0.39189792  -0.38138128   0.71264147        0.075     1.419739        1e-10 1.5836477e-11    6.3145357    2.4515864    31.520363   0.00340989  -0.18149817 -0.012130233   0.22448135   -1.4826224   0.34207328 
 2688000    4.0099059    1.2661333    2.7437726  -0.21974171    0.8441368   0.99787173   0.73783154   -1.2298232            1  -0.13860509  -0.39704194  -0.41329641   0.39452308 -0.0048190916  -0.10903579  0.020849827  -0.29080158  -0.28104632   0.71303825        0.075    1.4159811        1e-10 1.5845294e-11    6.3110219    2.4462387    31.520363 -0.012007158  -0.18879341 -0.0079700222   0.22267321    2.4771402   0.28679927 
 2689000    4.0272929    1.2823903    2.7449026   -0.2256714   0.85497544    1.0036579   0.75216758   -1.2298232            1  -0.20139438  -0.41510743  -0.47290856   0.28383284 -0.0023254737 0.0041318502  0.014969236  -0.35654804  -0.34466156   0.72085835        0.075    1.4116287        1e-10 1.6019074e-11    6.2425579     2.441963    31.520363 -0.0041343291  -0.21524847 -0.0047151268   0.22311351    0.5894002   0.35970054 
 2690000    4.0265303    1.2796416    2.7468887  -0.22165863   0.85314286   0.98086774   0.76483773   -1.2298232            1 -0.050862927  -0.35107359  -0.31467494   0.51315975 0.0050612271 -0.054146112  0.018702694  -0.20863013  -0.19087692   0.72094753        0.075     1.402988        1e-10 1.6021056e-11    6.2417857    2.4440841    31.520363 -0.0010984766  -0.20296417 -0.0077950255   0.19802709  -0.24551245    2.3881975 
 2691000    4.0011591    1.2706592    2.7304999  -0.23452891   0.84715425   0.99892705   0.74220709   -1.2298232            1  -0.23317595   -0.4809045  -0.48594839   0.26732506 -0.013462148 0.0053389555  0.023789086    -0.386275  -0.37576781   0.71213951        0.075    1.4147877        1e-10 1.5825322e-11    6.3189866    2.4325153    31.520363 -0.0043656488  -0.20023924 0.0013460111   0.23453016   -1.4430681   0.53619239 
 2692000    4.0193207    1.2760467     2.743274  -0.23137044   0.85074612   0.99686908   0.74970907   -1.2298232            1  -0.10566862  -0.34940024  -0.38106524   0.41345962 0.0025353628  -0.08315715 0.0030828867  -0.26031514  -0.24796672   0.71288256        0.075    1.3966094        1e-10 1.5841835e-11    6.3124001    2.4451356    31.520363  0.003712593  -0.19071222 -0.005807761    0.2028983 -0.012159454    1.3024879 
 2693000    4.0031424    1.2731034    2.7300389  -0.22808007   0.84878383     0.995643   0.74723713   -1.2298232            1 -0.097469239  -0.35626906  -0.35940517    0.4232665 -0.0049087463 0.0020639529 -0.065392378  -0.25160587  -0.23959232   0.72004704        0.075    1.3995754        1e-10 1.6001045e-11    6.2495917    2.4497372    31.520363 0.0032221002   -0.2107093 0.0062051972   0.23385602    2.7567399    3.1521524 
 2694000    4.0075711    1.2794889    2.7280822  -0.23324909   0.85304106    1.0025478   0.74966264   -1.2298232            1 -0.090144563  -0.31298289  -0.38276918   0.42531838 -0.0081701163 -0.074626546 0.0071871435  -0.24478151  -0.23325327   0.72317428        0.075     1.406764        1e-10 1.607054e-11    6.2225664     2.452343    31.520363 0.0044487526  -0.20219239 0.0055831782   0.19537101  -0.93485537    3.2769165 
 2695000    3.9936309    1.2705138    2.7231172  -0.24082504    0.8470573   0.99797677   0.74270065   -1.2298232            1  -0.20270712  -0.46875675  -0.43287386   0.29350924 0.0094581332 -0.095786165 -0.014062461  -0.35590799  -0.34516334   0.71838691        0.075    1.3968175        1e-10 1.5964154e-11     6.264034    2.4430912    31.520363 -0.0092707048  -0.21194492 -0.0012724032   0.19224125   0.20270879    0.6092273 
 2696000    4.0044061    1.2641785    2.7402277  -0.22521374   0.84283352   0.99566949   0.73715022   -1.2298232            1  -0.28253033  -0.48795518  -0.51980131    0.1601655 -0.010305696  -0.10774369 0.0060646571  -0.43458628   -0.4246572   0.71133739        0.075    1.4145633        1e-10 1.5807498e-11     6.326112    2.4402196    31.520363  0.001976641  -0.19120694  0.012644746   0.18598907   0.46130857   0.22148999 
 2697000    4.0256591     1.271038    2.7546212  -0.22754142   0.84740678    0.9972347   0.74380553   -1.2298232            1  -0.19710812  -0.44441426  -0.42277447   0.27586436 -0.0066835322  0.069375196  0.022835726  -0.35053689  -0.33945841   0.71668266        0.075     1.404693        1e-10 1.5926281e-11    6.2789296    2.4472256    31.520363 0.0026695582  -0.18907872 3.6481935e-05   0.19327085   0.71037651     0.159529 
 2698000    4.0275919    1.2822379     2.745354  -0.22737746   0.85487382    1.0004523   0.75421396   -1.2298232            1   -0.0699137  -0.31269202  -0.36062382   0.46357474 -0.007210727 -0.088583252 -0.039845756  -0.22548947  -0.21272329   0.72132949        0.075    1.3894866        1e-10 1.6029544e-11    6.2384805    2.4511288    31.520363 -0.0012419193  -0.17945829 -0.00080745467   0.20999997   0.22137884    1.6168756 
 2699000    4.0126549    1.2799995    2.7326554  -0.22986539   0.85338149   0.99749139   0.75373776   -1.2298232            1  -0.15796516  -0.40458288  -0.40649337   0.33718076 0.0052350377  -0.11973099  0.014346294  -0.31344271   -0.3003521   0.72022116        0.075    1.4075346        1e-10 1.6004915e-11    6.2480808    2.4356883    31.520363 0.0080920342   -0.2418204 -0.0049119243   0.22196736    1.1113226    1.9676441 
 2700000    4.0286752    1.2794555    2.7492196  -0.23137167   0.85301881    1.0051825   0.74780173   -1.2298232            1  -0.22349225  -0.47565246  -0.44900651   0.25418222  0.010895813  0.013022655  0.039696613  -0.37774534  -0.36697705   0.71569486        0.075    1.4015624        1e-10 1.590433e-11    6.2875958    2.4524084    31.520363 -0.0072539275  -0.18073944 -0.0070179215   0.19166857  -0.11823643  -0.19396618 
 2701000    4.0418215    1.2736823    2.7681392  -0.22712793    0.8491698   0.98393874   0.75598972   -1.2298232            1  -0.15973773  -0.37722265  -0.45758012   0.35558958 -0.017148331  0.090499593 -0.027998068   -0.3156798  -0.30019009   0.71527506        0.075    1.3912463        1e-10 1.5895001e-11     6.291286    2.4497318    31.520363 -0.006959884  -0.17674161 0.0015904612   0.20367627  -0.91866103     1.438486 
 2702000     3.983195    1.2543839     2.728811  -0.23431304   0.83630346   0.98834432   0.73116976   -1.2298232            1  -0.14865693  -0.41126083  -0.38731728   0.35260732  0.010414293  -0.04057713  0.030219633  -0.29947926  -0.28973817   0.71841427        0.075    1.4156993        1e-10 1.5964762e-11    6.2637954    2.4489166    31.520363  0.004198395  -0.20094971 0.0016612841   0.19170465   0.83047645    1.0431881 
 2703000    4.0123486    1.2775561    2.7347924   -0.2324107   0.85175248   0.99608545   0.75195422   -1.2298232            1  -0.12714518  -0.38037791  -0.37792375   0.37686612  0.010316472 -0.020059067   0.01179762  -0.28225483  -0.26933142   0.71971722        0.075    1.4201185        1e-10 1.5993716e-11    6.2524556     2.448019    31.520363 -0.010099433  -0.19639748 0.0076521774   0.23475278  -0.42069708   0.80325775 
 2704000    3.9980819    1.2664605    2.7316213  -0.23423131   0.84435498   0.98960887   0.74391872   -1.2298232            1   -0.1616283  -0.41677212   -0.4085379   0.34042513   0.01659374  0.032288653 -0.011246935  -0.31508042  -0.30289004   0.71283215        0.075    1.4200139        1e-10 1.5840715e-11    6.3128465    2.4309389    31.520363 0.00078461132  -0.20725561 0.0023260138   0.23071924   -2.3508882    2.1821414 
 2705000    4.0259295    1.2781433    2.7477863  -0.22229553   0.85214392   0.99360364   0.75433403   -1.2298232            1  -0.13613933  -0.35702107  -0.37946243   0.32806551  0.016559103  0.021294376  0.049590321  -0.29173987  -0.27797131   0.71262345        0.075    1.4227674        1e-10 1.5836077e-11    6.3146954    2.4417649    31.520363 0.0050155946  -0.20276295 0.0051256112   0.21244915    1.2305169  -0.81270411 
 2706000    4.0203405    1.2799552    2.7403853  -0.22827837   0.85335193    1.0018255   0.75068851   -1.2298232            1  -0.22007596  -0.47400342  -0.46133162   0.27510715  0.012355953   0.11928315 -0.0093497048  -0.37492452  -0.36308156   0.71706511        0.075     1.419609        1e-10 1.593478e-11    6.2755807    2.4429191    31.520363 0.0021305751  -0.22043025 0.0036128711   0.21413112 -0.087283088    1.2672688 
 2707000    4.0350928    1.2882237    2.7468692  -0.22444459   0.85886456    1.0127674   0.75244451   -1.2298232            1  -0.24753278  -0.47060073  -0.46647659   0.19447898 -0.0069271067   0.12039609 -0.057134343  -0.40274356  -0.39210029   0.71621256        0.075    1.4200234        1e-10 1.5915835e-11    6.2830509    2.4484104    31.520363 0.0041599319  -0.19736805 -0.023473462   0.21446952   -1.3459114    1.8050494 
 2708000    4.0264782    1.2703215    2.7561567  -0.22705845   0.84692911   0.99525302    0.7443686   -1.2298232            1 -0.098089741  -0.35824087  -0.35577091   0.41974256 -0.010733572  0.059671703 -0.0075434666  -0.25163466  -0.24015716   0.71513809        0.075    1.4170782        1e-10 1.5891958e-11     6.292491     2.456781    31.520363  0.002533278  -0.20259457 -0.0070074763   0.20156963   0.36314065    1.1125435 
 2709000    4.0100922    1.2628518    2.7472403  -0.22824034   0.84194904    0.9865747   0.74194729   -1.2298232            1  -0.19104296  -0.41558607  -0.45889127   0.30134846 -0.0041667163  0.093679939  0.056765792  -0.34408842  -0.33187159    0.7183753        0.075     1.429129        1e-10 1.5963896e-11    6.2641352    2.4530399    31.520363 0.0014512564  -0.20503884 9.2907579e-05   0.21308065 -0.025339003   -2.2553293 
 2710000    4.0237854    1.2868511    2.7369343  -0.23147758    0.8579495     1.009623   0.75307213   -1.2298232            1  -0.19004904  -0.43249298  -0.41159579   0.27394165 0.0021847421 0.0047416075 0.0017396217  -0.34538928  -0.33416769   0.72335698        0.075    1.4088406        1e-10  1.60746e-11    6.2209948    2.4514453    31.520363 0.0022540939  -0.18817732 0.0071187464   0.21231456   0.54506889  -0.78176356 
 2711000     4.024608    1.2802224    2.7443856  -0.23207918   0.85353006   0.99907185   0.75289545   -1.2298232            1 -0.071436591    -0.343807  -0.35308404   0.48258127  0.022012265 0.0055681152 -0.023441067  -0.22674039  -0.21404913   0.72004798        0.075    1.4148597        1e-10 1.6001066e-11    6.2495835    2.4470113    31.520363 0.0079759465  -0.18626932 0.0031174755   0.20355042   -0.3256665     2.529789 
 2712000    4.0382133    1.2781032    2.7601102  -0.23103347   0.85211717    1.0042839   0.74689789   -1.2298232            1  -0.17269671  -0.41235345  -0.41663053   0.31089385 0.0057893002 -0.023712336  0.052383973  -0.32676336  -0.31605324    0.7180348        0.075    1.4278828        1e-10 1.5956329e-11    6.2671058    2.4544587    31.520363 -0.00016707633  -0.20293245 -0.0032605888   0.20711535   -0.6636653   0.93403783 
 2713000    4.0115112    1.2611189    2.7503923  -0.22603371   0.84079368   0.98771029   0.73920646   -1.2298232            1  -0.12705079  -0.37374468  -0.38546239   0.37805469 -0.0094765473 -0.014747903 -0.050905111  -0.27953089  -0.26804152   0.71430266        0.075    1.4170472        1e-10 1.5873392e-11    6.2998505    2.4393489    31.520363 -0.0011887002  -0.20728775 -0.0026017741   0.19541239    0.4724146   0.35320997 
 2714000    4.0168775    1.2730311    2.7438464   -0.2283712    0.8487356   0.99772004   0.74571819   -1.2298232            1  -0.19478078  -0.44105032  -0.42861096   0.28531895 -0.0052751748 -0.010743434 -0.0081943817  -0.34860408  -0.33720035   0.71751052        0.075    1.4049591        1e-10 1.5944678e-11     6.271685    2.4417423    31.520363 -0.00020529607  -0.18831155 -0.00084859347   0.18851632   0.83988426    1.5701515 
 2715000    4.0213253    1.2818248    2.7395005  -0.24059825   0.85459839    1.0005899    0.7536527   -1.2298232            1  -0.18151601  -0.42944521  -0.43646369   0.32136088 -0.0025645982  0.023036397 -0.018779336  -0.33697601  -0.32434523   0.72557029        0.075    1.4065133        1e-10 1.6123784e-11     6.202018    2.4611151    31.520363 0.0013926291  -0.19791162 -0.0025348229   0.18147088   -0.2347317   0.25615785 
 2716000    4.0243179    1.2876624    2.7366556  -0.23029701   0.85849035    1.0068742   0.75588946   -1.2298232            1  -0.12461559  -0.40385154  -0.37652077   0.40652553   0.00389557 -0.053925093 -0.004710041  -0.28053698  -0.26834188   0.72171005        0.075    1.3916542        1e-10 1.6038001e-11     6.235191    2.4532111    31.520363 0.0054172206  -0.20823901 0.0014456562   0.19103831   0.64503036    3.3015787 
 2717000    4.0165126    1.2750963    2.7414163  -0.23392958    0.8501125   0.99427633   0.75043113   -1.2298232            1  -0.25217362  -0.47449963  -0.48993808   0.20791685   0.01061224 -0.028983152 -0.020073656  -0.40696909  -0.39410162   0.71327261        0.075    1.4058781        1e-10 1.5850502e-11    6.3089483    2.4413692    31.520363 -0.00022510278  -0.18683002 -0.00083094332   0.21359371   0.88808756    1.2387423 
 2718000    4.0065088    1.2844907    2.7220182  -0.23472102   0.85637575    1.0068888   0.75230125   -1.2298232            1  -0.12303882  -0.39107304  -0.36877238   0.39072896 0.0021764324 -0.019811717  0.040017192  -0.27822005  -0.26676719    0.7158042        0.075    1.4098453        1e-10 1.590676e-11    6.2866354    2.4423892    31.520363 -0.0065895184  -0.21319628 -0.0087549333   0.16398742   0.61914686    2.3926981 
 2719000    4.0279203    1.2796601    2.7482602  -0.23590882    0.8531552    1.0023261   0.75000918   -1.2298232            1  -0.17640281  -0.45471521   -0.4207506   0.34625738 -0.0064805064 -0.064797501  -0.01781775  -0.33111124  -0.31947987   0.71751711        0.075     1.406303        1e-10 1.5944825e-11    6.2716275    2.4441416    31.520363 -0.0070752153  -0.19233345 -0.0019368316   0.19742905   -1.0932511    2.0448663 
 2720000     4.016146    1.2751227    2.7410233  -0.23007859    0.8501301   0.99884389    0.7473001   -1.2298232            1  -0.18344708  -0.43474991  -0.44306811   0.32747678 0.0018639516  0.055492363  0.034017598  -0.33759669  -0.32602708   0.71716624        0.075    1.4233783        1e-10 1.5937028e-11    6.2746958    2.4532051    31.520363 -0.005334874  -0.19932861 -0.0067846179   0.20238915   -1.5074173   0.80844285 
 2721000    4.0243008    1.2832393    2.7410615    -0.236262   0.85554149    1.0195628   0.74211899   -1.2298232            1  -0.14850436  -0.40368888  -0.40482261   0.36299842 0.0058865079  0.052878093  -0.02971028  -0.30158524  -0.29404188    0.7134993        0.075    1.4186987        1e-10 1.585554e-11    6.3069438    2.4423418    31.520363 -0.0034747959  -0.18460512 0.0017720576   0.19548124     1.160492  -0.86015862 
 2722000    4.0178303    1.2859701    2.7318602  -0.23380845    0.8573621    1.0027953   0.75680302   -1.2298232            1  -0.10818062  -0.32699626  -0.40767721    0.4101316 0.00022714787  0.017569562 -0.025136447  -0.26429046  -0.25132466   0.71536034        0.075    1.4083672        1e-10 1.5896896e-11    6.2905361    2.4443827    31.520363 -0.00065596445  -0.22075036 -0.0078160682   0.18879567  -0.85233762  0.080635982 
 2723000    4.0360865    1.2855484    2.7505382  -0.23493549   0.85708093     1.002901   0.75625406   -1.2298232            1  -0.14178741  -0.39770131   -0.4097374   0.38207648  0.019130698 -0.044417237 -0.031977222  -0.29778401  -0.28494655   0.71836374        0.075    1.4100769        1e-10 1.5963639e-11     6.264236    2.4450818    31.520363 0.0048454052  -0.20972021 -0.00063758866   0.20044872    1.1789347   0.52187697 
 2724000    4.0061301    1.2714149    2.7347152  -0.23132149   0.84765806   0.99648114    0.7447522   -1.2298232            1  -0.13251639  -0.38591713  -0.40677899   0.39514693  0.028399109 -0.0085879858 -0.033634577  -0.28614044  -0.27475912   0.71665625        0.075    1.4108686        1e-10 1.5925695e-11     6.279161    2.4398919    31.520363 0.0063192546  -0.21382284 -0.0046114088   0.19941909  -0.03951364    1.0805969 
 2725000    4.0343199    1.2851004    2.7492195  -0.23426482   0.85678225    1.0167436   0.74616944   -1.2298232            1  -0.20201315  -0.43882943  -0.47460098   0.30739095 -0.0045555372 -0.033885315  0.018504811  -0.35592954  -0.34714825   0.72124499        0.075    1.4053548        1e-10 1.6027666e-11    6.2392115    2.4478094    31.520363 -0.0049263535  -0.19104209 -0.0061743964   0.19361917  -0.33899001   0.59748209 
 2726000    4.0226831    1.2779552    2.7447279  -0.22691104    0.8520185   0.99956309   0.74999779   -1.2298232            1  -0.12901941  -0.39242808  -0.38008782   0.38545767 -0.0098762082  0.078380798  0.010877004  -0.28372549  -0.27170207   0.71956476        0.075    1.4010507        1e-10 1.5990328e-11    6.2537804    2.4423132    31.520363 0.0039622877  -0.18761733 -0.003119484   0.20855536  -0.37556387    0.6752821 
 2727000    4.0276953    1.2771745    2.7505208  -0.22350252   0.85149804    1.0077541   0.74344883   -1.2298232            1  -0.13690681  -0.39158206   -0.3922551   0.37311672 0.00059011937  0.019955145  0.049947491  -0.29026201  -0.28075869   0.71848193        0.075    1.3987167        1e-10 1.5966265e-11    6.2632055    2.4547522    31.520363 0.0035152965   -0.1905928 -0.0005779887   0.19471167  -0.46207784   0.46764549 
 2728000    4.0165319    1.2740636    2.7424682  -0.22607714   0.84942402   0.99787268   0.74677742   -1.2298232            1  -0.23815965  -0.48727927  -0.47347795   0.24627828  0.014416825  0.021857149   0.03210092  -0.39220145  -0.38060101   0.71748465        0.075    1.3942018        1e-10 1.5944103e-11    6.2719112    2.4517358    31.520363 0.0045288957  -0.17299165  0.001635081   0.18418686   0.14272001  -0.58231114 
 2729000    4.0408921    1.2870203    2.7538718  -0.22766094    0.8580623    1.0044131   0.75686826   -1.2298232            1 -0.035197414  -0.29985974  -0.31111977   0.50538727  -0.00397459 -0.022626818  0.029204233  -0.19132071  -0.17857239   0.71110801        0.075    1.3851803        1e-10  1.58024e-11    6.3281526    2.4457413    31.520363 0.0010653327  -0.18821706 -0.00047753359   0.20485171   -0.7965095    1.6837539 
 2730000    4.0397385    1.2973837    2.7423547  -0.23013151   0.86497162    1.0097112   0.76489326   -1.2298232            1  -0.12425031  -0.38025575  -0.37281937   0.38032421  0.020238298  -0.02173935  0.011450905  -0.28202896  -0.26838156   0.71523717        0.075    1.3920614        1e-10 1.5894159e-11    6.2916193    2.4564779    31.520363 -0.00042628871  -0.22438145 0.0020534334   0.20554678    1.0108778 -0.044755268 
 2731000    4.0247867     1.284651    2.7401357  -0.23067295   0.85648262    1.0097784   0.75048244   -1.2298232            1   -0.2054867  -0.46060213  -0.44977863   0.29392067 -0.0031574217 -0.0074221069 -0.038739142  -0.36029275  -0.34962754   0.71950277        0.075    1.4182416        1e-10 1.598895e-11    6.2543192    2.4548486    31.520363 0.0035842294  -0.21867982 0.0017256786   0.21553713     1.584324  -0.23266546 
 2732000    4.0286506    1.2744015    2.7542491  -0.22508929   0.84964925    1.0092516    0.7392842   -1.2298232            1  -0.20442134   -0.4485747  -0.43113887   0.26644954 0.0067593597 -0.074534313 -0.011218299  -0.35691747  -0.34848698   0.71576667        0.075    1.4073235        1e-10 1.5905926e-11     6.286965    2.4510679    31.520363 -0.0016151805  -0.18521071 -0.0017917445   0.20510694   0.76664623   -1.1418375 
 2733000    4.0423706    1.2914322    2.7509385  -0.23410273   0.86100368    1.0097727    0.7581365   -1.2298232            1  -0.20107905  -0.44272816  -0.46569813   0.30518916 -0.00061549387 -0.025186767  0.011643628  -0.35746394  -0.34521908   0.71298098        0.075    1.4096738        1e-10 1.5844022e-11    6.3115288    2.4434274    31.520363 -0.0052899795  -0.18544005 -0.0024730696   0.19166149   0.57329179   -1.0736369 
 2734000    4.0366293    1.2735619    2.7630674  -0.22697326   0.84908949    1.0034294   0.74236604   -1.2298232            1  -0.16709329   -0.4206062  -0.43996648   0.35929282 -0.0061347639  0.094767033 0.0086637084  -0.32022513  -0.31032784   0.71868828        0.075    1.4244367        1e-10 1.5970851e-11    6.2614072    2.4527898    31.520363 0.0042945968  -0.20523581 -0.0066880325   0.20919253  -0.19128501   0.86395125 
 2735000    4.0431125    1.3013533    2.7417592  -0.23446146   0.86761816    1.0271869    0.7572781   -1.2298232            1  -0.17961418  -0.42271246    -0.405762   0.28963193  0.011630823  0.044517123  0.050842625  -0.33582201     -0.32624    0.7176132        0.075    1.4317236        1e-10 1.594696e-11    6.2707876    2.4483303    31.520363 -0.005605361  -0.20202514 0.0059513578    0.1819128   -1.0805799  -0.44162241 
 2736000     4.061488    1.2983021    2.7631859  -0.23243393   0.86558388    1.0244629   0.75572095   -1.2298232            1  -0.18719124   -0.4513472  -0.42949086   0.31926435 -0.005584879   0.02667734 0.0065425949  -0.34307786  -0.33342821   0.71575161        0.075    1.4044359        1e-10 1.5905591e-11    6.2870972    2.4451918    31.520363 0.0043773045  -0.19701373 0.00025188473   0.21857487   0.12639279  -0.22975804 
 2737000    4.0421589    1.2884511    2.7537078  -0.23284501   0.85901619    1.0183507    0.7488374   -1.2298232            1  -0.23543349  -0.46282772  -0.46357641   0.22010365 0.0092135935 -0.078489393  0.038601513  -0.38990022  -0.38079799   0.71172624        0.075    1.4137579        1e-10 1.5816139e-11    6.3226557     2.446321    31.520363 0.0087621195  -0.17797671 -0.0048552768   0.20165681   0.47911518    -0.562207 
 2738000    4.0482676    1.2872345    2.7610331  -0.22493567   0.85820511    1.0167833   0.74854961   -1.2298232            1  -0.15736797  -0.41211073  -0.38429562   0.32430244 -0.0086884562 -0.054546186  0.053417782  -0.31177533  -0.30250873   0.71048804        0.075    1.4181911        1e-10 1.5788623e-11    6.3336745      2.44085    31.520363 0.0014588209  -0.19183205 -0.0024568346   0.18612814 -0.0085693886  -0.85089213 
 2739000    4.0379809    1.2882179     2.749763   -0.2303058   0.85886069    1.0131343   0.75218409   -1.2298232            1 -0.091622363  -0.37409923  -0.37235089   0.47158303  0.012643551 -0.014269955  0.013759939  -0.24677943  -0.23624224    0.7173992        0.075    1.4158104        1e-10 1.5942204e-11    6.2726583    2.4422117    31.520363 -0.00052575125  -0.21738786 0.0068760293   0.19363334  -0.24352673    2.1806986 
 2740000    4.0427451     1.301542    2.7412031  -0.23165265   0.86774397    1.0352766    0.7518928   -1.2298232            1  -0.13113918  -0.41982778  -0.35941921   0.38582946 -0.0065832749 -0.017751248 -0.018045988  -0.28623615  -0.27891976   0.71845801        0.075    1.4213547        1e-10 1.5965734e-11     6.263414    2.4486199    31.520363 0.0034048732  -0.22000497  0.008039437   0.20480435  -0.33263193   0.77525524 
 2741000    4.0579342    1.2947308    2.7632034  -0.22486704    0.8632029    1.0133653   0.75937169   -1.2298232            1  -0.11354418  -0.38381164  -0.37009312   0.41327222 -0.0042486751 -0.015578316  0.010981453  -0.27018387  -0.25819704   0.71479602        0.075    1.4275583        1e-10 1.5884356e-11    6.2955023    2.4539168    31.520363 0.0071456954  -0.19619132 -0.011766273   0.19873466    1.0262591   0.81183357 
 2742000    4.0696076    1.3023532    2.7672544  -0.22769079   0.86828478    1.0263074   0.75901468   -1.2298232            1   -0.1989418  -0.44728494  -0.45089915   0.30135869 -0.0042155051 -0.0081393163  0.014598243  -0.35550785  -0.34544208   0.70819831        0.075    1.4295394        1e-10 1.573774e-11    6.3541524    2.4413938    31.520363 0.0016188173  -0.20612155 -0.0010910932   0.17997501    1.3499351   -1.1276457 
 2743000    4.0709012    1.3103338    2.7605674  -0.22987692   0.87360546    1.0300566   0.76542337   -1.2298232            1   -0.1856097  -0.43980662  -0.42833265   0.31131017  0.015978459 -0.045928665 -0.00047153842   -0.3434977  -0.33264516   0.71064863        0.075    1.4233738        1e-10 1.5792192e-11    6.3322433    2.4372143    31.520363 -0.0077277824  -0.19641112  0.004184513   0.20516857  -0.36550094  -0.88861867 
 2744000    4.0656988    1.2962127    2.7694861  -0.22960977   0.86419092    1.0234391   0.75407231   -1.2298232            1  -0.15400637  -0.40792858  -0.41900311   0.36491258 -0.003542134 -0.035926252 -0.031832278  -0.30955293  -0.30009722   0.71839989        0.075    1.4031429        1e-10 1.5964442e-11    6.2639208     2.451027    31.520363 0.0018201335  -0.19933245 -0.0072169579   0.20117506   0.46556525    0.3348588 
 2745000    4.0494612    1.3083234    2.7411378  -0.22502662   0.87226513    1.0310305   0.76248148   -1.2298232            1  -0.17376681  -0.40027337  -0.42886727   0.30784021  -0.02821879 -0.083396516 -0.029601709  -0.33104797  -0.32094127   0.71585479        0.075    1.4098739        1e-10 1.5907884e-11    6.2861911    2.4504404    31.520363 -0.0029250447  -0.18118337 -0.0047712431    0.1988556  -0.77224337   0.51629612 
 2746000    4.0331348    1.2805423    2.7525925  -0.22818741   0.85374336     1.015515   0.74187753   -1.2298232            1  -0.13471893  -0.39547992  -0.39117873   0.38250187 -0.013281038  0.027268803  0.024705551     -0.28775  -0.27967864   0.70896901        0.075    1.4101624        1e-10 1.5754867e-11     6.347245    2.4345493    31.520363 -0.0050143818  -0.16924137 0.0031150278   0.20594526  -0.22001317   0.49035824 
 2747000    4.0498102    1.2877582     2.762052  -0.22462784   0.85855426     1.014341    0.7508305   -1.2298232            1  -0.26736581  -0.47597863  -0.53465845   0.20853967  0.016993676 -0.069796355 -0.0013529739  -0.42224366  -0.41215794   0.71074979        0.075     1.419429        1e-10 1.579444e-11     6.331342    2.4350315    31.520363 -0.0088401502  -0.18787963 0.0069928006   0.21274049   0.32175712  -0.17357725 
 2748000    4.0446001    1.2927369    2.7518632  -0.22611947   0.86187358     1.018734   0.75340712   -1.2298232            1  -0.24766875  -0.49180182  -0.46883164    0.2176272  0.013526042 -0.015482223 -0.032424701   -0.4030781  -0.39308797   0.71682129        0.075    1.4318981        1e-10 1.5929362e-11    6.2777153    2.4556661    31.520363 0.0072395553  -0.21341702 -0.0078118672   0.22149467  -0.24245141    1.7872197 
 2749000    4.0340656    1.2835498    2.7505158  -0.23804459   0.85574848    1.0170051   0.74423922   -1.2298232            1  -0.13715583   -0.4031284  -0.38991642   0.38157733 -0.0062162195 -0.059567582 -0.0070202948  -0.29067406  -0.28232826    0.7183955        0.075    1.4339118        1e-10 1.5964344e-11    6.2639591    2.4557401    31.520363 0.0048172652  -0.17941351 -0.0021059729   0.19512308     1.905132    1.1308617 
 2750000    4.0496537    1.2961781    2.7534756  -0.22932574   0.86416781    1.0075082   0.76505762   -1.2298232            1    -0.120772  -0.37243861  -0.36825906   0.37838166 0.0019341687 -0.037934037  0.033048899  -0.27858456  -0.26458879   0.71066068        0.075    1.4317417        1e-10 1.579246e-11    6.3321359    2.4417294    31.520363 -0.011076944  -0.19683061 0.0051673998   0.18799236   0.49935531     0.617588 
 2751000    4.0214478    1.2793454    2.7421024   -0.2317791   0.85294537    1.0168926   0.73957395   -1.2298232            1  -0.20786592   -0.4847351  -0.44708817    0.3082255 0.00020913184  0.058469849 -0.030974717  -0.36042182  -0.35302228   0.71101575        0.075    1.4276784        1e-10 1.580035e-11    6.3289737    2.4377659    31.520363 -0.0057345814  -0.18702358 -0.0026162129   0.19908461   -1.2018247   0.29623969 
 2752000    4.0329732    1.2872229    2.7457502  -0.22974188   0.85819738    1.0118666   0.75193897   -1.2298232            1 -0.077251136  -0.35570002   -0.3390138   0.46296041  0.011673074 -0.024615068 0.0022255319  -0.23235763  -0.22169005   0.71980657        0.075    1.4297753        1e-10 1.5995702e-11    6.2516795    2.4526081    31.520363 -0.0046168534  -0.18959883 -0.0081789882    0.2236762   -1.4301487    2.9697752 
 2753000    4.0197103    1.2901603      2.72955  -0.23594024   0.86015575    1.0135104   0.75411516   -1.2298232            1  -0.10885591  -0.38069576  -0.36407525    0.4182033 0.0032264493  0.040893954 -0.041964829   -0.2644113  -0.25352948   0.71800544        0.075    1.4231112        1e-10 1.5955677e-11     6.267362    2.4534645    31.520363 -0.0014722863  -0.21141657 0.0004203427   0.19991512   0.18165573    1.7175729 
 2754000    4.0048247    1.2665633    2.7382614  -0.22718214   0.84442349   0.99614802   0.73950948   -1.2298232            1  -0.11099573  -0.36928728  -0.38152939   0.41782949  0.015005226  0.018843961 -0.0078088768  -0.26353833   -0.2531909   0.71156361        0.075    1.4073299        1e-10 1.5812525e-11    6.3241008    2.4502629    31.520363  -0.00746729  -0.22889883 -0.0025683129   0.21915494    1.1405316    1.5697845 
 2755000    4.0127632    1.2765305    2.7362327  -0.23953615   0.85106869    1.0040613   0.74527782   -1.2298232            1  -0.16930334  -0.43563339  -0.39629818   0.32402156 -0.0096981629   0.02832769 -0.0070974691   -0.3230358  -0.31262808   0.71202304        0.075    1.4028119        1e-10 1.5822734e-11    6.3200202    2.4495047    31.520363 -0.013488403  -0.19731888 0.0092251599   0.21276524  -0.18504008   -1.1409499 
 2756000    4.0163879    1.2692925    2.7470953   -0.2364989   0.84624309    1.0055138   0.73610718   -1.2298232            1  -0.14551229  -0.40379456   -0.4130331   0.38029078  0.011097302 -0.008147858 -0.012514959  -0.29735308  -0.28904439   0.72073005        0.075    1.3869326        1e-10 1.6016223e-11    6.2436691    2.4521939    31.520363 -0.0051009923  -0.19609542 0.0027624937   0.23956321  -0.50522624  -0.15810535 
 2757000    4.0274622    1.2811396    2.7463226  -0.23369204   0.85414158   0.99942217   0.75368778   -1.2298232            1  -0.17615619  -0.46024021  -0.41720173   0.34897338 -0.0098561962 -0.0073663993 -0.0064504649  -0.33162342  -0.31881873   0.72268848        0.075    1.3895762        1e-10 1.6059744e-11    6.2267493    2.4445332    31.520363 -0.018918883  -0.21794495 -0.0073164925   0.22919916    1.3964576    1.4891271 
 2758000    4.0089552    1.2790418    2.7299133  -0.23461738     0.852743   0.99571476   0.75388681   -1.2298232            1  -0.13549378  -0.38731718  -0.36587968   0.34671552  0.010691379  -0.11344546  0.018565018  -0.29100207  -0.27762711   0.71333654        0.075    1.3838417        1e-10 1.5851923e-11    6.3083828    2.4355429    31.520363 -0.0063524409  -0.18026061 -0.004709812   0.17787094    2.3546478    -1.675081 
 2759000    4.0087707    1.2813474    2.7274233  -0.22922109   0.85428013    0.9954174   0.75669357   -1.2298232            1 -0.098157411  -0.36690993   -0.3634359    0.4358736 -0.0069273372 -0.010291142  0.057961673  -0.25424467  -0.24024829   0.71263849        0.075    1.4117236        1e-10 1.5836411e-11    6.3145621    2.4410284    31.520363 0.0087314065  -0.19576439 0.00099599752   0.19679584   0.81453409    1.7323112 
 2760000    4.0414116    1.2899257    2.7514859  -0.23169424   0.85999933   0.99616051   0.76585684   -1.2298232            1  -0.11003622  -0.37832789  -0.37336478   0.42158402 0.00075146225  -0.05647632 0.0066236967  -0.26801363  -0.25223318   0.72326981        0.075    1.4179959        1e-10 1.6072662e-11    6.2217446    2.4556102    31.520363 0.0068117442   -0.1918103 0.0069166332   0.19883548  -0.37576188   -1.3238171 
 2761000    4.0303536    1.2807569    2.7495966   -0.2254192   0.85388646    1.0094052   0.74634775   -1.2298232            1  -0.14658934  -0.40071666  -0.39629441   0.35724304 -0.019918545 -0.0042941276  0.019056293  -0.30054251  -0.29067691   0.72058343        0.075    1.4247527        1e-10 1.6012965e-11    6.2449396    2.4409813    31.520363 -0.0067686845  -0.18583011 -0.0021865544   0.22505573   0.24237056   0.71973785 
 2762000    4.0217676    1.2664781    2.7552895  -0.22404177    0.8443667   0.99457502   0.74050192   -1.2298232            1  -0.17611187  -0.42567458  -0.41664942   0.31398837 0.0072135537 -0.027828944 -0.050552577  -0.32885919  -0.31808251   0.71416754        0.075    1.4131501        1e-10 1.587039e-11    6.3010424     2.443518    31.520363 0.00010465082  -0.19834075 -0.00020185286   0.20698075   0.28032298    1.3527927 
 2763000    4.0285358    1.2855493    2.7429865  -0.22787219   0.85708155    1.0128235   0.74938868   -1.2298232            1  -0.11319657  -0.35966277  -0.38793807   0.40801114 -0.013764696 -0.057468759  0.010167947  -0.26777701  -0.25777208   0.71959715        0.075    1.4194486        1e-10 1.5991048e-11    6.2534989    2.4530043    31.520363 0.0038292435  -0.21800208 -0.0066376722   0.17656282   0.85619087   0.94738618 
 2764000    4.0094912    1.2712725    2.7382188  -0.22858951   0.84756311    1.0023881   0.74050387   -1.2298232            1  -0.10407252  -0.36945717  -0.34518184   0.40242144 -0.0031467641  0.055451752 -0.029584056  -0.25682024  -0.24715844   0.71949233        0.075    1.3955858        1e-10 1.5988718e-11      6.25441    2.4441204    31.520363 -0.0056355388  -0.19589694 0.00092304054     0.205313  -0.38288223   0.91687107 
 2765000    4.0108184    1.2602987    2.7505198  -0.23187844   0.84024684   0.98832454   0.73785607   -1.2298232            1  -0.21294488  -0.46329493  -0.46046804   0.28492834 -0.0002415656 0.0071749876 0.0099361986  -0.36514642  -0.35402329   0.71736937        0.075    1.3905337        1e-10 1.5941542e-11    6.2729191    2.4642018    31.520363 0.00014884476  -0.20347118 0.00052423059   0.19766662  -0.40312753    0.5406965 
 2766000    4.0196975    1.2637951    2.7559024  -0.22427709   0.84257792   0.99316644   0.73844986   -1.2298232            1  -0.13209352   -0.3902971  -0.40477297    0.3987895 -0.012208383  0.083482606 -0.014525652  -0.28441755  -0.27386309   0.71246963        0.075      1.40198        1e-10 1.5832658e-11    6.3160587    2.4480031    31.520363  0.002832486  -0.20446043 -0.0010830331   0.20892253    2.0223279    1.3443661 
 2767000    4.0243106    1.2805123    2.7437983  -0.23030127   0.85372338    1.0063557   0.74818205   -1.2298232            1  -0.10887094  -0.37408411  -0.38335694   0.43082824 -0.0029829068  0.021000372  0.016539042  -0.26320248  -0.25252321   0.71480879        0.075     1.408259        1e-10 1.588464e-11    6.2953899    2.4394937    31.520363 0.0013071817  -0.18534923 -0.0074112748   0.21384753   -1.2205474    2.7738823 
 2768000     4.033315    1.2831347    2.7501803  -0.23211659   0.85547172    1.0045821   0.75236777   -1.2298232            1  -0.20188356  -0.46720727  -0.44801734   0.30957393   0.01177535 0.0036382395  0.067183132  -0.35707851  -0.34528266   0.72023689        0.075    1.4066038        1e-10 1.6005264e-11    6.2479444    2.4521525    31.520363 0.0033299314  -0.19950534 -0.0042683482   0.18290874 -0.040761878   0.40150678 
 2769000    4.0149095     1.272597    2.7423125  -0.22780672   0.84844617   0.99996342   0.74367599   -1.2298232            1  -0.22069957  -0.44637568  -0.47363943    0.2579164 0.0027902208    0.1530549 -0.044560984  -0.37410162  -0.36343937    0.7202737        0.075    1.4022067        1e-10 1.6006082e-11    6.2476251    2.4489131    31.520363 -0.0029758819  -0.20492007 0.0085594036   0.21959794    -2.560911    2.0723958 
 2770000    4.0280228     1.287162    2.7408608  -0.23310948   0.85815672    1.0057675   0.75609078   -1.2298232            1 -0.099511902  -0.38116453  -0.36230065   0.44492948 0.00033200366 0.0054697641 -0.019492722  -0.25547482  -0.24308021   0.71675169        0.075    1.4105966        1e-10 1.5927815e-11     6.278325    2.4439171    31.520363 0.0040061823  -0.20361511 -0.0072549469   0.20920688    2.7542329    2.7273409 
 2771000    4.0406844    1.2933649    2.7473194  -0.22927613   0.86229226    1.0191449   0.75383126   -1.2298232            1  -0.17336231  -0.43173251  -0.43549989   0.34714547 -0.0017759676   0.01043777 -0.022251993  -0.32885914  -0.31884017   0.71314564        0.075    1.4198724        1e-10 1.5847681e-11    6.3100715     2.437247    31.520363 -0.0012825896  -0.19476145 -0.0051977542   0.22517041     1.409601    2.0756764 
 2772000    4.0425155    1.2909041    2.7516114  -0.23410645   0.86065163    1.0098862   0.75746227   -1.2298232            1  -0.13141533  -0.38763419  -0.41264263   0.40603082  0.010836869  0.018193749 0.0057856996  -0.28766116  -0.27557156   0.71492718        0.075    1.4284336        1e-10 1.5887271e-11    6.2943473    2.4491026    31.520363 -0.0017001935  -0.19424742 -0.0046364759   0.20318927   0.23707464     2.242785 
 2773000    4.0354424    1.2886229    2.7468195  -0.23426945   0.85913075    1.0114709   0.75379211   -1.2298232            1  -0.14594337  -0.39715375   -0.4067871   0.36611073 -0.0063050147 -0.025174871 -0.017027435  -0.30143213  -0.29032582   0.71761272        0.075    1.4102532        1e-10 1.5946949e-11    6.2707918    2.4421372    31.520363 -0.007165016  -0.18334485 -0.0075295789    0.2043449  -0.98496157  -0.27242799 
 2774000    4.0325009    1.2800937    2.7524072  -0.22981953   0.85344429     1.003475   0.74970326   -1.2298232            1 -0.067244146  -0.34087291  -0.34835073    0.4874912   0.01868232 -0.0088872942  0.017752054  -0.22188947  -0.21048522   0.71633242        0.075     1.423651        1e-10 1.5918498e-11    6.2819996    2.4504978    31.520363 -0.0031202386   -0.1902916 -0.00096644543   0.17704068   0.44811968   0.85117736 
 2775000    4.0186021    1.2852914    2.7333107  -0.23102991   0.85690958    1.0084875    0.7520982   -1.2298232            1  -0.17423218  -0.40343782  -0.42102569   0.30176698 0.00058213388 -0.038128966 -0.014551925  -0.32937152  -0.31818875    0.7155073        0.075    1.4225118        1e-10 1.5900162e-11     6.289244    2.4422022    31.520363 -0.0071036554  -0.22512003 -0.0012461544   0.20724189  -0.21194695    1.3196605 
 2776000    4.0358843    1.2868252     2.749059   -0.2344914   0.85793223    1.0065712   0.75515473   -1.2298232            1  -0.10685502  -0.37062742  -0.35443528   0.40449764 -0.012551994 -0.096164361 -0.010344724  -0.26262485  -0.25053806   0.71495689        0.075    1.4041799        1e-10 1.5887931e-11    6.2940858    2.4483968    31.520363 -0.006598144  -0.17341664  0.010676722   0.18065965  -0.12274521   0.96649628 
 2777000    4.0418514    1.2982166    2.7436348  -0.23228782   0.86552689     1.008664    0.7665575   -1.2298232            1 -0.065024555  -0.33519316  -0.36046425   0.50058374 0.0020056641 -0.054104443 -0.033913702   -0.2231465  -0.20900632   0.72019293        0.075    1.4008228        1e-10 1.6004287e-11    6.2483257    2.4462003    31.520363 -0.0052475101  -0.18281156 -0.0039848672   0.17642859   -1.0010897    1.9102296 
 2778000    4.0356611    1.2818175    2.7538435  -0.22824368   0.85459357   0.99895377   0.75477675   -1.2298232            1  -0.27093443  -0.48366247  -0.52256802    0.1934272 0.0060977478   0.03657505 -0.011823954  -0.42662629  -0.41353011   0.72166498        0.075    1.3962877        1e-10 1.6036999e-11    6.2355804    2.4546642    31.520363 0.0021545505  -0.21829409 -0.0025246014   0.21815924   0.87094561  -0.61165759 
 2779000    4.0257728    1.2784124    2.7473604  -0.22243262   0.85232335    1.0058372   0.74617189   -1.2298232            1  -0.19715479  -0.43613617  -0.41016873   0.25484053  0.014097723  0.042847583  0.038839406  -0.35107168  -0.34073304     0.713088        0.075    1.4060676        1e-10  1.58464e-11    6.3105816    2.4436751    31.520363 -0.0045471808  -0.20017819 -0.0064842582   0.19806035   0.23645269   0.88538006 
 2780000    4.0316432    1.2764126    2.7552306  -0.23722136    0.8509901   0.99670082   0.75023835   -1.2298232            1   -0.2123166  -0.46072937  -0.46205847   0.28583803 5.6631733e-05 -0.0047884311 0.0091884884  -0.36707231  -0.35459069   0.71127137        0.075    1.4016313        1e-10 1.5806031e-11    6.3266992    2.4440797    31.520363 -0.0073578139  -0.20164524 -0.0038388225   0.18347082 -0.085153962    1.4286047 
 2781000     4.025389    1.2797076    2.7456814  -0.23087447   0.85318689     1.000178   0.75154928   -1.2298232            1 -0.091434073  -0.35203395  -0.36230885   0.44004059 0.0052653859  0.068555757 -0.027076924  -0.24646019  -0.23420451    0.7159204        0.075    1.3928942        1e-10 1.5909342e-11     6.285615     2.449016    31.520363 0.0069155099  -0.20882097 -0.0021474928   0.18668138   -0.8672351    1.1139512 
 2782000    4.0259258    1.2808643    2.7450615  -0.23541355   0.85395805    1.0026194   0.75116473   -1.2298232            1  -0.14470498  -0.39812801   -0.4110887   0.37510178 -0.003024813  0.024716071  0.023136634  -0.29965177   -0.2878239   0.72125761        0.075    1.4077023        1e-10 1.6027947e-11    6.2391023    2.4546583    31.520363 -0.011319027   -0.1882742 -0.0078202439   0.17520082   0.11305387   0.89183697 
 2783000    4.0241387    1.2791106    2.7450282   -0.2259421   0.85278882    1.0109156   0.74344515   -1.2298232            1  -0.25803781  -0.48904266  -0.46052469   0.17545393 -0.0010633459   0.04441726  0.016510476  -0.41139224  -0.40234098   0.71654662        0.075    1.3864425        1e-10 1.5923258e-11    6.2801218    2.4487769    31.520363 0.0039551579  -0.20429053 -0.0083938921   0.22613458  -0.16011774   -1.0972585 
 2784000    4.0184994    1.2759744    2.7425249  -0.23598086   0.85069795    1.0101489   0.74043778   -1.2298232            1  -0.13921944  -0.38234993   -0.4008459   0.36553751  0.010394098  0.072828522  0.013411882  -0.29195353  -0.28341317   0.71219409        0.075    1.3968676        1e-10 1.5826535e-11    6.3185023    2.4470196    31.520363 -0.0097595662  -0.18975163 -0.0088871243   0.22002857    1.3783553    2.3983669 
 2785000    4.0321326    1.2777134    2.7544193  -0.22741492   0.85185731   0.99765267   0.75104707   -1.2298232            1  -0.15110957   -0.3984896  -0.44890536   0.39406625 -0.007005788  0.088566325  -0.01391354  -0.30603209  -0.29351953    0.7155627        0.075    1.3984271        1e-10 1.5901393e-11     6.288757    2.4540363    31.520363 -0.0032350012  -0.20981141 -0.0036969371   0.19316168   0.45992568    1.5915871 
 2786000    4.0195681    1.2633208    2.7562473  -0.23624182   0.84226172    1.0015607   0.73210591   -1.2298232            1  -0.12238645  -0.40853754  -0.37372373   0.41510192 0.0028781024    0.0322697 -0.020800269  -0.27340188  -0.26535426   0.72185853        0.075    1.3772389        1e-10 1.6041301e-11    6.2339085     2.453753    31.520363 0.00095652446  -0.18695337 0.0068913617   0.20303244    -0.698887    1.3505204 
 2787000    4.0162699    1.2876592    2.7286107  -0.23534666    0.8584882    1.0208227   0.74623335   -1.2298232            1  -0.18100912  -0.43445837  -0.45714869    0.3485797 -0.015080559 -0.011259079 -0.025453897  -0.33493869  -0.32672648   0.71348441        0.075    1.4040472        1e-10 1.5855209e-11    6.3070755    2.4388221    31.520363 -0.0074310659  -0.19945624 -4.3417629e-05   0.18787533   -1.6406683 -0.049660737 
 2788000    4.0248051    1.2871502    2.7376549  -0.23098028   0.85814887    1.0149492   0.74972362   -1.2298232            1  -0.19636097  -0.43740197  -0.39453329   0.24285236 -0.0069718819   0.06403123 -0.0061084236   -0.3510105  -0.34123992   0.71091445        0.075    1.3967638        1e-10 1.5798099e-11    6.3298756     2.444236    31.520363 -0.0030606091  -0.19669161 0.0028951741   0.20072249  -0.36051005  -0.57012213 
 2789000    4.0382164    1.2903855    2.7478309  -0.23313796   0.86030588    1.0146818    0.7535586   -1.2298232            1  -0.03512168  -0.31612427  -0.31999823   0.53075746    0.0018309 -0.059470733 -0.020169324  -0.19056227  -0.17996246   0.71312526        0.075    1.3905167        1e-10 1.5847228e-11    6.3102519    2.4379017    31.520363 -0.004591498  -0.17932204 -0.003167374   0.20426551  0.062770504    1.6464224 
 2790000     4.037557    1.2821737    2.7553833   -0.2273846   0.85483103    1.0029691   0.75239991   -1.2298232            1   -0.1713203  -0.40536706  -0.47248073    0.3638869 -0.0078963744  0.029346058  0.023812099  -0.32652188  -0.31448914   0.71542759        0.075     1.397563        1e-10 1.5898391e-11    6.2899447    2.4334695    31.520363 0.00057027093  -0.20664622 -0.014359998   0.23855953   -1.6832867    1.5073934 
 2791000      4.02038    1.2740878    2.7462922  -0.23780474   0.84944009    1.0079112   0.73985789   -1.2298232            1  -0.19769407  -0.42972896  -0.45575446   0.29240122 0.0053874619  0.011985526 -0.030177657  -0.35030854  -0.34156837   0.72107865        0.075    1.3957051        1e-10 1.602397e-11    6.2406508    2.4529541    31.520363 0.0056977657  -0.22263751 -0.0043120236   0.21460088    1.3044221  -0.41659067 
 2792000    4.0250052    1.2749227    2.7500825  -0.23061325   0.84999676    1.0031707   0.74408031   -1.2298232            1 -0.091720724  -0.37981504   -0.3778491   0.48250197 0.0074213253  0.056588323  0.042398351  -0.24520617  -0.23491835   0.71636188        0.075     1.401055        1e-10 1.5919153e-11    6.2817413     2.442647    31.520363 -0.0094579583  -0.20587816 -0.0030262876   0.19499562 -0.075008595    1.4027094 
 2793000    4.0335933    1.2820623    2.7515311  -0.22378615   0.85475674    1.0030454   0.75222135   -1.2298232            1 -0.079597724  -0.35233305  -0.33732824   0.45086812 -0.018172436  0.038426973  0.036978558  -0.23476247  -0.22277747    0.7118791        0.075    1.4039174        1e-10 1.5819536e-11    6.3212981    2.4523531    31.520363 0.0054617585  -0.19332277 0.0058857841   0.18221704  -0.45952262   0.74764412 
 2794000     4.026969     1.282646     2.744323  -0.24014573   0.85514594    1.0050695   0.75147923   -1.2298232            1  -0.22445934  -0.47641958  -0.45573174    0.2587733 -0.0096445492 -0.076211318   -0.0160136  -0.37947101  -0.36792801   0.71638938        0.075     1.387359        1e-10 1.5919764e-11    6.2815001    2.4477764    31.520363 -0.012442115  -0.17949857 -0.0066608325   0.18973653  -0.97168275  -0.35605423 
 2795000    4.0498974    1.3005762    2.7493212     -0.23112   0.86710005    1.0160774   0.76408932   -1.2298232            1  -0.14236841  -0.41494556  -0.37591486   0.36375519  0.015552068  0.013945544  0.023553441  -0.29998123   -0.2874084   0.72465818        0.075     1.388506        1e-10 1.6103515e-11    6.2098243    2.4487267    31.520363 0.0024509065  -0.19568359 0.0091306117    0.2117777   0.42792606    2.6625903 
 2796000    4.0261632    1.2902013    2.7359619   -0.2400216   0.86018305    1.0161035   0.75236693   -1.2298232            1  -0.16922922  -0.41116483  -0.45000262   0.35347978 0.0027495934   0.10852138 -0.010609739    -0.324424  -0.31427294   0.71972882        0.075     1.395382        1e-10 1.5993974e-11    6.2523549    2.4466066    31.520363 -0.00015116507  -0.19998207 0.0027613452   0.23552858    1.1048014  0.085053319 
 2797000    4.0592688     1.297796    2.7614727  -0.23142957   0.86524649    1.0063304   0.76769795   -1.2298232            1  -0.15198266  -0.40214662  -0.38676915   0.33296778  0.012560072  0.058760685 0.0059282703  -0.31033985  -0.29563131   0.70843622        0.075    1.4064813        1e-10 1.5743027e-11    6.3520185    2.4402795    31.520363 0.0025438333  -0.20918319 -0.0075249428   0.20048398  -0.42084396   0.65687739 
 2798000    4.0455698    1.2924558     2.753114  -0.22766893   0.86168613     1.018474   0.75326986   -1.2298232            1  -0.19629573   -0.4455469  -0.43669413   0.29335385  0.012409062 -0.026535444 -0.013841728  -0.35167676  -0.34167783   0.71225982        0.075    1.4084659        1e-10 1.5827996e-11    6.3179192    2.4414444    31.520363 -0.0045249484  -0.19015426 -0.011130697   0.19161329   -1.2395216    2.6871636 
 2799000     4.049127    1.2971535    2.7519735  -0.22859546    0.8648181    1.0190589   0.75816477   -1.2298232            1  -0.10697665  -0.37020884  -0.35737691    0.4066558 -0.0080346542  0.062328247 -0.0048590121  -0.26336738  -0.25244223   0.71980873        0.075    1.4218191        1e-10 1.599575e-11    6.2516607    2.4515317    31.520363 -0.0043444648  -0.19674939 0.00026978643   0.21543885   -1.4156617    1.3050055 
 2800000    4.0293691    1.2884331     2.740936   -0.2305374   0.85900421    1.0296586   0.74099191   -1.2298232            1  -0.16445704  -0.42358442  -0.39465784   0.32487115 -0.012485883  0.058846701  0.053995286  -0.31730543  -0.31143568   0.72036827        0.075    1.3994964        1e-10 1.6008184e-11    6.2468048    2.4505093    31.520363 0.0015522057  -0.18558738 -0.0035466294   0.21193979 -0.037783252   0.22770041 
 2801000    4.0296035    1.2814589    2.7481446  -0.22186333   0.85435445    1.0108596   0.74613313   -1.2298232            1    -0.136477  -0.41626313  -0.40121102   0.40804315 0.00086216501  0.036248483 -0.048678894   -0.2903859  -0.28077218   0.71194351        0.075    1.4065839        1e-10 1.5820967e-11    6.3207262    2.4479228    31.520363 0.0023735577  -0.19621451 0.00023761673   0.21892404    1.1050748    1.4715563 
 2802000    4.0336456     1.288915    2.7447306  -0.22895845   0.85932549    1.0223941    0.7465627   -1.2298232            1  -0.13672979  -0.36915176  -0.40977078   0.36873318 -0.0062044179 -0.025522132  0.045777019  -0.29072729  -0.28267145   0.71040471        0.075    1.3927297        1e-10 1.5786771e-11    6.3344174     2.437264    31.520363 -0.00018578065  -0.21570986 -0.0015183484   0.19127184    1.2046269    2.0056013 
 2803000    4.0325538    1.2962926    2.7362612  -0.23568558   0.86424418    1.0159382   0.75935321   -1.2298232            1  -0.10826492   -0.3718013  -0.37496151   0.42196805 0.00089915275  0.024138318 -0.018744988   -0.2649008  -0.25328504   0.71504983        0.075    1.3899535        1e-10 1.5889996e-11    6.2932677     2.447987    31.520363 0.0011725042  -0.21991062 -0.0038050375   0.22919957 -0.077447748    1.7487947 
 2804000     4.040071    1.2837929    2.7562781   -0.2289514   0.85591055    1.0092704   0.74986596   -1.2298232            1  -0.19068097  -0.41997175  -0.47975663   0.32768547 0.0098411558  0.034618623 -0.028736102  -0.34535986   -0.3347493   0.71563647        0.075    1.3998118        1e-10 1.5903033e-11    6.2881088    2.4427364    31.520363 -0.0054357643  -0.20431026 -0.0096562329   0.19389849  -0.15165288    1.1371224 
 2805000    4.0303341    1.2931219    2.7372122  -0.22629685   0.86213022    1.0237757   0.75035249   -1.2298232            1  -0.09796032  -0.33236325  -0.38088905   0.41937133 0.0023453309  0.013173473 -0.010610414  -0.25273957  -0.24409921   0.71892373        0.075    1.3668864        1e-10 1.5976083e-11    6.2593566    2.4534562    31.520363 -0.0067206967  -0.20320538 -0.00068287134   0.18538387    1.9093107    1.2371226 
 2806000    4.0166819    1.2798145    2.7368675  -0.23144043   0.85325811      1.01298   0.74281066   -1.2298232            1  -0.19891155  -0.44156597  -0.42462901   0.26946033 0.0046449309  0.014859687 -0.032255663   -0.3521351  -0.34350941   0.71574329        0.075    1.3645895        1e-10 1.5905406e-11    6.2871704     2.439133    31.520363 0.0070808762  -0.17911063 0.0093322053    0.2031638  -0.57190457   0.94861937 
 2807000    4.0198104    1.2808049    2.7390055   -0.2286943   0.85391845    1.0057036    0.7489634   -1.2298232            1  -0.22799865  -0.46945389  -0.45224738   0.23770532 -0.0096803663 -0.029574125 -0.032308785  -0.38249136  -0.37155784   0.70774427        0.075    1.3690866        1e-10 1.572765e-11    6.3582288    2.4547063    31.520363 0.0029540773  -0.18639808 -0.010592029   0.18257225    1.4095699   -1.0493146 
 2808000    4.0391958    1.2867314    2.7524644  -0.22540512   0.85786969   0.99457968   0.76334721   -1.2298232            1  -0.15674453  -0.41729584  -0.41989875   0.36696099 -0.018764239 -0.052638914 -0.023776314  -0.31420427  -0.29871584   0.71012153        0.075    1.3764951        1e-10 1.5780479e-11    6.3369434    2.4625141    31.520363   0.01155893  -0.18318419 0.0033862726   0.19899533   -1.0735592    1.1601037 
 2809000    4.0396672     1.270845    2.7688222  -0.22898119   0.84727813   0.99147734   0.74757201   -1.2298232            1  -0.14521677  -0.40457264  -0.39428996    0.3632123 0.00081798661 -0.062502249 0.0016211689  -0.29942247  -0.28674522   0.71933722        0.075    1.3529497        1e-10 1.5985271e-11    6.2557586    2.4450443    31.520363 -0.0001169675  -0.19788962 0.0029063212   0.18561616   0.64212462  -0.32296256 
 2810000    4.0286612    1.2781956    2.7504657  -0.23839061   0.85217878    1.0011681    0.7491583   -1.2298232            1  -0.17286651  -0.44225528  -0.40822068   0.33187643 -0.0010311193 0.0050235277 0.00053553304  -0.32739943  -0.31577828    0.7231384        0.075     1.364513        1e-10 1.6069742e-11    6.2228752    2.4587443    31.520363 -0.0037638515  -0.20552061 0.0030512347    0.1839195   0.75707885  -0.23703417 
 2811000    4.0183951     1.268034    2.7503611   -0.2295118   0.84540401   0.99674483   0.74075563   -1.2298232            1   -0.2077714  -0.49559098  -0.43182678   0.30410355 0.0032207528 -0.053423466 -0.022099775  -0.36057106  -0.35005177   0.71661867        0.075    1.3786416        1e-10 1.5924859e-11    6.2794903    2.4602586    31.520363 0.0045809534   -0.2069305 0.0019424729   0.22867147   -1.1381285   0.82015793 
 2812000    4.0186559    1.2653899     2.753266  -0.23352916   0.84364119    0.9906514   0.74198947   -1.2298232            1  -0.13757082  -0.40562742  -0.40924413    0.4021591  0.015058973 -0.034488305 -0.018605107  -0.29062498  -0.27898137   0.71513886        0.075    1.3564374        1e-10 1.5891975e-11    6.2924843    2.4540482    31.520363   0.01067137  -0.21388424 -0.017166547   0.18145037  -0.72145031    2.7398854 
 2813000    4.0339731    1.2798454    2.7541278  -0.22112417   0.85327872    1.0030065   0.74974731   -1.2298232            1  -0.21909675   -0.4709349  -0.44837969   0.26202434  0.018604176   -0.0994816 0.0060146094  -0.37375116  -0.36227094   0.71804102        0.075    1.3655053        1e-10 1.5956467e-11    6.2670514    2.4472051    31.520363 -0.00087870504  -0.16999294 -0.0097662574   0.20080397   0.42568936  -0.29750836 
 2814000    4.0392639    1.2852253    2.7540386  -0.22743241   0.85686551    1.0123681    0.7493382   -1.2298232            1  -0.13349691  -0.37985569  -0.41490616   0.39427112 -0.011835306 -0.067812424 -0.0071686103  -0.28806694  -0.27800743   0.72108606        0.075    1.3654416        1e-10 1.6024135e-11    6.2405866    2.4401294    31.520363 0.0055319807  -0.19860606 0.0087980684    0.2093752    1.2600022    3.4483632 
 2815000    4.0126936    1.2886288    2.7240648  -0.23227482   0.85913467    1.0099502    0.7548511   -1.2298232            1   -0.1712083  -0.42532648  -0.44088975   0.35259133 0.0077538387 -0.090536568  0.012064317   -0.3269155  -0.31537366   0.72011856        0.075    1.3770827        1e-10 1.6002635e-11     6.248971    2.4424169    31.520363 0.0099903151  -0.20707955 -0.0065641371   0.19525742   0.69795972    2.2154427 
 2816000    4.0170622    1.2760837    2.7409785  -0.22501561    0.8507708   0.99940838    0.7479936   -1.2298232            1  -0.23033413  -0.44102105  -0.45534984    0.2053685 -0.021778913 -0.048082692 -0.022449346   -0.3846268   -0.3729947    0.7173078        0.075    1.3819698        1e-10 1.5940173e-11    6.2734575    2.4501081    31.520363 -0.00097883742  -0.21730262 0.0039831886   0.20000526   0.83424499   -1.2661893 
 2817000    4.0151697    1.2702969    2.7448729  -0.23115195   0.84691269   0.99697824   0.74314694   -1.2298232            1  -0.13865311  -0.39406173  -0.41923229   0.39733469 0.0033239251 -0.051889617  -0.03489867  -0.29194603  -0.28096679   0.71503457        0.075    1.3712793        1e-10 1.5889657e-11     6.293402    2.4457522    31.520363 0.0028480558  -0.20138202 5.3212608e-05   0.19510858  -0.45446949    1.5667827 
 2818000    4.0335538    1.2843409    2.7492128  -0.22507471   0.85627591   0.99727511    0.7587851   -1.2298232            1  -0.19866082  -0.41894725  -0.44710635   0.27007114 0.0030780057  0.063208615 -0.032659359  -0.35517951  -0.34101688   0.71803206        0.075    1.3757101        1e-10 1.5956268e-11    6.2671297    2.4461942    31.520363 9.0915761e-05  -0.20903903  0.011560165   0.20506361  -0.20175155    1.1916022 
 2819000    4.0260064    1.2781547    2.7478518  -0.23289715   0.85215151    1.0035669   0.74745217   -1.2298232            1  -0.15017019  -0.40873763  -0.41031934    0.3685464  0.018083468 0.0058237966 0.0083506908  -0.30435117  -0.29342437   0.71581736        0.075    1.3719395        1e-10 1.5907052e-11    6.2865198    2.4403781    31.520363 -0.0010980843  -0.19637963 -0.0047688381    0.1974071   -1.2439918    2.9526722 
 2820000    4.0306883    1.2810035    2.7496849  -0.23890798   0.85405083   0.99971579   0.75333104   -1.2298232            1  -0.17854641  -0.45490104  -0.45625418   0.37551601 -0.0051252892 -0.024884132  0.004985054  -0.33394006  -0.32125086   0.71663528        0.075     1.371607        1e-10 1.5925228e-11    6.2793448    2.4373418    31.520363 0.0040050909  -0.22518247  -0.00989595   0.20005138  0.022636131 -0.033385774 
 2821000    4.0179339    1.2767724    2.7411615   -0.2361288   0.85122994   0.99768391   0.74996387   -1.2298232            1  -0.20394636  -0.43190594  -0.47099836   0.29106523 -0.0028011049  0.019388903  0.030229442  -0.35864544  -0.34636077   0.71620969        0.075    1.3706682        1e-10 1.5915771e-11    6.2830761    2.4376133    31.520363 0.0063408986  -0.20349181 -0.013284714   0.19553398   0.59299879  -0.12389118 
 2822000    4.0121482    1.2737536    2.7383945     -0.22957   0.84921734      0.99666   0.74726689   -1.2298232            1 -0.087692747  -0.32898172  -0.39169056   0.45759404  0.021639546  0.026057626 -0.014038623  -0.24183551    -0.229961    0.7182922        0.075    1.3731191        1e-10 1.5962049e-11    6.2648599    2.4437806    31.520363 -0.010441044  -0.21114508 -0.0054739961   0.20825795   -0.6412008  -0.38021263 
 2823000     4.008328    1.2795962    2.7287319  -0.23255874   0.85311257    1.0081355   0.74591688   -1.2298232            1 -0.0044748363  -0.25580843  -0.27380747   0.51619139 0.0040459233   0.02386533  0.022625353  -0.15833913  -0.14838116    0.7189814        0.075      1.38942        1e-10 1.5977364e-11    6.2588546    2.4344192    31.520363 -0.0047404413  -0.21523029 -0.0090194088   0.21647108  -0.25759531    2.5359041 
 2824000    4.0318338     1.282426    2.7494078  -0.22533229   0.85499925    1.0040414   0.75194249   -1.2298232            1  -0.15953886  -0.39863912  -0.42359329   0.34361585 0.0034559903 -0.097195206  0.047706096  -0.31464608  -0.30286077   0.71487208        0.075    1.3908555        1e-10 1.5886046e-11    6.2948325    2.4520953    31.520363 -0.0043527978  -0.21997726 0.0056138567   0.19991394    1.4894714   0.57885877 
 2825000    4.0413158    1.2932406    2.7480752  -0.23504699   0.86220939    1.0118735   0.75872291   -1.2298232            1  -0.11345031   -0.3768909   -0.4103341   0.44687408  0.011757442 -0.035761693  0.057410593  -0.26995617  -0.25789021   0.71305057        0.075    1.3991186        1e-10 1.5845568e-11    6.3109129    2.4438323    31.520363 0.0046813236  -0.18920455  0.005785823   0.18370047   0.39540952    1.0608693 
 2826000    4.0030401     1.270282    2.7327581  -0.22896983   0.84690278    1.0145776   0.73095119   -1.2298232            1 -0.089029104  -0.38799585  -0.34276965   0.46367819  0.010421028  0.010146897 -0.009700614  -0.23980634  -0.23385501   0.71478918        0.075    1.3837534        1e-10 1.5884204e-11    6.2955626    2.4329079    31.520363 0.00092981755  -0.19398821 -0.0070715293    0.2125218  -0.57931464     1.760625 
 2827000    4.0251314     1.277404    2.7477273  -0.23777561   0.85165105    1.0117505   0.74094221   -1.2298232            1  -0.12529862  -0.38602457  -0.39302402   0.40315271 0.0048247902   0.10713153 -0.027655668  -0.27813676  -0.26972097   0.71732048        0.075    1.3911393        1e-10 1.5940455e-11    6.2733466    2.4346887    31.520363 0.0035431565  -0.19908143 -0.0037986528   0.20417168   -1.4786779    1.5352306 
 2828000    4.0261103    1.2783103    2.7477999  -0.23447392   0.85225531   0.99674527   0.75234846   -1.2298232            1  -0.18755254  -0.43637763  -0.44797595   0.32169596  0.011083026  -0.04615805  0.027013839  -0.34274351  -0.32983297   0.71605764        0.075    1.3797629        1e-10 1.5912392e-11    6.2844103    2.4495898    31.520363  0.010955707  -0.21187807 0.0014278089   0.21294419   -1.0301614     1.430009 
 2829000    4.0226873    1.2819296    2.7407576  -0.23208128    0.8546683    1.0068239   0.74945698   -1.2298232            1 -0.062080201  -0.34756371  -0.34923527   0.51055837   0.01029125  0.059885893 0.0062957801  -0.21667473   -0.2057993   0.71525214        0.075    1.3864965        1e-10 1.5894492e-11    6.2914877    2.4546189    31.520363 -0.0013184835  -0.21054373 -0.012319206   0.19850464   0.15792588    2.6595766 
 2830000    4.0273128     1.274054    2.7532588  -0.23139599   0.84941759    1.0041776   0.74240349   -1.2298232            1  -0.19738646  -0.45956175  -0.43067013   0.29807251   0.02000886  0.026275398 -0.00039610771  -0.35052602  -0.34072781   0.71273275        0.075    1.3964775        1e-10 1.5838506e-11     6.313727    2.4465579    31.520363 0.00058434888  -0.20231109 0.00084806454   0.21051785    1.1521535     1.682777 
 2831000    4.0239935    1.2833431    2.7406504  -0.22554165   0.85561066    1.0061644   0.75150793   -1.2298232            1  -0.14045135  -0.38934262  -0.37293023   0.34091881  0.017480995  0.067618684 0.0010261458  -0.29546894  -0.28407631   0.71843371        0.075    1.3924077        1e-10 1.5965194e-11    6.2636259    2.4371955    31.520363 0.0020562255  -0.20490784 -0.003347407   0.21639993   0.68171025   0.75211066 
 2832000    4.0256907    1.2731178     2.752573  -0.22959819   0.84879338   0.99237124   0.74951739   -1.2298232            1  -0.15465659   -0.4151117   -0.3784626   0.32960454 -0.0042059134  0.047610286 -0.012329623  -0.30926358  -0.29631265   0.72140772        0.075    1.3815724        1e-10 1.6031283e-11    6.2378041      2.44918    31.520363 0.0038684526   -0.1912916  0.010828164   0.19817518  -0.49655762  -0.53391634 
 2833000    4.0201357    1.2871191    2.7330166  -0.23650276   0.85812817    1.0044689   0.75694117   -1.2298232            1  -0.22789506   -0.4564997  -0.44734711   0.22016163 0.0059592317 -0.020337347 -0.020190756  -0.38403339  -0.37127799   0.71255073        0.075    1.3823265        1e-10 1.5834461e-11    6.3153398    2.4443462    31.520363 -0.0013867743   -0.2132403 0.00024756666   0.19927571   0.71169484    1.6666562 
 2834000    4.0372612    1.2875052     2.749756  -0.22884774   0.85838555   0.99945604   0.76084561   -1.2298232            1 -0.028357389  -0.30672182  -0.31322577   0.53487543 -0.0045505222 -0.019893719   0.04507225  -0.18530111  -0.17102477   0.71371712        0.075    1.3653006        1e-10 1.5860381e-11     6.305019    2.4521999    31.520363 -0.0062004398  -0.18937701 -0.0042155682   0.19281891    1.1617899    3.0976282 
 2835000    4.0321904    1.2957911    2.7363994   -0.2293281    0.8639098    1.0113683   0.76194978   -1.2298232            1  -0.16744488  -0.43081842  -0.42742481   0.35590858 -0.0088697781  -0.03984941 -0.019407041  -0.32461637  -0.31181268   0.71560061        0.075      1.37907        1e-10 1.5902236e-11     6.288424    2.4427219    31.520363  0.002182783  -0.19294296  0.004686428   0.18207734   0.29041065    1.9433965 
 2836000    4.0402742    1.2801548    2.7601194  -0.23087187   0.85348499    1.0013231   0.75126133   -1.2298232            1  -0.18178626  -0.45129377  -0.42575187   0.33168685 -0.010037345  0.039146882  0.012587804  -0.33675298  -0.32472015   0.71664878        0.075    1.3901867        1e-10 1.5925528e-11    6.2792265     2.455432    31.520363  0.007702808  -0.19544308 0.0039655023   0.20591888  -0.64196014    2.5339063 
 2837000    4.0118468    1.2696669    2.7421799  -0.22725007   0.84649269   0.99813724   0.74163423   -1.2298232            1  -0.18294033  -0.44656924  -0.42086829   0.31861655 0.0022622587   0.04270221  0.078997296  -0.33592121  -0.32541945   0.71529988        0.075    1.3905406        1e-10 1.5895553e-11    6.2910677    2.4568616    31.520363 0.0070155316   -0.2042034 -0.0087024359   0.20460141   0.36456637    3.6614802 
 2838000    4.0441825    1.2980929    2.7460896  -0.22603832   0.86544445    1.0150035     0.762031   -1.2298232            1  -0.17953397  -0.44286246  -0.42759994   0.33186049  0.030460753  -0.06114762  0.023835488  -0.33672221  -0.32442067   0.71824675        0.075    1.3982135        1e-10 1.5961039e-11    6.2652563    2.4468839    31.520363 0.0089077753  -0.24362791 -0.0061738004   0.17413955    2.4479246    4.3736146 
 2839000    4.0348507    1.2767358    2.7581149  -0.23156949   0.85120557    1.0107186   0.74090248   -1.2298232            1  -0.14258118   -0.4038652  -0.40697271   0.38309436 -0.0012247464 -0.031244915  0.045486317  -0.29541113  -0.28685623   0.72018168        0.075     1.416273        1e-10 1.6004037e-11    6.2484233    2.4405845    31.520363 -0.00041090113  -0.20843459 -0.0053194328   0.21129493  -0.52873887  0.044360399 
 2840000     4.029305    1.2857682    2.7435368   -0.2282651   0.85722749    1.0000693   0.75846165   -1.2298232            1 -0.072068894  -0.30957089  -0.35278177   0.44614598 0.0038547057 -0.060383998 0.0046415392  -0.22852086  -0.21482381   0.71458967        0.075    1.4166026        1e-10 1.587977e-11    6.2973203    2.4408767    31.520363 -0.0070880137  -0.20473339 0.0061305699   0.17794897   0.37899828   0.99969942 
 2841000    4.0393515    1.2750561    2.7642954  -0.22848341   0.85008571   0.99379191   0.75072102   -1.2298232            1  -0.20097799  -0.44479328  -0.40356435   0.24542365  0.010275046 -0.049045252  0.033571066  -0.35583326  -0.34283684   0.71317673        0.075    1.4207764        1e-10 1.5848372e-11    6.3097964    2.4495495    31.520363 -0.007339279  -0.20338937 -0.0024946126   0.20279763   -1.1910238    1.5940252 
 2842000    4.0350563    1.2750671    2.7599892  -0.22984176   0.85009303   0.99816585   0.74770659   -1.2298232            1  -0.21264626  -0.46747126  -0.45289026   0.28242275 -0.0023206434  -0.16252614 0.0086510457  -0.36687972  -0.35512947   0.71511184        0.075    1.4066215        1e-10 1.5891374e-11     6.292722    2.4472583    31.520363 0.0033309821  -0.20649872 -0.010367089   0.21407876    1.5347203   0.99007132 
 2843000     4.034168    1.2784486    2.7557194  -0.22813192   0.85234745    1.0080735   0.74466512   -1.2298232            1 -0.091400437  -0.36764732  -0.35657794   0.45002395 -0.0021804036   0.05090385  -0.03619258  -0.24500652  -0.23529791    0.7173678        0.075    1.4059254        1e-10 1.5941507e-11    6.2729328    2.4357531    31.520363 0.0032147273   -0.1841064 0.0002765464    0.1847018    0.8172197    2.0066115 
 2844000     4.020658    1.2816998    2.7389582  -0.22444136   0.85451511    1.0142137   0.74408392   -1.2298232            1  -0.23356394  -0.48772014  -0.48392147   0.27094978 -0.002973037 -0.021299211 -0.0028366576  -0.38705014   -0.3783379   0.71784399        0.075    1.3861648        1e-10 1.5952089e-11    6.2687716     2.445762    31.520363 0.0091270807   -0.2095857 0.0087094439   0.20233675  -0.27375945     2.185893 
 2845000     4.009404    1.2681226    2.7412814   -0.2292242   0.84546309   0.99723549   0.74051604   -1.2298232            1  -0.20039208  -0.43519927  -0.41175974   0.24578278 -0.0087086968 0.0064690851 0.0031498349  -0.35314231  -0.34274248   0.71521957        0.075    1.3685478        1e-10 1.5893768e-11    6.2917741    2.4531973    31.520363 0.0065601089  -0.19479303 -0.015802877   0.19567653  -0.56175418    2.7890727 
 2846000    4.0064538    1.2725794    2.7338743  -0.23036272   0.84843449    1.0046465   0.74041546   -1.2298232            1  -0.21140252  -0.48565019  -0.46270533   0.31414796 0.0033815269  0.094483002 -0.036220038    -0.364132  -0.35481081   0.71764924        0.075    1.3711842        1e-10 1.5947761e-11    6.2704727    2.4596432    31.520363 -0.0074336872  -0.19286912 0.0020951447   0.19470456   0.28930524    1.6602623 
 2847000    4.0238392    1.2796071    2.7442321  -0.23166295   0.85311984    1.0009509   0.75090097   -1.2298232            1  -0.19464306  -0.43257333  -0.44377419   0.29241833 -0.014313183  0.031709832 -0.0014469452  -0.34953545  -0.33752383   0.71719067        0.075    1.3672263        1e-10 1.593757e-11    6.2744821    2.4426633    31.520363 -0.0020751868  -0.18934577 0.0020950569   0.21041476    1.3873038    1.3546446 
 2848000    4.0112159    1.2648918    2.7463241  -0.23090993   0.84330909   0.97899257   0.74949556   -1.2298232            1  -0.15950061  -0.43228028   -0.3896354   0.34341385 -0.0029657651 -0.028660233 0.0075590033  -0.31410309  -0.29924693   0.71765066        0.075    1.3879288        1e-10 1.5947793e-11    6.2704603    2.4400471    31.520363 -0.0076519537  -0.21146487 0.0068187782   0.18214547  -0.87297636    2.0120483 
 2849000     3.997539    1.2799804    2.7175586  -0.23500221   0.85336874     1.021001   0.73744722   -1.2298232            1  -0.14668516  -0.40400049  -0.41618698   0.38013199 -0.011424619 -0.020771693  -0.04385217  -0.29880237  -0.29242798   0.72219761        0.075    1.3793131        1e-10 1.6048836e-11    6.2309816    2.4518719    31.520363 0.00047410617  -0.19670209 -0.011490773     0.172141   0.33009615    1.1788816 
 2850000    4.0340044    1.2769707    2.7570336  -0.22253281   0.85136219   0.99426356   0.75255457   -1.2298232            1  -0.13812108  -0.37245115   -0.4076724   0.36576032  0.018726012     0.082936   0.01212259  -0.29335456  -0.28004725   0.71897044        0.075    1.3768972        1e-10 1.5977121e-11    6.2589499    2.4452749    31.520363 0.0035411913  -0.21587059 -0.0048964481    0.2119019   0.55259898    1.5670227 
 2851000    4.0131624    1.2920055    2.7211569  -0.23641997    0.8613859    1.0189787    0.7524126   -1.2298232            1  -0.19781894    -0.423583  -0.45345239   0.28357858 -0.0065417358  0.071162134 -0.014622959  -0.35302313  -0.34327308   0.71686543        0.075    1.3650625        1e-10 1.5930343e-11    6.2773288    2.4391798    31.520363 -0.0016081473  -0.21635592 -0.0057768651   0.20122891    0.5016326   -1.6188373 
 2852000    4.0217408    1.2796927    2.7420482  -0.23200059   0.85317692    1.0000561   0.75161678   -1.2298232            1 -0.059694887  -0.33388639  -0.32561022   0.48041194 -0.00027304963 -0.013915737 -0.00046418881  -0.21473493  -0.20244792   0.71623672        0.075    1.3663847        1e-10 1.5916372e-11     6.282839    2.4613804    31.520363 0.0095094313  -0.18104733 -0.0091243539   0.18966125   -1.5010815    1.5963004 
 2853000    4.0251729    1.2794236    2.7457494   -0.2385624   0.85299752    1.0004311   0.75105371   -1.2298232            1  -0.14769369  -0.41230298  -0.38907073   0.35829264 -0.010269562 -0.00051689154 0.0029203406  -0.30261758  -0.29050025   0.71686099        0.075     1.366788        1e-10 1.5930244e-11    6.2773677    2.4519602    31.520363 0.0067562755  -0.21778083 -0.00080075292    0.2118819   -0.7185907    0.4886633 
 2854000     4.028351    1.2842464    2.7441046  -0.22928213   0.85621289     1.004634   0.75358605   -1.2298232            1  -0.14217169  -0.39696284  -0.39643425   0.36688203 -0.0024039059  0.009201702 -0.00064191447  -0.29761794  -0.28557819   0.71897755        0.075    1.3638202        1e-10 1.5977279e-11     6.258888    2.4587001    31.520363 -0.0078018831  -0.18862462 -0.012178047   0.19027847  -0.51682526    2.5181982 
 2855000    4.0373144    1.2781174     2.759197  -0.22920072   0.85212668   0.99637792   0.75238501   -1.2298232            1  -0.16582146  -0.43355569  -0.39276989    0.3288612 0.0082183135 -0.073012423 -0.058416854  -0.32101997  -0.30804945   0.71852129        0.075    1.3578134        1e-10 1.596714e-11    6.2628624    2.4527529    31.520363 -0.001547597  -0.19357151 0.0073538836   0.20015612    1.2076761    3.4444626 
 2856000    3.9852229    1.2630745    2.7221484  -0.22934046   0.84209752   0.99817939   0.73416795   -1.2298232            1  -0.12929612   -0.3698927   -0.3997266   0.38173092 0.0073924465 -0.070367011 -0.0087501122   -0.2807369  -0.27178127   0.71664328        0.075    1.3625647        1e-10 1.5925406e-11    6.2792747    2.4546133    31.520363 0.0026460537  -0.19973574 0.0085326483   0.19026246   -1.1784482    2.4017451 
 2857000    4.0123703    1.2819352    2.7304351  -0.22963625   0.85467205     1.016643    0.7426684   -1.2298232            1  -0.10001168  -0.35319315  -0.34447837   0.39763647  0.004073888  0.039736568 -0.0066349419  -0.25320589  -0.24513241   0.71640931        0.075    1.3552894        1e-10 1.5920207e-11    6.2813254    2.4449367    31.520363 0.0031965007  -0.18491423  0.013367735   0.20258257  -0.46426648  -0.17100411 
 2858000    4.0088302    1.2744383    2.7343919  -0.23744388   0.84967383   0.99650626   0.74814571   -1.2298232            1    -0.186709    -0.463413  -0.43425901     0.337545 -0.006101975   0.11001475  0.035117786  -0.34103304  -0.32895531   0.71592658        0.075    1.3636755        1e-10 1.5909479e-11    6.2855608    2.4363453    31.520363 -0.0032046727  -0.21588495 -0.0030028729   0.21074792  -0.87919244    2.2369679 
 2859000     4.051489    1.2915131    2.7599758  -0.23546933   0.86105767    1.0059845   0.76084936   -1.2298232            1  -0.14029792  -0.40645113   -0.4150387   0.40059608 -0.016423544 -0.010179439 -0.0099418018  -0.29724241   -0.2838972   0.71713892        0.075     1.375141        1e-10 1.593642e-11    6.2749349    2.4518404    31.520363 -0.0024774727  -0.18181402 -0.0029172544   0.20631007   0.88137733    2.3190758 
 2860000    4.0084289      1.27485    2.7335789  -0.23342534   0.84994828    1.0040825   0.74336724   -1.2298232            1  -0.14811538  -0.39329126  -0.42099314   0.36993826 0.0065325992  0.032794761   -0.0479791  -0.30145374  -0.29144316   0.71321521        0.075    1.3709078        1e-10 1.5849227e-11     6.309456    2.4513313    31.520363 -0.0039964316  -0.20877336 0.0014656549   0.20569613   0.35673367   0.97920121 
 2861000    4.0252955    1.2764837    2.7488118  -0.22925456   0.85103751    1.0010064   0.74733904   -1.2298232            1 -0.090928773  -0.34915732  -0.38557521    0.4619462 0.00019100347  -0.03319157  0.023412374  -0.24508642  -0.23381746   0.71383706        0.075     1.362804        1e-10 1.5863046e-11    6.3039596    2.4400051    31.520363 0.0030651356  -0.20016087 0.0033060737   0.17856319   0.41190367    3.0673134 
 2862000    4.0128276    1.2600874    2.7527402   -0.2247647   0.84010598   0.98573375   0.73941058   -1.2298232            1  -0.17238698  -0.41879633  -0.42530984   0.32694522 0.0011240354  0.033439238 0.0058093396  -0.32490918  -0.31309557    0.7191637        0.075    1.3556955        1e-10 1.5981416e-11     6.257268    2.4482495    31.520363 0.0029716417  -0.21542538 -0.003295625   0.20703514    1.9940386   0.49393952 
 2863000    4.0245498     1.277551    2.7469988  -0.23452527   0.85174905   0.98829566   0.75733905   -1.2298232            1 -0.094425135  -0.36660581  -0.34244013   0.42577054 -0.018137218  0.059901186 -0.032235547  -0.25064554  -0.23549942   0.71760524        0.075    1.3548482        1e-10 1.5946783e-11    6.2708572    2.4362021    31.520363 -0.0018146826  -0.18207563  -0.01204356    0.2050716  -0.48372081    3.1131666 
 2864000    4.0107263    1.2617054    2.7490209  -0.22437953   0.84118472    0.9890191   0.73896242   -1.2298232            1  -0.13766747   -0.3967893   -0.3786689   0.36245578 -0.0082545585 -0.068948214 -0.025714631  -0.29009723  -0.27884503   0.71897299        0.075    1.3559976        1e-10 1.5977178e-11    6.2589277    2.4475606    31.520363 -0.0011391106  -0.20565317 -0.001776097   0.20660846    2.3045237   0.53872756 
 2865000    4.0348561    1.2859304    2.7489257  -0.23149881   0.85733563     1.005012   0.75522427   -1.2298232            1  -0.16939612   -0.4169902  -0.41443698    0.3232388 -0.013638145 -0.065450677  0.058717667   -0.3251803  -0.31285658   0.72458753        0.075    1.3246327        1e-10 1.6101945e-11    6.2104299    2.4459136    31.520363 -0.011663685  -0.19890578 0.0084793225   0.20224243  -0.11697296   0.37677442 
 2866000    4.0265272     1.284173    2.7423542  -0.22956304   0.85616398     1.003618   0.75420635   -1.2298232            1  -0.16107242  -0.42658915   -0.4207399   0.36411181 0.0087893214  -0.15723311 -0.031136461  -0.31664662  -0.30433389   0.71603514        0.075     1.332329        1e-10 1.5911892e-11    6.2846078    2.4397651    31.520363 -0.0027262375  -0.19802998 -0.0033757159    0.2002834   0.43863231    2.6968707 
 2867000    4.0239298    1.2754487     2.748481  -0.23002722   0.85034746   0.99826592   0.74806786   -1.2298232            1  -0.13991483  -0.39477097  -0.42032142    0.3953479 -0.00081977235 -0.057007321 -0.015011858  -0.29422282  -0.28241233   0.71386291        0.075    1.3376562        1e-10 1.586362e-11    6.3037314    2.4498446    31.520363 0.0012878169  -0.22064766 -0.003069395   0.19487973    1.3230008    2.5455149 
 2868000    4.0031855    1.2645018    2.7386837  -0.22888489   0.84304906    1.0046502   0.73130019   -1.2298232            1  -0.14523489  -0.37632865  -0.41470592    0.3553299 -0.0048541347 -0.080446466  0.021882626  -0.29608412  -0.28864371   0.71603636        0.075     1.339994        1e-10 1.5911919e-11     6.284597    2.4416327    31.520363 -0.0041792914  -0.20507762 -0.016378975   0.20642051   0.29759211    2.0224196 
 2869000    4.0079457    1.2665206    2.7414251   -0.2244228   0.84439501    1.0059708   0.73266381   -1.2298232            1  -0.15236896   -0.4010141   -0.3826784   0.32658561 -0.0086025856 -0.00097784929  0.032577066  -0.30349947  -0.29596629   0.71617838        0.075    1.3451659        1e-10 1.5915075e-11    6.2833508    2.4433079    31.520363  0.005496448  -0.18662869 0.0010095293   0.20370312   0.20985795   0.27878453 
 2870000    4.0248115    1.2849931    2.7398184  -0.22696002    0.8567107    1.0135565   0.74825389   -1.2298232            1  -0.14724682  -0.40434972  -0.43144835   0.39405761 0.0090935648  0.016542793  0.023730075  -0.30159318  -0.29192697   0.71883595        0.075    1.3413775        1e-10 1.5974132e-11    6.2601209    2.4450136    31.520363 -0.0027741081  -0.21881526 0.0040097222   0.22222397  -0.94325901    1.1128101 
 2871000    4.0503072    1.2861826    2.7641246  -0.22201152   0.85750377   0.99988802    0.7590546   -1.2298232            1 -0.074666429  -0.35688528  -0.32575308   0.45863908 0.0013796475 -0.030715849  0.012018113  -0.23124071  -0.21739547   0.71836729        0.075    1.3441643        1e-10 1.5963717e-11    6.2642051    2.4555483    31.520363 -0.00022248509  -0.19582037 0.00070301012   0.22342338   0.34300143     2.438398 
 2872000    4.0395692    1.2881161    2.7514532  -0.23027079   0.85879282    1.0078197   0.75574699   -1.2298232            1  -0.20363766  -0.42797429  -0.43753686   0.25459816 0.00080728125  0.031680363 -0.021217441  -0.35952967  -0.34749891    0.7173316        0.075    1.3371683        1e-10 1.5940702e-11    6.2732494    2.4569451    31.520363 -0.0074032752  -0.19504094 -0.0041369912   0.21518874  -0.76132487   -1.0736123 
 2873000    4.0337817    1.2734943    2.7602874  -0.22777923   0.84904443   0.99702045   0.74672488   -1.2298232            1  -0.27020379  -0.50969855  -0.50711533    0.2062025 0.0061509851 -0.079728681 -0.0020766477  -0.42423475   -0.4125235   0.71453773        0.075    1.3367243        1e-10 1.5878616e-11     6.297778    2.4497579    31.520363 7.6591319e-05  -0.19861584  0.013922967   0.23095358  -0.40936201 -0.029102014 
 2874000    4.0197189    1.2713202    2.7483987   -0.2355216   0.84759494   0.99662455   0.74454616   -1.2298232            1 -0.051061035  -0.31703118  -0.34962723    0.5134753 0.00026800676  0.022188654 -0.025395325  -0.20464258  -0.19332423   0.71821976        0.075    1.3368067        1e-10 1.5960439e-11    6.2654918     2.442274    31.520363 0.0018907825  -0.22221355 -0.0096219475     0.204206    1.4467621    2.6136115 
 2875000    4.0114076    1.2708241    2.7405835  -0.22820824   0.84726419    1.0014711   0.74063258   -1.2298232            1  -0.24989567  -0.48924197   -0.4722278   0.21178277  0.019616149 -0.020209455  0.028322365  -0.40266994  -0.39285069   0.71805663        0.075    1.3444021        1e-10 1.5956814e-11    6.2669152    2.4436366    31.520363 -0.012306302  -0.18335121 0.0060144657   0.19785948 -0.046890262  -0.46927444 
 2876000    4.0262275    1.2923946    2.7338329  -0.23090352   0.86164535    1.0058774   0.76191785   -1.2298232            1  -0.18062986  -0.43559796  -0.43694403   0.33065242 -0.0017823873  0.061313539  0.009323909  -0.33779475  -0.32421385   0.71661268        0.075    1.3359186        1e-10 1.5924726e-11    6.2795428     2.442064    31.520363 0.0018524173  -0.18035947 -0.0066854944   0.19534849  -0.65999329    2.0352558 
 2877000    4.0405521    1.2811287    2.7594233  -0.22554852   0.85413433   0.99711893   0.75526938   -1.2298232            1 -0.074533908  -0.38357205  -0.29994808   0.45991841  0.010596362 -0.021840248  0.016944091  -0.23032739  -0.21686767   0.71083803        0.075    1.3296905        1e-10 1.5796401e-11     6.330556    2.4463147    31.520363 -0.0048483798   -0.1725316 -0.0078301299   0.20224324   0.23558151    2.3009246 
 2878000    4.0430384    1.2924371    2.7506013  -0.23255059   0.86167371    1.0165881   0.75455392   -1.2298232            1  -0.25654388  -0.50965419  -0.49702138   0.23704393  0.015977421  0.034595616 -0.011516077  -0.41218978  -0.40165678    0.7150526        0.075    1.3353832        1e-10 1.5890058e-11    6.2932433    2.4459884    31.520363 -0.0096014252  -0.17900664 0.00061472107   0.21028686   0.91857306 -0.059329802 
 2879000    4.0148697    1.2730456    2.7418242  -0.22643292   0.84874526    1.0058384   0.74011649   -1.2298232            1  -0.14173928  -0.37469086  -0.37621859   0.32569161 -0.024928163   0.11616282  0.032184688  -0.29440709  -0.28531771   0.71942168        0.075    1.3437475        1e-10 1.5987148e-11    6.2550242     2.451801    31.520363 -0.0042783048  -0.20841475 0.0042183518   0.22745821   -0.1272189    2.8448278 
 2880000     4.039332    1.2894795    2.7498526  -0.22935061   0.85970181    1.0065834   0.75814064   -1.2298232            1  -0.22593851  -0.44523015  -0.45479068   0.22220531 -0.021334475  0.049855544 -0.024854451  -0.38232426  -0.36962328   0.71846284        0.075    1.3461903        1e-10 1.5965841e-11    6.2633719    2.4461846    31.520363 0.00064686563  -0.18699423 -0.0066584133   0.20588557   0.58704589   0.89533902 
 2881000    4.0482255    1.2972903    2.7509352  -0.22890256   0.86490934    1.0118917   0.76327894   -1.2298232            1 -0.077377079  -0.37983677  -0.35771952   0.50542506 -0.0087851583 -0.040785992  0.012807208  -0.23482274  -0.22181958   0.71468232        0.075    1.3671545        1e-10 1.5881829e-11    6.2965039     2.450674    31.520363 -0.0087365412  -0.21600271 -0.0067857536   0.19186132 0.0076962187    2.2140223 
 2882000    4.0220092    1.2757797    2.7462295  -0.22837721   0.85056811    1.0006465   0.74679383   -1.2298232            1  -0.19845098  -0.44018057  -0.46292419   0.30775183 -0.0048801901 -0.033278514 -0.0064845937  -0.35249616  -0.34128829   0.71053153        0.075    1.3703333        1e-10 1.578959e-11    6.3332868    2.4502645    31.520363 0.0010178808  -0.17523193 -0.0051758846   0.20769933    1.0270404    1.7918627 
 2883000    4.0575179    1.2910869     2.766431  -0.23231256   0.86077347    1.0102074   0.75744617   -1.2298232            1  -0.23908772  -0.44681987  -0.45818327   0.18773998 0.0022270994 -0.029741591 0.0030344786  -0.39533022   -0.3832898    0.7169613        0.075     1.361263        1e-10 1.5932473e-11    6.2764894    2.4489801    31.520363 -0.0054815492  -0.19139171 -0.0047722609   0.18185699   0.13279577  -0.10730396 
 2884000    4.0672315    1.3021006    2.7651309  -0.22868559   0.86811637    1.0200473   0.76306178   -1.2298232            1   -0.1407591  -0.40929744  -0.39327873   0.38029888 -0.0066830601  0.074020838  0.030285518  -0.29815996  -0.28636578   0.71855273        0.075    1.3713562        1e-10 1.5967838e-11    6.2625884     2.444999    31.520363   0.01568189  -0.19017786 0.0023514865   0.20448607   -1.0244108   0.52216104 
 2885000    4.0509253    1.2875875    2.7633378   -0.2248277   0.85844043    1.0131456   0.75146514   -1.2298232            1  -0.13832217  -0.39464475  -0.39536898    0.3750472 0.0073936668  0.027066587 -0.025385598  -0.29333093  -0.28294367   0.70695763        0.075    1.3658522        1e-10 1.571017e-11    6.3653037    2.4352512    31.520363 -0.00073548073  -0.17879239 0.0094944989   0.17731034  -0.70277754  0.010989406 
 2886000    4.0396567    1.2918262    2.7478305  -0.23060572   0.86126637      1.01705     0.753545   -1.2298232            1  -0.15853175  -0.36513026   -0.4703417   0.35987672  0.019970501 -0.015547714  0.016502057  -0.31396953  -0.30371058   0.71286919        0.075     1.366539        1e-10 1.5841538e-11    6.3125186    2.4352804    31.520363 -0.0057784246  -0.21307633 0.0031360789   0.20180385  -0.11624179    2.2245793 
 2887000    4.0502572    1.3075113    2.7427459  -0.23749488   0.87172373    1.0219108   0.76787632   -1.2298232            1  -0.05204143  -0.30455374  -0.32882853   0.47725798 0.0036529483  0.063263649 0.0073302247  -0.21043541  -0.19791411   0.71969429        0.075    1.3661308        1e-10 1.5993206e-11    6.2526549    2.4390334    31.520363 0.0046162165  -0.20308475 0.0095683143   0.22256056   0.68564555    2.8888033 
 2888000    4.0156322    1.2807699    2.7348623  -0.23544343    0.8538951    1.0030828   0.75073751   -1.2298232            1  -0.19371244  -0.44753047  -0.43367156   0.30006472 0.00066860606 -0.056148269  0.044450092   -0.3485711  -0.33689752    0.7128111        0.075    1.3736806        1e-10 1.5840247e-11     6.313033    2.4428708    31.520363 -0.0011833032  -0.19166833 -0.0023449881   0.19482775   0.80323447  0.014727417 
 2889000    4.0342512    1.2891574    2.7450938  -0.22438101   0.85948711    1.0239294   0.74577373   -1.2298232            1 -0.089444078  -0.32400943  -0.38701485   0.44269205 -0.013606042 -0.0085072215  -0.03483192  -0.24327884   -0.2356049   0.71202746        0.075    1.3697973        1e-10 1.5822832e-11     6.319981    2.4525694    31.520363 0.0031538838  -0.20561372 -0.0022671965   0.19942032  -0.28654888    1.1348653 
 2890000    4.0341569     1.279317    2.7548399  -0.22915475   0.85292645     1.003896   0.74853569   -1.2298232            1  -0.21039635   -0.4622056  -0.45352507   0.28454162   0.01479924 -0.044444268  0.030602389  -0.36480084  -0.35369752   0.71563422        0.075    1.3594777        1e-10 1.5902983e-11    6.2881286    2.4393509    31.520363 5.3803715e-05  -0.21677866 -0.011940874   0.20130603  -0.36228013    1.5861849 
 2891000     4.029614    1.2863228    2.7432912  -0.22606184   0.85759728    1.0153164   0.74853619   -1.2298232            1 -0.078825566  -0.33541159  -0.35817653   0.45711142 -0.0066630871 -0.010370296 -0.033244352  -0.23323016  -0.22375693    0.7161325        0.075    1.3584214        1e-10 1.5914056e-11    6.2837533    2.4354319    31.520363 -0.005189287  -0.20205622 0.0019498382   0.19706705  -0.26479055    1.3610565 
 2892000    4.0346574    1.2756714     2.758986  -0.22322751   0.85049592   0.99620683   0.74974399   -1.2298232            1  -0.19871948  -0.49296032  -0.41268313   0.30948502 -0.0081799901  0.056841533 -0.077109084  -0.35337321  -0.34092305   0.72003646        0.075    1.3562443        1e-10 1.600081e-11    6.2496835    2.4466275    31.520363 -0.003861673  -0.20322973 -0.0075956681   0.20995492  -0.44395943   0.75074196 
 2893000    4.0162264    1.2791346    2.7370917   -0.2282015   0.85280487     1.015751   0.74012616   -1.2298232            1  -0.12823407  -0.38496673  -0.37202499    0.3722895 0.0034549373  0.023408145   0.04364896  -0.28090388  -0.27322748   0.71400836        0.075    1.3654234        1e-10 1.5866852e-11    6.3024472    2.4432216    31.520363 -0.0045361021  -0.18647839 -0.0044927861   0.20149468  -0.56028019  0.091258362 
 2894000    4.0349329    1.2848794    2.7500534   -0.2264355   0.85663496    1.0024568   0.75580687   -1.2298232            1  -0.17518459  -0.40508595  -0.43795313   0.31748531 -0.011791218  0.027764303 -0.061171886  -0.33108894  -0.31828031   0.71306653        0.075    1.3510494        1e-10 1.5845923e-11    6.3107716    2.4450131    31.520363 -0.0084791489  -0.19872779 0.0083105831    0.2202826   -0.4694293   -0.5399258 
 2895000    4.0130255    1.2860471    2.7269785  -0.23194158   0.85741342    1.0199961   0.74498672   -1.2298232            1  -0.12702186  -0.38885203  -0.37458825   0.38237469 0.0020515907  0.054718323 -0.0012200984  -0.28069428  -0.27262122   0.71752664        0.075    1.3332435        1e-10 1.5945037e-11    6.2715441    2.4414147    31.520363 -0.0050198462  -0.19299102 -0.0084013051   0.22078952  0.098299908    1.7708854 
 2896000    4.0257897    1.2824994    2.7432903  -0.23274433    0.8550482    1.0112452   0.74704024   -1.2298232            1  -0.13527769  -0.41792516  -0.37604729   0.38813936 -0.0011702974 -0.077962634 -0.030276972  -0.28937371  -0.27962791   0.71719118        0.075    1.3530129        1e-10 1.5937582e-11    6.2744776    2.4454314    31.520363 0.0022773934  -0.17782334 0.0035581659   0.19650778 -0.073409651    1.8985711 
 2897000    4.0066504    1.2793293    2.7273211  -0.23249562   0.85293465    1.0033407   0.74893389   -1.2298232            1  -0.25080487  -0.49921103  -0.46331994   0.21011637 0.0072719193 -0.044204303 -0.033252823  -0.40529149  -0.39402675   0.71258884        0.075    1.3410868        1e-10 1.5835307e-11    6.3150021     2.443436    31.520363  -0.00798239  -0.21330002 -0.0037344199    0.2105354   0.41713362   -1.1851293 
 2898000    4.0094123    1.2834704     2.725942  -0.23488956   0.85569551    1.0134175   0.74663227   -1.2298232            1 -0.084637461  -0.33277255  -0.37891157   0.45777173 -0.012575932 0.0033442595  0.020337632  -0.23864932  -0.22929777    0.7155286        0.075    1.3308939        1e-10 1.5900635e-11    6.2890568    2.4372345    31.520363 -0.0059020659   -0.1724169 -0.00077742656   0.19176074  -0.48861009  -0.77145729 
 2899000     4.016232    1.2722057    2.7440262  -0.23248588   0.84818533   0.99740013   0.74500844   -1.2298232            1  -0.16404568  -0.42237526  -0.40679982   0.33703802 -0.00092976731 -0.098369722 -0.0017534438  -0.31772259  -0.30641959   0.71505071        0.075     1.327932        1e-10 1.5890016e-11      6.29326    2.4426601    31.520363 -0.0059627606   -0.2122247 -0.0092086332   0.20014999    1.7398249   -1.3259304 
 2900000    4.0351076    1.2882483    2.7468593  -0.22908083   0.85888101    1.0139861   0.75162902   -1.2298232            1  -0.23392131  -0.44422505  -0.49194977    0.2344109  0.016980876  0.083210264  0.042008875  -0.38896387  -0.37866277   0.71824298        0.075    1.3485786        1e-10 1.5960955e-11    6.2652892    2.4389052    31.520363 0.0021973603  -0.20464216 -0.0058123593   0.20012658  0.041406022  0.015441947 
 2901000    4.0168773    1.2704116    2.7464657  -0.23374126    0.8469892    1.0021653   0.73968689   -1.2298232            1  -0.17110304  -0.45073276  -0.39983073   0.33725437 -0.010305413  0.044574694 0.0082383909  -0.32368224  -0.31415715   0.71861815        0.075    1.3698441        1e-10 1.5969292e-11    6.2620183    2.4510837    31.520363 0.00091228524   -0.2102249 -0.0032169045    0.1987153    -1.902614   0.47130988 
 2902000    4.0196084    1.2677627    2.7518456   -0.2281849   0.84522318   0.99487979   0.74174027   -1.2298232            1 -0.097820506  -0.37172023  -0.38268692   0.46094563 0.0085645033  0.044685664  0.073473839  -0.25082327  -0.23983465   0.71538999        0.075    1.3667802        1e-10 1.5897555e-11    6.2902753    2.4372625    31.520363 -0.0052600331  -0.20612243 -0.015122914   0.20489638   -1.0591921    2.2523682 
 2903000     4.033134    1.2885642    2.7445698  -0.23192509   0.85909162    1.0018872   0.76035794   -1.2298232            1   -0.1361963  -0.37476494   -0.3710439   0.33721994 0.0048770508  0.034246136  0.026005222  -0.29303943  -0.27921072   0.71458737        0.075    1.3735705        1e-10 1.5879719e-11    6.2973405    2.4454527    31.520363 -0.0043229832  -0.19165215 0.0026725246   0.21508607  -0.33953525    2.1521502 
 2904000    4.0317367    1.2723685    2.7593682  -0.22893057   0.84829382    0.9975557   0.74508437   -1.2298232            1  -0.11060211   -0.3322973  -0.38789471   0.38838569   0.00553022 -0.015921022  0.032377716  -0.26429467  -0.25299822    0.7151285        0.075      1.37918        1e-10 1.5891744e-11    6.2925754    2.4522983    31.520363 -0.0063694193    -0.212347 -0.0087309696    0.1937009    1.3758559    2.3656603 
 2905000    4.0254951    1.2864722    2.7390229  -0.22874381   0.85769685    0.9932495   0.76397525   -1.2298232            1  -0.13796166  -0.39738731  -0.38011908   0.36362141 -0.0016784248 -0.089561694  0.012622353  -0.29555095  -0.27974308   0.71751381        0.075    1.3795798        1e-10 1.5944751e-11    6.2716563     2.441732    31.520363 0.0017682418  -0.20956638 -0.0044851805   0.20847538     2.380764   0.99181691 
 2906000    4.0084108     1.263307    2.7451038   -0.2330278   0.84225251   0.99162934   0.73896293   -1.2298232            1  -0.13212054  -0.39277407  -0.41531152   0.41172398  0.011132481 -0.066154963  0.051949038   -0.2845504  -0.27367069   0.71556205        0.075     1.359047        1e-10 1.5901379e-11    6.2887628     2.443702    31.520363 0.0004424343  -0.19219396   -0.0113518   0.21519584    1.2679774    1.7864686 
 2907000    3.9959029     1.259927    2.7359759   -0.2230431   0.83999902    0.9838589   0.74052702   -1.2298232            1 -0.074236589  -0.34316671  -0.30744877   0.42790571 0.0082883905   -0.1010221   0.03451025  -0.22698908  -0.21467755   0.71297685        0.075    1.3643248        1e-10 1.584393e-11    6.3115654    2.4383961    31.520363 0.0005377699  -0.19216594 -0.007823959     0.209861   0.55519392    2.8188481 
 2908000     4.014956    1.2870432    2.7279128  -0.23725788   0.85807751    1.0078262   0.75453214   -1.2298232            1  -0.11709267  -0.39563303  -0.36125592   0.40561094 -0.0012731868 -0.058355503  0.028515326  -0.27273408  -0.26095484   0.71986506        0.075    1.3531411        1e-10 1.5997001e-11    6.2511716    2.4446925    31.520363 -0.0054666255   -0.2142078 0.0089219374   0.22142222     1.114611    1.5269072 
 2909000    4.0176385    1.2755436    2.7420949  -0.23263922    0.8504107   0.99907773   0.74761309   -1.2298232            1  -0.11698079   -0.3847515  -0.33639345   0.37020258 0.0097495605  0.090266505   0.01709126  -0.27119496  -0.25959416   0.71980135        0.075    1.3619438        1e-10 1.5995585e-11    6.2517249     2.442597    31.520363 0.0066246016   -0.2032092 -0.0093665875   0.21599489  -0.39598466   0.51796689 
 2910000    4.0072826    1.2707143    2.7365684  -0.22989258   0.84719096    0.9980641   0.74286639   -1.2298232            1 -0.095999069  -0.36550406  -0.36863439   0.44614125  0.010615767 0.0016635711 -0.0036924153  -0.24923412  -0.23846775   0.71109803        0.075    1.3480237        1e-10 1.5802178e-11    6.3282414    2.4398787    31.520363  0.012294513   -0.1951079 -0.0037725869   0.21249032     1.498797 -0.063142104 
 2911000    4.0164433    1.2831223     2.733321  -0.23485361   0.85546344    1.0084006   0.74971131   -1.2298232            1  -0.11407589  -0.33812648  -0.41179942   0.40769825 0.0049858254 -0.000412205 -0.036026594  -0.26872288  -0.25802006   0.71643836        0.075    1.3529409        1e-10 1.5920852e-11    6.2810707    2.4467883    31.520363 -0.0099920671  -0.20531602 0.0057541505   0.21645561  -0.47367672  -0.88124172 
 2912000    4.0142998    1.2722252    2.7420747  -0.23297277   0.84819828   0.99901964   0.74390964   -1.2298232            1  -0.10847043  -0.39142236  -0.34042214   0.40643321 -0.0065869818  0.023206526  0.056564571  -0.26192068  -0.25107551   0.72123568        0.075    1.3655234        1e-10 1.602746e-11     6.239292    2.4323888    31.520363 -0.0018748131  -0.20351255 0.00037193226   0.20722819   -1.0581731   0.86015922 
 2913000    4.0352753    1.2892011    2.7460741  -0.23003887   0.85951624    1.0138616   0.75279005   -1.2298232            1   -0.1470263   -0.4068938  -0.40494068   0.37075559 0.0072074231  0.065736414 -0.010604032  -0.30230835  -0.29174999   0.71839426        0.075    1.3909376        1e-10 1.5964317e-11    6.2639699     2.444091    31.520363 -0.0074412406  -0.22265166 -0.0035706339   0.19502426    -1.280369    1.0701098 
 2914000    4.0084227    1.2688836    2.7395391  -0.22804547   0.84597044    1.0001949   0.73932659   -1.2298232            1  -0.15028873  -0.42285973  -0.38489307   0.35688662 -0.011435156 0.0028939889  0.057760562   -0.3027936  -0.29306157   0.70659629        0.075     1.385841        1e-10 1.570214e-11    6.3685588    2.4349342    31.520363 -0.0085071985  -0.20590711  0.003104116   0.20917734    1.0943965    1.4572368 
 2915000    4.0296602    1.2851572     2.744503  -0.22586021   0.85682015    1.0033236   0.75552036   -1.2298232            1  -0.15583675  -0.41672874  -0.38404266   0.33326115  0.027465253  0.007741291 -0.019874088    -0.311682  -0.29905621   0.71562626        0.075     1.381635        1e-10 1.5902806e-11    6.2881985    2.4498847    31.520363 -0.00083782372    -0.171993 0.0002417004   0.18811588   -2.3838403   0.72101381 
 2916000    4.0148392    1.2701553    2.7446839  -0.23667055   0.84681831    1.0059001   0.73681322   -1.2298232            1  -0.17689918  -0.44147704  -0.43907834   0.34985785 0.0020460134 -0.038361265 0.0011974095  -0.32888561  -0.32048641   0.72295551        0.075    1.3758919        1e-10 1.6065678e-11    6.2244495    2.4398249    31.520363  -0.01002455   -0.2177302 -0.0030205371   0.21615516   0.52909958    1.2663793 
 2917000    4.0203724    1.2711269    2.7492454  -0.22812672    0.8474661    1.0004463   0.74168346   -1.2298232            1 -0.057701196  -0.32651175   -0.3540532   0.50746136 -0.0013781432  0.062488521 -0.0089100578  -0.21069224  -0.20050993   0.71535113        0.075    1.3765902        1e-10 1.5896692e-11    6.2906171    2.4414532    31.520363 -0.0025845581  -0.19061379  -0.01063546   0.22462025   -0.2767571    2.4397699 
 2918000    4.0108934    1.2823291    2.7285643  -0.22582006   0.85493463    1.0107324   0.74720293   -1.2298232            1  -0.17807061  -0.42894465  -0.40251657    0.2972494  0.015324729  0.054707466  0.030471318  -0.33220018  -0.32234762   0.71154991        0.075    1.3757626        1e-10 1.581222e-11    6.3242226    2.4374114    31.520363 0.0023818726  -0.18711673 0.00017412954   0.18784655  -0.55000354  -0.47702379 
 2919000    4.0250283    1.2801444    2.7448838  -0.23357943   0.85347811    1.0020279    0.7507619   -1.2298232            1    -0.207057  -0.42941885  -0.44866158   0.25690944 0.0039604381 -0.087785341   0.03390827   -0.3619207   -0.3500915   0.71760649        0.075    1.3703108        1e-10 1.5946811e-11    6.2708463    2.4468404    31.520363 0.00048339896  -0.20654784 0.0015753721   0.19031235   0.65088514  -0.36369527 
 2920000    4.0316514    1.2929629    2.7386885  -0.23458651   0.86202423    1.0152928   0.75604344   -1.2298232            1   -0.1124104  -0.37527078  -0.37957579   0.41761537 -0.0062618514   0.04924648  0.045409696  -0.26836355  -0.25733839    0.7193238        0.075    1.3817184        1e-10 1.5984973e-11    6.2558754    2.4422831    31.520363 -0.0064683057  -0.19618598 -0.012474937   0.18118896   0.27867572  -0.12728371 
 2921000    4.0078559    1.2745193    2.7333366  -0.23382234    0.8497278    1.0034561   0.74342768   -1.2298232            1  -0.23454794  -0.48343135  -0.42993071   0.20971823 -0.0091110023 -0.049540456 -0.020380188  -0.38789877  -0.37778631   0.71816498        0.075    1.3698983        1e-10 1.5959222e-11    6.2659697    2.4399742    31.520363 -0.0056361112  -0.21507409  0.008765939   0.20829164   0.56212056   -2.6244489 
 2922000     4.045771    1.2871029    2.7586681  -0.22506449   0.85811737   0.99651183   0.76242925   -1.2298232            1 -0.039568412  -0.30265456  -0.31634375   0.50029308 -0.0074821762 -0.021543805 -0.025205307   -0.1968388  -0.18181552   0.71767349        0.075    1.3525658        1e-10  1.59483e-11    6.2702608    2.4522882    31.520363 0.00083965112  -0.21196992 -0.0012515336   0.19768476   -0.9326335   0.25904516 
 2923000    4.0127433    1.2845744    2.7281688  -0.23169822   0.85643162    1.0057982   0.75315051   -1.2298232            1 -0.087326193  -0.32331586  -0.35590466   0.41724195 0.0075633644 -0.059988901  0.016713453   -0.2426826  -0.23089888   0.71730343        0.075    1.3541275        1e-10 1.5940076e-11    6.2734958    2.4414696    31.520363 0.0058657638  -0.21672579 -0.0061660332   0.19335664  -0.43802543    1.7912416 
 2924000    4.0433206    1.2971014    2.7462192  -0.23630447    0.8647834    1.0014516    0.7702905   -1.2298232            1  -0.16444009  -0.44702207  -0.39472195   0.34842376 -0.011062432  0.035768226  -0.01515905  -0.32333206  -0.30739232   0.71383597        0.075    1.3583318        1e-10 1.5863021e-11    6.3039693     2.441034    31.520363 -0.005349437  -0.19619263 0.00061858603   0.17618731    1.0126276    1.0772399 
 2925000    4.0145388    1.2760049    2.7385339  -0.23053444   0.85071824   0.99453365   0.75127804   -1.2298232            1  -0.14322427  -0.38389886  -0.38553244    0.3397585 0.0074696224  0.024378911  0.050836193  -0.29819443    -0.285189   0.71453817        0.075    1.3435323        1e-10 1.5878626e-11    6.2977741    2.4479031    31.520363 0.0026947971  -0.19226091 -0.0070869344   0.18446963    1.3246604   0.30699822 
 2926000    4.0059593    1.2853237    2.7206356  -0.23510707   0.85693116    1.0197028   0.74437363   -1.2298232            1   -0.1754466  -0.42144093  -0.42577194   0.32087308 -0.005093607  0.043915725 -0.0042896945  -0.32899255  -0.32100409   0.72063841        0.075    1.3510279        1e-10 1.6014187e-11    6.2444631    2.4487104    31.520363 0.0046477755  -0.18794688 0.0032074793   0.21092902   -1.1043319    1.0637438 
 2927000    4.0206379     1.283272    2.7373659  -0.23239885   0.85556326   0.99789483   0.75715036   -1.2298232            1 -0.050179124  -0.33129981   -0.3097846   0.49054703 0.00064181007  0.070587939  0.034443349  -0.20636061  -0.19262365    0.7184716        0.075    1.3520816        1e-10 1.5966036e-11    6.2632956    2.4515226    31.520363 -0.0033247429  -0.21695451 -0.00090112072   0.20452282  -0.53433628    3.9707941 
 2928000    4.0339019     1.284546    2.7493559  -0.23454657   0.85641264    1.0078216   0.75171816   -1.2298232            1   -0.2731722  -0.51256518  -0.48566523   0.17871379 0.00064166864  0.056225001 -0.064312995  -0.42823316  -0.41703372    0.7149892        0.075    1.3448775        1e-10 1.5888649e-11    6.2938013     2.465786    31.520363 -0.0056498299  -0.21492502 -0.013437999   0.19008059   0.89009508   0.60238258 
 2929000     4.011072     1.264787     2.746285   -0.2266535   0.84323922   0.99080307   0.74120433   -1.2298232            1   -0.3054127  -0.54465096  -0.52825327   0.15666614 0.0082204731  0.015699757 -0.026446407  -0.45830491  -0.44684491   0.71657602        0.075    1.3518284        1e-10 1.5923912e-11    6.2798641    2.4565941    31.520363 0.0025379469  -0.19242449 -0.0037828395   0.18870962   -0.5460496   -1.2072663 
 2930000    4.0250792    1.2865528    2.7385265  -0.22818812   0.85775057    1.0093184   0.75294627   -1.2298232            1  -0.11577522  -0.38329846   -0.3452771   0.38124991 -0.0066266059 -0.045254938 -0.0092769975   -0.2710895  -0.25985039    0.7168823        0.075    1.3643731        1e-10 1.5930718e-11    6.2771811    2.4366935    31.520363 -0.0041576244  -0.20828329 -0.00067919585   0.20583286    -1.485325   0.41709624 
 2931000     4.004155    1.2723843    2.7317707   -0.2260829   0.84830439    1.0162622   0.73215712   -1.2298232            1  -0.12714881  -0.39179236  -0.36048745   0.37083338 -0.0078672418 -0.025185332 0.0015063675   -0.2781748  -0.27221519   0.71835105        0.075    1.3555125        1e-10 1.5963357e-11    6.2643467    2.4486525    31.520363 -0.0096171791  -0.17706479 0.0020514312   0.19275997   -1.9150884   -0.7784687 
 2932000    4.0343157    1.2824095    2.7519061  -0.22423775   0.85498825    1.0091996   0.74835432   -1.2298232            1    -0.152695  -0.39122882  -0.38532645   0.31847026 -0.014751789 -0.044153676   0.04800501  -0.30706208  -0.29675323   0.71291588        0.075    1.3617635        1e-10 1.5842575e-11    6.3121051    2.4333924    31.520363 0.0027867482  -0.19671563 -0.0047190609   0.19900387    1.3223532   0.90181212 
 2933000    4.0133634    1.2684667    2.7448967  -0.23229892    0.8456925    1.0008894    0.7383757   -1.2298232            1   -0.2376751  -0.49508147  -0.42850305   0.21055923 -0.0071392981   0.02083133  0.050050788  -0.38998383  -0.38054708   0.71867805        0.075    1.3582918        1e-10 1.5970623e-11    6.2614964    2.4789773    31.520363 -5.2728589e-05  -0.19204338 -0.00060621113   0.17761699    1.3143366   0.50829987 
 2934000    4.0327217    1.2836962    2.7490255  -0.23209401   0.85584606     1.007379   0.75106574   -1.2298232            1  -0.13452422  -0.40646908  -0.37693037    0.3798268 -0.0012747095 -0.0012864678  0.036653401  -0.28945059  -0.27832256   0.71415414        0.075    1.3483473        1e-10 1.5870092e-11    6.3011607    2.4411095    31.520363 -0.0024515555  -0.18832504 -0.0065334018   0.18624621   -1.2368836  -0.12739715 
 2935000    4.0371695    1.2859499    2.7512196  -0.22755287   0.85734866    1.0099929   0.75179943   -1.2298232            1  -0.13883653  -0.43762611  -0.35686809   0.37798462 -0.011207438 -0.031488089 0.0083256095  -0.29391425  -0.28300799   0.71203865        0.075    1.3511034        1e-10 1.5823081e-11    6.3198816     2.445625    31.520363 0.0015245529  -0.18747258 -0.0095756299    0.2027784  -0.78527369  -0.52902173 
 2936000    4.0469024    1.2802509    2.7666515  -0.22357332   0.85354907    1.0103579   0.74511755   -1.2298232            1  -0.16811217  -0.40816645  -0.43035291   0.33418284 -0.015100085  0.016191087  0.027211259  -0.32181158  -0.31233574   0.71270285        0.075    1.3446904        1e-10 1.5837841e-11    6.3139918    2.4600316    31.520363 0.0024654327  -0.19884058 -0.0066089182    0.1946307   0.13863708  -0.88848778 
 2937000    4.0352462    1.2881237    2.7471225  -0.23371559    0.8587979     1.014087   0.75141855   -1.2298232            1  -0.20758832  -0.44705072  -0.45732613    0.2816119 -0.0085780352 -0.074673694 -0.052050079  -0.36258747  -0.35234419   0.71405663        0.075     1.344855        1e-10 1.5867925e-11    6.3020211    2.4455083    31.520363 -0.0032727917  -0.18846726 -0.0047312796   0.20187602    1.8781569  -0.21864836 
 2938000    4.0541213    1.2873576    2.7667637  -0.22300863   0.85828717    1.0152757   0.74973173   -1.2298232            1  -0.20068505  -0.44462014  -0.46079537   0.30336038  0.006187507 -0.0045448445  0.010037834  -0.35533625   -0.3456106   0.72037814        0.075    1.3428748        1e-10 1.6008403e-11    6.2467192    2.4461915    31.520363  0.016352192   -0.2336096 5.4446389e-05   0.21022137   -1.2394544  -0.90047725 
 2939000    4.0455104    1.2894225    2.7560879  -0.22109387   0.85966383    1.0074291   0.75749115   -1.2298232            1   -0.2994776  -0.49075088   -0.5119684   0.10428648  0.014635399  0.030625696  -0.03480108  -0.45572938  -0.44328309    0.7158778        0.075    1.3659815        1e-10 1.5908396e-11     6.285989    2.4433779    31.520363  -0.02086398  -0.21166683  0.003159614     0.195524   -1.9319157   0.97403131 
 2940000    4.0332516    1.2931501    2.7401015   -0.2353018   0.86214906    1.0186437   0.75393576   -1.2298232            1  -0.11379123  -0.39775843  -0.37725882   0.43364356 0.0027357968 -0.041328935  0.013232287  -0.26930962  -0.25919755   0.71375345        0.075    1.3622205        1e-10 1.5861188e-11    6.3046981    2.4510935    31.520363 -0.0049232531  -0.18114018 -0.0040234002   0.21772087 -0.063139216     1.633555 
 2941000    4.0325063    1.2893899    2.7431163  -0.23194562   0.85964213    1.0177916   0.75028347   -1.2298232            1 -0.052543697  -0.30703586  -0.31448682   0.46389158 -0.011057223   0.12911591  0.022226742  -0.20730871  -0.19782838   0.71237542        0.075    1.3545829        1e-10 1.5830565e-11     6.316894    2.4449708    31.520363 -0.0022083197  -0.21706582 -0.0062891277   0.17915058   -2.0177624    2.5372835 
 2942000    4.0447621    1.2929644    2.7517977  -0.22619439   0.86202524    1.0237295   0.75020685   -1.2298232            1  -0.17625652  -0.41785651  -0.43444314   0.32353009  0.014171164 -0.012636384  0.036377563  -0.33100572  -0.32238881   0.71291577        0.075    1.3651084        1e-10 1.5842573e-11    6.3121061    2.4569818    31.520363 0.0010537021  -0.19863234 -0.0030987657   0.18308911   0.37593516   0.47735061 
 2943000    4.0436299     1.292596    2.7510339  -0.23437481   0.86177959    1.0164533   0.75482639   -1.2298232            1  -0.13873053  -0.38608566   -0.4090599   0.37895397  0.022428877  0.021601158   0.05052611  -0.29443263  -0.28382418   0.71664273        0.075    1.3532092        1e-10 1.5925394e-11    6.2792795    2.4543644    31.520363 -0.0025949265  -0.17956536 0.00098082005   0.21598644  -0.84494172    1.2566743 
 2944000    4.0386261     1.278501    2.7601251  -0.22895063   0.85238242    1.0175254   0.73818341   -1.2298232            1  -0.22523818  -0.47462228  -0.46088906    0.2597968 0.0090436589 0.0015202171 -0.036806749  -0.37750725  -0.37048487   0.71674902        0.075    1.3476806        1e-10 1.5927756e-11    6.2783483    2.4423096    31.520363 0.0040967013  -0.18808264 -0.0087913847   0.22025447   0.45155167    2.0946119 
 2945000    4.0252172    1.2876961    2.7375211  -0.23860988   0.85851283    1.0089835   0.75446784   -1.2298232            1  -0.11001918  -0.34531747  -0.37982857   0.39508851 0.0011125986   0.10246536 -0.016636743  -0.26564732  -0.25404655   0.71347411        0.075    1.3547028        1e-10 1.585498e-11    6.3071665    2.4420578    31.520363 -0.0022823841  -0.19557241  0.004171797    0.2074199 -0.061219713    1.4571854 
 2946000    4.0628653    1.3005467    2.7623187  -0.21544481   0.86708037    1.0115617   0.76718092   -1.2298232            1  -0.19189455  -0.44481144  -0.42796721     0.297095  0.019662022  0.046972246  0.013500838  -0.35014509  -0.33628995   0.71039392        0.075    1.3752487        1e-10 1.5786531e-11    6.3345137    2.4392719    31.520363 0.0057994985  -0.19068634 -0.0045568547   0.21185192  -0.49147426   0.96676064 
 2947000    4.0512913    1.2823524    2.7689389  -0.22380079   0.85495015    1.0068043   0.74994748   -1.2298232            1  -0.16776302  -0.41690305  -0.39465153   0.30826553 0.0024585199 -0.014168899 -0.050112916  -0.32245872  -0.31147932   0.71358081        0.075    1.3597669        1e-10 1.5857351e-11    6.3062234    2.4396164    31.520363 -0.0020335831  -0.18271676 -0.0027248297       0.1529  -0.16111572   0.47752171 
 2948000    4.0420665    1.2846235     2.757443  -0.23005866   0.85646431    1.0131793   0.74809802   -1.2298232            1  -0.19930012  -0.42873307  -0.41853149    0.2493642 0.0030431485   0.06492366  -0.01058101  -0.35361433  -0.34392642   0.71557324        0.075    1.3631903        1e-10 1.5901628e-11    6.2886644    2.4443023    31.520363 -0.0049516156  -0.18720765 0.0033059336   0.21775951   0.50143287   0.76386038 
 2949000    4.0409949    1.2789548    2.7620402   -0.2256927   0.85268496    1.0072544   0.74580301   -1.2298232            1  -0.12664062  -0.40924367  -0.37456127   0.40388309 0.0095801991    0.1224307  0.014453295  -0.28048142  -0.27042118   0.71345445        0.075    1.3645591        1e-10 1.5854543e-11    6.3073403    2.4583823    31.520363 -0.0037934299  -0.20813379 0.0011516187   0.21734294  -0.77261779    2.0800153 
 2950000     4.045051    1.2872278    2.7578232  -0.21980888   0.85820062    1.0085809   0.75421821   -1.2298232            1  -0.12745664  -0.39043579  -0.40642484   0.41449071 -0.0054599915  0.086067331  0.041684935  -0.28303329  -0.27142654   0.70858691        0.075    1.3701639        1e-10 1.5746376e-11    6.3506677    2.4379775    31.520363 0.0010516271  -0.20483938 -0.003262402    0.2242959  -0.85830829    2.4514358 
 2951000     4.028163    1.2836488    2.7445142  -0.22602898   0.85581449    1.0218181   0.74102026   -1.2298232            1  -0.17835173  -0.43094007  -0.47883171   0.37471657 0.00053361118  0.073004123 -0.0087272179  -0.33120597  -0.32421119    0.7151628        0.075    1.3684384        1e-10 1.5892507e-11    6.2922736    2.4427349    31.520363  0.012178443  -0.17641249 -0.0052877937   0.21658878   -1.2036248    1.7397697 
 2952000     4.028522    1.2777401    2.7507819  -0.23098296   0.85187513    1.0141509   0.73966024   -1.2298232            1  -0.12106538  -0.36853778  -0.39828173   0.40362337 -0.0046562911  0.041113859 -0.018954806  -0.27363908  -0.26583038   0.72042666        0.075    1.3754454        1e-10 1.6009481e-11    6.2462985    2.4538285    31.520363 -0.0015733969   -0.1939982 -0.011015614   0.20796052   -1.2232774    2.5811537 
 2953000     4.043241    1.2892103    2.7540307  -0.22398206   0.85952234    1.0152927   0.75181004   -1.2298232            1  -0.15567702  -0.40305998  -0.42110324   0.35713217 0.0030104625 -0.0034976819 -0.028585471  -0.31075692  -0.30060499   0.71273884        0.075     1.392189        1e-10 1.5838641e-11    6.3136731    2.4446244    31.520363 -0.005947302  -0.19471834 -0.010218921   0.21395298   0.24503273   0.91450669 
 2954000     4.039279    1.2882965    2.7509825  -0.23010594   0.85891309    1.0025983    0.7595638   -1.2298232            1 -0.082385819  -0.36375753  -0.33732511   0.45392518 -0.0014921332 -0.032825568  0.012109961  -0.23906513  -0.22550174    0.7099658        0.075     1.389188        1e-10 1.5777018e-11    6.3383334    2.4334194    31.520363  0.012191946  -0.20336607 0.0041571825   0.19763265   0.21009801    2.4534339 
 2955000    4.0267955    1.2838821    2.7429134  -0.22680445   0.85597005    1.0046022   0.75319711   -1.2298232            1  -0.18110529  -0.44140948    -0.440051   0.33814461 -0.010751569 -0.033781247  0.011015294  -0.33647131  -0.32450725    0.7186918        0.075    1.3759526        1e-10 1.5970929e-11    6.2613766    2.4546525    31.520363 -0.0039349775  -0.21787644 0.0021802523    0.1911309    1.0062058    1.6227027 
 2956000     4.021976    1.2793087    2.7426673  -0.22730714   0.85292093     1.010275   0.74411202   -1.2298232            1  -0.20117224  -0.46987743  -0.44082188    0.3071826  0.016525502 -0.033024406  0.013341952  -0.35466423  -0.34538397   0.71788666        0.075    1.3886825        1e-10 1.5953037e-11     6.268399    2.4422719    31.520363 0.0020573228  -0.22275493 -0.00067748534   0.21687382   -1.4762707    1.6237135 
 2957000     4.037399    1.2807496    2.7566495  -0.22472395   0.85388156    1.0007474    0.7523307   -1.2298232            1  -0.17868032  -0.44869917  -0.44309405   0.35575225 0.0010363544 -0.094940892  0.043041735  -0.33386763  -0.32153204    0.7157634        0.075    1.3782752        1e-10 1.5905853e-11    6.2869937    2.4535291    31.520363 -0.0077171376  -0.20933146 -0.0010654255   0.19154678   -0.1886285   0.28191537 
 2958000    4.0184102    1.2778499    2.7405603  -0.23008012   0.85194832    1.0071216   0.74464847   -1.2298232            1  -0.12629054  -0.38865333  -0.38431207   0.39409377 0.0017045765 -0.061486464 -0.018007041  -0.27989319  -0.27005213    0.7128743        0.075    1.3663978        1e-10 1.5841651e-11    6.3124734    2.4543827    31.520363 0.0023777325  -0.19641538 -0.010929351   0.17599208    1.0255593   0.32991684 
 2959000    4.0365761    1.2868714    2.7497047  -0.22202956   0.85796299   0.99552874   0.76284833   -1.2298232            1  -0.19380053  -0.42787507   -0.4594661   0.30593959  -0.01586642 -0.057927294  0.012084888  -0.35115736   -0.3359073   0.71658737        0.075    1.3626297        1e-10 1.5924164e-11    6.2797646    2.4428164    31.520363 -0.0036046238  -0.20221188 0.0089818105   0.22240663   0.15178214  -0.83002755 
 2960000    4.0462371    1.2900908    2.7561463  -0.22969048   0.86010941    1.0130689   0.75434229   -1.2298232            1  -0.13573279  -0.38342804  -0.41820397   0.39443363 0.0046704957 -0.0053707452  -0.01316328  -0.29133504  -0.28034334   0.71950488        0.075    1.3768806        1e-10 1.5988997e-11    6.2543009    2.4392061    31.520363 0.0024920813  -0.18236606 -0.012695746   0.22020969   0.24011414   0.33558995 
 2961000    4.0388524    1.2870856    2.7517668   -0.2324951   0.85810581    1.0095823   0.75336478   -1.2298232            1  -0.14374685  -0.39306046  -0.38484212   0.34666204 -0.0028452427 -0.0024450778   0.03706031  -0.29914746  -0.28785969    0.7187076        0.075    1.3644316        1e-10 1.597128e-11    6.2612389    2.4594459    31.520363 0.00022431296  -0.17175287  0.010236448   0.18116299    1.1669772    2.0489309 
 2962000    4.0591491    1.2886589    2.7704902  -0.22859381   0.85915471    1.0115364   0.75378737   -1.2298232            1  -0.12697053  -0.41065143  -0.36408237   0.39382221 -0.0034376506  0.012535338 -0.015594967  -0.28245831  -0.27136232   0.71249615        0.075    1.3740699        1e-10 1.5833248e-11    6.3158236    2.4398553    31.520363 0.00072800709  -0.19337535 -0.0026992628   0.19412722    1.1667613  -0.42888959 
 2963000    4.0468215    1.3006256    2.7461959   -0.2295994   0.86713299     1.014858   0.76498885   -1.2298232            1  -0.14072185  -0.40357382  -0.37032402   0.35173231 -1.9690607e-06 -0.062859392 -0.021573733  -0.29852021  -0.28558778   0.71097091        0.075    1.3646837        1e-10 1.5799353e-11    6.3293729    2.4409069    31.520363  0.010427164  -0.20896827 -0.0062247495   0.20057439  -0.61078139  -0.36198121 
 2964000    4.0409544    1.2775783    2.7633761  -0.23220702   0.85176728   0.99923988   0.74979636   -1.2298232            1  -0.18246004  -0.44159623  -0.43826775   0.33248385 0.0034820415  0.040841817 0.0064871542  -0.33712457  -0.32509656   0.70872081        0.075    1.3686045        1e-10 1.5749351e-11    6.3494678    2.4464199    31.520363 0.0057629396  -0.20192711 -0.0061497901   0.20959826   -2.2145301  -0.31797719 
 2965000    4.0305738    1.2798744    2.7506993  -0.22638706   0.85329809    1.0041724   0.74897329   -1.2298232            1  -0.16792011   -0.4118484  -0.40776677   0.31585483 0.0044566871  0.037879056 -0.030668086  -0.32241486  -0.31126073   0.71286139        0.075    1.3781559        1e-10 1.5841364e-11    6.3125876    2.4340159    31.520363 -0.004879536  -0.18810572 0.0022850117   0.22597108   -1.2882106  -0.33925127 
 2966000    4.0288648    1.2897329    2.7391319  -0.22569696   0.85987077    1.0134644   0.75366483   -1.2298232            1  -0.21059027  -0.44907763  -0.46700085   0.28430768 0.0041307411 0.0094271577  0.015409275  -0.36605277  -0.35525726   0.72000408        0.075    1.3765483        1e-10 1.6000091e-11    6.2499646     2.447192    31.520363 -0.00073296327   -0.2042509 -0.0082595798   0.19769937   0.32138219    1.5196926 
 2967000    4.0358416    1.2850814    2.7507602  -0.22961507   0.85676958     1.002734   0.75584285   -1.2298232            1  -0.19008801  -0.43631084  -0.47240744   0.33845426  0.011755122 -0.012192161  0.015792665  -0.34599978  -0.33322329   0.72142532        0.075    1.3853814        1e-10 1.6031674e-11    6.2376519    2.4639899    31.520363 0.0022639079  -0.19501831 -0.0017689806   0.20777697  -0.50925455  -0.16908544 
 2968000    4.0387757    1.2747866    2.7639891  -0.22707729   0.84990603    1.0017753   0.74489241   -1.2298232            1  -0.14744802  -0.40207021  -0.40643399   0.36616014 0.0085315756 -0.035889083  0.017848344  -0.30110099  -0.29044645   0.71621241        0.075    1.3856691        1e-10 1.5915831e-11    6.2830523      2.44352    31.520363 0.00026596119  -0.22065461  -0.01488053   0.17425519   -0.1884904    1.9399307 
 2969000    4.0310907    1.2819131    2.7491776  -0.22520843   0.85465729     1.004282   0.75119735   -1.2298232            1 -0.073871639  -0.34539946  -0.33458544   0.45836998 0.0037261529 0.0070627744  0.047096395  -0.22882516   -0.2172279    0.7126718        0.075    1.3825103        1e-10 1.5837151e-11     6.314267    2.4454004    31.520363 -0.011214487   -0.1876783 -0.0098841566   0.19141834   -0.3108987    2.5025713 
 2970000    4.0265477    1.2772244    2.7493232  -0.23369544   0.85153134   0.99501554   0.75232041   -1.2298232            1  -0.14252541  -0.40793013  -0.40370897   0.38406286   0.00566683 -0.044138471  0.016019476  -0.29771059  -0.28455893   0.71521735        0.075    1.3638117        1e-10 1.5893719e-11    6.2917937    2.4482548    31.520363 -0.0059353861  -0.19944474 0.0012928525   0.20141533    1.4918017   0.15976734 
 2971000    4.0135231    1.2776288    2.7358943   -0.2330319   0.85180092   0.99421695   0.75332921   -1.2298232            1  -0.15882768  -0.39527872  -0.40866395   0.32745964 -0.0078077777  0.016661753  0.023279065  -0.31422095   -0.3007472   0.71753229        0.075    1.3738219        1e-10 1.5945162e-11    6.2714948    2.4389309    31.520363 0.0028306524   -0.1718462 -0.0093053441   0.19321589    2.6891187    1.1573201 
 2972000     4.022838    1.2736333    2.7492047  -0.22677816   0.84913711    1.0068713   0.74006477   -1.2298232            1   -0.1796348  -0.44490427    -0.437227   0.34322686 0.0047920071 -0.026708056  0.051794801  -0.33229195  -0.32336067   0.71502982        0.075    1.3836566        1e-10 1.5889552e-11    6.2934438     2.449857    31.520363 -0.0071526967  -0.20541956 -8.2718689e-05   0.18950308  0.080597566  -0.55740714 
 2973000     4.026846    1.2822106    2.7446354  -0.22822784    0.8548556    1.0049021   0.75110383   -1.2298232            1  -0.17390717  -0.42279276  -0.41132154   0.31239279 -0.00091531775  0.038708862 0.0063270169   -0.3288414  -0.31735194   0.71298777        0.075    1.3889927        1e-10 1.5844173e-11    6.3114687     2.436024    31.520363 -0.0010083958   -0.1924247 -0.00093730775   0.19744113  -0.16223151   0.34357549 
 2974000    4.0364214    1.2877896    2.7486318  -0.23080404   0.85857517    1.0033849   0.75844767   -1.2298232            1 -0.096545028  -0.38738642  -0.33294237    0.4306937 -0.0022656518 -0.014719724  0.020257153  -0.25299411  -0.23977322   0.71764205        0.075    1.3754544        1e-10 1.5947601e-11    6.2705355     2.447657    31.520363 -0.0032827615  -0.19013593 -0.006528215   0.20567457   0.35276032    1.6937344 
 2975000    4.0506095    1.2859954    2.7646141  -0.22808595   0.85737899    1.0000753   0.75871385   -1.2298232            1  -0.19935956  -0.45738473  -0.43256394   0.29186999 -0.0007474784  0.052823798 -0.026907581  -0.35586355  -0.34211534   0.72178902        0.075    1.3672504        1e-10 1.6039756e-11    6.2345088    2.4384601    31.520363 0.0041361741  -0.20511252 -0.012028209   0.20480259    1.1367417   0.98739877 
 2976000     4.036055    1.2868171    2.7492379  -0.22991046   0.85792678     1.004643   0.75647988   -1.2298232            1 -0.024271774  -0.32258425  -0.30477181   0.55454073  0.020600186 0.0075511256 0.0091913488  -0.18031495  -0.16767956    0.7157705        0.075    1.3557051        1e-10 1.5906011e-11    6.2869314    2.4506217    31.520363 -0.0077813742    -0.190334 -0.00088893118   0.21155282   0.56270663    1.5827832 
 2977000    4.0340792    1.2827375    2.7513416   -0.2240632   0.85520695    1.0064437   0.75063151   -1.2298232            1  -0.23284843   -0.4770796  -0.44966008   0.22819439 -0.0012827094  0.037582862  -0.00380342  -0.38768523  -0.37651326   0.71267513        0.075    1.3886004        1e-10 1.5837225e-11    6.3142375    2.4402221    31.520363 0.0040455722  -0.18773199  0.011114031   0.21865785   -2.4516331  -0.52632764 
 2978000    4.0102105    1.2750102    2.7352002  -0.22904888    0.8500551    1.0019296   0.74503782   -1.2298232            1  -0.10087134  -0.37106413   -0.3362199      0.40467  0.027343865  0.019748394 -0.0077216501  -0.25455431  -0.24389181   0.71554636        0.075     1.390759        1e-10 1.590103e-11    6.2889007    2.4420131    31.520363 -0.0087778509  -0.21306045 0.0049121714   0.20119046   -0.5030636    2.7834699 
 2979000    4.0145519    1.2833131    2.7312388  -0.23845095   0.85559065    1.0093793   0.74924935   -1.2298232            1  -0.16589878  -0.39302673  -0.42329288   0.31862327 0.0062197518  0.028300704   0.01215608  -0.32045048  -0.30998265   0.72156198        0.075    1.3937236        1e-10 1.6034711e-11    6.2364705    2.4412962    31.520363 0.00040829606  -0.21073399 -0.0058934852   0.20391052   0.33698743   0.75168723 
 2980000    4.0201079    1.2832389     2.736869   -0.2344975   0.85554123    1.0045047   0.75253895   -1.2298232            1  -0.12464872  -0.39663747  -0.39321522   0.41590652 -0.0041244787  0.021389697 0.0039745609  -0.27987898  -0.26803678    0.7144462        0.075    1.3909868        1e-10 1.5876582e-11    6.2985848    2.4355543    31.520363 -0.012174728  -0.20460311 -0.0011874226   0.18242141  -0.46525926    1.9340761 
 2981000    4.0292539    1.2828153    2.7464386  -0.22248717   0.85525881    1.0027876   0.75324936   -1.2298232            1  -0.16384119  -0.37527591  -0.44831257   0.33206491 -0.0014285125  0.073826539  0.044283591  -0.31921799  -0.30698413   0.71196227        0.075    1.4134367        1e-10 1.5821384e-11    6.3205596    2.4411088    31.520363 -0.0056056042  -0.20491322 -0.011819852    0.1821243   -1.6353147   0.52511819 
 2982000    4.0419437     1.280045    2.7618987  -0.22927496   0.85341178    1.0099941   0.74513696   -1.2298232            1  -0.15653958  -0.45533547   -0.3852655   0.37098225 0.0043065961   0.13494927  0.026354938  -0.31024299  -0.30071121   0.71989974        0.075    1.4094142        1e-10 1.5997772e-11    6.2508704    2.4434764    31.520363 0.00048855915  -0.21174919 -0.0099260252   0.19979103  -0.72515979    2.4950209 
 2983000    4.0417778    1.2832953    2.7584825  -0.23230704   0.85557881    1.0133101   0.74650914   -1.2298232            1  -0.12879954  -0.37241833  -0.41105106   0.39707076  0.008333013  0.077084671  0.042055783    -0.282786  -0.27344451   0.72291727        0.075    1.3960239        1e-10 1.6064828e-11    6.2247787    2.4492041    31.520363 0.0072751321  -0.22052153  -0.00479595   0.18804702   0.46127989  -0.44337145 
 2984000    4.0313786    1.2775246     2.753854  -0.22495449   0.85173146    1.0007783   0.74867118   -1.2298232            1 -0.096502829  -0.37053631  -0.34963865   0.43066648 -0.011749464  0.035949799 0.0052487414  -0.25093527  -0.23935895   0.71235444        0.075    1.4020224        1e-10 1.5830099e-11      6.31708    2.4474007    31.520363 -0.0060065408  -0.19934821 -0.0014666176   0.20138932   0.44740459    1.4233914 
 2985000    4.0328733    1.2781429    2.7547303  -0.22289118   0.85214369    1.0065411   0.74538078   -1.2298232            1   -0.1658787  -0.42996551  -0.43633578   0.36866521 -0.0076037546 0.0094162746  0.049839654  -0.31963241  -0.30955743   0.70712013        0.075    1.4157517        1e-10 1.5713781e-11    6.3638408    2.4391946    31.520363 -0.0095031385  -0.17066886 -0.0028723098   0.16587202   -1.2777628    2.9972246 
 2986000    4.0279998    1.2837193    2.7442805  -0.23468731   0.85586148    1.0078968   0.75073352   -1.2298232            1  -0.15760118  -0.38296101  -0.43116466   0.34132212  0.018100315 0.0065282235  0.048210807  -0.31245903  -0.30147343   0.71830632        0.075    1.4030786        1e-10 1.5962363e-11    6.2647367    2.4454217    31.520363 -0.0058808454  -0.20278569 -0.0098384681   0.20163935   0.89030759    3.0085078 
 2987000    4.0178938    1.2879556    2.7299382  -0.23087224   0.85868584    1.0109469   0.75340195   -1.2298232            1  -0.13928823  -0.37148654  -0.38316859   0.33679045   0.01165842 -0.037657356  0.051268721   -0.2946965  -0.28359586   0.71767988        0.075    1.4061869        1e-10 1.5948442e-11     6.270205    2.4523595    31.520363 0.0073454027  -0.19368939 -0.0038704047   0.18571568    1.3205604   0.30822061 
 2988000    4.0197213    1.2768968    2.7428245  -0.23107659   0.85131292   0.99122629   0.75457303   -1.2298232            1  -0.16138923  -0.40056211  -0.41091066   0.32730508  0.024839748 -0.030493339  0.036265904  -0.31703907  -0.30288185   0.71182797        0.075     1.387449        1e-10 1.5818399e-11    6.3217522    2.4569118    31.520363 -0.012143541  -0.20040377 -0.0070977728   0.17254658  -0.74230655    1.0746038 
 2989000    4.0205675    1.2722825    2.7482851  -0.22476376   0.84823651   0.98603088    0.7529627   -1.2298232            1  -0.19824508  -0.43225067  -0.41553421   0.25304965 0.0029469867 -0.013628457 -0.020602624  -0.35356275  -0.33899608   0.71209995        0.075     1.388467        1e-10 1.5824443e-11    6.3193376    2.4389879    31.520363 0.0081198192  -0.20717905 0.0012098741   0.21233644   -1.3982456   -0.6923166 
 2990000    3.9939523    1.2604534    2.7334989  -0.23523052   0.84035001   0.99330679   0.73458287   -1.2298232            1   -0.1796343  -0.41995102  -0.41298854   0.29403665 0.0049720039   -0.1277946 -0.015984657  -0.33116067  -0.32142391   0.72284862        0.075    1.3778197        1e-10 1.6063303e-11    6.2253698    2.4411806    31.520363 0.0011779626   -0.1884639 -0.006988352   0.21088245   0.29673683   0.96277194 
 2991000    4.0097974    1.2737813    2.7360161  -0.23695954   0.84923579   0.99984781   0.74509211   -1.2298232            1  -0.13808069  -0.40795608  -0.41048223   0.40419625 -0.0047606837 -0.019768277 -0.043398967  -0.29177485  -0.28080399   0.72281369        0.075    1.3899275        1e-10 1.6062526e-11    6.2256707    2.4356226    31.520363 0.0038261118  -0.20360754 0.0036064958   0.21015707    2.1656987    2.6561417 
 2992000    4.0273783    1.2690548    2.7583236  -0.22272853   0.84608457   0.98481631   0.75016188   -1.2298232            1  -0.27457718  -0.52092469  -0.51707389   0.21426704 -0.029001525 -0.061072253 -0.051710799  -0.42931711  -0.41515481   0.71138784        0.075    1.3937778        1e-10 1.5808619e-11    6.3256633    2.4549428    31.520363 0.0069182035  -0.19545273 -0.0018278821   0.21324629    2.3248457    2.0963798 
 2993000    4.0302431    1.2845731      2.74567  -0.23023024   0.85643072   0.99607039   0.75988073   -1.2298232            1  -0.22865659  -0.47348284  -0.48661385   0.27412693 -0.0056509892 -0.052577572 -0.029557492  -0.38540128  -0.37084068   0.71154798        0.075    1.3842678        1e-10 1.5812177e-11    6.3242397    2.4468613    31.520363 -0.0074609425  -0.18285319 0.00072886406   0.21008649   0.08145351    2.1246051 
 2994000    4.0097508    1.2755789    2.7341719  -0.23351327   0.85043424    1.0055051   0.74320511   -1.2298232            1  -0.13837759  -0.40529825  -0.39634861    0.3865141 -0.0082621172  0.016314175  0.013503041  -0.29168251  -0.28190844   0.71970867        0.075    1.3840411        1e-10 1.5993526e-11      6.25253    2.4338778    31.520363 -0.0012019443  -0.20837426 -0.0049212793   0.19993389    1.9643798   0.67584459 
 2995000    4.0082123    1.2659581    2.7422542  -0.24016845   0.84401999    1.0004726   0.73583404   -1.2298232            1  -0.20798104  -0.46146938  -0.45585576   0.29338203 -8.266089e-05  0.074832204 -0.0045600647  -0.35976549  -0.35079353   0.72258121        0.075    1.3841818        1e-10 1.605736e-11    6.2276737    2.4430232    31.520363 -0.00041920933  -0.21745809 -0.0029672118   0.19244806  -0.70496958    1.6605152 
 2996000    4.0184594     1.282358    2.7361014  -0.23137225   0.85495389   0.99809032   0.75598396   -1.2298232            1  -0.19935856   -0.4548551  -0.43947305   0.29625245 -0.0082499845 -0.040244456 -0.026202372  -0.35529945  -0.34183099   0.71582501        0.075    1.3814365        1e-10 1.5907222e-11    6.2864526    2.4358139    31.520363 -0.0046709047  -0.20394153 -0.0010526013   0.21391536    1.1382651   0.82957345 
 2997000    4.0099973    1.2781984    2.7317989  -0.23472705   0.85218069   0.99729232   0.75184363   -1.2298232            1  -0.19968613  -0.43610665  -0.43452853   0.27157681  0.005638728  0.040480352  0.027943997  -0.35477296  -0.34204464   0.71174616        0.075    1.3923979        1e-10 1.5816581e-11    6.3224788    2.4508426    31.520363 -0.012252487  -0.18266793 -0.00019446072   0.20579797  -0.56031076    1.4996848 
 2998000    4.0364509    1.2892439     2.747207  -0.23797206   0.85954474   0.99686786   0.76459813   -1.2298232            1 -0.065487821    -0.339196  -0.35911321   0.50184574 -0.0077934496  0.023218238  0.045585569  -0.22320559  -0.20778575    0.7145227        0.075    1.3848458        1e-10 1.5878282e-11    6.2979105    2.4441796    31.520363 -0.0080586615    -0.217736 -0.0018465371   0.17613583 -0.033108189    2.7551802 
 2999000    4.0224281     1.283121    2.7393072  -0.22419004   0.85546257    1.0183247   0.74284229   -1.2298232            1  -0.15846227  -0.42007512  -0.39806159    0.3427499 0.0049285642  -0.04959885 -0.053274745  -0.31169235  -0.30382305   0.71959635        0.075    1.3964749        1e-10 1.599103e-11    6.2535058    2.4469259    31.520363 -0.00019916773  -0.19279363 -0.0030297902    0.2173492  0.067044166  -0.19301416 
 3000000    4.0200246    1.2819735    2.7380511  -0.23143329   0.85469757   0.99934105   0.75468471   -1.2298232            1  -0.17370399  -0.41235993  -0.40650419   0.29775215  0.017093536  0.020812324 -0.045979272  -0.32937687  -0.31635495   0.71750178        0.075    1.4025917        1e-10 1.5944484e-11    6.2717615    2.4472971    31.520363 -0.0028724418  -0.19543418 0.0054698173   0.20124608   0.50190269   0.89325884 
 3001000    4.0205323    1.2751856    2.7453467  -0.23008458     0.850172    1.0014889   0.74554059   -1.2298232            1  -0.13090105  -0.39353166  -0.39240132   0.39322983 0.0080036695 0.0048571632  0.025802736  -0.28468772  -0.27385861   0.71431524        0.075    1.3911574        1e-10 1.5873672e-11    6.2997396     2.432322    31.520363 0.00092182364  -0.20948841 -0.0031315553    0.2040997   0.32932175   0.36778108 
 3002000    3.9976047    1.2572581    2.7403466  -0.23043266   0.83821967   0.98752017   0.73498253   -1.2298232            1   -0.2020835  -0.45915652  -0.42957949   0.28248552 -0.009982337 -0.062789526 -0.035336397   -0.3536923  -0.34304709   0.71550493        0.075    1.3920318        1e-10 1.590011e-11    6.2892648    2.4464676    31.520363 -0.0031653191  -0.21112706 -0.0015949146   0.20980547    1.5262448    -1.078975 
 3003000    4.0234775    1.2839033    2.7395742  -0.22643251   0.85598413    1.0066481   0.75180513   -1.2298232            1 -0.083953334  -0.33819372  -0.36417526   0.45050898 0.0046766808 -0.029658572 -0.0038226911  -0.23903223  -0.22764734   0.71699093        0.075    1.3874983        1e-10 1.5933132e-11      6.27623    2.4412675    31.520363 0.0028375645  -0.18502186 -0.010919115   0.20312658  -0.77898895    2.2746459 
 3004000    4.0160083    1.2754306    2.7405778  -0.22853827   0.85033534   0.99787509   0.74831782   -1.2298232            1  -0.25470565   -0.4651579  -0.51927105   0.22031201 -0.019268435 -0.060979471 -0.0069477895  -0.40906519  -0.39714735   0.72157944        0.075    1.3820145        1e-10 1.6035099e-11    6.2363196    2.4587117    31.520363 0.0041487114  -0.20806137  -0.01157253   0.19297245    1.0471832  -0.42493691 
 3005000    4.0379596    1.2905184    2.7474411  -0.23158763    0.8603945    1.0156773   0.75301964   -1.2298232            1  -0.15026303  -0.40771479  -0.38326195   0.34018766 0.0023043237  0.091826023   0.01540075  -0.30559244  -0.29524591   0.71709186        0.075    1.3878336        1e-10 1.5935375e-11    6.2753467    2.4456062    31.520363 0.0024199217  -0.20418495 -0.0018055446   0.19663683    0.3086817   0.98058152 
 3006000    4.0039238    1.2762564    2.7276673  -0.23413566   0.85088597   0.99598757   0.75055572   -1.2298232            1  -0.21774196  -0.45900585  -0.43646228   0.24224224  0.016139645    0.1304779 -0.023610654  -0.37256313  -0.35991423   0.71402466        0.075    1.3853269        1e-10 1.5867215e-11    6.3023033    2.4402262    31.520363 0.00067711653  -0.19908389 -0.012370401   0.19087283  0.047788137    1.6718418 
 3007000    4.0140884    1.2794349    2.7346534  -0.23055137   0.85300508    1.0028042   0.74942429   -1.2298232            1  -0.11351879  -0.37041213  -0.36295559   0.39281135 0.00079691579  0.031371329  0.061176726  -0.26810657   -0.2566641   0.71095751        0.075    1.3747766        1e-10 1.5799056e-11    6.3294921    2.4478175    31.520363 0.0068985648  -0.17699011 -0.0014410396    0.1983624  -0.93907332    1.6518349 
 3008000    4.0034601    1.2640974    2.7393627  -0.23649848   0.84277946   0.99043249   0.74068282   -1.2298232            1  -0.17969765  -0.42680617  -0.40948956   0.29720279 0.0021599528 -0.026839915 -0.016985315  -0.33248228  -0.32107696    0.7183396        0.075    1.3846666        1e-10 1.5963102e-11    6.2644465    2.4567147    31.520363 -0.0021573747   -0.1947842  0.012801861   0.19600313    1.1234406    1.8569336 
 3009000    4.0184402    1.2744644    2.7439758  -0.23414205    0.8496912   0.99374368   0.75008684   -1.2298232            1  -0.23909214  -0.45737116  -0.47124401   0.21133876 -0.0065299603   0.10488492 -0.031112568  -0.39381659  -0.38094411   0.72111124        0.075    1.3866877        1e-10 1.6024694e-11    6.2403687    2.4457708    31.520363 -0.0023893535  -0.20617514 6.762163e-05   0.19687685  -0.68384764    1.3808464 
 3010000     4.031045    1.2859994    2.7450457  -0.22366338   0.85738161    1.0107628   0.75132244   -1.2298232            1  -0.14370591  -0.42614396  -0.38883389   0.38386012 0.0056928117  0.014267447  0.045210585  -0.29868524  -0.28798727   0.71775479        0.075    1.3898723        1e-10 1.5950106e-11    6.2695507    2.4384953    31.520363 -0.0042412736  -0.19358023 0.0013942364   0.22372347   0.24247825  -0.68233114 
 3011000    4.0260609    1.2774178    2.7486431  -0.23225526   0.85166022    1.0007689   0.74855709   -1.2298232            1  -0.16345532  -0.40844395  -0.41507842    0.3331564 -0.010586573 -0.060091995  0.038820302  -0.31786422  -0.30631011   0.71450578        0.075    1.3818986        1e-10 1.5877906e-11    6.2980596    2.4416482    31.520363 0.0032016876  -0.19897537 -0.012263173    0.2162948  -0.28773227    1.4483567 
 3012000    4.0069996    1.2789357     2.728064  -0.23318148   0.85267221    1.0046047   0.74761507   -1.2298232            1  -0.21893534  -0.45558279   -0.4654707   0.26424746 -0.013487978  0.020600417 -0.018534694  -0.37314993  -0.36233767   0.71581739        0.075    1.3808194        1e-10 1.5907053e-11    6.2865195    2.4465197    31.520363 -0.0096350983  -0.21124489 -0.0032360852    0.2207068    1.1865294    1.0732466 
 3013000    4.0194599    1.2803697    2.7390902  -0.23145185   0.85362828   0.99335577   0.75701724   -1.2298232            1  -0.17482355  -0.43137698  -0.41203344   0.31893978 -0.0023369945  0.050522733 0.0058408434  -0.33097757  -0.31662014   0.71681582        0.075    1.3786507        1e-10 1.592924e-11    6.2777632    2.4455187    31.520363  -0.00269217  -0.19446212 -0.0069983133   0.18250834   0.87833809    3.1175574 
 3014000    4.0212357    1.2957401    2.7254956  -0.23965622   0.86387582    1.0131798   0.76063869   -1.2298232            1   -0.2228821  -0.48293292  -0.47082251   0.28510914 0.0030625772 -0.017714305 -0.023602307  -0.37978314  -0.36750848   0.72293436        0.075    1.3858206        1e-10 1.6065208e-11    6.2246316     2.453908    31.520363 -0.00097852608  -0.20800898 0.0012457084   0.21608893    1.0240266  -0.25589316 
 3015000    4.0028076    1.2630376      2.73977   -0.2370338   0.84207293    1.0021185   0.73140046   -1.2298232            1  -0.15273794  -0.42372452  -0.39758288   0.36309359 -0.0056303817   0.10310497   0.07581869  -0.30360785  -0.29578536   0.72355919        0.075    1.3818413        1e-10 1.6079093e-11    6.2192563    2.4667446    31.520363 -0.014045434  -0.22058409 -0.010402508   0.21054916   -1.1951024     1.478874 
 3016000    4.0175768    1.2773704    2.7402064  -0.23369487   0.85162864   0.99798694   0.75042882   -1.2298232            1  -0.15266679  -0.39254007  -0.39523671   0.32977642 -0.0031996864  0.049567157  0.033431472  -0.30746178  -0.29512446   0.71838253        0.075    1.3899624        1e-10 1.5964056e-11    6.2640722    2.4513355    31.520363 0.0067643858  -0.19413784 0.0021238964   0.20099851   0.12447574    1.0855171 
 3017000    4.0219047    1.2686022    2.7533024  -0.22582411   0.84578287   0.99090103   0.74544067   -1.2298232            1  -0.19537856  -0.42792163  -0.42355313   0.26533908 0.0035383599  0.030696347   -0.0357161  -0.34914462  -0.33682475   0.71707757        0.075     1.387503        1e-10 1.5935057e-11    6.2754717    2.4392888    31.520363 -0.00076487266  -0.17644161 -0.0053516065   0.19402184   0.33626618    2.2948254 
 3018000    4.0026253    1.2712021    2.7314231  -0.23858399   0.84751623    0.9923454   0.74737418   -1.2298232            1   -0.1636003  -0.44044533  -0.40971828   0.35936271 -0.0032903911  0.025819362 -0.0039626933   -0.3177652  -0.30525267   0.71434989        0.075    1.3808162        1e-10 1.5874442e-11     6.299434    2.4489114    31.520363 -0.0051642153  -0.19964003 -0.0024218746   0.16928352   0.68650565    1.3097195 
 3019000     4.018792    1.2685612    2.7502308  -0.23323138   0.84575551   0.99707273    0.7411235   -1.2298232            1  -0.19898362  -0.43472834  -0.44425027   0.28202776 -0.00071170984  0.023038618 0.0099314171  -0.35185915  -0.34131079   0.71606094        0.075    1.3795423        1e-10 1.5912465e-11    6.2843814    2.4373879    31.520363 0.0042500691  -0.17739106 -0.0066650189   0.19405536   0.89390915     -1.13939 
 3020000    4.0297641    1.2762797    2.7534844  -0.23637767   0.85090148    1.0040349   0.74501315   -1.2298232            1  -0.09363089  -0.36323104  -0.36726088   0.44959925 -0.017892325  0.016316702 -0.030461857  -0.24730876  -0.23695187   0.72276354        0.075    1.3634364        1e-10 1.6061412e-11    6.2261027    2.4492669    31.520363 -0.0024717141  -0.20947415  -0.02186002   0.21435304  -0.61853247     1.074097 
 3021000    4.0234872    1.2844987    2.7389885  -0.23315644   0.85638111    1.0026544   0.75524057   -1.2298232            1  -0.29821183  -0.47040341  -0.53399778    0.1097657 -0.0091967522 -0.055543353 0.00013420438  -0.45399937  -0.44133576   0.72076362        0.075    1.3720868        1e-10 1.6016969e-11    6.2433783    2.4395408    31.520363 -0.0071627832  -0.19567471 -0.0082792533   0.18484287   0.96446565   -2.9034805 
 3022000    4.0333286    1.2808671    2.7524615  -0.23233375   0.85395993   0.99724332    0.7548882   -1.2298232            1   -0.1672267  -0.42658499  -0.40633847   0.33124337 -0.017942151 -0.036854881 1.7422355e-06  -0.32294155  -0.30957822   0.71093399        0.075    1.3888148        1e-10 1.5798533e-11    6.3297016    2.4489472    31.520363   0.01327413  -0.19478573 -0.016617847   0.19776064   0.21714013    2.0721229 
 3023000    4.0395723    1.2973869    2.7421855  -0.23276689   0.86497372    1.0055125   0.76780238   -1.2298232            1 -0.016626439     -0.27204  -0.30473549   0.52689617 -0.0087081842  -0.07781184    0.0022404  -0.17500517  -0.16015834   0.71063653        0.075    1.3856831        1e-10 1.5791923e-11    6.3323511     2.448262    31.520363 -0.0007338932  -0.17898948 -0.0018816463   0.20371337  -0.87457765    2.3563835 
 3024000    4.0343806    1.2916344    2.7427462  -0.22658169    0.8611385    1.0147626   0.75491159   -1.2298232            1  -0.11829948  -0.38937729  -0.36577182   0.40025066 -0.014621235 -0.094162069 0.0035690768  -0.27401916  -0.26315179   0.71729514        0.075    1.3849204        1e-10 1.5939892e-11    6.2735682    2.4370073    31.520363  -0.00484197  -0.21531445 -0.0045741018   0.20756172   0.28685966    1.4686547 
 3025000    4.0359053     1.289626    2.7462794  -0.23045773   0.85979948   0.99904058   0.76352563   -1.2298232            1  -0.17844376   -0.4627719  -0.45042892   0.37786954   0.00877054 -0.031189635  0.013856122   -0.3359403  -0.32105183     0.724487        0.075    1.3661811        1e-10 1.6099711e-11    6.2112916    2.4662685    31.520363 -0.0017618184  -0.25221058 -0.010907253   0.21166518    1.2429207   0.88952879 
 3026000     4.024504    1.2792385    2.7452654  -0.23182984   0.85287413   0.99578359   0.75406107   -1.2298232            1  -0.17084297    -0.412282   -0.4310492   0.33080228 -0.0035938565 -0.015464177 -0.0096588215  -0.32638721  -0.31298612   0.71304616        0.075    1.3616529        1e-10 1.584547e-11    6.3109519    2.4448009    31.520363 -0.00038994248  -0.17264812 -0.0075687601   0.20000248   -1.5822057   0.37947441 
 3027000    4.0370209    1.2732243    2.7637966  -0.22279587   0.84886439   0.99101453    0.7505764   -1.2298232            1  -0.17405176   -0.4406992  -0.42129892   0.33984283 -0.0011232178 -0.018471637 -0.042948651   -0.3288772  -0.31551416   0.71306147        0.075    1.3662654        1e-10 1.5845811e-11    6.3108163    2.4432296    31.520363 -0.0023923357  -0.19722621 0.0071986345   0.21460335 -0.060373978   0.66706359 
 3028000    4.0160989    1.2773865    2.7387124  -0.23001527    0.8516394    1.0097096   0.74233483   -1.2298232            1  -0.14482042  -0.42002504  -0.39503255   0.38059634 0.0030932956 -0.025972072 -0.00049988517  -0.29794582  -0.28895143   0.72176733        0.075    1.3828979        1e-10 1.6039274e-11    6.2346962    2.4480516    31.520363 -0.0051899727  -0.22582464 0.0010355238   0.21251484  -0.66024742   0.96247152 
 3029000    4.0285375    1.2780606    2.7504769  -0.23349179   0.85208879    1.0049235   0.74640723   -1.2298232            1  -0.17009866   -0.3987419  -0.43564633   0.32409224  0.011403928 0.0080814276 0.0033297264   -0.3240641   -0.3135465   0.72115588        0.075    1.3716738        1e-10 1.6025686e-11    6.2399824    2.4569713    31.520363 0.0077696605  -0.21525075 -0.0065039188   0.20148784   0.14573042    1.4402777 
 3030000    3.9905039    1.2748161    2.7156878  -0.23622152   0.84992567     1.006658   0.74154671   -1.2298232            1  -0.16932118  -0.42865722  -0.42875254   0.34944623  0.019476583 -0.013954359  0.011292054  -0.32228401   -0.3130166    0.7158507        0.075    1.3814832        1e-10 1.5907793e-11     6.286227    2.4426469    31.520363 -0.0062107753  -0.18550887 0.0059874683   0.18784552    1.6296162   -0.2043777 
 3031000      4.01168    1.2716146    2.7400654  -0.22775081   0.84779119    1.0003368    0.7423093   -1.2298232            1 -0.098151939  -0.35682998  -0.38288239   0.44525656 0.0098217197  0.083905595 -0.026115981  -0.25127207  -0.24094504   0.71290948        0.075    1.3812949        1e-10 1.5842433e-11    6.3121618    2.4354001    31.520363 -0.0025594887  -0.18418615 0.0023053462   0.20592677  0.080478913    0.3922261 
 3032000    4.0349614    1.2848872    2.7500742  -0.23121302   0.85664011    1.0058711   0.75345281   -1.2298232            1  -0.15553718  -0.40291457     -0.40932   0.34562304  0.014871647 -0.058615438 -0.0087080443  -0.31095595  -0.29912028   0.71692223        0.075    1.3830488        1e-10 1.5931605e-11    6.2768314    2.4417396    31.520363 0.0024906426  -0.20154768 0.0030411887   0.21346777    1.5425372    2.0801864 
 3033000    4.0419494    1.2938507    2.7480987  -0.23109045   0.86261616    1.0191043   0.75440744   -1.2298232            1  -0.19473594  -0.45162094  -0.39083052   0.25824364 -0.0033831835 -0.062906563  0.049174446  -0.35035163  -0.34020801   0.71840068        0.075    1.3783228        1e-10 1.5964459e-11    6.2639139    2.4546258    31.520363 -0.0042989247   -0.2171882 -0.015389114   0.19233444  -0.60576642  -0.14329777 
 3034000    4.0255504    1.2802652    2.7452852  -0.22748953   0.85355864    1.0031946   0.75009083   -1.2298232            1   -0.1210648  -0.39186088  -0.38290584    0.4115723 -0.004710649 -0.045990783 -0.061672291  -0.27579008  -0.26426584   0.71234066        0.075    1.4040243        1e-10 1.5829792e-11    6.3172022    2.4399852    31.520363 -0.0066467913  -0.20058225 0.0016224293   0.20680171  -0.24835975   0.54898806 
 3035000    4.0260298    1.2842036    2.7418262    -0.230894   0.85618436     1.019008   0.74359079   -1.2298232            1  -0.15319794  -0.39144362  -0.43739074   0.36924055 0.0045720686  0.022676259   0.02125315  -0.30658241  -0.29865626   0.71103585        0.075    1.3745476        1e-10 1.5800797e-11    6.3287948    2.4423727    31.520363 -0.0047945401  -0.20195938 -0.0086930332   0.20581354   0.32077117    2.5284756 
 3036000    4.0521695    1.2933275    2.7588419  -0.22616541   0.86226734    1.0146877   0.75687353   -1.2298232            1   -0.2115282  -0.51891624  -0.42606244   0.31039408 0.0013279327  -0.10090224 0.0027398999  -0.36765258  -0.35636982   0.71749516        0.075     1.383565        1e-10 1.5944337e-11    6.2718193    2.4575313    31.520363 0.0031520508  -0.20986019 0.0012021263   0.22575084  -0.17986751  -0.57094368 
 3037000    4.0212482    1.2836552     2.737593  -0.22951676   0.85581876    1.0208561   0.74169324   -1.2298232            1   -0.1336453  -0.38852353  -0.38130028   0.36888791  0.032380125   -0.1340619  0.031987306  -0.28663836  -0.27936743   0.71800073        0.075    1.3858845        1e-10 1.5955572e-11    6.2674031    2.4448047    31.520363 -0.00091752451  -0.20731125 -0.0017218295   0.21305971   0.59520377   -0.1968757 
 3038000    4.0519381    1.2862145    2.7657236  -0.22659733   0.85752505   0.99835278   0.76015301   -1.2298232            1  -0.20416805   -0.4734054  -0.44123532   0.30213656 -0.012202585 -0.097045123 -0.0028569677  -0.36096891  -0.34667794   0.71936959        0.075    1.3934705        1e-10 1.5985991e-11    6.2554771    2.4442489    31.520363 0.0070505235  -0.20383816 -0.0017952912   0.22020239     1.151321  -0.24519967 
 3039000    4.0428495    1.2912553    2.7515942  -0.22355246   0.86088576     1.016438   0.75332454   -1.2298232            1 -0.088200877  -0.37569576  -0.35699927   0.46809241  0.012609956 -0.040710651 -0.014954065  -0.24359319  -0.23329234   0.71527423        0.075    1.3952049        1e-10 1.5894983e-11    6.2912933     2.477495    31.520363 -0.0075926278  -0.20352393 -0.00044437298   0.21221171   0.06329485    1.5094416 
 3040000    4.0404279    1.2880756    2.7523523  -0.22653149   0.85876587     1.012994    0.7521207   -1.2298232            1  -0.14607618  -0.40588138  -0.40629281   0.37394564 0.0013022762 -0.0034845954 -0.033473077  -0.30122017  -0.29067604   0.71452149        0.075    1.3774287        1e-10 1.5878255e-11    6.2979211    2.4574354    31.520363 -0.0058596224  -0.20054374 0.0026212295   0.21847112   -0.7204113    1.3675564 
 3041000     4.031411     1.286708     2.744703  -0.23108899   0.85785407     1.009979   0.75266425   -1.2298232            1 -0.023265377  -0.29991245  -0.29948204   0.52959835 0.0035082193 -0.018949723 -0.0021676568  -0.17852149  -0.16743486   0.71985137        0.075    1.3752218        1e-10 1.5996697e-11    6.2512905     2.448419    31.520363 -0.004297446  -0.20316354 -0.0063576342   0.19349719  0.051455187    3.6777358 
 3042000    4.0432854    1.2868199    2.7564655  -0.23268481   0.85792864    1.0071166   0.75477127   -1.2298232            1  -0.23881677  -0.48199293  -0.44271629   0.20825892 -0.022224334  0.067636435 0.0028907261   -0.3945075  -0.38257765    0.7187596        0.075    1.3949244        1e-10 1.5972436e-11    6.2607859    2.4431017    31.520363 -0.0077379646  -0.19560989 0.0026661551   0.19683152     1.448907  -0.69177654 
 3043000     4.024254     1.282237     2.742017  -0.22770821   0.85487324    1.0058473   0.75047958   -1.2298232            1   -0.1101918  -0.35333671  -0.38229783   0.40505914 -0.0007665479 -0.032222921 -0.015434979  -0.26499727   -0.2537715   0.71523815        0.075    1.3939012        1e-10 1.5894181e-11    6.2916107    2.4371871    31.520363 -0.0032756332   -0.1770661 -0.0091066479   0.20821698 0.0058842177  -0.42735582 
 3044000    4.0353214    1.2927746    2.7425468  -0.23074191   0.86189868    1.0097227   0.75968558   -1.2298232            1  -0.14607814  -0.41437064  -0.41291705   0.38905327 0.00071658503   0.04824488 -0.018897305  -0.30278257  -0.29021102   0.71713948        0.075     1.422161        1e-10 1.5936433e-11      6.27493     2.456271    31.520363 -0.0093680911  -0.21521913 -0.0045492756   0.20035583  -0.71209781  0.044959405 
 3045000    4.0347067    1.2890755    2.7456312  -0.23239015   0.85943252    1.0089639   0.75603765   -1.2298232            1  -0.15951583  -0.42440291  -0.43294821   0.37880365 -0.0015523371  0.046776158 -0.011801689  -0.31546778   -0.3035404    0.7178149        0.075    1.4110757        1e-10 1.5951442e-11    6.2690256    2.4453522    31.520363 0.0079925912  -0.20430285 0.0031812337   0.19716008   0.26905643   0.64676413 
 3046000    4.0435718     1.294188    2.7493838  -0.23234116   0.86284104    1.0177854   0.75570064   -1.2298232            1 -0.092574588  -0.36513403  -0.36687088   0.45428114 0.0031847955  0.052289165  0.064990794  -0.24845703  -0.23785839   0.71779155        0.075    1.4085771        1e-10 1.5950923e-11    6.2692296    2.4430671    31.520363 -0.016620319   -0.1964082 0.0055396615   0.21570938  -0.10338836    3.9235101 
 3047000    4.0265584    1.2812151    2.7453433  -0.22175055   0.85419191     1.006311   0.74900576   -1.2298232            1  -0.14988136  -0.41704563  -0.38215727   0.34955882 0.0058431709 -0.0025194364  0.034728297  -0.30438281  -0.29352726    0.7144196        0.075    1.4211822        1e-10 1.5875991e-11    6.2988194    2.4598622    31.520363 -0.0081003759  -0.17844756 -0.0029770462   0.17758003    1.4364214    1.9557357 
 3048000    4.0285638    1.2905862    2.7379775  -0.22987481    0.8604397    1.0015499   0.76287245   -1.2298232            1  -0.19291851  -0.44240366  -0.45026061   0.31390874 -0.002376236  0.027205487  0.025446478  -0.35028032  -0.33588478   0.71735345        0.075    1.4124472        1e-10 1.5941188e-11    6.2730583    2.4477995    31.520363 -0.0035213071  -0.20868071 -0.0056940483   0.20871656 -0.00038091176   0.42447925 
 3049000    4.0249243    1.2781411    2.7467833  -0.23309354   0.85214244    1.0154662   0.73920236   -1.2298232            1   -0.1030702  -0.35183339  -0.35510768   0.39773046 -0.010379022  0.062444951   0.02138948  -0.25554945  -0.24802295   0.71684966        0.075    1.4057341        1e-10 1.5929992e-11    6.2774669     2.456373    31.520363  0.002017605  -0.21175768 0.0012942253   0.22564878   0.13600784   0.85599574 
 3050000    4.0436373    1.2772399    2.7663974   -0.2277894   0.85154162    1.0032427   0.74664451   -1.2298232            1  -0.17055356  -0.42936785  -0.42478693   0.34249411 -0.0016364714 -0.053766046  0.023703767  -0.32456794  -0.31376146   0.71014685        0.075    1.4005892        1e-10 1.5781041e-11    6.3367175    2.4493453    31.520363 0.00018952368  -0.20965277 -0.0059319062   0.22211237    2.0188727  0.068889301 
 3051000    4.0481651    1.2830658    2.7650993  -0.22485187   0.85542578    1.0142166   0.74562288   -1.2298232            1  -0.11188489  -0.40378389  -0.36229025   0.43041949 0.0080080416  -0.03622056  0.047884057  -0.26568853  -0.25665926   0.71655826        0.075    1.3930874        1e-10 1.5923517e-11    6.2800197    2.4352842    31.520363 -0.0013809627  -0.19255892 -0.001809248   0.21739992   0.45863706   0.95264696 
 3052000    4.0464096     1.296848    2.7495616  -0.23300221   0.86461442    1.0152942   0.76042532   -1.2298232            1   -0.2055683  -0.39675899  -0.46778734   0.24784143  0.011839203 -0.041005153  0.019325671  -0.36242532   -0.3504965   0.71784681        0.075    1.3975107        1e-10 1.5952151e-11    6.2687469    2.4455319    31.520363 -0.0051583519  -0.19931689 0.0048347019   0.18475422 -0.096370185  -0.67555901 
 3053000    4.0361168    1.2945562    2.7415606  -0.23418104   0.86308652    1.0218562   0.75329901   -1.2298232            1  -0.13469078  -0.35463655  -0.41616414   0.36672834 -0.0050496582 -0.080209918 -0.072070477  -0.29007782  -0.28055566   0.71248177        0.075    1.4017351        1e-10 1.5832928e-11    6.3159511      2.45196    31.520363 0.0065395671  -0.18973566 -0.00038625866   0.19288227  -0.31056564  -0.20026274 
 3054000    4.0245474     1.282309    2.7422384  -0.22861114   0.85492126    1.0181743   0.74203038   -1.2298232            1  -0.16003746  -0.45122999  -0.38311843   0.35423604 -0.00034230993  0.051125536 0.0098215125  -0.31310006  -0.30537678   0.70780193        0.075    1.4002226        1e-10 1.5728932e-11    6.3577108    2.4375116    31.520363   0.00699973  -0.19961387 -0.0023015381   0.20402827   -0.3215006   0.27514687 
 3055000    4.0441689    1.2916806    2.7524883  -0.23546635   0.86116933    1.0212731    0.7504584   -1.2298232            1   -0.1681592   -0.4106147  -0.41772277   0.32385988 -0.013574402   0.16109907 -0.011148703  -0.32296029  -0.31394085   0.71513991        0.075    1.3903055        1e-10 1.5891998e-11     6.292475    2.4547044    31.520363 -0.0074879494  -0.20671393 -0.001443671   0.19344457   -1.0937076   0.78158171 
 3056000    4.0534875    1.2911851    2.7623024  -0.22880409   0.86083898    1.0133457   0.75538529   -1.2298232            1  -0.27591887  -0.49095134  -0.49587184   0.15906656 -0.0026556107 -0.016969503  -0.05159389  -0.43173626  -0.42056893   0.71489694        0.075    1.3942213        1e-10 1.5886599e-11    6.2946136    2.4483402    31.520363 0.0081567372  -0.21818317 -0.0021179067   0.19338724  0.044655329  0.078277046 
 3057000    4.0447409    1.2903798     2.754361  -0.22969856   0.86030209    1.0201372     0.749777   -1.2298232            1  -0.12428094   -0.3639936  -0.40217317   0.39332396 -0.0051934812 0.0012670548  0.021483503  -0.27894148  -0.26990044   0.71534371        0.075    1.4111149        1e-10 1.5896527e-11    6.2906823    2.4462652    31.520363 0.0068218209  -0.18997293 -0.010207669   0.18961572  -0.89461106    2.6067387 
 3058000    4.0543382    1.2920327    2.7623055  -0.23674197   0.86140405    1.0127082   0.75678257   -1.2298232            1  -0.11963946  -0.39292812  -0.37636368   0.41037341 -0.001573616  0.055432872   -0.0310851  -0.27574508  -0.26419852   0.72070015        0.075    1.3867611        1e-10 1.6015559e-11    6.2439282    2.4384224    31.520363 -0.010227187  -0.19145359 -0.0029378467   0.18312259   0.49170996  -0.11890502 
 3059000    4.0371873    1.2819551    2.7552322  -0.22971027   0.85468532    1.0077245   0.74886256   -1.2298232            1 -0.077283016  -0.33749847  -0.35281933   0.45846875  0.010372246 -0.047627733 -0.0080338039  -0.23175493  -0.22113067   0.71816522        0.075    1.3857995        1e-10 1.5959227e-11    6.2659676    2.4436709    31.520363 -0.0026173322  -0.18136739 -0.002198057   0.19172115   0.11856707   0.71825503 
 3060000    4.0100013    1.2795082    2.7304932  -0.23544752   0.85305391    1.0127363   0.74263378   -1.2298232            1  -0.20865418  -0.44421613  -0.44913954   0.26739314 0.0036752313  0.025647736   0.01363025  -0.36184125  -0.35321725   0.71841587        0.075    1.3667701        1e-10 1.5964797e-11    6.2637815    2.4491254    31.520363 -0.0039022702  -0.19255982 0.00031477444   0.22130793   -1.1488371   -0.4495348 
 3061000    4.0327393      1.27644    2.7562993  -0.22716497   0.85100834    1.0028642   0.74600406   -1.2298232            1  -0.21526847  -0.47909656  -0.43964864   0.27293978 -0.0098670104  0.081647422 -0.003395365  -0.36915075  -0.35842235     0.713725        0.075    1.3819042        1e-10 1.5860555e-11    6.3049494    2.4540335    31.520363 0.0011301638  -0.17571771 -0.0078832614   0.19641639  -0.26618615   0.97129657 
 3062000     4.027035    1.2847541    2.7422809  -0.23026063   0.85655138     1.010599   0.75003091   -1.2298232            1 -0.046145625   -0.3737426  -0.30015482   0.53546054 -0.010158901 -0.014466205 -0.034925895  -0.20085854  -0.19040361   0.71542953        0.075    1.3966079        1e-10 1.5898434e-11    6.2899276    2.4362246    31.520363 0.0050966153  -0.20496847 -0.0081350957   0.20979124   0.16988593    1.8935521 
 3063000    4.0133751    1.2698417    2.7435334  -0.23492172   0.84660919   0.99443786   0.74439138   -1.2298232            1  -0.23109411  -0.47263851   -0.4726918   0.25204796  0.017543995  0.041657168  0.044332813  -0.38464373  -0.37304517    0.7170242        0.075    1.4028377        1e-10 1.5933871e-11    6.2759388    2.4456412    31.520363 -0.0036590847  -0.19210225 0.0024501387   0.22944703   -1.3592602  0.076149235 
 3064000      4.01975    1.2797814    2.7399686  -0.23455405   0.85323607     1.001197   0.75092738   -1.2298232            1  -0.30778347  -0.53332774  -0.54070101   0.15067835 0.00013882242  0.089107365  0.022735654   -0.4626813  -0.45069935   0.71059863        0.075    1.3936057        1e-10 1.5791081e-11    6.3326888    2.4459602    31.520363 -0.0027915589  -0.19116605 -0.0058084747   0.21175616  -0.73354874    2.1895699 
 3065000    4.0319322    1.2773648    2.7545673  -0.22269622   0.85162493    1.0005969    0.7486164   -1.2298232            1   -0.1914782  -0.41308789  -0.46398114   0.30263441 -0.015870159  0.032192981   0.04464346  -0.34589934  -0.33430844   0.71083319        0.075    1.3799538        1e-10 1.5796293e-11    6.3305992    2.4465185    31.520363 -0.0027079828   -0.1774593 -0.006388922   0.19135166   -1.5404697    2.1134431 
 3066000    4.0394788    1.2875171    2.7519617  -0.22866649   0.85839346    1.0119897   0.75218558   -1.2298232            1  -0.11728427  -0.38745503  -0.37948703   0.41508925  -0.01047519 -0.043739697 -0.020257133  -0.27244164  -0.26174076   0.72397089        0.075    1.3837865        1e-10 1.6088242e-11    6.2157196    2.4503833    31.520363  0.008377122  -0.19683688 -0.006874757   0.18897297   0.63171902    2.9879848 
 3067000    4.0522616    1.2856539    2.7666077   -0.2249621   0.85715127   0.99723836   0.76029173   -1.2298232            1  -0.20937273  -0.45572339  -0.45575584   0.28336102 -0.00080482757  0.024478609 -0.034072337   -0.3662022  -0.35172355   0.71942915        0.075    1.3907923        1e-10 1.5987314e-11    6.2549593    2.4781681    31.520363 -0.0069642857  -0.18845277 0.0036733572    0.1811795  0.049502398   0.58039274 
 3068000    4.0320941    1.2879017    2.7441924  -0.23084351    0.8586499    1.0199961   0.74707897   -1.2298232            1  -0.17479082  -0.41415081  -0.40798257   0.29776094  0.014061999 -0.066353784   0.03418079  -0.32889482  -0.32039018   0.71582149        0.075    1.3843814        1e-10 1.5907144e-11    6.2864835    2.4542596    31.520363 0.0045750279  -0.18662574 -0.0032634441   0.21324071   0.45371538   0.67048345 
 3069000    4.0361275    1.2886747    2.7474528  -0.23172601   0.85916525    1.0048057   0.75846294   -1.2298232            1  -0.23859217  -0.48265501  -0.46654225   0.23342076 -0.0035011938 -0.036075317 -0.028650431   -0.3950444  -0.38202318   0.71700309        0.075    1.3936464        1e-10 1.5933402e-11    6.2761235    2.4491764    31.520363 0.0019039757  -0.18633371 -0.0064702555   0.20136274  0.061755844   0.32624234 
 3070000    4.0431203    1.2864748    2.7566455  -0.22611936   0.85769861    1.0007978   0.75875471   -1.2298232            1  -0.10895238  -0.37090359  -0.37381661   0.41786304  0.018759887 -0.030147185 -0.039819959   -0.2654648  -0.25181129    0.7158144        0.075    1.4108528        1e-10 1.5906987e-11    6.2865458    2.4354536    31.520363 -0.0060354622  -0.20398517 -0.0031203085   0.17717046  -0.04512858    1.0861807 
 3071000     4.027157    1.2776919     2.749465  -0.22839303     0.851843   0.99111886   0.75554433   -1.2298232            1  -0.18800369  -0.41255666  -0.42420173   0.27274731 -0.0024094725 -0.046856051 -0.020297737  -0.34385389  -0.32948098   0.71946427        0.075    1.4026874        1e-10 1.5988095e-11    6.2546539    2.4497739    31.520363 -0.00069848835  -0.18448506  -0.01277023   0.21302077   0.23053323   0.28257222 
 3072000    4.0253132    1.2821543    2.7431589  -0.23398987   0.85481808    1.0048216   0.75109602   -1.2298232            1 -0.084974186  -0.37002827  -0.37806816   0.49317386 -0.016163514   -0.1000016  0.019053385  -0.23990681  -0.22840747   0.71591944        0.075    1.3941292        1e-10 1.5909321e-11    6.2856234    2.4438389    31.520363 0.0034110737  -0.20618862 0.0012765529   0.23179754 -0.089525073   -1.6887467 
 3073000    4.0279468    1.2745313    2.7534155  -0.22875946    0.8497358    0.9950905   0.74923029   -1.2298232            1  -0.19780371  -0.42271201   -0.4744352   0.30373607 0.0084804746  0.017818932 -0.0040595562  -0.35235148  -0.33984793   0.71179023        0.075    1.3909234        1e-10 1.5817561e-11    6.3220874    2.4525636    31.520363 0.00047389949  -0.23015519 -0.0063722774   0.18854158  -0.89113669      1.72056 
 3074000     4.035001    1.2745048    2.7604962  -0.22398185    0.8497181   0.99934772    0.7462543   -1.2298232            1 -0.072202042  -0.36699412  -0.31617589   0.46656389 0.00018396232 0.0060061168 -0.015840358  -0.22613593  -0.21485396   0.71226163        0.075    1.4082589        1e-10 1.5828036e-11    6.3179032    2.4372924    31.520363 0.0082215909  -0.20648251 0.0032562047   0.20388425   0.47832391    2.1439483 
 3075000    4.0288365    1.2679947    2.7608418  -0.22502152   0.84537783    1.0001239     0.738373   -1.2298232            1   -0.1299816  -0.34284131  -0.42568853   0.37858504 -0.013409699  0.011669869 -0.027521147  -0.28228977   -0.2727443   0.71579382        0.075    1.3988495        1e-10 1.5906529e-11    6.2867266    2.4503413    31.520363 0.0032106619   -0.2149594 0.0018959285    0.1651528   0.13982702   0.45706765 
 3076000    4.0491515    1.2886217    2.7605298  -0.22394066   0.85912994    1.0096617   0.75504273   -1.2298232            1  -0.22493705  -0.45636017  -0.47450892   0.25605794 -0.014828058  0.016299582  0.033088476  -0.38068378  -0.36906124   0.71481013        0.075    1.3961192        1e-10 1.588467e-11    6.2953781    2.4432433    31.520363 -0.0073580976  -0.19900743 -0.0012170799   0.20846855   -1.2100105   0.10068317 
 3077000    4.0251677    1.2845969    2.7405708   -0.2281713    0.8564466    1.0114104    0.7492921   -1.2298232            1  -0.13195375  -0.35359487  -0.38802197   0.34575559 -0.010252526 -0.013193481 -0.014294541  -0.28651426  -0.27632756   0.71622433        0.075    1.3723117        1e-10 1.5916096e-11    6.2829477    2.4478991    31.520363 0.0013829634  -0.19561355 -0.0011003165   0.18697372   -1.1727899    1.9398385 
 3078000    4.0351483    1.2840089    2.7511394  -0.22474328   0.85605456    1.0152023   0.74600469   -1.2298232            1  -0.16911457  -0.40623622  -0.44632431   0.34521681 0.0041093517 -0.062522782 -0.0036031059  -0.32299698  -0.31402966    0.7105043        0.075     1.376114        1e-10 1.5788985e-11    6.3335295    2.4385863    31.520363 0.0028580066  -0.23072525 -0.0026331974   0.16202329    0.4225111   -2.1167572 
 3079000     4.034571    1.2933291    2.7412419  -0.23716153    0.8622684      1.01157   0.75903282   -1.2298232            1  -0.13855562  -0.39108635  -0.37654598   0.35196546 -0.0022480742  0.006852698    -0.018146  -0.29512541  -0.28295221    0.7150925        0.075    1.3660175        1e-10 1.5890944e-11    6.2928922    2.4642851    31.520363 -0.0001572859  -0.21619085 -0.013401664   0.20245208    1.8376981    2.6360274 
 3080000    4.0309174    1.2805029    2.7504145  -0.22913988   0.85371706   0.99465978   0.75626509   -1.2298232            1  -0.16356627  -0.41887768  -0.40172372    0.3299026  0.002428336  0.047598144 -0.017132524  -0.31956514    -0.305549   0.71462831        0.075    1.3820734        1e-10 1.5880629e-11    6.2969798    2.4496421    31.520363 -0.00041673053  -0.19922872 -0.0031345381    0.1861853   -0.0675171   0.87113235 
 3081000    4.0378604    1.2889786    2.7488817  -0.22899108   0.85936791     1.002038   0.76072114   -1.2298232            1  -0.10355995  -0.37077602  -0.37571914   0.43581531 -0.015893703 0.0018565901 -0.007892506  -0.26047799  -0.24659588   0.71428459        0.075     1.385538        1e-10 1.5872991e-11    6.3000099    2.4515275    31.520363 -0.0045421495  -0.22562881 -0.0052333698   0.19354333   0.41027801     3.493763 
 3082000    4.0150462    1.2842167    2.7308294  -0.23293647   0.85619313    1.0014793   0.75573569   -1.2298232            1  -0.12490215  -0.37782859  -0.39224804   0.39537018 -0.0019772243 -0.070601697 -0.058567091  -0.28079182  -0.26785833   0.71406752        0.075    1.3997653        1e-10 1.5868167e-11    6.3019251    2.4403862    31.520363 -0.0011351791  -0.18865977 0.0033470652   0.24270613   0.35845431    1.8674161 
 3083000    4.0175783    1.2731433    2.7444349  -0.23365055   0.84881044    1.0083077   0.73851803   -1.2298232            1  -0.25372905  -0.51294107  -0.49361216   0.24536609  0.011266393  -0.10536504  -0.00984554  -0.40606714  -0.39765995   0.71086063        0.075    1.3984304        1e-10 1.5796903e-11    6.3303548    2.4468474    31.520363 -0.0091134061   -0.1948276 0.0095210413   0.18116999   0.83878737   0.79221269 
 3084000    4.0260826    1.2806273    2.7454553  -0.22801042   0.85380005    1.0061516   0.74845302   -1.2298232            1  -0.19876005  -0.41706035  -0.47502824   0.29580843 -0.0019873852 -0.069062387  0.065940219  -0.35314749  -0.34238319   0.71647208        0.075    1.3876329        1e-10 1.5921602e-11    6.2807751     2.456347    31.520363 -0.0065658624   -0.2003546 -0.0010667073   0.23057668  -0.23003102    2.6590589 
 3085000    4.0396385    1.2902349    2.7494036  -0.23634562   0.86020547    1.0069341   0.75875016   -1.2298232            1  -0.22750303  -0.44120815   -0.4862844   0.24498346 -0.0025636045 -0.0037920038  0.010189958  -0.38401451  -0.37123787   0.71761036        0.075    1.3959128        1e-10 1.5946897e-11    6.2708125    2.4530112    31.520363 -0.0056554513  -0.18130527 -0.010568476   0.20954099    2.0083996  -0.39666862 
 3086000     4.030407    1.2889085    2.7414985  -0.23233118   0.85932116   0.99421982   0.76605228   -1.2298232            1  -0.18062602  -0.45650051  -0.42967646   0.34429889 0.0017439022  0.074408552  0.055606636  -0.33864375  -0.32254596   0.71642601        0.075    1.3991832        1e-10 1.5920578e-11     6.281179    2.4394608    31.520363 -0.007129123  -0.21943027 -0.0023822668   0.20593416 -0.016780548    2.2038807 
 3087000    4.0359806    1.2738579    2.7621227  -0.22518853   0.84928686   0.98011378   0.75883471   -1.2298232            1  -0.16600211  -0.38639424  -0.47992204   0.36830996 -0.0036881862 -0.022981381 -0.038337591  -0.32253103  -0.30590848   0.71380392        0.075    1.3854112        1e-10 1.5862309e-11    6.3042523    2.4496153    31.520363 -0.0073804715  -0.22841965 -0.0045239069   0.18755397   0.41310605    1.8304696 
 3088000    4.0146178    1.2816897    2.7329281  -0.23168391   0.85450836    1.0115027   0.74594858   -1.2298232            1   -0.2171443  -0.46045047  -0.45871516   0.26773274 0.0022925725 -0.033598093 -0.039677739  -0.37101513  -0.36153127   0.71128465        0.075    1.3944498        1e-10 1.5806326e-11    6.3265811    2.4493749    31.520363 0.0024772878  -0.18985034 0.0020506104   0.20606421  -0.28993335  -0.69503436 
 3089000    4.0292383    1.2792117    2.7500266  -0.22869761   0.85285626    1.0053468   0.74741297   -1.2298232            1  -0.11916021  -0.36010927  -0.38270609   0.38533473 -0.0079346632 -0.058902102 -0.010243334  -0.27333311  -0.26266846   0.70975092        0.075    1.4023211        1e-10 1.5772243e-11    6.3402524    2.4582899    31.520363 -0.010100422  -0.21241869 -0.0066866068   0.18714346 -0.054556177    2.4108796 
 3090000    4.0250913    1.2863757    2.7387156  -0.23209855   0.85763251    1.0106279   0.75184033   -1.2298232            1  -0.15179738  -0.40923162  -0.42078032   0.37461981 0.0045583167  0.010797167 -0.00011272355  -0.30688353  -0.29605948   0.71111909        0.075    1.4114495        1e-10 1.5802646e-11     6.328054    2.4429427    31.520363 -0.0035399695  -0.19186061 -0.0079135851   0.21602182  0.074025169   0.68680473 
 3091000    4.0309574    1.2781664     2.752791  -0.22974437   0.85215932    1.0066692   0.74531855   -1.2298232            1 -0.076824902   -0.3454387  -0.36927024   0.48423423 -0.0072789459 -0.014763817 0.0049581127  -0.23056577  -0.22052192   0.71808804        0.075    1.4168316        1e-10 1.5957512e-11    6.2666411    2.4511009    31.520363 0.0044074814  -0.23697635 0.00071101121    0.2029926   0.47510895   0.78304306 
 3092000    4.0363958    1.2901354    2.7462603  -0.23381047   0.86013915    1.0123907   0.75486193   -1.2298232            1  -0.21111257  -0.41638396  -0.47175639   0.25480264 0.0024893688 -0.059595104 -0.020469308    -0.366822  -0.35562631   0.71789945        0.075    1.4264472        1e-10 1.5953321e-11    6.2682873    2.4506861    31.520363 -0.011852202  -0.20662228 -0.0027718438   0.15991779  -0.45608884    2.9667169 
 3093000    4.0357337    1.2825906    2.7531431  -0.22399596   0.85510895    1.0020911   0.75347778   -1.2298232            1  -0.24588235  -0.50130558  -0.46421892   0.22787744 0.0092890724 -0.0033096569  0.025149606  -0.40130627  -0.38892587   0.71719702        0.075    1.4171875        1e-10 1.5937711e-11    6.2744265    2.4513737    31.520363 -0.0073316205  -0.22709284 -0.012555493    0.1893171  0.098600261   -1.4173575 
 3094000    4.0335156    1.2777487    2.7557669  -0.23136574   0.85188087    1.0029424   0.74742638   -1.2298232            1 -0.083561409  -0.36642751  -0.36137768   0.47712096 -0.0051264836 -0.0027015988 -0.0047166061  -0.23773707  -0.22672645   0.71827948        0.075    1.4242182        1e-10 1.5961766e-11    6.2649708    2.4410802    31.520363 -0.017987496  -0.21793525 -0.0025323994   0.20995997  -0.11543616   0.57033537 
 3095000    4.0346152    1.2890543    2.7455609  -0.22426401   0.85941834    1.0212077    0.7475408   -1.2298232            1  -0.11099329  -0.36183805  -0.37456604   0.40342422 -0.0037545877   0.07918479   0.01069656  -0.26519255   -0.2567656   0.71356976        0.075    1.4208998        1e-10 1.5857106e-11    6.3063211    2.4418083    31.520363  0.013933533  -0.18966537 -0.0050633467   0.20438038    -0.101191    1.9559088 
 3096000    4.0458497    1.2787915    2.7670582  -0.22735164   0.85257609     1.006308   0.74627377   -1.2298232            1  -0.19759613  -0.40545907   -0.4502617   0.26293238 0.0088777952 -0.059588751 0.0094046178  -0.35153404  -0.34124159   0.71230103        0.075     1.433871        1e-10 1.5828912e-11    6.3175537    2.4438051    31.520363 -0.0047288608  -0.19000193 -0.0093170122   0.19154177   -1.5390842  -0.33729191 
 3097000    4.0650327    1.2967605    2.7682721  -0.22553828   0.86455613    1.0138708   0.76131173   -1.2298232            1  -0.13567928  -0.41852949  -0.37403423   0.38552588 0.0030630987  0.012783538 0.0087784533  -0.29271915  -0.28040428   0.71148945        0.075    1.4157132        1e-10 1.5810877e-11      6.32476     2.437846    31.520363 -0.002246098  -0.20464081 0.0037799336   0.20062559  -0.57498033 -0.049769591 
 3098000    4.0352443    1.2957695    2.7394748  -0.22337442    0.8638954    1.0294764   0.74939443   -1.2298232            1  -0.14616356  -0.37546081  -0.44009314   0.37706326 -0.0070239123 -0.043888802  0.034666452  -0.30074519   -0.2931162   0.71656571        0.075    1.4080411        1e-10 1.5923682e-11    6.2799544    2.4392477    31.520363 -0.0073925807   -0.2057717  0.001770244    0.1883882   0.31896077   0.27015285 
 3099000    4.0526716    1.2993739    2.7532977   -0.2301298   0.86629848    1.0224083    0.7583519   -1.2298232            1  -0.16480239  -0.43096608  -0.44585984   0.38241876  0.011263836  0.050411466  0.028117056  -0.32123172  -0.31074608   0.71745872        0.075    1.4307207        1e-10 1.5943527e-11    6.2721379    2.4509384    31.520363 -0.0070487618  -0.18429416  -0.01127515    0.1889384  -0.95939159   0.30927972 
 3100000    4.0452127     1.296652    2.7485607  -0.23002631    0.8644838    1.0237089    0.7543812   -1.2298232            1 -0.073198571  -0.36718497  -0.35645972   0.50404898 -0.0024854285   0.11415154 -0.044975499  -0.22880884  -0.21932793   0.71796154        0.075    1.4277469        1e-10 1.5954701e-11    6.2677452    2.4451005    31.520363 0.0017095981  -0.22129793 -0.010887045   0.22361345    -3.341274    2.7110357 
 3101000    4.0405333    1.2873976    2.7531357  -0.22356206   0.85831384    1.0073183   0.75528346   -1.2298232            1  -0.25300685  -0.52782141  -0.47384229   0.24264316 -0.0088419679 -0.023140022  0.028081363  -0.40880323  -0.39679652   0.71233333        0.075    1.4274972        1e-10 1.582963e-11    6.3172672    2.4438173    31.520363 -0.00097522101  -0.20427352  -0.01007729   0.20096399   -1.9969021   0.36047889 
 3102000    4.0351386     1.276948    2.7581906  -0.22750088   0.85134703   0.99730796   0.75042215   -1.2298232            1  -0.17150079  -0.41908394  -0.44788813    0.3524697  0.013618972   0.05229204 -0.0021514108  -0.32629441  -0.31386154   0.71106472        0.075    1.4250584        1e-10 1.5801438e-11    6.3285379    2.4372136    31.520363 0.00027559723  -0.19183238 0.0030434727   0.20433665   -0.3465979    1.7918471 
 3103000    4.0443877    1.2894062    2.7549815  -0.23084334   0.85965298    1.0029351   0.76058267   -1.2298232            1 -0.098153442  -0.39156524  -0.34546982   0.44257474 -0.0042650218 -0.033192878  0.035296751  -0.25504292  -0.24131744   0.71597763        0.075    1.4333929        1e-10 1.5910614e-11    6.2851126    2.4426626    31.520363 0.0033165964   -0.1830684 -0.0049691243    0.1907762    1.8184257    2.8067935 
 3104000    4.0005082    1.2652083    2.7352999  -0.23087408   0.84352013   0.99578177   0.73823434   -1.2298232            1  -0.12614405  -0.37020725   -0.3779181    0.3696932 -0.0084409826  0.013567153 -0.031746177  -0.27842362  -0.26828694   0.71999765        0.075    1.4306612        1e-10 1.5999948e-11    6.2500204     2.441807    31.520363 -0.0012040869  -0.17903121 -0.012441118    0.2009502  -0.25261444    2.9412716 
 3105000     4.021221    1.2731122    2.7481087  -0.23290506   0.84878971   0.99076489   0.75062278   -1.2298232            1  -0.20657648  -0.44787965  -0.45982404   0.28797425 -0.00070113929 -0.042058816  0.012026053  -0.36141148  -0.34800324   0.71951008        0.075    1.4329095        1e-10 1.5989113e-11    6.2542557    2.4519937    31.520363 -0.0041182851  -0.19336951 0.0091866899   0.17722935 -0.079802428    2.8175122 
 3106000    4.0323351     1.284303    2.7480321  -0.22382017   0.85625063    1.0033038   0.75457036   -1.2298232            1  -0.16604903  -0.42714087  -0.40018361   0.32917739 -0.0079426864   0.12244243  0.023988172  -0.32169832  -0.30926566   0.71646314        0.075    1.4412266        1e-10 1.5921403e-11    6.2808535     2.449408    31.520363 -0.0060960902  -0.18607915 -0.0097755451   0.18732019  -0.14184112   0.19389044 
 3107000    4.0238782    1.2781332     2.745745  -0.23473839   0.85213718   0.99734482   0.75173369   -1.2298232            1  -0.13412925  -0.39944484  -0.39746217   0.39451927 -0.0030608783  0.048165982 -0.0089533206   -0.2891934  -0.27649526   0.71349405        0.075     1.454083        1e-10 1.5855423e-11    6.3069902    2.4409803    31.520363 -0.0066973658  -0.20979365 -0.0082148305   0.20097758   0.38749978    1.0688695 
 3108000    4.0180594     1.270854    2.7472054  -0.23055012   0.84728411   0.98946332   0.74897585   -1.2298232            1  -0.10979075  -0.36068059  -0.37200443   0.40331277 -0.0097555377 -0.064103533  0.024765145  -0.26428603  -0.25103172   0.71632855        0.075    1.4566894        1e-10 1.5918412e-11    6.2820336    2.4633504    31.520363 0.0012796144  -0.19134365 -0.0081282302   0.19192237   0.73635227    1.1836267 
 3109000    4.0100017    1.2813688    2.7286329  -0.23354341    0.8542944    1.0032678   0.75128516   -1.2298232            1  -0.15652212  -0.41247376  -0.39244861   0.33535601 0.0056371558 -0.022123343 -0.0044243557  -0.31149375   -0.2997336   0.71506614        0.075    1.4506329        1e-10 1.5890359e-11    6.2931241    2.4417656    31.520363 0.0051658262   -0.1977872 -0.0038420277   0.20498289  -0.44442688  -0.55378871 
 3110000    4.0265514    1.2770529    2.7494985    -0.223888   0.85141698    1.0028375   0.74671401   -1.2298232            1  -0.18735594  -0.42165797  -0.42532213    0.2849123  0.010810491 -0.034642457  0.040570706  -0.34138466    -0.330506   0.71928066        0.075    1.4388689        1e-10 1.5984015e-11    6.2562505    2.4526482    31.520363 -0.0031392263  -0.20961193 0.0028447596   0.20904991  -0.97899552    1.0664684 
 3111000     4.008802    1.2744742    2.7343279  -0.22943703   0.84969771   0.98871301   0.75357914   -1.2298232            1  -0.10380933  -0.38670352  -0.36022846   0.43550399 -0.010464524 -0.058053673  0.031148013  -0.25925416  -0.24494319   0.72127153        0.075    1.4382166        1e-10 1.6028256e-11    6.2389819    2.4582803    31.520363 -0.0055866403  -0.21415085 -0.0033179551   0.18703421   0.52509116    1.8158548 
 3112000    4.0088555    1.2788213    2.7300343  -0.23383453   0.85259594    1.0040956   0.74783836   -1.2298232            1  -0.24084786  -0.50244348  -0.46776065   0.24766054 -0.010636391  0.014039934  0.037442232  -0.39510851  -0.38417751   0.71086336        0.075    1.4418452        1e-10 1.5796964e-11    6.3303305    2.4495031    31.520363 -0.0038536875   -0.1971073 -0.0036651432   0.20741055   0.47227643   0.48358997 
 3113000     4.019633    1.2742629      2.74537  -0.22742875   0.84955688   0.99103506   0.75173395   -1.2298232            1  -0.13665095  -0.40855274  -0.39599033   0.39459021 -0.0038516843 0.0058723966    0.0560711  -0.29171516  -0.27811628   0.71232439        0.075    1.4370453        1e-10 1.5829431e-11    6.3173465    2.4505906    31.520363 -0.00033985081  -0.20909698 -0.00041918662   0.19382007   -1.8811056   0.71642979 
 3114000     4.022509    1.2804908    2.7420181  -0.23936087   0.85370906    1.0049875   0.74910465   -1.2298232            1 -0.068341231  -0.31977661  -0.34066039    0.4554133 -0.001974995   -0.1170215  0.010039295  -0.22286308   -0.2117982   0.71961675        0.075    1.4433857        1e-10 1.5991483e-11    6.2533286    2.4383652    31.520363 0.0048664342   -0.2146147 -0.0032972197   0.19363254   0.59340985   0.72558952 
 3115000    4.0200676    1.2765342    2.7435334  -0.22993595   0.85107116   0.99724043    0.7500021   -1.2298232            1  -0.13674976  -0.38997376  -0.36683955   0.34656401 0.0043198896   0.10428535  0.031070895  -0.29145674  -0.27910087   0.72158784        0.075    1.4569878        1e-10 1.6035285e-11     6.236247    2.4460321    31.520363 0.00075749891  -0.19639017 -0.0090650315    0.2008671   -1.6254636    1.7239599 
 3116000    4.0208184    1.2828366    2.7379818  -0.23547836   0.85527298    1.0017693   0.75397799   -1.2298232            1  -0.13172936  -0.40518499  -0.36659731   0.37659421 -0.0060232402 -0.0082495298 -0.063174505  -0.28725646  -0.27472695    0.7133166        0.075    1.4513133        1e-10 1.585148e-11    6.3085592    2.4465513    31.520363 -0.0065436744  -0.18491909 -0.0076187816   0.18365046   0.94694757  -0.69328338 
 3117000    4.0171225    1.2687034    2.7484191  -0.22543652    0.8458503   0.98679759    0.7483944   -1.2298232            1  -0.18350766  -0.45202295  -0.41805353   0.31955352 -0.019732911  0.035118573 -0.023142654    -0.337883   -0.3243681     0.712707        0.075    1.4488037        1e-10 1.5837933e-11    6.3139551    2.4430697    31.520363 -0.0030047839  -0.19117859  0.002850052   0.19601845   0.86813756    0.3346122 
 3118000    4.0218455    1.2855789    2.7362666  -0.23475858   0.85710131    1.0015956   0.75719191   -1.2298232            1  -0.12914378  -0.36961353  -0.38351589   0.36569807  0.013105008  0.033029816 -0.034532595  -0.28533383  -0.27211657   0.71778642        0.075    1.4376835        1e-10 1.5950809e-11    6.2692743    2.4445272    31.520363   0.00098848  -0.23352536 -0.006929772   0.20078789  0.075576859    3.8933182 
 3119000    4.0227832    1.2782444    2.7445388  -0.23016605   0.85221134    1.0014219   0.74903778   -1.2298232            1  -0.18839265  -0.40284345   -0.4210178   0.25868331  0.001918736  -0.10119377 -0.035948866  -0.34290071  -0.33134064   0.71962933        0.075    1.4521088        1e-10 1.5991763e-11    6.2532193    2.4472591    31.520363 -0.00076928743  -0.17667461 0.0036261893   0.19800807    1.5350816  -0.20165653 
 3120000    4.0252802    1.2831753    2.7421049  -0.23201248   0.85549881    1.0063913   0.75116165   -1.2298232            1  -0.14073629   -0.3957318  -0.40478337   0.37830631 -0.013064903 -0.097964186 -0.0054813766  -0.29568245  -0.28439364   0.71629557        0.075    1.4484533        1e-10 1.5917679e-11    6.2823228    2.4493024    31.520363 -0.0049391223  -0.19991569 -0.00068611794    0.1771036   0.84280796    1.9232075 
 3121000    4.0020224    1.2723191    2.7297033  -0.22999909   0.84826089   0.99494804   0.74683317   -1.2298232            1  -0.14308062  -0.39111368  -0.40986248   0.37173431 -0.0018775462  0.012389902  0.011480236  -0.29713392   -0.2851045   0.71574877        0.075    1.4511941        1e-10 1.5905528e-11    6.2871222    2.4423736    31.520363 -0.0014642491  -0.22105852 -0.00029063807   0.19189512   0.17527589     2.395691 
 3122000    4.0210332    1.2802153    2.7408179   -0.2281317   0.85352536     1.002969   0.75019062   -1.2298232            1  -0.20792566  -0.44240676  -0.44220848   0.26083827   0.02419616 -0.021131661 -0.020746763  -0.36267152   -0.3510945   0.71355675        0.075    1.4628868        1e-10 1.5856817e-11    6.3064361    2.4446948    31.520363 0.0055036171   -0.2260158 0.0032403148   0.18432228   0.40494258   0.31394099 
 3123000    4.0345834    1.2923483    2.7422351  -0.23444797   0.86161449    1.0139088   0.75630785   -1.2298232            1  -0.21401694  -0.47256842  -0.45784908   0.28836669 0.0062599895 -0.024500475  0.010082118  -0.37002463  -0.35874737   0.71434114        0.075    1.4587775        1e-10 1.5874248e-11    6.2995111    2.4394728    31.520363 0.0065578845  -0.20635665  -0.01005637   0.20386339  -0.70099308   0.45704931 
 3124000    4.0209993    1.2750838    2.7459155  -0.23095328   0.85010416    1.0101013   0.73946593   -1.2298232            1  -0.13569786  -0.37564387  -0.41122739   0.37977768 -0.013783278 -0.020817283 -0.056554485  -0.28823148   -0.2798848   0.71419541        0.075    1.4388211        1e-10 1.5871009e-11    6.3007965    2.4383027    31.520363 -0.00056963797  -0.20690081 0.0027173313   0.18962256    1.4905996    4.0599488 
 3125000    4.0133799    1.2676924    2.7456875  -0.22411731   0.84517625    1.0000892   0.73805592   -1.2298232            1  -0.11375341    -0.359897  -0.36876787   0.38740464 -0.0083733181  -0.11148485  -0.02896832  -0.26599618  -0.25651116    0.7117728        0.075    1.4402304        1e-10 1.5817173e-11    6.3222421    2.4401375    31.520363 0.00083377946  -0.19473911 0.0036784295   0.19128199   0.85658986    2.0038457 
 3126000     3.998096      1.26577     2.732326  -0.23413789   0.84389463   0.99566369   0.73894976   -1.2298232            1  -0.16648943  -0.39517132  -0.41375262   0.30945566 0.0035671363 -0.063312053  0.053130055  -0.31891657  -0.30861547    0.7201807        0.075    1.4444084        1e-10 1.6004015e-11    6.2484318    2.4410253    31.520363 -0.0052879594  -0.23025273 -0.0099447714   0.20364328   0.30248922    2.7834853 
 3127000    4.0134253    1.2800156    2.7334097  -0.23677294   0.85339221   0.99549377   0.75513826   -1.2298232            1   -0.1702166  -0.41391444  -0.41623875    0.3195034 0.0039352198   0.02667336  0.040988972  -0.32598303  -0.31231838   0.72705261        0.075     1.429052        1e-10 1.6156725e-11    6.1893733    2.4447918    31.520363 -0.0026782443  -0.20877064 -0.017946113      0.18941   0.48863665   0.15599723 
 3128000    4.0114637    1.2751794    2.7362843  -0.23438603   0.85016789   0.99952986   0.74688936   -1.2298232            1  -0.16297128  -0.41609245  -0.42953546   0.35671408 -0.001134476  0.014953003 -0.027278306  -0.31703617  -0.30564919   0.71681636        0.075    1.4337067        1e-10 1.5929253e-11    6.2777585    2.4357609    31.520363 -0.013078837  -0.22977414  0.012850247   0.19207191    1.2932505    1.0344173 
 3129000     4.009285    1.2778669    2.7314181  -0.23672532   0.85195966   0.99787136   0.75106892   -1.2298232            1  -0.14016813  -0.38932133  -0.40194525   0.37076219 -0.0071565151 -0.024269252 -0.014042987  -0.29509516   -0.2826093   0.71128424        0.075    1.4415012        1e-10 1.5806316e-11    6.3265848    2.4399404    31.520363 -0.0024783398  -0.18293765 -0.0029356593   0.22425449    1.9748165    1.2604449 
 3130000    4.0096713    1.2744632    2.7352081   -0.2354722   0.84969039    1.0031443   0.74358015   -1.2298232            1  -0.25471983   -0.4874252  -0.48761084   0.21087657   0.00103902  0.005835772 -0.031768252  -0.40810211  -0.39791368   0.71436095        0.075    1.4346709        1e-10 1.5874688e-11    6.2993365    2.4352749    31.520363 -0.0022587297  -0.18904364 0.0079578739   0.19108659  -0.39039679  -0.82294351 
 3131000    4.0090536    1.2708242    2.7382295  -0.24321328   0.84726424    1.0054262   0.73789568   -1.2298232            1  -0.20058869  -0.42881442  -0.46214481   0.28919317 -0.0014588789  0.022615239  0.026709794   -0.3527984  -0.34410828   0.72371705        0.075    1.4374244        1e-10 1.6082601e-11    6.2178997    2.4386335    31.520363 -0.0089646581   -0.1839407  0.008877557   0.20525949   -1.1279976   0.40630291 
 3132000    4.0222872    1.2905976    2.7316896  -0.24177544   0.86044726    1.0210817   0.74936903   -1.2298232            1  -0.12574251  -0.35794995  -0.39819667   0.37891909 0.0060411249  -0.10260214  0.017295506   -0.2803189  -0.27149684   0.72118136        0.075    1.4465088        1e-10 1.6026252e-11    6.2397619    2.4512269    31.520363 0.0047990693  -0.20115283 -0.00030397754   0.18929899  -0.46242937  -0.49900673 
 3133000    4.0401233    1.2879796    2.7521437   -0.2308133   0.85870186   0.99917258     0.761577   -1.2298232            1  -0.11990942  -0.43887419  -0.36168803   0.44083396 0.0066703622  0.076097263 -0.025985518  -0.27700401  -0.26253634   0.71071883        0.075     1.443761        1e-10 1.5793752e-11    6.3316178    2.4431377    31.520363 0.0070122129  -0.18798943 -0.0018995498   0.19447236  -0.34900621   0.50022192 
 3134000    4.0327166    1.2935583    2.7391582   -0.2346934   0.86242121    1.0172492   0.75536128   -1.2298232            1  -0.31154496  -0.53556284   -0.5621076   0.16303558 -0.026899735  0.060296452  0.016769453  -0.46735739  -0.45675222   0.70888868        0.075    1.4348882        1e-10 1.5753082e-11    6.3479642    2.4456057    31.520363  -0.00203348  -0.19618217 -0.0057638827   0.21615013  -0.32672697   -1.1858737 
 3135000    4.0397313     1.296637    2.7430943  -0.23133653   0.86447379    1.0153445   0.76015255   -1.2298232            1   -0.1504774  -0.40559382  -0.39416629   0.34832791   0.01175266 -0.022087484  -0.03301263  -0.30727816  -0.29541278   0.71662195        0.075    1.4240683        1e-10 1.5924932e-11    6.2794616     2.458153    31.520363 -0.0027383528  -0.21994121 0.0077187638   0.19171764   0.12966044   0.36498922 
 3136000    4.0445304    1.2753237    2.7692067  -0.23104202   0.85026408    1.0001415   0.74662881   -1.2298232            1  -0.22420188  -0.48602344  -0.43726486   0.25068266 -0.020603641  -0.12738448 -0.010608281  -0.37821302  -0.36696711   0.71454577        0.075    1.4260166        1e-10 1.5878795e-11    6.2977071     2.453789    31.520363 0.00055688376  -0.18223477 -0.00083902718   0.18226715   0.77568728  -0.89746257 
 3137000    4.0464539    1.2890501    2.7574039  -0.22956938   0.85941553    1.0179127   0.74981623   -1.2298232            1  -0.12665355  -0.36876152  -0.40074547   0.38954634  0.017022556  0.026807732 -0.0052348173  -0.28132218  -0.27195552   0.71727365        0.075    1.4243747        1e-10 1.5939414e-11    6.2737562    2.4515683    31.520363 0.0087537216  -0.20706022 0.0071681581   0.18998745   -1.1477716    1.1409973 
 3138000    4.0672981     1.301848    2.7654501  -0.22187315     0.867948    1.0172375   0.76472134   -1.2298232            1  -0.15151299  -0.39258796  -0.41719078   0.35523977 -0.017939828  0.077622272 -0.0041556492  -0.30925618  -0.29671858   0.71581038        0.075     1.410091        1e-10 1.5906897e-11    6.2865811     2.439366    31.520363 -0.014557899  -0.22890164 -0.016978344   0.19697472  -0.70776859   -1.2543503 
 3139000    4.0321362    1.2883887    2.7437475  -0.23012451   0.85897457    1.0210695   0.74688554   -1.2298232            1  -0.20472386  -0.43956053  -0.44677678   0.27216574  0.012244602 -0.078405375  0.029948734  -0.35878796  -0.35047644   0.71514833        0.075    1.4249104        1e-10 1.5892185e-11    6.2924009    2.4495564    31.520363 0.0025237243  -0.19584401 0.00078332378   0.18165896  -0.82096559  -0.72172736 
 3140000    4.0246162    1.2895667    2.7350494  -0.22605251      0.85976    1.0174843   0.75069557   -1.2298232            1  -0.21820895  -0.46556072  -0.44983561   0.26076949  -0.01934907 0.0040665197  0.012122252  -0.37305897  -0.36344977   0.71149133        0.075    1.4253219        1e-10 1.5810918e-11    6.3247432    2.4510243    31.520363 -0.0014445306  -0.18793834 0.00078542192   0.21068215  -0.43593316   -1.4716439 
 3141000    4.0261317     1.287411    2.7387206  -0.23773014   0.85832276    1.0078718   0.75491556   -1.2298232            1  -0.13751345  -0.39317243  -0.40334384   0.38397592  0.018758792  0.071372548  0.024149481  -0.29323395  -0.28138213   0.71791363        0.075     1.430593        1e-10 1.5953636e-11    6.2681635    2.4531837    31.520363 -0.0036953393  -0.20327349 0.0015116622   0.21023627   -1.1767381    1.9596797 
 3142000    4.0357822    1.2864186    2.7493636  -0.23527742   0.85766113    1.0108192   0.75175634   -1.2298232            1  -0.28254886  -0.51998085  -0.50976693   0.18210119 0.0054867447 -0.017974877 -0.023815894  -0.43761769  -0.42683828   0.71832416        0.075    1.4307358        1e-10 1.5962759e-11    6.2645811    2.4369569    31.520363 -0.0041773752  -0.19364272 -0.004129522   0.18730522 -0.057338489   0.30801899 
 3143000    4.0346507    1.2855627    2.7490879  -0.22886089   0.85709052    1.0116091   0.75024421   -1.2298232            1  -0.23850173  -0.45736737  -0.47866097   0.22052316 0.0089750268  0.027412016 0.0060235722  -0.39325864  -0.38290389    0.7155043        0.075    1.4291543        1e-10 1.5900096e-11    6.2892704    2.4521115    31.520363 -0.0072561736  -0.18515574 0.0050582126   0.18548268   -0.8894703   0.43149025 
 3144000    4.0397074    1.2836311    2.7560763  -0.22689038   0.85580268   0.99353295   0.76057395   -1.2298232            1  -0.10752494  -0.37959632  -0.36335802   0.42037954 -0.0097360196  0.014201391  0.065997324  -0.26441262  -0.24934682   0.71264611        0.075    1.4383786        1e-10 1.583658e-11    6.3144946    2.4494098    31.520363  -0.00678976  -0.19911855 -0.0025902631   0.19526579  0.036757389   0.49054567 
 3145000    4.0157405    1.2796684     2.736072  -0.22343215   0.85316075    1.0042421   0.74869268   -1.2298232            1  -0.20598121  -0.41896175  -0.42886309   0.22988123 0.0033669148  -0.13483298 -0.012970999  -0.36041808  -0.34933177   0.71689319        0.075    1.4258718        1e-10 1.593096e-11    6.2770857    2.4525857    31.520363 -0.0050519004  -0.20698837 -0.013261502   0.20807384   0.47100077    1.0008061 
 3146000    4.0186234    1.2742807    2.7443427  -0.22648844   0.84956876      1.00057   0.74515573   -1.2298232            1  -0.17000858  -0.40484195  -0.42983203   0.32464822 -0.0095366217 -0.054322488 0.0073386025  -0.32371587  -0.31283498   0.71958528        0.075    1.4283973        1e-10 1.5990784e-11    6.2536021    2.4459123    31.520363  -0.01142104  -0.21050098 -0.0040155543   0.20609675   0.88451443  -0.88039339 
 3147000    4.0195454    1.2826721    2.7368733  -0.23078711   0.85516329    1.0040623   0.75220559   -1.2298232            1  -0.12760808  -0.41666958  -0.35704169   0.39088703 0.0055837764  0.056393844   -0.0323057  -0.28276958  -0.27093298   0.71954376        0.075    1.4451863        1e-10 1.5989861e-11    6.2539629    2.4586976    31.520363 0.0020056837   -0.1980551 -0.0030886496   0.20164804  -0.81941327  -0.64296585 
 3148000    4.0275601     1.274046    2.7535141  -0.22373399   0.84941225   0.99437501   0.74917794   -1.2298232            1 -0.065803169   -0.3412246  -0.31210572   0.45592081 -0.00088074699  0.094941837  0.042410811  -0.22034014  -0.20774525   0.71252088        0.075    1.4548059        1e-10 1.5833797e-11    6.3156044    2.4489819    31.520363 -0.0044264254  -0.20348811 -0.013778392   0.17344133  -0.96512152    1.4819698 
 3149000    4.0310783    1.2954015    2.7356768  -0.22689021   0.86365003    1.0178169   0.75704775   -1.2298232            1 -0.042609341  -0.31313775   -0.3464542   0.53176393 -0.008546633   0.01874365 -0.030108796  -0.19876966  -0.18789764   0.71392878        0.075    1.4283973        1e-10 1.5865084e-11    6.3031497    2.4445101    31.520363 0.0094449826  -0.21907977 -0.011666351   0.23898257  -0.53713385    0.6258893 
 3150000    4.0294171    1.2803792    2.7490379  -0.23234327   0.85363463    1.0066334   0.74783973   -1.2298232            1  -0.18656094  -0.42111683   -0.3955574   0.25699141 -0.010014257  0.027872025 0.0064776223  -0.34082187  -0.33025285   0.71822402        0.075    1.4262639        1e-10 1.5960534e-11    6.2654546     2.437886    31.520363 -0.00050751095  -0.21364701 -0.0078085258   0.19106689    1.5575636  0.082815155 
 3151000    4.0306273    1.2929667    2.7376606  -0.22894847   0.86202679    1.0111811   0.75889308   -1.2298232            1  -0.10752199  -0.34782816  -0.36418777   0.38944995 0.0089606013 -0.046296996 0.0035959828  -0.26406296  -0.25186307   0.71467471        0.075     1.420636        1e-10 1.588166e-11     6.296571    2.4399265    31.520363 0.0039451466   -0.1970936 0.0040929112   0.18755216  -0.28587914    4.6226981 
 3152000    4.0358181    1.2806738    2.7551444  -0.22875141   0.85383102    1.0028485   0.75079126   -1.2298232            1  -0.12972188  -0.42307069  -0.38611459   0.42001964 -0.00031563776 -0.019334493  0.011388294  -0.28459164  -0.27287351   0.71413042        0.075    1.4299039        1e-10 1.5869565e-11      6.30137    2.4621347    31.520363 -9.6038333e-05  -0.18993911 -0.00084108617   0.19992757     1.777701  0.024148586 
 3153000    4.0382503    1.2858469    2.7524034  -0.23024004   0.85727993     1.006837   0.75386705   -1.2298232            1  -0.14396931  -0.39301361  -0.40729602   0.36840169 0.0044427429 -0.042865731 -0.034965567  -0.29947353  -0.28769029   0.71475086        0.075    1.4301051        1e-10 1.5883352e-11    6.2959001    2.4460141    31.520363 -0.0012143635   -0.1911687 -0.0088663927    0.1905999   0.75637609   0.59630317 
 3154000    4.0336891     1.289723     2.743966  -0.23439147    0.8598642     1.024102   0.74629234   -1.2298232            1  -0.12632039  -0.38174294  -0.39248755   0.39526931 -0.027679688 -0.0053117212 -0.010386938  -0.28026213  -0.27250586   0.71639071        0.075    1.4327168        1e-10 1.5919794e-11    6.2814885    2.4450405    31.520363 -0.0038018694  -0.21661369 -0.0013512208   0.21178542   0.90098584    2.9475292 
 3155000    4.0484903    1.2933871    2.7551032  -0.23691263   0.86230703    1.0079498   0.76160337   -1.2298232            1  -0.21449305  -0.47569118  -0.50079058   0.33300262 -0.0015384273 0.0032624451 0.00035043891  -0.37159308  -0.35837287   0.71332671        0.075    1.4274507        1e-10 1.5851705e-11    6.3084698    2.4482495    31.520363 -0.0052625678  -0.19558498 -0.023397674   0.18645063   0.17330215    1.7514438 
 3156000    4.0497487     1.297014    2.7527347  -0.22610832   0.86472509    1.0178927   0.75881442   -1.2298232            1  -0.15976702  -0.39993899  -0.43334512   0.35398305 -0.0013004487  0.024015361 0.0092715473  -0.31629176  -0.30506614   0.71495648        0.075    1.4364656        1e-10 1.5887922e-11    6.2940894    2.4407679    31.520363 -0.005324324  -0.22164481 0.0068025437    0.1880364   0.62016576    2.1833481 
 3157000    4.0392107    1.2866439    2.7525668  -0.22955023   0.85781135    1.0122427    0.7510255   -1.2298232            1  -0.11202498  -0.39415383  -0.37176799    0.4298469  0.013126539 -0.017743735  0.013548589  -0.26694305  -0.25651758   0.71414507        0.075    1.4345479        1e-10 1.5869891e-11    6.3012407    2.4423195    31.520363 0.00078024988  -0.23275271 0.0069801828   0.21482818   -1.1440614    2.5400431 
 3158000    4.0467432    1.2831578    2.7635854  -0.23066955   0.85548711    1.0191946    0.7422818   -1.2298232            1  -0.17721832  -0.39649514  -0.44414228   0.30898245 -0.0023016157  -0.06116211 0.0099107573  -0.33033279  -0.32270328   0.71785818        0.075    1.4356605        1e-10 1.5952404e-11    6.2686477    2.4652648    31.520363 -0.0016986736  -0.20496404 -0.0046280462   0.20184069    2.0295717   0.32491605 
 3159000    4.0398607    1.2841143    2.7557465  -0.22417792    0.8561248    1.0143519   0.74671209   -1.2298232            1  -0.02480464  -0.33356871  -0.31746104   0.57661584  0.010697877 -0.0035822936  0.017206326  -0.17883296  -0.16959832   0.71316394        0.075    1.4358318        1e-10 1.5848087e-11    6.3099097    2.4481178    31.520363 0.0012079697  -0.21441409 -0.0014097842   0.20499209   -1.1306372    1.2526885 
 3160000    4.0356353     1.293764    2.7418712   -0.2298318   0.86255835    1.0123027   0.75901637   -1.2298232            1  -0.19363814  -0.41832149  -0.44333405   0.28074111 -0.025693066   0.05771713 0.0080914528  -0.35020454  -0.33813932   0.71091593        0.075    1.4254032        1e-10 1.5798132e-11    6.3298623    2.4482319    31.520363 -0.001069058  -0.21529036 -0.0027260549   0.23379676  -0.58776386    3.0618084 
 3161000    4.0315072    1.2815857    2.7499215  -0.23319594     0.854439     1.006131   0.74954846   -1.2298232            1 -0.093405678  -0.37216109  -0.34655344    0.4384975 -0.014093603  0.080450254  0.013647313  -0.24801907  -0.23702587   0.71965881        0.075    1.4088394        1e-10 1.5992418e-11    6.2529631    2.4421641    31.520363 0.00033278676  -0.21149278 -0.0015008629   0.18775659   -1.6587105    2.3860727 
 3162000    4.0267568    1.2763347    2.7504221  -0.22449928   0.85093812    1.0125226   0.73920156   -1.2298232            1  -0.13798025  -0.41443681  -0.39097158   0.39146765 -0.0052995306 -0.0039077592 -0.0014083665  -0.29045933  -0.28251281   0.72377759        0.075     1.407576        1e-10 1.6083946e-11    6.2173796    2.4547051    31.520363  0.013694236  -0.23485772  0.009492214   0.19441233  -0.40364276    1.2662384 
 3163000    4.0376177    1.2835552    2.7540626   -0.2250711   0.85575205    1.0019766   0.75464522   -1.2298232            1  -0.20559854  -0.46243537  -0.45181498   0.29745474 -0.0058400638 -0.016792958 0.0092072439  -0.36126327  -0.34862571   0.70968132        0.075    1.4234506        1e-10 1.5770696e-11    6.3408742    2.4439629    31.520363 -0.0074123554  -0.16735728 -0.0088486294   0.21972793    1.7711839    0.1685002 
 3164000    4.0318082    1.2888024    2.7430058  -0.22884093   0.85925039    1.0185499   0.74909581   -1.2298232            1  -0.15239579  -0.40267932  -0.40553606   0.35102801 -0.017148866 -0.032694007 -0.011504141  -0.30691581  -0.29778872   0.70878504        0.075    1.4158428        1e-10 1.5750779e-11    6.3488925    2.4471397    31.520363 0.0025039527  -0.19483186 0.00032326874   0.19147028    0.4136237    1.9341994 
 3165000    4.0321847    1.2898136    2.7423711  -0.23350788   0.85992456    1.0195473   0.74954635   -1.2298232            1 -0.047644532   -0.3097755  -0.33430921   0.50115111 0.0012031755  0.014886559 0.0027783989  -0.20225749  -0.19317984   0.71938118        0.075    1.4248606        1e-10 1.5986248e-11    6.2553763    2.4411048    31.520363 -0.0014324968  -0.19079667 -0.011944609    0.2217468  -0.01966931    3.2894291 
 3166000    4.0313921     1.288284    2.7431081  -0.23391205   0.85890477      1.00903   0.75509886   -1.2298232            1  -0.22097296  -0.46274188  -0.46401368   0.26383668 -0.00091106067 -0.090226255  0.056163906  -0.37673127  -0.36500698   0.72300319        0.075    1.4262034        1e-10 1.6066738e-11    6.2240389    2.4461672    31.520363 -0.0097933202  -0.22457016 0.00089607982   0.20654077   0.61664884   0.58034457 
 3167000    4.0235061    1.2762254    2.7472806  -0.22664685   0.85086527    1.0028058   0.74580242   -1.2298232            1   -0.1335594   -0.3818312  -0.40217503   0.38332802 -0.003937053 -0.059232172   0.02716648  -0.28740008  -0.27670494    0.7109369        0.075    1.4223156        1e-10 1.5798598e-11    6.3296757    2.4458511    31.520363 -0.0028639181  -0.20509128 0.0010943215    0.1797239   0.58461148  -0.82741523 
 3168000    4.0108481    1.2612191    2.7496291   -0.2272901   0.84086047   0.99287299   0.73574683   -1.2298232            1  -0.20094466  -0.45860799  -0.44420097   0.29997498 -0.0036901686 -0.084451432 -0.015999348  -0.35271112  -0.34267234   0.70691958        0.075    1.3983245        1e-10 1.5709324e-11    6.3656463    2.4370678    31.520363 -0.00075273695  -0.19642655 -0.0095151485   0.19014647    2.1238299   0.63160328 
 3169000    4.0338675    1.2826812    2.7511863  -0.22969792   0.85516938    1.0101703   0.74798912   -1.2298232            1  -0.18546865  -0.42853688  -0.43935194   0.31148287  0.011830882  0.022742664  0.010359509   -0.3397604  -0.32966543   0.71597433        0.075    1.4017955        1e-10 1.5910541e-11    6.2851415    2.4483475    31.520363 0.0056224358  -0.20239202 -0.0026197738   0.19581105  -0.21510375    1.6501313 
 3170000    4.0437158    1.2879507    2.7557651  -0.23599482   0.85868259    1.0007305   0.76046627   -1.2298232            1  -0.12665022  -0.40070991  -0.39734705   0.41810632 -0.0076496323   0.11289112 -0.032902943  -0.28351569  -0.26949952   0.72152486        0.075     1.397804        1e-10 1.6033886e-11    6.2367913    2.4460693    31.520363 0.00035410122  -0.20050834 0.0063985438   0.18605286    -1.869723    2.0534926 
 3171000    4.0373406    1.2894778    2.7478629  -0.22556645   0.85970068    1.0110595    0.7550412   -1.2298232            1  -0.13646482  -0.38884907  -0.38585667   0.36531128 0.0074076764  0.046754991  0.025038185  -0.29221123  -0.28078854   0.72023703        0.075    1.4089061        1e-10 1.6005267e-11    6.2479431    2.4610882    31.520363 -0.0013315329  -0.19086923 -0.012457812   0.21911481  0.097315612    2.1453286 
 3172000    4.0351063    1.2890111    2.7460951  -0.22572471   0.85938956    1.0111539   0.75444941   -1.2298232            1  -0.19601373  -0.46800206   -0.4163689   0.29632977 0.0024899424  0.026459645  0.012291648  -0.35163807  -0.34035092   0.71206162        0.075    1.4022625        1e-10 1.5823592e-11    6.3196778    2.4438021    31.520363 0.0022390977  -0.20163361 -0.010841213    0.1859975  -0.99715222  -0.16646928 
 3173000    4.0368293    1.2796401    2.7571892  -0.22705964   0.85314189    1.0008863   0.75098302   -1.2298232            1 -0.068149893  -0.33911138   -0.3506383       0.4853 0.0037123489 -0.021160997  0.024552094  -0.22305921  -0.21102143   0.71397781        0.075    1.4191846        1e-10 1.5866173e-11    6.3027169    2.4383146    31.520363  0.007729683  -0.21265431  0.001806637   0.20668181   0.88628318   0.98313704 
 3174000    4.0498623    1.2917745    2.7580878  -0.23466544   0.86123191    1.0190471   0.75210469   -1.2298232            1  -0.24116492  -0.47219754  -0.46245854   0.21116131 -0.0071406784 -0.043868478 -0.069976451  -0.39630561  -0.38662883   0.71739938        0.075    1.4334438        1e-10 1.5942208e-11    6.2726567    2.4478849    31.520363 0.0066789374  -0.17875228 -0.0073843921   0.19077052    1.0986388   -0.8956332 
 3175000    4.0299358    1.2880759    2.7418599  -0.23880905   0.85876603    1.0277018   0.74194298   -1.2298232            1  -0.17859355  -0.43161149    -0.436377   0.33220785 -0.0060743417  -0.11098453 -0.037525313  -0.33163812  -0.32529287   0.71617168        0.075    1.4392036        1e-10 1.5914926e-11    6.2834096    2.4432263    31.520363 -0.0043922389  -0.17943519 -0.0077762391   0.21065323    1.5914499    -1.001136 
 3176000    4.0562233    1.2957147    2.7605086  -0.22484871   0.86385888    1.0125996   0.76101155   -1.2298232            1   -0.1615688  -0.40974963  -0.46797605    0.3930193 -0.00096509461  -0.01547208 -0.028029809  -0.31854675  -0.30611235   0.71517743        0.075    1.4256956        1e-10 1.5892832e-11    6.2921449    2.4582445    31.520363 -0.011499811  -0.20853006 0.0022113614   0.21246845   0.27959122   0.19732345 
 3177000    4.0433861    1.2843129    2.7590732  -0.22514838   0.85625724    1.0104162   0.74965968   -1.2298232            1  -0.20419463  -0.43196027  -0.47948488   0.29886125 -0.0065406323 -0.026742997  0.040556148  -0.35883097  -0.34842652   0.71476259        0.075    1.4425695        1e-10 1.5883613e-11    6.2957968    2.4449977    31.520363 -0.0036786259  -0.21720958  0.001042647    0.2304519   -1.3265845   0.11920318 
 3178000    4.0536896    1.3024922    2.7511975  -0.22627918   0.86837743    1.0074462   0.77222367   -1.2298232            1  -0.16526728  -0.43465817  -0.39267419   0.33153054 0.0072565344  -0.07412964  0.047335334  -0.32455801  -0.30907521    0.7175414        0.075    1.4291417        1e-10 1.5945364e-11    6.2714152     2.446423    31.520363 -0.0077461363  -0.23641146 -0.0031033203   0.20678138    1.2827231    0.5054659 
 3179000    4.0242886    1.2707315    2.7535571  -0.22958712   0.84720245    1.0088919   0.73539287   -1.2298232            1  -0.12111054  -0.38420426   -0.3858778   0.40675044 0.0047178028  0.014326482 -0.0063095356  -0.27280399  -0.26512484    0.7174158        0.075    1.4375444        1e-10 1.5942573e-11    6.2725131    2.4421672    31.520363 -0.0072106243  -0.21189591 0.00094018287    0.2041816  -0.61142035    2.4855572 
 3180000    4.0302264    1.2842273    2.7459992  -0.23220316   0.85620015   0.99890695   0.75752764   -1.2298232            1   -0.1797882  -0.45636608   -0.4077812   0.32478268 -0.011806432 -0.043649694 0.0094484183   -0.3360475   -0.3223772   0.71745333        0.075    1.4414633        1e-10 1.5943407e-11     6.272185    2.4484593    31.520363 5.4200003e-05  -0.19344947 0.0010510344   0.22661243   0.41917651    1.3297876 
 3181000    4.0241995    1.2713689    2.7528306  -0.22329823   0.84762739    1.0063029   0.73790352   -1.2298232            1  -0.22466716  -0.46381295  -0.45772788   0.24753935 -0.0018167549  0.044493098  0.042484567   -0.3768785   -0.3683119   0.71111475        0.075    1.4359387        1e-10 1.580255e-11    6.3280927    2.4406331    31.520363 -0.0035020503  -0.18794863 -0.0085984141   0.21600787   -1.5912838   -1.6359364 
 3182000    4.0099497    1.2786731    2.7312765  -0.23275296   0.85249719    1.0045571   0.74735187   -1.2298232            1  -0.17021946  -0.43101501  -0.41997149   0.34032811 0.0031091795 -0.021036699 0.0029379363  -0.32437976  -0.31361499   0.71364641        0.075    1.4302536        1e-10 1.5858809e-11    6.3056437    2.4398326    31.520363  -0.01097053  -0.19450745 0.00057753687   0.20195286  -0.13971162  -0.24952825 
 3183000    4.0245036    1.2862232    2.7382804  -0.22606568   0.85753084    1.0164325   0.74765145   -1.2298232            1  -0.16722665  -0.42732981  -0.41588295   0.34153281 -0.0085431306 -0.0026472953 -0.016099951  -0.32144874  -0.31231733   0.71617725        0.075    1.4531827        1e-10 1.591505e-11    6.2833607    2.4472596    31.520363 -0.0037985049  -0.21357044 0.0021618444   0.20176645   0.74291807     1.446281 
 3184000    4.0226103    1.2740069    2.7486034  -0.22688261   0.84938615   0.99978319   0.74539126   -1.2298232            1  -0.19691449  -0.43330803  -0.44806866   0.29063321 -0.010876254  0.092821813 0.0016702856  -0.35067036  -0.33962857   0.71198988        0.075    1.4397156        1e-10 1.5821997e-11    6.3203146    2.4435858    31.520363 -0.0058499336  -0.17927343 0.0032643661   0.19460234  -0.44308854    1.2396292 
 3185000    4.0324022    1.2854826    2.7469196  -0.23018231   0.85703709    1.0107918   0.75071939   -1.2298232            1  -0.09832357  -0.37086679  -0.34949515   0.42539123 0.0053834655  0.059515097 -0.061925708   -0.2531785  -0.24260907   0.71436872        0.075    1.4378898        1e-10 1.5874861e-11    6.2992679     2.445024    31.520363 -0.0014043816  -0.20318312 0.00085625493    0.1803974   0.38360434  -0.10940887 
 3186000    4.0338266    1.2926335    2.7411931  -0.22955677   0.86180464    1.0162191   0.75503082   -1.2298232            1 -0.052343719  -0.30620501   -0.3138925   0.46306636 -0.0059818651  0.070005765 -0.015350951  -0.20808799  -0.19740394   0.71968171        0.075    1.4306667        1e-10 1.5992927e-11    6.2527642    2.4446665    31.520363 0.00082015305  -0.22174125 0.0064009232   0.20685888   0.10819519    4.5520796 
 3187000    4.0256069    1.2783206    2.7472863  -0.22360244   0.85226214    1.0080522    0.7445355   -1.2298232            1  -0.15709823  -0.40557391  -0.40748397    0.3417632 0.0088506166   0.04154306 -0.023339347  -0.31067757  -0.30099266   0.71361118        0.075    1.4426256        1e-10 1.5858026e-11     6.305955    2.4465579    31.520363 -0.00061679623  -0.20200142  0.004246772   0.21552896  -0.16760265   0.90003507 
 3188000    4.0543233    1.2892838    2.7650394  -0.23121547   0.85957138     1.003088   0.76033878   -1.2298232            1  -0.14724585  -0.42351122  -0.37192018   0.35369386 -0.0076376902 -0.037475864  0.070620062  -0.30408502  -0.29043167   0.70912225        0.075    1.4381521        1e-10 1.5758272e-11    6.3458733    2.4330784    31.520363 -0.0048901588  -0.18330561 -0.004143879   0.19240306   0.82108357    2.2698215 
 3189000    4.0282626    1.2881897    2.7400729  -0.22781235   0.85884191    1.0127248   0.75243564   -1.2298232            1  -0.14160366  -0.38929363   -0.4114754   0.37595805 -0.0070120158  0.068608604  0.022050742  -0.29681262   -0.2861651   0.71417063        0.075    1.4300174        1e-10 1.5870459e-11    6.3010152    2.4541172    31.520363 -0.0018149998  -0.18976558  0.005173917   0.18947248   -0.1013473     2.981875 
 3190000    4.0567008    1.3013105    2.7553903  -0.23692002   0.86758964    1.0126087   0.76731814   -1.2298232            1  -0.16473873  -0.38945344  -0.43522665   0.33046391 0.0052072678 -0.0079607713 -0.045920945  -0.32301757  -0.30928358   0.71890481        0.075    1.4300069        1e-10 1.5975663e-11    6.2595213    2.4555642    31.520363 0.0012478659  -0.22094496 -0.0023163742   0.20920412   0.49835888    2.1442181 
 3191000    4.0456847     1.288486    2.7571988  -0.22709998   0.85903944    1.0026808   0.75972048   -1.2298232            1  -0.14899397  -0.40943199  -0.37071616   0.33316624 -0.00011487622  0.060319368  0.014480921  -0.30570561  -0.29212167   0.71834471        0.075    1.4398588        1e-10 1.5963216e-11     6.264402    2.4359728    31.520363 0.00076317082   -0.1733602 -0.0035765969   0.21273033   -1.5189283   0.44790893 
 3192000    4.0236423    1.2758843     2.747758  -0.23222635   0.85063785    0.9952459   0.75064913   -1.2298232            1  -0.12908329  -0.39135717  -0.41601637   0.42012367 -0.0058268843 -0.015088525 -0.055009434  -0.28392373  -0.27114969   0.71364953        0.075    1.4468578        1e-10 1.5858878e-11    6.3056162    2.4394046    31.520363 -0.0033205974   -0.1911784 0.0064681757   0.20621445    1.0402323    4.1948416 
 3193000    4.0421218    1.2851966    2.7569252  -0.23496786    0.8568464   0.99654765   0.76025383   -1.2298232            1  -0.23054529  -0.44779018  -0.50189351   0.25804783 0.00085378335   0.12201724  -0.04887011  -0.38736694  -0.37279751   0.71196381        0.075    1.4362581        1e-10 1.5821418e-11     6.320546    2.4483464    31.520363 -0.0054590295  -0.19533582 -0.0011431797   0.19409442   -1.0406811 -0.021117893 
 3194000    4.0247292     1.285218    2.7395111  -0.22257777    0.8568607    1.0118826   0.74966606   -1.2298232            1  -0.10013332  -0.38353906  -0.36977888   0.45291796 0.0075904529   0.13422408  0.022979142  -0.25477098  -0.24457453   0.71985662        0.075    1.4400851        1e-10 1.5996814e-11    6.2512449    2.4485489    31.520363 -0.0022181301   -0.1771908 0.0016803338   0.24059723   -2.0852522   0.42173214 
 3195000    4.0235226    1.2779588    2.7455638  -0.22162577   0.85202091    1.0108413   0.74219724   -1.2298232            1  -0.15375069  -0.40834077  -0.38353533   0.33062402 0.0035106383  0.050786376 -0.0088902427  -0.30684771  -0.29804325   0.71434002        0.075    1.4323588        1e-10 1.5874223e-11     6.299521    2.4418848    31.520363 -0.0019751865  -0.20897968 -0.00063515703    0.1932137   0.86513648 -0.072562545 
 3196000    4.0241212    1.2859411    2.7381801  -0.22350258    0.8573428    1.0160925   0.74756852   -1.2298232            1  -0.16259538  -0.39455805  -0.43315251   0.33992441 0.0098836898 -0.063910541 -0.029925419  -0.31680037  -0.30763753   0.70995942        0.075    1.4358545        1e-10 1.5776876e-11    6.3383904     2.454339    31.520363 0.0009911444  -0.22000979 -0.0063489221   0.18749527    0.5299013     1.699258 
 3197000    4.0324064    1.2848178    2.7475886  -0.22811095   0.85659386    1.0127355   0.74862434   -1.2298232            1  -0.11353353  -0.40003493  -0.36122881   0.42066315 -0.0062638785 -0.049197669  0.011341543   -0.2679563  -0.25809648   0.71319473        0.075    1.4406554        1e-10 1.5848772e-11    6.3096372    2.4433234    31.520363 0.0054261299  -0.20653814 0.0041941416   0.17178959   0.03125283   0.31792537 
 3198000    4.0502922    1.2997572     2.750535  -0.23135847   0.86655403    1.0155709   0.76351588   -1.2298232            1 -0.092497367  -0.32798891  -0.38103834   0.43153515 -0.012021588 -0.045088429 0.0031736878   -0.2499919  -0.23746506   0.72206669        0.075    1.4477408        1e-10 1.6045926e-11    6.2321114    2.4426491    31.520363 -0.008405561  -0.19458923 -0.0065296509   0.19974537    1.2056289   0.53673475 
 3199000    4.0494152    1.3014113    2.7480039  -0.22814282    0.8676568    1.0244148   0.75926183   -1.2298232            1  -0.17197036  -0.41440502  -0.42502296    0.3235169 -0.0025674412 -0.0057575245 -0.047231865  -0.32858739  -0.31820047   0.71764382        0.075    1.4422136        1e-10 1.5947641e-11    6.2705201    2.4511782    31.520363 -0.0018454287  -0.19830069 -0.0090966579   0.23306377   0.34928791   0.24646133 
 3200000     4.037008    1.2843265    2.7526815  -0.23647703   0.85626629    1.0112143   0.74912272   -1.2298232            1 -0.088455142  -0.34925107   -0.3963029   0.48018854  0.009195031  0.040486263 -0.059197721  -0.24298072  -0.23280095   0.70913877        0.075     1.449062        1e-10 1.5758639e-11    6.3457255     2.452471    31.520363 0.0031646431  -0.19821861 0.0030046974   0.18231194   0.38246629    2.0588009 
 3201000    4.0607885      1.29913    2.7616584   -0.2203295   0.86613588    1.0242497   0.75680251   -1.2298232            1  -0.16923093  -0.44778865  -0.39679172   0.33688758 -0.00058401946  0.029070369 -0.061591321  -0.32534066  -0.31543748   0.71308372        0.075    1.4309034        1e-10 1.5846305e-11    6.3106194    2.4525602    31.520363 0.0017820596   -0.2181091 0.0034796303   0.17118094    0.6572615    1.0859231 
 3202000    4.0382192    1.2938311     2.744388  -0.22791433   0.86260308    1.0196535   0.75400526   -1.2298232            1  -0.11052777  -0.33937358  -0.36104354   0.36883381  0.011703266 -0.043985092 -0.054945004   -0.2660605  -0.25607823    0.7198847        0.075    1.4263442        1e-10 1.5997438e-11     6.251001    2.4556802    31.520363  0.010360947  -0.17779567 0.0096351395   0.19794318   0.56079804 -0.056576947 
 3203000    4.0260054    1.2800986    2.7459069  -0.22864093   0.85344752    1.0177087   0.73985885   -1.2298232            1  -0.17237013   -0.4561805  -0.40150686   0.34057696 -0.0076292955 -0.012162999  0.017925106   -0.3249848  -0.31764299   0.71867495        0.075    1.4341143        1e-10 1.5970554e-11    6.2615234    2.4510698    31.520363 0.00061205836   -0.2206003 -0.0034249876   0.20129987 -0.039167895   0.74684294 
 3204000    4.0333663    1.2886465    2.7447197  -0.23269451    0.8591465    1.0210327   0.74720192   -1.2298232            1  -0.17779546  -0.43214801  -0.40390029   0.30266194 -0.00087790565  0.033314638 -0.018178277  -0.33192482  -0.32354279    0.7104033        0.075    1.4440364        1e-10 1.578674e-11      6.33443    2.4337607    31.520363 -0.0021459646  -0.20330634 0.00014254732     0.216776   -1.1635237  0.062613164 
 3205000    4.0437937    1.2847044    2.7590893  -0.22410273   0.85651826    1.0105087   0.75003738   -1.2298232            1  -0.20790499  -0.44250337  -0.45316074   0.27194915 0.0022327112  0.043927271 -0.020225002  -0.36261924  -0.35215008   0.71225097        0.075    1.4316051        1e-10 1.5827799e-11    6.3179977     2.459609    31.520363 -0.0059211858   -0.2122107 -0.010218572   0.20951858  0.021160072   0.69237959 
 3206000    4.0428013    1.2926501    2.7501511   -0.2340944   0.86181571    1.0261097   0.74820517   -1.2298232            1  -0.13536017  -0.39925155  -0.40767374   0.40084479 0.0039394996 -0.040892223  0.023561636  -0.28969648  -0.28183222    0.7174788        0.075    1.4417849        1e-10 1.5943973e-11    6.2719623    2.4455335    31.520363 -0.0022433726  -0.17774754 -0.0033321011    0.1950681   0.38312092   0.69068693 
 3207000    4.0580707    1.3010993    2.7569714  -0.22247635    0.8674488    1.0209208   0.76132772   -1.2298232            1  -0.15556738   -0.3929767  -0.39374423   0.32001881 -0.00026740388  0.067390715  0.046374855  -0.31261054  -0.30129874   0.71913073        0.075    1.4436958        1e-10 1.5980683e-11    6.2575549    2.4555448    31.520363 0.0040549843  -0.21118405 -0.00010244622   0.17061697   0.39392759    1.3402293 
 3208000    4.0661946    1.2998293    2.7663653  -0.23084484   0.86660209    1.0143554   0.76443838   -1.2298232            1  -0.15885053  -0.41691088  -0.41452424   0.35488353   0.01475846  0.031567758  0.010595736  -0.31653535  -0.30364471   0.71607662        0.075    1.4490885        1e-10 1.5912814e-11    6.2842437    2.4747425    31.520363 3.3013671e-05  -0.21583061 -0.0067381312   0.20377768 -0.078340685   -1.2237245 
 3209000    4.0412664     1.283827    2.7574394   -0.2197509    0.8559333    1.0110484   0.74867408   -1.2298232            1  -0.21312929  -0.44471316  -0.45961217   0.26493745 -0.0034215809  0.051882188  0.023164889  -0.36756233  -0.35745142   0.70499922        0.075    1.4366748        1e-10 1.5666649e-11    6.3829858    2.4567561    31.520363 -0.0050184737  -0.19669303 -0.019256869   0.18032033  -0.16784894 -0.008566311 
 3210000    4.0536908    1.3006247    2.7530661  -0.23030712   0.86713238    1.0204072   0.76114774   -1.2298232            1  -0.23500466  -0.48438409  -0.44333405   0.22270415   0.01773038  0.095308206 -0.013944295  -0.39201071  -0.38066271   0.70831086        0.075     1.444823        1e-10 1.5740241e-11    6.3531428    2.4500881    31.520363 -0.0074726292  -0.17855438 -0.0035488917   0.19941812   -2.0170356  -0.24456024 
 3211000    4.0653362    1.3084009    2.7569353  -0.22875817   0.87231681     1.044372   0.75333642   -1.2298232            1  -0.14360826  -0.39292432  -0.42042617    0.3825257 -0.0059038327 -0.032235619  0.047783554  -0.29900302  -0.29268717   0.71738223        0.075    1.4333819        1e-10 1.5941827e-11    6.2728066    2.4494696    31.520363 0.0035626575  -0.19020213 -0.0040970798   0.22251998   -1.5259525    2.8591901 
 3212000    4.0611607    1.2990845    2.7620762  -0.22429483   0.86610552    1.0336987   0.75021232   -1.2298232            1  -0.10010504  -0.34077466  -0.37194972   0.41240925 0.0033130965 -0.024858352  0.071922736  -0.25485538  -0.24766038   0.71368675        0.075    1.4455825        1e-10 1.5859706e-11    6.3052873    2.4430935    31.520363 -0.0050072346  -0.20133476 -0.0051051217   0.22640968  -0.86239485   -1.1165297 
 3213000     4.034088    1.2814258    2.7526621  -0.22696574   0.85433243     1.027874   0.73432169   -1.2298232            1  -0.26724506  -0.46580652  -0.50027683   0.16434816 -0.011238778 -0.058819187 -0.041383639  -0.41871755  -0.41396897   0.71287285        0.075    1.4289666        1e-10 1.5841619e-11    6.3124862    2.4454558    31.520363 -0.0073120627  -0.20501388 0.0044961264   0.22265196    0.2188699  -0.34866586 
 3214000    4.0528193    1.2861231    2.7666962  -0.22182661   0.85746411     1.011183    0.7511712   -1.2298232            1  -0.10753324  -0.39108617  -0.35358344   0.42206988 0.00013123236  0.057478188    0.0197911  -0.26248137  -0.25187459   0.71215193        0.075    1.4327608        1e-10 1.5825599e-11    6.3188763    2.4439981    31.520363 -0.0090559985  -0.18801296 -0.0022670926   0.19949331  -0.36070952    1.5501695 
 3215000    4.0285345    1.2728899    2.7556446  -0.22549526   0.84864147    1.0262907   0.72578768   -1.2298232            1  -0.19120754   -0.4114397  -0.46306486   0.30088194 0.0018763537  0.050739313 -0.055518696  -0.34091967  -0.33770543   0.71178126        0.075     1.417269        1e-10 1.5817361e-11    6.3221671    2.4443078    31.520363  0.015410323  -0.21087824 -0.0034853601   0.20596378   -1.8391074    1.0114505 
 3216000    4.0652047    1.3027528    2.7624519  -0.22249612   0.86855118    1.0192182   0.76437129   -1.2298232            1   -0.0967131  -0.38485517  -0.35872336   0.45343922  0.011897848   0.12591597 -0.00086936778  -0.25438408  -0.24220143   0.71343634        0.075    1.4337047        1e-10 1.5854141e-11    6.3075004    2.4433734    31.520363 -0.0056507649  -0.19665389 -0.0078395533   0.19124611   -1.5442483     2.095231 
 3217000    4.0262853    1.2786963    2.7475891  -0.23162066   0.85251262    1.0081568   0.74488695   -1.2298232            1  -0.22369193  -0.43980229  -0.46819041   0.23691691 -0.0023572555 0.0082167408 -0.041217603  -0.37734377   -0.3676013     0.711783        0.075    1.4280695        1e-10  1.58174e-11    6.3221515    2.4583831    31.520363 -0.005733625  -0.18904909 0.0060472263   0.18816356    0.8615283   -1.0825836 
 3218000    4.0296081    1.2871084    2.7424997  -0.23405489   0.85812103    1.0113783   0.75214765   -1.2298232            1  -0.15074908  -0.36970267  -0.42069326   0.33814869 -0.0059221995 -0.055484045  0.038113503  -0.30589863   -0.2951183   0.71239264        0.075    1.4561495        1e-10 1.5830948e-11    6.3167413    2.4439459    31.520363 -0.0092058318   -0.2054991 -0.0049395904   0.21031562   0.66124894    1.1575634 
 3219000    4.0307231    1.2921936    2.7385295  -0.22929529   0.86151134    1.0106965   0.75835626   -1.2298232            1  -0.11422912  -0.36805647  -0.38178174   0.40715084  0.011900877 -0.015844679 0.0025583737  -0.27065935  -0.25850102   0.71788437        0.075    1.4449729        1e-10 1.5952986e-11     6.268419    2.4417008    31.520363 -0.010931534  -0.21187892 -0.0013334938   0.19865802   -2.5238571 -0.050496303 
 3220000    4.0509517    1.2976053    2.7533464  -0.23272717   0.86511935    1.0228099   0.75607875   -1.2298232            1  -0.24501649  -0.47759684  -0.52704812   0.26959549 -0.0045661315  0.043828654   0.01751388  -0.40097692  -0.39101752   0.71764108        0.075    1.4455384        1e-10 1.594758e-11     6.270544    2.4427612    31.520363 -0.0034156462  -0.20220132 0.0015199957   0.22326685   -1.0195401  -0.64635108 
 3221000    4.0247301     1.276848    2.7478821  -0.22736371   0.85128038    1.0128785   0.73953438   -1.2298232            1  -0.19768457  -0.43556534  -0.46644127   0.30895289 -0.014877425   0.14305284   0.03094111  -0.35023231  -0.34226794   0.71097944        0.075    1.4331038        1e-10 1.5799543e-11    6.3292969    2.4573018    31.520363 0.0011234423  -0.21108458  -0.01159433    0.2046403  -0.61192189  -0.62484473 
 3222000    4.0370064    1.2951597    2.7418467  -0.22763878   0.86348887    1.0184988   0.75630318   -1.2298232            1 -0.0051710366  -0.25271779  -0.27718975   0.51439443 0.0092618387  -0.03308195  0.034326042  -0.16117776  -0.15055667   0.71197511        0.075    1.4404246        1e-10 1.5821669e-11    6.3204456    2.4614291    31.520363 -0.0072256697  -0.19293567 -0.001658152   0.20509959   0.87224398  -0.19881874 
 3223000     4.029118    1.2853531    2.7437649  -0.23041482   0.85695076    1.0164128   0.74668349   -1.2298232            1  -0.19148142  -0.44775085  -0.42934073   0.30264733 -0.016909721 -0.0072692997 -0.045890524  -0.34550384  -0.33656929   0.71606589        0.075    1.4596087        1e-10 1.5912575e-11    6.2843379    2.4613216    31.520363 -0.0077550125  -0.20613195 -0.0095257886   0.20227382    0.4297476    1.4826609 
 3224000    4.0447479    1.2940381    2.7507098  -0.22523401   0.86274108    1.0070222   0.76297976   -1.2298232            1  -0.15829845  -0.42449165  -0.39019631   0.33979261 0.0089408628  0.027142504  0.052509354  -0.31568239  -0.30204586   0.71023721        0.075    1.4586062        1e-10 1.5783049e-11    6.3359114    2.4458072    31.520363 -0.0049063903  -0.19772394 0.00080302357   0.20136026    1.0427795    1.0017151 
 3225000    4.0560088    1.3043632    2.7516455  -0.22308098    0.8696249    1.0235253    0.7632076   -1.2298232            1  -0.24673495  -0.47737259  -0.47584853   0.21301625 -0.020923392  0.047135417 -0.033152464  -0.40416589   -0.3928381   0.71073765        0.075     1.456204        1e-10 1.579417e-11    6.3314501    2.4502567    31.520363 -0.0062023618  -0.19534296 -0.0011235237   0.20021798   0.50769666   0.30535409 
 3226000    4.0414583    1.2908789    2.7505793  -0.23062377   0.86063485    1.0157028   0.75340874   -1.2298232            1  -0.14335734  -0.42792834  -0.37842671   0.37628302 -0.0065085642 -0.00058486793 -0.027525724  -0.29876702  -0.28834386   0.71683754        0.075    1.4505361        1e-10 1.5929723e-11     6.277573    2.4586153    31.520363 0.00035703477  -0.19548369 -0.0059458231    0.2225248   0.22803092    -1.392749 
 3227000    4.0496135    1.2993323    2.7502812  -0.21980436   0.86627074    1.0243472   0.75696324   -1.2298232            1     -0.13252  -0.38745512  -0.38554194   0.37543705 -0.0094382762  0.015546283 0.0046526763  -0.28866289  -0.27874046   0.72076584        0.075    1.4460756        1e-10 1.6017019e-11    6.2433591    2.4702733    31.520363 -0.0074153825   -0.2186559  -0.00610097   0.19265592   -1.0557815    1.2632384 
 3228000    4.0281784    1.2853097    2.7428687  -0.23132479   0.85692181    1.0109511   0.75041405   -1.2298232            1  -0.23751773  -0.48839506  -0.45713593   0.23297781 0.00089339079 -0.014556313 -0.052251115  -0.39230967  -0.38182597    0.7098127        0.075    1.4491037        1e-10 1.5773616e-11    6.3397006    2.4526635    31.520363 0.00097331004  -0.18443665 0.0089441106   0.19478407   -1.2722626  -0.38901581 
 3229000    4.0361071    1.2768591    2.7592481  -0.22368204   0.85128772     1.011823   0.74027722   -1.2298232            1  -0.24826045  -0.48610973  -0.47495404   0.21628243  0.021631641  0.051668941  0.010339812  -0.40096142  -0.39269315   0.71287647        0.075    1.4556573        1e-10 1.5841699e-11    6.3124541      2.44449    31.520363 -0.0051155907   -0.1868813 0.00086055358   0.20588452   0.16145951   0.74629161 
 3230000    4.0434301    1.2805476    2.7628826  -0.22570754   0.85374686    1.0174096    0.7405724   -1.2298232            1  -0.21472402  -0.45899729  -0.45492848    0.2697537 -0.00025342003 -0.063833022  0.027729568  -0.36748588  -0.35995417   0.71762088        0.075    1.4465287        1e-10 1.5947131e-11    6.2707206    2.4451974    31.520363 0.0015990687  -0.19645869 0.00027543544   0.21609451   0.43084483   -1.0498821 
 3231000    4.0391813    1.2870864    2.7520949  -0.23025422   0.85810634      1.00948   0.75343648   -1.2298232            1  -0.16960062  -0.41345056  -0.39921891   0.30386761 -0.00088386692 -0.045671455  0.025785285  -0.32501602  -0.31369886   0.71400243        0.075    1.4327665        1e-10 1.5866721e-11    6.3024996    2.4432729    31.520363 0.00030438537  -0.20322017 -0.0001846788   0.18671753    1.0441431    1.6843831 
 3232000    4.0382481    1.2809628    2.7572853  -0.22186038   0.85402374    1.0145888    0.7429929   -1.2298232            1  -0.16962591  -0.40440383  -0.45420536   0.34973148 -0.010902246 -0.066736953  0.031602813  -0.32288705  -0.31445341   0.70628692        0.075    1.4338865        1e-10 1.5695265e-11    6.3713483    2.4481366    31.520363  -0.01338195  -0.20420681 0.00057686262   0.19228415   0.53950952    1.3535363 
 3233000    4.0342505    1.2896322    2.7446183  -0.22292545   0.85980364    1.0112789    0.7550636   -1.2298232            1  -0.15371616  -0.43337675  -0.39401694    0.3662452 0.0056535855 -0.033020806 -0.033455278   -0.3094672   -0.2980712    0.7125137        0.075    1.4353767        1e-10 1.5833638e-11     6.315668    2.4691766    31.520363 -0.0037970228  -0.23117598 -0.0073422903   0.19963688    1.2474111    2.5711989 
 3234000    4.0481097    1.2883566    2.7597531  -0.23469254   0.85895318    1.0233758   0.74525335   -1.2298232            1   -0.1354648  -0.42614733  -0.38032814   0.40008108 0.0032746467  0.076770977 -0.015208624  -0.28919222   -0.2815466   0.71445371        0.075    1.4289798        1e-10 1.5876749e-11    6.2985186    2.4420496    31.520363 -0.0050464101  -0.19902307 0.0010988762   0.24128017   0.64486985   0.82268991 
 3235000    4.0437132    1.2913476    2.7523656  -0.22801992   0.86094731    1.0248906   0.74757934   -1.2298232            1  -0.14536227  -0.39037099  -0.39635161   0.35063577 0.0074163441   0.10908571  0.051826864  -0.29956949  -0.29166031   0.71163712        0.075    1.4224636        1e-10 1.5814158e-11    6.3234475    2.4411666    31.520363 -0.0010506683   -0.2049314 -0.005404065   0.16434007  0.089818236    1.2647902 
 3236000    4.0477342    1.2847998    2.7629345  -0.22129201   0.85658183    1.0119174   0.74917013   -1.2298232            1  -0.14521449  -0.40413106   -0.4119049    0.3803925 -0.0044097649 -0.030363545  0.014718039  -0.29974984  -0.28966066   0.71428791        0.075    1.4050392        1e-10 1.5873065e-11    6.2999806    2.4493981    31.520363 -0.0015615181  -0.20691654 -0.0029778786   0.19570034    1.0337553    1.1568631 
 3237000    4.0365035    1.2724064    2.7640971  -0.22679963   0.84831909    1.0121803   0.73500673   -1.2298232            1  -0.15010984  -0.41763825  -0.39622235   0.36353108 -0.0010183485 -0.051995979 -0.0061263264  -0.30172364  -0.29459354   0.71666309        0.075    1.4166976        1e-10 1.5925847e-11    6.2791011    2.4666645    31.520363 -0.0040938419  -0.20140183 -0.016062877   0.20745596    1.4656568    1.6161994 
 3238000    4.0311646    1.2764076     2.754757  -0.22643559   0.85098673    1.0085807   0.74201165   -1.2298232            1  -0.11971782  -0.39920942  -0.37009462   0.41015058 0.0013324522 -0.084648082 0.0055715585  -0.27277656  -0.26368769   0.71214247        0.075    1.4148125        1e-10 1.5825388e-11    6.3189603    2.4445338    31.520363 -0.016710962  -0.19564118 0.00073801816   0.19704679  -0.94444354   0.27871908 
 3239000    4.0529219    1.2976554    2.7552665  -0.23011575   0.86515272     1.014079   0.76217715   -1.2298232            1  -0.15345449  -0.43577787  -0.39315111    0.3685655 -0.0087840669 -0.042270382 -0.025480421  -0.31067288  -0.29820922   0.71267634        0.075    1.4026978        1e-10 1.5837252e-11    6.3142267    2.4522474    31.520363 -0.00040538409  -0.21330554 -0.004723829   0.20721899   0.58031841     3.114118 
 3240000    4.0671592    1.3129541    2.7542051   -0.2285969   0.87535243    1.0300052   0.76841502   -1.2298232            1  -0.13545891  -0.40820781  -0.41004993     0.411881 -0.0020591782   0.10828834  0.044527936  -0.29396402  -0.28248703   0.71088055        0.075    1.3960606        1e-10 1.5797346e-11    6.3301774    2.4440196    31.520363  0.010423929  -0.19055646 -0.010288111    0.2006381   -1.7359477    1.1325377 
 3241000    4.0510535    1.2936158    2.7574378  -0.22710833   0.86245951    1.0082302   0.76166737   -1.2298232            1  -0.17097357  -0.43228289  -0.38841239   0.30777458 -0.0056861389  0.004503548  0.032933748  -0.32808679  -0.31489341   0.71327705        0.075    1.4092767        1e-10 1.5850601e-11     6.308909    2.4627523    31.520363 0.0062792857  -0.20719537 -0.0026708542   0.20531973  -0.66816155   0.98353717 
 3242000    4.0340858    1.2784436    2.7556422  -0.23224577   0.85234414    1.0166791   0.73870436   -1.2298232            1  -0.16557843  -0.40691448  -0.41990282   0.33008199 -0.021072253 -0.030141931 0.0059958584  -0.31795496  -0.31070431   0.71410814        0.075     1.398931        1e-10 1.586907e-11    6.3015666     2.443807    31.520363 -0.0014956542  -0.18466379 0.0003275002   0.19816101  0.062146849   -1.5676724 
 3243000    4.0520577    1.2908395    2.7612183  -0.22463084   0.86060853    1.0134501   0.75492309   -1.2298232            1  -0.16045899  -0.44467323   -0.3996585   0.36295478 -0.0050417285  0.075141345 -0.033691587  -0.31618104  -0.30512394   0.71334929        0.075    1.3932445        1e-10 1.5852206e-11    6.3082701    2.4375183    31.520363  0.005327721  -0.21087738 0.0040768759   0.20161292  -0.63135192    2.4688154 
 3244000    4.0448709    1.2868312    2.7580397  -0.22881901   0.85793619    1.0179394   0.74729452   -1.2298232            1 -0.099727802  -0.36274322  -0.34292765   0.40648746 -0.00091808091  0.054139207  0.035454462  -0.25387627  -0.24503359   0.71326027        0.075     1.398033        1e-10 1.5850228e-11    6.3090574     2.443742    31.520363 -0.00071648803  -0.18477068 -0.0033465172   0.21874235  -0.90697937    1.0704813 
 3245000    4.0507068    1.2837324    2.7669744  -0.22568171   0.85587023    1.0097349   0.74947633   -1.2298232            1 -0.069430056  -0.33964173  -0.36075463   0.49210619 -0.031086739 -0.024137625 0.0031986135  -0.22402857  -0.21356469   0.71365222        0.075    1.4025364        1e-10 1.5858938e-11    6.3055924    2.4396121    31.520363 0.0053701176  -0.19239502 0.0028521055   0.20334953  -0.17867033    1.8166933 
 3246000    4.0643456    1.3024726     2.761873  -0.22419356    0.8683644    1.0281528   0.75787239   -1.2298232            1  -0.20143503  -0.43076256  -0.47961302   0.30607049    0.0045027  0.016210516 -0.015601296  -0.35776545  -0.34819873   0.71273786        0.075    1.3999639        1e-10 1.5838619e-11    6.3136817    2.4479626    31.520363 -0.00082687634  -0.17702665 -0.010854061   0.17861918   0.10393674    3.6645598 
 3247000    4.0349582    1.2897541    2.7452041  -0.22967346   0.85988491    1.0121477   0.75459988   -1.2298232            1 -0.084812814  -0.32609402  -0.35077953   0.42243511 0.0050610533 -0.033739082 -0.012912488  -0.24046819  -0.22929187   0.71227379        0.075    1.3908334        1e-10 1.5828306e-11    6.3177953    2.4515466    31.520363 -0.010157822  -0.23919596 0.0055788297   0.20005299   0.98797381     1.911131 
 3248000    4.0378465     1.282811    2.7550355  -0.23064359   0.85525591    1.0181205    0.7426339   -1.2298232            1  -0.18516169  -0.40992016  -0.44154245   0.29597754 -0.0074671302  0.029429219 -0.012641434  -0.33834878  -0.33049333   0.71268061        0.075    1.4045299        1e-10 1.5837347e-11    6.3141889    2.4495819    31.520363 -0.0065039548  -0.18955585 0.0055272714   0.20454569    1.7549801   0.72226515 
 3249000     4.047476    1.2874441     2.760032  -0.21011844    0.8583448    1.0069953   0.75555935   -1.2298232            1  -0.21937685  -0.42767728  -0.45232568   0.22187242 -0.010035572  0.010588839  0.041355986  -0.37523014  -0.36312042   0.71564253        0.075    1.4000567        1e-10 1.5903167e-11    6.2880556    2.4406544    31.520363 -0.0071893208  -0.20512668 -0.0052491468    0.2230615    1.1269777   0.31015898 
 3250000    4.0499067    1.2964554    2.7534513  -0.22430011   0.86435269    1.0194034   0.75713887   -1.2298232            1   -0.2574031  -0.47402845  -0.50017476   0.20199392  0.015999454   0.02697175  0.011766569  -0.41358221  -0.40291785   0.71803762        0.075    1.4022562        1e-10 1.5956392e-11    6.2670811    2.4589473    31.520363 0.0010603659  -0.19232523 -0.0043451936   0.18864464   -0.6145186     1.390718 
 3251000    4.0502189     1.298001    2.7522179  -0.23197602   0.86538318    1.0229799   0.75640755   -1.2298232            1  -0.10107415  -0.36176194  -0.33412094   0.39266043 -0.006490355 -0.0061305764 -0.036873278  -0.25710241  -0.24709944   0.71466072        0.075    1.4015491        1e-10 1.5881349e-11    6.2966942    2.4388718    31.520363 0.00085000666  -0.17934415 0.0037820361    0.1915014    1.0367494    2.4862084 
 3252000    4.0400295    1.2872149    2.7528147    -0.238442   0.85819199    1.0232514   0.74405139   -1.2298232            1  -0.11829498  -0.39418239  -0.39320496   0.43250242 0.0072727618 -0.089911372  0.046443473  -0.27177446  -0.26435903   0.71639807        0.075    1.3973802        1e-10 1.5919957e-11     6.281424    2.4374324    31.520363 -0.00076494901  -0.20439377 0.0018352193   0.21361189    1.8490918  -0.29921571 
 3253000    4.0518487    1.2927653    2.7590834  -0.23025004   0.86189251    1.0139155   0.75677365   -1.2298232            1  -0.11636566  -0.38917761  -0.38487892   0.42495955 0.0037181153 0.0055444581 -0.026588167  -0.27246943  -0.26109705   0.71487388        0.075    1.4015175        1e-10 1.5886086e-11    6.2948166    2.4496339    31.520363 -0.016238359  -0.16865201 0.0039570801   0.21525073   -0.1218976   0.72332297 
 3254000    4.0154539    1.2671548    2.7482991  -0.21521822   0.84481788     1.001439    0.7365154   -1.2298232            1  -0.23169087   -0.4613751  -0.47340078   0.23970327 0.0019345393   0.10651406  0.033839732  -0.38361587  -0.37464131   0.71516905        0.075    1.4065612        1e-10 1.5892645e-11    6.2922186    2.4431409    31.520363 -0.0056236074  -0.20681664 -0.013597527   0.19672663   -1.7363901  -0.73863322 
 3255000    4.0236612    1.2795567    2.7441045  -0.23181666   0.85308625    1.0120596    0.7431568   -1.2298232            1  -0.23504178  -0.49475241  -0.46106934    0.2506964  0.017604539 0.0074661886   -0.0057451  -0.38833674  -0.37950826   0.71863131        0.075    1.3956449        1e-10 1.5969585e-11    6.2619037    2.4479051    31.520363 -0.0026083316  -0.18405119 -0.0025317005   0.22015229   0.38048276    0.6293943 
 3256000    4.0363039    1.2708867    2.7654172  -0.23023193   0.84730591   0.99022525   0.74848547   -1.2298232            1 -0.087539978  -0.37478643  -0.35127598   0.46344247 -0.0052301416  -0.11841291 -0.015688738  -0.24193411  -0.22888971   0.71452019        0.075    1.4019132        1e-10 1.5878226e-11    6.2979326    2.4398559    31.520363 -0.0015227198  -0.18977128 -0.013941506   0.22161262      1.15581    2.1216545 
 3257000    4.0269964    1.2680885    2.7589079  -0.22111075   0.84544037   0.98769023   0.74708304   -1.2298232            1  -0.12150087  -0.39980484  -0.35237708    0.3876793  0.012040592 -0.056488629 -0.011139693  -0.27560572  -0.26248874   0.71255747        0.075    1.4090973        1e-10 1.5834611e-11      6.31528    2.4542517    31.520363 -0.005056951  -0.20152649 0.00059680389   0.18437491   -1.0922383  0.046521149 
 3258000    4.0221693    1.2800604    2.7421089  -0.23209348    0.8534221    1.0032599   0.74981457   -1.2298232            1  -0.19971669  -0.42136292  -0.44742293   0.26963579 -0.0071962869   0.01956852 -0.0084093771  -0.35438498  -0.34292705   0.71819067        0.075    1.3951292        1e-10 1.5959793e-11    6.2657455    2.4419213    31.520363  0.011391832  -0.18433973 -0.00020998755   0.18698483  -0.68410144   -1.6299325 
 3259000    4.0279376    1.2788307    2.7491069  -0.23049214   0.85260226    1.0024321   0.74900021   -1.2298232            1  -0.15132234  -0.39041429  -0.41210721   0.34855449 -0.0019334239 0.0077737719 0.0013374896  -0.30582265  -0.29441453    0.7232206        0.075    1.3770858        1e-10 1.6071569e-11    6.2221679    2.4558802    31.520363 -0.0049979517   -0.2008171 -0.016640887   0.19780864   0.12388895   0.31219785 
 3260000     4.003896    1.2727819    2.7311141  -0.23889636   0.84856949    1.0072694   0.73882884   -1.2298232            1  -0.13975052  -0.40268833  -0.39549442   0.37893121 -0.0097862198   0.11437298  0.051235775  -0.29215272  -0.28353321   0.71336901        0.075    1.3703512        1e-10 1.5852645e-11    6.3080957    2.4419305    31.520363 -0.0025682314  -0.19250643 0.0055964406   0.17818969  -0.48104976   0.64320084 
 3261000     4.018328    1.2778373    2.7404907  -0.22935512   0.85193995    1.0032458   0.74731639   -1.2298232            1   -0.1473237  -0.39639345  -0.39018868   0.34461104 -0.0038595274  0.056811708 0.00030037377  -0.30147667  -0.29053204   0.70934091        0.075    1.4012204        1e-10 1.5763131e-11    6.3439172    2.4418552    31.520363 -8.2379699e-05  -0.21453253 -0.0051443664    0.1769109   -1.0496388    1.5017741 
 3262000    4.0293573    1.2862246    2.7431327  -0.22617729   0.85753178   0.99971319   0.75922298   -1.2298232            1  -0.14891317  -0.37867002  -0.42793807   0.35986858 -0.023053667 -0.0047200336 0.0071538567  -0.30552218  -0.29161725   0.72076893        0.075    1.3777139        1e-10 1.6017087e-11    6.2433324     2.444763    31.520363 0.00017324717  -0.21645714 0.0045440988   0.20499411  -0.51741188  -0.52399944 
 3263000    4.0244624     1.280086    2.7443764  -0.23318637   0.85343917    1.0131028   0.74303204   -1.2298232            1  -0.03469301  -0.30413065  -0.32369775   0.52374937  0.004526048  0.026571819 -0.031010842  -0.18796223   -0.1793084    0.7247165        0.075    1.3850244        1e-10 1.6104811e-11    6.2093246    2.4442387    31.520363 0.0021356342   -0.2118595 -0.0017986248   0.21270688   0.24187271    1.3979498 
 3264000    4.0218731    1.2757515    2.7461215  -0.23090944   0.85054934    1.0038828   0.74452254   -1.2298232            1  -0.16599871  -0.43385522  -0.38351663   0.31937573 -0.010171744 -0.063032035  0.010944703  -0.31957538  -0.30929798   0.71601049        0.075    1.3862235        1e-10 1.5911344e-11    6.2848241    2.4716528    31.520363 -0.009798065  -0.17787563 0.00045127951   0.18657126    1.1295618   0.90069345 
 3265000    4.0196355    1.2891866    2.7304489  -0.22633387   0.85950655    1.0122919   0.75385987   -1.2298232            1   -0.1075736  -0.36199419   -0.3722941    0.4115675 -0.0055438019   0.05900352 -0.039740613  -0.26307633  -0.25207324   0.70512336        0.075    1.3979317        1e-10 1.5669408e-11     6.381862    2.4432225    31.520363  0.001758265  -0.20278572 -0.0012800021   0.18736738  -0.70961066    1.8526973 
 3266000    4.0268758    1.2726737    2.7542021  -0.22763613   0.84849736    1.0016745   0.74257848   -1.2298232            1 -0.042695669  -0.32825512  -0.31572494   0.51589306 -0.00039708684 -0.041957299 -0.0041605972  -0.19587133  -0.18567973   0.71825943        0.075    1.4059995        1e-10 1.5961321e-11    6.2651457    2.4470061    31.520363 -0.002408959  -0.18882117 -0.0033997761   0.21129001   0.18256694    1.1560619 
 3267000    4.0403661     1.280899    2.7594672  -0.22831527   0.85398115    1.0135663   0.74362844   -1.2298232            1  -0.23628212  -0.47940877  -0.46589466   0.23645706 0.0048406167 -0.0077241048 -0.046510341  -0.38967437  -0.38096367   0.72099231        0.075    1.3794632        1e-10 1.6022051e-11     6.241398    2.4455591    31.520363 -0.00030070139   -0.2029152 -0.0040656056   0.22410932     1.365447   0.44945994 
 3268000    4.0241578    1.2800836    2.7440742   -0.2306334   0.85343754    1.0162281   0.74086654   -1.2298232            1 -0.054470764  -0.32000913  -0.32505449   0.48165133 0.0034376184   0.03970736  0.025834313   -0.2072933  -0.19953227   0.71417708        0.075    1.3953839        1e-10 1.5870602e-11    6.3009583    2.4464336    31.520363 -0.0020668676  -0.18990083 0.0075192042   0.19621858  -0.24927272    1.7089479 
 3269000    4.0160082    1.2709254    2.7450828  -0.22180356   0.84733176    1.0042728   0.73880813   -1.2298232            1  -0.26813101  -0.50111834  -0.49863285   0.19535817 0.00047496619  0.011444308 -0.026870832  -0.42052894  -0.41148595   0.71096554        0.075    1.4084707        1e-10 1.5799234e-11    6.3294207    2.4462344    31.520363 -0.0032911162  -0.21317906  0.014069183      0.23196   0.41875243   -1.2055836 
 3270000    4.0278854    1.2701626    2.7577228  -0.22287818   0.84682314    1.0062077   0.73660853   -1.2298232            1  -0.10809097  -0.38164372  -0.35445792   0.41182874 -0.015221766 -0.051830215  0.041407075  -0.26003517  -0.25172211   0.71417633        0.075    1.4037077        1e-10 1.5870585e-11    6.3009649    2.4427733    31.520363 0.0008987738  -0.19205942 -0.0010397116   0.19174981  -0.94388184    2.0135053 
 3271000     4.039122    1.2871795    2.7519425  -0.22680745   0.85816842    1.0211346   0.74547639   -1.2298232            1 -0.098057722  -0.34362198  -0.36388337   0.41333219 -0.004923991   0.03569595 -0.0049774974  -0.25183115   -0.2438196   0.71854882        0.075    1.4080539        1e-10 1.5967752e-11    6.2626225    2.4391405    31.520363 -0.0065821647  -0.18213384 -0.0079167759   0.22174592  -0.74409511    2.0714886 
 3272000    4.0274185    1.2812391    2.7461793  -0.22800671   0.85420795    1.0018793   0.75209971   -1.2298232            1  -0.12769131  -0.37181663   -0.3627392    0.3514819 0.0073484559  0.024983072 -0.031598093  -0.28283097   -0.2707046   0.72066112        0.075    1.4185328        1e-10 1.6014692e-11    6.2442663    2.4507224    31.520363 -0.001755703  -0.21043422 -0.0016743631   0.19308251  -0.23883997   -1.0679945 
 3273000    4.0275631    1.2773635    2.7501996  -0.22402798   0.85162404    1.0059541   0.74490767   -1.2298232            1 -0.044678951  -0.33102073   -0.3198929   0.51687678 -0.0031963489 0.0035806257 -0.013627802  -0.19833507  -0.18827389   0.71241151        0.075    1.3983414        1e-10 1.5831367e-11     6.316574     2.446761    31.520363 -0.0025072869  -0.21352861 -0.00090437538   0.21078122    1.0119334    2.0316472 
 3274000    4.0310702    1.2769708    2.7540994  -0.22741024   0.85136225    1.0068245   0.74386236   -1.2298232            1  -0.24566217  -0.49385458  -0.48085754    0.2377256  0.004084735  0.038239132 -0.034036545  -0.39910267  -0.38938136   0.71249929        0.075    1.3936174        1e-10 1.5833318e-11    6.3157957    2.4390767    31.520363 0.0024179645  -0.20872632 -0.00044863989    0.2052379  -0.84515831   -0.5587914 
 3275000    4.0473635    1.2919885    2.7553751  -0.22816755   0.86137457    1.0184588   0.75275323   -1.2298232            1  -0.10511798  -0.35948054  -0.37303379    0.4171604 -0.0094559752 -0.039048428  0.013668792  -0.26039244   -0.2504979   0.71940408        0.075    1.4041128        1e-10 1.5986757e-11    6.2551772    2.4614559    31.520363 -0.0027044932   -0.2053068 -0.0034069836   0.19751369   -1.2842616    1.4686211 
 3276000    4.0242383    1.2803911    2.7438472  -0.23314485   0.85364255    1.0069701   0.74762009   -1.2298232            1  -0.29589167  -0.53535413  -0.53999684   0.18767595 0.0014718219  0.021634065  0.008427781  -0.45010729  -0.43963165   0.71521181        0.075     1.405584        1e-10 1.5893596e-11    6.2918424     2.443413    31.520363 0.0024576642  -0.20115688  0.012221961   0.20398526  -0.08301844  -0.66058757 
 3277000    4.0265411    1.2827612    2.7437799  -0.22796401   0.85522272    1.0117564   0.74698177   -1.2298232            1  -0.17100646  -0.40827521  -0.41332415   0.30857996 -0.0066427746  0.025873186 0.0064259782  -0.32509041  -0.31542965   0.71553847        0.075    1.4171747        1e-10 1.5900855e-11      6.28897    2.4482448    31.520363 0.0030132874  -0.19261552 0.0015019844   0.20430362   0.71874028   0.31251773 
 3278000    4.0153487    1.2827448    2.7326039  -0.23903958   0.85521181     1.013593   0.74569238   -1.2298232            1 -0.047231036  -0.33359587  -0.34851351   0.54041627 -0.00096062346 -0.035957143 -0.00079232645  -0.20104902  -0.19191639   0.71739921        0.075    1.4080471        1e-10 1.5942205e-11    6.2726582    2.4390062    31.520363 -0.020645758  -0.20086477 0.0073459075   0.21404496    0.5477177   0.46177072 
 3279000    3.9995598    1.2698784    2.7296814  -0.23099497   0.84663368   0.99794397   0.74200655   -1.2298232            1  -0.13760572  -0.41733348  -0.37971948    0.3842358 -0.0098693499 -0.051178831 -0.011383045  -0.29066341  -0.28005726   0.71592223        0.075    1.4194865        1e-10 1.5909383e-11     6.285599    2.4358301    31.520363 -0.0059806515  -0.22626996 -0.0068033253   0.20367182    1.0910653  -0.52547609 
 3280000     4.034254    1.2836305    2.7506235  -0.22680698   0.85580228    1.0109483   0.74852167   -1.2298232            1  -0.16323838  -0.41557246  -0.41864037   0.34449769 0.0031829181  0.058194497  -0.02635998  -0.31763997  -0.30754621   0.71404695        0.075    1.4234984        1e-10 1.586771e-11    6.3021066    2.4611416    31.520363 -0.0015736043   -0.1942978  0.003998188   0.21156459 -0.0029569315  -0.15741142 
 3281000    4.0419091     1.286865    2.7550441  -0.23017269   0.85795871    1.0071382   0.75480717   -1.2298232            1 -0.085939139  -0.36378631  -0.38098521    0.4869541 -0.00058776174 -0.066276408 -0.023007456  -0.24163728  -0.22970311   0.71363038        0.075    1.4073716        1e-10 1.5858453e-11    6.3057854    2.4428993    31.520363 0.0011318053  -0.16914644 -0.0073312088   0.18955205   0.65652385   0.22729025 
 3282000    4.0274294    1.2820786    2.7453508  -0.22671049   0.85476763    1.0117726   0.74620045   -1.2298232            1  -0.11025992  -0.39741176  -0.37064733   0.43727933 -0.0010263864 -0.047690352 -0.023893427   -0.2641827  -0.25468543   0.71807038        0.075    1.4074521        1e-10 1.595712e-11    6.2667952    2.4438356    31.520363 -0.0060069129   -0.2082538 -0.0097561391   0.19496417 -0.020178628    1.2332411 
 3283000    4.0445139    1.2866436    2.7578703  -0.22898323   0.85781115    1.0165923   0.74801516   -1.2298232            1  -0.13730967  -0.38885288  -0.43046286   0.40738672 -0.00083021391 -0.0057264033 -0.062811098  -0.29160679  -0.28242316   0.71692063        0.075    1.4137415        1e-10 1.593157e-11    6.2768455    2.4429846    31.520363 -0.007768719  -0.20646551 -0.0026386174   0.20961634  -0.64379686    1.2599765 
 3284000    4.0346771    1.2825623    2.7521148  -0.22234137   0.85509011    1.0101202   0.74788966   -1.2298232            1  -0.10842617  -0.39481539  -0.35891903   0.42845592   0.01755447 -0.038264101 -0.055592771  -0.26269739  -0.25261579   0.71415169        0.075    1.4133906        1e-10 1.5870037e-11    6.3011823    2.4488947    31.520363  0.011723202  -0.21618257 -0.00066005609    0.2034187  -0.93647586   0.53938367 
 3285000    4.0413323    1.2851709    2.7561613  -0.22732751    0.8568293    1.0130699   0.74879132   -1.2298232            1  -0.16204459   -0.4428392  -0.43951707    0.3962225 -0.0024521467 -0.053698628    0.0431015  -0.31650181  -0.30665528   0.71751114        0.075    1.4090816        1e-10 1.5944692e-11    6.2716796     2.473443    31.520363 -0.0099090033  -0.20305058 -1.3112647e-05   0.22359895  -0.29446909    1.3466492 
 3286000    4.0493794    1.2822842    2.7670952  -0.22777785   0.85490468      1.00828   0.74884929   -1.2298232            1  -0.12298945  -0.36905774  -0.38211104   0.38220042 -0.0075791548  0.027842156 -0.028448376  -0.27745863  -0.26691641   0.71383614        0.075    1.4004223        1e-10 1.5863025e-11    6.3039678    2.4458661    31.520363 -0.0068169389  -0.18419414 0.00058391756   0.20865871    1.1062913   -0.3923632 
 3287000    4.0359144    1.2815143    2.7544001   -0.2319653   0.85439141    1.0025648   0.75193578   -1.2298232            1  -0.16296774  -0.42738295  -0.40324097    0.3417207 -0.0023794299   0.04433606  0.070060191  -0.31807358  -0.30607888   0.71605584        0.075    1.3803036        1e-10 1.5912352e-11    6.2844261     2.454685    31.520363 -0.0046342962   -0.1942723 -0.0033481688   0.20364285  -0.16384448    -1.734993 
 3288000    4.0235272    1.2895004    2.7340268  -0.23431352    0.8597158    1.0202262   0.74872334   -1.2298232            1  -0.10532386  -0.34636286  -0.34855803    0.3789493 -0.0090783634 -0.012942295  0.025814639  -0.25976706  -0.25095608   0.71843996        0.075    1.3896471        1e-10 1.5965333e-11    6.2635714      2.44558    31.520363 -0.0048481229     -0.20058 -0.0013917875    0.1868828    1.3055041    2.8826479 
 3289000    4.0321405    1.2828423    2.7492983   -0.2257487   0.85527676     1.021713   0.74018309   -1.2298232            1   -0.1922011  -0.43232993   -0.4119834   0.26771003 -0.0071048841 -0.017440986 -0.0076541253  -0.34488265  -0.33804556   0.72126183        0.075     1.388999        1e-10 1.6028041e-11    6.2390657    2.4581191    31.520363 -0.0034985315  -0.20181532 -0.0011752811   0.20337613    1.4266699   0.47975117 
 3290000    4.0306417    1.2859859    2.7446558  -0.23176596   0.85737262    1.0073669    0.7536572   -1.2298232            1  -0.11103181  -0.36015442  -0.35549265   0.38255164 0.0045168933 -0.0047485989 -0.046554957  -0.26649274  -0.25482843    0.7176399        0.075    1.3924332        1e-10 1.5947553e-11    6.2705543     2.448373    31.520363 0.0050997278  -0.18685436 -0.0036742071   0.19607567   0.22804009    1.0367375 
 3291000    4.0223604    1.2742977    2.7480627  -0.22955398   0.84958008     1.002984    0.7435044   -1.2298232            1  -0.15695644   -0.4274414  -0.41984102    0.3764131 0.0049981884   -0.0480434 -0.0042067785   -0.3103231  -0.30012742   0.71305751        0.075    1.3772704        1e-10 1.5845722e-11    6.3108514    2.4491309    31.520363 0.0027937668  -0.22368015  -0.01129695   0.18078923    1.4400559    0.4805611 
 3292000    4.0432362    1.2867024    2.7565338  -0.21769694   0.85785036    1.0045851   0.75639065   -1.2298232            1  -0.17246199  -0.43614209  -0.38985858    0.3086147 0.00077289686 -0.019519724  0.026343168  -0.32848676  -0.31586151   0.71220855        0.075    1.3996463        1e-10 1.5826857e-11    6.3183741    2.4547779    31.520363 0.0056923556  -0.19110544 -0.017317612   0.20354462   0.18619474  -0.10799588 
 3293000    4.0137263    1.2725659    2.7411604  -0.22959918   0.84842545   0.99760027   0.74527626   -1.2298232            1  -0.15285914  -0.40014227  -0.40948124    0.3510461  0.015880108   0.09729987  0.019085114  -0.30659128  -0.29526161   0.71372161        0.075    1.3983885        1e-10 1.586048e-11    6.3049794    2.4442343    31.520363 0.0044106865  -0.20435901 -0.010807429   0.20415327   -1.6200667   0.61953399 
 3294000    4.0099703    1.2635048    2.7464655  -0.23467404    0.8423844   0.98619988   0.74294334   -1.2298232            1   -0.1157401  -0.36164068  -0.38124804   0.39566844 -0.0033374682   0.02188091 -0.0085680322  -0.26899102  -0.25651522   0.71827519        0.075    1.3960214        1e-10 1.5961671e-11    6.2650082    2.4491993    31.520363 -0.0032852764  -0.18584387  0.005005024   0.19407023  -0.86116849   0.72975886 
 3295000     4.022285    1.2651708    2.7571142   -0.2381421    0.8434951    0.9894426   0.74257878   -1.2298232            1  -0.13933763  -0.39458308  -0.39145424   0.36802442  0.012036758  0.046628011 -0.036356111  -0.29251336  -0.28057564   0.71685669        0.075    1.3903512        1e-10 1.5930149e-11    6.2774054    2.4443727    31.520363 -0.0032469095  -0.18720449 -0.0046703124   0.21188789   0.91681192    1.4690441 
 3296000    4.0045701    1.2679222    2.7366479  -0.23931673   0.84532951   0.99512921    0.7417476   -1.2298232            1  -0.10691471  -0.37910914  -0.32801383   0.38637884 -0.0055228463 -0.0081085091 -0.041846567  -0.25991898  -0.24896445   0.71355783        0.075    1.3862153        1e-10 1.5856841e-11    6.3064265     2.443004    31.520363 -0.0035079262  -0.18612749 -0.0028287229   0.20355395   0.11855954   0.56529919 
 3297000      4.01595    1.2802114    2.7357386  -0.23244639   0.85352274   0.99446937   0.75606803   -1.2298232            1  -0.16113989  -0.41776491  -0.41356459   0.34790984 0.0054910025 -0.0077188586 -0.012872194  -0.31709811  -0.30309544   0.71459309        0.075    1.3838212        1e-10 1.5879846e-11    6.2972901    2.4408672    31.520363 0.0031443491  -0.22337991 0.0017824599   0.19888615  0.091141656    2.6971137 
 3298000    4.0286199    1.2720274    2.7565925  -0.23005454   0.84806642   0.98508446   0.75332982   -1.2298232            1   -0.2796256  -0.49180442  -0.51499382   0.16792144 0.0018615887  0.040075405 0.0036139168    -0.435019   -0.4202415    0.7217381        0.075    1.3663269        1e-10 1.6038625e-11    6.2349486    2.4471527    31.520363 0.0033395933   -0.1864705 5.8676852e-05   0.18984404  -0.69277466   -1.0847241 
 3299000    4.0024276    1.2803439    2.7220837  -0.23481601   0.85361108    1.0081511   0.74674961   -1.2298232            1  -0.17592371  -0.43473618  -0.40948519   0.31645024 -0.016825874  0.086338082 -0.013789403  -0.32995977  -0.31983226   0.71956879        0.075    1.3844027        1e-10 1.5990418e-11    6.2537454    2.4407093    31.520363  0.006525002   -0.2014326 0.0018764782   0.18127357  -0.40272425 -0.070890264 
 3300000    4.0236619    1.2766877    2.7469742  -0.23140072   0.85117347   0.98847606   0.75624027   -1.2298232            1 -0.093549669  -0.35990973  -0.37794775   0.45720847 -0.006324386  0.075471459 -0.0021108491  -0.24954342  -0.23464971   0.71269317        0.075    1.3847893        1e-10 1.5837626e-11    6.3140776    2.4422886    31.520363 0.0067883844  -0.20356419 -0.0077708706   0.19615465   -1.1291976   0.96260611 
 3301000     4.000807    1.2638994    2.7369076  -0.23292942   0.84264746   0.99009323   0.74069423   -1.2298232            1   -0.2058105  -0.45712185  -0.46887691   0.30856725 0.0048769136  0.067644344  0.011937496  -0.35859749  -0.34714139   0.71323587        0.075    1.3808687        1e-10 1.5849686e-11    6.3092733    2.4609626    31.520363 -0.0040703375  -0.20108296 0.0061700743   0.18011077   -0.5261391   -1.1144049 
 3302000    4.0243363    1.2750278    2.7493085  -0.22602545   0.85006685   0.99711423   0.74839002   -1.2298232            1 -0.089716756  -0.36956702  -0.36547045   0.46588719 0.0020841512  0.009356371   0.02093369   -0.2440912  -0.23204985   0.71737716        0.075    1.3971468        1e-10 1.5941715e-11     6.272851    2.4420799    31.520363 0.0034139673  -0.20363181 0.0021399799   0.20864021    1.7278247   0.42067925 
 3303000    4.0173949     1.279309    2.7380859  -0.22956452   0.85292111   0.99997699   0.75123869   -1.2298232            1  -0.14878883  -0.36708482  -0.43401242   0.35473076 0.0015160491  0.014054906   0.02753956  -0.30375088  -0.29153057   0.71951366        0.075    1.3868569        1e-10 1.5989192e-11    6.2542246    2.4587752    31.520363 -0.00096972046  -0.20207108 0.0027041785    0.2046437  -0.49174653    2.0450619 
 3304000    4.0165188    1.2817637     2.734755  -0.23295193   0.85455768   0.99856594   0.75498439   -1.2298232            1    -0.243074  -0.48656106  -0.47026959   0.22760865 0.0063991163 -0.046716834 -0.015568471   -0.3988087  -0.38561432   0.71900572        0.075    1.3868248        1e-10 1.5977905e-11    6.2586428    2.4504209    31.520363 0.00032949519  -0.19696183 0.00061513578   0.20310695   -1.8080143  -0.33016984 
 3305000    4.0263245    1.2916073    2.7347171  -0.22626466   0.86112047    1.0059681   0.76096699   -1.2298232            1 -0.083809888  -0.37636457  -0.33430322   0.45923813 -0.0068142117  0.018601485 -0.0093707363  -0.24077865  -0.22740682   0.71443109        0.075    1.3908811        1e-10 1.5876246e-11    6.2987181    2.4432868    31.520363  0.012731883  -0.19848528 0.00026333972   0.20912671   0.44034691    2.0741224 
 3306000    4.0348401    1.2803578    2.7544823  -0.22840418   0.85362039   0.99657823   0.75477391   -1.2298232            1  -0.19817134   -0.4181899  -0.42586731   0.24954321 -0.0020143355 -0.0010746617 -0.026544153  -0.35386262  -0.34042792   0.71486369        0.075    1.4004951        1e-10 1.588586e-11    6.2949064    2.4421031    31.520363 -0.00072022117  -0.21961207 -0.004614566   0.21049459   -1.3950488  -0.98979441 
 3307000    4.0200496    1.2886081    2.7314415  -0.22838597   0.85912086    1.0062908    0.7573601   -1.2298232            1  -0.11836195  -0.37425438  -0.37059029   0.38975881  0.012500863  0.069044163 -0.035542916   -0.2745867  -0.26200496   0.71686076        0.075    1.4012935        1e-10 1.5930239e-11    6.2773697    2.4381153    31.520363 -0.0011718274  -0.20780047 -0.00081691926    0.2002677   0.58889237    2.6990347 
 3308000    4.0305359     1.282926    2.7476099  -0.22474256   0.85533259    1.0030178   0.75321491   -1.2298232            1  -0.20276251  -0.40992936  -0.44548944   0.24713128 -0.010219897  0.043784102 -0.0054805887   -0.3581322   -0.3459383   0.72032427        0.075    1.3881888        1e-10 1.6007206e-11    6.2471864     2.452564    31.520363  0.014153909  -0.19016035 -0.0086614874   0.21106256   -1.0994339  -0.32061773 
 3309000    4.0156792    1.2765234    2.7391558  -0.22887258   0.85106397    1.0063548   0.74368268   -1.2298232            1 -0.030263275  -0.27922684  -0.33412979   0.52256681 -0.0096973388 -0.051827915 0.0064836575  -0.18366671  -0.17391541    0.7165987        0.075     1.389438        1e-10 1.5924416e-11    6.2796653    2.4548033    31.520363 -0.0021866891  -0.21977085 -0.0063328351   0.19402939  -0.16082464    1.9184429 
 3310000    4.0249402    1.2833878    2.7415524   -0.2297065   0.85564047    1.0144046   0.74585603   -1.2298232            1  -0.26540699  -0.48141395  -0.49916515   0.18435814 -0.0099680098  0.046723044 -0.0057282637  -0.41925873   -0.4102082   0.71846357        0.075    1.3949523        1e-10 1.5965857e-11    6.2633656    2.4726305    31.520363 -0.0050567632  -0.20006102 -0.010399904   0.20695733  -0.48316609   -0.2152114 
 3311000    4.0085574    1.2668795     2.741678  -0.23020108   0.84463429    1.0045939   0.73402149   -1.2298232            1   -0.1300653  -0.36631644  -0.39555367   0.37167422 -0.0047873292 -0.013385964   0.04772029  -0.28147586  -0.27346608    0.7135371        0.075    1.4039458        1e-10 1.585638e-11    6.3066097    2.4452226    31.520363 -0.0024713162  -0.19781397 0.0046459385    0.2057114   0.41643679  -0.15187628 
 3312000    4.0156794    1.2752584    2.7404211  -0.22883346   0.85022055   0.99066725   0.75311149   -1.2298232            1  -0.17950374  -0.42567756  -0.41433588   0.30150223  0.011745755 -0.050773453  -0.05861199   -0.3348521  -0.32091656   0.72070281        0.075    1.4050237        1e-10 1.6015618e-11    6.2439051    2.4489696    31.520363 -0.011402726  -0.19943791 -0.0027615855   0.20461366    1.0536871   0.17899758 
 3313000    4.0172949    1.2831289     2.734166   -0.2335256   0.85546783    1.0055428   0.75169638   -1.2298232            1 -0.048426214  -0.30003245  -0.32720801   0.48196182 -0.0019211961 -0.071038181  0.015727564  -0.20348267  -0.19196245   0.72181723        0.075    1.4213541        1e-10 1.6040383e-11    6.2342652     2.450645    31.520363 0.0052001941    -0.212747 0.0048052248   0.19332505  -0.04020484    2.5059834 
 3314000    4.0210869    1.2792514    2.7418355  -0.22476917   0.85288272    1.0102978   0.74403162   -1.2298232            1  -0.21143596  -0.46586096  -0.49436949   0.32592257 -0.010787812  -0.17396398 -0.045152446  -0.36491137  -0.35565094   0.71812963        0.075    1.4088929        1e-10 1.5958436e-11    6.2662782    2.4663458    31.520363 -0.0021760101  -0.18964011 0.0075377568   0.18708889    2.2911023   0.85827728 
 3315000    4.0293743    1.2877898    2.7415845  -0.23193602    0.8585753    1.0082174   0.75510375   -1.2298232            1 -0.098432999  -0.35789485  -0.34949764   0.41209349 0.0034099188 0.0015789841  -0.02483143  -0.25419232  -0.24235101   0.71615091        0.075    1.4002752        1e-10 1.5914465e-11    6.2835918     2.456334    31.520363 1.6324482e-05   -0.1850902 0.00027687288   0.20221437  -0.77228065    1.8601629 
 3316000    4.0502938    1.2931366    2.7571573  -0.22733849   0.86214001     1.009985   0.75991238   -1.2298232            1  -0.14165938  -0.39697172  -0.40369458   0.37568814 -0.0033223271  0.069810099 -0.014695429   -0.2984106  -0.28582972   0.71839032        0.075    1.3985504        1e-10 1.5964229e-11    6.2640042    2.4428999    31.520363 0.0097590211  -0.20233309  0.004002414   0.20873847   -1.6378324    1.4346818 
 3317000    4.0185625    1.2721174     2.746445  -0.22622984   0.84812646    1.0041285   0.74025274   -1.2298232            1  -0.17604199  -0.41513645  -0.42301997   0.31003046  0.005407057  0.062269274 -0.047594582  -0.32873791  -0.31937633   0.71844317        0.075     1.397128        1e-10 1.5965404e-11    6.2635434      2.44879    31.520363 0.0022206903  -0.23946322 -0.00062129768    0.1955883 -0.028669882   -1.4322217 
 3318000    4.0253829    1.2809819     2.744401  -0.23854199   0.85403644   0.99387466   0.75734882   -1.2298232            1  -0.06823826  -0.33934644  -0.33261906   0.46725073 -0.0098349485 -0.0047383887  0.023941167  -0.22446068  -0.21010892   0.71774595        0.075    1.4194722        1e-10 1.594991e-11    6.2696279    2.4495782    31.520363 -0.0011568038  -0.20757082 0.0036913927   0.20180509  -0.10552056  -0.10395817 
 3319000     4.014783    1.2703121    2.7444709  -0.23088306   0.84692287    1.0012087   0.74023664   -1.2298232            1  -0.14408283  -0.40774084  -0.39450564   0.36999799 0.0019568715 0.0052621059  0.038792197  -0.29677543  -0.28700039   0.71612269        0.075    1.4143778        1e-10 1.5913837e-11    6.2838395     2.450522    31.520363 0.0063616818  -0.21611638 -0.0059523763   0.19317967  -0.75614286    2.2530184 
 3320000    4.0189663    1.2822242    2.7367421  -0.23525547   0.85486468    1.0093963    0.7480091   -1.2298232            1   -0.1928995  -0.43768193  -0.45299623   0.31197964 0.0049394834  0.022382903 0.00072559863  -0.34719537  -0.33698581   0.71326995        0.075    1.4264243        1e-10 1.5850443e-11    6.3089718    2.4377378    31.520363 0.0041601805  -0.21863696 0.0084184591   0.20356137  -0.97924697    1.5088022 
 3321000     4.012416     1.269115     2.743301  -0.22771608    0.8461247    1.0123577    0.7311708   -1.2298232            1  -0.15902482  -0.45107063  -0.36676883     0.340765   0.02150726 -0.042188691 -0.013393854  -0.30984736  -0.30353385   0.71770629        0.075    1.4145148        1e-10 1.5949029e-11    6.2699743    2.4539039    31.520363 0.0055405435  -0.17491996 -0.0047684812   0.20880534    1.6983602   0.10317572 
 3322000     4.010377    1.2652104    2.7451667  -0.22962273    0.8435215   0.99841997   0.73641099   -1.2298232            1  -0.15059317  -0.41041925   -0.3812077   0.33984745 -0.0088130354 -0.060222755 -0.039584393  -0.30249663  -0.29311265   0.71897331        0.075    1.4117231        1e-10 1.5977185e-11     6.258925     2.439522    31.520363 -0.010019115  -0.19667735 -0.0039636717   0.20076618   0.85469751    0.3443577 
 3323000    4.0103621     1.268806    2.7415561  -0.22849975   0.84591873   0.99571561   0.74233882   -1.2298232            1  -0.20973305  -0.45479283  -0.44594015   0.27153384 -0.016522124 -0.066962104 0.0064860228  -0.36285927   -0.3518665    0.7169206        0.075    1.4052667        1e-10 1.5931569e-11    6.2768457    2.4468526    31.520363 -0.0083640333   -0.1978486  -0.01158519   0.20574263   0.23557218   -0.1089154 
 3324000    4.0268683    1.2834264    2.7434419  -0.23278032   0.85566621   0.99948886   0.75622147   -1.2298232            1 -0.078494369  -0.34281416  -0.34597625    0.4533073 -0.024977277  0.012473916 -0.021239517  -0.23448424  -0.22116643   0.71799489        0.075    1.4016232        1e-10 1.5955442e-11    6.2674541    2.4524382    31.520363 -0.0084194128  -0.19949865 0.0065106216   0.21507125  -0.23202111    1.9944625 
 3325000    4.0364715    1.2869803    2.7494912  -0.22555411   0.85803562    1.0110949   0.75219921   -1.2298232            1  -0.13812615  -0.39582189  -0.37528453   0.35672798 -0.0041079892  0.021736589  0.016151358  -0.29328633  -0.28245492   0.71952629        0.075    1.4077277        1e-10 1.5989473e-11    6.2541147    2.4521454    31.520363 0.0062961882  -0.19674711  0.004356011   0.20467046   0.44481333    1.9477792 
 3326000    4.0382657    1.2831734    2.7550923   -0.2298969   0.85549753    1.0016473    0.7544424   -1.2298232            1  -0.23826637  -0.46595895  -0.48178643   0.23294626    0.0103408  -0.11866972 -0.037195235  -0.39388927  -0.38124654   0.71762704        0.075    1.4176362        1e-10 1.5947268e-11    6.2706667    2.4470348    31.520363   0.01181562  -0.20403892 -0.00031896626   0.19499881   0.80359573  -0.71472263 
 3327000    4.0151656    1.2719723    2.7431933  -0.23796914   0.84802972   0.99870919   0.74383924   -1.2298232            1  -0.10830979  -0.35701644  -0.41072275   0.44280983  0.001168553 -0.045467099 -0.019674392  -0.26174551  -0.25087056   0.71414115        0.075    1.4138988        1e-10 1.5869803e-11    6.3012753    2.4486328    31.520363 0.0018231338  -0.19039292 -0.0019927226   0.20074373   0.28341018    2.4771066 
 3328000    4.0169722    1.2733852    2.7435871  -0.22558575   0.84897166   0.99450422     0.748343   -1.2298232            1   -0.2331386  -0.48570391  -0.46070605   0.24699416  0.011140622  0.057254986 0.0025144297  -0.38750334  -0.37509913   0.70763936        0.075      1.42684        1e-10 1.5725319e-11    6.3591715    2.4332702    31.520363 0.0012286997  -0.21422267 0.0038824447   0.18493881   0.70657682  -0.65837564 
 3329000     4.021529    1.2903802    2.7311487  -0.23718964   0.86030235    1.0065306   0.75919332   -1.2298232            1  -0.15886605  -0.40659796  -0.42167257   0.35167238 -0.018031284 -0.051233352  0.046225747  -0.31546894  -0.30254329   0.71685022        0.075    1.4143606        1e-10 1.5930005e-11     6.277462    2.4397366    31.520363 0.0017836494  -0.19751689 -0.009786859    0.2155757    1.6134368   0.56348371 
 3330000     4.028319    1.2813815    2.7469375  -0.22955122   0.85430286   0.99835523   0.75469902   -1.2298232            1 -0.054020858  -0.30901827  -0.32708175   0.47403745  0.012229753 -0.021699383  -0.04545423  -0.20969669   -0.1965311   0.72459888        0.075    1.4060353        1e-10 1.6102197e-11    6.2103325    2.4547343    31.520363 0.0061763348  -0.21860989 -0.0014361008   0.19433925   0.88669455    1.6595899 
 3331000    3.9982122    1.2713943    2.7268179  -0.22829725   0.84764434   0.99426286   0.74626405   -1.2298232            1  -0.16253915  -0.42689593  -0.42751355   0.36679203 0.0074766786   -0.1047129   0.02052454  -0.31647505  -0.30446523   0.71318987        0.075    1.3986431        1e-10 1.5848664e-11    6.3096802    2.4439722    31.520363  0.012186653  -0.20454394 -0.010626104   0.21471378 -0.029377768   -1.3375547 
 3332000     4.016078    1.2725109    2.7435672  -0.23244975   0.84838877   0.98814466   0.75175758   -1.2298232            1  -0.22050234   -0.4941855  -0.43549126   0.26816973 -0.0086975333 0.0021149181 -0.047902775  -0.37557143  -0.36155508   0.71271262        0.075    1.4026426        1e-10 1.5838058e-11    6.3139053    2.4411051    31.520363 0.0034710895  -0.18994083 0.0073105514   0.18588837   0.21386882    0.8976032 
 3333000    4.0111246    1.2763458    2.7347788  -0.23684276   0.85094554    0.9908483   0.75421296   -1.2298232            1  -0.13122462  -0.36118788  -0.41291474   0.38042877 -0.00055209422  0.035790718 -0.00034652069  -0.28680019  -0.27266328   0.72063962        0.075     1.410527        1e-10 1.6014214e-11    6.2444527    2.4375983    31.520363 -0.0011672777  -0.17550504 -0.009168289   0.18511868  -0.12371138    1.2584967 
 3334000    4.0242273    1.2803783    2.7438491  -0.22540068   0.85363399    1.0027325   0.75053807   -1.2298232            1  -0.13732735   -0.4329622  -0.40825349   0.42923363 -0.0071010161 -0.030055387 -0.032937974  -0.29214488  -0.28046244   0.72235112        0.075    1.4165057        1e-10 1.6052247e-11    6.2296574    2.4535361    31.520363 -0.0080603212   -0.1911637 -0.007996564   0.20079254   0.63383102    1.1573416 
 3335000    4.0242083    1.2894741    2.7347342  -0.23231369   0.85969825    1.0001085   0.76261531   -1.2298232            1  -0.17655633  -0.42097765  -0.42390535     0.315214 0.00082197318  0.059026306  0.054439957   -0.3338651  -0.31931685   0.71591072        0.075    1.4402958        1e-10 1.5909127e-11       6.2857    2.4458917    31.520363 0.0038543895  -0.18452093 -0.0067164667   0.20071226   0.36368542    2.4760475 
 3336000    4.0115133    1.2680468    2.7434665  -0.22847278   0.84541256   0.99820847   0.73975723   -1.2298232            1  -0.17228161  -0.43670302  -0.41864897   0.33850716 -0.00096690585 0.0021598462  -0.01708461  -0.32487532  -0.31477091   0.71548561        0.075    1.4358252        1e-10 1.589968e-11    6.2894346    2.4449794    31.520363 -0.0058191045  -0.18059616 -0.0065081094   0.19759308   -0.8668671    1.4418592 
 3337000    4.0044329    1.2788108    2.7256221  -0.23697893   0.85258898    1.0141663   0.74085753   -1.2298232            1  -0.23579606  -0.49530332  -0.44339764    0.2313128 -0.0026827976  0.066647755 -0.003235531  -0.38861673  -0.38056324   0.72001605        0.075    1.4296022        1e-10 1.6000357e-11    6.2498607    2.4447442    31.520363 -0.0061915486  -0.19819454 0.00036333712   0.20884007   -0.3429274   0.24890905 
 3338000    4.0133149    1.2826107    2.7307043   -0.2337445   0.85512235    1.0018185   0.75368909   -1.2298232            1  -0.12250984  -0.34295467  -0.39965717   0.37508232 -0.020312764 0.0032956618 0.0042975026  -0.27797735  -0.26551444   0.72205789        0.075    1.4153793        1e-10 1.6045731e-11    6.2321872    2.4487129    31.520363 -0.0003290811  -0.21301322 0.0022640141   0.21784835  -0.77004562   0.35890119 
 3339000    4.0118737    1.2675935    2.7442802  -0.23120367   0.84511034   0.98380293   0.74921466   -1.2298232            1  -0.18711581  -0.46721592  -0.41668467   0.32255316 -0.021189881 -0.0017497842 -0.000727482  -0.34166035  -0.32754878     0.711861        0.075    1.4146774        1e-10 1.5819133e-11    6.3214588    2.4470977    31.520363 -0.0060879581  -0.19441167 -0.0015165887   0.22232408   0.49567316    2.0444581 
 3340000    4.0025402    1.2638462    2.7386939  -0.22753682   0.84261202    0.9926879   0.73883872   -1.2298232            1  -0.20885018  -0.46169718   -0.4448811   0.28002776 -0.0039550137  -0.10638872 -0.029927154  -0.36125442  -0.35055144    0.7173686        0.075    1.4264986        1e-10 1.5941524e-11    6.2729258    2.4562238    31.520363 0.0024847928  -0.18688793 -0.0025932809   0.20264645   0.74502321  -0.57592287 
 3341000    4.0135836    1.2830585    2.7305251  -0.23464464   0.85542091    1.0039446   0.75272297   -1.2298232            1  -0.11848462  -0.37727932  -0.38610208   0.40792753 0.0046222294 -0.078256553  0.022261857  -0.27375284  -0.26179272   0.72333031        0.075    1.4197359        1e-10 1.6074007e-11    6.2212242    2.4461113    31.520363 -0.0046884735  -0.20270667 -0.0035841433   0.20578224   0.52698918    2.7783874 
 3342000     4.000949    1.2676301    2.7333188  -0.23433228   0.84513475   0.99931486   0.73852152   -1.2298232            1  -0.16491228  -0.40437834   -0.4384538   0.34809528 0.00050400362  0.050645982  0.019045861  -0.31725109  -0.30755951   0.72173724        0.075    1.4144806        1e-10 1.6038605e-11    6.2349561    2.4427323    31.520363 -0.0011511071   -0.1777158 -0.0053073533   0.18512733  -0.19532313    2.6473466 
 3343000    4.0150871    1.2773643    2.7377228  -0.22837256    0.8516246   0.98250197   0.76113776   -1.2298232            1  -0.18794198  -0.40197796  -0.42086822   0.25902023 -0.014305583   0.03679968  0.043084955  -0.34494597  -0.32818925   0.71357777        0.075    1.4005268        1e-10 1.5857284e-11    6.3062503    2.4515881    31.520363  0.011641341  -0.19543865 -0.008925483    0.1947929   0.75711616   -1.4130139 
 3344000    4.0305879    1.2882678    2.7423201  -0.23267083   0.85889399    1.0013294   0.76040959   -1.2298232            1  -0.17045813  -0.41604942  -0.43653369   0.34120871  -0.00413807 -0.029284463 -0.017020616  -0.32731191  -0.31339292   0.71703381        0.075    1.4210709        1e-10 1.5934085e-11    6.2758547    2.4475897    31.520363 -0.0038549913  -0.21452239  0.010170043   0.19394935   0.52630808    2.1336195 
 3345000    4.0173225     1.266967    2.7503555  -0.23159906   0.84469265   0.98888254   0.74499272   -1.2298232            1  -0.27496548  -0.51485813  -0.52003111   0.20999281 -0.0013729572  0.050111972 -0.054271261  -0.42863914  -0.41612354   0.71965564        0.075    1.4101312        1e-10 1.5992348e-11    6.2529907    2.4478592    31.520363 -0.0051172528  -0.18724096 -0.013223366   0.22818204   -1.3109868  -0.92999568 
 3346000    4.0170349    1.2699144    2.7471205  -0.22974592    0.8466577   0.99790086   0.74207701   -1.2298232            1  -0.10012455  -0.36857216  -0.36876358   0.43696209  0.021999458 0.00076662371 1.455559e-05  -0.25319677  -0.24256993    0.7177415        0.075    1.4028402        1e-10 1.5949811e-11    6.2696667    2.4386625    31.520363 0.0042278506  -0.20545616 -0.0036120414   0.20670674   0.82325428  -0.61523179 
 3347000    4.0202771    1.2819285    2.7383486  -0.22802354   0.85466753    1.0058281   0.75014479   -1.2298232            1  -0.15802132  -0.42651746  -0.38943472   0.34188823  0.011862266  0.028620498   0.03305182  -0.31275772  -0.30159827   0.71322023        0.075    1.4226733        1e-10 1.5849339e-11    6.3094116    2.4414648    31.520363 -0.0064949098  -0.21127539 -0.0056278227   0.18338061    0.5138955    1.5158059 
 3348000    4.0232175    1.2897966    2.7334208  -0.22899548   0.85991328    1.0179305   0.75064617   -1.2298232            1 -0.033331785  -0.33738502  -0.33053213    0.5679218  0.015158584 -0.030187671 -0.0040997521  -0.18817161  -0.17863629   0.71547706        0.075    1.4125418        1e-10 1.589949e-11    6.2895098    2.4428969    31.520363 0.0013778005  -0.21533363 -0.011855927   0.20835034   0.22525151    2.0832605 
 3349000    4.0379597     1.290985    2.7469748  -0.23363501   0.86070553    1.0037161   0.76182325   -1.2298232            1  -0.19893706  -0.43032697   -0.4719788   0.30549459 0.0074017904 -0.0036301611 -0.014651639  -0.35608244  -0.34221254   0.71611895        0.075    1.4135749        1e-10 1.5913755e-11    6.2838722    2.4443191    31.520363 0.0031150844  -0.20459849 -0.003149666   0.19330595  0.035741362    0.8688642 
 3350000    4.0218183    1.2778482    2.7439701  -0.23079022   0.85194719    1.0045831   0.74640319   -1.2298232            1  -0.16253208  -0.43178441  -0.42005613   0.36424429 0.0041721599  0.029369337 -0.0014763539  -0.31649669  -0.30593133   0.71358763        0.075    1.4236294        1e-10 1.5857503e-11    6.3061632    2.4377161    31.520363 -0.0016550254  -0.22696429 0.00046311969   0.20782421  -0.49957132  -0.50958792 
 3351000    3.9977883    1.2786647    2.7191236  -0.22922298   0.85249156    1.0112932   0.74268089   -1.2298232            1 -0.046159463  -0.31890643  -0.30645212   0.48688016 0.0073504053 -0.036338616 -0.022919137  -0.19935625  -0.19051654   0.71637579        0.075     1.429065        1e-10 1.5919462e-11    6.2816193    2.4438968    31.520363 0.0023536165  -0.18699693 -0.0098415847   0.24023704   0.81593258    1.2040586 
 3352000    4.0246192     1.268332    2.7562872  -0.22903315   0.84560272   0.99965364   0.73907894   -1.2298232            1  -0.18080213  -0.42389675  -0.43801258   0.31950293 0.0071975098 -0.029388518 -0.0051077819  -0.33325592  -0.32349772   0.71731225        0.075    1.3988714        1e-10 1.5940272e-11    6.2734186    2.4397353    31.520363 0.0063565101  -0.22660909 -0.0050086768   0.18571764   0.95103586    1.3130468 
 3353000    4.0538149    1.2889991    2.7648159  -0.23142541   0.85938152    1.0143227     0.752243   -1.2298232            1  -0.17480979  -0.42628446  -0.45119807   0.35305314 0.0087428488  -0.24219552 -0.017065645  -0.32997901  -0.31959931   0.71844328        0.075    1.4155404        1e-10 1.5965406e-11    6.2635425    2.4604267    31.520363 -0.0032163036  -0.16549664 -0.0024048722    0.1847156   0.88449417    1.5267062 
 3354000    4.0281125    1.2866062    2.7415062  -0.22904227   0.85778621     1.014726   0.74926448   -1.2298232            1  -0.28241454  -0.50310191  -0.49522244   0.15108073 -0.012069534 -0.073022643 -0.067197178  -0.43696936  -0.42726162   0.71878946        0.075    1.4033638        1e-10 1.5973099e-11    6.2605259    2.4603398    31.520363 -0.014876586  -0.19080174  -0.01310836   0.21895981  0.022993086   -1.2619253 
 3355000    4.0502295     1.300004    2.7502255  -0.22519282   0.86671856    1.0126067   0.76584558   -1.2298232            1  -0.19560419  -0.43819516  -0.44344974   0.29483232 0.0045899202 0.00013788185  0.012628487  -0.35357929  -0.34014876   0.71664906        0.075     1.394955        1e-10 1.5925535e-11     6.279224    2.4653113    31.520363 0.0025586137  -0.19700239 0.0039531455   0.21776262    2.3823565    1.3313376 
 3356000    4.0215073    1.2844136    2.7370937  -0.23267248   0.85632436    1.0077357   0.75162819   -1.2298232            1  -0.13574391  -0.38625798  -0.39461306    0.3736393 -0.012471408  0.060938151 0.0057183776  -0.29078631  -0.27959318   0.71241624        0.075    1.3998701        1e-10 1.5831472e-11    6.3165321    2.4453507    31.520363 0.0022337705   -0.1840076 -0.014681098   0.19262188   0.37222721    1.4004419 
 3357000    4.0428687    1.2866384    2.7562303  -0.22117754   0.85780765    1.0042369   0.75655929   -1.2298232            1 -0.073761192  -0.36909264  -0.33281309   0.48062216 -0.0016254811   0.02830709  0.010864665  -0.22982075  -0.21711102   0.71837031        0.075    1.4073316        1e-10 1.5963785e-11    6.2641787    2.4608888    31.520363 -0.0007485827  -0.19319148 0.00054198696   0.22801383  -0.49868362    2.2205696 
 3358000    4.0240885    1.2776819    2.7464066  -0.22733126    0.8518363    1.0100769   0.74241378   -1.2298232            1  -0.17852347  -0.41932728  -0.40537709   0.28913397 -0.010025184 -0.0074745133 -0.037663635  -0.33166515  -0.32270692   0.72101348        0.075    1.4137826        1e-10 1.6022522e-11    6.2412148    2.4448406    31.520363 -0.0070784457  -0.23082184 -0.0025941399   0.22295412   0.47153456    1.7271974 
 3359000    4.0281394    1.2840546    2.7440848  -0.23527798   0.85608506    1.0100462   0.74962438   -1.2298232            1  -0.20721337  -0.45824094  -0.45003609   0.28663692 -0.0074294888   0.12264069 0.0099642977  -0.36184243  -0.35139245    0.7136913        0.075    1.4081844        1e-10 1.5859807e-11    6.3052471    2.4563007    31.520363 -0.0037369812  -0.18165382 -0.0017679466    0.1877731   -1.8698007    1.1176424 
 3360000    4.0267855    1.2689063    2.7578793  -0.23005825   0.84598556   0.99436713   0.74338508   -1.2298232            1  -0.25588408  -0.48685414  -0.48209995   0.20130185  0.005745734  0.083639949 -0.022543924  -0.40922612  -0.39782504   0.70959319        0.075     1.408261        1e-10 1.5768738e-11    6.3416618    2.4452197    31.520363 -0.0034362936  -0.19263583 -0.0017827367   0.20599363  -0.41800913   0.78351818 
 3361000    4.0129599    1.2751041    2.7378557  -0.23244643   0.85011772    1.0067587   0.74180204   -1.2298232            1  -0.15228065  -0.41403489  -0.38286455   0.34005747 0.0062734849 -0.028532615 -0.0040411904  -0.30529615  -0.29599044   0.71408453        0.075    1.4115582        1e-10 1.5868545e-11     6.301775    2.4328441    31.520363 -0.019398268  -0.22398427 -0.0045403859    0.1772273   0.76476553    2.5037577 
 3362000    4.0328683    1.2768592    2.7560091  -0.22903766   0.85128783     1.004334   0.74545988   -1.2298232            1   -0.1654553  -0.46376993  -0.42959416   0.39699819 -0.0041043118 -0.067635839 -0.0042314848  -0.31922532  -0.30881898   0.71880559        0.075    1.3952953        1e-10 1.5973458e-11    6.2603854     2.449527    31.520363 0.0084753279  -0.20425147 0.0027404558   0.19467534  -0.44011445    1.1029679 
 3363000     4.021849     1.278019      2.74383  -0.22566767   0.85206106    1.0144702    0.7397539   -1.2298232            1  -0.12078161  -0.39642792  -0.37429971    0.4083828 0.0087198099  0.007120609  0.018211175  -0.27337463  -0.26559219    0.7125383        0.075    1.4038141        1e-10 1.5834184e-11      6.31545    2.4463151    31.520363 -0.0078318259   -0.1803625 0.0037587114   0.17661196  -0.74652927    3.6917186 
 3364000    4.0307838    1.2862422    2.7445416  -0.22258517   0.85754353    1.0048462   0.75569075   -1.2298232            1  -0.17758896  -0.40132492  -0.43764311   0.30620114 -0.012754364 -0.045759644 0.0063871576  -0.33346936  -0.32102576   0.70999116        0.075    1.4224273        1e-10 1.5777581e-11    6.3381071    2.4524533    31.520363 -0.0040290209  -0.18422897 0.0032312048   0.18475395   0.56634507   -1.6590353 
 3365000    4.0352131     1.291811    2.7434021  -0.23384731   0.86125624    1.0093334   0.75886787   -1.2298232            1 -0.073948482  -0.32273204  -0.34354164   0.44442824 -0.022740235  0.036067553 0.0077867152  -0.23048424   -0.2180258   0.71851798        0.075    1.4063076        1e-10 1.5967066e-11    6.2628913    2.4445687    31.520363 -0.014388121  -0.17472023 -0.0045591045   0.21135002   -0.7990467    2.7100008 
 3366000    4.0145366    1.2763421    2.7381945  -0.23003359   0.85094304   0.98639248   0.75729222   -1.2298232            1  -0.10268805  -0.37751977  -0.36421567   0.43367129 -0.018124844 -0.082510179  0.034716761  -0.25889879  -0.24349067   0.71950148        0.075    1.3933011        1e-10 1.5988922e-11    6.2543304    2.4407166    31.520363 -0.0069048453  -0.19817495 -0.0049858656   0.19913088    1.0815795    2.8212491 
 3367000    4.0083104    1.2716784     2.736632  -0.22967491   0.84783375   0.99410868   0.74669125   -1.2298232            1  -0.23286718  -0.49412308  -0.44524495   0.24076648  0.014311369 -0.047968485 -0.018103751   -0.3868912  -0.37477125   0.71727316        0.075    1.4116396        1e-10 1.5939404e-11    6.2737605    2.4478418    31.520363 0.0024293022  -0.19228283 -0.011086018   0.21464697   0.70329642    0.4693085 
 3368000    4.0128204    1.2730939    2.7397265  -0.22417519   0.84877746   0.99828995   0.74539463   -1.2298232            1  -0.12272827  -0.40922896  -0.37423347   0.41527762 0.00035062427  0.020428289 0.0010662038  -0.27648483  -0.26522919   0.71192755        0.075    1.4009591        1e-10 1.5820612e-11    6.3208679    2.4510883    31.520363 -0.00020556619  -0.18306576 -0.0084210476   0.19854442  -0.26546126    2.1761574 
 3369000    4.0339238    1.2855193    2.7484044  -0.23116255   0.85706158   0.99239618   0.76349081   -1.2298232            1  -0.14904468  -0.37099161  -0.42667165   0.35052921 0.0022537676  0.073817636 -0.044876522  -0.30653404   -0.2907043   0.71402266        0.075    1.3996224        1e-10 1.586717e-11     6.302321    2.4416016    31.520363 -0.013826749  -0.19990352 -0.0064412396   0.20804459   -2.3006229  -0.72848946 
 3370000     4.027057    1.2898508    2.7372062  -0.23307835   0.85994935   0.99926294   0.76362536   -1.2298232            1  -0.22585488  -0.49584101  -0.42555094   0.24382729 -0.0026650674 -0.034977251  0.015334187    -0.383372   -0.3684947   0.72207345        0.075    1.3877075        1e-10 1.6046077e-11     6.232053    2.4483616    31.520363 -0.0032621246  -0.20599927 -0.0044090433   0.18941044   0.45607448   0.88996293 
 3371000    4.0014039    1.2710501    2.7303538  -0.23787753   0.84741489     1.002077    0.7404683   -1.2298232            1 -0.062204657  -0.33103756   -0.3183476   0.46277118 -0.0065808336  0.048775455 -0.00057092015  -0.21494504  -0.20524617   0.72403898        0.075    1.3904832        1e-10 1.6089755e-11     6.215135    2.4549877    31.520363 -0.00026177676  -0.18614953 -0.0099531042   0.22832831  -0.42770719    1.7261096 
 3372000     4.008091    1.2693282    2.7387628  -0.22762397    0.8462669   0.99050991   0.74653036   -1.2298232            1  -0.15283489  -0.42085547  -0.40960343   0.37195424 0.0014949438   0.05484629  0.054241009  -0.30682572  -0.29422525   0.71748254        0.075    1.4123555        1e-10 1.5944056e-11    6.2719296    2.4486674    31.520363 0.0064191016  -0.19606948 0.0067943626   0.19947667    0.6803369   0.92125872 
 3373000    4.0094081    1.2708551     2.738553  -0.23114247   0.84728484   0.99797342   0.74308798   -1.2298232            1   -0.1148643  -0.40559043  -0.37460666   0.43560418 0.00045916678 -0.011991386 -0.049200472  -0.26814506  -0.25732004   0.71411038        0.075    1.4023969        1e-10 1.586912e-11    6.3015468    2.4451645    31.520363 0.0024273232  -0.19171684 -0.0013700465   0.19595477    0.6976608    2.5682262 
 3374000    4.0251566    1.2828248    2.7423317    -0.236968   0.85526514   0.99183279   0.76084091   -1.2298232            1  -0.20372937  -0.45541422  -0.43475214   0.27897825 -0.00066320468  0.033441255  0.024177668  -0.36067212  -0.34530857   0.71938338        0.075    1.4177028        1e-10 1.5986297e-11    6.2553572    2.4686899    31.520363 -0.0062712109   -0.2272685  -0.01122296   0.18513771   0.57040624   -0.5175702 
 3375000    4.0199093    1.2808809    2.7390284   -0.2292402   0.85396914   0.99742223   0.75477998   -1.2298232            1  -0.16069079  -0.42881797  -0.40433515   0.35108074 -0.0082306256 -0.016370704 -0.030569392  -0.31638332  -0.30306785   0.72102136        0.075    1.4004137        1e-10 1.6022697e-11    6.2411465    2.4455156    31.520363 0.00025740158  -0.19671257 -0.0069636888   0.20108679    1.4395359 -0.037939691 
 3376000     4.014982    1.2856422    2.7293398  -0.23703578   0.85714352    1.0079821   0.75284382   -1.2298232            1 -0.092429932  -0.35427317  -0.35995429   0.43693767 -0.0077269684  -0.02101676  0.044975363  -0.24772308  -0.23631436   0.72091461        0.075    1.4207903        1e-10 1.6020325e-11    6.2420708    2.4414602    31.520363 -0.0035297439  -0.21242674 0.0029671289   0.21118659     1.400751    2.0891331 
 3377000    4.0027158    1.2793589    2.7233569  -0.23355506   0.85295441   0.99764255   0.75291049   -1.2298232            1  -0.10325279  -0.35267926  -0.39913988   0.44206077 -0.0054833777  0.018048078  0.016822316  -0.25855969   -0.2456613   0.71582461        0.075    1.4285479        1e-10 1.5907214e-11    6.2864561    2.4460899    31.520363 0.00045305494  -0.21159343 -0.0048580781   0.18368578   -1.4616704   0.57204267 
 3378000    4.0233464    1.2835554    2.7397909  -0.22623018   0.85575222    1.0003022   0.75580415   -1.2298232            1  -0.22958411   -0.4551314  -0.48012321   0.24650227 0.0013532785  0.061224128 -0.003114728   -0.3854879  -0.37237228   0.71600238        0.075     1.435158        1e-10 1.5911164e-11    6.2848953    2.4418949    31.520363 -0.0057476798  -0.20189019 3.4169899e-05   0.20338107  -0.80169169   0.83070203 
 3379000    4.0282716    1.2870642    2.7412075  -0.23114329   0.85809153    1.0111273   0.75227145   -1.2298232            1  -0.10729229  -0.34022612  -0.40131081   0.41966008 -0.004426219 -0.023135386 0.0063009592  -0.26246737  -0.25162568    0.7178567        0.075    1.4367155        1e-10 1.5952371e-11    6.2686606    2.4506299    31.520363 -0.0047262526  -0.18391367 -0.011224735   0.20595175 -0.043875335    6.0094173 
 3380000    4.0283725    1.2861694    2.7422031   -0.2353498   0.85749498    1.0094982   0.75238937   -1.2298232            1  -0.28032438  -0.51329688   -0.4975204   0.16984414 0.0097236997  0.078646127 -2.5829494e-05  -0.43552379  -0.42442523   0.72010615        0.075     1.436763        1e-10 1.6002359e-11    6.2490787    2.4518456    31.520363 -0.016721031  -0.20461812 -0.0016545951   0.20060191    1.9752441  -0.80048222 
 3381000    4.0045989    1.2695788    2.7350201  -0.22861916   0.84643396    1.0000606   0.74020387   -1.2298232            1  -0.11989753  -0.38573883  -0.39991544   0.42596169  0.017302312 -0.022681336 -0.00022182297  -0.27258336   -0.2626512   0.71023968        0.075    1.4382263        1e-10 1.5783104e-11    6.3358893    2.4504877    31.520363 0.0065289689  -0.18974221 -0.0010274962   0.20583669   -0.1478264    0.6070596 
 3382000     4.014104    1.2752787    2.7388254  -0.22880613   0.85023407   0.99744692   0.74844274   -1.2298232            1 -0.093828286  -0.36822061   -0.3521057   0.43884146 -0.0070298201 -0.011668714 -0.017690171   -0.2482136  -0.23620887   0.71173576        0.075    1.4193622        1e-10 1.581635e-11    6.3225712    2.4572425    31.520363 -0.012633036   -0.1962761 -0.0015627323   0.19242445   -1.1204822    1.6509945 
 3383000    4.0201513    1.2716386    2.7485127  -0.23170242   0.84780721   0.99419766   0.74658478   -1.2298232            1  -0.17349887  -0.44053011  -0.42968431    0.3497178  0.012456777   0.02396433 -0.049808834  -0.32750094  -0.31541564   0.71901291        0.075    1.4159109        1e-10 1.5978065e-11    6.2585803    2.4505246    31.520363 -0.0017721077  -0.19047367  0.014191829   0.22412046  -0.46621526   0.71380244 
 3384000    4.0234237    1.2908686    2.7325551  -0.23723916   0.86062793    1.0144432   0.75426869   -1.2298232            1  -0.16940468   -0.4333957  -0.42155942   0.34674107 -0.0029100293 -0.018280378  0.038533663  -0.32499175   -0.3142114   0.72318143        0.075    1.4104722        1e-10 1.6070698e-11    6.2225049    2.4455316    31.520363 -0.0076923315  -0.20602706 -0.0051650063   0.24142732 -0.063363589  -0.11953044 
 3385000    4.0120909    1.2802965    2.7317945  -0.23388335   0.85357947    1.0014693   0.75131999   -1.2298232            1 -0.019318595  -0.27909562   -0.3116793   0.53281913 -0.010452945 -0.011388382 -0.034734778  -0.17429741  -0.16227336    0.7184503        0.075    1.4135252        1e-10 1.5965562e-11    6.2634813    2.4554073    31.520363 -0.0049092655  -0.18879948 -0.0088483906   0.19173386   -1.1906342    2.5171081 
 3386000    4.0324413    1.2876044    2.7448369  -0.22528587   0.85845167    1.0035976    0.7580915   -1.2298232            1  -0.22446712  -0.48632032  -0.46431156   0.27723051 -0.0046416305  -0.03309995 -0.0059501433  -0.38084274  -0.36772568   0.70947679        0.075    1.4179377        1e-10 1.5766151e-11    6.3427022    2.4386191    31.520363 -0.00095400471  -0.20251953 -0.0065815224   0.18652784   -0.3225126 -0.027312057 
 3387000    4.0166466    1.2790563    2.7375902  -0.23210727   0.85275266   0.99760898   0.75259234   -1.2298232            1  -0.13110115  -0.40640842  -0.36407761    0.3771826 0.0021416662   0.05640713  0.012134611  -0.28634242  -0.27350486   0.71701318        0.075    1.4129281        1e-10 1.5933626e-11    6.2760352    2.4513986    31.520363 -0.001769816  -0.19375926 0.0030220901    0.1909032    0.1858992    3.0715708 
 3388000     4.021008    1.2724282    2.7485798  -0.22849592   0.84833364   0.99362993   0.74786842   -1.2298232            1 -0.048036403  -0.31651648  -0.33029274   0.50270001 0.00021487274  0.046579886 -0.012742716  -0.20230325  -0.18987213   0.72271714        0.075    1.4132633        1e-10 1.6060381e-11    6.2265024    2.4400222    31.520363 -0.001743335  -0.20957751 0.0019381867   0.21359674  -0.77580584   -0.1306401 
 3389000    4.0149908    1.2651424    2.7498484  -0.23395025   0.84347617    1.0002038   0.73509986   -1.2298232            1  -0.18051477  -0.43923567  -0.41822564   0.31591701 -0.0040906568  0.016748079 0.0028543263  -0.33214777  -0.32328889   0.72367747        0.075    1.4182983        1e-10 1.6081722e-11    6.2182397    2.4575506    31.520363 -0.0020384269  -0.19201409 -0.001769072   0.21163769  -0.34483076   -1.1561701 
 3390000    4.0252235    1.2899715     2.735252  -0.23307588   0.86002983    1.0134875   0.75391795   -1.2298232            1  -0.14019245  -0.40920585  -0.37927144   0.36789993  0.012975525 -0.022306283  0.014562916  -0.29570716  -0.28486275    0.7092638        0.075    1.4269263        1e-10 1.5761418e-11    6.3446069     2.444215    31.520363 -0.0029271708  -0.19834698 0.0006251002   0.19601995   0.49759879  -0.48143874 
 3391000    4.0441618    1.2906573    2.7535046  -0.23353071   0.86048705    1.0031588   0.76183923   -1.2298232            1  -0.25926907  -0.46723801  -0.53329512   0.22272592   0.01095236  0.039212847 -0.028809539  -0.41641775  -0.40246499   0.71313025        0.075    1.4163096        1e-10 1.5847339e-11    6.3102077    2.4491664    31.520363 0.0087825829  -0.18097146 0.0040750069   0.18482082   0.36510917  -0.97442388 
 3392000    4.0218685    1.2787627    2.7431057  -0.23533079   0.85255692    1.0149235   0.74027929   -1.2298232            1  -0.16702957   -0.4312448  -0.44040787   0.37056396 -0.00027064977  0.012546875 -0.0084445927  -0.31973096  -0.31190485   0.71921827        0.075    1.4331717        1e-10 1.5982628e-11    6.2567932    2.4527349    31.520363 0.0029985819  -0.18669401 -0.016133529   0.22502115 -0.062465892    1.7888898 
 3393000    4.0349403    1.2881375    2.7468027  -0.22696708   0.85880713    1.0050923    0.7576586   -1.2298232            1 -0.082221795  -0.32800192  -0.34418142   0.42551795 -0.0029887878 0.0055462829 -0.0070139701  -0.23850811  -0.22569372   0.71717556        0.075    1.4174725        1e-10 1.5937235e-11    6.2746142    2.4483417    31.520363  0.011111032   -0.2103009  0.014974431   0.20271481   -1.5609457    2.4096824 
 3394000    4.0036058    1.2695775    2.7340283  -0.23108197   0.84643308    1.0023727   0.73860235   -1.2298232            1  -0.22791592  -0.45447809  -0.44641281   0.21714315 -0.011009363  0.059500707 -0.062802475   -0.3802714  -0.37099964   0.71921483        0.075    1.4115671        1e-10 1.5982552e-11    6.2568231    2.4593172    31.520363 0.00034008382  -0.18944434 0.0041487071   0.17608889  -0.52996582  -0.49650895 
 3395000    4.0237103    1.2806547    2.7430556  -0.23036536   0.85381829     1.000444   0.75243365   -1.2298232            1  -0.16203855  -0.40083267   -0.4033882   0.31810521 -0.0032463573 -0.0029763397  0.015770246  -0.31724709  -0.30484695   0.71559876        0.075    1.4208532        1e-10 1.5902195e-11    6.2884402    2.4445046    31.520363 0.00088892796   -0.2135766 -0.0058559411   0.22654796   0.58415734    2.7929354 
 3396000    4.0159255    1.2783596    2.7375659  -0.23458267   0.85228817    1.0031169   0.74799484   -1.2298232            1  -0.22567728  -0.48458621   -0.4298581   0.23741247 0.0071089813 -0.028576638 -0.0029259054   -0.3799702  -0.36886722    0.7128541        0.075     1.419659        1e-10 1.5841202e-11    6.3126522     2.446705    31.520363 0.00034202544  -0.19004704 -0.0049078721   0.17856235    1.2452906  -0.57482839 
 3397000    4.0273156    1.2847402    2.7425754   -0.2305211   0.85654212   0.99168171   0.76310624   -1.2298232            1  -0.14645426  -0.39325191  -0.39035106   0.34424019 7.732898e-05  0.085138846  -0.01273296  -0.30386429  -0.28801189   0.71723114        0.075    1.4171222        1e-10 1.593847e-11    6.2741281    2.4581163    31.520363 0.0037294172  -0.20321103  0.001198026   0.19787548   -2.3718403    1.4332752 
 3398000     4.012511    1.2615296    2.7509815  -0.22661597   0.84106748   0.98306557   0.74288397   -1.2298232            1  -0.13305114  -0.40643769  -0.39140857   0.39869283 -0.0048793579   0.02831384 -0.025110235  -0.28628982  -0.27337886   0.71877655        0.075    1.4051365        1e-10 1.5972812e-11    6.2606383    2.4480039    31.520363 -0.0012069068  -0.18392421 0.0064003211   0.18804705   -1.7594722    0.9290995 
 3399000    4.0282418    1.2800705    2.7481713   -0.2369371   0.85342882   0.99253412   0.75724833   -1.2298232            1  -0.13583722  -0.38809472  -0.38054668   0.36112972 -0.0016023999  0.012580833 -0.050367997  -0.29203891  -0.27751653   0.72138243        0.075    1.4075323        1e-10 1.6030721e-11    6.2380227    2.4421733    31.520363 0.0020947827  -0.22397202 -0.0048313396   0.19561246   0.10699234  -0.47899166 
 3400000    4.0195608    1.2747379    2.7448229  -0.23077925   0.84987353   0.99519816   0.74938884   -1.2298232            1  -0.21256446  -0.45632109  -0.46802266   0.28665038 -0.00047688488 -0.081390649  0.013135912  -0.36714493  -0.35462404   0.71976173        0.075    1.4005805        1e-10 1.5994705e-11     6.252069    2.4500666    31.520363 0.0049693026   -0.1957551 -0.0063675087   0.20815656    1.6250438    1.6416816 
 3401000    4.0157958     1.267926    2.7478698  -0.23525438   0.84533204   0.98982673   0.74542125   -1.2298232            1  -0.29589322  -0.56084054  -0.50592871    0.1790896 -0.0011710008  0.047599228 -0.033503955  -0.44965527  -0.43718606   0.71645877        0.075    1.3852016        1e-10 1.5921306e-11    6.2808917    2.4428456    31.520363 -0.011209848  -0.17835389 0.0082328535   0.19542975   0.41894295  -0.38942144 
 3402000    4.0154779    1.2693077    2.7461702  -0.22898542   0.84625319   0.99076249   0.74633238   -1.2298232            1 -0.092263763  -0.34885769   -0.3476717    0.4197381 -0.011242528  0.039864608 -0.033070087  -0.24621376  -0.23369018   0.71946558        0.075    1.3970323        1e-10 1.5988124e-11    6.2546425    2.4473997    31.520363 -0.0034307583  -0.19164731 -0.00018818833   0.18227591   -1.4478456   0.76933657 
 3403000    4.0141117     1.286612    2.7274997  -0.22959628   0.85779003    1.0141669   0.74965786   -1.2298232            1  -0.04188731  -0.34487929  -0.32568857   0.54490593 0.0082588062  0.018788003  0.021430429  -0.19652327  -0.18665458   0.71586393        0.075    1.4060747        1e-10 1.5908087e-11    6.2861108    2.4371727    31.520363 -0.00041588928  -0.21359197  0.001780268   0.18621081    1.1535817    4.3303096 
 3404000    4.0219743    1.2796207    2.7423536  -0.23143929   0.85312894   0.99629528   0.75413814   -1.2298232            1  -0.19115129  -0.45325215  -0.40381061   0.28360888 -0.0083402937  0.051738279    0.0160848  -0.34671143  -0.33336749   0.71834544        0.075    1.3949641        1e-10 1.5963232e-11    6.2643956    2.4408258    31.520363  0.011802961  -0.20010855  -0.01581451    0.2135901  0.089354607  -0.92445056 
 3405000    4.0114202    1.2755116    2.7359086  -0.23434468   0.85038938   0.99121949     0.753015   -1.2298232            1  -0.11274717  -0.35486447  -0.35227394   0.36889689 -0.0041025539  0.063275872 -0.017842897  -0.26807563  -0.25423882   0.72018871        0.075    1.3941119        1e-10 1.6004194e-11    6.2483623    2.4565695    31.520363 -0.0050903482  -0.19699278 0.0086476759   0.18789652  -0.66846499   0.91522377 
 3406000    3.9959157    1.2568179    2.7390978  -0.22822148    0.8379262   0.98803389   0.73413043   -1.2298232            1   -0.1311656  -0.41507357  -0.38882929   0.41040607 -0.0017705387  0.045436832 0.0049610838  -0.28259863  -0.27220252   0.71828925        0.075    1.4034443        1e-10 1.5961983e-11    6.2648856    2.4586696    31.520363 -0.0087492059  -0.21030602 5.8264471e-06   0.19835887   -1.9791129    1.0315298 
 3407000    3.9850744    1.2594112    2.7256632  -0.23013324   0.83965519   0.99159786   0.73458976   -1.2298232            1  -0.14759798  -0.41415946  -0.42227173   0.39363725 -0.0020088766   0.11940718  0.052206601  -0.29912577  -0.28914364   0.71318129        0.075    1.3983133        1e-10 1.5848473e-11    6.3097561     2.442577    31.520363 0.0013555686  -0.19227919 -0.0063040778   0.19781135  -0.79934522    1.5886041 
 3408000     4.002508    1.2714213    2.7310867  -0.23266591   0.84766238   0.99279374   0.74731123   -1.2298232            1  -0.17964394  -0.40975423  -0.44133108   0.31215351 -0.0084609616  0.058130722 -0.0013553813  -0.33379585   -0.3213603   0.71852633        0.075    1.4147396        1e-10 1.5967252e-11    6.2628185    2.4557466    31.520363 0.0046245961  -0.19645971 -0.0022265841   0.18881178    1.0239346     1.337441 
 3409000    4.0028244    1.2759598    2.7268645  -0.23821481   0.85068821   0.98742445   0.75614687   -1.2298232            1  -0.19631313  -0.44757757  -0.41169239   0.27033056 -0.0074224025 -0.051826477 -0.059402945  -0.35228762  -0.33726306   0.72453417        0.075    1.3957898        1e-10 1.6100759e-11    6.2108872    2.4462855    31.520363 -0.0030735259  -0.21329669 0.0015971058   0.19787502    1.4783915   -2.6468294 
 3410000    3.9991185    1.2716952    2.7274232  -0.22471965   0.84784499   0.99245442   0.74785503   -1.2298232            1  -0.12894251  -0.39119224  -0.36010525   0.36446997 -0.0021651294   0.02941876  -0.03982663  -0.28320659  -0.27061044   0.72542187        0.075    1.4011848        1e-10 1.6120486e-11    6.2032869    2.4381128    31.520363 -0.010285594  -0.21643192 -0.010730037   0.22716484   0.23861853    1.2258243 
 3411000    4.0093191    1.2745435    2.7347756  -0.23408986    0.8497439    1.0037948   0.74322051   -1.2298232            1  -0.15134103  -0.37767994  -0.37810853   0.30176537   0.01746023 -0.0087420454  0.013928243  -0.30464913  -0.29462775   0.71726067        0.075    1.4111644        1e-10 1.5939126e-11    6.2738697    2.4393396    31.520363 0.00033011633  -0.20475661 0.0039707045   0.19183824   -1.7442783   0.86476999 
 3412000    4.0107197    1.2696767     2.741043  -0.22852167   0.84649921   0.98736952   0.74909665   -1.2298232            1   -0.1444305  -0.39766263    -0.420655   0.38502613 0.0038998239 -0.0060181972 -0.037383074   -0.2989507  -0.28537259   0.71428006        0.075     1.408747        1e-10 1.587289e-11    6.3000499     2.443382    31.520363 -0.0037123154  -0.21948949 0.0011289835    0.2096244  -0.01514669   0.83746039 
 3413000    4.0161355    1.2657503    2.7503852  -0.22321775   0.84388148   0.98739331    0.7446507   -1.2298232            1  -0.19050446  -0.42147867   -0.4293352   0.27930049 0.0036929802  0.076115674 0.0086895649  -0.34410757  -0.33144994   0.71289003        0.075    1.4108965        1e-10 1.5842001e-11     6.312334    2.4424965    31.520363  0.010666607  -0.20724539 -0.0061686148   0.19614985  -0.20208745    2.4805777 
 3414000    4.0231705    1.2592314     2.763939  -0.23341902   0.83953531    0.9964397    0.7310363   -1.2298232            1  -0.13040882  -0.39851875  -0.37178169   0.37907397 0.0088046523 -0.042258764  0.024479396  -0.28120362  -0.27264563   0.72132611        0.075    1.4102405        1e-10 1.6029469e-11    6.2385098    2.4553895    31.520363 0.0068196173  -0.20320146 -0.008011546   0.21361885   0.54611821   0.71698769 
 3415000    4.0158546    1.2741034    2.7417511  -0.23586426   0.84945052    1.0073807    0.7402426   -1.2298232            1  -0.27480821  -0.52851762  -0.50871279   0.21280579    -0.011048  0.029120877 -0.019379579  -0.42750203   -0.4186068   0.72226746        0.075    1.4140565        1e-10 1.6050388e-11    6.2303789    2.4463329    31.520363 -0.0071651401  -0.19696279 -0.0012219726    0.1842131   0.25993784  -0.49727454 
 3416000    4.0173201     1.285768    2.7315521  -0.23312855   0.85722735     1.003939   0.75578357   -1.2298232            1 -0.058885116  -0.32633908  -0.32154626   0.47122999  0.015061054  0.047371596  0.027995064  -0.21478466  -0.20219241   0.71690716        0.075    1.4119041        1e-10 1.593127e-11    6.2769634     2.442957    31.520363 0.0040144534  -0.19618127  0.003522926   0.20441379     -1.51796    2.9484438 
 3417000    4.0298935    1.2861775     2.743716   -0.2332467   0.85750036   0.99965328   0.75921127   -1.2298232            1  -0.16537521  -0.43602364  -0.41093247   0.35083048 -0.033894711  0.048573567 -0.0046337077  -0.32198181  -0.30807074   0.71392628        0.075    1.4177389        1e-10 1.5865028e-11    6.3031718    2.4637033    31.520363 -0.0033958462  -0.18572003 -0.00063651663   0.19280729    1.1304157    1.4940895 
 3418000    4.0348353    1.2777602    2.7570751  -0.22208831   0.85188854   0.99165277   0.75525192   -1.2298232            1   -0.1230076  -0.42493458  -0.35047063   0.40638242 4.106443e-05 -0.064150546 -0.023418535  -0.27879748   -0.2645611   0.71339386        0.075    1.4043964        1e-10 1.5853197e-11     6.307876    2.4419051    31.520363 -0.0047401181  -0.20370596 -0.0035763528   0.20672137   0.57508609 -0.079138721 
 3419000    4.0198751    1.2796673    2.7402078  -0.23042553   0.85316003    1.0045939   0.74844801   -1.2298232            1  -0.17288515  -0.44649991  -0.41553982   0.34338427 0.0017224714 -0.012455017 0.0089582228  -0.32727155  -0.31628593    0.7178309        0.075    1.3944638        1e-10 1.5951798e-11    6.2688859    2.4414195    31.520363  0.008921849   -0.1864965 -0.0069934211   0.19367081   -1.4683129    1.2908366 
 3420000    4.0317979    1.2798446    2.7519534  -0.23641994   0.85327818   0.99734508    0.7536642   -1.2298232            1  -0.25607012  -0.49427399   -0.4720437   0.19810735 0.0024059212  0.059987915 0.0052951191  -0.41153249  -0.39843616   0.71735102        0.075    1.4011034        1e-10 1.5941134e-11    6.2730796    2.4487988    31.520363 -0.0002726751  -0.19669532 0.0081870183   0.19326869   -2.1512956  -0.99055114 
 3421000     4.029181    1.2904864    2.7386945  -0.22569512   0.86037316    1.0025456   0.76207084   -1.2298232            1  -0.21151962  -0.48474412  -0.44830717   0.29849245 0.0039758164   0.14678897 0.0037986938  -0.36871607  -0.35462801   0.72209919        0.075    1.3941478        1e-10 1.6046649e-11    6.2318308    2.4677346    31.520363 0.0053535847  -0.20579682 -0.0089188715   0.22318237  -0.02865275  -0.96537049 
 3422000    4.0218794    1.2847295      2.73715   -0.2343383   0.85653498    1.0033261   0.75503609   -1.2298232            1  -0.19172844  -0.45394168  -0.43131417   0.31007054 0.0031737875  0.047666634 -0.027613899   -0.3474738  -0.33494825   0.72508316        0.075    1.4061952        1e-10 1.6112959e-11    6.2061847    2.4426183    31.520363 0.0051762337  -0.19788306 0.0062606564   0.19437262    1.1167331    1.0941755 
 3423000    4.0238501    1.2801892    2.7436609  -0.22960858   0.85350794    1.0072356   0.74720863   -1.2298232            1  -0.10439385  -0.39516498  -0.34883734   0.43082076 -0.0060069391  0.085445644  0.038961268   -0.2585246  -0.24817172   0.71636567        0.075    1.4058596        1e-10 1.5919237e-11    6.2817081    2.4452915    31.520363 0.00063569418  -0.19117544 -0.0017973081   0.20749554   -2.1077328    1.4708381 
 3424000    4.0074017    1.2683763    2.7390253  -0.22817086   0.84563225   0.99111781   0.74503579   -1.2298232            1  -0.14705266  -0.40179749  -0.40791992   0.36855944 0.00092070142  0.015409714 -0.001147515   -0.3007352  -0.28852979     0.715544        0.075    1.3962829        1e-10 1.5900978e-11    6.2889215    2.4398263    31.520363 0.00091475834  -0.21379598 0.0063737467   0.21947992   -2.2061816  -0.14820265 
 3425000    4.0435928    1.2934072    2.7501857  -0.22922146   0.86232044    1.0120609   0.75878115   -1.2298232            1  -0.23618549  -0.44414801  -0.49026296   0.22585451 0.00094887674  0.036843077 -0.0049669402  -0.39270336  -0.38065215   0.72129274        0.075    1.4048697        1e-10 1.6028727e-11    6.2387984    2.4524775    31.520363 0.0099970083  -0.21528599 -0.0074905311    0.2091261   0.66330336   0.80728277 
 3426000    4.0318165    1.2780607    2.7537558  -0.22178557   0.85208885    1.0132019   0.74067861   -1.2298232            1  -0.10464949  -0.37795053  -0.40228681   0.46628887 0.0033588137  0.067547903 -0.033820473  -0.25743325  -0.24927902   0.71625004        0.075    1.4061312        1e-10 1.5916668e-11    6.2827222    2.4386369    31.520363 0.00041893989  -0.18833527 0.0068135685   0.20587388    1.6574136  0.069492821 
 3427000    4.0412615    1.2801287    2.7611328  -0.23225411    0.8534676    1.0054195   0.74839712   -1.2298232            1  -0.13871172  -0.38413142  -0.41037204   0.37836829 -0.016870247  0.088861393 0.0015843942  -0.29308763  -0.28223035    0.7152464        0.075    1.3990277        1e-10 1.5894364e-11    6.2915381     2.446714    31.520363 -0.004979818  -0.19803231 -0.0073630978   0.19848372  -0.18212421   -0.4182816 
 3428000    4.0342332    1.2924843    2.7417489  -0.23719638   0.86170512     1.015257   0.75552824   -1.2298232            1  -0.22431534  -0.45552048  -0.48368417   0.26625863 -0.0024063681 0.0034117401 -0.0063420073  -0.38016222  -0.36923822   0.71733161        0.075    1.3996406        1e-10 1.5940702e-11    6.2732493    2.4369339    31.520363 0.0054949106  -0.20761879 0.0044446712   0.19771268   -1.5195136   0.57170674 
 3429000    4.0285278    1.2875985    2.7409293   -0.2335001   0.85844777    1.0173591   0.74856173   -1.2298232            1 -0.024958081  -0.32423149  -0.24714766    0.4965049 0.0050810334  0.075168217  0.018009155  -0.17936794  -0.17018104   0.71770836        0.075    1.3908207        1e-10 1.5949075e-11    6.2699563    2.4338413    31.520363 0.0044256209  -0.19485148 -0.0047679398   0.20117659  -0.89397964    1.8609595 
 3430000    4.0126205    1.2701972    2.7424234  -0.22568051   0.84684623   0.99815448   0.74222052   -1.2298232            1  -0.16257462  -0.40247004  -0.40462543   0.31937159  0.011091057 -0.063018434  0.019962617  -0.31567645  -0.30505621   0.71443472        0.075    1.3928191        1e-10 1.5876327e-11     6.298686     2.447189    31.520363 0.0043374269  -0.20130973 -0.0075943932   0.21482149   0.84886008  -0.29636525 
 3431000    4.0270553    1.2825064    2.7445489  -0.23279291   0.85505286    1.0039951   0.75206525   -1.2298232            1  -0.13950613  -0.40818686  -0.35515538   0.34482385 0.0084805751 -0.0017823089  0.038534351  -0.29463868  -0.28282144   0.71384159        0.075    1.3854817        1e-10 1.5863146e-11    6.3039196    2.4383477    31.520363 -0.0031433214  -0.21449425 -0.0094801755   0.19791181    1.2058168    1.2564226 
 3432000    4.0326865    1.2848672    2.7478192  -0.22439108   0.85662682    1.0028514   0.75552004   -1.2298232            1  -0.10145707  -0.35646442  -0.35274519    0.4048384 -0.0034335521  -0.21224424  0.066013819  -0.25730225  -0.24460911   0.71794744        0.075    1.3939493        1e-10 1.5954388e-11    6.2678683    2.4488216    31.520363  0.004533504  -0.22094357 -0.010433624   0.20651847   0.89940626    1.0176943 
 3433000    4.0253047    1.2776086    2.7476961  -0.22799802   0.85178743   0.99155023   0.75515178   -1.2298232            1  -0.12854004   -0.3843546  -0.41274831   0.41148278 -0.0070086483 -0.029981859 -0.0042947703  -0.28430927  -0.27007891   0.71880688        0.075    1.4033702        1e-10 1.5973486e-11    6.2603741    2.4518789    31.520363 -0.00016792211   -0.2319764 0.0014202628   0.19800071   0.53845332   0.92684926 
 3434000    4.0150617    1.2649672    2.7500945  -0.22279046   0.84335941   0.99044744    0.7416538   -1.2298232            1  -0.16786151   -0.4351255  -0.39583905   0.32738002  0.018023931 -0.0029270196 -0.0068235146  -0.32084643  -0.30924295   0.71384972        0.075    1.4057114        1e-10 1.5863327e-11    6.3038478     2.454816    31.520363 -0.0093731226  -0.20502441 -0.001985555   0.17663712    1.0153131    0.2809606 
 3435000    4.0290402    1.2793755    2.7496647  -0.22777311   0.85296542    1.0097429   0.74455553   -1.2298232            1 -0.069567238  -0.35434698  -0.35300085   0.49864612 -0.0023920326 -0.019224815  0.033599292  -0.22315072  -0.21370301   0.71597513        0.075    1.4056017        1e-10 1.5910558e-11    6.2851345    2.4484928    31.520363 0.0020762238  -0.20823541 -0.0074106378   0.22611463    1.7961247    3.1357937 
 3436000    4.0398266    1.2944259    2.7454007  -0.22299825    0.8629996    1.0034938   0.76585893   -1.2298232            1 -0.086479628  -0.36864426  -0.33610443    0.4453098  0.012609232 -0.061479818 -0.021067642  -0.24445747  -0.22972337   0.71456439        0.075    1.4154708        1e-10 1.5879209e-11     6.297543    2.4494063    31.520363 -1.6933952e-05  -0.18798028 -0.0059576129   0.22035977 -0.043512796   0.13292804 
 3437000    4.0257057    1.2889899    2.7367157  -0.23001313   0.85937543    1.0228479   0.74633314   -1.2298232            1  -0.15049932  -0.41293404  -0.41758319   0.37901928 -0.015658584  0.070023693 -0.0039263349  -0.30444947  -0.29650577   0.71569703        0.075    1.4077595        1e-10 1.5904378e-11    6.2875768    2.4401743    31.520363 -0.008397773  -0.19700946 -0.0070905967    0.2159365  -0.42350465    2.0745617 
 3438000    4.0093601    1.2787014    2.7306587  -0.23270635   0.85251605    1.0101592   0.74350707   -1.2298232            1   -0.1340365  -0.40617563  -0.39663749   0.40070363 -0.019146022  0.031054899 -0.028176368   -0.2874037   -0.2782317   0.71709905        0.075    1.4184993        1e-10 1.5935534e-11    6.2752837    2.4527269    31.520363 -0.0074197885  -0.22741089 -0.011867189   0.21116969   0.40323441    2.1982288 
 3439000    4.0249567    1.2838748    2.7410819  -0.23273315   0.85596517    1.0130472   0.74734483   -1.2298232            1  -0.15402466   -0.4235707  -0.39205301   0.35354975 -0.013850395  -0.02312028 -0.034490052   -0.3081835   -0.2986321   0.71749253        0.075    1.4125839        1e-10 1.5944278e-11    6.2718423    2.4365834    31.520363 -0.0097631185  -0.19429445 0.0079872602   0.19543187    1.0588101  -0.12456706 
 3440000      4.01816    1.2636151    2.7545449  -0.23225843    0.8424579   0.99722439   0.73543863   -1.2298232            1  -0.16647722  -0.42829781  -0.40981275   0.33867891 0.0004426143 -0.028234136  -0.01169439   -0.3181801  -0.30882604   0.71956909        0.075    1.4039578        1e-10 1.5990424e-11    6.2537428    2.4514137    31.520363 -0.014294075  -0.22281049 -0.0067130877   0.19219293  -0.71450384   -1.3407761 
 3441000    4.0090689    1.2704471    2.7386218   -0.2326582   0.84701285   0.99548983   0.74434643   -1.2298232            1  -0.15801176  -0.40188236  -0.43479891   0.36264599  0.013643232  0.045905714 -0.053063043  -0.31155211  -0.30011298   0.71603713        0.075    1.4085412        1e-10 1.5911936e-11    6.2845903    2.4457278    31.520363 -0.0083946462  -0.19117166 -0.0084559101   0.23103287   -1.1911408    1.5184024 
 3442000    4.0074544    1.2666307    2.7408237  -0.23510644   0.84446843   0.99999021   0.73692668   -1.2298232            1  -0.20749916  -0.45921644  -0.47938099   0.31609994 0.0016665247 0.0096400008 0.0075264483    -0.359509  -0.35024279   0.71829508        0.075    1.4059952        1e-10 1.5962113e-11    6.2648348     2.463552    31.520363 0.0027521717  -0.21733562 0.0017816748   0.22450592   -0.1202708   0.98782717 
 3443000    4.0281801       1.2837    2.7444801  -0.22919384   0.85584863    1.0002571   0.75599849   -1.2298232            1  -0.18926281   -0.4030165  -0.45114192   0.28636998 0.0052690929  -0.10949644 0.0076737795  -0.34520669  -0.33204454   0.71436251        0.075    1.4032034        1e-10 1.5874722e-11    6.2993227    2.4472765    31.520363 -0.0014296306  -0.19485479 -0.0053747803   0.19259363    0.2775143   -1.5630663 
 3444000    4.0237858    1.2778713    2.7459145  -0.22889064   0.85196262   0.99557376   0.75266389   -1.2298232            1  -0.13241399  -0.39401193  -0.41295709   0.40972704 0.0028843528 -0.065117859 -0.033159538  -0.28767003  -0.27452719   0.72006598        0.075    1.4134108        1e-10 1.6001466e-11    6.2494273    2.4514551    31.520363 0.0040496327  -0.22804802 -0.011973259   0.20734335  -0.17942069  -0.62848069 
 3445000    4.0104263    1.2740014    2.7364249  -0.23209782   0.84938249   0.99284181   0.75018857   -1.2298232            1  -0.10048764  -0.38295378  -0.35064925    0.4321401 -0.013749299  -0.19932493 0.0063175973  -0.25523308  -0.24221087   0.71941862        0.075    1.4266711        1e-10 1.598708e-11    6.2550508    2.4443232    31.520363 0.0029727232  -0.18446551 0.0041233275   0.19807342   0.89190443    1.2420239 
 3446000    4.0208322    1.2761645    2.7446678  -0.22870876   0.85082463   0.99643657   0.75014122   -1.2298232            1  -0.19701465  -0.45823982  -0.42253329   0.28972914 -0.018626763 -0.074767595 -0.017915695  -0.35175032  -0.33925102   0.71345418        0.075    1.4175395        1e-10 1.5854537e-11    6.3073427    2.4439663    31.520363 -0.016684257  -0.20174895 0.0010281887   0.19125542    1.6835245    1.1621411 
 3447000    4.0014974    1.2660142    2.7354832  -0.23465263   0.84405744   0.98598343   0.74592411   -1.2298232            1  -0.03598866  -0.30919689   -0.3113587   0.51258961 0.0087434587 -0.0070597531  -0.04790297  -0.18985444  -0.17673289   0.71358052        0.075    1.4222557        1e-10 1.5857345e-11     6.306226    2.4316576    31.520363 -0.0047266451  -0.20576241 -0.00027497277   0.20849716    3.5350208    2.3822775 
 3448000      3.99879    1.2679793    2.7308108  -0.22804889   0.84536753   0.99599923   0.74120986   -1.2298232            1  -0.14740506  -0.41543148  -0.40573279   0.37894911  0.012159859 -0.051825814 0.0011183142   -0.3002984  -0.28957899   0.71952092        0.075    1.4260982        1e-10 1.5989354e-11    6.2541615    2.4517924    31.520363 -0.0018664019  -0.22407188 -0.0059845361   0.20886003    1.5768431  -0.85881228 
 3449000    3.9918117      1.26295    2.7288618  -0.23595781   0.84201448    0.9903279   0.73946077   -1.2298232            1  -0.12111609  -0.34923603  -0.42500057   0.41088834 -0.0029484646 -0.092643305  0.031069112  -0.27364864  -0.26248047   0.72152674        0.075    1.4062715        1e-10 1.6033927e-11    6.2367751    2.4464345    31.520363 -0.0057768536  -0.22108265 -0.011764302   0.21473213  -0.91395333    2.1258892 
 3450000    4.0059963    1.2703038    2.7356924  -0.23190996   0.84691732   0.99822811   0.74228986   -1.2298232            1  -0.04113798   -0.3356794  -0.32192167   0.53418713 -0.0041933067  -0.03605589 -0.0052492468  -0.19425411  -0.18363008   0.72085421        0.075    1.4082367        1e-10 1.6018983e-11    6.2425937    2.4490089    31.520363 -0.00067460336  -0.18622908 3.0431552e-05   0.20111487  0.014362394     3.068218 
 3451000    4.0124517    1.2724556    2.7399961  -0.22880252   0.84835191    1.0008493   0.74290348   -1.2298232            1  -0.10281922  -0.35539155  -0.37691547   0.42384935 -0.0026405235     0.057949 0.0093214848  -0.25606192  -0.24568548   0.71468074        0.075    1.4174728        1e-10 1.5881794e-11    6.2965178    2.4425606    31.520363 -0.0045073689  -0.21793002  0.004180657   0.21992594    1.2031978    1.9233005 
 3452000    4.0015336    1.2729123    2.7286213  -0.22994955    0.8486564    1.0035796   0.74152925   -1.2298232            1  -0.30032427  -0.50057511   -0.5245737     0.124176 0.0076951443  0.067915632  -0.05642409   -0.4532835  -0.44358027   0.71360924        0.075    1.4399475        1e-10 1.5857983e-11    6.3059721    2.4501681    31.520363  0.011772468  -0.21447804 0.0051212191   0.17300678   0.39255602   -2.1174601 
 3453000    4.0199817    1.2722322    2.7477495  -0.22581356   0.84820296   0.99288314   0.74816409   -1.2298232            1  -0.14461499   -0.4150565  -0.38337593   0.36458747 9.655814e-05  -0.06191103 -0.032480505  -0.29894282  -0.28634412   0.71517987        0.075    1.4213839        1e-10 1.5892886e-11    6.2921234    2.4418035    31.520363 -0.0070668765  -0.21928997 -0.0033623254   0.20883015    1.4216838    2.3053459 
 3454000    4.0242505    1.2843116    2.7399389  -0.23624788   0.85625637    1.0123462   0.74832263   -1.2298232            1 -0.021564865  -0.31208787  -0.32786686   0.57526014 -0.0031518534 -0.00094565508 0.0026416585   -0.1759254  -0.16607225   0.72130533        0.075     1.428497        1e-10 1.6029007e-11    6.2386895    2.4420206    31.520363 0.0014915106   -0.1992661 -0.0042050107   0.19766159 -0.046890399    3.0625855 
 3455000    4.0397341    1.2859171     2.753817  -0.22020864   0.85732678    0.9924837   0.76387899   -1.2298232            1  -0.13932293  -0.40086342  -0.43834014   0.42123478 -0.0094865258  0.053945454 0.0018358394  -0.29689236  -0.28099504   0.71647818        0.075    1.4396039        1e-10 1.5921737e-11    6.2807216    2.4469306    31.520363 -0.0062431671  -0.20958025 -0.0018197159   0.18953781  -0.18332386    2.0510842 
 3456000    3.9942234    1.2530383    2.7411851   -0.2363338   0.83540634   0.97559057   0.73847748   -1.2298232            1  -0.24522318  -0.52563519  -0.45624002   0.24620568 0.00072802215  0.056863995  0.047112559   -0.3975529  -0.38448388   0.71529552        0.075    1.4350161        1e-10 1.5895456e-11    6.2911061    2.4402129    31.520363 -0.0043810267  -0.18670349 -0.0019306221   0.21122835  -0.31023452   0.56401657 
 3457000    4.0032357    1.2683569    2.7348787  -0.23024401   0.84561933   0.99255985   0.74401601   -1.2298232            1 -0.095821083  -0.36282343  -0.33725907   0.41261925 0.0079146024  0.052067809  0.030591399  -0.24929327  -0.23750406   0.72143882        0.075    1.4438163        1e-10 1.6031974e-11    6.2375351      2.44498    31.520363 0.0012484379   -0.1829832 -0.0031526675   0.18892253   0.47034329    1.5339371 
 3458000    4.0211648      1.29005    2.7311148  -0.23939041   0.86008221   0.99799388   0.76472836   -1.2298232            1  -0.20598591  -0.48147377  -0.44941495     0.312931 -0.0066280659 -0.0093832821 -0.0027684051  -0.36373055  -0.34844457    0.7254189        0.075    1.4547301        1e-10 1.612042e-11    6.2033123    2.4439709    31.520363 0.0056860358  -0.20238586 0.0032028154   0.20896144    1.4065888    2.0124514 
 3459000     4.025489    1.2786279     2.746861  -0.23486774   0.85246704    1.0012226   0.74960837   -1.2298232            1  -0.10790553  -0.36786623   -0.3576642   0.40181383 0.0056950794    0.1127872  0.040561075  -0.26253129  -0.25082508   0.72121361        0.075     1.448568        1e-10 1.6026969e-11     6.239483    2.4523307    31.520363 0.0017885563  -0.18532568 0.0035361597   0.21602112  -0.91383305    1.2448431 
 3460000    3.9958015    1.2667079    2.7290936  -0.22834224   0.84451991   0.99252953   0.74217667   -1.2298232            1  -0.17448414  -0.39863108  -0.42650977   0.30168841 0.0077570646 0.0088847644 -0.015610402  -0.32757692   -0.3161628   0.71013443        0.075    1.4443237        1e-10 1.5780765e-11    6.3368283    2.4507105    31.520363 -0.0054706286  -0.19910349 -0.004594818   0.19386269  -0.51034062   0.73189448 
 3461000     4.026009     1.288294     2.737715  -0.23411628   0.85891144     1.003362   0.75903246   -1.2298232            1   -0.2967221  -0.50295124  -0.51345546   0.12624039 0.0077345089  0.046173256 -0.024908012  -0.45329182  -0.43994704   0.71225359        0.075    1.4457445        1e-10 1.5827858e-11    6.3179745    2.4424361    31.520363 0.0038677403  -0.17176061 -0.0045800727   0.19199494    1.0045144  0.063700172 
 3462000    4.0493261    1.3045653    2.7447608  -0.23420215   0.86975961    1.0171957   0.76781571   -1.2298232            1 -0.076409344  -0.36280758  -0.31882585    0.4524054 -0.0023405995  0.033088761 -0.0087796867  -0.23479082  -0.22160896   0.72249799        0.075    1.4340726        1e-10 1.6055511e-11     6.228391    2.4447366    31.520363 -0.0062136034  -0.19758524 -0.0011859016   0.20281842  0.053774572   0.68021484 
 3463000    4.0307229     1.290847    2.7398759  -0.23427283   0.86061355    1.0128368   0.75535597   -1.2298232            1 -0.079638052  -0.34129499  -0.32310828   0.42548911 0.0067029194 0.0090595765  0.049708021   -0.2354494  -0.22421547   0.72319165        0.075     1.413959        1e-10 1.6070926e-11     6.222417      2.44033    31.520363 -0.0037509205   -0.1990318 -0.0074798647   0.19448289  -0.30422046    2.3824552 
 3464000    4.0208875    1.2839065     2.736981  -0.22475565   0.85598631    1.0061216    0.7521732   -1.2298232            1  -0.18328863  -0.41906097  -0.43004799   0.29924307   0.01061264  0.089262638  0.042116648  -0.33844345  -0.32690748    0.7155053        0.075    1.4126286        1e-10 1.5900118e-11    6.2892616    2.4432371    31.520363 -0.0023585087  -0.18103895 0.0075454173   0.19321275   -1.5894386   0.73783657 
 3465000    4.0210451    1.2757802    2.7452649  -0.23008865   0.85056846   0.99980783   0.74737479   -1.2298232            1 -0.049962555  -0.33040124  -0.29198392    0.4724975 -0.012709941   0.15998918 -0.018716599  -0.20412758  -0.19268015   0.71201103        0.075    1.4261463        1e-10 1.5822467e-11    6.3201268    2.4615986    31.520363 -0.0030379795  -0.20504908 0.0035546131   0.19586064  -0.54742801     1.142209 
 3466000     4.033304    1.2788441    2.7544599  -0.22846645   0.85261117    1.0023065   0.74910216   -1.2298232            1  -0.11214224  -0.36023394  -0.38521682   0.40902405 -0.0024543277  0.039784451  0.024953695  -0.26666357  -0.25521651   0.71584898        0.075    1.4277287        1e-10 1.5907755e-11    6.2862421    2.4501313    31.520363 0.00028035744  -0.18058659 0.00013756331   0.20769162   0.47096581    0.3281454 
 3467000    4.0288358    1.2804699    2.7483659  -0.23439572   0.85369508    0.9986036   0.75349872   -1.2298232            1  -0.11165588  -0.37191811  -0.40709724   0.44404772 -0.030469625  -0.03138885  0.026613905  -0.26708411  -0.25420157   0.71998703        0.075    1.4168774        1e-10 1.5999712e-11    6.2501126    2.4403253    31.520363 -0.0025985466  -0.20095175 -0.00091977317   0.19258066  -0.54288377   0.85896154 
 3468000    4.0164838      1.27291    2.7435737  -0.23358092    0.8486549   0.99429592   0.74795115   -1.2298232            1  -0.16033653  -0.40410118  -0.38597753   0.30906911 0.0087762721  0.014244284  0.010220341  -0.31462044  -0.30226733   0.72080253        0.075     1.430378        1e-10 1.6017834e-11    6.2430414    2.4394541    31.520363 -0.00067607908  -0.21665262 -0.0011723089   0.18784825   -1.2508582   0.33005456 
 3469000    4.0189824    1.2724986    2.7464838  -0.23036557   0.84838061     1.002685   0.74168171   -1.2298232            1  -0.22910418   -0.4675962  -0.48864851   0.26893216 -0.0083456704  -0.10641464  0.030755499  -0.38209486  -0.37223247   0.71454231        0.075    1.4435708        1e-10 1.5878718e-11    6.2977377    2.4423022    31.520363 -0.0081995795  -0.18584738 0.00024652087   0.22537771    1.5553972    1.2495859 
 3470000    4.0228748    1.2705078     2.752367  -0.23050892    0.8470533   0.98778474   0.74974689   -1.2298232            1  -0.16776265  -0.41592773  -0.40595403   0.31859382 -0.0025483397  -0.02444216  0.048296852  -0.32241697    -0.308764   0.71219059        0.075    1.4413664        1e-10 1.5826457e-11    6.3185334    2.4488916    31.520363 -0.0046919491  -0.18070658 0.0016056098   0.22124109  -0.23790918   0.52843558 
 3471000    4.0286651    1.2833219    2.7453432  -0.22801531   0.85559652    1.0114796   0.74780584   -1.2298232            1 -0.095092596  -0.37795933  -0.35131235   0.44399389 -0.0034420341  0.098722176 0.0070766814  -0.24934653  -0.23947627   0.71726121        0.075    1.4352283        1e-10 1.5939138e-11     6.273865    2.4375331    31.520363 -0.00076569107   -0.2399882 -0.0041373724    0.2038462   -1.3873097    0.1161693 
 3472000     4.024272    1.2748686    2.7494034  -0.23728236   0.84996068    1.0037064   0.74364854   -1.2298232            1  -0.17422669  -0.45080728  -0.42790489   0.35603209 -0.0092499781  0.066974396  0.015060674  -0.32762308  -0.31750078   0.71793659        0.075    1.4322638        1e-10 1.5954147e-11     6.267963    2.4513466    31.520363 0.0013107559  -0.18555926 0.0090329073   0.19997309   -1.4468275    2.3548353 
 3473000    4.0376898    1.2716266    2.7660632  -0.22058087   0.84779924   0.99306256   0.74735678   -1.2298232            1  -0.12766313  -0.39836862  -0.36865976   0.38403899 -0.010178977 -0.057719897  0.056734463  -0.28182444  -0.26941787   0.71297117        0.075    1.4355887        1e-10 1.5843804e-11    6.3116157    2.4444788    31.520363 0.00059992169  -0.18537678 -0.0062209377   0.19294636   0.19230841    1.6575164 
 3474000    4.0304353    1.2852071    2.7452282  -0.23450546   0.85685341    1.0082542   0.75216466   -1.2298232            1 -0.071868157  -0.33638267  -0.33701771   0.45779591  0.015331632   -0.1396979 -0.010717214  -0.22702121  -0.21579142   0.71686857        0.075    1.4433939        1e-10 1.5930413e-11    6.2773013    2.4606845    31.520363 -0.010004356  -0.20029973 0.0047620803     0.197699    2.5866368    2.9066036 
 3475000     4.021144     1.291117     2.730027   -0.2382612   0.86079359    1.0173859    0.7525126   -1.2298232            1  -0.19744694  -0.43037254  -0.44157675   0.27960846 -0.004289547 -0.045837188 -0.008103388  -0.35267177  -0.34267372   0.71662634        0.075    1.4404911        1e-10 1.592503e-11    6.2794231     2.439097    31.520363  0.001554794  -0.19897096 -0.0025575284   0.19332378    2.5565239     1.319146 
 3476000    4.0422765    1.3004503    2.7418262  -0.22997985   0.86701614    1.0261531   0.75697483   -1.2298232            1  -0.21404512  -0.46529463  -0.44840054   0.27155981 -0.00097671839  0.013305137 -0.036844983  -0.37019039  -0.36052337   0.71212039        0.075    1.4490904        1e-10 1.5824898e-11    6.3191562    2.4394369    31.520363 0.0031428026  -0.21112953 -0.0077315417   0.19137867    1.8792976   0.86486066 
 3477000    4.0535926     1.296113    2.7574796  -0.22414178   0.86412442    1.0152138   0.75965187   -1.2298232            1  -0.11791199  -0.39136309    -0.358713   0.39634011 0.0026619036  0.042709333 0.0064595918  -0.27460948  -0.26282871   0.71101795        0.075    1.4421923        1e-10 1.5800399e-11    6.3289541    2.4500973    31.520363 0.0020494909  -0.19094005  0.002355357    0.1776609   -1.7137077    2.7097276 
 3478000     4.058742    1.3016217    2.7571203  -0.22771935   0.86779711    1.0168996   0.76469981   -1.2298232            1  -0.20969407  -0.44272053  -0.48474795   0.29838628 -0.0014620059  0.050934629 -0.037323374  -0.36743282  -0.35485143   0.71272669        0.075    1.4249044        1e-10 1.5838371e-11    6.3137807    2.4424305    31.520363 -0.0025545679  -0.19621818 0.0025888751   0.17314343  -0.98393625    2.4233612 
 3479000    4.0391622    1.2852359    2.7539263  -0.23131041    0.8568726    1.0090203   0.75166695   -1.2298232            1  -0.14661584  -0.37956862  -0.39216113   0.33188223 -0.0045816659  0.013754439  0.057862855  -0.30166623  -0.29064847   0.71891998        0.075    1.4313491        1e-10 1.5975999e-11    6.2593893    2.4537228    31.520363 -0.0037477108  -0.19507867 0.0024810945   0.18544767   0.28487058    1.0288033 
 3480000    4.0261957    1.2868966    2.7392991   -0.2316183    0.8579798    1.0013798   0.75882774   -1.2298232            1  -0.19300711  -0.42523669  -0.42471112   0.27092648 -0.00078066863 0.0083809791 0.0050236442  -0.34953459   -0.3359491   0.71708922        0.075     1.430613        1e-10 1.5935316e-11    6.2753697    2.4453623    31.520363 -0.0060327626  -0.21164273 -0.00076630633   0.19432619  -0.73869255    1.3702656 
 3481000    4.0174672    1.2755962    2.7418711  -0.23006778   0.85044575   0.99890652   0.74779087   -1.2298232            1  -0.21631414  -0.47600597  -0.44909374   0.27615729  0.010040169  -0.16753031 -0.028074612  -0.37056499  -0.35890308   0.71658856        0.075    1.4390326        1e-10 1.592419e-11    6.2797542     2.449832    31.520363 -0.0051602986  -0.17786543 -0.0032365559   0.20814746   0.22063167    2.0138149 
 3482000    4.0664039    1.2949689     2.771435  -0.22708282   0.86336166     1.006374   0.76447839   -1.2298232            1  -0.10625361  -0.37064831  -0.37816449   0.43005196 0.00073930676  -0.08906911  0.003294868  -0.26394669   -0.2499085   0.71636228        0.075    1.4316291        1e-10 1.5919162e-11    6.2817377    2.4471666    31.520363 0.0092032425  -0.18263314 -0.0073059487   0.18903771  0.018271897    1.9380156 
 3483000    4.0232855    1.2785592    2.7447264  -0.23681145   0.85242119    1.0127271   0.74156955   -1.2298232            1 -0.079660683  -0.34020197  -0.38134549    0.4825654 -0.0038872391 -0.097560774  0.020601711  -0.23262823  -0.22422243   0.71808584        0.075    1.4304331        1e-10 1.5957463e-11    6.2666603    2.4402803    31.520363 -0.0024827686  -0.22176856 0.0072622549    0.1805747    2.1526258     1.345009 
 3484000    4.0234975    1.2791551    2.7443424  -0.23511686   0.85281852    1.0078571   0.74561196   -1.2298232            1  -0.14820447  -0.40106895  -0.42237352   0.37882906  0.022834332 -0.080637668 -0.0086539265  -0.30200586  -0.29207105   0.71480462        0.075     1.423795        1e-10 1.5884547e-11    6.2954266    2.4387316    31.520363 0.0037512934  -0.19203439 0.00030530836   0.17814522 -0.094241519    1.7777244 
 3485000    4.0417654     1.288592    2.7531734  -0.23423511   0.85911014    1.0111849   0.75395518   -1.2298232            1  -0.16660904   -0.3995747  -0.43781767   0.33756525 0.0059763562  0.017821427  0.030413172  -0.32213143  -0.31095065   0.71702596        0.075    1.4210261        1e-10 1.593391e-11    6.2759234    2.4602609    31.520363 -0.0004418364  -0.18504384 -0.0024534097   0.23280055  -0.73948909    1.2367711 
 3486000    4.0110765    1.2633429    2.7477336  -0.24117121   0.84227642   0.99488909   0.73674761   -1.2298232            1  -0.15804699  -0.41062958  -0.42500417   0.36149277 -0.0075948017  0.074818565 -0.053251236  -0.31001989  -0.30006246   0.71952264        0.075    1.4063201        1e-10 1.5989392e-11    6.2541465    2.4567626    31.520363 -0.0027261534  -0.19380607 -0.0029598791    0.2078357    0.3239266  -0.37092536 
 3487000    4.0191491    1.2801091      2.73904  -0.23579864   0.85345455   0.99752204   0.75384017   -1.2298232            1  -0.21486548  -0.45452574  -0.44356445   0.25349376 -0.0032879255   0.01383322  -0.02892809  -0.37036415  -0.35725678   0.71787577        0.075    1.4017175        1e-10 1.5952795e-11     6.268494    2.4444867    31.520363 -0.0033969236  -0.19691583 0.0029068859   0.18842133  -0.40346584  -0.75794822 
 3488000    4.0264631    1.2782518    2.7482113  -0.23527605   0.85221626    1.0020495    0.7486118   -1.2298232            1  -0.11246835  -0.35113516  -0.38968757   0.40341768 -0.0061943428 -0.070685304  0.080224786  -0.26688854  -0.25550593   0.71623015        0.075    1.4078602        1e-10 1.5916226e-11    6.2828966    2.4577168    31.520363 -0.0016659843  -0.19219498 0.0011425395   0.20246482  0.017189336   0.59545903 
 3489000    4.0318309    1.2912726    2.7405583  -0.22417921   0.86089731    1.0080046   0.75918003   -1.2298232            1 -0.087485402  -0.33610067  -0.35317829   0.42682275 0.0094579495 -0.017888327 -0.032513507  -0.24408555  -0.23137305   0.71128533        0.075    1.4090903        1e-10 1.5806341e-11     6.326575    2.4456483    31.520363 0.0046524845  -0.20782486 -0.0022934504   0.19585589    1.1338745    1.4280723 
 3490000    4.0329194    1.2792177    2.7537016  -0.23133766   0.85286028    1.0090339   0.74486827   -1.2298232            1  -0.22098314   -0.4544481  -0.45179169   0.24329035 0.0061435555 -0.012372986 0.0031487253  -0.37463113  -0.36501771   0.71559978        0.075     1.415405        1e-10 1.5902217e-11    6.2884312    2.4536387    31.520363 0.00019599916  -0.18360924  0.010619887   0.20495988     1.748905 -0.0038742501 
 3491000    4.0375319    1.2906513    2.7468806  -0.23916297   0.86048311      1.02333   0.74787383   -1.2298232            1  -0.16916005  -0.41396633  -0.44202213   0.34850831 0.0081771319 -0.082723878 -0.0044465894  -0.32342801  -0.31523532   0.71868703        0.075     1.409191        1e-10 1.5970823e-11    6.2614182    2.4395061    31.520363 -0.0011424152  -0.19027314 -0.0052542864   0.19212344    1.4707806    2.3167525 
 3492000    4.0477022    1.2872952     2.760407   -0.2292969   0.85824553    1.0023643    0.7585961   -1.2298232            1   -0.1254456  -0.37505976  -0.37308442   0.37180739 -0.012334905 -0.042005502 -0.013415622   -0.2819253  -0.26852812   0.71822565        0.075    1.4075279        1e-10 1.596057e-11    6.2654404    2.4639331    31.520363 0.00036808038  -0.19627109 0.00082539925      0.20886  0.043653162   0.60454544 
 3493000    4.0280015    1.2792011    2.7488004  -0.23609989   0.85284915    1.0065712   0.74655361   -1.2298232            1  -0.12619397  -0.39099754  -0.37801184   0.39042746 0.0052832942  0.030067813 -0.014843323  -0.28018961  -0.26987701   0.70816171        0.075    1.4224743        1e-10 1.5736927e-11    6.3544808    2.4423847    31.520363 0.0011503675  -0.20564868 -0.0095588308   0.20852279  -0.39379538    1.0547267 
 3494000    4.0431398    1.2795753    2.7635645  -0.23421348   0.85309865    1.0086159   0.74556088   -1.2298232            1  -0.12203059  -0.38098842  -0.42708097   0.44197764 -0.0072456469  0.061128993  0.032927701  -0.27582144  -0.26600548    0.7119203        0.075    1.4060956        1e-10 1.5820451e-11    6.3209322     2.453934    31.520363 0.0084728741  -0.20850767 0.00064095576   0.18547557   -1.2827519    2.9563639 
 3495000    4.0238778    1.2798424    2.7440355  -0.23300097   0.85327671    1.0029755   0.74976538   -1.2298232            1  -0.21593167  -0.45330833  -0.47497663   0.28048994 -0.0074844808  0.054195012 -0.049707214  -0.37058982  -0.35910144   0.72128919        0.075    1.3931872        1e-10 1.6028649e-11    6.2388291    2.4508639    31.520363 -0.0069634234  -0.20830718 -0.0073087825   0.20811378  -0.18828538   0.63485274 
 3496000    4.0265598    1.2853605    2.7411993  -0.22738148   0.85695567    1.0211678   0.74340127   -1.2298232            1  -0.16642391  -0.45650819  -0.42632869   0.38356514 -0.016563868 -0.015145248 -0.010113397  -0.31976929  -0.31219054   0.71813749        0.075    1.4060987        1e-10 1.5958611e-11    6.2662096    2.4429702    31.520363 0.0013410035  -0.21191725 -0.0055830929   0.19480071    1.3857155    1.1042739 
 3497000    4.0253746    1.2938826     2.731492    -0.223612   0.86263739    1.0236347   0.75130826   -1.2298232            1  -0.10544432  -0.37631852  -0.35558662   0.41557218 -0.010046233 -0.0097725884 -0.052964564  -0.26042072  -0.25156308   0.71051493        0.075    1.3928851        1e-10 1.5789221e-11    6.3334349    2.4562467    31.520363  0.013359384  -0.20707406 -0.0023960946   0.21480671 -0.0068692434    3.4731551 
 3498000    4.0395763    1.2821135    2.7574628  -0.22768286    0.8547909   0.99935472   0.75483318   -1.2298232            1  -0.17014929  -0.41938668   -0.3960495   0.30498832   0.01091912 -0.072096232 -0.00051823841  -0.32585279   -0.3128022   0.71226072        0.075    1.3988365        1e-10 1.5828016e-11    6.3179112    2.4563466    31.520363 -0.00072676333  -0.19037848 -0.011326911   0.18636616   0.67587535    3.1549352 
 3499000    4.0386632     1.293329    2.7453342  -0.23724357    0.8622683    1.0193237   0.75366697   -1.2298232            1  -0.21377284  -0.45988451  -0.46113219   0.27969819  0.021681366  0.006420658 0.0078447783  -0.36923578  -0.35927622   0.71912844        0.075    1.3912278        1e-10 1.5980632e-11    6.2575748    2.4482676    31.520363 0.00063263055  -0.20705329   0.01270664   0.20078845   -1.1929849   0.77617321 
 3500000    4.0450932    1.2844017    2.7606916  -0.22816133   0.85631641    1.0134715   0.74764556   -1.2298232            1  -0.18937107  -0.46331268  -0.45171941   0.34691888 0.0037398565  0.008359554 -0.010678951  -0.34359195  -0.33403908   0.71904621        0.075    1.4119049        1e-10 1.5978805e-11    6.2582904    2.4415125    31.520363 0.0063990575   -0.2107845 -0.0096736006   0.19138505  -0.31158562    2.2637824 
 3501000    4.0363781      1.29758     2.738798  -0.23329197    0.8651025    1.0229586   0.75594737   -1.2298232            1  -0.21012592  -0.43831547  -0.46236171   0.27029942 0.0029916318 -0.025641519 -0.0035414788  -0.36605925  -0.35614817   0.71349645        0.075    1.4288687        1e-10 1.5855477e-11     6.306969    2.4543475    31.520363 -0.0046845071  -0.17660888 0.0054314317   0.19077796   0.59629044   0.36120224 
 3502000    4.0366726    1.2887086     2.747964  -0.23414651   0.85918788    1.0022681   0.76025728   -1.2298232            1  -0.22000573  -0.42264974  -0.47972087   0.24235341 -0.0080126945 -0.060541847 -0.0057461336   -0.3768281  -0.36307451   0.71036326        0.075    1.4112881        1e-10 1.578585e-11    6.3347871    2.4423996    31.520363 -0.006546983  -0.18170175 -0.00023658872    0.1888085    1.2812859  -0.55772062 
 3503000     4.015357    1.2685683    2.7467887  -0.22315594   0.84576023    1.0018479   0.73782703   -1.2298232            1  -0.19669786  -0.45632659  -0.44050392   0.30673694 0.0018605943 0.0025057129    0.0572729  -0.34889341  -0.33970666   0.72098547        0.075    1.4081831        1e-10 1.6021899e-11    6.2414573    2.4515964    31.520363 -0.0071277447  -0.21231179 -0.013264989   0.22187784  -0.47419642    1.2184139 
 3504000    4.0306374    1.2709532    2.7596842  -0.22387498   0.84735024   0.99387855   0.74603236   -1.2298232            1  -0.15440557  -0.40620514  -0.44285052   0.38583894 -0.00091182945 -0.093713978 -0.017538167  -0.30829368  -0.29627679   0.72015485        0.075    1.4187109        1e-10 1.6003441e-11    6.2486561    2.4539113    31.520363 -0.0001849346  -0.20429306 -0.0021789164   0.19560169   0.96639178    2.1073241 
 3505000    4.0570987    1.2985079    2.7585908  -0.22991357   0.86572111    1.0073675   0.76778332   -1.2298232            1  -0.17207408  -0.44222806  -0.42114699   0.34715281  0.013782405 -0.0025676004 -0.017440041  -0.33044888  -0.31587078   0.71366709        0.075    1.4209157        1e-10 1.5859269e-11     6.305461    2.4553225    31.520363 0.0048217353  -0.19685081 -0.0032722056   0.23168959  0.092944692    3.0498121 
 3506000    4.0215478     1.270698    2.7508498  -0.22856549   0.84718014   0.99998667   0.74151764   -1.2298232            1  -0.13908034  -0.39822027  -0.41000101   0.39098025 0.0012731616 -0.013464236  0.024573209  -0.29203718  -0.28182347    0.7138753        0.075    1.4249198        1e-10 1.5863896e-11    6.3036219     2.460339    31.520363 -0.011627618  -0.19542108 0.0029962017   0.20344127 -0.022846962  -0.62160327 
 3507000    4.0226816    1.2793637    2.7433179  -0.22819706   0.85295757    1.0065766   0.74673334   -1.2298232            1  -0.19446107  -0.41145327   -0.4554093   0.28347936  0.012482511 -0.011836313  0.032853243  -0.34849377  -0.33814488   0.71589864        0.075    1.4068477        1e-10 1.5908859e-11     6.285806    2.4463318    31.520363 -0.0049143643  -0.19343848 0.00097154268   0.16653906   0.53745427  -0.28116404 
 3508000     4.030614    1.2823002    2.7483139  -0.23325745   0.85491533    1.0018647   0.75330678   -1.2298232            1  -0.18862148  -0.43518287  -0.43470908   0.30402751 -0.012848553 -0.0065575322   0.04785884  -0.34401012  -0.33163268   0.71857636        0.075    1.4024418        1e-10 1.5968364e-11    6.2623825    2.4466175    31.520363 0.0018051187  -0.20533006 0.0057696099   0.19646778    2.8201341   0.71094192 
 3509000    4.0239439    1.2766337    2.7473101  -0.23354386    0.8511375     1.003857   0.74553558   -1.2298232            1   -0.1034399  -0.34866752  -0.39838698   0.43673479  0.016293497   0.11670039 0.0018265133  -0.25722554   -0.2467355   0.71410991        0.075    1.4148159        1e-10 1.5869109e-11     6.301551      2.43903    31.520363 -0.010105701  -0.18157681 0.0050513055   0.20523936   -1.3142771  -0.86317374 
 3510000    4.0382629    1.2937323    2.7445306  -0.23228763   0.86253719    1.0090525   0.76122974   -1.2298232            1  -0.27963188  -0.51150246  -0.48903522   0.16164204  0.019803136  0.067847744 -0.026477748  -0.43665484  -0.42366911   0.71299396        0.075    1.4195466        1e-10 1.584431e-11    6.3114139    2.4480627    31.520363 0.0056803341   -0.1874996 -0.009431317   0.19027841   0.50404514  0.072786331 
 3511000    3.9972922    1.2740016    2.7232906  -0.23451397   0.84938262    1.0015262   0.74417912   -1.2298232            1  -0.13580298  -0.40379208  -0.41190222   0.40828537  0.011045037   0.14906031 0.0096959034  -0.28930881  -0.27876585   0.71309916        0.075    1.4283021        1e-10 1.5846648e-11    6.3104828    2.4387815    31.520363 -0.0038310668  -0.20211779 0.0014630452   0.19904127   -1.2252788    4.1631092 
 3512000     4.026152    1.2794207    2.7467313  -0.23043715   0.85299556    1.0071283   0.74641585   -1.2298232            1  -0.13297054  -0.38063862  -0.39238701   0.37411402 -0.005596231  0.063757687   0.04684874  -0.28693775  -0.27673309   0.72008405        0.075    1.4154581        1e-10 1.6001868e-11    6.2492705    2.4507851    31.520363 0.00034023694  -0.21656793 -0.010181678   0.19131193    1.3782067    2.3293389 
 3513000    3.9943473     1.268919    2.7254283  -0.23091438   0.84599405    1.0048025   0.73617803   -1.2298232            1   -0.2967532  -0.49676187  -0.51534242    0.1218447 -0.0081207274  0.023733418  0.012989067   -0.4486086  -0.44018375   0.71864677        0.075    1.4106858        1e-10 1.5969928e-11    6.2617689    2.4480276    31.520363 0.00048655856  -0.21931936 -0.0036866122   0.19527265  -0.11406812   0.69008258 
 3514000    4.0427388    1.2803527     2.762386  -0.22472975   0.85361698   0.98866128   0.76024677   -1.2298232            1 -0.075486517  -0.33117186  -0.34698591   0.45169823 -0.0011646833 -0.057840933 -0.021499016  -0.23230671    -0.216613   0.71639161        0.075    1.4135807        1e-10 1.5919814e-11    6.2814806    2.4681442    31.520363 -0.0074376371  -0.19713751 -0.0031227974   0.20931266  0.079453554    2.2696723 
 3515000    4.0297331    1.2780589    2.7516741  -0.22953784    0.8520877   0.99897768   0.75051998   -1.2298232            1  -0.15662626  -0.40694749   -0.3853854   0.32245411 -0.010083698 0.0085439393  0.029032466  -0.31144006  -0.29922535   0.71498006        0.075    1.4221219        1e-10 1.5888446e-11    6.2938818      2.44409    31.520363  0.008446893  -0.20517064 0.00069516794   0.19863438   0.26754393   0.80834091 
 3516000    4.0246829    1.2767868    2.7478961  -0.23621279   0.85123956    1.0108163   0.74089241   -1.2298232            1   -0.1585957  -0.41204824  -0.41216647    0.3484276 0.0035141507 -0.017699935  0.015782606  -0.31142357  -0.30288469   0.72223979        0.075    1.3981081        1e-10 1.6049773e-11    6.2306177     2.447775    31.520363 0.00031560381   -0.1960829 -0.0075454833   0.20247799    2.8445329   0.88589946 
 3517000    4.0193473    1.2830917    2.7362556   -0.2282102   0.85544306    1.0025382   0.75373369   -1.2298232            1 -0.095350633  -0.38312243  -0.36061119   0.45768172 0.0090577389  0.064540713 -0.067877334  -0.25082734  -0.23845798   0.71450718        0.075    1.4179519        1e-10 1.5877937e-11    6.2980473    2.4505006    31.520363 0.0048205126  -0.22378582 -0.0024097134   0.21946469   -1.0419798    2.4243037 
 3518000    4.0283184    1.2833153    2.7450031  -0.22581196   0.85559213    1.0086629   0.74974755   -1.2298232            1   -0.1951727  -0.46391018  -0.42451252   0.30290459 -0.0045939701  0.013462424 -0.0038253224  -0.34982717  -0.33915432   0.71040562        0.075    1.4187289        1e-10 1.5786792e-11    6.3344093     2.449038    31.520363 0.0030386087  -0.16800329 -0.017040344   0.19994184   -2.0923598     2.356909 
 3519000    4.0201423     1.274733    2.7454093  -0.24075589   0.84987028   0.99772075    0.7476377   -1.2298232            1  -0.15958292  -0.36698594  -0.46566859   0.35390577  0.014882432 -0.069220657  0.036741671  -0.31380217  -0.30200259    0.7159186        0.075     1.415129        1e-10 1.5909302e-11    6.2856308    2.4464542    31.520363 0.0013997529  -0.20395801 -0.0045148374   0.19808041    1.0443729    -1.024981 
 3520000    4.0079453    1.2878419    2.7201034  -0.23250741   0.85861005    1.0250344   0.74352498   -1.2298232            1  -0.19538185  -0.43140948  -0.44001092   0.28527484 -0.003096596  0.068756828 -0.026039559  -0.34875275  -0.34170041   0.71845506        0.075    1.4230561        1e-10 1.5965668e-11    6.2634398    2.4353008    31.520363  0.015942521  -0.17379708 -0.00023737359   0.22493021  0.015849086    2.8588419 
 3521000    4.0192547    1.2840487     2.735206  -0.23084301    0.8560811   0.99962689   0.75682799   -1.2298232            1  -0.10534649  -0.36925913  -0.36416096   0.41738063 -0.016117554  0.013160681  0.025165826  -0.26146147  -0.24803825   0.71443323        0.075    1.4216814        1e-10 1.5876294e-11    6.2986992    2.4441094    31.520363 -0.0027178881  -0.20029283 -0.0064782694   0.19717824   0.82897779     3.200217 
 3522000    4.0245212    1.2871701    2.7373511  -0.22732627   0.85816215    1.0079287    0.7546044   -1.2298232            1  -0.19766742  -0.45264181   -0.4423547   0.30199425 0.0044954689 -0.025592365 -0.0048976389  -0.35332373  -0.34154423   0.71493708        0.075    1.4364094        1e-10 1.5887491e-11    6.2942602    2.4469467    31.520363 -0.0031486518  -0.20035387 -0.0085444822   0.20256196   0.45813594    0.6703705 
 3523000    4.0157368    1.2783848     2.737352  -0.23350265   0.85230495   0.99764098   0.75181261   -1.2298232            1  -0.19982543  -0.43803114  -0.43313808   0.27169294  0.021599226 -0.061622177  0.028767697  -0.35490586  -0.34223371   0.71567038        0.075    1.4001043        1e-10 1.5903786e-11    6.2878109    2.4371138    31.520363 -0.0069150827  -0.17461819 0.0050998538     0.190419   0.41171551  -0.90375091 
 3524000    4.0257195    1.2791827    2.7465368  -0.23311338   0.85283692   0.99411973   0.75514951   -1.2298232            1  -0.17701049  -0.43752245  -0.40944817   0.31593916 0.0030253938 -0.082579313 -0.043971007  -0.33277925  -0.31891613   0.71713145        0.075    1.3944453        1e-10 1.5936255e-11    6.2750002    2.4478876    31.520363 -0.0010957232  -0.19982308 -0.0023422375   0.21705309   0.30853772    1.0515923 
 3525000    4.0113923    1.2736748    2.7377175  -0.22714141   0.84916478   0.98925632   0.75230139   -1.2298232            1  -0.20125058  -0.45962176   -0.4694399   0.32530992  0.011875419   0.02609951 -0.019102589  -0.35643184    -0.342462    0.7133178        0.075    1.3962631        1e-10 1.5851507e-11    6.3085486     2.442746    31.520363 0.0097120405  -0.17828844 -0.0023857601    0.2025519  -0.14143113  -0.95948849 
 3526000    4.0275753    1.2809797    2.7465956  -0.23469261   0.85403499    1.0001671   0.75299189   -1.2298232            1  -0.17705054  -0.40374071  -0.43014613   0.30273521 -0.0011746392  0.021614761  0.054263585  -0.33237424  -0.31981943   0.71860921        0.075    1.4000924        1e-10 1.5969094e-11    6.2620962    2.4479307    31.520363 -0.0034823931  -0.19809364 0.0019493863   0.18109223   0.26959164    2.4912692 
 3527000    4.0451542    1.2978919    2.7472624  -0.23356208   0.86531042    1.0166092   0.76069303   -1.2298232            1 -0.089756537  -0.37495345  -0.33462846   0.44031231 0.00017423086  0.074664697 -0.029146539  -0.24666878  -0.23487244   0.71872352        0.075     1.412176        1e-10 1.5971634e-11    6.2611002     2.450389    31.520363 0.0042248913  -0.18818401 -0.010327129   0.21450896   -1.5167215  -0.73987977 
 3528000    4.0178995     1.276308    2.7415916  -0.23359435    0.8509203    1.0066912   0.74320677   -1.2298232            1  -0.24721493  -0.49444872  -0.47436774   0.22717166  0.017760999 0.0010609021  0.061270837  -0.40052019  -0.39091509   0.71544555        0.075    1.4170247        1e-10 1.589879e-11    6.2897869     2.437006    31.520363  0.005805284  -0.19202862 -0.00024122546   0.21256137  -0.67736849    -1.321514 
 3529000    4.0080403    1.2696585    2.7383818  -0.22606194   0.84648708     0.994832     0.743912   -1.2298232            1  -0.11491455  -0.36861766  -0.36756383   0.39143783 -0.012436977   0.04687434  0.011758516  -0.26836529  -0.25692187   0.71696312        0.075     1.405235        1e-10 1.5932514e-11    6.2764734    2.4388041    31.520363 0.0011272512  -0.21172012 -0.014585529   0.19981221   -1.1850393    2.1787162 
 3530000    4.0026209    1.2735136    2.7291073  -0.23371254   0.84905729    0.9987255   0.74556672   -1.2298232            1  -0.11821184  -0.37886905  -0.34901491   0.37324843 0.0035286078  0.059032771 -0.002697447  -0.27200391  -0.26077494   0.71919812        0.075    1.3949888        1e-10 1.598218e-11    6.2569685     2.446642    31.520363 0.0076110495  -0.18504762 -0.0065113168   0.23836735   -1.8886268    0.5737623 
 3531000    4.0293997    1.2831915    2.7462082  -0.22773897    0.8555096    1.0060669   0.75140441   -1.2298232            1  -0.11537867  -0.36388175  -0.38089678   0.39864251 0.0086578951 -0.010956046  0.024470537  -0.27037491  -0.25898972    0.7225805        0.075    1.3806362        1e-10 1.6057344e-11    6.2276798    2.4571135    31.520363  0.009705343  -0.18539101 0.0090846996   0.22277696   -1.3692651    1.5896294 
 3532000    4.0275166    1.2802061    2.7473105   -0.2280774   0.85351922    1.0048765    0.7488602   -1.2298232            1  -0.16003073  -0.36050514  -0.41732098   0.29773393 -0.0071123582  0.035784072  0.028358618  -0.31450216  -0.30347185   0.71758962        0.075     1.395401        1e-10 1.5946436e-11    6.2709937    2.4475856    31.520363 0.0017422446  -0.18675719 2.179485e-06   0.18689537   -1.1569979   0.49828641 
 3533000    4.0456924    1.2871065    2.7585858  -0.22924298   0.85811977   0.99885874   0.76080921   -1.2298232            1   -0.1345683  -0.43548657  -0.37785171   0.40963338  0.014251252  -0.04731539  0.030085034  -0.29150451  -0.27715041   0.71310867        0.075    1.3877377        1e-10 1.5846859e-11    6.3103987    2.4383604    31.520363 0.0026233653  -0.19297305 -0.0052323859   0.19126497  0.012922686   0.89876322 
 3534000    4.0334961    1.2865525    2.7469435  -0.23398082   0.85775042    1.0084537   0.75354441   -1.2298232            1  -0.16600278  -0.40574404  -0.45599539   0.36373108 -0.00084836994  0.067212453 -0.016779053  -0.32144045  -0.30995453   0.71260656        0.075    1.3822023        1e-10 1.5835701e-11    6.3148451    2.4416702    31.520363 -0.0035411934  -0.20467153 -0.0075506804   0.18558581     -1.44763   0.30052206 
 3535000    4.0220459    1.2728604    2.7491855  -0.23230241   0.84862179    1.0072852   0.73890636   -1.2298232            1  -0.21056191  -0.45520044  -0.45708746   0.28060218 0.0090904948 -0.029795841 -0.044004216   -0.3629801  -0.35434686   0.71875752        0.075    1.3803515        1e-10 1.5972389e-11    6.2608041    2.4551181    31.520363 -0.0078974615  -0.21467874 0.00053655841   0.18438976  -0.14057468   0.70891171 
 3536000    4.0284913     1.287128    2.7413633  -0.23100936   0.85813409    1.0047277   0.75677202   -1.2298232            1  -0.19559529  -0.43338668   -0.4324089   0.27900972 0.0087091481  -0.15600252 -0.0064167275  -0.35169873  -0.33901517    0.7179697        0.075    1.3851931        1e-10 1.5954882e-11    6.2676739    2.4415932    31.520363 -0.0032410577  -0.18912899 -0.003176866   0.20190468    1.3950707    1.5977981 
 3537000    4.0330741    1.2757617    2.7573124  -0.22777676    0.8505561    1.0042433   0.74428451   -1.2298232            1  -0.20340561  -0.43383352  -0.43546367   0.25908036 -0.001910819  0.009181238 0.0044363175  -0.35693318  -0.34675634   0.71798305        0.075    1.3883043        1e-10 1.5955179e-11    6.2675574    2.4511934    31.520363 -0.0038902659  -0.17774533 -0.0022923094   0.20601072   -1.7192033   0.13613787 
 3538000    4.0338077    1.3015903    2.7322175  -0.23973296   0.86777613    1.0144989   0.76632563   -1.2298232            1  -0.21998554  -0.44375766  -0.42618231   0.20998335 -0.017300466 0.0053828502  0.042862679  -0.37805965  -0.36480021   0.71717479        0.075     1.376129        1e-10 1.5937218e-11     6.274621    2.4391591    31.520363 -0.010734367  -0.18372549 -0.0015650324   0.19520075  -0.40365307  -0.22289905 
 3539000    4.0290684    1.2767314    2.7523371  -0.22213224   0.85120262   0.99774417   0.74987594   -1.2298232            1 -0.067284288  -0.33876846  -0.32779629   0.46471189 0.0064259604 -0.017819059  0.021308805  -0.22196524   -0.2097073   0.71965157        0.075    1.3907024        1e-10 1.5992257e-11    6.2530261    2.4471331    31.520363 -0.0063183057  -0.18292085 0.0031934185   0.19238188   0.44194746   0.81714032 
 3540000    4.0379773    1.2801893     2.757788  -0.22258382   0.85350803   0.99913224   0.75281639   -1.2298232            1  -0.20328429   -0.4202308  -0.47003096   0.28040888 0.0083187456  0.016701825 -0.0043261945  -0.35857178  -0.34590545   0.71240628        0.075    1.4055537        1e-10 1.5831251e-11    6.3166204    2.4429341    31.520363 0.0032445801  -0.21626059 -0.012321947   0.22073146   0.35848593 -0.039778486 
 3541000    4.0348009    1.2770379    2.7577631  -0.23322443   0.85140694   0.99564145   0.75167677   -1.2298232            1  -0.15308927  -0.38936599  -0.40180635   0.33190454 -0.0041298379  0.073228475 -0.028102385  -0.30814168  -0.29521213   0.71498877        0.075    1.3985937        1e-10 1.5888639e-11    6.2938051    2.4570065    31.520363 -0.0067985219  -0.20849834 0.0042591281   0.18250618  -0.81004753   0.34958635 
 3542000     4.021605    1.2811248    2.7404802  -0.23685051   0.85413172    1.0134976   0.74393072   -1.2298232            1 -0.078450396  -0.32931165  -0.37410107   0.46806153 0.0078926863 -0.0043238504 -0.0094734007  -0.23190499  -0.22312214   0.71791708        0.075    1.4139643        1e-10 1.5953713e-11    6.2681333    2.4625979    31.520363 0.0081731537  -0.21012895 0.0026925916   0.19465538     1.537575   0.34260251 
 3543000    4.0145805    1.2744029    2.7401775  -0.22967441   0.84965022   0.99372224   0.75003234   -1.2298232            1  -0.18561819  -0.44601566  -0.42574639   0.31490748 0.0038557849  -0.10640481 -0.012628284   -0.3403314   -0.3274671    0.7167038        0.075    1.4163605        1e-10 1.5926751e-11    6.2787444    2.4371931    31.520363  0.012333962  -0.21057445 -0.016103242   0.18619471  -0.70419669    1.0682547 
 3544000    4.0272962    1.2745364    2.7527598  -0.22290976   0.84973918   0.99116587   0.75195191   -1.2298232            1 -0.026941065  -0.31086125  -0.31808626   0.54812432  0.013638579 -0.099698629 -0.033815938  -0.18205023  -0.16842506   0.71519406        0.075    1.4170111        1e-10 1.5893201e-11    6.2919985    2.4523041    31.520363 -0.003420506  -0.21898689 -0.0050701007   0.19855855    1.5680841  -0.14538761 
 3545000     4.013052    1.2782308    2.7348213  -0.22613238   0.85220226    0.9956885   0.75298999   -1.2298232            1  -0.14433873  -0.39715713  -0.46341772   0.42755864  0.019213891  0.010792597 -0.036042456  -0.29966203  -0.28646831   0.71923067        0.075    1.3916194        1e-10 1.5982904e-11    6.2566854      2.45507    31.520363 0.00088967698  -0.20716317 -0.0019127323   0.23385217   0.33889287   0.71899995 
 3546000    4.0352067    1.2811524    2.7540543  -0.22625955   0.85415012   0.99123319   0.75936911   -1.2298232            1  -0.21891964  -0.47575126  -0.46369946    0.2826918 -0.00025626747 -0.030156165 -0.033921847  -0.37555879  -0.36041325   0.71852171        0.075     1.407193        1e-10 1.5967149e-11    6.2628588    2.4591976    31.520363 -0.0028900768  -0.21532121 -0.0050796756   0.20268945    1.0136013    1.4349606 
 3547000    4.0050529    1.2698289    2.7352239  -0.23118185   0.84660072   0.99545709   0.74367171   -1.2298232            1 -0.093818751  -0.36041894  -0.34645254   0.42541522 0.0068905128 -0.036655896  0.026212732  -0.24721992   -0.2359153   0.72086583        0.075    1.3992118        1e-10 1.6019241e-11    6.2424932    2.4528197    31.520363 -0.0030691208   -0.1913258 -0.0023675666   0.19383028  -0.85091376     1.325798 
 3548000    3.9994729        1.277    2.7224729  -0.23596542   0.85138167   0.99729054   0.75049284   -1.2298232            1  -0.17506063  -0.42261598  -0.44627482    0.3437089 -0.0088802048 -0.049832324 -0.051272667  -0.32986883   -0.3174189   0.72058397        0.075    1.4124968        1e-10 1.6012977e-11    6.2449349    2.4499943    31.520363 -0.0051638839  -0.20559471 -0.0068607378   0.21025348  -0.37363983   0.14474151 
 3549000    4.0115856     1.277722    2.7338636  -0.23812875   0.85186307   0.99929054   0.74992339   -1.2298232            1  -0.11964414  -0.39570502  -0.37370592   0.41047852 0.0032587408 -0.038563842  0.040643133  -0.27433488  -0.26228789   0.71815701        0.075    1.4260064        1e-10 1.5959045e-11    6.2660392    2.4502926    31.520363 0.0068628663  -0.21635516 -0.0070000246   0.20510355    2.1986452    1.8849219 
 3550000    4.0046868    1.2710511    2.7336357  -0.23116234   0.84741551   0.99844295   0.74298417   -1.2298232            1  -0.16058606  -0.40925092  -0.40708204   0.33457478 -0.010309859 0.00086650026  0.038039377   -0.3138454  -0.30310882   0.71569371        0.075    1.4209514        1e-10 1.5904305e-11     6.287606    2.4549415    31.520363 0.0038426967  -0.20564561 0.0021995693   0.21219824    1.0437407    2.6499515 
 3551000    4.0249311    1.2906182    2.7343129  -0.23662082   0.86046103    1.0121188   0.75559477   -1.2298232            1  -0.20010488  -0.41303004  -0.47936681    0.2920822 -0.0037663386 -0.030526962  0.029465281  -0.35596549  -0.34457981   0.71512914        0.075    1.4149913        1e-10 1.5891759e-11    6.2925697    2.4522125    31.520363 -0.0041963688  -0.18534346 0.0034609761   0.19831366   0.56487378    1.6833561 
 3552000    4.0185833    1.2753168    2.7432664  -0.23431974   0.85025952     1.001773   0.74549213   -1.2298232            1  -0.14543168  -0.39515844  -0.44596994   0.40483334 -0.0036410167  0.026193191 0.0048098172  -0.29920835  -0.28842979   0.72191751        0.075    1.4199225        1e-10 1.6042611e-11    6.2333992    2.4728372    31.520363 0.0038849415  -0.20058173 0.0052106833   0.19500005   0.20404377    1.1295575 
 3553000    4.0273432    1.2708123    2.7565309  -0.23339979   0.84725631   0.98472297   0.75220919   -1.2298232            1  -0.14171827  -0.42173592  -0.37551347   0.37209458 0.0036943191  0.082180622  -0.05082978  -0.29688051  -0.28228258    0.7188386        0.075    1.4325569        1e-10 1.5974191e-11    6.2600979    2.4470715    31.520363 -0.0053007261  -0.18664584 -0.0030856739   0.21687004  -0.26691727    1.4731534 
 3554000    3.9957066    1.2687917    2.7269149   -0.2285469   0.84590921    1.0040055   0.73658601   -1.2298232            1  -0.22759948  -0.47367806  -0.46269038   0.25357001 0.0010277517   0.06771297 -0.067433283  -0.37953904  -0.37091626    0.7145245        0.075    1.4565401        1e-10 1.5878322e-11    6.2978946    2.4524894    31.520363 -0.002387142  -0.20699675 -0.0071727513    0.2069642   0.45523665    3.5288701 
 3555000    4.0148171     1.284519    2.7302982   -0.2325166   0.85639462    1.0064311   0.75264988   -1.2298232            1  -0.26373413  -0.54010451  -0.48310493   0.23200705 -0.0041879938 -0.046352914 -0.044473425  -0.41898727  -0.40739717   0.71740384        0.075    1.4424802        1e-10 1.5942308e-11    6.2726177    2.4401607    31.520363 -0.00099681539  -0.20248597 -0.0040175893   0.21062637   0.46293068    1.9771738 
 3556000    4.0047831    1.2729358    2.7318473  -0.22993381   0.84867206   0.99731248    0.7458927   -1.2298232            1  -0.13461817  -0.42056207  -0.40106034    0.4177679 -0.0045159069 -0.043550138  0.026142358  -0.28847747  -0.27697957   0.71843632        0.075    1.4222934        1e-10 1.5965252e-11    6.2636031    2.4473675    31.520363 0.0029671552  -0.18822268 0.0012283507   0.21266586  -0.67820626    1.8335099 
 3557000    3.9974975    1.2712422    2.7262553  -0.22706697   0.84754295   0.99540807   0.74530001   -1.2298232            1  -0.18167011  -0.40765924  -0.42822405   0.29087297 -0.029049651 -0.006232241 0.0017374406  -0.33540715  -0.32375966   0.71470117        0.075    1.4264805        1e-10 1.5882248e-11    6.2963378    2.4450397    31.520363  -0.01291005  -0.20070937 -0.0030422336   0.19221634  -0.71373272    3.6038854 
 3558000    3.9986361    1.2737346    2.7249015  -0.23224743   0.84920465    1.0010132   0.74423293   -1.2298232            1  -0.16072935  -0.42754003  -0.39114401     0.336496 0.0083774735 -0.023231463 -0.0033158164  -0.31424628  -0.30361901   0.71521942        0.075     1.405737        1e-10 1.5893765e-11    6.2917755    2.4471611    31.520363 -0.010622342  -0.19725432 0.0045161291    0.2002702  -0.59009204   0.81360714 
 3559000    4.0088681    1.2741055    2.7347626   -0.2297511   0.84945193   0.99510266   0.74874155   -1.2298232            1   -0.1565368  -0.37402844  -0.43908696   0.34350499 -0.0030619651 0.0057211834 -0.0081187123  -0.31098375  -0.29858276   0.71810266        0.075    1.3927719        1e-10 1.5957837e-11    6.2665135    2.4410713    31.520363 0.0046222904  -0.20080869 -0.0084983561   0.16846902  -0.51239831   0.83571483 
 3560000    4.0111617      1.26462    2.7465417  -0.22907579   0.84312789    1.0000154   0.73464091   -1.2298232            1  -0.11463653  -0.35400614  -0.41218726   0.42228381 -0.0019278474   0.10877712  0.013328788  -0.26617487  -0.25738375   0.72043701        0.075    1.4136898        1e-10 1.6009711e-11    6.2462088    2.4336978    31.520363 -0.0088919934  -0.18852026 -0.0020942483    0.1909165  0.035691995   0.81189648 
 3561000    4.0172616    1.2750984    2.7421633  -0.22999617   0.85011386   0.99512797   0.74984408   -1.2298232            1  -0.18150189  -0.42363365  -0.45320674   0.33233471 0.0081906051   0.10206593 -0.045138734  -0.33617627  -0.32355146   0.71881492        0.075    1.3979917        1e-10 1.5973665e-11    6.2603042    2.4522944    31.520363 0.0010258121  -0.21343465 -0.0096736457    0.2011127    -1.588953    -1.824273 
 3562000    4.0389804     1.287875    2.7511054  -0.22997563   0.85863212    1.0049288   0.75747565   -1.2298232            1  -0.18735024  -0.43829103  -0.46156037   0.33780067 0.0021923393  0.083231969 -0.022150937  -0.34359882  -0.33079882   0.71271899        0.075     1.411559        1e-10  1.58382e-11    6.3138489    2.4382025    31.520363 0.0061339157  -0.20027704 -0.0022947908   0.20626862  -0.22302807    2.5232509 
 3563000    4.0267132     1.283857    2.7428561  -0.22890962   0.85595331    1.0073544   0.75126425   -1.2298232            1  -0.16442378  -0.42190915  -0.43617936   0.36481716 0.0051596822 -0.0024979886 -0.065493226  -0.31939111  -0.30821861   0.71895263        0.075    1.4114109        1e-10 1.5976725e-11     6.259105    2.4566292    31.520363 0.0086796117  -0.20949193  0.001607495   0.19515158  -0.89370799    1.8818959 
 3564000    4.0313612    1.2838671    2.7474941  -0.23311854   0.85596002    1.0057969   0.75235341   -1.2298232            1  -0.10216132  -0.36651211  -0.38578451   0.44581266 -0.017982132  0.055421526 0.0094176712  -0.25735331  -0.24573382   0.71852585        0.075    1.4156346        1e-10 1.5967241e-11    6.2628227    2.4519481    31.520363 -0.0039891005  -0.17854055 -0.0011267519    0.2132442  -0.20782673  -0.60529138 
 3565000    4.0359003     1.273094    2.7628063  -0.22857145   0.84877754   0.99915244   0.74479792   -1.2298232            1  -0.13028565  -0.38590773  -0.37956044   0.37461123 0.0064260894 -0.065784972 -0.034374677  -0.28391913  -0.27290969   0.71410507        0.075    1.4115074        1e-10 1.5869002e-11    6.3015937    2.4487516    31.520363 -0.0036852289  -0.18432407 -0.0059649126   0.19106298   0.16928604   -1.8928686 
 3566000     4.038737    1.2869214    2.7518156  -0.22883043   0.85799633    1.0107324   0.75238365   -1.2298232            1  -0.12774888  -0.37507003  -0.36884551   0.36066889  0.003673731 0.0080349843 -0.0022521437  -0.28294711   -0.2720259   0.71877551        0.075    1.4201209        1e-10 1.5972789e-11    6.2606473    2.4393006    31.520363 -0.0029815123  -0.22290484 -0.0090953185   0.19958424  -0.62583151    1.1121659 
 3567000    4.0337798    1.2890836    2.7446962  -0.23378439   0.85943787    1.0292699   0.74199466   -1.2298232            1  -0.20026273   -0.4544937  -0.45890584   0.31261134 -0.0046120259  0.074338494  0.013214579  -0.35331797   -0.3471859   0.71795691        0.075     1.417427        1e-10 1.5954598e-11    6.2677856    2.4405656    31.520363 -0.012870287  -0.19221451 -0.0043121892   0.19200304   -1.2418207   -1.1548639 
 3568000    4.0378521    1.2922366    2.7456155  -0.23201947   0.86154004    1.0102137   0.75873891   -1.2298232            1  -0.14759134  -0.37361781  -0.39353677   0.32438056  0.004608086 -0.020443064 -0.015975877   -0.3041005  -0.29179432   0.71392786        0.075    1.4132201        1e-10 1.5865064e-11    6.3031579    2.4488577    31.520363 -0.00068178819  -0.21489088 2.2437634e-06    0.1876819    2.5829198    2.1171812 
 3569000    4.0342725    1.2905771    2.7436953  -0.23789217   0.86043364     1.003469   0.76153416   -1.2298232            1  -0.26439797  -0.49251126   -0.5084494   0.20776674 0.0045663762 -0.0013630927  0.023287864  -0.42148372  -0.40763818   0.71159409        0.075    1.4265275        1e-10 1.5813202e-11    6.3238299    2.4433035    31.520363 0.0010609856  -0.21733386 -0.00055647056   0.18127336   0.79791101  -0.56190576 
 3570000    4.0385846    1.2864748    2.7521098  -0.22226214   0.85769856    1.0032741     0.757041   -1.2298232            1  -0.14771765  -0.39682916  -0.39086227   0.34453848 0.0035386406  -0.12003647 -0.032327011  -0.30387657  -0.29093004   0.71571895        0.075    1.4365813        1e-10 1.5904866e-11    6.2873841    2.4525815    31.520363  0.006322881  -0.19662172 -0.00012150677   0.19912583    1.9855772   -1.6398455 
 3571000    4.0341261    1.2917032    2.7424229  -0.22761237    0.8611844    1.0242763   0.74840566   -1.2298232            1  -0.22170456  -0.44681166  -0.44856432   0.23026228 -0.0086270264 -0.0085684125 -0.0009190541  -0.37608223   -0.3679149   0.72039682        0.075     1.441857        1e-10 1.6008818e-11    6.2465573    2.4452638    31.520363 0.0010298795  -0.20142148 -0.0037731472   0.23473397  -0.27616724   0.17570812 
 3572000     4.029073     1.278092     2.750981  -0.22706695   0.85210971   0.99068614   0.75629508   -1.2298232            1  -0.23405136  -0.45291829  -0.48217912   0.23294333  -0.01877249 -0.046770423  0.021032451  -0.39005642  -0.37546688   0.71313518        0.075    1.4258607        1e-10 1.5847449e-11    6.3101641    2.4370211    31.520363 0.0041802766  -0.20844068 -0.0047697077   0.22140071   0.18475122   -1.6271041 
 3573000    4.0283284    1.2880093    2.7403191   -0.2251967   0.85872164    1.0174108   0.74898943   -1.2298232            1  -0.19274692  -0.43220037  -0.43780761   0.29176721 0.00010290486 -0.00090177965  0.017935366  -0.34724501  -0.33797725   0.70523769        0.075    1.4287857        1e-10 1.5671949e-11    6.3808274    2.4366173    31.520363 -0.0044963928  -0.18037011 0.0034904965   0.18557693    1.1678899   0.70093026 
 3574000    4.0209425    1.2731157    2.7478269   -0.2333132     0.848792   0.99684555   0.74641877   -1.2298232            1 -0.098817892  -0.36453882  -0.36451629   0.43260143 -0.015839242 -0.001812692  0.034823764  -0.25278571  -0.24111264   0.71569681        0.075    1.4261352        1e-10 1.5904373e-11    6.2875787    2.4517476    31.520363 -0.00084917473  -0.18353457 -0.0039295583   0.20124458   -1.3515676    2.4121446 
 3575000    4.0127008    1.2793676    2.7333332  -0.23419978   0.85296017    1.0161101   0.74014045   -1.2298232            1  -0.14303814  -0.41629473  -0.37050441   0.35768472 -0.012634096 -0.015497674 -0.021243717   -0.2957109  -0.28808281   0.72325928        0.075    1.4373574        1e-10 1.6072429e-11    6.2218351    2.4415953    31.520363 -0.00036652426  -0.21642525 0.0052757549   0.20612393   -1.7726602  -0.08093259 
 3576000    4.0174554    1.2856449    2.7318105  -0.22599525   0.85714527    1.0016885   0.75720206   -1.2298232            1    -0.138571  -0.37404098  -0.37206084   0.33038883 0.0043686438  0.086167939 -0.014523601  -0.29476314  -0.28155704   0.71875953        0.075    1.4276877        1e-10 1.5972434e-11    6.2607866    2.4596459    31.520363 -0.016596492  -0.18434956 0.0020292408   0.17181132  -0.45145485   0.79156214 
 3577000     4.021376    1.2645706    2.7568054  -0.22733445   0.84309493   0.98770704   0.74310268   -1.2298232            1  -0.11983352  -0.36133555   -0.3934582    0.3952932 -0.0078563467  0.032819036 -0.014419652  -0.27311731  -0.26082378   0.71069431        0.075    1.4505451        1e-10 1.5793207e-11    6.3318363    2.4692835    31.520363 0.0039612339  -0.19776369 -0.0044515842   0.19071795  -0.85727941    2.2707534 
 3578000    4.0228632    1.2793842     2.743479   -0.2322398   0.85297126    0.9990745   0.75194807   -1.2298232            1  -0.08709791  -0.35079684  -0.32699026   0.41649337 -0.0020083917  0.087617881 -0.010521446  -0.24220629  -0.22971082   0.71549578        0.075    1.4427358        1e-10 1.5899906e-11    6.2893453    2.4474595    31.520363 -0.0039882771  -0.15239001 -0.0043194004   0.19733747   -1.1469456  -0.23786796 
 3579000     4.032188    1.2857257    2.7464623  -0.23533805   0.85719916     1.007526   0.75325358   -1.2298232            1  -0.11497561  -0.39888599  -0.38159679   0.43555595 -0.0020189024  0.051714473  0.019094172  -0.27035328  -0.25879494   0.72466232        0.075    1.4372091        1e-10 1.6103607e-11    6.2097889    2.4420703    31.520363  -0.01366759  -0.21694334 0.0019315853    0.2021429   -1.6328895    1.7528537 
 3580000    4.0123841    1.2750577    2.7373264  -0.23329453   0.85008674    0.9999503   0.74646109   -1.2298232            1 -0.069271802   -0.3593577  -0.33991259   0.49145488 -7.5044262e-06   0.01269975  0.016633061  -0.22324835  -0.21200973   0.72306371        0.075    1.4352439        1e-10 1.6068082e-11     6.223518    2.4474287    31.520363 0.0033736675  -0.20658714 0.0048072219    0.2097532    1.3696894   0.14143091 
 3581000     4.017789      1.27571     2.742079  -0.23064721   0.85052163   0.99844412   0.74823926   -1.2298232            1   -0.1461543  -0.41737579  -0.40544258   0.38435547 0.00096629005  -0.02367285 -0.024259989  -0.30049764  -0.28867723   0.71309806        0.075    1.4479994        1e-10 1.5846623e-11    6.3104926    2.4392151    31.520363 -0.0025985953   -0.1930875  0.014653355   0.18480494   0.75153867    2.6886546 
 3582000    4.0179468      1.28182    2.7361268  -0.23448594   0.85459522    1.0037225   0.75147954   -1.2298232            1  -0.21656484  -0.43470773    -0.454007   0.23902022 -0.0010920664 -0.018086456 0.0033010815  -0.37157657  -0.35984123   0.71752652        0.075    1.4637028        1e-10 1.5945034e-11    6.2715452    2.4493867    31.520363 -0.0016409094  -0.19009466 0.0066737262   0.20502558   0.10970606 -0.0038432649 
 3583000    4.0147674    1.2738353     2.740932  -0.23066822   0.84927181    1.0006224   0.74461702   -1.2298232            1  -0.15836034  -0.39205825   -0.4267761   0.34375333  0.019827903 -0.081912303 0.0011244736   -0.3119565  -0.30119421   0.71623308        0.075    1.4524272        1e-10 1.5916291e-11    6.2828709    2.4402845    31.520363 -0.0084780301  -0.20671591 0.0052092637   0.18373647    1.1111331 -0.031139736 
 3584000    4.0248307    1.2804404    2.7443903  -0.23318799   0.85367543     1.004547   0.74935259   -1.2298232            1 -0.059859102  -0.33722078  -0.32182616   0.47946963 -0.015555353 -0.066626502  0.030173086   -0.2144321  -0.20325318   0.71471956        0.075     1.464599        1e-10 1.5882657e-11    6.2961758     2.437797    31.520363 0.0024551583  -0.18769823 -0.0054966821   0.19086181    0.1773666    1.7737327 
 3585000    4.0291531    1.2918616    2.7372915   -0.2331394      0.86129    1.0114315    0.7574731   -1.2298232            1  -0.18355315  -0.42493249  -0.40597269   0.28024574 -0.0040043639 -0.089018974 0.0042977177   -0.3398012  -0.32792996   0.71591118        0.075    1.4641456        1e-10 1.5909137e-11     6.285696    2.4392789    31.520363 -0.0015953567   -0.2008688 -0.0017304169   0.19513306  -0.37955663  -0.38700399 
 3586000    4.0352168    1.2881109    2.7471059  -0.23341167   0.85878938    1.0011196   0.76037768   -1.2298232            1  -0.18942834  -0.42125676  -0.43639469   0.28936643 -0.0059608108 -0.025268242  0.025137505  -0.34627554  -0.33233319   0.71914043        0.075     1.471334        1e-10 1.5980899e-11    6.2574704    2.4472094    31.520363 -0.0013597914  -0.21401944 -0.0049045207   0.18225834  -0.24416205   0.36292806 
 3587000    4.0378643    1.2798803    2.7579839  -0.22143759   0.85330202   0.99943717   0.75225678   -1.2298232            1   -0.1162581   -0.3655833  -0.36030794   0.37711695 -0.0018526937 -0.020694681  0.014890547  -0.27143015  -0.25892278   0.71464391        0.075    1.4656659        1e-10 1.5880976e-11    6.2968423    2.4445231    31.520363 -0.0020385467   -0.1989336 -0.00026875466   0.19894796   0.74969395    2.1250669 
 3588000    4.0271783    1.2821403    2.7450379  -0.22619458   0.85480878   0.99597177   0.75720448   -1.2298232            1  -0.11799084  -0.38518219  -0.38211388   0.41332355 -0.0054592861 -0.071912125 0.0053442016  -0.27418349  -0.26016086    0.7126871        0.075     1.456558        1e-10 1.5837491e-11    6.3141314    2.4528265    31.520363 0.0023707012  -0.21733261 -0.0020293513   0.19615437   0.23541486    1.8102619 
 3589000    4.0079325    1.2758436    2.7320888  -0.22699014   0.85061074     1.004632   0.74410797   -1.2298232            1  -0.11266132  -0.37567472  -0.37628444   0.41397519 -0.014428515 -0.045266905 0.0044690894  -0.26615248  -0.25606754   0.71692332        0.075    1.4457414        1e-10 1.5931629e-11    6.2768219    2.4422328    31.520363 0.0013387129  -0.17640014 -0.014751873   0.22728194  -0.58552731    1.7484676 
 3590000    4.0140622    1.2761815    2.7378808  -0.23415174   0.85083597    1.0017944   0.74645271   -1.2298232            1  -0.20120423   -0.4784217  -0.44246193   0.31727094 0.0055101777 -0.094590428  0.022859659  -0.35517905   -0.3442054   0.71627126        0.075    1.4488954        1e-10 1.5917139e-11    6.2825361    2.4434022    31.520363 0.0042250393  -0.20215585 0.00047097239   0.18957795    2.3413083   -1.7281292 
 3591000    4.0178904    1.2764707    2.7414197  -0.23235346   0.85102882   0.99938347   0.74844744   -1.2298232            1  -0.21100976  -0.46049335  -0.46834798   0.29581204    0.0192353 -0.056853295 0.0063820791  -0.36539605  -0.35366678    0.7159008        0.075    1.4625099        1e-10 1.5908907e-11    6.2857871     2.448045    31.520363 0.0024769689  -0.19683536 -0.012696824   0.18672925  -0.66773927   0.74182846 
 3592000    4.0322188    1.2826087    2.7496101  -0.22863641   0.85512104   0.99614586   0.75761238   -1.2298232            1  -0.16999208  -0.41431482  -0.42574525   0.33008383 -0.0078265764 -0.056795029  0.003873207  -0.32626886  -0.31218694    0.7173112        0.075    1.4768174        1e-10 1.5940249e-11    6.2734278    2.4544975    31.520363 -0.0037798106   -0.1922135 -0.0040982949   0.18262024    1.8023009    1.3450718 
 3593000    4.0074976    1.2595753    2.7479223  -0.23545134   0.83976458   0.99595367   0.73176058   -1.2298232            1  -0.19271755  -0.43540531  -0.46401513    0.3212678 0.0052109667 -0.0098337568  0.017421475  -0.34366174  -0.33488498    0.7166023        0.075    1.4857057        1e-10 1.5924496e-11    6.2796338    2.4432585    31.520363 -0.0017982997  -0.22031623 0.00099638473   0.20279302   -0.5024859  -0.63893075 
 3594000    4.0146465    1.2852945     2.729352  -0.23220689   0.85691168    1.0102651   0.75087164   -1.2298232            1  -0.22911733  -0.46221193  -0.46647045   0.24133039  0.007985548   0.12327693  0.016870619  -0.38400367  -0.37332765   0.71610434        0.075    1.4931095        1e-10 1.591343e-11    6.2840004    2.4455514    31.520363 -0.009402581  -0.21083258 -0.013697631   0.22054156   -1.0330657    -1.155163 
 3595000    4.0267772    1.2878601    2.7389171  -0.22693656   0.85862214     1.016659   0.74934128   -1.2298232            1 -0.091824094  -0.35654099  -0.35396468   0.43503338 -0.0053526871    0.1307095 -0.033111669  -0.24639475  -0.23694711   0.71744645        0.075    1.4930678        1e-10 1.5943254e-11    6.2722452    2.4464944    31.520363 -0.00065337641  -0.19885468 -0.0068923657   0.23049557   0.27232005     1.397819 
 3596000    4.0305633    1.2809601    2.7496032  -0.22629588    0.8540219    1.0111524   0.74536782   -1.2298232            1  -0.12214284   -0.3853108  -0.38772281    0.4066051 -0.010031182  0.057797583  0.024960315  -0.27589387  -0.26647981   0.71515727        0.075    1.4715871        1e-10 1.5892384e-11    6.2923222    2.4361879    31.520363 -0.0062905306  -0.19427335 0.0018354719   0.18816168  -0.89928676   0.98596432 
 3597000    4.0517807    1.2883633    2.7634174  -0.23205868   0.85895765    1.0107381   0.75400632   -1.2298232            1  -0.21073931  -0.45978534  -0.43515456   0.26272197  0.016029077  0.048310064   -0.0119656  -0.36627225  -0.35501714   0.71298635        0.075    1.4913647        1e-10 1.5844141e-11    6.3114813    2.4422432    31.520363 -0.00099956298  -0.20980812 -0.00051895447   0.18151968  -0.48567235  -0.81778181 
 3598000    4.0266935    1.2779806     2.748713  -0.22648927   0.85203544   0.99775063    0.7512807   -1.2298232            1  -0.24733896  -0.47610894  -0.50486631   0.23895836 0.0030962886   0.10890963  0.011092753  -0.40230968   -0.3897629   0.71600698        0.075    1.4973906        1e-10 1.5911266e-11    6.2848549    2.4494806    31.520363 -0.0071177462   -0.1876286 -0.00069107639   0.21751715   -1.2705209 -0.058704431 
 3599000    4.0261343    1.2855938    2.7405404  -0.23180328   0.85711124    1.0126961   0.74952706   -1.2298232            1  -0.30205636  -0.53991768  -0.54062149   0.17437009 0.0073286167 -0.0052160515 -0.012436427  -0.45666535  -0.44661369   0.72261644        0.075    1.4968216        1e-10 1.6058143e-11    6.2273701    2.4614465    31.520363 -0.012124594  -0.17691069 -0.0074085283   0.20158239  -0.28664635  0.084802594 
 3600000    4.0394739    1.2915863    2.7478877  -0.23319062   0.86110642    1.0221051   0.74977622   -1.2298232            1  -0.11582436  -0.38098391  -0.37090818   0.40441902 -0.0075961455  -0.07634945 -0.0081136239  -0.27048474  -0.26172477   0.71329785        0.075    1.4675029        1e-10 1.5851063e-11     6.308725    2.4383424    31.520363 -0.0037992499  -0.19702454 -0.00036442061    0.2089364   0.36768224   0.34928826 
 3601000    4.0128625    1.2769914    2.7358711  -0.23080637   0.85137594    1.0125509    0.7399228   -1.2298232            1  -0.12009449  -0.35942261  -0.38260018   0.38173932 -0.0060425807 -0.072608714 -0.00031440232  -0.27272235  -0.26463109   0.70809949        0.075    1.4850771        1e-10 1.5735544e-11    6.3550392    2.4465717    31.520363 -0.0068365105  -0.18990518 -0.0020385253    0.1748371   0.44702906    3.0468172 
 3602000    4.0232424    1.2685362    2.7547062  -0.22125855   0.84573884   0.98808493   0.74731494   -1.2298232            1  -0.18598096  -0.43767013  -0.42216104   0.30188829  0.015892993  0.029649891 -0.034556839  -0.34013364  -0.32702517   0.70744604        0.075    1.4641793        1e-10 1.5721023e-11    6.3609092    2.4473152    31.520363 -0.018277695  -0.21483024 -0.0059725584   0.19739832   0.39724414    1.7138771 
 3603000    4.0394919    1.2818974    2.7575945  -0.22604477    0.8546468    1.0082894   0.74840646   -1.2298232            1  -0.27538025   -0.5089178  -0.50702615   0.18980321 -0.0034003225 0.0025826853 -0.026166678  -0.42975808  -0.41930854   0.71968454        0.075    1.4869659        1e-10 1.599299e-11    6.2527395    2.4485858    31.520363 0.0094459309  -0.21925036 -0.0034637861   0.18569984  -0.44570407   -1.3922682 
 3604000    4.0411165    1.2870565    2.7540599  -0.23086809   0.85808644    1.0180186   0.74749396   -1.2298232            1  -0.29399404  -0.53403142  -0.49868224   0.15073155 -0.0024687858 -0.016642904 -0.019898704  -0.44818364  -0.43931112   0.72442768        0.075    1.4853254        1e-10 1.6098393e-11    6.2118002    2.4434894    31.520363 -0.010544599  -0.21092467  -0.01903912     0.208512   -0.7380258   -1.4851634 
 3605000    4.0550234    1.2816907    2.7733327   -0.2275194     0.854509    1.0025561   0.75214076   -1.2298232            1  -0.15404582  -0.42431323  -0.39883408   0.36100985 0.0010438308  0.075477075  -0.04365177  -0.30919394  -0.29715572   0.71042312        0.075    1.4903712        1e-10 1.5787181e-11    6.3342533    2.4435359    31.520363  0.002402629   -0.1968804 -0.0017269451   0.17516625   -2.2791395    1.4647995 
 3606000     4.045413    1.2954176    2.7499954  -0.22902108   0.86366078    1.0137564   0.75987583   -1.2298232            1  -0.20477158  -0.44979545  -0.44690515   0.28238586 0.0086275047  0.015294496 -0.00066963532  -0.36151526  -0.34948026   0.70553721        0.075    1.4742002        1e-10 1.5678605e-11    6.3781186    2.4421726    31.520363  -0.01367866  -0.18824342 -0.012326074   0.19687869  0.042514703  -0.76052212 
 3607000    4.0411578    1.2916933    2.7494645  -0.22842639   0.86117778    1.0160072   0.75411677   -1.2298232            1  -0.14018319  -0.39799745  -0.40724394   0.38469183  0.013314199 -0.027043366  0.062679643  -0.29573891  -0.28521316   0.71577799        0.075    1.4887558        1e-10 1.5906177e-11    6.2868656    2.4520353    31.520363 -0.012617178  -0.19901604 0.0011962645   0.19634474   0.33594416    1.3485585 
 3608000    4.0508044    1.2983481    2.7524564  -0.23252355   0.86561455    1.0244185    0.7558035   -1.2298232            1  -0.11244668  -0.37587953  -0.38805917   0.42659865 -0.011052977 -0.068675378 -0.041409851  -0.26835034  -0.25867733   0.72093538        0.075    1.4905077        1e-10 1.6020786e-11    6.2418909    2.4519737    31.520363 -0.0071050576  -0.19644422 0.00072129057    0.2004422    2.3173966   0.22405568 
 3609000    4.0381237    1.2862855    2.7518382  -0.23598816   0.85757237    1.0096254   0.75243226   -1.2298232            1   -0.1910247  -0.46116727  -0.43770892   0.32580209 -0.0030780389 -0.073470687  0.040078513  -0.34623295  -0.33514371   0.71743283        0.075    1.4908001        1e-10 1.5942952e-11    6.2723642    2.4406549    31.520363 -0.0073213047  -0.21449261 0.0034694057   0.18340459    1.7245723    1.8750209 
 3610000    4.0332565    1.2925159    2.7407406  -0.23242122   0.86172624    1.0105076   0.75885059   -1.2298232            1  -0.17581499  -0.43287278  -0.42762857   0.33305637 -0.0045423785 -0.065587177   0.03275065  -0.33234719  -0.32005993   0.71133716        0.075    1.5013405        1e-10 1.5807493e-11     6.326114    2.4451457    31.520363 -0.0064552978  -0.21038115 -0.00064065756   0.20513334    1.3735677    0.5863969 
 3611000    4.0186304    1.2779985    2.7406319  -0.22885505   0.85204739    1.0117352   0.74162346   -1.2298232            1    -0.198743  -0.43909581  -0.47742607   0.32029288 -0.0021260896 -0.064028236 -7.9676267e-05  -0.35172167  -0.34316316   0.71227748        0.075    1.4887905        1e-10 1.5828388e-11    6.3177626    2.4468278    31.520363 0.0041380081   -0.2125697 -0.003371884   0.18705499  0.077252666    1.1340712 
 3612000     4.046492    1.2828632    2.7636288  -0.23148612   0.85529072    1.0056401   0.75132936   -1.2298232            1  -0.14800527  -0.41580808  -0.43450955   0.40630182 -0.0049901457  0.012636231  0.036217039  -0.30298602   -0.2915554   0.71968899        0.075    1.4782887        1e-10 1.5993089e-11    6.2527009    2.4403418    31.520363 -0.001184133   -0.1952461 -0.0034306136   0.19589738   0.79571625    3.0672804 
 3613000    4.0395366    1.2858422    2.7536944  -0.22570541   0.85727682    1.0100772   0.75161953   -1.2298232            1  -0.18752414  -0.43981247  -0.42643295     0.303673   0.01297438 -0.051695998   0.01128978  -0.34256475  -0.33170764   0.71877746        0.075    1.4816306        1e-10 1.5972832e-11    6.2606304    2.4453953    31.520363 -0.0038951014  -0.18630652 -0.00065213371   0.19584857  -0.11954576   0.31293929 
 3614000    4.0164523    1.2691404    2.7473119  -0.22381196   0.84614167   0.99903091   0.74042183   -1.2298232            1  -0.19863547  -0.45964388  -0.45650401   0.32024148 0.0065166794   0.05443784  0.038516966  -0.35136627  -0.34124216   0.71460878        0.075    1.4870336        1e-10 1.5880195e-11    6.2971519    2.4511039    31.520363 0.0084250827  -0.19734637 -0.00074812379   0.22454965 -0.085208357    1.0672048 
 3615000    4.0222059    1.2754877    2.7467182  -0.23502786   0.85037343   0.99385565   0.75116376   -1.2298232            1  -0.21274588  -0.47620084  -0.41174421   0.24970741  0.005434299 -0.010311839 -0.043348821  -0.36769247  -0.35461383   0.71565669        0.075    1.4744387        1e-10 1.5903482e-11    6.2879312    2.4453146    31.520363 0.0028568759   -0.1860549 -0.0036455409   0.20846185   -1.3158619  -0.29895913 
 3616000     4.033818    1.2798619    2.7539561  -0.23470533   0.85328974    1.0109179    0.7442912   -1.2298232            1  -0.13260032  -0.39124649   -0.4232164   0.41666192 -0.0091512925 -0.0077116814 -0.021603939  -0.28612928  -0.27690383   0.72154385        0.075    1.4800106        1e-10 1.6034308e-11    6.2366272    2.4391296    31.520363 -0.0018437038  -0.19400202 0.0094297698   0.19009277   0.33311853    1.5149548 
 3617000    4.0331596    1.2806534    2.7525062  -0.22638391   0.85381746    1.0128016   0.74388063   -1.2298232            1   -0.2294841  -0.46613386  -0.46529633    0.2429779   0.01080486  0.044921189 4.1356569e-05  -0.38292836  -0.37405648   0.72448006        0.075    1.4742943        1e-10 1.6099557e-11    6.2113511    2.4525553    31.520363 -0.0082711848  -0.20236102  0.010306073   0.19456794   0.28774063   -1.0076869 
 3618000    4.0316717    1.2884977    2.7431739  -0.23101019   0.85904729    1.0076316   0.75630774   -1.2298232            1  -0.16376135  -0.43533149   -0.3944539   0.33850134 0.0097191725  0.018197085  0.041940119  -0.31976902  -0.30759575   0.71703602        0.075    1.4803034        1e-10 1.5934134e-11    6.2758353    2.4456652    31.520363 -0.0029469706  -0.21113906 -0.00012635975   0.21891368  -0.43197143    1.9986114 
 3619000    4.0387191    1.2881009    2.7506182  -0.23176826   0.85878272    1.0022636   0.75957482   -1.2298232            1  -0.17632478  -0.43071127  -0.43180284   0.33353977  0.012315609  0.001956936  0.010049251  -0.33300637  -0.31939292   0.71952674        0.075    1.4786927        1e-10 1.5989483e-11    6.2541108     2.452587    31.520363 -0.0074746545  -0.22131448 -0.0026496424   0.18909261  -0.48264043    1.1890028 
 3620000    4.0371585    1.2915039    2.7456545  -0.22979362   0.86105154    1.0031105   0.76282781   -1.2298232            1  -0.10629854  -0.34928729  -0.40442516   0.43481683 -0.0067583423  0.084046922  0.047624129  -0.26365114  -0.24948757   0.72073943        0.075    1.4782085        1e-10 1.6016432e-11    6.2435879    2.4557679    31.520363 -0.0030057788  -0.22485204 0.0081184601   0.20009805   -1.0686515   0.42342288 
 3621000    4.0157338     1.268286    2.7474478  -0.22699404   0.84557201   0.97374806   0.75695394   -1.2298232            1  -0.16505739  -0.43991347  -0.41985336   0.36459467 -0.0055237832  0.068392567 -0.011589794  -0.32119835  -0.30405508    0.7141973        0.075    1.4613547        1e-10 1.5871051e-11      6.30078    2.4580889    31.520363 -0.0024790184  -0.19303238 0.0031729176   0.22099066  -0.42664701    0.7565716 
 3622000    4.0240653    1.2702775    2.7537878  -0.22937975   0.84689978   0.99207722   0.74651667   -1.2298232            1  -0.10674171  -0.35615717  -0.34905452   0.38498657 0.0032112315 -0.012070503 0.0086870435  -0.26072972  -0.24835579   0.71244697        0.075    1.4692476        1e-10 1.5832155e-11    6.3162596    2.4407499    31.520363 5.405808e-05  -0.19111336 -0.0045533968    0.1934894   0.92012941    1.2214127 
 3623000    4.0139267    1.2852008     2.728726   -0.2287141   0.85684918    1.0129781   0.74888851   -1.2298232            1  -0.15120453  -0.39655414  -0.37774448   0.32068504 -0.010531447  0.075059312  0.019079818  -0.30568179   -0.2958021   0.72161388        0.075    1.4492417        1e-10 1.6035864e-11     6.236022    2.4423901    31.520363  0.002929181  -0.20321666 -0.0039286817   0.23133148   -1.2457805   -0.9488744 
 3624000    4.0196686    1.2794528    2.7402158   -0.2303899   0.85301701    1.0065072   0.74688199   -1.2298232            1 -0.041900054  -0.28951608   -0.3327505   0.49656642 0.0023304593 -0.079689008 -0.031505527  -0.19596342  -0.18557394   0.72208489        0.075     1.463599        1e-10 1.6046331e-11    6.2319543    2.4525582    31.520363 -0.007729142  -0.19547317 -0.012939036   0.22530642   0.95165688    1.3803171 
 3625000    4.0104806     1.276392    2.7340885  -0.22991136   0.85097637   0.99566298   0.75093331   -1.2298232            1  -0.09770886  -0.36948212  -0.34029176   0.41664731 -0.017240078   0.05092337 0.0012430459  -0.25260792   -0.2398348   0.71608972        0.075    1.4524297        1e-10 1.5913105e-11    6.2841288    2.4422088    31.520363 0.0022362395  -0.20865991 -0.0072179671   0.22617918   0.31820144 -0.077983286 
 3626000    4.0082344    1.2666134     2.741621  -0.23022309   0.84445691   0.99019265   0.74368722   -1.2298232            1  -0.13359582  -0.41809353  -0.39962501   0.41693108  0.015138933  0.050319655  0.060203183  -0.28700018  -0.27494089   0.71363785        0.075    1.4499933        1e-10 1.5858619e-11    6.3057194    2.4416546    31.520363 -0.0035716109  -0.18285731 0.0088741649   0.19322585  -0.10784214    3.4853016 
 3627000     4.011595     1.291321    2.7202739  -0.22929349    0.8609296     1.016175    0.7535807   -1.2298232            1  -0.10769028  -0.37969081   -0.3710395   0.42765946 -0.00077407316  0.030456722  0.010749224  -0.26313543  -0.25274421   0.71788437        0.075    1.4518288        1e-10 1.5952986e-11     6.268419    2.4388425    31.520363 0.0088036637  -0.20459279 -0.0017872712   0.22165953  -0.86234983   0.72321985 
 3628000    4.0105161    1.2808847    2.7296314  -0.23268726   0.85397167    1.0134578   0.74368742   -1.2298232            1  -0.26501318  -0.50201429  -0.51232002   0.21929477  0.009024234 0.0071256622 -0.015164752  -0.41841759  -0.40967925    0.7182206        0.075    1.4656408        1e-10 1.5960458e-11    6.2654844    2.4435149    31.520363 -0.001487048  -0.18104687 -0.0055385384   0.18407747  -0.65353868   -1.0586043 
 3629000    4.0283489    1.2799883    2.7483606    -0.227001   0.85337401   0.99678842   0.75421156   -1.2298232            1   -0.1178186  -0.38971367  -0.37215815   0.40841603 -0.0073880422 -0.073509362   0.02374444  -0.27339388  -0.26010519   0.71358918        0.075    1.4400172        1e-10 1.5857537e-11    6.3061494    2.4431545    31.520363 -0.00085792844  -0.18034956 0.0030816966   0.21134677   0.71602782    1.8928275 
 3630000      4.02464    1.2916196    2.7330204  -0.22987339   0.86112867     1.007426   0.75997198   -1.2298232            1   -0.1108715  -0.34492913  -0.41610705   0.42842169  0.002544519  0.045085224 -0.023776627  -0.26763501  -0.25467654   0.71590043        0.075    1.4444473        1e-10 1.5908898e-11    6.2857904    2.4399182    31.520363 -0.0052431574  -0.19282435 -0.0063255072   0.19932108 -0.025712705     2.048659 
 3631000    4.0288274    1.2828575    2.7459699  -0.23109391   0.85528692    1.0099512   0.74833964   -1.2298232            1  -0.23526796  -0.45248663  -0.48323426   0.22991702 -0.00028919795 -0.064361786  0.037365708  -0.38963201  -0.37943346   0.72209057        0.075    1.4451517        1e-10 1.6046457e-11    6.2319052    2.4651355    31.520363 -0.0040844921   -0.1946392 -0.009480475   0.19708457   0.32778351  -0.12815142 
 3632000    4.0186062    1.2825669    2.7360393  -0.23394709    0.8550932    1.0120946   0.74652856   -1.2298232            1  -0.16504681   -0.4119036  -0.40143084     0.318194 0.0092197688 0.0059045514 0.0043946204  -0.31903728  -0.30951828   0.72011356        0.075    1.4328906        1e-10 1.6002524e-11    6.2490144    2.4530298    31.520363 0.0016571263  -0.20557323 -0.013366661   0.19658249   0.90910479   0.99186474 
 3633000    4.0105406    1.2809872    2.7295533  -0.23390681      0.85404    0.9956799    0.7561056   -1.2298232            1  -0.17631397  -0.42179467  -0.45535164    0.3482044 -0.0011535249 -0.046420794 0.0028871243  -0.33227994  -0.31844232   0.71583808        0.075    1.4375373        1e-10 1.5907513e-11    6.2863378    2.4473009    31.520363 0.0012403726  -0.18987747 -0.014075257   0.22615252   0.82350229    1.7161858 
 3634000      4.01826    1.2688264    2.7494336  -0.23001526   0.84593231      1.00208   0.73795759   -1.2298232            1  -0.06698211  -0.31437219  -0.32652909   0.43995495 0.0091083952 0.0055088461  0.043280389  -0.21920459  -0.21002404   0.71290874        0.075    1.4536412        1e-10 1.5842416e-11    6.3121684    2.4457071    31.520363 -0.010403585  -0.18351211 -0.0068890191   0.18721653 -0.066397208  -0.58201448 
 3635000    4.0218339    1.2895842    2.7322497  -0.23178725   0.85977164    1.0203372   0.74874098   -1.2298232            1  -0.13744864  -0.39102672  -0.40389935   0.38258014 0.00030149506  0.031968474 -0.0086638641  -0.29189547  -0.28309671    0.7182444        0.075    1.4584811        1e-10 1.5960987e-11    6.2652768    2.4457548    31.520363 0.0012363676  -0.20550028 0.0063333219   0.22195064  -0.95199125    2.0382922 
 3636000    4.0492541    1.2905175    2.7587367  -0.23693284   0.86039386    1.0249941   0.74657125   -1.2298232            1  -0.23546529  -0.50061606  -0.45510845   0.24932865 0.0042312624 -0.027558013   0.02455694  -0.38946456  -0.38177809   0.72249538        0.075     1.463756        1e-10 1.6055453e-11    6.2284136    2.4408201    31.520363 -0.0042857886  -0.19895004 -0.0027822267    0.2152922  -0.46123208    1.0660042 
 3637000    4.0359327    1.2844702    2.7514625  -0.22624341   0.85636212    1.0121346   0.74864801   -1.2298232            1  -0.18178381  -0.43592866  -0.40362652   0.29420373 -0.00091472565 -0.090089514  0.041354223  -0.33621147    -0.326261   0.71700983        0.075    1.4514619        1e-10 1.5933552e-11    6.2760646    2.4458528    31.520363   0.01067407  -0.19761427 -0.0054709125   0.21104611    1.7835247 -0.011393838 
 3638000    4.0207766    1.2757191    2.7450574  -0.23094717   0.85052773    1.0033698   0.74484096   -1.2298232            1  -0.11232378   -0.3809226  -0.37394126   0.41789252  0.012594669 -0.012943992 -0.0053173061  -0.26596613  -0.25554982   0.71454326        0.075    1.4650844        1e-10 1.5878739e-11    6.2977293    2.4443763    31.520363 -0.007074852  -0.18827179 -0.0003344387   0.22775448  -0.28425299    2.1896202 
 3639000    4.0382272    1.2803395    2.7578876   -0.2327633   0.85360819    1.0088524   0.74625943   -1.2298232            1  -0.29025415  -0.53745514  -0.49531976   0.16201243 -0.0027009369 -0.0085094479 -0.0033895286   -0.4441891  -0.43426281   0.71390335        0.075    1.4792871        1e-10 1.5864519e-11    6.3033743    2.4492922    31.520363 -0.0050964884   -0.1970673 0.00023289538    0.1852697   0.64312846   0.78437427 
 3640000    4.0315307    1.2867428    2.7447879  -0.22952675   0.85787727     1.012853    0.7507147   -1.2298232            1 -0.070735488  -0.35263939  -0.33591067   0.47634359 0.0050109073 -0.041108501 0.0023024417  -0.22558945  -0.21531521   0.71812356        0.075    1.4689842        1e-10 1.5958301e-11    6.2663311    2.4438166    31.520363 -0.0018683957  -0.21668685 -0.0051052632   0.19058213    2.7223475    2.0923351 
 3641000     4.014643    1.2736889    2.7409541  -0.22702141   0.84917416    1.0085497   0.73896599   -1.2298232            1 -0.040110139  -0.29560238   -0.3273741   0.50264607 -0.013855745 -0.059609399 0.0067901675  -0.19254063   -0.1840756   0.71871211        0.075    1.4702633        1e-10 1.597138e-11    6.2611996    2.4326454    31.520363 -0.0047647837  -0.20430152 0.0096013672   0.19518012   -1.0045386   0.45750408 
 3642000    4.0165698    1.2697558    2.7468141  -0.23006791   0.84655194    1.0100535   0.73348831   -1.2298232            1  -0.26643108   -0.5169411  -0.50160922   0.21925709 0.0064337487  0.084176424 -0.035225216  -0.41773166  -0.41061119   0.71140963        0.075    1.4650376        1e-10 1.5809103e-11    6.3254696    2.4476952    31.520363 -0.0039146857  -0.16616271  0.002784983   0.18849368   -1.0314165   0.90355693 
 3643000    4.0181096    1.2785692    2.7395404  -0.22491867    0.8524279    1.0047464   0.74710363   -1.2298232            1  -0.18018111  -0.40174494   -0.4335519   0.29475351 0.0098248283  0.032462281  -0.01326019   -0.3342902  -0.32360366   0.71023682        0.075    1.4651472        1e-10 1.578304e-11    6.3359148    2.4545101    31.520363 -0.0065438425  -0.20130622 -0.0098920812   0.20974928    0.2322056   -0.4818952 
 3644000     4.047258    1.2851714    2.7620866  -0.22289174   0.85682959    1.0173984   0.74579641   -1.2298232            1  -0.16135208  -0.41261027  -0.42161404   0.35016807 -0.0041659229 -0.019466851  0.029293586  -0.31519152  -0.30658064   0.71757223        0.075    1.4562998        1e-10 1.594605e-11    6.2711457    2.4519708    31.520363 0.0076267619  -0.18542073  0.016360922   0.18770172   0.96532491    1.9010272 
 3645000    4.0388346    1.2924045    2.7464301  -0.22683951   0.86165194    1.0127721   0.75715786   -1.2298232            1  -0.16065768  -0.41769936  -0.41872755   0.35445386 0.00060399466 -0.024504886 0.0074951242  -0.31684071  -0.30522585   0.72156119        0.075    1.4642564        1e-10 1.6034693e-11    6.2364773    2.4513109    31.520363 -0.0014253216  -0.20619894 -0.0056839442   0.19575575      1.12438     2.166149 
 3646000    4.0220221     1.285785    2.7362371   -0.2365747   0.85723868    1.0076404    0.7532413   -1.2298232            1  -0.24736029  -0.46038497  -0.49072455   0.20902864 -0.014398557 0.0048786073 0.0084670661  -0.40273543  -0.39119595   0.71515223        0.075    1.4677269        1e-10 1.5892272e-11    6.2923666    2.4454036    31.520363 0.0037492163  -0.19087753 0.0017317624   0.20752449    1.7874838    1.2979334 
 3647000    4.0310873    1.2829087    2.7481786  -0.23346105   0.85532106    1.0063178   0.75091172   -1.2298232            1 -0.091189759  -0.37086359  -0.35264551   0.44993982  0.016625255  -0.05896513 0.0094603751  -0.24608436  -0.23483662   0.71217096        0.075    1.4615823        1e-10 1.5826021e-11    6.3187075    2.4492542    31.520363 -0.00066688339  -0.19735496 0.0031440743   0.17822204   0.40959926    2.3119132 
 3648000    4.0302343    1.2783163     2.751918  -0.23013951   0.85225928    1.0006405   0.74965964   -1.2298232            1  -0.21365497  -0.45197051  -0.45084526   0.26185086 0.00084286862 -0.025715519 -0.031345716   -0.3682913  -0.35649142   0.71860005        0.075    1.4538612        1e-10 1.596889e-11     6.262176    2.4406228    31.520363 -0.0039771235  -0.18265013 -0.0021917061   0.18859971   -0.5954852    1.3085989 
 3649000    4.0264889    1.2863791    2.7401097  -0.23018686   0.85763481    1.0102848   0.75208166   -1.2298232            1 -0.060635131  -0.38488222  -0.29388347    0.4968603 -0.00023282975  0.034053656 0.0060725267  -0.21577106  -0.20484826    0.7248586        0.075    1.4468385        1e-10 1.6107969e-11    6.2081073    2.4530194    31.520363 -0.0073452575  -0.21456602 -0.0048045261   0.21335091   -1.1157938   0.94906449 
 3650000    4.0370894    1.2784743    2.7586151   -0.2345317   0.85236463    0.9950562    0.7537023   -1.2298232            1  -0.21267261  -0.45582829  -0.49741261   0.31522307 0.0015156549  0.023837381 -0.025757481  -0.36814284  -0.35471193   0.72083747        0.075    1.4358829        1e-10 1.601861e-11    6.2427388    2.4676363    31.520363 -0.0020274165  -0.20501662 0.0044290475   0.19398767    1.4744798    1.3062097 
 3651000    4.0111741    1.2795617    2.7316124  -0.23081815    0.8530896     1.002832   0.74954809   -1.2298232            1 -0.053434068  -0.36141939  -0.29607018   0.49718736 0.0055468555  0.023494885  0.038383483  -0.20804739  -0.19658334   0.71461347        0.075    1.4457023        1e-10 1.5880299e-11    6.2971105    2.4362963    31.520363 0.0013498868  -0.22443826 -0.0007154434   0.20214254  -0.63882915    4.5166777 
 3652000    4.0415375    1.2897611    2.7517765   -0.2304049   0.85988955    1.0067102   0.75837055   -1.2298232            1  -0.25144342  -0.46566446  -0.49858178   0.20991599 -0.0060517748  0.011821775 0.0098739024  -0.40787659  -0.39514629   0.71017206        0.075    1.4197031        1e-10 1.5781601e-11    6.3364926    2.4451932    31.520363 0.0035839365  -0.20422225 -0.0025446053    0.1846613   -1.0701462   0.63518765 
 3653000    4.0258226    1.2767348    2.7490878  -0.22896701   0.85120489   0.99667879   0.75061704   -1.2298232            1  -0.13246062  -0.41035315  -0.39609003   0.40906133 0.0075842217  0.075020537 -0.028853713  -0.28729443  -0.27473155   0.71280088        0.075    1.4276397        1e-10 1.5840019e-11    6.3131236    2.4457678    31.520363 0.00066574915  -0.20470678  0.003760363    0.2150753   0.22460099   0.82112461 
 3654000     4.012063    1.2707011    2.7413619  -0.24083521   0.84718217    1.0019691   0.74014925   -1.2298232            1  -0.27110716  -0.49687076  -0.51579571   0.19934499 0.0065428719 -0.038863983  0.020320385  -0.42378173  -0.41413326    0.7179204        0.075    1.4351247        1e-10 1.5953787e-11    6.2681043    2.4327065    31.520363 -0.0071717863  -0.21592827 0.0048687318   0.18992731   0.54259614    1.5364347 
 3655000    4.0237945    1.2868513    2.7369432  -0.23881693   0.85794963     1.001583   0.75863606   -1.2298232            1   -0.2378836  -0.50612055  -0.44722307   0.23969283 -0.0075019583  0.033706313 -0.011596624  -0.39437154  -0.38085459   0.72145773        0.075    1.4308798        1e-10 1.6032394e-11    6.2373717    2.4548651    31.520363 -0.0045706923  -0.21528299 -0.010325667   0.18729951 -0.057646809   0.76955601 
 3656000    4.0278399    1.2707668    2.7570731  -0.22620787   0.84722601     1.000236   0.74142268   -1.2298232            1  -0.16806703   -0.4239475   -0.4094771    0.3292235 -0.011600247  0.032136359 -0.0090459516  -0.32100428  -0.31084575   0.71289125        0.075    1.4306657        1e-10 1.5842028e-11    6.3123232    2.4517301    31.520363 0.0022898439  -0.20408467 -0.0035814037   0.19858125  -0.40455884   0.63438198 
 3657000    4.0359374    1.2605949    2.7753425  -0.22494733   0.84044433   0.99670607   0.73239013   -1.2298232            1  -0.23290152   -0.4760012  -0.49549512   0.27279177 -0.002336308  -0.04548767  -0.03346469  -0.38397557  -0.37517635   0.71232686        0.075      1.43801        1e-10 1.5829486e-11    6.3173246     2.457008    31.520363 -0.0057912266  -0.21379982 -0.0089254219   0.19967507    1.5800831    1.1187802 
 3658000    4.0177851    1.2787582     2.739027  -0.23255017   0.85255389    1.0000464   0.75056928   -1.2298232            1  -0.11976814  -0.37866754  -0.36356068   0.38292381  0.012938881 -0.091794997  0.045298253  -0.27459211  -0.26251978   0.71806286        0.075    1.4261363        1e-10 1.5956952e-11    6.2668608    2.4419527    31.520363 -0.0042260417  -0.21392135 -0.0054236401   0.20353577  -0.86945558     1.601557 
 3659000    4.0038574    1.2699038    2.7339536  -0.22868136    0.8466506    1.0005756   0.74021408   -1.2298232            1  -0.24999946  -0.47498324  -0.46812387   0.19310875 -0.021950685 -0.078792044 -0.0029353481   -0.4026874  -0.39282664   0.71745206        0.075    1.4213195        1e-10 1.5943379e-11    6.2721961    2.4439075    31.520363 -0.00066014633  -0.18795684 0.0099044507   0.19728049  -0.71651876  -0.18565918 
 3660000    4.0371071    1.2809039    2.7562031  -0.22832488   0.85398446   0.99975245   0.75319337   -1.2298232            1  -0.12088824  -0.37999573  -0.39991788   0.41724889  -0.01044519 -0.051206923  0.024910961  -0.27625349  -0.26359793   0.71603727        0.075    1.4220625        1e-10 1.5911939e-11     6.284589    2.4608583    31.520363 0.0078294031  -0.18565497  0.002620403   0.19116153  -0.52726513    2.9768317 
 3661000    4.0100546    1.2769199    2.7331347  -0.23013259    0.8513283    1.0046028   0.74534233   -1.2298232            1 -0.058021007  -0.34911926  -0.31125325   0.48630949 -0.00023846306 0.0084247758  0.053804015  -0.21176678  -0.20142307   0.71469711        0.075    1.4122157        1e-10 1.5882158e-11    6.2963736    2.4469629    31.520363 -0.003281399  -0.19927561  -0.01866544   0.23483721   -0.4825486   0.48687459 
 3662000    4.0300474    1.2774561    2.7525912  -0.23992456   0.85168581    1.0056515   0.74522156   -1.2298232            1  -0.17494799  -0.43016232  -0.43750391   0.34282227 -0.013145847 -0.035847116  0.010955299  -0.32866885  -0.31849974   0.71805998        0.075    1.4125802        1e-10 1.5956889e-11    6.2668859    2.4508805    31.520363 -0.0059681762  -0.20146483 -0.0061712555   0.18939334    0.3415008  -0.51407609 
 3663000    4.0308005    1.2815453    2.7492552  -0.22629381   0.85441206    1.0089081    0.7475811   -1.2298232            1  -0.15294522   -0.4091504  -0.41783251   0.36814725   0.01394589 -0.016874226  0.020310315   -0.3071528  -0.29696183   0.71728835        0.075    1.4259339        1e-10 1.5939741e-11    6.2736276    2.4501677    31.520363 0.0024286021  -0.20237627 -0.013127548   0.21534387  -0.73617894    1.8360033 
 3664000    4.0196439    1.2731274    2.7465165  -0.23983806   0.84879984    1.0111536   0.73653067   -1.2298232            1  -0.23125959  -0.46347634  -0.48922985    0.2589274 -0.0068655585  0.018358796 -0.033168384  -0.38318774  -0.37559674   0.71746997        0.075    1.4162703        1e-10 1.5943777e-11    6.2720395    2.4553486    31.520363 -0.0079732049  -0.22585389 -0.00077200234   0.20164674  -0.72301053  -0.15259214 
 3665000    4.0245556    1.2838624    2.7406931  -0.22747794   0.85595692    1.0117773   0.74820966   -1.2298232            1  -0.16043236  -0.41475027  -0.41273937   0.34619255 0.0089574124 -0.044527801 -0.066518471   -0.3147696  -0.30485853   0.71545432        0.075    1.3978062        1e-10 1.5898985e-11    6.2897097    2.4372618    31.520363 -0.003611461  -0.19222018 -0.011034996   0.20308861   0.23690359  0.058414246 
 3666000    4.0366993    1.2895978    2.7471016  -0.22290975    0.8597807    1.0093403   0.75636631   -1.2298232            1 -0.028682415  -0.30794998  -0.30777516    0.5296779 -0.0095615443  0.049576925 -0.087696966  -0.18470217  -0.17276072   0.71220645        0.075    1.4023958        1e-10 1.582681e-11    6.3183926    2.4478716    31.520363 -0.0031004085  -0.18826277 -0.0094379278   0.19868963  0.050721753    1.8272181 
 3667000    4.0282331    1.2811567    2.7470765  -0.22928383   0.85415295    1.0075051   0.74811355   -1.2298232            1 -0.094347504  -0.37673669  -0.37958662    0.4732808 -0.010121824 -0.031741988  0.012093083  -0.24866491  -0.23816384   0.71200982        0.075    1.3969985        1e-10 1.5822441e-11    6.3201375    2.4421074    31.520363   0.00290102  -0.19187207 0.0015694555   0.21282563   -1.4625844    2.4234295 
 3668000     4.018879    1.2790272    2.7398517  -0.22995609   0.85273326    1.0122253   0.74244484   -1.2298232            1  -0.17132664  -0.41460837  -0.42959419   0.33022265 -0.0070241923  0.079847694 -0.00012646779  -0.32447473  -0.31581676   0.71458133        0.075    1.3888897        1e-10 1.5879585e-11    6.2973938    2.4421002    31.520363 -0.0068601419  -0.19317117 0.00082547445   0.20196959   -1.2149906    2.4427328 
 3669000    4.0324979    1.3002531    2.7322448  -0.23796473   0.86688464    1.0193144   0.76148478   -1.2298232            1  -0.22696039  -0.47894512  -0.45580697   0.25387091 -0.0046958022  0.030869591  0.018775233  -0.38403596  -0.37246244   0.72205103        0.075     1.380822        1e-10 1.6045579e-11    6.2322465    2.4498614    31.520363 -0.00086086267  -0.19455454 -0.011413328   0.20051956  -0.13861061   0.13926139 
 3670000     4.033346    1.2919358    2.7414102  -0.22945042   0.86133944    1.0140425   0.75574991   -1.2298232            1  -0.11882916  -0.37344133  -0.37603964   0.39299348 0.0087631455   0.02470691 -0.094971803  -0.27472177  -0.26357868   0.71817119        0.075    1.3995313        1e-10 1.595936e-11    6.2659155     2.446602    31.520363 0.00028896726  -0.20267384 0.0081525314   0.19306938   -1.6755639    1.6100769 
 3671000    4.0221275    1.2752721    2.7468554  -0.23577164   0.85022973     1.007533   0.74145574   -1.2298232            1  -0.13687387  -0.40996205   -0.4105752   0.40991563 -0.0080211421  0.067411392  0.021967477  -0.28981794  -0.28069419   0.71318924        0.075    1.4050522        1e-10 1.584865e-11    6.3096857    2.4470347    31.520363 -0.0054807083  -0.22306179 -0.0097763821   0.21032545  -0.64885834 -0.064901048 
 3672000     4.037388    1.2904056    2.7469823  -0.23236957   0.86031929    1.0082671   0.75802035   -1.2298232            1   -0.1119914  -0.33142388  -0.41242385   0.40787352 0.0058805831 0.0064162441  0.025444687  -0.26835234  -0.25591651   0.71489857        0.075    1.4105987        1e-10 1.5886635e-11    6.2945993     2.448082    31.520363 -0.0070496549  -0.20021102 -0.0031974408   0.17206884   0.39388863    1.9425194 
 3673000    4.0167858    1.2827463    2.7340396  -0.22930161   0.85521275    1.0205319   0.74089214   -1.2298232            1   -0.1419706  -0.38731513  -0.41049019   0.37189351 -0.0090265572  0.027939986  0.024328638  -0.29479842  -0.28764645   0.71915173        0.075    1.4245411        1e-10 1.598115e-11    6.2573721    2.4520685    31.520363 0.00089879879   -0.1969126 -0.0088149765   0.21568047  -0.78453069   0.10041793 
 3674000    4.0227402    1.2759315    2.7468088  -0.22635387    0.8506693   0.99985494   0.74751283   -1.2298232            1  -0.14319321  -0.38537329    -0.387202   0.34299566 0.0080704547 -0.027526677 0.0027094141  -0.29738671  -0.28591753   0.71399277        0.075    1.4107821        1e-10 1.5866506e-11    6.3025849    2.4510415    31.520363  0.017521829  -0.19514553 -0.0090990715   0.20445181  -0.52881971    1.7524265 
 3675000    4.0183081    1.2765372    2.7417709  -0.22687322   0.85107313   0.99782764   0.74959907   -1.2298232            1  -0.15932169  -0.42043196  -0.43240602    0.3748729  0.017886428 -0.028622048  0.041569281  -0.31394553  -0.30175663   0.71757451        0.075     1.413937        1e-10  1.59461e-11    6.2711258    2.4609662    31.520363 -0.0063469358  -0.19232357 0.0019040629   0.21013827   0.99014412    2.6602895 
 3676000    4.0227429     1.274345    2.7483978  -0.23202811   0.84961162   0.99697727   0.74771451   -1.2298232            1  -0.18383575  -0.44234859  -0.41083791   0.30167924 -0.00028814751  -0.12356805 -0.068172488  -0.33807085   -0.3261493   0.71929788        0.075    1.4112378        1e-10 1.5984397e-11    6.2561007    2.4468143    31.520363 0.0012487008   -0.1926438 -0.0050148571   0.18246358   0.97483238    2.1911087 
 3677000     4.023878    1.2840005    2.7398775  -0.23280088   0.85604897   0.99967006   0.75674376   -1.2298232            1 -0.077454162  -0.32278655  -0.37120854    0.4616326 -0.0021838659 -0.076211558  0.034493661  -0.23355177  -0.22015209   0.72100923        0.075    1.3921766        1e-10 1.6022427e-11    6.2412516    2.4487136    31.520363 0.0039915829  -0.19105823 -0.0049825037   0.21080181   -1.3735013    3.7346639 
 3678000    4.0222249    1.2809967    2.7412282  -0.23775853   0.85404633    1.0014716   0.75210837   -1.2298232            1  -0.14829178  -0.43087922  -0.40654929   0.39255317 0.0082933752 -0.094382495  0.016681785  -0.30343323  -0.29124687   0.71308113        0.075    1.3745288        1e-10 1.5846247e-11    6.3106424    2.4446481    31.520363 0.0061468453  -0.19564207 -0.0061307705   0.21234486   0.34051299    1.3441815 
 3679000    4.0259486    1.2719118    2.7540368  -0.22461916   0.84798938   0.99081908   0.74923104   -1.2298232            1  -0.14926639  -0.39097321  -0.40824717   0.35142122  0.005172273 -0.052499401 -0.004987995  -0.30381431  -0.29070088    0.7082064        0.075     1.383698        1e-10 1.573792e-11    6.3540798    2.4440307    31.520363 -0.0080832064  -0.19756668 -0.00042547018   0.20560709   0.13840655  -0.47663378 
 3680000    4.0109562    1.2777444    2.7332119  -0.22931933   0.85187796    1.0080237   0.74390514   -1.2298232            1  -0.11606793   -0.3694468  -0.38290069   0.40414371 -0.00016076389  0.053575897    0.0212946  -0.26951725   -0.2599583   0.71851187        0.075    1.3892765        1e-10 1.596693e-11    6.2629446    2.4448139    31.520363 0.0023248367  -0.19911406 -0.0084773754    0.2177286  -0.41334028    2.2659416 
 3681000    4.0177454    1.2826717    2.7350736  -0.23707489   0.85516305    1.0032588   0.75276123   -1.2298232            1 -0.077772678  -0.35220452  -0.33894516   0.45783164 0.0062224203  0.028417142  0.043259468  -0.23304879  -0.22098288   0.72470331        0.075    1.3808096        1e-10 1.6104518e-11    6.2094376    2.4488699    31.520363 -0.005708825   -0.1754953 -2.1721625e-05   0.20689948  -0.76163674    3.2125643 
 3682000    4.0171209    1.2727551    2.7443657   -0.2307723   0.84855163   0.99826509    0.7450297   -1.2298232            1  -0.15558197    -0.415117  -0.39454956   0.34292066 0.0078082741  0.076830329 -0.018848536  -0.30926325  -0.29807934   0.71960826        0.075    1.3816605        1e-10 1.5991295e-11    6.2534024    2.4455869    31.520363 -0.00066550167  -0.19832304 -0.0058359033   0.19006221   -1.3712505   0.96626075 
 3683000    4.0244461    1.2726563    2.7517897  -0.23280992   0.84848576   0.99167944   0.74947559   -1.2298232            1  -0.35911364  -0.58276534  -0.54303405  0.048458479 -0.0037862082  0.080787879 -0.0054338218    -0.513712  -0.50067094   0.71376508        0.075    1.3977691        1e-10 1.5861446e-11    6.3045953    2.4474324    31.520363 0.0050372076  -0.18466306 0.0096244262   0.18121559   -2.3004065   -2.3443284 
 3684000    4.0200862    1.2649511    2.7551351  -0.22703751   0.84334864   0.98537168   0.74514807   -1.2298232            1  -0.10013252  -0.36287056  -0.36416467   0.42663769 0.00019020497  0.015986087 -0.040821975  -0.25383822  -0.24078942   0.71827402        0.075    1.3814006        1e-10 1.5961645e-11    6.2650185    2.4495811    31.520363 -0.0067944506  -0.20502727 0.0048214373    0.1900679   -1.1465567    2.6881461 
 3685000    3.9916464    1.2677827    2.7238638  -0.23517783   0.84523645   0.99850525   0.73925386   -1.2298232            1 -0.092039458  -0.36268442  -0.37462473   0.46119078 0.0039230398    0.1363841 -0.026011735  -0.24452933  -0.23457112   0.71967512        0.075    1.3762162        1e-10 1.599278e-11    6.2528214     2.446349    31.520363 0.0040091357  -0.22270967 -0.0056086798   0.18854246  -0.08173066    2.8640519 
 3686000    4.0106404    1.2641152    2.7465252    -0.235625   0.84279134   0.98100535   0.74722662   -1.2298232            1  -0.19038162  -0.43482989  -0.43325348   0.29693851 -0.0031595374  0.060723213 -0.018592697  -0.34451608  -0.33041525   0.71947569        0.075    1.3901682        1e-10 1.5988349e-11    6.2545546    2.4466344    31.520363 -0.011471848  -0.19902279 0.0070200662   0.19122486   0.33605774  -0.91330734 
 3687000    4.0119737    1.2707395    2.7412342  -0.23094255   0.84720782   0.99156859   0.74738988   -1.2298232            1   -0.1195808  -0.38726529  -0.37733143   0.40585433 -0.023725207  0.044109786  0.013442396  -0.27374893  -0.26112228   0.71883484        0.075    1.3828157        1e-10 1.5974108e-11    6.2601306    2.4388307    31.520363 -0.011212051  -0.22992353 -0.018476936   0.22043258   -1.0468468     1.096357 
 3688000     4.007139    1.2791888    2.7279502  -0.24037337   0.85284095    1.0038137   0.74844799   -1.2298232            1  -0.24029658  -0.48655789  -0.47436935   0.24003749 -0.0027533625  0.079835295 -0.031161212  -0.39468298    -0.383586   0.71369252        0.075    1.3779013        1e-10 1.5859834e-11    6.3052363    2.4437672    31.520363 -0.0014323623  -0.19936385 0.0045699849   0.20376668  -0.70779126  -0.93870626 
 3689000    4.0194785    1.2760094    2.7434692  -0.23296508   0.85072123     0.999602   0.74777573   -1.2298232            1  -0.11259375  -0.39896393  -0.37619294   0.43737564 -0.001674314  0.067252775  0.064204347  -0.26684147  -0.25528196   0.71527538        0.075     1.401011        1e-10 1.5895008e-11    6.2912832    2.4556093    31.520363 0.0040425466  -0.18436335 -0.0023135894   0.18429846   -1.2318752    1.4423997 
 3690000    4.0239234    1.2894834      2.73444    -0.230443   0.85970441    1.0132658   0.75352077   -1.2298232            1  -0.13789774  -0.35244901  -0.39653425   0.33529005 0.0083597227  0.018885839 -0.013141807  -0.29333052  -0.28253638   0.72179175        0.075    1.4105393        1e-10 1.6039817e-11    6.2344852    2.4571199    31.520363 -0.0042582221  -0.19384375 -0.0010935631   0.20961573  -0.27639697    1.1845099 
 3691000    4.0278744    1.2823684    2.7455061  -0.23385744    0.8549608   0.99485073   0.75823749   -1.2298232            1 -0.077005975  -0.40031673  -0.33233616   0.50163496 0.0051581999 0.0098967308  0.011958557   -0.2334117  -0.21901597   0.72206279        0.075    1.4050013        1e-10 1.604584e-11     6.232145    2.4602297    31.520363 0.00047724945  -0.19472292  0.005527632   0.20348658   0.70907543    2.2637899 
 3692000    4.0128243    1.2770104    2.7358139  -0.23547151   0.85138862    1.0099624   0.74173549   -1.2298232            1  -0.16809758  -0.42266289  -0.42087204   0.33924219  0.008259399 0.0048199172  0.021302671  -0.32109935  -0.31226469   0.71627055        0.075    1.3826913        1e-10 1.5917123e-11    6.2825423    2.4604587    31.520363 0.00053835535  -0.18314515 -0.0049326309   0.16510553  -0.46344049    2.9712523 
 3693000     4.024499    1.2822679    2.7422311  -0.22621751   0.85489386    1.0030043   0.75248188   -1.2298232            1  -0.20639752  -0.46113546  -0.43833152   0.28027441 -0.0034791958 -0.050533841 -0.0013146309  -0.36161601  -0.34957139   0.71326015        0.075    1.4019752        1e-10 1.5850226e-11    6.3090585     2.453018    31.520363 -0.0049008254  -0.17791665 -0.00015838603   0.20167482    1.1367292   -1.3757922 
 3694000    4.0327989    1.2850088    2.7477902  -0.23192691   0.85672117   0.99927937   0.75815155   -1.2298232            1   -0.1419266  -0.45779293  -0.38305732   0.41507043 -0.006090295  0.051176113  0.019733701  -0.29831461  -0.28456876   0.71719432        0.075    1.3866994        1e-10 1.5937652e-11    6.2744501    2.4445736    31.520363 0.0055355999  -0.20854662 -0.0013135662   0.21204565  -0.26252772     1.801158 
 3695000    4.0125132    1.2720465    2.7404666  -0.23919108    0.8480792    1.0044722   0.73993492   -1.2298232            1 -0.058852124   -0.3485569  -0.33650067    0.5085012  0.012788002  0.068732995  0.032579875  -0.21148248  -0.20223553   0.71775944        0.075     1.388377        1e-10 1.595021e-11      6.26951    2.4421552    31.520363 -0.0066627438  -0.18993513 -0.010029759   0.19802736  -0.60769187     2.230551 
 3696000    4.0217314    1.2741078    2.7476237  -0.22325053   0.84945344    1.0002998   0.74514762   -1.2298232            1  -0.13882968  -0.37656661  -0.38834975   0.34842733  0.010577361 0.0012806621 -0.0066681646  -0.29253529   -0.2816175   0.71844065        0.075    1.3964292        1e-10 1.5965348e-11    6.2635654    2.4323354    31.520363 -0.00011234735  -0.23105999 -0.0022433848   0.20535405   -1.2089696    1.4037127 
 3697000    4.0098667    1.2785515    2.7313153  -0.23981206   0.85241607    1.0031905   0.74816033   -1.2298232            1  -0.17565301  -0.42581537  -0.44474902   0.34360535  0.014222722 -0.0060436983 -0.021172926  -0.32998007  -0.31885346   0.71954914        0.075    1.3938924        1e-10 1.5989981e-11    6.2539161    2.4557205    31.520363 -0.019327595  -0.21750968 -0.0018750557   0.20063705    0.1090306   -0.7348488 
 3698000    4.0100037    1.2633844    2.7466193  -0.22947816   0.84230412   0.99092706   0.73953624   -1.2298232            1  -0.15210042  -0.38587795   -0.4469447   0.37652139 -0.017568227 -0.022475943 -0.048226686  -0.30464854  -0.29355033   0.71580678        0.075    1.4016042        1e-10 1.5906817e-11    6.2866127    2.4532701    31.520363 -0.0047115704  -0.16621111 0.0027385463   0.19023232   0.39110399    1.9285221 
 3699000    4.0076686    1.2756061    2.7320625  -0.23851787   0.85045235     1.007411   0.74191684   -1.2298232            1  -0.15202839   -0.3909399   -0.4004782   0.33533293 -0.0056435886  0.073158661 -0.0067042384  -0.30506757   -0.2958313   0.71685686        0.075    1.3862732        1e-10 1.5930152e-11    6.2774039    2.4387865    31.520363 -0.012383448  -0.21856396 -0.00092018493   0.18290372 9.5861184e-06   -1.0198281 
 3700000    4.0371668    1.2819501    2.7552167  -0.23027046   0.85468197    0.9962908   0.75676913   -1.2298232            1  -0.17467887  -0.42816806  -0.42215926   0.32629071 -0.0060038466  0.042447908 -0.021118133  -0.33078171  -0.31689442   0.71508927        0.075    1.3967041        1e-10 1.5890873e-11    6.2929206     2.448349    31.520363 -0.006234815   -0.1895715 0.0060457656   0.17621436   0.20569825  -0.22400538 
 3701000    4.0245554    1.2777208    2.7468346  -0.22813023   0.85186222   0.99622729   0.75204176   -1.2298232            1  -0.12047814  -0.35273105  -0.38485466   0.37615129 -0.0053859594  0.018979046 -0.0022459294  -0.27560584  -0.26268463   0.71394478        0.075    1.4081326        1e-10 1.586544e-11    6.3030085    2.4574604    31.520363 0.0068839248  -0.19709983 -0.001471776   0.18255238   0.23852871    1.1001165 
 3702000    4.0139144    1.2771015    2.7368129  -0.22661987   0.85144935   0.97436326    0.7664733   -1.2298232            1  -0.06973472  -0.33225284   -0.3268585   0.44990718  0.013090598 -0.014143472  0.013818473  -0.22783929  -0.20882023   0.71151746        0.075    1.3958825        1e-10 1.5811499e-11     6.324511    2.4349978    31.520363 -0.011658922  -0.18904815  0.010940908   0.20087555 -0.094123686    0.2175361 
 3703000    4.0009823    1.2768046    2.7241777  -0.24125575   0.85125141   0.99973165   0.74858313   -1.2298232            1 -0.0036114976  -0.28872049  -0.25911388   0.53699988 0.0088536259 -0.043583795  0.035984582  -0.15802577  -0.14631822   0.71974565        0.075    1.4091641        1e-10 1.5994348e-11    6.2522087    2.4316209    31.520363 0.0048748148  -0.19334235 -0.0045931001   0.19094135    1.1039263    3.8986862 
 3704000    4.0393598    1.2834912    2.7558686  -0.22964802    0.8557094   0.98586426   0.76572294   -1.2298232            1 -0.057831705  -0.34538006   -0.3678211   0.53970604  0.007977965 -0.063132621  0.021627335   -0.2157815  -0.19855892   0.72127798        0.075    1.4069787        1e-10  1.60284e-11     6.238926    2.4414057    31.520363 0.0020910222  -0.21011458 -0.0010969065   0.20218056    1.0707327     1.430079 
 3705000    4.0359718    1.2732043    2.7627675  -0.22585727    0.8488511   0.99188782   0.74994958   -1.2298232            1  -0.18685463  -0.42865261  -0.46240701   0.33049574 -0.0055864788 -0.044600285 -0.012689209  -0.34155076  -0.32844168   0.71660393        0.075    1.4082992        1e-10 1.5924532e-11    6.2796195    2.4517729    31.520363 0.0058131175  -0.19810472 -0.0099843293   0.21234883    0.2830144    0.3790867 
 3706000     4.018142    1.2750879    2.7430541  -0.22659225    0.8501069    1.0026064   0.74465713   -1.2298232            1   -0.1245321   -0.3905995  -0.34884536   0.36584855 0.0068995132 -0.0079034098 -0.053398423  -0.27813654  -0.26764918    0.7112226        0.075    1.4160831        1e-10 1.5804947e-11     6.327133    2.4534394    31.520363 -0.0091565354  -0.18513035 -0.0018108258    0.1766079   -1.1855585  -0.57359951 
 3707000    4.0274183    1.2900556    2.7373626  -0.22780619   0.86008594    1.0177152   0.75108726   -1.2298232            1  -0.12132927  -0.39529519  -0.34749701   0.37880437  0.016710437 0.0023039221 -0.0092712963  -0.27626009  -0.26660306   0.72147993        0.075    1.4076068        1e-10 1.6032887e-11    6.2371797    2.4570612    31.520363 -0.0094665629  -0.20181418 0.0040253356   0.18068357    -1.297423   0.36989537 
 3708000    4.0428429      1.28714    2.7557029  -0.23118674   0.85814209    1.0088046   0.75396431   -1.2298232            1 -0.086032924  -0.38633143  -0.35050361   0.47873627 -0.009091143 -0.0071626762 -0.038765292   -0.2415572  -0.23003477   0.72108485        0.075    1.4171903        1e-10 1.6024108e-11     6.240597    2.4330754    31.520363 0.0017716697  -0.20343114 -0.0021392049   0.21572773   0.81591841    1.9226217 
 3709000    4.0123037    1.2808859    2.7314178  -0.23435652   0.85397245    1.0038229   0.75035624   -1.2298232            1  -0.15599049  -0.41657193   -0.4027051   0.35130555 -0.0033951318  -0.08877784   0.02135975  -0.31077051  -0.29928122   0.71778666        0.075    1.3815028        1e-10 1.5950815e-11    6.2692723    2.4480879    31.520363 -0.011700275  -0.20177324 -0.0072483564   0.19320419   0.94642905    1.3700113 
 3710000    4.0139374    1.2765467    2.7373907  -0.22377041    0.8510795    1.0120861   0.73974285   -1.2298232            1  -0.12585488  -0.39330689  -0.36924846    0.3849907  0.020491607 0.0068204983 -0.016178878  -0.27844562  -0.27032513   0.71377068        0.075    1.3918181        1e-10 1.5861571e-11    6.3045459    2.4434479    31.520363 -0.0032444351  -0.19914425 0.0025460859   0.17613454  -0.63510779    2.0656433 
 3711000    4.0327906    1.2862073    2.7465833  -0.22170287   0.85752025    1.0112161    0.7512433   -1.2298232            1  -0.14385897  -0.38975646  -0.42300898   0.38118854 0.0015902601 -0.0067146298 -0.035986647  -0.29882197  -0.28820504    0.7143854        0.075     1.412358        1e-10 1.5875231e-11    6.2991209    2.4392063    31.520363 -0.012285274  -0.20024453 0.0068523796   0.16756546  -0.32604562    2.1451217 
 3712000    4.0187425    1.2768353    2.7419072  -0.22634176   0.85127192    1.0171258   0.73658089   -1.2298232            1  -0.19987511  -0.46120262  -0.41707901   0.27865631 -0.0028605205  0.080113929 -0.0015876134  -0.35181361  -0.34506475   0.72257514        0.075    1.4117408        1e-10 1.6057225e-11     6.227726    2.4461674    31.520363  -0.01821957  -0.21689689 -0.011465881   0.20176298   0.49216908  -0.84154547 
 3713000    4.0076003    1.2780047    2.7295957  -0.23431021   0.85205151    1.0084882    0.7438774   -1.2298232            1  -0.20893151  -0.45838584  -0.47392667   0.30551798 0.0036021793  0.016005575 -0.025106439  -0.36237511  -0.35288818   0.72152897        0.075     1.409925        1e-10 1.6033977e-11    6.2367559    2.4554573    31.520363 -0.010539101  -0.21290161 -0.00077069656   0.18060191   0.34836899    -1.755034 
 3714000    4.0053459    1.2756397    2.7297062  -0.22636965   0.85047479    1.0028933   0.74508112   -1.2298232            1  -0.20647675  -0.46264714  -0.41572254   0.25893944 -0.0080461761  0.015730585 -0.069042327  -0.36016864  -0.34963478   0.71700224        0.075    1.4267264        1e-10 1.5933383e-11     6.276131    2.4488927    31.520363 -0.005612597  -0.19958751 -0.00013503106   0.19887378  -0.71276156   0.33408659 
 3715000    4.0183094    1.2746156    2.7436937  -0.23409681   0.84979202    0.9885957    0.7538199   -1.2298232            1  -0.24182618  -0.48767824  -0.48164424   0.24384393 -0.0046158308  -0.10569061 0.0054691846  -0.39732067   -0.3829433   0.71095699        0.075    1.4265558        1e-10 1.5799044e-11    6.3294968    2.4405038    31.520363 -0.0076965136  -0.18835957 -0.0002954821   0.19800786    1.1990652    1.2587024 
 3716000    4.0139036    1.2825161    2.7313875  -0.22817873   0.85505928   0.99695531   0.75694773   -1.2298232            1  -0.24836385   -0.4682977   -0.4627091   0.18591524 0.0040718874  -0.05554552  0.026081675  -0.40450353  -0.39067426   0.71854364        0.075    1.4234995        1e-10 1.5967636e-11    6.2626676    2.4499072    31.520363 0.0017414106   -0.2117516 -0.003570755   0.20204677    2.3084592   -1.3309363 
 3717000    4.0214428    1.2713078    2.7501351  -0.23500807   0.84758665   0.99646164   0.74464486   -1.2298232            1  -0.19312996  -0.46678843  -0.41443514   0.30183369 -0.0084880549  0.059734245 -0.0031877338  -0.34673186   -0.3353699   0.72618344        0.075    1.4269653        1e-10 1.613741e-11    6.1967813    2.4518648    31.520363 -0.0021411013  -0.20903625 0.00029883361   0.20689232   0.14891727   0.65297699 
 3718000    3.9931434    1.2751499    2.7179935  -0.24006825   0.85014821    1.0013374    0.7456052   -1.2298232            1  -0.14728235  -0.43370488  -0.35205822   0.34391605 -0.0050776141    0.0605512  0.026322542  -0.30108235  -0.29021829   0.71582866        0.075    1.4320395        1e-10 1.5907304e-11    6.2864205    2.4425056    31.520363 -0.0040592886  -0.20448317 -0.0088059112   0.18514707    0.7447191   0.78679261 
 3719000    4.0093243    1.2720048    2.7373195  -0.23217334   0.84805138   0.99201063   0.74851138   -1.2298232            1  -0.17297239  -0.44298748  -0.39716123   0.32123155 0.0087341384 -0.028522434 -0.011828473  -0.32737186  -0.31457697   0.71184786        0.075    1.4347771        1e-10 1.5818841e-11    6.3215755    2.4484995    31.520363 0.0067141704  -0.17328106 0.0034541653   0.19838659   -1.0217045  -0.82594672 
 3720000    4.0072438    1.2746884    2.7325554  -0.23465048   0.84984056   0.99921723   0.74655181   -1.2298232            1  -0.16928167  -0.42386967  -0.45830387   0.37432851 -0.0055007304 -0.0072175394 -0.024911298  -0.32327694  -0.31191496   0.71099433        0.075    1.4141162        1e-10 1.5799874e-11    6.3291644    2.4345152    31.520363 -0.00086528007  -0.21730341 -0.0065276545    0.2102319   0.30258577    2.7115643 
 3721000    4.0163991    1.2868445    2.7295546  -0.23563017   0.85794507    1.0227968   0.74394818   -1.2298232            1  -0.18386141  -0.42767319   -0.4460035   0.32209246 -0.0063334279 -0.016664677 -0.041564157   -0.3373196  -0.32986056   0.71944487        0.075     1.407593        1e-10 1.5987664e-11    6.2548226    2.4492509    31.520363  0.005744329   -0.1928902 -0.018918698   0.18406043   0.80518255   0.47474323 
 3722000    4.0284811    1.2879654    2.7405158  -0.22856567   0.85869237    1.0044742   0.75789211   -1.2298232            1  -0.17661402  -0.42535528   -0.3981968   0.29371001  0.015390098 -0.080771637   0.06317512  -0.33294851  -0.31999772    0.7214794        0.075    1.4029395        1e-10 1.6032876e-11    6.2371843    2.4499752    31.520363 0.00080238575  -0.19329825 -0.001703807   0.17434116   0.73377646    1.3334096 
 3723000    4.0375093    1.2930113     2.744498  -0.23406105   0.86205653    1.0115525   0.75868638   -1.2298232            1   -0.1815309  -0.42939746  -0.41132271   0.29612748 -0.0052439445  0.071073347 -0.011492539  -0.33802922  -0.32592499   0.71567595        0.075     1.394727        1e-10 1.590391e-11    6.2877619    2.4492525    31.520363 -0.0035190401  -0.20889349 0.0011907693   0.19534868   -1.2883115   0.13229734 
 3724000    4.0396635    1.2890509    2.7506126  -0.22760825   0.85941606    1.0051197      0.75867   -1.2298232            1 -0.096704604  -0.37169942   -0.3622376   0.44382321 0.0096813561 0.0085183517 0.0084704268  -0.25319955  -0.24018044   0.71216627        0.075    1.3952642        1e-10 1.5825917e-11    6.3187491    2.4424091    31.520363 -0.0025707014  -0.17314606 -0.0070991122   0.19365467  -0.18712645    3.5912853 
 3725000     4.042937     1.286261     2.756676  -0.22473738   0.85755604   0.99871634   0.75995387   -1.2298232            1  -0.25804854  -0.48806363  -0.50193288   0.21585088 -0.0092930933  0.034195028 -0.012401042  -0.41480832  -0.40061033   0.71498476        0.075    1.4044245        1e-10 1.588855e-11    6.2938404    2.4358272    31.520363 0.0021458349  -0.21996653 -0.0093355545   0.19825648   0.26677084  -0.33509168 
 3726000    4.0240464    1.2786477    2.7453987  -0.22800294   0.85248021    1.0032666   0.74821615   -1.2298232            1  -0.16592083  -0.40338124  -0.44244886   0.34806763 -0.0035158051  0.031600726 -0.0011169228   -0.3202594  -0.30913215   0.72159809        0.075    1.4112432        1e-10 1.6035513e-11    6.2361584    2.4401942    31.520363 0.0036726687  -0.21751409 0.0035996398    0.1952887  -0.41072374   0.13988338 
 3727000    4.0328842    1.2735525    2.7593317  -0.22915543   0.84908322   0.99048879    0.7513105   -1.2298232            1  -0.20818407  -0.46176581  -0.44893258   0.28614617 0.0011850721  -0.04488936 -0.020665249  -0.36316093  -0.34957142   0.71501163        0.075    1.4138717        1e-10 1.5889147e-11    6.2936039    2.4453215    31.520363 -0.0046644281  -0.21671465 0.0027668229    0.2112333   0.57421739    2.2031101 
 3728000    4.0334649    1.2782372    2.7552276    -0.226345   0.85220657    1.0027252   0.74812779   -1.2298232            1  -0.17263244  -0.41377537  -0.44359381   0.33947188 -0.010358668 0.0075093721 -0.042179436  -0.32695278  -0.31576647   0.71138711        0.075    1.4126886        1e-10 1.5808603e-11    6.3256698    2.4477118    31.520363 -0.0018283337  -0.18894951 -0.0060578942   0.19461198  -0.33890023    1.4872375 
 3729000    4.0204484    1.2857784    2.7346701  -0.23152914   0.85723427    1.0226096   0.74287496   -1.2298232            1  -0.24476948  -0.48306692  -0.48904811   0.23780659 0.0037971844  0.084255478  0.030817271   -0.3980063  -0.39074191   0.71689154        0.075    1.4090452        1e-10 1.5930923e-11    6.2771001    2.4391635    31.520363 -0.001818681  -0.19805004 -0.0068136278   0.18945239  -0.89224369    2.3333552 
 3730000    4.0331724     1.290924    2.7422484  -0.23312815   0.86066488    1.0196793   0.75070772   -1.2298232            1  -0.19403089  -0.39740777  -0.45757421   0.27288931 -0.0042417835   0.02732969 -0.0099423135  -0.34888341  -0.33958504   0.71841462        0.075    1.4059297        1e-10 1.5964769e-11    6.2637924    2.4416386    31.520363  0.012180805  -0.20167042 0.0055780196    0.2044615   -1.0097861   0.87985305 
 3731000    4.0450068    1.3032618     2.741745  -0.22114995   0.86889054    1.0288257   0.75829704   -1.2298232            1  -0.10078572  -0.34141112  -0.36409907   0.40315303 -0.0095870061 -0.018095188  0.012869518  -0.25720373  -0.24764546   0.71260549        0.075    1.4217425        1e-10 1.5835677e-11    6.3148546    2.4346167    31.520363 -0.0056268229  -0.19668234 0.0084125167   0.18025149  -0.74497557    1.4550448 
 3732000    4.0332061    1.2858077    2.7473984  -0.22689577   0.85725384    1.0236397   0.74219525   -1.2298232            1   -0.2054932  -0.45224417  -0.43987541   0.27563999  0.017182036 -0.0010670214  -0.00634076  -0.35858981  -0.35161267   0.71294065        0.075    1.4287834        1e-10 1.5843126e-11    6.3118859    2.4635371    31.520363 0.00025150667  -0.17251271 0.0036044513   0.20294316  -0.90839716  -0.57559233 
 3733000    4.0333148    1.2854285    2.7478862  -0.23468984   0.85700104    1.0035308   0.75568306   -1.2298232            1  -0.17452244  -0.44087442  -0.43522064   0.35252775 -0.0050438569 -0.053482709 -0.049550768  -0.33040125  -0.31777147   0.71331553        0.075    1.4321165        1e-10 1.5851456e-11    6.3085687     2.438993    31.520363 -0.0033222982  -0.20866016 -0.00014990994   0.22551272    1.3768946    1.4223344 
 3734000    4.0537046    1.3133448    2.7403598  -0.23229742   0.87561296    1.0188006   0.77660957   -1.2298232            1  -0.10913867  -0.37951635  -0.36979061   0.42189093 -0.015237327 -0.034046236  0.052874689  -0.26933411  -0.25456739   0.71801224        0.075    1.4408927        1e-10 1.5955827e-11    6.2673027    2.4395667    31.520363 -0.0035310322  -0.20142848 -0.0074842248   0.20095061  -0.32627269   0.22357081 
 3735000    4.0387546    1.2837335     2.755021  -0.22861994   0.85587098    0.9993824   0.75664164   -1.2298232            1  -0.17454908  -0.40886458  -0.44688339   0.33210073  0.012990464  0.059584043  0.027686143  -0.33062563  -0.31720595    0.7132194        0.075    1.4400159        1e-10 1.584932e-11     6.309419     2.447164    31.520363 0.0089120208  -0.19670872 -0.016345322   0.21526617  -0.10447457   0.37424676 
 3736000    4.0392922    1.2810767    2.7582155  -0.23107675   0.85409962    1.0012044   0.75238347   -1.2298232            1 -0.089188495  -0.36759477  -0.34369204   0.44372132 0.0024704052  0.063234272  0.047782464  -0.24438668  -0.23210544   0.71192981        0.075     1.441937        1e-10 1.5820662e-11    6.3208479      2.44242    31.520363 -0.010077118  -0.19433841 -0.0022412038   0.18033935    1.2158357    0.1367433 
 3737000    4.0255917    1.2875926    2.7379991  -0.22389738   0.85844382    1.0101008   0.75357791   -1.2298232            1    -0.122993  -0.35774703  -0.39843859   0.38720662  0.015164142    0.1245323 -0.00027368117  -0.27843758  -0.26717986   0.71937655        0.075    1.4452371        1e-10 1.5986146e-11    6.2554166    2.4527695    31.520363 -0.0044606907  -0.18943309 0.0020575127   0.21402763  -0.25538764    2.8989091 
 3738000    4.0317403    1.2731908    2.7585495  -0.22296437    0.8488421   0.98336369   0.75583316   -1.2298232            1  -0.15724507  -0.41800834  -0.38866168   0.33493482 -0.022162564  0.046959003 -0.044856218  -0.31315484  -0.29761534   0.71965968        0.075    1.4320952        1e-10 1.5992437e-11    6.2529556     2.444957    31.520363 -0.00047498395   -0.2127916 -0.0046123199   0.22524588    1.2070683   0.97596695 
 3739000     4.004345    1.2678119    2.7365331  -0.22641619   0.84525594   0.99320996   0.74295124   -1.2298232            1  -0.17415352  -0.41064203  -0.44977293    0.3379544  0.011824518 0.0070142871  0.033016645  -0.32740607   -0.3159293   0.72017336        0.075    1.4156686        1e-10 1.6003852e-11    6.2484955    2.4501334    31.520363 0.0042905197  -0.20641161 -0.00073600501   0.19947984   0.12574364   -1.4191401 
 3740000    4.0273905    1.2802667    2.7471239  -0.23202506   0.85355959   0.99788446   0.75376711   -1.2298232            1 -0.099795688  -0.35228392  -0.40121867   0.45411553 -0.0033635138  0.083161158  0.068450697  -0.25527929  -0.24223873   0.71790244        0.075    1.4175668        1e-10 1.5953387e-11    6.2682612    2.4514329    31.520363 0.0016676167  -0.20449396 -0.0068796298   0.18973391   0.19244037    1.9581797 
 3741000    4.0172646    1.2670843    2.7501803   -0.2305622   0.84477088   0.99423667   0.74141998   -1.2298232            1  -0.12330997  -0.41256426  -0.38069698   0.42333134 -0.0083077695 -0.042870724  0.022630911  -0.27624666  -0.26523231   0.71631878        0.075    1.4479221        1e-10 1.5918195e-11    6.2821193    2.4555316    31.520363 -0.0011850853  -0.22014967 0.0074892946   0.18879728   0.47131148    1.0346946 
 3742000    4.0316808    1.3022924    2.7293884  -0.23090179   0.86824424    1.0257655   0.75932114   -1.2298232            1  -0.14388551  -0.40806747  -0.34439463   0.32080556 0.0030628135  0.023203731  0.041373233  -0.30051477  -0.29030843    0.7176945        0.075    1.4412209        1e-10 1.5948767e-11    6.2700773    2.4618089    31.520363 -0.0051958902  -0.19174617 -0.010945382   0.20108381  -0.12970054    1.5977042 
 3743000    4.0351108    1.2805561    2.7545547  -0.22831654   0.85375255    1.0024669   0.75092248   -1.2298232            1  -0.17007482  -0.41375156  -0.42218313   0.32571022 2.7553056e-05  0.021078199 -0.027306245  -0.32497165  -0.31317199   0.72048408        0.075    1.4357122        1e-10 1.6010757e-11    6.2458007    2.4485906    31.520363 -0.0069265482  -0.20279779 0.0019720572   0.20887839   0.30891709    1.7588667 
 3744000    4.0410805    1.2871383    2.7539421  -0.22804057   0.85814097    1.0130004   0.75105887   -1.2298232            1 -0.078000683  -0.36396775  -0.31953078   0.44949648 -0.024710471 -0.024225155 -0.011943013  -0.23292564  -0.22260146   0.72065107        0.075    1.4497234        1e-10 1.6014468e-11    6.2443534     2.445841    31.520363 -0.0041645286  -0.19116065 0.0097427211   0.21963128   -1.1417761    1.4371267 
 3745000    4.0367227    1.2940432    2.7426795  -0.23047459   0.86274445    1.0072068   0.76285768   -1.2298232            1   -0.1143501  -0.35305403  -0.36813281   0.37813654 -0.0076759215 0.00072153098 0.0029369617  -0.27170886  -0.25812386   0.71532724        0.075    1.4436468        1e-10 1.5896161e-11    6.2908271    2.4420333    31.520363 -0.00015693809  -0.19270205 -0.0082889029   0.21226509  -0.83571742   0.92381049 
 3746000     4.032665     1.279751     2.752914  -0.22932448   0.85321579    1.0027294   0.74983263   -1.2298232            1 -0.038761592  -0.34065545  -0.32254432   0.54691499 -0.0053223044  0.015764517  0.035379656  -0.19343361  -0.18189622   0.71724059        0.075    1.4429184        1e-10 1.593868e-11    6.2740453    2.4379237    31.520363 0.0091753054  -0.20351709 0.0017934581   0.20490459  -0.73794445    4.5173262 
 3747000    4.0169704    1.2686001    2.7483703  -0.22807038   0.84578144   0.99061307   0.74563752   -1.2298232            1  -0.14989906  -0.40465468   -0.4045061   0.35946361 -0.00064525991  0.050978282 -0.021452338  -0.30370572  -0.29130414   0.71426869        0.075    1.4419895        1e-10 1.5872638e-11    6.3001501    2.4428617    31.520363  0.011966775   -0.1916881 0.0076496215   0.20482331  -0.94852992  -0.33675169 
 3748000    4.0008409    1.2702081    2.7306328  -0.22988066    0.8468535    1.0022784   0.73937904   -1.2298232            1 -0.027738998  -0.30816214    -0.286251   0.51119615 -0.006607066  0.085735521  0.048025118  -0.18025469  -0.17080925   0.71717164        0.075    1.4244148        1e-10 1.5937148e-11    6.2746486    2.4488339    31.520363 -0.0037545152  -0.19653393 -0.0056250672   0.19477382  -0.43169204   0.41160964 
 3749000    4.0216709    1.2826141    2.7390568  -0.22884236   0.85512464    1.0014852   0.75392356   -1.2298232            1  -0.16289537  -0.39773531  -0.42612424   0.33517345 -0.017003631  0.041025885 -0.055185666  -0.31841124   -0.3058524   0.72072679        0.075    1.4105989        1e-10 1.6016151e-11    6.2436974    2.4510258    31.520363 -0.015842644  -0.20921653 -0.0053719765    0.2065166   -1.5383292   0.57401673 
 3750000    4.0272002     1.280861    2.7463391   -0.2303854   0.85395586     1.012318   0.74444943   -1.2298232            1  -0.11684144  -0.37578607  -0.39163067   0.41689242 0.0049321159   0.05597133  0.056881686  -0.27040303   -0.2613448   0.72078187        0.075    1.4143202        1e-10 1.6017375e-11    6.2432203    2.4497374    31.520363 0.0014261349    -0.199998 0.0013644718   0.18393639  -0.47971991   0.47553757 
 3751000    4.0073397    1.2711462    2.7361935  -0.23023727   0.84747892    1.0036424   0.73949338   -1.2298232            1  -0.19863711  -0.42922033  -0.41978531   0.25309431  -0.02144582  0.016406209 -0.023103754  -0.35117639  -0.34190208   0.71466135        0.075    1.4158118        1e-10 1.5881363e-11    6.2966886    2.4424224    31.520363 -0.00088575454  -0.18649588 -0.0041849136   0.20632825    1.3053357       1.1127 
 3752000    4.0367887    1.2830694    2.7537193  -0.22604665   0.85542817   0.99287996   0.76039212   -1.2298232            1  -0.10751577  -0.35530121  -0.37782635   0.41058024 -0.00050430211   0.02521314  0.031539371  -0.26436595  -0.24924445   0.71228045        0.075    1.4059854        1e-10 1.5828454e-11    6.3177362    2.4531398    31.520363 0.0094556703  -0.20573398 -0.0049675639    0.2068973   0.26770734   0.78057707 
 3753000    4.0187248    1.2780458     2.740679  -0.23238531   0.85207895     1.001707   0.74861647   -1.2298232            1   -0.2418017  -0.44961414  -0.45159116   0.17580019 0.0043549998   0.04467208 0.00063744185  -0.39622285  -0.38479039   0.72065579        0.075    1.4216417        1e-10 1.6014573e-11    6.2443126    2.4427663    31.520363 0.0006527664  -0.19387551 0.0078554605   0.16980458  -0.24354771   0.93862339 
 3754000    4.0580891     1.296035    2.7620541  -0.23030951   0.86407239    1.0059734   0.76595828   -1.2298232            1  -0.07723547  -0.33625369  -0.35039612    0.4549434 0.00098373356 -0.011157405  0.058134686  -0.23523381  -0.22083316   0.72407809        0.075    1.4236934        1e-10 1.6090624e-11    6.2147992     2.449528    31.520363 -0.00021319369  -0.18730833 0.0031812819   0.18559758   0.37254514   0.28930232 
 3755000     3.992688    1.2681241    2.7245638   -0.2348228   0.84546412    1.0138855   0.72899578   -1.2298232            1  -0.27867012  -0.49721742   -0.4807803   0.14198735 -0.0056266141  -0.10294527  0.062928551  -0.42904401  -0.42339724   0.71415295        0.075    1.4335258        1e-10 1.5870065e-11    6.3011712    2.4421022    31.520363 0.0028029768   -0.1958679 -0.0047782794   0.20111448   0.56375467   -2.1236497 
 3756000    3.9990929    1.2684464    2.7306465  -0.22440183   0.84567898   0.99164708    0.7447486   -1.2298232            1  -0.16239002  -0.39611026  -0.44669644   0.35563664  0.012701103   -0.0398655  0.010877856  -0.31601333  -0.30394271    0.7119131        0.075    1.4265802        1e-10 1.5820291e-11    6.3209962    2.4412182    31.520363 -0.0082480213  -0.21473018 -0.0033801201   0.22028463    1.6740351    3.4155883 
 3757000    4.0327343    1.2877268    2.7450075  -0.22721106   0.85853329     1.006816   0.75600243   -1.2298232            1  -0.11735388  -0.37370445  -0.39032098   0.41196379 0.0010068633 -0.00035734905 -0.0050552178  -0.27329857  -0.26107185   0.71741954        0.075    1.4264253        1e-10 1.5942656e-11    6.2724804    2.4531717    31.520363 0.0011681054   -0.1964222 0.0027192723   0.22375825    0.1514673   0.90046607 
 3758000    4.0506794    1.2976391    2.7530403  -0.22970971   0.86514188    1.0076336   0.76661907   -1.2298232            1  -0.18596356  -0.40087989  -0.40649212   0.24948134 -0.0072352393  0.040284594 -0.0077319549   -0.3440982  -0.32979824   0.71811142        0.075    1.4170125        1e-10 1.5958031e-11    6.2664371    2.4431188    31.520363 0.0020354895  -0.18484931 -0.0018434699   0.19406913  -0.55582474   0.88747369 
 3759000    4.0308005    1.2784365     2.752364   -0.2313158   0.85233943    0.9974186   0.75202484   -1.2298232            1 -0.084641635  -0.37276056  -0.31836975    0.4372054 -0.0030194744 -0.0016825861  0.032520328  -0.23976585  -0.22701818   0.71757643        0.075    1.4151797        1e-10 1.5946143e-11     6.271109    2.4462189    31.520363 -0.017422955  -0.19168737 0.0089761975   0.18278765   0.10424188   0.57297036 
 3760000     4.020498     1.290126     2.730372  -0.23325596   0.86013286     1.008483   0.75755545   -1.2298232            1  -0.22202437  -0.46407877  -0.44917711   0.24718276 -0.019968751 -0.012558572 -0.00062628815  -0.37828941  -0.36598031   0.72068991        0.075    1.4146316        1e-10 1.6015331e-11    6.2440169     2.456408    31.520363 8.9617015e-05  -0.19571125 -0.0071728838   0.19158702   0.42487764  0.036382876 
 3761000    4.0148934    1.2778538    2.7370397  -0.23345718   0.85195091   0.99568009   0.75257049   -1.2298232            1  -0.09171695  -0.35837953  -0.35429033   0.43751901 -0.002381038 -0.021657476  0.046432087  -0.24695372  -0.23384533   0.71489918        0.075    1.4289253        1e-10 1.5886648e-11    6.2945939    2.4455829    31.520363 0.00035446862  -0.19468204 -0.00023668997   0.19104254  -0.67177446    2.0563785 
 3762000    4.0282604    1.2836893    2.7445711  -0.23507786   0.85584148   0.99487909   0.75970807   -1.2298232            1 -0.096400315  -0.38804094  -0.31677994   0.41561993 0.0095964127 -0.033346212 -0.029488049  -0.25310939  -0.23841436   0.71483399        0.075    1.4231568        1e-10  1.58852e-11    6.2951679    2.4444198    31.520363 -0.001147156  -0.20622217 0.0019461285   0.19390935  -0.25578433     1.693627 
 3763000    4.0180793    1.2713572     2.746722  -0.23556462   0.84761963   0.98643931   0.75163623   -1.2298232            1  -0.16825064  -0.41268363  -0.43024968   0.33818141 0.0023206328 -0.033855219 -0.024287187  -0.32329469  -0.30905994   0.71810706        0.075    1.4262047        1e-10 1.5957935e-11    6.2664751    2.4502671    31.520363 -9.2938498e-07  -0.19569914 -0.007920402   0.18491227  -0.83837559    1.4448272 
 3764000    4.0016358    1.2596882    2.7419476  -0.22991306   0.83983987   0.98561364   0.73904341   -1.2298232            1  -0.20307286  -0.46355129  -0.44945596   0.30378867  0.010439484 -0.027089194 -0.006916381  -0.35551933  -0.34376431   0.71480359        0.075    1.4048601        1e-10 1.5884524e-11    6.2954357    2.4462687    31.520363 -0.0020301892   -0.2066944 0.00091508374    0.2135339  -0.99628312   0.13746003 
 3765000    4.0061324    1.2809393    2.7251931  -0.23210372   0.85400804    1.0046261   0.74986064   -1.2298232            1  -0.20631748  -0.45478114  -0.44012327   0.27595197  0.013488207  0.056920808 0.0013887025  -0.36099527  -0.34972286   0.71600313        0.075    1.4121819        1e-10 1.5911181e-11    6.2848887    2.4500843    31.520363 -0.0046917495  -0.17050102 0.0026339407   0.19767946   -1.7464251   -1.2898697 
 3766000    4.0217461    1.2858027    2.7359434   -0.2328512   0.85725047   0.99918134   0.75911501   -1.2298232            1  -0.15535394  -0.40532696  -0.43987763   0.37914278  0.016119688  0.053586161  0.029323491  -0.31194068  -0.29798211   0.72272444        0.075    1.4162476        1e-10 1.6060543e-11    6.2264395    2.4689247    31.520363 -0.0044306088  -0.20265387 -0.00070800054   0.19374321  -0.21879606    1.6682766 
 3767000    4.0148168    1.2753893    2.7394275  -0.22612116   0.85030782   0.99944453   0.74718519   -1.2298232            1  -0.16268465  -0.41866521  -0.39902962   0.32964088 -0.010421921  0.024575354  0.001982802  -0.31681056  -0.30535038   0.71933683        0.075    1.3960894        1e-10 1.5985263e-11     6.255762    2.4469315    31.520363 -0.0052514937  -0.18604747 0.0039781936   0.20189371  -0.76960907    1.3592987 
 3768000    4.0176629     1.265813    2.7518499  -0.22498737   0.84392324   0.99252119   0.74117281   -1.2298232            1   -0.1766691  -0.43745191  -0.44303887   0.35048347 -0.013266847 -0.015274634  0.044802083  -0.32955481  -0.31834657   0.70899323        0.075    1.3883289        1e-10 1.5755405e-11    6.3470282    2.4345908    31.520363 -0.0033168767  -0.19330335 0.0011088066   0.18374746    0.4512306    1.2728872 
 3769000    4.0076926    1.2622924    2.7454002  -0.22608469    0.8415761   0.98628148   0.74151916   -1.2298232            1 -0.084730432  -0.34918704  -0.36285212   0.45784787 -0.0080834694 -0.023411971  0.039162875  -0.23768758  -0.22551721   0.70807506        0.075    1.4091191        1e-10 1.5735001e-11    6.3552585    2.4410557    31.520363 0.0045111239   -0.1958237 0.0006144778   0.21188194  -0.74852211   0.43683579 
 3770000    4.0159243    1.2780888    2.7378355  -0.23080155    0.8521076    1.0013597    0.7489053   -1.2298232            1  -0.21660982  -0.45612395  -0.44110514   0.24739964 -0.013605613  -0.10572093  0.033677683  -0.37109054  -0.35954893   0.71970692        0.075    1.4079703        1e-10 1.5993487e-11    6.2525452    2.4559081    31.520363 0.0029078961  -0.23304845 -0.0011646625   0.19937816 -0.023659014  -0.60811051 
 3771000    4.0094138     1.262148    2.7472658  -0.23642165   0.84147978   0.98608059   0.74149519   -1.2298232            1   -0.1566019  -0.41616497  -0.44620289   0.39256216 0.0070117183 -0.046439467 -0.040145836  -0.30955411     -0.29736   0.72699785        0.075    1.4055955        1e-10 1.6155508e-11    6.1898395    2.4578221    31.520363 -0.0043882898  -0.19171047 0.0013445373   0.19123563  -0.55651411    2.6987614 
 3772000    4.0211074    1.2718679    2.7492395  -0.23385304   0.84796008   0.99714133   0.74480639   -1.2298232            1  -0.10547781  -0.36692647  -0.34585829   0.39635133 -0.00093099986  0.061219792 -0.006072292  -0.25911303  -0.24781477   0.71796138        0.075    1.4030719        1e-10 1.5954697e-11    6.2677466    2.4465832    31.520363 0.00026618335  -0.17493457 -0.0040277055   0.18760978  -0.40420353  -0.26944301 
 3773000    4.0152236    1.2855043    2.7297193  -0.22564762   0.85705156    1.0073541   0.75312281   -1.2298232            1   -0.0898891  -0.34207695  -0.35988493   0.43229458 0.0041742341   0.04127997 -0.027211365   -0.2452398  -0.23368388   0.71054056        0.075    1.4199682        1e-10 1.578979e-11    6.3332064    2.4461266    31.520363 0.0027877837  -0.19783809 0.0068623028   0.21045521  -0.76643983    1.2626801 
 3774000    4.0199231    1.2756321     2.744291  -0.22836029   0.85046974   0.99680184   0.74928793   -1.2298232            1  -0.20789783  -0.47074032  -0.45138239   0.29842923 0.0015048237 -0.046472959 -0.015083411  -0.36245748  -0.35018633   0.71679947        0.075    1.4168038        1e-10 1.5928877e-11    6.2779065    2.4431423    31.520363 0.0042222428  -0.17453017 -0.011804111   0.22356673  -0.12844606    1.6443392 
 3775000    4.0050658    1.2641581    2.7409076  -0.23176266   0.84281997    0.9855942   0.74409953   -1.2298232            1 -0.083476304  -0.37045091  -0.33173734   0.45175934 0.0027117551  0.034317655 -0.040863951  -0.23696572  -0.22416497   0.71892537        0.075    1.4106674        1e-10 1.5976119e-11    6.2593423    2.4452959    31.520363 0.0020553419   -0.2068293 0.0027085275   0.19141944 -0.036894456    5.1910436 
