LAMMPS (7 Aug 2019)
#--- Brush Variables---#
variable      f      index  1 2 0.5
variable      M      equal  $(v_f * 30)                 # The number of polymer chains on each brush
variable      M      equal  30                 
variable      N      string 30                 # The number of beads per chain
variable      xhi    equal  $(sqrt(v_f) * 20)                 # The width of the polymer Brush
variable      xhi    equal  20                 
variable      yhi    equal  $(sqrt(v_f) * 20)                 # The length of the polymer Brush
variable      yhi    equal  20                 
variable      wthick equal  3                  # The thickness of the walls wthick=1,2,3,4 gives 2,3,4,6 layers respectively

#--- Simulation Variables ---#
variable       Temp      index 1        #0.8 1 1.68                 #[Grest96]
variable       Tstep     equal 0.005                       # Timestep in Tau (default = 0.005)
variable       Nequil    equal 300000                       # Number of timesteps to equilibrate
variable       Ncomp     equal 700000                     # Number of timesteps to compress - until no more occilation of walls
variable       Nshear    equal 800000      #2000000                      # Number of timesteps to shear - use approx 4ns for 10m/s
variable       Nthermo   equal 1000                        # Number of timesteps between thermo data prints
variable       Ndump_e   equal 10000
variable       Ndump_c   equal 10000                      # Number of timesteps per dump file (compression)
variable       Ndump_s   equal 10000                       # Number of timesteps per dump file (shear)
variable       Wall_v    index 0.5   #0.001 0.01 0.1 0.2 0.4 0.6 0.8 1 1.2 1.4 1.6 1.8 2   # 0.005 0.05 0.1 0.5 1.5 0.001 0.003 0.2 0.0002 2                      # Wall velocity (A/fs) - equal to 10 m/s
variable       Pcomp     index 3 #3 4 5 8 10 1.50 0.5 0.05

label          sim
include        MDPBB.in
# This is an input script that creates a mono disperse polymer brush bilayer
# A coarse grained bead-spring model is used for the polymers which are end
# grafted to the surfaces of 2 opposing FCC walls at random sites.

#--- Initialization ---#

dimension     3
boundary      p p f
units         lj
atom_style    bond


#--- Moved to main.in ---#
#variable      M      equal  50                # The number of polymer chains on each brush
#variable      N      string 80                # The number of beads per chain
#variable      xhi    equal  15                # The width of the polymer Brush
#variable      yhi    equal  20                # The length of the polymer Brush
#variable      wthick equal  3                 # The thickness of the walls wthick=1,2,3,4 gives 2,3,4,6 layers respectively

variable      zhi    equal  $(1.1 * 2 * v_N + (2 * v_wthick))  # The initial height of the simulation box the value is such that no overlaps occur
variable      zhi    equal  72  
variable      z0     equal  $((v_zhi)/4 - (v_N)/30)          # This is the location at which to place the CoM of the molecule
variable      z0     equal  17          

print "The number of grafted chains = $(v_M)"
The number of grafted chains = 30
print "The number of beads per chain = $(v_N)"
The number of beads per chain = 30

variable      check  equal count(all)         # The number of atoms in the system
variable      ntwall equal count(twall)       # The number of atoms in the top wall
variable      nbwall equal count(bwall)       # The number of atoms in the bottom wall
variable      s equal 234897  #45335              # Seed for the RNG

print "zhi = ${zhi}"
zhi = 72

#--- Create the simulation box ---#

region        sbox block 0 ${xhi} 0 ${yhi} 0 ${zhi}
region        sbox block 0 20 0 ${yhi} 0 ${zhi}
region        sbox block 0 20 0 20 0 ${zhi}
region        sbox block 0 20 0 20 0 72
create_box    4 sbox bond/types 3 extra/bond/per/atom 12 extra/special/per/atom 2
Created orthogonal box = (0 0 0) to (20 20 72)
  1 by 1 by 1 MPI processor grid

mass          1 2.0                   # Wall atoms that are not grafted
mass          2 1.0                   # Grafted bead
mass          3 1.0                   # The rest of the beads on the chain
mass          4 2.0                   # Wall atoms that the chains are grafted to

bond_style    hybrid fene harmonic    # Finitely extensible linearly elastic bond between neighbouring beads
#bond_coeff    1 fene 30.0 1.5 0.0 0.0      # Values obtained from literature [Grest, Galushcko]
bond_coeff    1 fene 30.0 30.0 0.0 0.0
bond_coeff    2 fene 30.0 30.0 0.0 0.0       # This is the grafting bond between the polymer and the wall atom
special_bonds fene                    #
  0 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 4.81606e-05 secs
pair_style	  lj/cut 1.122462         # LJ potential with rc=2^1/6
#pair_coeff	  * * 1.0 1.0             # LJ potential acts between all atoms
pair_coeff    1 1 0.0 0.0
pair_coeff    1 2 1.0 1.0
pair_coeff    1 3 1.0 1.0
pair_coeff    2 2 1.0 1.0
pair_coeff    2 3 1.0 1.0
pair_coeff    2 4 1.0 1.0
pair_coeff    3 3 1.0 1.0
pair_coeff    3 4 1.0 1.0
pair_coeff    4 4 0.0 0.0
neighbor      10 bin                  #
neigh_modify  one 4000

#--- Create and read the molecule file ---#
python        BSMolf input 1 $N format i file BSMolf.py
python        BSMolf input 1 30 format i file BSMolf.py
python        BSMolf invoke    # Call the python function with number of beads to write the mol file
molecule      bs     bsmol.txt     # Read the Mol file to define the polymer chain
Read molecule bs:
  30 atoms with max type 2
  29 bonds with max type 1
  0 angles with max type 0
  0 dihedrals with max type 0
  0 impropers with max type 0

#--- Define the FCC wall region ---#
region        wall  block 0 ${xhi} 0 ${yhi} 0 ${wthick}
region        wall  block 0 20 0 ${yhi} 0 ${wthick}
region        wall  block 0 20 0 20 0 ${wthick}
region        wall  block 0 20 0 20 0 3
lattice       fcc 1
Lattice spacing in x,y,z = 1.5874 1.5874 1.5874

#--- Create the Top Brush  (At the bottom then rotate 180 degrees to top) ---#

create_atoms  1 region wall
Created 1352 atoms
  create_atoms CPU = 0.00186181 secs
group         twall  region wall
1352 atoms in group twall
#group         tsurf  region wsurf

# A loop to insert the Chains into the sim box
variable      i loop $M                                   # Index to insert N total number of chains
variable      i loop 30                                   
label         loop                                        # Start of loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 850                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[850]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 213                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[213]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1022                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1022]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1031                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1031]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1031 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1031                         
1 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 1
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 1
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1031]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1031]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1352                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1352+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 9.5244063118092 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 9.5244063118092 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000110865 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1382               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1031 $b
create_bonds  single/bond 2 1031 1353
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000190973 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 982                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[982]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1332                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1332]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1332 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1332                         
2 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 2
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 2
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1332]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1332]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1382                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1382+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 19.8425131496025 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 19.8425131496025 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 6.79493e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1412               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1332 $b
create_bonds  single/bond 2 1332 1383
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000187159 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 643                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[643]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 454                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[454]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 585                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[585]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 979                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[979]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 979 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 979                         
3 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 3
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 3
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[979]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[979]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1412                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1412+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 7.937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 7.937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.01086e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1442               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 979 $b
create_bonds  single/bond 2 979 1413
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000196934 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1211                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1211]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1211 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1211                         
4 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 4
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 4
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1211]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1211]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1442                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1442+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 15.874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 15.874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.10759e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1472               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1211 $b
create_bonds  single/bond 2 1211 1443
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000197887 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 11                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[11]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 258                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[258]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 442                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[442]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1095                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1095]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1095 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1095                         
5 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 5
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 5
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1095]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1095]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1472                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1472+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 12.6992084157456 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 12.6992084157456 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000153065 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1502               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1095 $b
create_bonds  single/bond 2 1095 1473
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.00022912 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 960                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[960]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 960 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 960                         
6 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 6
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 6
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[960]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[960]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1502                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1502+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 8.7307057858251 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 8.7307057858251 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 7.08103e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1532               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 960 $b
create_bonds  single/bond 2 960 1503
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000215054 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 931                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[931]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 931 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 931                         
7 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 7
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 7
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[931]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[931]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1532                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1532+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 6.3496042078728 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 6.3496042078728 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000102997 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1562               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 931 $b
create_bonds  single/bond 2 931 1533
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000224113 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 755                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[755]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 755 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 755                         
8 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 8
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 8
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[755]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[755]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1562                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1562+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 1.5874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 1.5874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 7.48634e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1592               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 755 $b
create_bonds  single/bond 2 755 1563
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000233889 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1053                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1053]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 832                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[832]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 832 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 832                         
9 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 9
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 9
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[832]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[832]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1592                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1592+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 3.9685026299205 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 3.9685026299205 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 7.60555e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1622               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 832 $b
create_bonds  single/bond 2 832 1593
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000230074 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 838                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[838]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 163                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[163]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1178                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1178]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 814                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[814]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1242                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1242]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 942                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[942]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1214                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1214]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 796                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[796]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 796 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 796                         
10 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 10
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 10
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[796]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[796]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1622                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1622+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 3.9685026299205 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 3.9685026299205 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.70364e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1652               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 796 $b
create_bonds  single/bond 2 796 1623
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000307083 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1150                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1150]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1133                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1133]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 563                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[563]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1350                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1350]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1318                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1318]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 979                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[979]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 979 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 979                         
10 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 10
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 11
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[979]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[979]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1652                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1652+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1270                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1270]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 320                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[320]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1261                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1261]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 177                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[177]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1150                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1150]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1263                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1263]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1263 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1263                         
11 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 11
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 11
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1263]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1263]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1652                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1652+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 17.4614115716502 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 17.4614115716502 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.32081e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1682               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1263 $b
create_bonds  single/bond 2 1263 1653
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000283003 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 463                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[463]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 352                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[352]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 898                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[898]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 631                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[631]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 196                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[196]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1245                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1245]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1293                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1293]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1223                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1223]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1223 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1223                         
12 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 12
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 12
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1223]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1223]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1682                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1682+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 15.874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 15.874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000108957 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1712               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1223 $b
create_bonds  single/bond 2 1223 1683
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000251055 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1078                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1078]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 594                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[594]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 502                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[502]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 948                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[948]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 948 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 948                         
13 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 13
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 13
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[948]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[948]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1712                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1712+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 8.7307057858251 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 8.7307057858251 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.01086e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1742               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 948 $b
create_bonds  single/bond 2 948 1713
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000305891 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 127                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[127]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 512                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[512]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 590                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[590]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 445                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[445]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 825                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[825]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 387                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[387]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 323                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[323]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 117                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[117]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 921                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[921]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 992                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[992]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 992 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 992                         
14 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 14
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 14
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[992]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[992]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1742                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1742+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 10.3181068377933 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 10.3181068377933 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000157118 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1772               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 992 $b
create_bonds  single/bond 2 992 1743
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000347853 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 456                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[456]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 676                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[676]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 582                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[582]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 307                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[307]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 784                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[784]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 784 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 784                         
15 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 15
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 15
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[784]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[784]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1772                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1772+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 3.9685026299205 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 3.9685026299205 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.005265 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1802               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 784 $b
create_bonds  single/bond 2 784 1773
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000339031 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 247                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[247]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1193                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1193]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 624                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[624]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1326                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1326]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1038                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1038]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1243                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1243]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1243 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1243                         
16 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 16
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 16
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1243]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1243]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1802                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1802+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 15.874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 15.874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.29697e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1832               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1243 $b
create_bonds  single/bond 2 1243 1803
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000345945 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1344                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1344]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1344 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1344                         
17 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 17
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 17
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1344]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1344]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1832                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1832+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 19.8425131496025 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 19.8425131496025 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.00036788 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1862               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1344 $b
create_bonds  single/bond 2 1344 1833
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000398159 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 641                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[641]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 449                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[449]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 96                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[96]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 350                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[350]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 246                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[246]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 555                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[555]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 808                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[808]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 808 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 808                         
18 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 18
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 18
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[808]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[808]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1862                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1862+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 3.9685026299205 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 3.9685026299205 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000115156 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1892               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 808 $b
create_bonds  single/bond 2 808 1863
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000332117 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 643                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[643]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1123                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1123]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1123 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1123                         
19 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 19
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 19
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1123]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1123]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1892                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1892+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 12.6992084157456 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 12.6992084157456 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.82149e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1922               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1123 $b
create_bonds  single/bond 2 1123 1893
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000313997 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 202                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[202]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 224                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[224]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1084                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1084]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1084 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1084                         
20 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 20
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 20
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1084]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1084]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1922                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1922+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 11.9055078897615 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 11.9055078897615 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.79765e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1952               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1084 $b
create_bonds  single/bond 2 1084 1923
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.00030303 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 858                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[858]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 306                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[306]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 436                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[436]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 365                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[365]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1064                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1064]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1064 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1064                         
21 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 21
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 21
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1064]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1064]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1952                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1952+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 11.9055078897615 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 11.9055078897615 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000103951 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1982               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1064 $b
create_bonds  single/bond 2 1064 1953
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000429869 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1177                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1177]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 588                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[588]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1349                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1349]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 882                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[882]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1238                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1238]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 582                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[582]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 734                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[734]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 989                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[989]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 586                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[586]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 397                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[397]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 19                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[19]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 203                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[203]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 779                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[779]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 779 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 779                         
22 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 22
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 22
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[779]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[779]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1982                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1982+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 1.5874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 1.5874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000112057 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 2012               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 779 $b
create_bonds  single/bond 2 779 1983
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.00044179 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 144                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[144]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 686                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[686]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 244                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[244]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 445                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[445]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 53                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[53]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1270                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1270]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 465                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[465]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 488                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[488]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 659                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[659]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 994                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[994]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 249                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[249]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 684                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[684]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 684 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 684                         
23 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 23
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 23
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[684]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[684]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 2012                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 2012+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 0.7937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 0.7937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.39369e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 2042               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 684 $b
create_bonds  single/bond 2 684 2013
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000592947 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 649                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[649]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1248                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1248]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1248 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1248                         
24 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 24
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 24
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1248]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1248]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 2042                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 2042+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 16.6677110456661 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 16.6677110456661 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000149965 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 2072               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1248 $b
create_bonds  single/bond 2 1248 2043
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000825882 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 329                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[329]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 836                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[836]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 836 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 836                         
25 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 25
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 25
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[836]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[836]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 2072                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 2072+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 5.5559036818887 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 5.5559036818887 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.00011301 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 2102               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 836 $b
create_bonds  single/bond 2 836 2073
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000453949 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 290                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[290]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1204                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1204]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1204 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1204                         
26 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 26
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 26
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1204]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1204]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 2102                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 2102+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 16.6677110456661 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 16.6677110456661 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.89437e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 2132               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1204 $b
create_bonds  single/bond 2 1204 2103
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000477076 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 241                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[241]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 430                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[430]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 515                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[515]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 723                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[723]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 723 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 723                         
27 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 27
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 27
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[723]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[723]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 2132                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 2132+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 0 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 0 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000108004 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 2162               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 723 $b
create_bonds  single/bond 2 723 2133
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000419855 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 562                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[562]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1075                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1075]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1075 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1075                         
28 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 28
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 28
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1075]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1075]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 2162                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 2162+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 11.1118073637774 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 11.1118073637774 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.20296e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 2192               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1075 $b
create_bonds  single/bond 2 1075 2163
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000377893 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 771                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[771]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 771 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 771                         
29 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 29
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 29
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[771]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[771]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 2192                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 2192+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 1.5874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 1.5874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000106812 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 2222               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 771 $b
create_bonds  single/bond 2 771 2193
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000349998 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 660                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[660]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 787                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[787]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 787 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 787                         
30 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 30
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 30
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[787]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[787]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 2222                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 2222+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 3.1748021039364 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 3.1748021039364 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.799e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 2252               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 787 $b
create_bonds  single/bond 2 787 2223
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000370979 secs
next i
jump MDPBB.in loop    # End of the loop

# Rotate the created brush about the centre of the simulation box by 180 degrees to make it true top brush
displace_atoms all rotate $(v_xhi/2.0) $(v_yhi/2.0) $(v_zhi/2.0 - 1) 1 0 0 180 units box
displace_atoms all rotate 10 $(v_yhi/2.0) $(v_zhi/2.0 - 1) 1 0 0 180 units box
displace_atoms all rotate 10 10 $(v_zhi/2.0 - 1) 1 0 0 180 units box
displace_atoms all rotate 10 10 35 1 0 0 180 units box

variable      ntop0 equal ${check}          # Count the total number of atoms in the top brush
variable      ntop0 equal 2252          

#--- Create the Bottom brush ---#

# Repeating the same procedure as above again but with new atoms

create_atoms  1 region wall
Created 1352 atoms
  create_atoms CPU = 0.000329018 secs
group         bwall region wall
1352 atoms in group bwall
variable      nbwall0 equal ${nbwall}
variable      nbwall0 equal 1352

variable      j loop $M
variable      j loop 30
label         loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2339
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2339]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2408
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2408]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2805
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2805]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2714
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2714]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2768
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2768]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2922
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2922]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3375
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3375]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3375 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3375                         
1 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 1
print         "j = $(v_j)"
j = 1
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3375]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3375]
variable      check0 equal ${check}
variable      check0 equal 3604
variable      b equal ${check}+1
variable      b equal 3604+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 12.6992084157456 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 12.6992084157456 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000240088 secs
variable      check1 equal ${check}
variable      check1 equal 3634
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3375 $b
create_bonds  single/bond 2 3375 3605
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000590801 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3337
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3337]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3591
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3591]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3591 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3591                         
2 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 2
print         "j = $(v_j)"
j = 2
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3591]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3591]
variable      check0 equal ${check}
variable      check0 equal 3634
variable      b equal ${check}+1
variable      b equal 3634+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 19.0488126236184 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 19.0488126236184 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.00436711 secs
variable      check1 equal ${check}
variable      check1 equal 3664
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3591 $b
create_bonds  single/bond 2 3591 3635
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.00264001 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2388
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2388]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2962
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2962]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3410
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3410]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3528
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3528]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3528 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3528                         
3 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 3
print         "j = $(v_j)"
j = 3
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3528]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3528]
variable      check0 equal ${check}
variable      check0 equal 3664
variable      b equal ${check}+1
variable      b equal 3664+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 18.2551120976343 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 18.2551120976343 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000173092 secs
variable      check1 equal ${check}
variable      check1 equal 3694
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3528 $b
create_bonds  single/bond 2 3528 3665
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000464916 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2699
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2699]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3000
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3000]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3000 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3000                         
4 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 4
print         "j = $(v_j)"
j = 4
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3000]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3000]
variable      check0 equal ${check}
variable      check0 equal 3694
variable      b equal ${check}+1
variable      b equal 3694+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 6.3496042078728 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 6.3496042078728 2.3811015779523 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 6.3496042078728 2.3811015779523 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000150919 secs
variable      check1 equal ${check}
variable      check1 equal 3724
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3000 $b
create_bonds  single/bond 2 3000 3695
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.00235891 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2797
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2797]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2717
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2717]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3345
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3345]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3175
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3175]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3175 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3175                         
5 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 5
print         "j = $(v_j)"
j = 5
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3175]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3175]
variable      check0 equal ${check}
variable      check0 equal 3724
variable      b equal ${check}+1
variable      b equal 3724+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 6.3496042078728 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 6.3496042078728 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.00030303 secs
variable      check1 equal ${check}
variable      check1 equal 3754
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3175 $b
create_bonds  single/bond 2 3175 3725
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.00160813 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3577
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3577]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2487
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2487]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2451
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2451]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2643
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2643]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3259
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3259]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3259 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3259                         
6 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 6
print         "j = $(v_j)"
j = 6
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3259]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3259]
variable      check0 equal ${check}
variable      check0 equal 3754
variable      b equal ${check}+1
variable      b equal 3754+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 9.5244063118092 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 9.5244063118092 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000174999 secs
variable      check1 equal ${check}
variable      check1 equal 3784
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3259 $b
create_bonds  single/bond 2 3259 3755
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.00194788 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3423
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3423]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3423 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3423                         
7 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 7
print         "j = $(v_j)"
j = 7
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3423]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3423]
variable      check0 equal ${check}
variable      check0 equal 3784
variable      b equal ${check}+1
variable      b equal 3784+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 14.2866094677138 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 14.2866094677138 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000152826 secs
variable      check1 equal ${check}
variable      check1 equal 3814
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3423 $b
create_bonds  single/bond 2 3423 3785
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0022831 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2293
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2293]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2278
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2278]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2757
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2757]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2999
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2999]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 2999 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 2999                         
8 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 8
print         "j = $(v_j)"
j = 8
variable      x0 equal x[${randatomj}]
variable      x0 equal x[2999]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[2999]
variable      check0 equal ${check}
variable      check0 equal 3814
variable      b equal ${check}+1
variable      b equal 3814+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 1.5874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 1.5874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001719 secs
variable      check1 equal ${check}
variable      check1 equal 3844
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 2999 $b
create_bonds  single/bond 2 2999 3815
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0006001 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3322
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3322]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2797
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2797]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3249
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3249]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2865
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2865]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2293
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2293]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2434
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2434]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3437
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3437]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3495
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3495]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3495 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3495                         
9 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 9
print         "j = $(v_j)"
j = 9
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3495]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3495]
variable      check0 equal ${check}
variable      check0 equal 3844
variable      b equal ${check}+1
variable      b equal 3844+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 15.874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 15.874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000158072 secs
variable      check1 equal ${check}
variable      check1 equal 3874
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3495 $b
create_bonds  single/bond 2 3495 3845
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000616074 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2418
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2418]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3086
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3086]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3352
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3352]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3352 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3352                         
10 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 10
print         "j = $(v_j)"
j = 10
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3352]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3352]
variable      check0 equal ${check}
variable      check0 equal 3874
variable      b equal ${check}+1
variable      b equal 3874+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 13.4929089417297 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 13.4929089417297 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000159025 secs
variable      check1 equal ${check}
variable      check1 equal 3904
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3352 $b
create_bonds  single/bond 2 3352 3875
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000551939 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3302
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3302]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3474
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3474]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3588
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3588]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3588 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3588                         
11 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 11
print         "j = $(v_j)"
j = 11
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3588]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3588]
variable      check0 equal ${check}
variable      check0 equal 3904
variable      b equal ${check}+1
variable      b equal 3904+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 19.8425131496025 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 19.8425131496025 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.00018096 secs
variable      check1 equal ${check}
variable      check1 equal 3934
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3588 $b
create_bonds  single/bond 2 3588 3905
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.00167084 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2533
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2533]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2597
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2597]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3405
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3405]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2400
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2400]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2552
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2552]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2499
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2499]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2274
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2274]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2286
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2286]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2581
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2581]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2569
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2569]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2372
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2372]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3155
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3155]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3155 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3155                         
12 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 12
print         "j = $(v_j)"
j = 12
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3155]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3155]
variable      check0 equal ${check}
variable      check0 equal 3934
variable      b equal ${check}+1
variable      b equal 3934+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 6.3496042078728 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 6.3496042078728 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.00031805 secs
variable      check1 equal ${check}
variable      check1 equal 3964
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3155 $b
create_bonds  single/bond 2 3155 3935
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.00102687 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3508
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3508]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3508 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3508                         
13 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 13
print         "j = $(v_j)"
j = 13
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3508]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3508]
variable      check0 equal ${check}
variable      check0 equal 3964
variable      b equal ${check}+1
variable      b equal 3964+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 18.2551120976343 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 18.2551120976343 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000157118 secs
variable      check1 equal ${check}
variable      check1 equal 3994
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3508 $b
create_bonds  single/bond 2 3508 3965
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000567913 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2857
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2857]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3423
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3423]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3423 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3423                         
13 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 13
print         "j = $(v_j)"
j = 14
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3423]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3423]
variable      check0 equal ${check}
variable      check0 equal 3994
variable      b equal ${check}+1
variable      b equal 3994+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3228
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3228]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3228 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3228                         
14 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 14
print         "j = $(v_j)"
j = 14
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3228]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3228]
variable      check0 equal ${check}
variable      check0 equal 3994
variable      b equal ${check}+1
variable      b equal 3994+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 8.7307057858251 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 8.7307057858251 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000178099 secs
variable      check1 equal ${check}
variable      check1 equal 4024
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3228 $b
create_bonds  single/bond 2 3228 3995
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000613928 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3270
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3270]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2940
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2940]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 2940 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 2940                         
15 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 15
print         "j = $(v_j)"
j = 15
variable      x0 equal x[${randatomj}]
variable      x0 equal x[2940]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[2940]
variable      check0 equal ${check}
variable      check0 equal 4024
variable      b equal ${check}+1
variable      b equal 4024+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 0.7937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 0.7937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000163078 secs
variable      check1 equal ${check}
variable      check1 equal 4054
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 2940 $b
create_bonds  single/bond 2 2940 4025
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000594854 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2320
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2320]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3309
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3309]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3250
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3250]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2319
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2319]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2916
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2916]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2564
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2564]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2661
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2661]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2459
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2459]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3594
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3594]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3301
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3301]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2440
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2440]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2349
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2349]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3216
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3216]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3216 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3216                         
16 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 16
print         "j = $(v_j)"
j = 16
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3216]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3216]
variable      check0 equal ${check}
variable      check0 equal 4054
variable      b equal ${check}+1
variable      b equal 4054+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 8.7307057858251 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 8.7307057858251 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000158072 secs
variable      check1 equal ${check}
variable      check1 equal 4084
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3216 $b
create_bonds  single/bond 2 3216 4055
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000588894 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3269
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3269]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2286
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2286]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3152
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3152]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3152 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3152                         
17 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 17
print         "j = $(v_j)"
j = 17
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3152]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3152]
variable      check0 equal ${check}
variable      check0 equal 4084
variable      b equal ${check}+1
variable      b equal 4084+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 7.1433047338569 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 7.1433047338569 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.00142002 secs
variable      check1 equal ${check}
variable      check1 equal 4114
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3152 $b
create_bonds  single/bond 2 3152 4085
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0022881 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2376
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2376]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2356
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2356]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2961
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2961]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2680
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2680]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2433
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2433]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3239
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3239]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3239 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3239                         
18 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 18
print         "j = $(v_j)"
j = 18
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3239]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3239]
variable      check0 equal ${check}
variable      check0 equal 4114
variable      b equal ${check}+1
variable      b equal 4114+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 7.937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 7.937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000168085 secs
variable      check1 equal ${check}
variable      check1 equal 4144
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3239 $b
create_bonds  single/bond 2 3239 4115
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.00128222 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3093
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3093]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2494
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2494]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2279
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2279]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2546
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2546]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3295
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3295]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3295 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3295                         
19 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 19
print         "j = $(v_j)"
j = 19
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3295]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3295]
variable      check0 equal ${check}
variable      check0 equal 4144
variable      b equal ${check}+1
variable      b equal 4144+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 11.1118073637774 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 11.1118073637774 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000154972 secs
variable      check1 equal ${check}
variable      check1 equal 4174
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3295 $b
create_bonds  single/bond 2 3295 4145
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.00626493 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2594
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2594]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2700
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2700]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2835
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2835]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2504
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2504]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2917
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2917]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3026
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3026]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2607
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2607]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3476
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3476]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3476 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3476                         
20 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 20
print         "j = $(v_j)"
j = 20
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3476]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3476]
variable      check0 equal ${check}
variable      check0 equal 4174
variable      b equal ${check}+1
variable      b equal 4174+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 16.6677110456661 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 16.6677110456661 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000111818 secs
variable      check1 equal ${check}
variable      check1 equal 4204
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3476 $b
create_bonds  single/bond 2 3476 4175
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.00041604 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2927
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2927]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2422
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2422]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2511
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2511]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2525
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2525]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2954
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2954]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2474
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2474]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3462
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3462]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3473
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3473]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3561
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3561]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3170
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3170]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3069
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3069]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2855
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2855]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3550
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3550]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3420
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3420]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3420 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3420                         
21 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 21
print         "j = $(v_j)"
j = 21
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3420]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3420]
variable      check0 equal ${check}
variable      check0 equal 4204
variable      b equal ${check}+1
variable      b equal 4204+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 15.0803099936979 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 15.0803099936979 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000155926 secs
variable      check1 equal ${check}
variable      check1 equal 4234
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3420 $b
create_bonds  single/bond 2 3420 4205
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000626087 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2632
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2632]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3569
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3569]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3378
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3378]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2844
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2844]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2984
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2984]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 2984 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 2984                         
22 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 22
print         "j = $(v_j)"
j = 22
variable      x0 equal x[${randatomj}]
variable      x0 equal x[2984]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[2984]
variable      check0 equal ${check}
variable      check0 equal 4234
variable      b equal ${check}+1
variable      b equal 4234+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 2.3811015779523 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 2.3811015779523 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000168085 secs
variable      check1 equal ${check}
variable      check1 equal 4264
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 2984 $b
create_bonds  single/bond 2 2984 4235
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000928879 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2624
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2624]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2438
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2438]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2564
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2564]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3360
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3360]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3360 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3360                         
23 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 23
print         "j = $(v_j)"
j = 23
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3360]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3360]
variable      check0 equal ${check}
variable      check0 equal 4264
variable      b equal ${check}+1
variable      b equal 4264+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 13.4929089417297 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 13.4929089417297 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.00019002 secs
variable      check1 equal ${check}
variable      check1 equal 4294
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3360 $b
create_bonds  single/bond 2 3360 4265
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000672102 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2550
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2550]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3033
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3033]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3163
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3163]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3163 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3163                         
24 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 24
print         "j = $(v_j)"
j = 24
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3163]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3163]
variable      check0 equal ${check}
variable      check0 equal 4294
variable      b equal ${check}+1
variable      b equal 4294+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 6.3496042078728 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 6.3496042078728 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000197887 secs
variable      check1 equal ${check}
variable      check1 equal 4324
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3163 $b
create_bonds  single/bond 2 3163 4295
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.00067997 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2544
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2544]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3010
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3010]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3085
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3085]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3531
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3531]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3531 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3531                         
25 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 25
print         "j = $(v_j)"
j = 25
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3531]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3531]
variable      check0 equal ${check}
variable      check0 equal 4324
variable      b equal ${check}+1
variable      b equal 4324+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 17.4614115716502 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 17.4614115716502 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000181913 secs
variable      check1 equal ${check}
variable      check1 equal 4354
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3531 $b
create_bonds  single/bond 2 3531 4325
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.00067997 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3011
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3011]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3011 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3011                         
26 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 26
print         "j = $(v_j)"
j = 26
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3011]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3011]
variable      check0 equal ${check}
variable      check0 equal 4354
variable      b equal ${check}+1
variable      b equal 4354+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 1.5874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 1.5874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000174046 secs
variable      check1 equal ${check}
variable      check1 equal 4384
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3011 $b
create_bonds  single/bond 2 3011 4355
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.00336599 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3522
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3522]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2369
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2369]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3150
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3150]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2348
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2348]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3018
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3018]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3272
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3272]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3272 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3272                         
27 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 27
print         "j = $(v_j)"
j = 27
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3272]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3272]
variable      check0 equal ${check}
variable      check0 equal 4384
variable      b equal ${check}+1
variable      b equal 4384+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 10.3181068377933 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 10.3181068377933 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000106812 secs
variable      check1 equal ${check}
variable      check1 equal 4414
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3272 $b
create_bonds  single/bond 2 3272 4385
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000423908 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3517
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3517]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3536
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3536]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3536 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3536                         
28 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 28
print         "j = $(v_j)"
j = 28
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3536]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3536]
variable      check0 equal ${check}
variable      check0 equal 4414
variable      b equal ${check}+1
variable      b equal 4414+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 18.2551120976343 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 18.2551120976343 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000118971 secs
variable      check1 equal ${check}
variable      check1 equal 4444
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3536 $b
create_bonds  single/bond 2 3536 4415
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000417948 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2482
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2482]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3353
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3353]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2480
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2480]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2307
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2307]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3140
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3140]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3140 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3140                         
29 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 29
print         "j = $(v_j)"
j = 29
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3140]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3140]
variable      check0 equal ${check}
variable      check0 equal 4444
variable      b equal ${check}+1
variable      b equal 4444+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 7.1433047338569 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 7.1433047338569 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000179052 secs
variable      check1 equal ${check}
variable      check1 equal 4474
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3140 $b
create_bonds  single/bond 2 3140 4445
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000710011 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2916
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2916]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2901
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2901]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3104
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3104]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3104 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3104                         
30 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 30
print         "j = $(v_j)"
j = 30
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3104]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3104]
variable      check0 equal ${check}
variable      check0 equal 4474
variable      b equal ${check}+1
variable      b equal 4474+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 6.3496042078728 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 6.3496042078728 5.5559036818887 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 6.3496042078728 5.5559036818887 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000201941 secs
variable      check1 equal ${check}
variable      check1 equal 4504
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3104 $b
create_bonds  single/bond 2 3104 4475
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000867844 secs
next j
jump MDPBB.in loopj

# Assign the beads to 2 different groups of grafted and non-grafted beads

group         gbeads type 2
60 atoms in group gbeads
group         fbeads type 3
1740 atoms in group fbeads

#--- Create harmonic bonds in the walls ---#
bond_coeff    3 harmonic 800.0 $(1.5874 * sqrt(2)/2)
bond_coeff    3 harmonic 800.0 1.1224613044555256103
create_bonds  many bwall bwall 3 0.5 1.2
Neighbor list info ...
  update every 1 steps, delay 10 steps, check yes
  max neighbors/atom: 4000, page size: 100000
  master list distance cutoff = 11.1225
  ghost atom cutoff = 11.1225
  binsize = 5.56123, bins = 4 4 13
  2 neighbor lists, perpetual/occasional/extra = 1 1 0
  (1) command create_bonds, occasional
      attributes: full, newton on
      pair build: full/bin
      stencil: full/bin/3d
      bin: standard
  (2) pair lj/cut, perpetual
      attributes: half, newton on
      pair build: half/bin/newton
      stencil: half/bin/3d/newton
      bin: standard
WARNING: Communication cutoff 11.1225 is shorter than a bond length based estimate of 11.6837. This may lead to errors. (../comm.cpp:685)
Added 6964 bonds, new total = 8764
  14 = max # of 1-2 neighbors
  14 = max # of special neighbors
  special bonds CPU = 0.00135708 secs
create_bonds  many twall twall 3 0.5 1.2
WARNING: Communication cutoff 11.1225 is shorter than a bond length based estimate of 11.6837. This may lead to errors. (../comm.cpp:685)
Added 6964 bonds, new total = 15728
  14 = max # of 1-2 neighbors
  14 = max # of special neighbors
  special bonds CPU = 0.00170207 secs

info system


fix           1 twall setforce 0.0 0.0 0.0  # Freeze top wall
fix           2 bwall setforce 0.0 0.0 0.0  # Freeze bottom wall

dump           1 all image 250 stg0.*.jpg type type zoom 2 view 60 120 bond none none
ERROR: Support for writing images in JPEG format not included (../dump_image.cpp:85)
Last command: dump           1 all image 250 stg0.*.jpg type type zoom 2 view 60 120 bond none none
