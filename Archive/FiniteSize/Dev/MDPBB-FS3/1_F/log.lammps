LAMMPS (5 Jun 2019)
OMP_NUM_THREADS environment is not set. Defaulting to 1 thread. (src/comm.cpp:88)
  using 1 OpenMP thread(s) per MPI task
#--- Brush Variables---#
variable      f      index  1 2 0.5
variable      M      equal  $(v_f * 30)                 # The number of polymer chains on each brush
variable      M      equal  30                 
variable      N      string 30                 # The number of beads per chain
variable      xhi    equal  $(sqrt(v_f) * 20)                 # The width of the polymer Brush
variable      xhi    equal  20                 
variable      yhi    equal  $(sqrt(v_f) * 20)                 # The length of the polymer Brush
variable      yhi    equal  20                 
variable      wthick equal  3                  # The thickness of the walls wthick=1,2,3,4 gives 2,3,4,6 layers respectively

#--- Simulation Variables ---#
variable       Temp      index 1        #0.8 1 1.68                 #[Grest96]
variable       Tstep     equal 0.005                       # Timestep in Tau (default = 0.005)
variable       Nequil    equal 30000                       # Number of timesteps to equilibrate
variable       Ncomp     equal 70000                     # Number of timesteps to compress - until no more occilation of walls
variable       Nshear    equal 100000      #2000000                      # Number of timesteps to shear - use approx 4ns for 10m/s
variable       Nthermo   equal 1000                        # Number of timesteps between thermo data prints
variable       Ndump_e   equal 10000
variable       Ndump_c   equal 10000                      # Number of timesteps per dump file (compression)
variable       Ndump_s   equal 10000                       # Number of timesteps per dump file (shear)
variable       Wall_v    index 0.5   #0.001 0.01 0.1 0.2 0.4 0.6 0.8 1 1.2 1.4 1.6 1.8 2   # 0.005 0.05 0.1 0.5 1.5 0.001 0.003 0.2 0.0002 2                      # Wall velocity (A/fs) - equal to 10 m/s
variable       Pcomp     index 3 #3 4 5 8 10 1.50 0.5 0.05

label          sim
include        MDPBB.in
# This is an input script that creates a mono disperse polymer brush bilayer
# A coarse grained bead-spring model is used for the polymers which are end
# grafted to the surfaces of 2 opposing FCC walls at random sites.

#--- Initialization ---#

dimension     3
boundary      p p f
units         lj
atom_style    bond


#--- Moved to main.in ---#
#variable      M      equal  50                # The number of polymer chains on each brush
#variable      N      string 80                # The number of beads per chain
#variable      xhi    equal  15                # The width of the polymer Brush
#variable      yhi    equal  20                # The length of the polymer Brush
#variable      wthick equal  3                 # The thickness of the walls wthick=1,2,3,4 gives 2,3,4,6 layers respectively

variable      zhi    equal  $(1.1 * 2 * v_N + (2 * v_wthick))  # The initial height of the simulation box the value is such that no overlaps occur
variable      zhi    equal  72  
variable      z0     equal  $((v_zhi)/4 - (v_N)/30)          # This is the location at which to place the CoM of the molecule
variable      z0     equal  17          

print "The number of grafted chains = $(v_M)"
The number of grafted chains = 30
print "The number of beads per chain = $(v_N)"
The number of beads per chain = 30

variable      check  equal count(all)         # The number of atoms in the system
variable      ntwall equal count(twall)       # The number of atoms in the top wall
variable      nbwall equal count(bwall)       # The number of atoms in the bottom wall
variable      s equal 234897  #45335              # Seed for the RNG

print "zhi = ${zhi}"
zhi = 72

#--- Create the simulation box ---#

region        sbox block 0 ${xhi} 0 ${yhi} 0 ${zhi}
region        sbox block 0 20 0 ${yhi} 0 ${zhi}
region        sbox block 0 20 0 20 0 ${zhi}
region        sbox block 0 20 0 20 0 72
create_box    4 sbox bond/types 3 extra/bond/per/atom 12 extra/special/per/atom 2
Created orthogonal box = (0 0 0) to (20 20 72)
  1 by 1 by 1 MPI processor grid

mass          1 2.0                   # Wall atoms that are not grafted
mass          2 1.0                   # Grafted bead
mass          3 1.0                   # The rest of the beads on the chain
mass          4 2.0                   # Wall atoms that the chains are grafted to

bond_style    hybrid fene harmonic    # Finitely extensible linearly elastic bond between neighbouring beads
#bond_coeff    1 fene 30.0 1.5 0.0 0.0      # Values obtained from literature [Grest, Galushcko]
bond_coeff    1 fene 30.0 30.0 0.0 0.0
bond_coeff    2 fene 30.0 30.0 0.0 0.0       # This is the grafting bond between the polymer and the wall atom
special_bonds fene                    #
  0 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0002966 secs
pair_style	  lj/cut 1.122462         # LJ potential with rc=2^1/6
#pair_coeff	  * * 1.0 1.0             # LJ potential acts between all atoms
pair_coeff    1 1 0.0 0.0
pair_coeff    1 2 1.0 1.0
pair_coeff    1 3 1.0 1.0
pair_coeff    2 2 1.0 1.0
pair_coeff    2 3 1.0 1.0
pair_coeff    2 4 1.0 1.0
pair_coeff    3 3 1.0 1.0
pair_coeff    3 4 1.0 1.0
pair_coeff    4 4 0.0 0.0
neighbor      10 bin                  #
neigh_modify  one 4000

#--- Create and read the molecule file ---#
python        BSMolf input 1 $N format i file BSMolf.py
python        BSMolf input 1 30 format i file BSMolf.py
python        BSMolf invoke    # Call the python function with number of beads to write the mol file
molecule      bs     bsmol.txt     # Read the Mol file to define the polymer chain
Read molecule bs:
  30 atoms with max type 2
  29 bonds with max type 1
  0 angles with max type 0
  0 dihedrals with max type 0
  0 impropers with max type 0

#--- Define the FCC wall region ---#
region        wall  block 0 ${xhi} 0 ${yhi} 0 ${wthick}
region        wall  block 0 20 0 ${yhi} 0 ${wthick}
region        wall  block 0 20 0 20 0 ${wthick}
region        wall  block 0 20 0 20 0 3
lattice       fcc 1
Lattice spacing in x,y,z = 1.5874 1.5874 1.5874

#--- Create the Top Brush  (At the bottom then rotate 180 degrees to top) ---#

create_atoms  1 region wall
Created 1352 atoms
  create_atoms CPU = 0.0012334 secs
group         twall  region wall
1352 atoms in group twall
#group         tsurf  region wsurf

# A loop to insert the Chains into the sim box
variable      i loop $M                                   # Index to insert N total number of chains
variable      i loop 30                                   
label         loop                                        # Start of loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 850                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[850]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 213                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[213]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1022                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1022]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1031                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1031]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1031 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1031                         
1 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 1
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 1
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1031]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1031]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1352                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1352+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 9.5244063118092 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 9.5244063118092 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.67e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1382               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1031 $b
create_bonds  single/bond 2 1031 1353
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020792 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 982                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[982]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1332                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1332]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1332 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1332                         
2 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 2
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 2
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1332]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1332]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1382                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1382+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 19.8425131496025 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 19.8425131496025 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 5.44e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1412               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1332 $b
create_bonds  single/bond 2 1332 1383
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020749 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 643                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[643]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 454                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[454]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 585                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[585]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 979                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[979]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 979 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 979                         
3 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 3
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 3
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[979]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[979]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1412                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1412+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 7.937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 7.937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 4.04e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1442               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 979 $b
create_bonds  single/bond 2 979 1413
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0034664 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1211                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1211]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1211 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1211                         
4 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 4
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 4
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1211]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1211]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1442                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1442+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 15.874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 15.874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 5.73e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1472               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1211 $b
create_bonds  single/bond 2 1211 1443
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019786 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 11                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[11]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 258                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[258]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 442                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[442]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1095                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1095]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1095 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1095                         
5 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 5
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 5
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1095]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1095]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1472                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1472+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 12.6992084157456 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 12.6992084157456 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 4.04e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1502               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1095 $b
create_bonds  single/bond 2 1095 1473
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019363 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 960                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[960]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 960 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 960                         
6 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 6
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 6
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[960]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[960]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1502                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1502+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 8.7307057858251 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 8.7307057858251 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 4.04e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1532               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 960 $b
create_bonds  single/bond 2 960 1503
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0052999 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 931                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[931]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 931 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 931                         
7 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 7
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 7
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[931]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[931]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1532                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1532+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 6.3496042078728 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 6.3496042078728 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 6.41e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1562               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 931 $b
create_bonds  single/bond 2 931 1533
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020352 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 755                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[755]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 755 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 755                         
8 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 8
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 8
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[755]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[755]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1562                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1562+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 1.5874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 1.5874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 4.04e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1592               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 755 $b
create_bonds  single/bond 2 755 1563
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0021381 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1053                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1053]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 832                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[832]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 832 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 832                         
9 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 9
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 9
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[832]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[832]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1592                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1592+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 3.9685026299205 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 3.9685026299205 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 3.91e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1622               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 832 $b
create_bonds  single/bond 2 832 1593
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0031046 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 838                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[838]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 163                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[163]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1178                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1178]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 814                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[814]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1242                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1242]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 942                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[942]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1214                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1214]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 796                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[796]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 796 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 796                         
10 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 10
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 10
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[796]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[796]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1622                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1622+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 3.9685026299205 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 3.9685026299205 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 5.51e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1652               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 796 $b
create_bonds  single/bond 2 796 1623
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019469 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1150                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1150]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1133                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1133]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 563                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[563]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1350                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1350]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1318                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1318]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 979                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[979]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 979 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 979                         
10 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 10
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 11
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[979]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[979]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1652                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1652+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1270                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1270]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 320                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[320]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1261                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1261]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 177                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[177]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1150                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1150]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1263                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1263]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1263 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1263                         
11 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 11
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 11
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1263]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1263]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1652                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1652+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 17.4614115716502 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 17.4614115716502 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 4.17e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1682               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1263 $b
create_bonds  single/bond 2 1263 1653
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019216 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 463                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[463]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 352                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[352]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 898                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[898]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 631                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[631]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 196                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[196]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1245                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1245]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1293                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1293]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1223                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1223]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1223 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1223                         
12 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 12
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 12
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1223]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1223]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1682                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1682+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 15.874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 15.874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 6.74e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1712               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1223 $b
create_bonds  single/bond 2 1223 1683
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019141 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1078                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1078]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 594                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[594]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 502                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[502]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 948                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[948]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 948 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 948                         
13 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 13
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 13
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[948]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[948]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1712                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1712+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 8.7307057858251 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 8.7307057858251 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 5.67e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1742               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 948 $b
create_bonds  single/bond 2 948 1713
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020578 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 127                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[127]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 512                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[512]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 590                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[590]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 445                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[445]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 825                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[825]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 387                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[387]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 323                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[323]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 117                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[117]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 921                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[921]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 992                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[992]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 992 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 992                         
14 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 14
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 14
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[992]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[992]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1742                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1742+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 10.3181068377933 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 10.3181068377933 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 3.99e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1772               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 992 $b
create_bonds  single/bond 2 992 1743
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0032229 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 456                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[456]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 676                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[676]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 582                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[582]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 307                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[307]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 784                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[784]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 784 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 784                         
15 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 15
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 15
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[784]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[784]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1772                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1772+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 3.9685026299205 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 3.9685026299205 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 6.28e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1802               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 784 $b
create_bonds  single/bond 2 784 1773
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019592 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 247                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[247]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1193                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1193]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 624                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[624]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1326                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1326]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1038                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1038]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1243                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1243]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1243 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1243                         
16 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 16
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 16
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1243]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1243]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1802                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1802+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 15.874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 15.874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 4.3e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1832               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1243 $b
create_bonds  single/bond 2 1243 1803
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019077 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1344                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1344]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1344 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1344                         
17 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 17
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 17
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1344]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1344]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1832                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1832+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 19.8425131496025 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 19.8425131496025 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 3.75e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1862               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1344 $b
create_bonds  single/bond 2 1344 1833
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0061346 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 641                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[641]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 449                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[449]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 96                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[96]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 350                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[350]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 246                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[246]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 555                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[555]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 808                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[808]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 808 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 808                         
18 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 18
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 18
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[808]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[808]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1862                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1862+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 3.9685026299205 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 3.9685026299205 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 7.25e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1892               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 808 $b
create_bonds  single/bond 2 808 1863
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0022041 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 643                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[643]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1123                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1123]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1123 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1123                         
19 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 19
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 19
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1123]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1123]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1892                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1892+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 12.6992084157456 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 12.6992084157456 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 4.54e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1922               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1123 $b
create_bonds  single/bond 2 1123 1893
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0023016 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 202                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[202]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 224                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[224]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1084                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1084]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1084 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1084                         
20 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 20
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 20
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1084]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1084]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1922                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1922+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 11.9055078897615 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 11.9055078897615 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 4.44e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1952               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1084 $b
create_bonds  single/bond 2 1084 1923
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019412 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 858                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[858]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 306                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[306]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 436                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[436]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 365                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[365]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1064                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1064]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1064 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1064                         
21 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 21
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 21
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1064]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1064]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1952                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1952+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 11.9055078897615 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 11.9055078897615 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 7.18e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 1982               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1064 $b
create_bonds  single/bond 2 1064 1953
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0035697 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1177                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1177]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 588                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[588]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1349                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1349]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 882                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[882]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1238                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1238]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 582                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[582]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 734                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[734]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 989                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[989]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 586                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[586]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 397                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[397]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 19                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[19]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 203                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[203]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 779                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[779]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 779 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 779                         
22 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 22
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 22
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[779]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[779]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 1982                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 1982+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 1.5874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 1.5874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 4.62e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 2012               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 779 $b
create_bonds  single/bond 2 779 1983
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0028844 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 144                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[144]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 686                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[686]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 244                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[244]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 445                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[445]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 53                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[53]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1270                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1270]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 465                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[465]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 488                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[488]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 659                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[659]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 994                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[994]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 249                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[249]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 684                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[684]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 684 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 684                         
23 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 23
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 23
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[684]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[684]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 2012                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 2012+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 0.7937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 0.7937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 4.63e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 2042               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 684 $b
create_bonds  single/bond 2 684 2013
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0028637 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 649                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[649]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1248                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1248]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1248 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1248                         
24 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 24
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 24
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1248]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1248]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 2042                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 2042+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 16.6677110456661 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 16.6677110456661 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.45e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 2072               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1248 $b
create_bonds  single/bond 2 1248 2043
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019579 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 329                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[329]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 836                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[836]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 836 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 836                         
25 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 25
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 25
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[836]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[836]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 2072                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 2072+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 5.5559036818887 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 5.5559036818887 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 5.08e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 2102               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 836 $b
create_bonds  single/bond 2 836 2073
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020929 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 290                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[290]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1204                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1204]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1204 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1204                         
26 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 26
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 26
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1204]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1204]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 2102                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 2102+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 16.6677110456661 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 16.6677110456661 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 6.06e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 2132               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1204 $b
create_bonds  single/bond 2 1204 2103
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019219 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 241                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[241]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 430                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[430]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 515                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[515]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 723                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[723]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 723 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 723                         
27 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 27
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 27
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[723]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[723]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 2132                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 2132+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 0 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 0 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 7.77e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 2162               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 723 $b
create_bonds  single/bond 2 723 2133
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019727 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 562                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[562]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1075                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1075]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1075 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1075                         
28 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 28
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 28
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1075]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1075]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 2162                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 2162+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 11.1118073637774 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 11.1118073637774 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 4.2e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 2192               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1075 $b
create_bonds  single/bond 2 1075 2163
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0058427 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 771                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[771]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 771 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 771                         
29 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 29
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 29
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[771]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[771]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 2192                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 2192+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 1.5874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 1.5874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 7.86e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 2222               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 771 $b
create_bonds  single/bond 2 771 2193
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0029798 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 660                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[660]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,1352,$s))  
variable      randni equal round(random(1,1352,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 787                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[787]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 787 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 787                         
30 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 30
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 30
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[787]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[787]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 2222                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 2222+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 3.1748021039364 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 3.1748021039364 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 4.34e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 2252               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 787 $b
create_bonds  single/bond 2 787 2223
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019577 secs
next i
jump MDPBB.in loop    # End of the loop

# Rotate the created brush about the centre of the simulation box by 180 degrees to make it true top brush
displace_atoms all rotate $(v_xhi/2.0) $(v_yhi/2.0) $(v_zhi/2.0 - 1) 1 0 0 180 units box
displace_atoms all rotate 10 $(v_yhi/2.0) $(v_zhi/2.0 - 1) 1 0 0 180 units box
displace_atoms all rotate 10 10 $(v_zhi/2.0 - 1) 1 0 0 180 units box
displace_atoms all rotate 10 10 35 1 0 0 180 units box

variable      ntop0 equal ${check}          # Count the total number of atoms in the top brush
variable      ntop0 equal 2252          

#--- Create the Bottom brush ---#

# Repeating the same procedure as above again but with new atoms

create_atoms  1 region wall
Created 1352 atoms
  create_atoms CPU = 0.0002344 secs
group         bwall region wall
1352 atoms in group bwall
variable      nbwall0 equal ${nbwall}
variable      nbwall0 equal 1352

variable      j loop $M
variable      j loop 30
label         loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2339
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2339]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2408
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2408]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2805
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2805]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2714
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2714]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2768
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2768]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2922
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2922]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3375
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3375]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3375 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3375                         
1 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 1
print         "j = $(v_j)"
j = 1
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3375]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3375]
variable      check0 equal ${check}
variable      check0 equal 3604
variable      b equal ${check}+1
variable      b equal 3604+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 12.6992084157456 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 12.6992084157456 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.48e-05 secs
variable      check1 equal ${check}
variable      check1 equal 3634
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3375 $b
create_bonds  single/bond 2 3375 3605
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019657 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3337
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3337]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3591
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3591]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3591 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3591                         
2 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 2
print         "j = $(v_j)"
j = 2
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3591]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3591]
variable      check0 equal ${check}
variable      check0 equal 3634
variable      b equal ${check}+1
variable      b equal 3634+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 19.0488126236184 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 19.0488126236184 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 6.31e-05 secs
variable      check1 equal ${check}
variable      check1 equal 3664
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3591 $b
create_bonds  single/bond 2 3591 3635
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0034353 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2388
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2388]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2962
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2962]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3410
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3410]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3528
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3528]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3528 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3528                         
3 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 3
print         "j = $(v_j)"
j = 3
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3528]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3528]
variable      check0 equal ${check}
variable      check0 equal 3664
variable      b equal ${check}+1
variable      b equal 3664+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 18.2551120976343 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 18.2551120976343 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001139 secs
variable      check1 equal ${check}
variable      check1 equal 3694
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3528 $b
create_bonds  single/bond 2 3528 3665
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019711 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2699
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2699]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3000
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3000]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3000 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3000                         
4 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 4
print         "j = $(v_j)"
j = 4
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3000]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3000]
variable      check0 equal ${check}
variable      check0 equal 3694
variable      b equal ${check}+1
variable      b equal 3694+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 6.3496042078728 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 6.3496042078728 2.3811015779523 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 6.3496042078728 2.3811015779523 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.97e-05 secs
variable      check1 equal ${check}
variable      check1 equal 3724
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3000 $b
create_bonds  single/bond 2 3000 3695
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020196 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2797
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2797]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2717
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2717]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3345
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3345]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3175
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3175]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3175 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3175                         
5 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 5
print         "j = $(v_j)"
j = 5
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3175]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3175]
variable      check0 equal ${check}
variable      check0 equal 3724
variable      b equal ${check}+1
variable      b equal 3724+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 6.3496042078728 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 6.3496042078728 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.35e-05 secs
variable      check1 equal ${check}
variable      check1 equal 3754
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3175 $b
create_bonds  single/bond 2 3175 3725
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0022849 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3577
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3577]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2487
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2487]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2451
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2451]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2643
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2643]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3259
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3259]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3259 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3259                         
6 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 6
print         "j = $(v_j)"
j = 6
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3259]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3259]
variable      check0 equal ${check}
variable      check0 equal 3754
variable      b equal ${check}+1
variable      b equal 3754+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 9.5244063118092 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 9.5244063118092 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001115 secs
variable      check1 equal ${check}
variable      check1 equal 3784
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3259 $b
create_bonds  single/bond 2 3259 3755
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0032715 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3423
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3423]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3423 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3423                         
7 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 7
print         "j = $(v_j)"
j = 7
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3423]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3423]
variable      check0 equal ${check}
variable      check0 equal 3784
variable      b equal ${check}+1
variable      b equal 3784+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 14.2866094677138 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 14.2866094677138 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 6.6e-05 secs
variable      check1 equal ${check}
variable      check1 equal 3814
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3423 $b
create_bonds  single/bond 2 3423 3785
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.002035 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2293
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2293]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2278
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2278]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2757
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2757]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2999
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2999]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 2999 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 2999                         
8 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 8
print         "j = $(v_j)"
j = 8
variable      x0 equal x[${randatomj}]
variable      x0 equal x[2999]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[2999]
variable      check0 equal ${check}
variable      check0 equal 3814
variable      b equal ${check}+1
variable      b equal 3814+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 1.5874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 1.5874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.22e-05 secs
variable      check1 equal ${check}
variable      check1 equal 3844
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 2999 $b
create_bonds  single/bond 2 2999 3815
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0021997 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3322
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3322]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2797
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2797]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3249
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3249]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2865
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2865]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2293
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2293]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2434
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2434]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3437
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3437]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3495
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3495]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3495 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3495                         
9 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 9
print         "j = $(v_j)"
j = 9
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3495]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3495]
variable      check0 equal ${check}
variable      check0 equal 3844
variable      b equal ${check}+1
variable      b equal 3844+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 15.874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 15.874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 7.75e-05 secs
variable      check1 equal ${check}
variable      check1 equal 3874
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3495 $b
create_bonds  single/bond 2 3495 3845
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0021764 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2418
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2418]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3086
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3086]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3352
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3352]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3352 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3352                         
10 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 10
print         "j = $(v_j)"
j = 10
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3352]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3352]
variable      check0 equal ${check}
variable      check0 equal 3874
variable      b equal ${check}+1
variable      b equal 3874+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 13.4929089417297 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 13.4929089417297 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 7.04e-05 secs
variable      check1 equal ${check}
variable      check1 equal 3904
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3352 $b
create_bonds  single/bond 2 3352 3875
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0030673 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3302
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3302]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3474
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3474]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3588
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3588]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3588 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3588                         
11 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 11
print         "j = $(v_j)"
j = 11
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3588]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3588]
variable      check0 equal ${check}
variable      check0 equal 3904
variable      b equal ${check}+1
variable      b equal 3904+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 19.8425131496025 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 19.8425131496025 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001042 secs
variable      check1 equal ${check}
variable      check1 equal 3934
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3588 $b
create_bonds  single/bond 2 3588 3905
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019358 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2533
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2533]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2597
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2597]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3405
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3405]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2400
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2400]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2552
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2552]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2499
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2499]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2274
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2274]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2286
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2286]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2581
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2581]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2569
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2569]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2372
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2372]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3155
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3155]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3155 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3155                         
12 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 12
print         "j = $(v_j)"
j = 12
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3155]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3155]
variable      check0 equal ${check}
variable      check0 equal 3934
variable      b equal ${check}+1
variable      b equal 3934+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 6.3496042078728 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 6.3496042078728 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 7.7e-05 secs
variable      check1 equal ${check}
variable      check1 equal 3964
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3155 $b
create_bonds  single/bond 2 3155 3935
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019466 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3508
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3508]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3508 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3508                         
13 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 13
print         "j = $(v_j)"
j = 13
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3508]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3508]
variable      check0 equal ${check}
variable      check0 equal 3964
variable      b equal ${check}+1
variable      b equal 3964+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 18.2551120976343 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 18.2551120976343 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 6.99e-05 secs
variable      check1 equal ${check}
variable      check1 equal 3994
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3508 $b
create_bonds  single/bond 2 3508 3965
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.001999 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2857
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2857]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3423
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3423]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3423 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3423                         
13 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 13
print         "j = $(v_j)"
j = 14
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3423]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3423]
variable      check0 equal ${check}
variable      check0 equal 3994
variable      b equal ${check}+1
variable      b equal 3994+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3228
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3228]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3228 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3228                         
14 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 14
print         "j = $(v_j)"
j = 14
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3228]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3228]
variable      check0 equal ${check}
variable      check0 equal 3994
variable      b equal ${check}+1
variable      b equal 3994+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 8.7307057858251 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 8.7307057858251 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.7e-05 secs
variable      check1 equal ${check}
variable      check1 equal 4024
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3228 $b
create_bonds  single/bond 2 3228 3995
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0031319 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3270
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3270]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2940
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2940]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 2940 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 2940                         
15 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 15
print         "j = $(v_j)"
j = 15
variable      x0 equal x[${randatomj}]
variable      x0 equal x[2940]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[2940]
variable      check0 equal ${check}
variable      check0 equal 4024
variable      b equal ${check}+1
variable      b equal 4024+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 0.7937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 0.7937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 7.02e-05 secs
variable      check1 equal ${check}
variable      check1 equal 4054
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 2940 $b
create_bonds  single/bond 2 2940 4025
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0022732 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2320
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2320]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3309
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3309]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3250
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3250]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2319
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2319]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2916
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2916]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2564
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2564]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2661
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2661]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2459
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2459]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3594
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3594]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3301
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3301]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2440
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2440]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2349
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2349]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3216
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3216]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3216 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3216                         
16 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 16
print         "j = $(v_j)"
j = 16
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3216]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3216]
variable      check0 equal ${check}
variable      check0 equal 4054
variable      b equal ${check}+1
variable      b equal 4054+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 8.7307057858251 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 8.7307057858251 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 7.92e-05 secs
variable      check1 equal ${check}
variable      check1 equal 4084
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3216 $b
create_bonds  single/bond 2 3216 4055
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020813 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3269
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3269]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2286
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2286]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3152
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3152]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3152 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3152                         
17 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 17
print         "j = $(v_j)"
j = 17
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3152]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3152]
variable      check0 equal ${check}
variable      check0 equal 4084
variable      b equal ${check}+1
variable      b equal 4084+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 7.1433047338569 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 7.1433047338569 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001093 secs
variable      check1 equal ${check}
variable      check1 equal 4114
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3152 $b
create_bonds  single/bond 2 3152 4085
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019592 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2376
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2376]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2356
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2356]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2961
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2961]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2680
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2680]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2433
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2433]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3239
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3239]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3239 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3239                         
18 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 18
print         "j = $(v_j)"
j = 18
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3239]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3239]
variable      check0 equal ${check}
variable      check0 equal 4114
variable      b equal ${check}+1
variable      b equal 4114+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 7.937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 7.937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.69e-05 secs
variable      check1 equal ${check}
variable      check1 equal 4144
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3239 $b
create_bonds  single/bond 2 3239 4115
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0033473 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3093
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3093]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2494
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2494]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2279
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2279]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2546
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2546]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3295
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3295]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3295 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3295                         
19 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 19
print         "j = $(v_j)"
j = 19
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3295]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3295]
variable      check0 equal ${check}
variable      check0 equal 4144
variable      b equal ${check}+1
variable      b equal 4144+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 11.1118073637774 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 11.1118073637774 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001264 secs
variable      check1 equal ${check}
variable      check1 equal 4174
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3295 $b
create_bonds  single/bond 2 3295 4145
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019099 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2594
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2594]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2700
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2700]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2835
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2835]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2504
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2504]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2917
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2917]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3026
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3026]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2607
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2607]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3476
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3476]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3476 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3476                         
20 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 20
print         "j = $(v_j)"
j = 20
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3476]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3476]
variable      check0 equal ${check}
variable      check0 equal 4174
variable      b equal ${check}+1
variable      b equal 4174+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 16.6677110456661 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 16.6677110456661 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000122 secs
variable      check1 equal ${check}
variable      check1 equal 4204
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3476 $b
create_bonds  single/bond 2 3476 4175
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020827 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2927
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2927]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2422
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2422]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2511
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2511]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2525
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2525]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2954
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2954]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2474
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2474]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3462
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3462]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3473
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3473]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3561
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3561]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3170
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3170]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3069
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3069]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2855
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2855]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3550
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3550]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3420
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3420]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3420 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3420                         
21 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 21
print         "j = $(v_j)"
j = 21
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3420]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3420]
variable      check0 equal ${check}
variable      check0 equal 4204
variable      b equal ${check}+1
variable      b equal 4204+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 15.0803099936979 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 15.0803099936979 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001157 secs
variable      check1 equal ${check}
variable      check1 equal 4234
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3420 $b
create_bonds  single/bond 2 3420 4205
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019576 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2632
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2632]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3569
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3569]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3378
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3378]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2844
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2844]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2984
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2984]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 2984 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 2984                         
22 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 22
print         "j = $(v_j)"
j = 22
variable      x0 equal x[${randatomj}]
variable      x0 equal x[2984]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[2984]
variable      check0 equal ${check}
variable      check0 equal 4234
variable      b equal ${check}+1
variable      b equal 4234+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 2.3811015779523 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 2.3811015779523 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 7.34e-05 secs
variable      check1 equal ${check}
variable      check1 equal 4264
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 2984 $b
create_bonds  single/bond 2 2984 4235
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019565 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2624
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2624]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2438
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2438]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2564
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2564]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3360
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3360]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3360 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3360                         
23 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 23
print         "j = $(v_j)"
j = 23
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3360]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3360]
variable      check0 equal ${check}
variable      check0 equal 4264
variable      b equal ${check}+1
variable      b equal 4264+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 13.4929089417297 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 13.4929089417297 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001096 secs
variable      check1 equal ${check}
variable      check1 equal 4294
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3360 $b
create_bonds  single/bond 2 3360 4265
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019538 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2550
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2550]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3033
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3033]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3163
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3163]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3163 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3163                         
24 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 24
print         "j = $(v_j)"
j = 24
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3163]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3163]
variable      check0 equal ${check}
variable      check0 equal 4294
variable      b equal ${check}+1
variable      b equal 4294+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 6.3496042078728 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 6.3496042078728 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 7.46e-05 secs
variable      check1 equal ${check}
variable      check1 equal 4324
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3163 $b
create_bonds  single/bond 2 3163 4295
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0021892 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2544
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2544]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3010
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3010]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3085
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3085]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3531
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3531]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3531 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3531                         
25 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 25
print         "j = $(v_j)"
j = 25
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3531]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3531]
variable      check0 equal ${check}
variable      check0 equal 4324
variable      b equal ${check}+1
variable      b equal 4324+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 17.4614115716502 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 17.4614115716502 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001039 secs
variable      check1 equal ${check}
variable      check1 equal 4354
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3531 $b
create_bonds  single/bond 2 3531 4325
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019434 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3011
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3011]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3011 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3011                         
26 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 26
print         "j = $(v_j)"
j = 26
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3011]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3011]
variable      check0 equal ${check}
variable      check0 equal 4354
variable      b equal ${check}+1
variable      b equal 4354+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 1.5874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 1.5874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.03e-05 secs
variable      check1 equal ${check}
variable      check1 equal 4384
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3011 $b
create_bonds  single/bond 2 3011 4355
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.003343 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3522
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3522]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2369
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2369]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3150
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3150]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2348
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2348]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3018
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3018]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3272
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3272]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3272 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3272                         
27 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 27
print         "j = $(v_j)"
j = 27
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3272]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3272]
variable      check0 equal ${check}
variable      check0 equal 4384
variable      b equal ${check}+1
variable      b equal 4384+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 10.3181068377933 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 10.3181068377933 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.08e-05 secs
variable      check1 equal ${check}
variable      check1 equal 4414
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3272 $b
create_bonds  single/bond 2 3272 4385
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019857 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3517
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3517]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3536
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3536]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3536 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3536                         
28 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 28
print         "j = $(v_j)"
j = 28
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3536]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3536]
variable      check0 equal ${check}
variable      check0 equal 4414
variable      b equal ${check}+1
variable      b equal 4414+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 18.2551120976343 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 18.2551120976343 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001089 secs
variable      check1 equal ${check}
variable      check1 equal 4444
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3536 $b
create_bonds  single/bond 2 3536 4415
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019723 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2482
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2482]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3353
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3353]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2480
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2480]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2307
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2307]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3140
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3140]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3140 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3140                         
29 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 29
print         "j = $(v_j)"
j = 29
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3140]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3140]
variable      check0 equal ${check}
variable      check0 equal 4444
variable      b equal ${check}+1
variable      b equal 4444+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 7.1433047338569 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 7.1433047338569 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.92e-05 secs
variable      check1 equal ${check}
variable      check1 equal 4474
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3140 $b
create_bonds  single/bond 2 3140 4445
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020779 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2916
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2916]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 2901
variable      randzj equal z[${randatomj}]
variable      randzj equal z[2901]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,3604,$s))
variable      randnj equal round(random(v_ntop0,3604,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 3104
variable      randzj equal z[${randatomj}]
variable      randzj equal z[3104]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 3104 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 3104                         
30 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 30
print         "j = $(v_j)"
j = 30
variable      x0 equal x[${randatomj}]
variable      x0 equal x[3104]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[3104]
variable      check0 equal ${check}
variable      check0 equal 4474
variable      b equal ${check}+1
variable      b equal 4474+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 6.3496042078728 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 6.3496042078728 5.5559036818887 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 6.3496042078728 5.5559036818887 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.47e-05 secs
variable      check1 equal ${check}
variable      check1 equal 4504
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 3104 $b
create_bonds  single/bond 2 3104 4475
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0023733 secs
next j
jump MDPBB.in loopj

# Assign the beads to 2 different groups of grafted and non-grafted beads

group         gbeads type 2
60 atoms in group gbeads
group         fbeads type 3
1740 atoms in group fbeads

#--- Create harmonic bonds in the walls ---#
bond_coeff    3 harmonic 800.0 $(1.5874 * sqrt(2)/2)
bond_coeff    3 harmonic 800.0 1.1224613044555256103
create_bonds  many bwall bwall 3 0.5 1.2
Neighbor list info ...
  update every 1 steps, delay 10 steps, check yes
  max neighbors/atom: 4000, page size: 100000
  master list distance cutoff = 11.1225
  ghost atom cutoff = 11.1225
  binsize = 5.56123, bins = 4 4 13
  2 neighbor lists, perpetual/occasional/extra = 1 1 0
  (1) command create_bonds, occasional
      attributes: full, newton on
      pair build: full/bin
      stencil: full/bin/3d
      bin: standard
  (2) pair lj/cut, perpetual
      attributes: half, newton on
      pair build: half/bin/newton
      stencil: half/bin/3d/newton
      bin: standard
Added 6964 bonds, new total = 8764
  14 = max # of 1-2 neighbors
  14 = max # of special neighbors
  special bonds CPU = 0.0029737 secs
create_bonds  many twall twall 3 0.5 1.2
Added 6964 bonds, new total = 15728
  14 = max # of 1-2 neighbors
  14 = max # of special neighbors
  special bonds CPU = 0.0027929 secs

info system


fix           1 twall setforce 0.0 0.0 0.0  # Freeze top wall
fix           2 bwall setforce 0.0 0.0 0.0  # Freeze bottom wall

dump           1 all image 250 stg0.*.jpg type type zoom 2 view 60 120 bond none none
#dump          2 all atom 50 dump.brush
#dump          3 all custom 100 dump.random.bin id x y z vx vy vz


#--- Minimize the system to obtain the initial structure for the PB bilayer ---#

timestep      0.010
minimize      0.0 1.0e-8 10000 100000
WARNING: Using 'neigh_modify every 1 delay 0 check yes' setting during minimization (src/min.cpp:168)
Neighbor list info ...
  update every 1 steps, delay 0 steps, check yes
  max neighbors/atom: 4000, page size: 100000
  master list distance cutoff = 11.1225
  ghost atom cutoff = 11.1225
  binsize = 5.56123, bins = 4 4 13
  1 neighbor lists, perpetual/occasional/extra = 1 0 0
  (1) pair lj/cut, perpetual
      attributes: half, newton on
      pair build: half/bin/newton
      stencil: half/bin/3d/newton
      bin: standard
WARNING: Inconsistent image flags (src/domain.cpp:784)
Per MPI rank memory allocation (min/avg/max) = 26.42 | 26.42 | 26.42 Mbytes
Step Temp E_pair E_mol TotEng Press 
       0            0   0.41035721    20.380875    20.791232    4.3300441 
      78            0 -0.076612708    18.666412    18.589799    4.1838791 
Loop time of 0.856993 on 1 procs for 78 steps with 4504 atoms

98.5% CPU use with 1 MPI tasks x 1 OpenMP threads

Minimization stats:
  Stopping criterion = linesearch alpha is zero
  Energy initial, next-to-last, final = 
         20.7912318743      18.5897991135      18.5897991135
  Force two-norm initial, final = 5230.88 91.4254
  Force max component initial, final = 634.791 7.30296
  Final line search alpha, max atom move = 4.22877e-09 3.08825e-08
  Iterations, force evaluations = 78 137

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 0.77328    | 0.77328    | 0.77328    |   0.0 | 90.23
Bond    | 0.038359   | 0.038359   | 0.038359   |   0.0 |  4.48
Neigh   | 0          | 0          | 0          |   0.0 |  0.00
Comm    | 0.010583   | 0.010583   | 0.010583   |   0.0 |  1.23
Output  | 0          | 0          | 0          |   0.0 |  0.00
Modify  | 0.0021988  | 0.0021988  | 0.0021988  |   0.0 |  0.26
Other   |            | 0.03257    |            |       |  3.80

Nlocal:    4504 ave 4504 max 4504 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Nghost:    15786 ave 15786 max 15786 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Neighs:    2.59291e+06 ave 2.59291e+06 max 2.59291e+06 min
Histogram: 1 0 0 0 0 0 0 0 0 0

Total # of neighbors = 2592910
Ave neighs/atom = 575.69
Ave special neighs/atom = 6.98401
Neighbor list builds = 0
Dangerous builds = 0

#--- Shrink the simulation box such that it encloses the system exactly ---#

variable z_f equal bound(all,zmin)
variable z_c equal bound(all,zmax)

change_box all z final ${z_f} $(v_z_c + 0.1) units box
change_box all z final 0 $(v_z_c + 0.1) units box
change_box all z final 0 70.099999999999994316 units box
  orthogonal box = (0 0 0) to (20 20 70.1)

info variables                              # For diagnostics

minimize      0.0 1.0e-8 10000 100000
WARNING: Using 'neigh_modify every 1 delay 0 check yes' setting during minimization (src/min.cpp:168)
WARNING: Inconsistent image flags (src/domain.cpp:784)
Per MPI rank memory allocation (min/avg/max) = 26.8 | 26.8 | 26.8 Mbytes
Step Temp E_pair E_mol TotEng Press 
      78            0 -0.076612708    18.666412    18.589799    4.2972796 
      81            0 -0.074053812    18.656968    18.582914     4.301802 
Loop time of 0.356189 on 1 procs for 3 steps with 4504 atoms

96.5% CPU use with 1 MPI tasks x 1 OpenMP threads

Minimization stats:
  Stopping criterion = linesearch alpha is zero
  Energy initial, next-to-last, final = 
         18.5897991135      18.5829139104      18.5829139104
  Force two-norm initial, final = 91.4254 63.8966
  Force max component initial, final = 7.30296 4.99447
  Final line search alpha, max atom move = 8.68605e-09 4.33822e-08
  Iterations, force evaluations = 3 48

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 0.31032    | 0.31032    | 0.31032    |   0.0 | 87.12
Bond    | 0.014913   | 0.014913   | 0.014913   |   0.0 |  4.19
Neigh   | 0          | 0          | 0          |   0.0 |  0.00
Comm    | 0.0038872  | 0.0038872  | 0.0038872  |   0.0 |  1.09
Output  | 0          | 0          | 0          |   0.0 |  0.00
Modify  | 0.0008369  | 0.0008369  | 0.0008369  |   0.0 |  0.23
Other   |            | 0.02623    |            |       |  7.36

Nlocal:    4504 ave 4504 max 4504 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Nghost:    15786 ave 15786 max 15786 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Neighs:    2.6198e+06 ave 2.6198e+06 max 2.6198e+06 min
Histogram: 1 0 0 0 0 0 0 0 0 0

Total # of neighbors = 2619800
Ave neighs/atom = 581.661
Ave special neighs/atom = 6.98401
Neighbor list builds = 0
Dangerous builds = 0

#--- Remove the fixes for the restart file ---#
unfix         1
unfix         2

#--- Write Restart File ---#

write_restart  MDPBB.rst
#write_data     MDPBB.data
print        "Created a Polymer Brush Bilayer with Surface Coverage = $(v_M/(lx*ly))"
Created a Polymer Brush Bilayer with Surface Coverage = 0.074999999999999997224



include        ecs.in
# This is an input script that creates a mono disperse polymer brush bilayer
# A coarse grained bead-spring model is used for the polymers which are end
# grafted to the surfaces of 2 opposing FCC walls at random sites.

clear
OMP_NUM_THREADS environment is not set. Defaulting to 1 thread. (src/comm.cpp:88)
  using 1 OpenMP thread(s) per MPI task


#--- Read in the Restart file ---#

read_restart    MDPBB.rst
  restoring atom style bond from restart
  orthogonal box = (0 0 0) to (20 20 70.1)
  1 by 1 by 1 MPI processor grid
  restoring pair style lj/cut from restart
  restoring bond style hybrid from restart
  4504 atoms
  15728 bonds
  14 = max # of 1-2 neighbors
  14 = max # of special neighbors
  special bonds CPU = 0.0032644 secs
  read_restart CPU = 0.0078736 secs
reset_timestep  0

#--- Redefine the bond coeffs ---#

bond_coeff    1 fene 30.0 1.5 0.0 0.0      # Values obtained from literature [Grest, Galushcko]
bond_coeff    2 fene 30.0 1.5 0.0 0.0       # This is the grafting bond between the polymer and the wall atom
bond_coeff    3 harmonic 800.0 $(1.5874 * sqrt(2)/2)
bond_coeff    3 harmonic 800.0 1.1224613044555256103

neigh_modify   every 1 delay 0 check yes

#--- Define variables ---#

# for dimensional values: eps = 4.14e-21 J at T = 300K and sigma = 0.5nm

#--- Moved to main.in ---#
#variable       Temp       equal ${Tstr} #[Grest96]
#variable       Tstep     equal 0.005                       # Timestep in Tau (default = 0.005)
#variable       Nequil    equal 10000                       # Number of timesteps to equilibrate
#variable       Ncomp     equal 200000                      # Number of timesteps to compress - until no more occilation of walls
#variable       Nshear    equal 1000000                     # Number of timesteps to shear - use approx 4ns for 10m/s
#variable       Nthermo   equal 1000                        # Number of timesteps between thermo data prints
#variable       Ndump_e   equal 10000
#variable       Ndump_c   equal 10000                       # Number of timesteps per dump file (compression)
#variable       Ndump_s   equal 10000                       # Number of timesteps per dump file (shear)
#variable       Wall_v    equal 0.0002                      # Wall velocity (A/fs) - equal to 10 m/s
#variable       Pcomp     equal 1
variable        Pcomp2    equal ${Pcomp}
variable        Pcomp2    equal 3
variable        Wall_v2   equal ${Wall_v}
variable        Wall_v2   equal 0.5

# For Equilibration - density profiles (10 for entire run)
variable       Nfreqe   equal ${Nequil}/10                  # Calculate bin averages every this many timesteps
variable       Nfreqe   equal 30000/10                  
variable       Neverye  equal 100                           # Use input values every this many timesteps
variable       Nrepeate equal ${Nfreqe}/${Neverye}          #s Number of times to use input values
variable       Nrepeate equal 3000/${Neverye}          
variable       Nrepeate equal 3000/100          


# For compression - density profiles (10 for entire run)
variable       Nfreqc   equal ${Ncomp}/10                  # Calculate bin averages every this many timesteps
variable       Nfreqc   equal 70000/10                  
variable       Neveryc  equal 100                          # Use input values every this many timesteps
variable       Nrepeatc equal ${Nfreqc}/${Neveryc}         # Number of times to use input values
variable       Nrepeatc equal 7000/${Neveryc}         
variable       Nrepeatc equal 7000/100         

# For Shear - density profiles (10 for entire run)
variable       Nfreqs   equal ${Nshear}/10                  # Calculate bin averages every this many timesteps
variable       Nfreqs   equal 100000/10                  
variable       Neverys  equal 100                          # Use input values every this many timesteps
variable       Nrepeats equal ${Nfreqs}/${Neverys}         # Number of times to use input values
variable       Nrepeats equal 10000/${Neverys}         
variable       Nrepeats equal 10000/100         


variable       binres   equal  0.001                       # Giving 1000 data points across the sim. box


variable       bwzmin  equal bound(bwall,zmin)
variable       bwzmax  equal bound(bwall,zmax)
variable       twzmin  equal bound(twall,zmin)
variable       twzmax  equal bound(twall,zmax)
variable       c       equal count(gbeads)
variable       surfcov equal $(v_M/(lx*ly))
variable       surfcov equal 0.074999999999999997224
variable       D       equal v_twzmin-v_bwzmax
variable       Dout    equal v_twzmax-v_bwzmin
variable       srate   equal (v_Wall_v/v_D)


#--- Define regions and groups ---#

print        "bwzmin = ${bwzmin}"
bwzmin = 0
print        "bwzmax = ${bwzmax}"
bwzmax = 2.3811015779523
print        "twzmin = ${twzmin}"
twzmin = 67.6188984220477
print        "twzmax = ${twzmax}"
twzmax = 70

region         bwallb  block  INF INF INF INF ${bwzmin} $(v_bwzmin + 0.4) units box
region         bwallb  block  INF INF INF INF 0 $(v_bwzmin + 0.4) units box
region         bwallb  block  INF INF INF INF 0 0.4000000000000000222 units box
region         bwallm  block  INF INF INF INF $(v_bwzmin + 0.35) $(v_bwzmax - 0.35) units box
region         bwallm  block  INF INF INF INF 0.3499999999999999778 $(v_bwzmax - 0.35) units box
region         bwallm  block  INF INF INF INF 0.3499999999999999778 2.0311015779522998415 units box
region         bwallt  block  INF INF INF INF $(v_bwzmax - 0.7) $(v_bwzmax) units box
region         bwallt  block  INF INF INF INF 1.6811015779522999747 $(v_bwzmax) units box
region         bwallt  block  INF INF INF INF 1.6811015779522999747 2.3811015779522999303 units box
region         bmelt   block  INF INF INF INF $(v_bwzmax) $(v_twzmax / 2) units box
region         bmelt   block  INF INF INF INF 2.3811015779522999303 $(v_twzmax / 2) units box
region         bmelt   block  INF INF INF INF 2.3811015779522999303 35 units box
region         tmelt   block  INF INF INF INF $(v_twzmax / 2)  $(v_twzmin - 0.1) units box
region         tmelt   block  INF INF INF INF 35  $(v_twzmin - 0.1) units box
region         tmelt   block  INF INF INF INF 35  67.518898422047712415 units box
region         twallb  block  INF INF INF INF $(v_twzmin - 0.1) $(v_twzmin + 0.35) units box
region         twallb  block  INF INF INF INF 67.518898422047712415 $(v_twzmin + 0.35) units box
region         twallb  block  INF INF INF INF 67.518898422047712415 67.968898422047701047 units box
region         twallm  block  INF INF INF INF $(v_twzmin + 0.35) $(v_twzmax - 0.35) units box
region         twallm  block  INF INF INF INF 67.968898422047701047 $(v_twzmax - 0.35) units box
region         twallm  block  INF INF INF INF 67.968898422047701047 69.650000000000005684 units box
region         twallt  block  INF INF INF INF $(v_twzmax - 0.35) $(v_twzmax) units box
region         twallt  block  INF INF INF INF 69.650000000000005684 $(v_twzmax) units box
region         twallt  block  INF INF INF INF 69.650000000000005684 70 units box

group          bwsurf  region bwallt
338 atoms in group bwsurf
group          bwbulk  region bwallm
676 atoms in group bwbulk
group          bwout   region bwallb
338 atoms in group bwout
group          bbeads  region bmelt
900 atoms in group bbeads
group          tbeads  region tmelt
900 atoms in group tbeads
group          abeads  union  bbeads tbeads
1800 atoms in group abeads
group          twsurf  region twallb
338 atoms in group twsurf
group          twbulk  region twallm
676 atoms in group twbulk
group          twout   region twallt
338 atoms in group twout
group          rest4bot union abeads twall
3152 atoms in group rest4bot
group          rest4top union abeads bwall
3152 atoms in group rest4top
group          walls    union bwall twall
2704 atoms in group walls
group          alltop   union twall tbeads
2252 atoms in group alltop
# Other groups are: gbeads fbeads bwall twall

info system
info coeffs

#--- Exclude wall-wall interactions ---#

#neigh_modify exclude type 1 1
#neigh_modify exclude type 1 4
#neigh_modify exclude type 4 4


############
# Computes #
############

#compute         sysTemp   all    temp/deform                       # Calculate the temperature without translational velocities
#compute         sysPress  all    pressure sysTemp                  # Calculate the pressure of the entire system of atoms
compute         melTemp   abeads temp
compute         melPress  all    pressure melTemp
compute         wallTemp  walls  temp
compute         wallPress all    pressure wallTemp
variable        melDens   equal  $(mass(abeads))/(lx*ly*v_D)
variable        melDens   equal  1800/(lx*ly*v_D)

#--- Forces and Energies ---#

compute         fbwall  bwall group/group rest4bot
compute         ftwall  twall group/group rest4top
compute         fwalls  bwall group/group twall

#--- Like done in comp_shear.in ---#
group           rest_bot union abeads bwall
3152 atoms in group rest_bot
group           rest_bot2 subtract all bwsurf
4166 atoms in group rest_bot2
compute         ggbot bwsurf group/group rest_bot
compute         ggbot2 bwsurf group/group rest_bot

group           rest_top union abeads twall
3152 atoms in group rest_top
group           rest_top2 subtract all twsurf
4166 atoms in group rest_top2
compute         ggtop twsurf group/group rest_top
compute         ggtop2 twsurf group/group rest_top2


#--- Calculate the applied force on each atom for the pressure applied---#
variable Fcomp equal (${Pcomp}*lx*ly)
variable Fcomp equal (3*lx*ly)
variable Fcatom equal (-${Fcomp})/(count(twout))
variable Fcatom equal (-1200)/(count(twout))


#compute	        peratom   all   stress/atom NULL
#compute	        p_all     all   reduce sum c_peratom[1] c_peratom[2] c_peratom[3]
#variable	      press_all equal -(c_p_all[1]+c_p_all[2]+c_p_all[3])/(3*v_volume)



info groups variables                              # For diagnostics


#################
# Equilibration #
#################

#--- Number Density profiles (Equil) ---#
compute         eabeads abeads chunk/atom bin/1d z lower ${binres} units reduced # Check bound keyword to maybe only bin melt area
compute         eabeads abeads chunk/atom bin/1d z lower 0.001 units reduced 
fix             abeads_edz abeads ave/chunk ${Neverye} ${Nrepeate} ${Nfreqe} eabeads density/number file abeads_edz
fix             abeads_edz abeads ave/chunk 100 ${Nrepeate} ${Nfreqe} eabeads density/number file abeads_edz
fix             abeads_edz abeads ave/chunk 100 30 ${Nfreqe} eabeads density/number file abeads_edz
fix             abeads_edz abeads ave/chunk 100 30 3000 eabeads density/number file abeads_edz
compute         ebbeads bbeads chunk/atom bin/1d z lower ${binres} units reduced # Check bound keyword to maybe only bin melt area
compute         ebbeads bbeads chunk/atom bin/1d z lower 0.001 units reduced 
fix             bbeads_edz bbeads  ave/chunk ${Neverye} ${Nrepeate} ${Nfreqe} ebbeads density/number file bbeads_edz
fix             bbeads_edz bbeads  ave/chunk 100 ${Nrepeate} ${Nfreqe} ebbeads density/number file bbeads_edz
fix             bbeads_edz bbeads  ave/chunk 100 30 ${Nfreqe} ebbeads density/number file bbeads_edz
fix             bbeads_edz bbeads  ave/chunk 100 30 3000 ebbeads density/number file bbeads_edz
compute         etbeads tbeads chunk/atom bin/1d z lower ${binres} units reduced # Check bound keyword to maybe only bin melt area
compute         etbeads tbeads chunk/atom bin/1d z lower 0.001 units reduced 
fix             tbeads_edz tbeads  ave/chunk ${Neverye} ${Nrepeate} ${Nfreqe} etbeads density/number file tbeads_edz
fix             tbeads_edz tbeads  ave/chunk 100 ${Nrepeate} ${Nfreqe} etbeads density/number file tbeads_edz
fix             tbeads_edz tbeads  ave/chunk 100 30 ${Nfreqe} etbeads density/number file tbeads_edz
fix             tbeads_edz tbeads  ave/chunk 100 30 3000 etbeads density/number file tbeads_edz

#--- Radius of gyration of the bottom brush chains ---#
compute         chunk_bot bbeads chunk/atom molecule
compute         rgbbeads bbeads gyration/chunk chunk_bot
variable        aveRg    equal  (ave(c_rgbbeads))


#--- Fixes (Equil) ---#

#velocity       abeads create ${Temp} 290842 dist gaussian
#fix             nvt_melt    abeads nvt temp ${Temp} ${Temp} 100.0

# NVE for all and langevin thermostat for melt
fix             nve_melt abeads nve
fix             lang_melt abeads langevin ${Temp} ${Temp} 0.1 798753
fix             lang_melt abeads langevin 1 ${Temp} 0.1 798753
fix             lang_melt abeads langevin 1 1 0.1 798753
fix             nve_walls  walls nve

#--- Langevin thermostat the bulk of the walls in y ---#
# Only thermostat the bulk of the wall not the surface or the outer layer
compute         Tempyt     twbulk temp/partial 0 1 0
fix             lang_tbulk twbulk langevin ${Temp} ${Temp} 0.1 87239 zero yes
fix             lang_tbulk twbulk langevin 1 ${Temp} 0.1 87239 zero yes
fix             lang_tbulk twbulk langevin 1 1 0.1 87239 zero yes
fix_modify      lang_tbulk temp Tempyt
compute         Tempyb     bwbulk temp/partial 0 1 0
fix             lang_bbulk bwbulk langevin ${Temp} ${Temp} 0.1 87239 zero yes
fix             lang_bbulk bwbulk langevin 1 ${Temp} 0.1 87239 zero yes
fix             lang_bbulk bwbulk langevin 1 1 0.1 87239 zero yes
fix_modify      lang_bbulk temp Tempyb

#--- Freeze the outer layer of the walls ---#
fix             freeze_bout bwout setforce 0.0 0.0 0.0
fix             freeze_tout twout setforce 0.0 0.0 0.0

variable        sbot equal  f_freeze_bout[1]/(lx*ly)
variable        pbot equal -f_freeze_bout[3]/(lx*ly)
#--- Thermo output ---#

thermo_style  custom step etotal ke pe epair temp c_melTemp c_wallTemp v_Fcatom v_Pcomp2 press pxx pyy pzz pxy pxz pyz c_melPress c_wallPress v_melDens v_surfcov v_aveRg v_Wall_v2 v_srate v_D v_bwzmax zhi c_fbwall[1] c_fbwall[3] c_ftwall[1] c_ftwall[3] v_sbot v_pbot #c_ggbot[1] c_ggbot[3] c_ggtop[1] c_ggtop[3]
thermo        ${Nthermo}
thermo        1000
thermo_modify flush yes

#--- Dumps ---#
#dump           eq all image ${Ndump_e} stg1.*.jpg type type zoom 2 view 60 120 bond none none


#--- Run Equilibration ---#
timestep    ${Tstep}
timestep    0.005
run         ${Nequil}
run         30000
Neighbor list info ...
  update every 1 steps, delay 0 steps, check yes
  max neighbors/atom: 2000, page size: 100000
  master list distance cutoff = 1.42246
  ghost atom cutoff = 1.42246
  binsize = 0.711231, bins = 29 29 99
  8 neighbor lists, perpetual/occasional/extra = 1 7 0
  (1) pair lj/cut, perpetual
      attributes: half, newton on
      pair build: half/bin/newton
      stencil: half/bin/3d/newton
      bin: standard
  (2) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (3) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (4) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (5) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (6) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (7) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (8) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
WARNING: Inconsistent image flags (src/domain.cpp:784)
Per MPI rank memory allocation (min/avg/max) = 7.843 | 7.843 | 7.843 Mbytes
Step TotEng KinEng PotEng E_pair Temp c_melTemp c_wallTemp v_Fcatom v_Pcomp2 Press Pxx Pyy Pzz Pxy Pxz Pyz c_melPress c_wallPress v_melDens v_surfcov v_aveRg v_Wall_v2 v_srate v_D v_bwzmax Zhi c_fbwall[1] c_fbwall[3] c_ftwall[1] c_ftwall[3] v_sbot v_pbot 
WARNING: One or more chunks do not contain all atoms in molecule (src/compute_chunk_atom.cpp:1161)
       0    19.516362            0    19.516362 -0.074053812            0            0            0   -3.5502959            3    4.0656815    4.9119712    4.9119361    2.3731372 -5.4497425e-06 4.2168082e-07 8.785454e-07    4.0656815    4.0656815  0.068978418        0.075    3.6166982          0.5 0.0076642686    65.237797    2.3811016         70.1            0            0            0            0 -1.4033219e-15    63.914914 
    1000    15.686516    2.1172523    13.569264 -0.028475937     1.411815     1.016306     1.675571   -3.5502959            3    2.2080825    3.4166281    3.6781876  -0.47056813 -0.0073899587  0.023228566 -0.024332905    2.0465608     2.142878  0.069845858        0.075    3.3266826          0.5 0.0077606509    64.427585    2.7905079         70.1 0.00022019751 -0.00034079459            0            0   -1.1057565    16.474155 
    2000     14.14308    1.8746047    12.268475 -0.033577378     1.250014   0.99064444    1.4231016   -3.5502959            3    1.9031833     3.401062    3.3047614  -0.99627363 -0.0024177836 0.0071427408 0.0053989594    1.7659991    1.8396252  0.069783351        0.075    3.1318603          0.5 0.0077537056    64.485296    2.7586741         70.1 -0.0014743428 -0.0022741674 8.2872601e-05 0.00016993449    3.0432568    8.4911471 
    3000    13.245349     1.549549      11.6958 -0.044625595    1.0332621   0.98771341    1.0639596   -3.5502959            3    1.8994108    3.3149243    3.3009107  -0.91760278 -0.0038184867 0.0011859994 -0.0056561802    1.7968472    1.8360407  0.069901479        0.075    2.9599739          0.5  0.007766831     64.37632    2.8345688         70.1 2.3498806e-05 -0.0016344086 0.0025932532 0.0041143595  -0.99140489    4.9538623 
    4000    12.711893    1.4466874    11.265206 -0.051629263   0.96467247    1.0214677   0.92722893   -3.5502959            3    1.6205165    3.0861321    3.0800537   -1.3046364 0.00062366648 -0.029636329 -0.0070648805    1.5311335    1.5549808  0.069918031        0.075    2.8020155          0.5 0.0077686701     64.36108    2.8105656         70.1 0.0021791496 -0.0037064941 0.0049501198 0.0051139532    1.2388012   -3.8739686 
    5000    12.314563     1.387414    10.927149 -0.056551639   0.92514808    1.0157917   0.86516185   -3.5502959            3    1.5290805    3.0449297    2.9818173   -1.4395053 -0.0011206748 -0.031900182 -0.0049613332    1.4456807     1.463909  0.069915951        0.075    2.6927309          0.5  0.007768439    64.362995    2.8230204         70.1 -0.00044456644 -0.0098994493 -0.0050561143  0.012639123    1.7473483   -7.9114161 
    6000    12.006958    1.3415862    10.665372  -0.07273513   0.89458939   0.99644132    0.8271321   -3.5502959            3    1.6671953    3.0741276    3.0511247   -1.1236663 0.0022347875  0.074590919 -0.022890978    1.5874615    1.6032653  0.069951837        0.075    2.5985544          0.5 0.0077724264    64.329976    2.8220343         70.1 -0.0017860401 -0.0072111137 -0.0057039545 0.0082554011   -3.1390262   -7.9022806 
    7000    11.772353     1.323026    10.449327 -0.087738387   0.88221319    1.0038594   0.80157714   -3.5502959            3    1.6854687    3.0216906    3.0649119   -1.0301965 0.00055780924  0.023747027 -0.012319088    1.6081982    1.6210627  0.069920359        0.075    2.5147094          0.5 0.0077689287    64.358938    2.8201808         70.1 0.0023023002 -0.0062058994  -0.00403576  0.011530037  -0.87874076   -9.8031099 
    8000    11.496757    1.2590721    10.237685 -0.097473115   0.83956778   0.97929727   0.74688047   -3.5502959            3    1.8198928    3.0986388    3.1252646  -0.76422506 -0.00092379347  -0.04603529  0.051763208     1.747895    1.7570627   0.06994116        0.075    2.4265471          0.5 0.0077712399    64.339797    2.8418961         70.1 -0.004131953 -0.0074517847 -0.0034355685  0.020606396     1.923777   -6.1695806 
    9000    11.391934     1.279259    10.112675  -0.12347198   0.85302871    0.9772688   0.77065546   -3.5502959            3    1.9274335    3.1584189    3.1468697  -0.52298824 0.0059551388  0.017362596 -0.017444201    1.8531438    1.8647335  0.069892602        0.075    2.3586365          0.5 0.0077658446    64.384497    2.8054883         70.1 -0.0035512988 -0.012259994 0.0026302998  0.026606546   -2.8652059    2.0796855 
   10000    11.339406    1.3103671    10.029039   -0.1189794   0.87377205    1.0157153     0.779624   -3.5502959            3    1.9699135    3.1704255    3.1798507  -0.44053584 0.0042543248 -0.0032809058  0.031600974    1.8947593    1.9047469  0.069905556        0.075    2.3265716          0.5  0.007767284    64.372566      2.81295         70.1 -0.0037852001 -0.041729536  0.011214405  0.032671495    4.4965193   -3.1706543 
   11000     11.20477    1.3038771    9.9008928  -0.14726464   0.86944443    1.0402341   0.75609583   -3.5502959            3     1.986249    3.1812739    3.1746972  -0.39722394 -0.0039607614 0.0079828013  0.064598423    1.9133629    1.9195093  0.069917234        0.075    2.2589769          0.5 0.0077685815    64.361814    2.8182314         70.1 -0.0038655928 -0.042737099 0.0083799866  0.048798235  -0.93142234    1.9138828 
   12000    11.162146    1.3019182    9.8602277  -0.14905055   0.86813822    1.0149542   0.77074505   -3.5502959            3    1.9637295    3.1200865    3.1371227  -0.36602079 -0.0051122984  0.015318837 -0.037757376    1.8894312    1.8986117  0.069913004        0.075    2.2226694          0.5 0.0077681116    64.365708    2.8235939         70.1 0.0030412892 -0.064637007 -0.013751389  0.070484395  -0.78044401    1.4229422 
   13000    11.100447    1.2729373    9.8275101  -0.15189067   0.84881335    1.0226319   0.73344124   -3.5502959            3    2.1194055    3.2645412    3.2409337  -0.14725852 0.0056393627 0.0014636158  0.022214278    2.0487032    2.0537951  0.069890016        0.075    2.1851984          0.5 0.0077655574    64.386879    2.8076113         70.1 -0.003440076 -0.054722586 -0.0012604271  0.080869611    1.4645272   0.45273536 
   14000    11.108646    1.2876526     9.820993  -0.14034806   0.85862571   0.98548776   0.77450946   -3.5502959            3    2.0953259    3.2144102    3.1956139  -0.12404646 -0.0037087903 -0.032812274 -0.038209319    2.0206647    2.0320986  0.069894804        0.075    2.1441821          0.5 0.0077660893    64.382469    2.8230015         70.1 0.0055186961 -0.095158686 0.0038713712  0.069007537  -0.35786036  -0.73530246 
   15000    11.056205    1.2523581    9.8038467  -0.14374179   0.83509081   0.97982336   0.73907203   -3.5502959            3    2.0979853    3.2108718     3.198232  -0.11514787 -0.0092545084   0.02222917  0.028428213    2.0267403    2.0351215  0.069873205        0.075    2.1158116          0.5 0.0077636894     64.40237    2.7879705         70.1 -0.0015847849 -0.064390863  0.011928229  0.079081517   0.27006031    3.0416786 
   16000    11.041897    1.2596803    9.7822169  -0.16163031   0.83997336   0.99989273    0.7338487   -3.5502959            3    2.0701184    3.1930903    3.2051129  -0.18784809 -0.0060649464 0.0051749338 0.0056250024    1.9993768    2.0059669  0.069939928        0.075    2.0980093          0.5 0.0077711032    64.340929    2.8367893         70.1  0.013057242 -0.076228202 -0.0036031989  0.081265986    1.1748247    1.1428628 
   17000    11.035049    1.2632403    9.7718089  -0.15029972   0.84234723    1.0023796   0.73614823   -3.5502959            3    2.1277634    3.1972643    3.2487663 -0.062740577 -0.0042198724  0.017991701 -0.038272074    2.0568001    2.0634523  0.069910292        0.075    2.0756592          0.5 0.0077678103    64.368205    2.8098713         70.1 -0.0052223062   -0.1024391 0.0084052453  0.075359194   -2.1161852   -0.7155016 
   18000    11.031067    1.2534098    9.7776572  -0.14304851   0.83579211    0.9746794   0.74366394   -3.5502959            3    2.1486538    3.2668403    3.2081647 -0.029043525 0.0037101764  0.075621171 -0.0023901241    2.0769661      2.08612  0.069880456        0.075    2.0769469          0.5 0.0077644951    64.395688    2.7961767         70.1 -0.010465279 -0.074007715 -0.0015550113   0.10467113  -0.85039211   -1.2795903 
   19000    11.094128    1.3103708    9.7837571  -0.16393931   0.87377455     1.021694   0.77564901   -3.5502959            3    2.1054301    3.1971441     3.220818  -0.10167174  0.008197322 -0.027249513  0.032786482    2.0306591    2.0398799  0.069962586        0.075    2.0644632          0.5 0.0077736206    64.320093    2.8428844         70.1 -0.014802159 -0.096695074 0.0038854593  0.081593342   0.70352249   -3.3286691 
   20000    11.097398    1.3101757     9.787222  -0.14838163   0.87364445    1.0359754   0.76592717   -3.5502959            3    2.0660636    3.1806415    3.1778862  -0.16033687  -0.00423616 -0.017880168  0.022381997    1.9922297    1.9995971  0.069928863        0.075    2.0496457          0.5 0.0077698737     64.35111    2.8331555         70.1  -0.01173106  -0.10343673 -0.000517886  0.093380944   -2.8282592   -3.9010342 
   21000    11.077084    1.2907428    9.7863413  -0.14608295   0.86068631   0.99542631   0.77132761   -3.5502959            3    2.1413759    3.2301326    3.2440359 -0.050040909 0.0065358759  0.048680682  0.027630481    2.0670214     2.077511  0.069889611        0.075    2.0395777          0.5 0.0077655123    64.387252    2.8236144         70.1 -0.0023272206  -0.09481439  0.011296077  0.092624723   -1.8525609   0.52638047 
   22000    11.006155    1.2575578    9.7485968  -0.15727312   0.83855805    1.0029147   0.72947957   -3.5502959            3     2.179292    3.2475674    3.2666478  0.023660779 -0.0016124066  0.030454302 -0.0069997661    2.1089716    2.1149466  0.069912883        0.075     2.014286          0.5 0.0077680982    64.365819    2.8184308         70.1 -0.008590074  -0.12352012 -0.0025208428  0.067481708   0.16033088    9.0711999 
   23000    11.073512    1.2660942    9.8074176   -0.1510627   0.84425027    1.0041612   0.73813277   -3.5502959            3    2.1423721    3.2447932    3.2155927 -0.033269708 -0.0013717318  -0.08460114 0.0033580714    2.0712175    2.0779467  0.069861443        0.075    1.9991379          0.5 0.0077623825    64.413213    2.7867631         70.1 0.00077610187 -0.073037057  -0.01149577  0.086822154   0.30363166    2.8030482 
   24000    11.047936    1.2616847    9.7862516  -0.14201876   0.84130995    0.9945447   0.73963477   -3.5502959            3    2.1619592    3.2474047      3.23983 -0.001357191 -0.0059634883 -0.043861343  0.011338024    2.0906598    2.0981508  0.069865318        0.075    1.9803343          0.5 0.0077628131     64.40964    2.7854214         70.1 -0.014221297 -0.091897631 -0.012442995   0.10075442  -0.09907615    1.2042018 
   25000    11.020474    1.2721535    9.7483204  -0.15366623   0.84829068     1.003108   0.74556482   -3.5502959            3    2.1584424    3.2044069    3.2541495  0.016770917 0.0057875711  0.013841833   -0.0130898    2.0865715    2.0940847   0.06990414        0.075    1.9608608          0.5 0.0077671267    64.373869    2.8151936         70.1 -0.0034089515   -0.1054448 -0.0062264505   0.09092427   -1.2598367   -3.0393304 
   26000    11.068426     1.306455    9.7619715  -0.16091681   0.87116344    1.0391457   0.75968399   -3.5502959            3    2.0828557    3.1860889    3.1974793  -0.13500113 0.0032592939 0.0048753133  0.015925395    2.0096236    2.0161858  0.069908215        0.075    1.9588225          0.5 0.0077675795    64.370117    2.8244796         70.1  0.017254959  -0.10789015 -0.0034747381  0.080744741     1.572173   -2.2075224 
   27000    11.100121    1.2663389    9.8337822  -0.15328643    0.8444134   0.99386403   0.74525791   -3.5502959            3     2.135765    3.2354703    3.2246793 -0.052854721 0.0035995293 -0.059802144  0.023492479    2.0639236    2.0720003  0.069873436        0.075    1.9754519          0.5 0.0077637151    64.402157    2.8023409         70.1 0.0030783509   -0.1428244 0.0073243201   0.08807136   -2.1112041    1.4901861 
   28000    11.020267    1.2420146    9.7782522  -0.14791212    0.8281936   0.98204899    0.7261005   -3.5502959            3    2.1090543    3.2009358    3.1860987 -0.059871465 -0.0033908416   0.14807582  0.030292802    2.0390597    2.0460477  0.069902718        0.075    1.9473433          0.5 0.0077669687    64.375179    2.8183268         70.1 0.0050101801 -0.088436194 0.0019082966  0.087469288   -3.5521584   -1.2706313 
   29000    11.061486    1.2811736    9.7803124  -0.14580496   0.85430542   0.98068452   0.77050901   -3.5502959            3    2.1096682    3.2142736    3.1875364 -0.072805575 -0.010283834 -0.023074297 -0.017582575    2.0353926    2.0467491   0.06988746        0.075    1.9393995          0.5 0.0077652733    64.389234    2.8038748         70.1 -0.031905434   -0.1333267 -0.007465184  0.098161793      2.05189   -5.9256386 
   30000    11.055667    1.2969014    9.7587657  -0.15186129   0.86479295    1.0100657   0.76842561   -3.5502959            3    2.1496949    3.2318873     3.220529 -0.0033316766 0.00098702327  0.021681352 -0.078998293    2.0756202    2.0848907  0.069877328        0.075    1.9253814          0.5 0.0077641476     64.39857     2.801762         70.1 -0.012768098  -0.10372769 -0.0077189014  0.068031748     2.822664   -1.5208785 
Loop time of 18.8935 on 1 procs for 30000 steps with 4504 atoms

Performance: 685951.796 tau/day, 1587.851 timesteps/s
98.7% CPU use with 1 MPI tasks x 1 OpenMP threads

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 1.1424     | 1.1424     | 1.1424     |   0.0 |  6.05
Bond    | 4.9893     | 4.9893     | 4.9893     |   0.0 | 26.41
Neigh   | 5.0576     | 5.0576     | 5.0576     |   0.0 | 26.77
Comm    | 0.51309    | 0.51309    | 0.51309    |   0.0 |  2.72
Output  | 0.049959   | 0.049959   | 0.049959   |   0.0 |  0.26
Modify  | 6.7075     | 6.7075     | 6.7075     |   0.0 | 35.50
Other   |            | 0.4336     |            |       |  2.30

Nlocal:    4504 ave 4504 max 4504 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Nghost:    1470 ave 1470 max 1470 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Neighs:    2708 ave 2708 max 2708 min
Histogram: 1 0 0 0 0 0 0 0 0 0

Total # of neighbors = 2708
Ave neighs/atom = 0.601243
Ave special neighs/atom = 6.98401
Neighbor list builds = 3824
Dangerous builds = 0
#undump      eq

#--- Unfix Equil ---#

unfix abeads_edz
unfix bbeads_edz
unfix tbeads_edz

unfix freeze_tout


###############
# Compression #
###############


#--- Bring the brushes closer together fit the sim box ---#

variable       bbzmax  equal bound(bbeads,zmax)
variable       tbzmin  equal bound(tbeads,zmin)
displace_atoms  alltop move 0.0 0.0 -$(v_tbzmin - v_bbzmax) units box
displace_atoms  alltop move 0.0 0.0 -36.763335171611998931 units box
variable z_f equal bound(all,zmin)
variable z_c equal bound(all,zmax)
change_box all z final ${z_f} $(v_z_c + 0.1) units box
change_box all z final 0 $(v_z_c + 0.1) units box
change_box all z final 0 33.336664828388002491 units box
  orthogonal box = (0 0 0) to (20 20 33.3367)

print         "D = $D"
D = 27.6352346680583
print         "D = $(v_twzmin - v_bwzmax)"
D = 27.635234668058288321
info variables

#--- Computes ---#

# Number density profiles

compute         cabeads abeads chunk/atom bin/1d z lower ${binres} units reduced # Check bound keyword to maybe only bin melt area
compute         cabeads abeads chunk/atom bin/1d z lower 0.001 units reduced 
fix             abeads_cdz abeads  ave/chunk ${Neveryc} ${Nrepeatc} ${Nfreqc} cabeads density/number file abeads_cdz
fix             abeads_cdz abeads  ave/chunk 100 ${Nrepeatc} ${Nfreqc} cabeads density/number file abeads_cdz
fix             abeads_cdz abeads  ave/chunk 100 70 ${Nfreqc} cabeads density/number file abeads_cdz
fix             abeads_cdz abeads  ave/chunk 100 70 7000 cabeads density/number file abeads_cdz
compute         cbbeads bbeads chunk/atom bin/1d z lower ${binres} units reduced # Check bound keyword to maybe only bin melt area
compute         cbbeads bbeads chunk/atom bin/1d z lower 0.001 units reduced 
fix             bbeads_cdz bbeads  ave/chunk ${Neveryc} ${Nrepeatc} ${Nfreqc} cbbeads density/number file bbeads_cdz
fix             bbeads_cdz bbeads  ave/chunk 100 ${Nrepeatc} ${Nfreqc} cbbeads density/number file bbeads_cdz
fix             bbeads_cdz bbeads  ave/chunk 100 70 ${Nfreqc} cbbeads density/number file bbeads_cdz
fix             bbeads_cdz bbeads  ave/chunk 100 70 7000 cbbeads density/number file bbeads_cdz
compute         ctbeads tbeads chunk/atom bin/1d z lower ${binres} units reduced # Check bound keyword to maybe only bin melt area
compute         ctbeads tbeads chunk/atom bin/1d z lower 0.001 units reduced 
fix             tbeads_cdz tbeads  ave/chunk ${Neveryc} ${Nrepeatc} ${Nfreqc} ctbeads density/number file tbeads_cdz
fix             tbeads_cdz tbeads  ave/chunk 100 ${Nrepeatc} ${Nfreqc} ctbeads density/number file tbeads_cdz
fix             tbeads_cdz tbeads  ave/chunk 100 70 ${Nfreqc} ctbeads density/number file tbeads_cdz
fix             tbeads_cdz tbeads  ave/chunk 100 70 7000 ctbeads density/number file tbeads_cdz



#--- Fixes ---#
fix             freeze_tout twout setforce 0.0 0.0 NULL
fix             comp_tout twout aveforce 0.0 0.0 ${Fcatom}
fix             comp_tout twout aveforce 0.0 0.0 -3.55029585798817
fix             rwalls all wall/reflect zlo EDGE zhi EDGE




#--- Dumps ---#
#dump           comp all image ${Ndump_c} stg2.*.jpg type type zoom 2 view 60 120 bond none none


#--- Run Compression ---#
timestep    ${Tstep}
timestep    0.005
run         ${Ncomp}
run         70000
WARNING: Inconsistent image flags (src/domain.cpp:784)
Per MPI rank memory allocation (min/avg/max) = 9.009 | 9.009 | 9.009 Mbytes
Step TotEng KinEng PotEng E_pair Temp c_melTemp c_wallTemp v_Fcatom v_Pcomp2 Press Pxx Pyy Pzz Pxy Pxz Pyz c_melPress c_wallPress v_melDens v_surfcov v_aveRg v_Wall_v2 v_srate v_D v_bwzmax Zhi c_fbwall[1] c_fbwall[3] c_ftwall[1] c_ftwall[3] v_sbot v_pbot 
   30000    11.055667    1.2969014    9.7587657  -0.15186129   0.86479295    1.0100657   0.76842561   -3.5502959            3    4.5203566    6.7959799    6.7720957 -0.0070058157 0.0020755025  0.045591328  -0.16611681    4.3645931    4.3840871    0.1628356        0.075    1.9253814          0.5  0.018092844    27.635235     2.801762    33.336665 -0.012768098  -0.10372769 -0.0077189014  0.068031748     2.822664   -1.5208785 
   31000    11.134929    1.3814427    9.7534859  -0.17585205   0.92116631    1.0252912   0.85220606   -3.5502959            3    4.7391781    6.9628375    6.9038102   0.35088678 -0.011483024 -0.042452857  -0.03240805    4.5664319    4.6008545   0.18008704        0.075    1.9272041          0.5  0.020009671    24.987917    2.8343968    33.336665 -0.0050626433  -0.10723571  -0.02111322   0.33099164   -0.4200197  -0.11660975 
   32000    11.050748    1.2860683    9.7646796  -0.18497932   0.85756926    1.0276655   0.74467784   -3.5502959            3    4.7472541    6.9524851    6.9022787   0.38699847 -0.0038535136   0.11935894  0.057988565    4.5963043    4.6086102    0.1953409        0.075    1.9278699          0.5  0.021704544     23.03665    2.7912317    33.336665 -0.0073817154  -0.10154485 0.0033602131   0.35761201  -0.93208441    4.3280729 
   33000    11.090677    1.3188294    9.7718476  -0.18925927   0.87941487    1.0545394   0.76318488   -3.5502959            3    4.5623879    6.8235539    6.7731818  0.090427926 0.0094962291  0.044804392 -0.019582091    4.4076867    4.4201184   0.20720559        0.075    1.9221852          0.5  0.023022844    21.717561    2.8072898    33.336665 -0.010538928 -0.072539412 -0.025352491   0.35873774  -0.56067638    1.4685152 
   34000    11.032951     1.300512    9.7324393  -0.19860723   0.86720053    1.0127538    0.7706474   -3.5502959            3    4.7220836    6.9040131    6.9299415   0.33229638  -0.02195259  0.079518561 -0.044932547    4.5658698    4.5854515   0.21890007        0.075    1.8938093          0.5   0.02432223    20.557326    2.8190149    33.336665 0.0051245828  -0.10392678 0.0046430433   0.28402973   0.94936336    1.6938106 
   35000    11.034356    1.2769776    9.7573787     -0.19161   0.85150746    1.0229917   0.73768997   -3.5502959            3    4.8055559    6.9688793    7.0010017   0.44678666  -0.02366857 0.0040059124  0.013413816    4.6560226    4.6675425     0.227489        0.075     1.875697          0.5  0.025276555    19.781177    2.8089169    33.336665 -0.019734422 -0.069174373 -0.013892093    0.3069654  -0.83441833    4.9867621 
   36000    11.000882    1.2637913     9.737091  -0.19548571   0.84271464   0.99161899   0.74392212   -3.5502959            3    4.7008913    6.8652061    6.9567419   0.28072579 0.0051503277  -0.27563978  -0.15389158    4.5500947    4.5671104   0.23761119        0.075    1.8831594          0.5  0.026401243    18.938502    2.8103994    33.336665 -0.011440812  -0.11691046 -0.0048393714   0.32029369  -0.12126634    1.6081116 
   37000    11.000472    1.2828055    9.7176666  -0.19226477    0.8553936    1.0154461   0.74918601   -3.5502959            3    4.8214639    7.0187077    7.0374794   0.40820455  0.013556416  0.066973339 -0.016950081    4.6696003    4.6844685   0.24855075        0.075    1.9051322          0.5   0.02761675    18.104954     2.831671    33.336665 0.0011294276  -0.13250533 0.0080890754   0.36603671   -2.0733164   -2.3530059 
   38000    10.988604    1.2741349     9.714469  -0.20756361   0.84961192    0.9798692   0.76323262   -3.5502959            3    4.6814606    6.8876894    6.9133964   0.24329583 0.0039871025 -0.084123369 -0.0011549958    4.5267497    4.5492649   0.25902828        0.075    1.8701626          0.5   0.02878092     17.37262    2.8262921    33.336665 -0.0043402525  -0.10570503  0.020280208   0.33801129    1.6088043   -1.5961448 
   39000     11.00422    1.2890373    9.7151827  -0.20998408   0.85954906   0.99683536   0.76849523   -3.5502959            3     5.016568    7.2136679    7.0933653   0.74267078  0.015028657  0.076178056  0.083568468    4.8607904    4.8820834   0.27006636        0.075    1.8569307          0.5  0.030007373    16.662571    2.8183376    33.336665 -0.00012184827 -0.070790983 -0.0035220427   0.32344297   -1.5773101    1.5589554 
   40000    11.021948    1.2851307    9.7368173  -0.19967866   0.85694405    1.0052951   0.75852505   -3.5502959            3     4.822244     7.006527    6.9562678   0.50393733  0.019158221 -0.0088880075 -0.032733186    4.6684874    4.6866182   0.28286007        0.075    1.8387308          0.5  0.031428896    15.908926    2.8162044    33.336665 -0.0064733534 -0.096006201 -0.029061696   0.32046067  -0.21696284    1.3387169 
   41000    11.028523    1.3127812    9.7157415  -0.20585088   0.87538182    1.0247875   0.77626773   -3.5502959            3    4.7723425    6.9559678    7.0025152    0.3585446 -0.017289949 -0.072907932  0.071717529    4.6149894    4.6340869   0.29537111        0.075    1.8256629          0.5  0.032819013    15.235071    2.8193222    33.336665 -0.0069380017  -0.10899865 -0.021053839     0.468902    1.4787607  0.048968597 
   42000    11.024278    1.2935465    9.7307313  -0.20191527   0.86255584    1.0081049   0.76600379   -3.5502959            3    4.9047641    7.0237731    7.0643859   0.62613328  0.018910402  0.025031827 -0.068292858    4.7494915    4.7687591    0.3091996        0.075    1.8100471          0.5  0.034355512    14.553706    2.7847269    33.336665 -0.007360964  -0.13838052 -0.025916525   0.32097365   -1.3518972    5.5093409 
   43000    10.987407    1.2847594    9.7026477  -0.20743426   0.85669647   0.99979175   0.76177538   -3.5502959            3    4.9326279    7.0925488    7.0747791   0.63055569 -0.019721839  0.054100281 0.0051418146    4.7782124    4.7977444   0.32305934        0.075    1.7763039          0.5  0.035895483    13.929329    2.8227415    33.336665 0.0091591429   -0.1120601  -0.01267579   0.34296475     1.033817   0.95007587 
   44000    10.981763    1.2664509    9.7153118  -0.19720817   0.84448807    1.0004145    0.7410226   -3.5502959            3    4.5269105    6.8188439    6.7997276 -0.037839832 -0.011656044   0.13122576 -0.019190136    4.3767017    4.3919431   0.33795204        0.075    1.7335552          0.5  0.037550226    13.315499    2.8077762    33.336665 -0.0017673939 -0.098305534 -0.025810472   0.43741996    1.1606924    1.7214111 
   45000    11.001503    1.2825424    9.7189608  -0.20435824   0.85521812    1.0187827   0.74667298   -3.5502959            3    4.8557753    7.0201339      7.04407   0.50312192 -0.011403737 -0.085490549  -0.10291251    4.7044211    4.7183298    0.3520131        0.075    1.7021528          0.5  0.039112567    12.783615    2.8449938    33.336665 0.0002784054 -0.092050006 -0.0052903481   0.29602802    1.0996853   0.78960269 
   46000    10.981432    1.2561971    9.7252349   -0.1996227   0.83765072   0.98337133   0.74097528   -3.5502959            3    4.8139141    7.0187974    6.9812262   0.44171884 0.0041978302 -0.0068426752  0.067283432    4.6637149     4.681246   0.36737304        0.075    1.6470066          0.5  0.040819227     12.24913    2.8289039    33.336665 -0.0035147466 -0.079581902 -0.018624917   0.37275476  -0.47817564   -1.6151623 
   47000    11.010136    1.3068494     9.703287  -0.22426681   0.87142639    1.0073426   0.78128883   -3.5502959            3    4.7899376    6.9881708    6.9517417    0.4299003 0.0067412573  -0.03437781 -0.025776513    4.6315667    4.6540355    0.3819293        0.075    1.5843833          0.5  0.042436588    11.782286    2.7854332    33.336665 -0.0080602253 -0.062810807 0.00045553037   0.28889748   -1.0163673   -2.9551835 
   48000    10.993586    1.2906751    9.7029106  -0.22679096   0.86064116    1.0188994   0.75562971   -3.5502959            3    4.8922957    7.0278713    7.0253207     0.623695 -0.018709404  -0.14702633 -0.0030893567     4.739126    4.7548344    0.4028647        0.075    1.5414994          0.5  0.044762745    11.170003    2.8094423    33.336665 0.0053718012  -0.11417782 -0.0092415594   0.38439869    3.3165355    2.4824339 
   49000    10.959075    1.2714165     9.687659  -0.23042103    0.8477992   0.98058915    0.7597336   -3.5502959            3    4.7933146    6.9905369     6.980285   0.40912193 0.0077918516   0.12226282   0.11535757     4.639313    4.6610218    0.4215312        0.075      1.49888          0.5    0.0468368    10.675366    2.8232613    33.336665 -0.012746969  -0.11772125  0.015794511   0.32724354   -1.6595799    1.4181108 
   50000    11.006705    1.3040906    9.7026142  -0.22091269   0.86958679    1.0208618   0.76922636   -3.5502959            3    4.8717604    7.0293333    7.0590462    0.5269017  -0.01054588  0.014991955 -0.033677093    4.7158346    4.7340344   0.43784437        0.075    1.4526561          0.5  0.048649374    10.277624    2.7970019    33.336665 -0.012430745  -0.14266333  0.044925393   0.34451755   0.22447395    3.9334039 
   51000    10.979413    1.2710591    9.7083544  -0.21411702   0.84756093     1.010371   0.73951512   -3.5502959            3    4.8583735    7.0598488    7.0283049   0.48696674 0.0088018993 -0.077735496 -0.030024555    4.7084702    4.7220628   0.45908405        0.075    1.3958674          0.5  0.051009339    9.8021266    2.8114414    33.336665  -0.01632233  -0.13151841  0.048174435   0.34441701   0.61816779  -0.37841891 
   52000      11.0373    1.2993853     9.737915  -0.21112544   0.86644924    1.0240636   0.76186852   -3.5502959            3    4.9183214    7.1260892    7.0583805   0.57049437  0.019487392   0.01876908   0.01868947     4.763887    4.7801634   0.48011538        0.075    1.3303739          0.5  0.053346154     9.372747    2.7751849    33.336665  0.008444696   -0.1165078  0.002731102   0.33437366 -0.033788239     5.624156 
   53000    10.992973    1.3029684    9.6900046  -0.22890204    0.8688385    1.0056284   0.77811847   -3.5502959            3    4.8670349     7.013882    7.0618376   0.52538496  0.021795092 -0.057127229 0.0027979797    4.7093066     4.731364    0.5036054        0.075     1.264992          0.5  0.055956155    8.9355675    2.7959532    33.336665 -0.0051392253 -0.073142606 0.0038996471   0.30375531  -0.44201862 -0.070426873 
   54000    10.941735    1.3123774     9.629358  -0.23465461   0.87511258    1.0231786      0.77689   -3.5502959            3    4.9508964    7.1271632    7.1241355   0.60139049 -0.020791822  -0.20048269 -0.034919149    4.7934171    4.8128578   0.53097975        0.075    1.2281775          0.5   0.05899775    8.4748994    2.7818246    33.336665 -0.0034308779  -0.10306658 -0.0060219269   0.36438499    2.4336961    1.1038892 
   55000    10.943148    1.2537573    9.6893907  -0.23284085   0.83602381   0.98482115   0.73730002   -3.5502959            3    4.6744852    6.9098309    6.8972667   0.21635813  0.039298509   0.04071332 -0.087041375     4.525031    4.5416215   0.55717161        0.075    1.1853012          0.5  0.061907957    8.0765062    2.8207351    33.336665 0.0068546187  -0.14281066 0.0043100918   0.31861277   -1.2181051   -2.0578827 
   56000    10.925891     1.285267    9.6406235  -0.23931543   0.85703498   0.99690614   0.76425985   -3.5502959            3    4.7602013    7.0196649    6.9440294   0.31690962 -0.046526748 -0.016555146 -0.062114549    4.6052822    4.6257072   0.58867416        0.075    1.1282525          0.5   0.06540824    7.6442968    2.8184965    33.336665 0.00071002483  -0.12129548 0.0080651563   0.38240361   -1.3263816    1.5200183 
   57000    10.960623     1.262207    9.6984163   -0.2264185   0.84165819   0.99313572   0.74115267   -3.5502959            3    5.0186484    7.2167453    7.1712194   0.66798037 -0.013422965 -0.041228993  0.027293924    4.8684132    4.8846629   0.62265809        0.075    1.1006135          0.5  0.069184232    7.2270803    2.8413708    33.336665 -0.033804678   -0.1071895 -0.016577006   0.34626502   -0.1930874     3.308773 
   58000    10.900765    1.2344545    9.6663107  -0.22455543    0.8231524   0.97844688   0.72009964   -3.5502959            3    4.6587181    6.8734632    6.9362646   0.16642639 0.0027812623  0.080654961  0.045939089    4.5127504    4.5267143   0.65349412        0.075    1.0746211          0.5  0.072610458    6.8860604    2.8220176    33.336665  -0.02517851  -0.13038813 -0.014791565   0.33866333   0.14723872    1.2324443 
   59000    10.957867    1.2715437    9.6863232   -0.2458197   0.84788402   0.98288258   0.75834849   -3.5502959            3    4.8398156    6.9512528    7.0654654   0.50272858  -0.02113842 -0.030901382  0.041902376    4.6860948    4.7072134   0.68315463        0.075    1.0577754          0.5   0.07590607    6.5870884    2.8082485    33.336665  0.025728506  -0.12848892 -0.009175825   0.32754619    1.0780446   -2.0412334 
   60000    10.935436     1.268801    9.6666352  -0.24378144    0.8460552    1.0040108   0.74123978   -3.5502959            3    5.0040412    7.1287466    7.1584968   0.72488007  0.019198626   0.22891368 0.00081003334    4.8537883    4.8685885   0.71919114        0.075    1.0299415          0.5  0.079910127    6.2570292    2.8002785    33.336665 -0.032315096 -0.097269898 -0.0042552675   0.41316955   -3.6522027    3.4491293 
   61000     10.92606    1.2630273    9.6630328  -0.23645677   0.84220518   0.99370458   0.74168531   -3.5502959            3    5.1352531    7.2866023    7.2079787   0.91117831 -0.0018914826  -0.14893376  0.042266779      4.98491    5.0011909   0.75898884        0.075    1.0178227          0.5  0.084332093     5.928941    2.8133128    33.336665  0.014578867  -0.13542909 -0.0014762825   0.41419927    2.5237012    2.5329874 
   62000    10.896059    1.2852738    9.6107855  -0.26799411   0.85703947     1.027524   0.74388941   -3.5502959            3      4.96875    7.1639983    7.1134947    0.6287569 -0.0014329663   -0.1316489  -0.03123083    4.8179601    4.8301251   0.80766461        0.075   0.99919501          0.5  0.089740512    5.5716196    2.8181939    33.336665 0.0078209586  -0.15807135 -0.020454142   0.36880349   -2.8546199    2.9223461 
   63000    10.872738     1.277133    9.5956048  -0.26472525   0.85161106    0.9984341   0.75420706   -3.5502959            3    4.8252894    7.0491386    7.0858119   0.34091754 -0.013046237    0.1353903 0.0068565063     4.672408    4.6905891     0.853203        0.075   0.98298986          0.5  0.094800334     5.274243    2.8178885    33.336665 -0.0026300391  -0.19623969 -0.012067908   0.41172249   -1.5466533    1.7144365 
   64000    10.886123    1.2701024    9.6160211  -0.28047909   0.84692297    1.0015545   0.74432023   -3.5502959            3    5.0747982     7.199664    7.2639638   0.76076681 -0.012737261 -0.056907385 -0.031084334     4.923921     4.939677   0.90106905        0.075   0.98862295          0.5   0.10011878    4.9940679    2.8056681    33.336665 -0.0047929774  -0.16618577  0.017547914   0.36417266     5.436991   0.61750067 
   65000    10.946888    1.2984517    9.6484367  -0.26955676   0.86582673    1.0324457   0.75525264   -3.5502959            3    5.0507512    7.2041101    7.2029973   0.74514628 -0.0060237404  0.085879968 0.0037545572    4.8976579    4.9114624   0.93690133        0.075   0.98916788          0.5   0.10410015    4.8030672    2.8030116    33.336665 -0.0065322565  -0.23820205 0.0024710398   0.36533569   -2.8426384    2.3748456 
   66000    10.814105    1.2500379    9.5640669  -0.29074013   0.83354365   0.97207072   0.74165439   -3.5502959            3    5.1308402    7.2715674    7.2902712   0.83068206 -0.0018783614 -0.079607439 -0.0056643326    4.9805034    4.9996967   0.96128914        0.075   0.98173563          0.5    0.1068099    4.6812138    2.8115091    33.336665 -0.014943933  -0.30335249  -0.02614025    0.3966499    1.6848408    1.8565162 
   67000    10.834947    1.2775805    9.5573662   -0.3089041   0.85190946    1.0355032   0.73003258   -3.5502959            3    5.2762997    7.3906032    7.3506148     1.087681 -0.0093071783   0.11606392  -0.08174992    5.1283186    5.1365984   0.99629638        0.075   0.98542111          0.5    0.1106996    4.5167282    2.8281124    33.336665 0.0040464695  -0.32790095  0.023566901    0.3937045   -2.2761395    3.4118107 
   68000    10.835967    1.2981764     9.537791  -0.32395596   0.86564311    1.0133301   0.76766929   -3.5502959            3    5.0384943    7.2048348    7.2489927   0.66165532 -0.011164015 -0.056608815  0.004876595     4.882884    4.9017844    1.0312054        0.075   0.97439329          0.5   0.11457838    4.3638251    2.8460923    33.336665 0.0061350411   -0.3203657 -0.0098521923    0.3798988    3.2342871    1.7727017 
   69000    10.808239    1.2624795    9.5457598  -0.31012763   0.84183994    1.0113966   0.72930183   -3.5502959            3    5.0705112    7.2761723    7.1985148   0.73684636 -0.0034150623  0.012360526    0.1338756    4.9226782    4.9340621    1.0156645        0.075   0.97344551          0.5   0.11285161    4.4305968    2.7988645    33.336665 -0.011061534  -0.33835333 -0.0046647637   0.38443124  -0.50208618   0.97373463 
   70000     10.82955    1.2933128    9.5362376   -0.3110654   0.86240002    1.0224582   0.75619124   -3.5502959            3    5.1911039    7.3366831    7.3469943   0.88963442  0.017767396  0.095860083 -0.021628338    5.0378204    5.0531626    1.0270058        0.075   0.97470719          0.5   0.11411176    4.3816694    2.8196087    33.336665  0.021401267  -0.41825046 0.0062745789   0.30320225  -0.46434608    3.1821077 
   71000    10.820362     1.268483    9.5518789  -0.30250264   0.84584315    1.0121965   0.73543846   -3.5502959            3    5.1550448    7.3357864    7.3299098   0.79943808  0.019912661 -0.084813087 -0.0029906403    5.0059679    5.0184878    1.0259242        0.075   0.96597546          0.5   0.11399158    4.3862889    2.8067638    33.336665  0.024260319  -0.36858107  0.016978858   0.35387504   -0.2755743    6.7288369 
   72000    10.793981    1.2737392    9.5202423  -0.32827226   0.84934802    1.0182235   0.73726603   -3.5502959            3    5.1221583    7.2929472    7.2443163    0.8292114  0.018328456  -0.12323764 0.0093159522     4.972711    4.9847882    1.0292591        0.075   0.95768829          0.5   0.11436212    4.3720771    2.7842556    33.336665  0.024787377  -0.45730409  0.010530239   0.38244643    1.5183626    5.7263735 
   73000    10.802002    1.2593041    9.5426981  -0.29437445   0.83972249    1.0228993   0.71811858   -3.5502959            3    5.1894274    7.3098092    7.3354503   0.92302276  0.043695765 -0.090842811  0.057983522    5.0438614    5.0514265    1.0319679        0.075   0.97685931          0.5    0.1146631    4.3606008    2.8123384    33.336665 -0.023448639  -0.29435961 -0.0028047146   0.36662954   0.76750184   0.56261294 
   74000    10.859839    1.3139457     9.545893  -0.31735099    0.8761583    1.0583598   0.75521697   -3.5502959            3    5.1209943    7.2828043    7.2592911   0.82088747 -0.0054902742  -0.11771442 0.0042247725    4.9679082    4.9782094     1.037165        0.075   0.98144338          0.5   0.11524055    4.3387504    2.8251172    33.336665 -0.013671535  -0.33497279  0.008386513   0.32693462    2.4539025  -0.84184193 
   75000    10.785618    1.2499545    9.5356633  -0.32867639   0.83348808   0.97924903   0.73678424   -3.5502959            3    4.9669951    7.1593786    7.1170612   0.62454546 -0.001175513  0.013985637   0.03500769    4.8176454    4.8348831    1.0374787        0.075   0.98904812          0.5   0.11527541    4.3374384    2.8051049    33.336665 0.0024407386  -0.33802338  0.016350269    0.4173784   0.25015907    2.7759783 
   76000    10.821259    1.2623116    9.5589479  -0.31838955   0.84172792    1.0181149   0.72464378   -3.5502959            3    5.0572548    7.1992465    7.1964836    0.7760344 0.0074061581  -0.16527831  0.074796297    4.9103661    4.9198994     1.044378        0.075   0.98961943          0.5     0.116042    4.3087848    2.8258365    33.336665 -0.018582606  -0.40449741 -0.0035679141   0.31379024    2.1845253   -2.6850032 
   77000    10.792357    1.2783731    9.5139836  -0.31831733     0.852438    1.0084854   0.74889498   -3.5502959            3    5.0392895    7.1777295    7.2544742   0.68566485  0.016224585 -0.033067851 0.0079058583     4.887485    4.9032332    1.0465019        0.075   0.98496134          0.5   0.11627799    4.3000401    2.8140838    33.336665   0.03385124  -0.42262957 -0.0024814304   0.43453613   0.53407064   -2.6683029 
   78000    10.823545    1.2943264    9.5292189  -0.31987597   0.86307589     1.033611   0.74989441   -3.5502959            3    5.1523042    7.2921429    7.3320524   0.83271721  0.023847913   0.29142954 -0.013094279     5.000297    5.0128581    1.0450564        0.075   0.98939922          0.5   0.11611738    4.3059876    2.8203984    33.336665   0.02188548  -0.30391538 -0.014084393    0.3838856   -2.4075681   0.33332089 
   79000    10.749329    1.2315421    9.5177871  -0.32159852   0.82121041   0.95492364   0.73252048   -3.5502959            3    5.2460326    7.3466658    7.3490463    1.0423857 -0.0024439646 -0.088469597  0.016079382    5.0975472    5.1172024    1.0368913        0.075   0.99475135          0.5   0.11521014    4.3398956    2.7946154    33.336665  0.014100708  -0.31075605 -0.030256522    0.3923807   -1.4906462    5.9298994 
   80000    10.819784    1.2578651    9.5619188  -0.30717743   0.83876295   0.97802297   0.74638781   -3.5502959            3    5.1910361      7.32897    7.3382421   0.90589634 -0.0032342704   0.10873372 -0.042366567    5.0397398    5.0590896    1.0434417        0.075   0.99504203          0.5   0.11593796    4.3126512     2.832633    33.336665  -0.01235886  -0.30202314 -0.010711715   0.37482559    0.4169303    3.7385407 
   81000    10.783796    1.2704143    9.5133814  -0.31670268   0.84713098    1.0232448   0.73023061   -3.5502959            3    5.2007523    7.3801199    7.3275137    0.8946234 -0.024844399  -0.16704517 -0.046735959    5.0527311    5.0627048    1.0418496        0.075   0.98135857          0.5   0.11576106    4.3192417     2.801711    33.336665 -0.0040357308  -0.34531998 0.0033857918   0.38229511    1.6868568    1.7654891 
   82000    10.790407    1.2745489    9.5158584  -0.32406516   0.84988794   0.97740267   0.76533407   -3.5502959            3    5.1666597    7.3370026      7.34564   0.81733649 0.0077421787   0.12839347 -0.090602907    5.0115228    5.0347968    1.0617045        0.075   0.97490685          0.5   0.11796717    4.2384673    2.8206198    33.336665 -0.032732964  -0.39692613 0.0072144297    0.3987936   -1.4193185   0.26127814 
   83000    10.761173    1.2582024     9.502971  -0.32811539   0.83898785   0.98621917   0.74130743   -3.5502959            3    5.2926733    7.4189495    7.4374438    1.0216265  0.011872277 -0.050555208  0.013403557    5.1424067    5.1596209    1.0636246        0.075   0.98386382          0.5   0.11818051     4.230816    2.8083942    33.336665 0.0068123256  -0.36178758 -0.034946735    0.3694004  0.034868818    3.4495686 
   84000    10.778744    1.2460796    9.5326643  -0.32327026   0.83090422    1.0019755   0.71735394   -3.5502959            3    5.0498875    7.2248715    7.2360233   0.68876768  0.040077009 -0.024570246  0.060800034    4.9044764    4.9147095     1.056263        0.075   0.98296161          0.5   0.11736256    4.2603025    2.8133542    33.336665 -0.005674077  -0.38186791 -0.003015522   0.33878255  -0.14233734    2.5863983 
   85000    10.790443    1.2476913    9.5427518  -0.31855977   0.83197895   0.99112496   0.72636604   -3.5502959            3    5.0699691    7.2269293    7.2019391   0.78103894 -0.0026344998 -0.013201804  -0.10694854    4.9227313     4.936255     1.051761        0.075    0.9988375          0.5   0.11686233    4.2785386    2.8126942    33.336665 -0.047804614  -0.37955022  0.023428241   0.42135989  -0.66330946    4.4963682 
   86000      10.7755    1.2748028    9.5006968  -0.32797856   0.85005724   0.99735136   0.75233912   -3.5502959            3    5.3586041    7.4478008    7.4476544    1.1803572 -0.011592594  0.052267532 -0.071732256    5.2061014    5.2240499    1.0516388        0.075   0.98766115          0.5   0.11684876    4.2790356    2.8173464    33.336665  0.002126077  -0.30739744 -0.0084286162   0.30945635  -0.93860442    6.6572894 
   87000    10.791114    1.2801712    9.5109423  -0.31385376     0.853637   0.97282294   0.77462781   -3.5502959            3    5.3357799    7.4526374    7.4710458    1.0836563   0.02639467 -0.045141392  0.070993643    5.1787591    5.2045348    1.0556497        0.075   0.98870189          0.5   0.11729442    4.2627775    2.8236637    33.336665 -0.0061825684  -0.28567832  0.012635206   0.36190574   0.67721222    5.3257211 
   88000    10.775084    1.2475824    9.5275014  -0.32113556   0.83190631   0.99573455   0.72317709   -3.5502959            3    5.0546979    7.2456752    7.2384171   0.68000149 0.0061823208 -0.0045816809  -0.13298743    4.9081065    4.9203619    1.0413997        0.075   0.99322927          0.5   0.11571108    4.3211073    2.8197833    33.336665 -0.018156592  -0.33214211 0.0070199786   0.39323506    2.5004321    6.2399453 
   89000    10.774547    1.2594481    9.5150984  -0.32944534   0.83981856    1.0063099   0.72931984   -3.5502959            3    5.3089166    7.3832894    7.4136694    1.1297912 0.0021245802 -0.067421343  0.035864761    5.1610801    5.1731539    1.0506478        0.075   0.98369468          0.5   0.11673864    4.2830719    2.8296174    33.336665 0.0090442534  -0.29826281  0.012263457   0.31192148  -0.33232381     6.090754 
   90000    10.825106    1.2820042     9.543102  -0.32312204   0.85485929    1.0153008   0.74839261   -3.5502959            3    5.2655153    7.3916592    7.3827705    1.0221163  0.018610393   0.11865182 -0.083346874    5.1138126    5.1285396    1.0508683        0.075   0.99198107          0.5   0.11676315    4.2821729    2.8037482    33.336665 0.00010728414  -0.36563966  0.030971045   0.32947362   -1.3727462    5.3398499 
   91000    10.775747    1.2691583    9.5065883  -0.32672405   0.84629341   0.99443143   0.74801225   -3.5502959            3    5.2212511    7.3898256    7.3894981   0.88442954  0.010462427 -0.021425952  -0.13073407    5.0696254    5.0870908    1.0628985        0.075   0.98003779          0.5   0.11809983    4.2337062     2.809771    33.336665 -0.0089634563  -0.35092098  -0.03156026   0.45740473   -1.0252718   0.85998417 
   92000    10.769173    1.2766814    9.4924915  -0.33684041   0.85130998    1.0102088   0.74586873   -3.5502959            3    5.1443711    7.2981811    7.2768853     0.858047  0.012323758    0.1235174  0.052835868      4.99318    5.0080823     1.057101        0.075   0.98683686          0.5   0.11745566    4.2569255    2.8147716    33.336665 0.0056348889  -0.39352872 -0.032146367   0.35545212   0.14364963    2.1009199 
   93000    10.820788    1.3093997    9.5113886  -0.33070246   0.87312697    1.0357569   0.76521055   -3.5502959            3    5.1872625    7.3362909    7.3191035   0.90639298  0.015753725  0.055492346   0.10457158    5.0321507     5.047527    1.0504198        0.075   0.98113138          0.5   0.11671331    4.2840016    2.8061901    33.336665 -0.025306271  -0.37053573 -0.013458321   0.35220855   0.62551049    1.4895792 
   94000    10.785946    1.2962483    9.4896974  -0.33164783   0.86435744    1.0284722   0.75544951   -3.5502959            3    5.1222171    7.2862966    7.2310941   0.84926044  0.016655582   0.14539469 -0.084106669    4.9690839    4.9834643    1.0542985        0.075   0.98633256          0.5   0.11714428    4.2682408    2.7962746    33.336665 -0.021194024  -0.37212637 -0.0046971808   0.40155503   -3.9736265 0.0029302975 
   95000    10.807744    1.2809384    9.5268054   -0.3259212   0.85414857    1.0130385   0.74871432   -3.5502959            3    5.2320525    7.3537296    7.4050816   0.93734631  0.015744251 -0.081812758 -0.027959434    5.0802846     5.095382    1.0506628        0.075   0.98263643          0.5   0.11674031    4.2830106    2.7984044    33.336665 -0.020447729   -0.3437411 -0.025420836   0.29212433    2.8511426    5.6088554 
   96000    10.769427    1.2695733    9.4998535  -0.33562596   0.84657014   0.99625283   0.74726101   -3.5502959            3    5.2181038    7.3623001    7.3508426   0.94116867  0.020940699 -0.077777194 -0.067201593    5.0666304    5.0836978    1.0480054        0.075   0.98619627          0.5   0.11644504    4.2938712    2.7975941    33.336665 -0.013704106  -0.36048492 -0.033535787   0.41939402    1.3906648    4.2080969 
   97000    10.791823    1.2999023    9.4919204  -0.33120921   0.86679401    1.0050008    0.7751302   -3.5502959            3    5.1109171      7.30274    7.2884661   0.74154525  0.009999752  0.079701383 0.00093360576    4.9537946    4.9753309    1.0480159        0.075   0.98286929          0.5   0.11644621    4.2938279    2.8165086    33.336665 -0.023336385  -0.37050262 -0.0042739132   0.40516433   -3.3617316   -1.3033982 
   98000    10.809151    1.2987366    9.5104145  -0.32640586   0.86601668    1.0019895   0.77583946   -3.5502959            3    5.0806449    7.2668531    7.2625437   0.71253781  0.038111665 -0.087458519 -0.070801482    4.9233785    4.9454649    1.0507037        0.075   0.99044044          0.5   0.11674485     4.282844    2.8220864    33.336665  0.020430203  -0.38571252  0.018858878   0.30704878   0.92460854   -0.7984618 
   99000    10.794034    1.2612897    9.5327447  -0.30349936    0.8410465   0.99671447   0.73775178   -3.5502959            3    5.0553943    7.2626316    7.2576999   0.64585139 -0.0087592953 -0.094845532   0.04163239    4.9058485     4.920926    1.0458341        0.075   0.98558436          0.5   0.11620378    4.3027859    2.8225786    33.336665 -0.0083107549  -0.34399706 0.0012051561   0.36170361 -0.048714461    5.3667931 
  100000    10.807395    1.2704987     9.536896   -0.3159387   0.84718725   0.99730926   0.74758596   -3.5502959            3    5.2892975    7.4025904    7.3636866    1.1016155  0.017574674  -0.13294407   0.02451739    5.1377583     5.154749    1.0400452        0.075   0.98428325          0.5   0.11556057    4.3267352     2.811521    33.336665 -0.045446047  -0.38617946 -0.031421809   0.35497415 -0.022098548    7.8293217 
Loop time of 52.9898 on 1 procs for 70000 steps with 4504 atoms

Performance: 570675.786 tau/day, 1321.009 timesteps/s
98.9% CPU use with 1 MPI tasks x 1 OpenMP threads

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 6.0373     | 6.0373     | 6.0373     |   0.0 | 11.39
Bond    | 11.942     | 11.942     | 11.942     |   0.0 | 22.54
Neigh   | 15.638     | 15.638     | 15.638     |   0.0 | 29.51
Comm    | 1.1498     | 1.1498     | 1.1498     |   0.0 |  2.17
Output  | 0.12522    | 0.12522    | 0.12522    |   0.0 |  0.24
Modify  | 17.067     | 17.067     | 17.067     |   0.0 | 32.21
Other   |            | 1.03       |            |       |  1.94

Nlocal:    4504 ave 4504 max 4504 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Nghost:    1399 ave 1399 max 1399 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Neighs:    10188 ave 10188 max 10188 min
Histogram: 1 0 0 0 0 0 0 0 0 0

Total # of neighbors = 10188
Ave neighs/atom = 2.26199
Ave special neighs/atom = 6.98401
Neighbor list builds = 8757
Dangerous builds = 0
#undump      comp

unfix abeads_cdz
unfix bbeads_cdz
unfix tbeads_cdz

###############
# Shearing    #
###############

#--- Keep only thermostat on walls ---#
unfix lang_melt

#variable    vtop equal (v_Wall_v/2)
#variable    vbot equal -(v_Wall_v/2)
velocity    twout set $(v_Wall_v/2) 0.0 0.0  units box
velocity    twout set 0.25 0.0 0.0  units box
velocity    bwout set -$(v_Wall_v/2) 0.0 0.0  units box
velocity    bwout set -0.25 0.0 0.0  units box


#--- Number Density profiles ---#

compute         sabeads abeads chunk/atom bin/1d z lower ${binres} units reduced # Check bound keyword to maybe only bin melt area
compute         sabeads abeads chunk/atom bin/1d z lower 0.001 units reduced 
fix             abeads_sdz abeads  ave/chunk ${Neverys} ${Nrepeats} ${Nfreqs} sabeads density/number file abeads_sdz
fix             abeads_sdz abeads  ave/chunk 100 ${Nrepeats} ${Nfreqs} sabeads density/number file abeads_sdz
fix             abeads_sdz abeads  ave/chunk 100 100 ${Nfreqs} sabeads density/number file abeads_sdz
fix             abeads_sdz abeads  ave/chunk 100 100 10000 sabeads density/number file abeads_sdz
compute         sbbeads bbeads chunk/atom bin/1d z lower ${binres} units reduced # Check bound keyword to maybe only bin melt area
compute         sbbeads bbeads chunk/atom bin/1d z lower 0.001 units reduced 
fix             bbeads_sdz bbeads  ave/chunk ${Neverys} ${Nrepeats} ${Nfreqs} sbbeads density/number file bbeads_sdz
fix             bbeads_sdz bbeads  ave/chunk 100 ${Nrepeats} ${Nfreqs} sbbeads density/number file bbeads_sdz
fix             bbeads_sdz bbeads  ave/chunk 100 100 ${Nfreqs} sbbeads density/number file bbeads_sdz
fix             bbeads_sdz bbeads  ave/chunk 100 100 10000 sbbeads density/number file bbeads_sdz
compute         stbeads tbeads chunk/atom bin/1d z lower ${binres} units reduced # Check bound keyword to maybe only bin melt area
compute         stbeads tbeads chunk/atom bin/1d z lower 0.001 units reduced 
fix             tbeads_sdz tbeads  ave/chunk ${Neverys} ${Nrepeats} ${Nfreqs} stbeads density/number file tbeads_sdz
fix             tbeads_sdz tbeads  ave/chunk 100 ${Nrepeats} ${Nfreqs} stbeads density/number file tbeads_sdz
fix             tbeads_sdz tbeads  ave/chunk 100 100 ${Nfreqs} stbeads density/number file tbeads_sdz
fix             tbeads_sdz tbeads  ave/chunk 100 100 10000 stbeads density/number file tbeads_sdz

#--- Temperature and Velocity profiles ---#
compute        eall all chunk/atom bin/1d z lower ${binres} units reduced
compute        eall all chunk/atom bin/1d z lower 0.001 units reduced
#compute        biasT all temp/profile 1 1 1 xyz 100 100 100
fix            temp_prof   all ave/chunk ${Neverys} ${Nrepeats} ${Nfreqs} eall temp file temp_sz
fix            temp_prof   all ave/chunk 100 ${Nrepeats} ${Nfreqs} eall temp file temp_sz
fix            temp_prof   all ave/chunk 100 100 ${Nfreqs} eall temp file temp_sz
fix            temp_prof   all ave/chunk 100 100 10000 eall temp file temp_sz
#fix            temp_bias   all ave/chunk ${Neverys} ${Nrepeats} ${Nfreqs} eall temp bias biasT file tempb_sz
fix            vel_prof_x_s all ave/chunk ${Neverys} ${Nrepeats} ${Nfreqs} eall vx vy file velp_sz
fix            vel_prof_x_s all ave/chunk 100 ${Nrepeats} ${Nfreqs} eall vx vy file velp_sz
fix            vel_prof_x_s all ave/chunk 100 100 ${Nfreqs} eall vx vy file velp_sz
fix            vel_prof_x_s all ave/chunk 100 100 10000 eall vx vy file velp_sz
#--- Ave s_bot and p_bot ---#

fix             fc_ave all ave/time ${Neverys} ${Nrepeats} ${Nfreqs} v_sbot v_pbot file fc_ave.dump
fix             fc_ave all ave/time 100 ${Nrepeats} ${Nfreqs} v_sbot v_pbot file fc_ave.dump
fix             fc_ave all ave/time 100 100 ${Nfreqs} v_sbot v_pbot file fc_ave.dump
fix             fc_ave all ave/time 100 100 10000 v_sbot v_pbot file fc_ave.dump

#--- Dumps ---#
#dump           shear all image ${Ndump_s} stg3.*.jpg type type zoom 2 view 60 120 bond none none

#--- Run Shear ---#
timestep    ${Tstep}
timestep    0.005
run         ${Nshear}
run         100000
WARNING: Inconsistent image flags (src/domain.cpp:784)
Per MPI rank memory allocation (min/avg/max) = 9.665 | 9.665 | 9.665 Mbytes
Step TotEng KinEng PotEng E_pair Temp c_melTemp c_wallTemp v_Fcatom v_Pcomp2 Press Pxx Pyy Pzz Pxy Pxz Pyz c_melPress c_wallPress v_melDens v_surfcov v_aveRg v_Wall_v2 v_srate v_D v_bwzmax Zhi c_fbwall[1] c_fbwall[3] c_ftwall[1] c_ftwall[3] v_sbot v_pbot 
  100000    10.816674    1.2797782     9.536896   -0.3159387   0.85337494   0.99730926   0.75789419   -3.5502959            3     5.291387    7.4089273    7.3636866    1.1015472  0.017574674  -0.13294407   0.02451739    5.1377583    5.1568385    1.0400452        0.075   0.98428325          0.5   0.11556057    4.3267352     2.811521    33.336665 -0.045446047  -0.38617946 -0.031421809   0.35497415 -0.022098548    7.8293217 
  101000     10.93048    1.3863742    9.5441056  -0.34216181   0.92445474    1.0804309   0.82098574   -3.5502959            3    5.0769182    7.2588564    7.2359454    0.7359527 -0.00029734874    0.3512312 -0.043107652    4.9105005    4.9311556    1.0421656        0.075    1.0102865          0.5   0.11579618    4.3179319    2.8085901    33.336665  0.011851291  -0.38111235 -0.033943047   0.34076155   -3.5121388    3.1248306 
  102000    10.922082    1.3272138    9.5948682  -0.30961307   0.88500571    1.0532493   0.77335743   -3.5502959            3    5.0917662    7.2847171    7.2290235   0.76155808  0.025948101  -0.25996945 -0.097939373     4.935003    4.9496708    1.0196504        0.075    1.0649928          0.5   0.11329448    4.4132775    2.8278135    33.336665 -0.0075261292  -0.32126445 -0.014886088   0.29968876     2.208776  -0.28994392 
  103000    10.988102    1.4242042    9.5638982  -0.31419835    0.9496803     1.178062   0.79803068   -3.5502959            3    5.1608292    7.2875498    7.3101278   0.88480999 -0.0086731036  -0.30517074  0.021783649    4.9990646    5.0018951    1.0239606        0.075    1.1129365          0.5    0.1137734    4.3947003     2.811855    33.336665  0.018525088   -0.3591689 -0.023145202   0.38555473    1.6052534    4.5257676 
  104000    11.032059    1.4195534    9.6125052  -0.29073297   0.94657908    1.1479676   0.81289381   -3.5502959            3    5.0319162    7.2177052    7.2026547   0.67538858 -0.038881299  -0.04518147 -0.045555244    4.8671387    4.8770421    1.0108221        0.075    1.2151969          0.5   0.11231357    4.4518218     2.831589    33.336665 0.0080041805  -0.36816528 -0.022004617   0.36988667   0.17572255    3.1799503 
  105000    11.057972    1.4589117    9.5990602  -0.29458752   0.97282379    1.2132149   0.81318974   -3.5502959            3    5.2474162    7.3283112     7.409846    1.0040915  0.012446222  -0.10266608 -0.030677052    5.0825788    5.0837396    1.0177316        0.075    1.3729005          0.5   0.11308129    4.4215979    2.8225681    33.336665 0.00044530067  -0.40744438  0.002212625   0.40199457  -0.71775947    1.6466213 
  106000    11.117466    1.4771152    9.6403504  -0.28943045   0.98496213    1.2541941    0.8061374   -3.5502959            3    5.2213372    7.3016793    7.3818699   0.98046253  -0.01451792  0.068825465 -0.038923875    5.0579294     5.052132    1.0085681        0.075    1.4833586          0.5   0.11206312    4.4617713    2.7872528    33.336665  0.027427824   -0.3315943 0.0024339321   0.37008549   -1.9042632     4.356612 
  107000    11.117366    1.4802215     9.637144  -0.29995185   0.98703351    1.2527328   0.81056071   -3.5502959            3    5.0684181    7.1725867    7.2883398   0.74432772 -0.0059330241   0.11202913  -0.02070698    4.9041136      4.89941    0.9952769        0.075    1.5938483          0.5   0.11058632    4.5213548    2.7831205    33.336665  0.015976347  -0.39120085  0.020948756   0.30534812   -2.1755135    4.2896152 
  108000    11.141086    1.4949343    9.6461513  -0.29318179   0.99684417    1.2653401   0.81851366   -3.5502959            3    5.3447971     7.348987    7.5301807    1.1552235  0.018391386  -0.23697354  0.079372139    5.1788805    5.1740881    1.0059302        0.075    1.6939012          0.5   0.11177003    4.4734713    2.7937438    33.336665  0.018681038   -0.3653542 0.0041234076   0.43312516  0.015619857    2.4505743 
  109000    11.182674    1.4953402    9.6873334  -0.28221968   0.99711483     1.265919   0.81857927   -3.5502959            3    5.1102102    7.1491844    7.3141955   0.86725071 0.0096555816  -0.25940742 -0.076032942    4.9442803    4.9394231    1.0011443        0.075    1.7415091          0.5   0.11123826    4.4948565    2.8246425    33.336665  0.019577358  -0.35328365  0.013518872   0.38587306    2.3530581    5.0818844 
  110000    11.138538    1.4882799    9.6502583  -0.27616512   0.99240694    1.3182995   0.77587407   -3.5502959            3    5.1941561    7.2840715    7.3337921   0.96460467  0.052034454 -0.025286837  0.039749397    5.0368827    5.0163023    1.0140132        0.075    1.8158222          0.5   0.11266813    4.4378122    2.8256491    33.336665 -0.0073566115  -0.36705498 -0.00017829078   0.37062405   -2.5787068    2.3904079 
  111000    11.196632    1.5334626     9.663169  -0.27637143    1.0225354    1.3191844   0.82547699   -3.5502959            3    5.1384804     7.155978    7.3230771   0.93638594   0.04732805  0.037227069  -0.02422888    4.9711523    4.9605072    1.0029231        0.075    1.9255796          0.5    0.1114359    4.4868842    2.8073544    33.336665  0.015536779  -0.39007123 0.0027353082   0.46020759    1.4464098    1.4330869 
  112000    11.208241     1.561017    9.6472235  -0.27905642    1.0409091    1.3641631   0.82615034   -3.5502959            3    5.1567778     7.210447     7.332719   0.92716747  0.027413224  -0.28062088 -0.084550023    4.9893132    4.9727365    1.0039996        0.075    1.9545517          0.5   0.11155551    4.4820736    2.7928515    33.336665 -0.036711186  -0.43341464 0.0086439266   0.36236911   -1.3690805    2.0000861 
  113000    11.208616     1.531749    9.6768666   -0.2640235    1.0213927    1.3168868   0.82510257   -3.5502959            3    5.1036645    7.1868631    7.2863663     0.837764 -0.0016639863 -0.032447144 0.0048821801    4.9364123    4.9260013   0.99221249        0.075    1.9471299          0.5   0.11024583    4.5353188    2.8123389    33.336665 0.0039377064  -0.36918395 8.8642214e-05   0.34872453    1.7800878    5.3309171 
  114000    11.170958    1.5182252    9.6527331  -0.28131753    1.0123749    1.3342161   0.79854581   -3.5502959            3    5.2325967    7.3517286    7.3698767   0.97618477 -0.020264895  -0.11352572  0.039616539    5.0707277    5.0525956   0.99775486        0.075    1.9753116          0.5   0.11086165    4.5101259    2.8059296    33.336665 -0.016106785  -0.33290697  0.022416508   0.33811754   -0.7516918    1.5803448 
  115000    11.119598     1.490868    9.6287298  -0.28126045   0.99413273    1.3289882   0.77163523   -3.5502959            3     5.021655    7.0950986    7.2466002   0.72326612  0.032099959  -0.13534414  0.055535602    4.8652409    4.8423592   0.99636693        0.075    2.0036367          0.5   0.11070744    4.5164084    2.8302712    33.336665  0.011033642  -0.31245267 -0.040235754   0.32227426    1.4304459  -0.31229898 
  116000    11.123132    1.5122967    9.6108353  -0.29783578    1.0084217    1.3568846   0.77687292   -3.5502959            3    5.1157292    7.2038226    7.3009193   0.84244559  0.050281242  0.019420785  -0.13480629    4.9582533    4.9326698    1.0117638        0.075    2.0307728          0.5    0.1124182    4.4476782    2.7752502    33.336665 -0.023768551  -0.37783574  0.010239152   0.39504014   -1.1332718  -0.33902129 
  117000    11.206008    1.5296969    9.6763108  -0.28263066    1.0200244    1.3035889   0.83167348   -3.5502959            3    5.2107469    7.3062527    7.3542701   0.97171778 -0.0061565239  -0.17599485 -0.0035386258    5.0421627    5.0348777   0.99691353        0.075    2.0306259          0.5   0.11076817    4.5139321    2.8063368    33.336665 0.0017665528  -0.31936066 -0.010339084   0.36094344  -0.11125956   -1.1318702 
  118000    11.121956    1.5053988    9.6165576  -0.28169795    1.0038221    1.3087329   0.80125798   -3.5502959            3    5.0786962    7.1446601    7.3531729   0.73825568  0.029059042  -0.21226416   0.03481808    4.9162774    4.9021331    1.0348792        0.075     2.014131          0.5   0.11498658    4.3483336    2.8107926    33.336665 -0.0092461236   -0.3164771 -0.034833184   0.32525713    3.2783121    5.3581482 
  119000    11.148767    1.5142293    9.6345375  -0.27961676    1.0097104    1.3019963   0.81555111   -3.5502959            3    5.3119491     7.354443    7.4156457    1.1657587 -0.0076965123    0.2767724 -0.066166298    5.1466331    5.1362948   0.99543839        0.075     2.019315          0.5   0.11060427    4.5206213    2.8067534    33.336665 -0.023319058  -0.40529429 -0.020122232   0.31863824   -4.3044623    6.9267012 
  120000    11.153382    1.4943822    9.6590003  -0.29389148   0.99647605    1.2878997    0.8028857   -3.5502959            3    5.0194532    7.1112932    7.2391971   0.70786942  0.026693085 -0.092025162 -0.031965339    4.8567045    4.8457007    1.0250683        0.075    2.0587977          0.5   0.11389648    4.3899513    2.8046398    33.336665 -0.013258419  -0.38838459 -0.0088481161   0.37417745  -0.11982107   0.35815781 
  121000     11.16331    1.5053684    9.6579412  -0.27604297    1.0038018     1.299626    0.8072854   -3.5502959            3    5.2167143      7.32555    7.3352834   0.98930956 -0.032287406 -0.022749926 -0.078963486    5.0530737    5.0413798    1.0041269        0.075    2.0603595          0.5   0.11156966    4.4815052     2.821148    33.336665  0.014849682  -0.31418552 -0.0033093571   0.36387865   -1.7156805    2.0079428 
  122000    11.153086    1.5198508    9.6332352  -0.29988101    1.0134589    1.3279894   0.80449591   -3.5502959            3    5.3014437    7.2917449    7.4383516    1.1742345 -0.0012345038  0.003340207 -0.010713919    5.1383685    5.1222826    1.0332326        0.075    2.0809591          0.5   0.11480362    4.3552634    2.8212114    33.336665 -0.0075170546  -0.34152714 0.0041429279   0.40497414 -0.092377341    4.9060734 
  123000    11.085709    1.4901824     9.595527  -0.28773938   0.99367552    1.3030073   0.78816525   -3.5502959            3    5.0221088      7.16983    7.1976666   0.69882972 -0.0025956901  -0.17037912 0.0045318461    4.8623439    4.8463181    1.0143311        0.075    2.0910896          0.5   0.11270345    4.4364214     2.805968    33.336665 -0.0069478766  -0.40402398  -0.01203974   0.43411049   -1.7416707    5.6330008 
  124000    11.149863    1.5232758    9.6265875  -0.28821914    1.0157427    1.3554099   0.79005076   -3.5502959            3     5.019098    7.0334554    7.2603437   0.76349492   0.01848277 -0.032881335  0.020946451     4.858951    4.8362376   0.99974072        0.075    2.0748769          0.5    0.1110823    4.5011671    2.7810724    33.336665 0.0079435048  -0.31009068 0.0076228395   0.29978024     4.438956     3.917041 
  125000     11.15622    1.5038379    9.6523822  -0.27570388    1.0027813    1.2876025   0.81358752   -3.5502959            3    5.2390232    7.2961546    7.3526274    1.0682875 0.0061884803  -0.10739946  0.043636679    5.0741051    5.0653108    1.0157058        0.075    2.0265848          0.5    0.1128562    4.4304167    2.8228626    33.336665 0.00047392693  -0.36272065 -0.047646598   0.41575236  -0.17180936    4.8392687 
  126000    11.185284    1.5171719    9.6681117  -0.27815897    1.0116726    1.3076944   0.81502751   -3.5502959            3    5.1765915    7.2340315    7.3800063   0.91573664  0.013056411   0.19624056   0.02271412    5.0113816    5.0001685     1.020634        0.075    2.0635371          0.5   0.11340378    4.4090242    2.8347304    33.336665  0.013778701  -0.36838091  0.025597152   0.37548879  -0.56213303    4.1302059 
  127000    11.199132    1.5419773    9.6571544  -0.28016172    1.0282131    1.3172026   0.83625467   -3.5502959            3     5.026725    7.1566541    7.2448524    0.6786685  0.011614353  -0.30010071 -0.038045479    4.8572122    4.8490192    1.0273432        0.075    2.0750775          0.5   0.11414924    4.3802305    2.7948879    33.336665 -0.019884743  -0.36269037 -0.013866894   0.30150052     1.193307    6.1320245 
  128000    11.135197    1.5100877    9.6251097  -0.28216612    1.0069487    1.3132027    0.8034918   -3.5502959            3    5.2071596    7.2648289     7.355677    1.0009731  0.036428944 -0.008136996   0.01178734     5.044288    5.0299935     1.016266        0.075    2.0399849          0.5   0.11291844    4.4279746    2.7982784    33.336665  0.016693685  -0.28645223  0.031718821   0.34775194    1.3749151    5.2721248 
  129000    11.157783    1.5043088    9.6534746  -0.29892916    1.0030952    1.3033931   0.80360103   -3.5502959            3    5.2087009    7.2315921     7.396647   0.99786366 -0.0070410507  -0.19941848 0.0050951744    5.0458072    5.0328582    1.0153268        0.075     2.042934          0.5   0.11281409    4.4320706    2.7998528    33.336665  0.021039834   -0.3062205 -0.018301767   0.39014588    2.3933714    3.7160889 
  130000    11.147723    1.4948161    9.6529069  -0.28740674   0.99676536    1.2870101   0.80395977   -3.5502959            3    5.1240849    7.1807578    7.3137119   0.87778499 -0.013497326  0.087796334  0.036082087    4.9611185    4.9504524    1.0128071        0.075    2.0125062          0.5   0.11253412    4.4430969    2.8028178    33.336665 0.00057523369  -0.31332583  0.020518444   0.28996418   0.52036887    1.1642857 
  131000    11.125057    1.5050551    9.6200024  -0.30260044    1.0035929    1.3071692   0.80191692   -3.5502959            3    5.2127689    7.2951981    7.4245674   0.91854128 -0.0014850521  -0.07308896 -0.067076595    5.0502166    5.0364167    1.0243459        0.075    2.0003633          0.5   0.11381622    4.3930471    2.7976576    33.336665 -0.024218997  -0.33894047 -0.023264451   0.36341136    1.8700573    1.8007764 
  132000    11.129114    1.5204873    9.6086265  -0.30434316    1.0138833    1.3168497   0.81261704   -3.5502959            3    5.1670049    7.2426136    7.3480367   0.91036429  0.003437346  0.021911319  0.032789459    5.0022835    4.9893467     1.019583        0.075    2.0607775          0.5     0.113287    4.4135692     2.787647    33.336665 -0.0025858686   -0.3591796 -0.0045727134   0.39485532  -0.94629397    6.7503814 
  133000     11.12947    1.5053142    9.6241563  -0.30264133    1.0037656    1.3024667   0.80533451   -3.5502959            3    5.1973411    7.2161899    7.3980038   0.97782949 -0.029913977  -0.10046725  0.016806206     5.034096    5.0216233    1.0181367        0.075    2.0655852          0.5    0.1131263    4.4198387    2.8059651    33.336665  0.027076673  -0.42889782  0.025661404   0.39679349  -0.94548802    7.9597671 
  134000    11.177732    1.5411785    9.6365537  -0.28048769    1.0276805    1.3362584   0.82268455   -3.5502959            3    5.0845133    7.1669036    7.3047828   0.78185357  0.022564206  -0.15546945 -0.052655047    4.9177513    4.9042367    1.0165668        0.075    2.0940745          0.5   0.11295187    4.4266644    2.8146906    33.336665 -0.010668872  -0.33084344 0.0076614719   0.36706442   0.36142448    1.2380402 
  135000    11.188707    1.5254851    9.6632222  -0.28422493    1.0172159    1.3177902   0.81754299   -3.5502959            3    5.1971077    7.2741015    7.3431468   0.97407479 -0.011844719  -0.13937969 -0.056399096    5.0313878    5.0193226    1.0160972        0.075    2.0537838          0.5   0.11289969    4.4287102    2.8081549    33.336665 -0.0043903037  -0.36347151  0.010349339   0.30540456    1.5697179   -3.8744019 
  136000    11.154584    1.5022293    9.6523552  -0.28265629    1.0017086    1.2920407   0.80884671   -3.5502959            3    5.2882617    7.3470656    7.4349894    1.0827302 -0.0073318015  0.032889447 -0.076489485    5.1243047    5.1139506    1.0222837        0.075    2.0626876          0.5   0.11358707    4.4019093    2.8165824    33.336665  0.030660775   -0.4662644 -0.0053882707   0.37654637   -1.1827664    3.2967558 
  137000    11.171997    1.5307209    9.6412764  -0.29209217    1.0207072    1.3393864   0.80898567   -3.5502959            3    5.0154682     7.193508    7.2356514   0.61724527 -0.0054530032  -0.25269446  0.072866683     4.851483    4.8347696    1.0233381        0.075    2.0684995          0.5   0.11370423    4.3973737     2.793969    33.336665 0.00089440658  -0.33574127 0.0094478167   0.31353047    1.1955873    1.8214825 
  138000    11.163538    1.4949559    9.6685822  -0.26360317   0.99685863    1.2742837    0.8125853   -3.5502959            3    5.1568676    7.2569629    7.3260974    0.8875427 0.0086685436  0.011388733 -0.044836592    4.9921528    4.9849521    1.0169969        0.075    2.0632165          0.5   0.11299965    4.4247924    2.8079304    33.336665 0.0053961989  -0.40045343 -0.011451384    0.3957039    -3.234367     4.986768 
  139000    11.143017    1.5020083    9.6410092  -0.28496093    1.0015612    1.2908225   0.80941198   -3.5502959            3    5.2340044    7.2218975    7.3831523    1.0969633  0.018027988  -0.21267349  -0.01560954    5.0699327    5.0598576     1.021636        0.075    2.0821037          0.5   0.11351511    4.4046999    2.8314818    33.336665 0.0011484847  -0.38503016 -0.00057423082   0.42941219    1.1169594    3.1153182 
  140000     11.16114    1.4940268    9.6671128  -0.28576732   0.99623904    1.2994715   0.79478917   -3.5502959            3    5.1925928    7.1776549    7.3759512    1.0241723 -0.0097560784  -0.21127533 -0.089310009    5.0314853    5.0172792    1.0117132        0.075    2.0631645          0.5   0.11241257     4.447901    2.7919711    33.336665 -0.012088935  -0.37199233   0.01379324   0.32964223    1.1612653    3.2177749 
  141000    11.140461    1.4935831    9.6468776  -0.27136803   0.99594322    1.2838712   0.80467926   -3.5502959            3    5.3641406    7.3575307    7.4833582    1.2515329 -0.040023571   0.17771581 -0.032184218    5.2010283    5.1909316    1.0165596        0.075    2.0441098          0.5   0.11295107    4.4266957    2.8197982    33.336665 -0.010972028  -0.39471006 0.0081353809   0.40145965  0.085853015    5.7410596 
  142000    11.131137     1.505076    9.6260608  -0.29491837    1.0036068    1.2909716   0.81272056   -3.5502959            3     5.172013    7.2112744    7.3414266   0.96333798 -0.020480752  -0.42172522   -0.1071754    5.0072707    4.9978461    1.0391904        0.075    2.0409523          0.5    0.1154656     4.330294    2.8411619    33.336665 0.0049087714  -0.30545636 -0.038480809   0.44681798    4.2051174    2.3835224 
  143000    11.129113    1.4949712    9.6341423  -0.28974789    0.9968688    1.2959414   0.79818778   -3.5502959            3    5.2443399    7.2772552    7.3848043    1.0709601  0.015786973   0.13522339 -0.015943749    5.0825434    5.0695024    1.0035371        0.075    2.0646192          0.5   0.11150412    4.4841391    2.7808761    33.336665 -0.0062385343  -0.40232064 0.0026530639   0.34014734  -0.64245281    2.5104708 
  144000    11.130812    1.5038932    9.6269186   -0.2865778    1.0028181     1.303456   0.80309757   -3.5502959            3    5.1227898    7.1828749    7.3312756    0.8542189 -0.0021995213 -0.081047705  0.062922481    4.9599981    4.9469386    1.0187724        0.075    2.0662002          0.5   0.11319694    4.4170807    2.7946062    33.336665  0.023239381  -0.39437001 -0.024544305    0.3406647    1.3094019    4.7280148 
  145000    11.128723    1.4869418     9.641781   -0.2794931   0.99151468    1.2842652   0.79703938   -3.5502959            3    5.1531594    7.2028868    7.3291931   0.92739838 0.0023097451 -0.057487707 0.0045129074    4.9915958    4.9798973    1.0196633        0.075    2.0641843          0.5   0.11329592    4.4132214    2.7893189    33.336665   0.02715131  -0.35739215 0.0071721643   0.39544207   -1.8814446    3.0207958 
  146000    11.126394    1.5033038      9.62309   -0.2882828    1.0024251    1.2991288   0.80532277   -3.5502959            3      5.22819    7.3327226     7.390294    0.9615533  0.043141891  0.089509971  -0.11704178    5.0649472    5.0529225    1.0064804        0.075    2.0370017          0.5   0.11183115     4.471026    2.8120946    33.336665 -0.005703096  -0.34498457  -0.01933091   0.26703095   0.42207622    2.6944324 
  147000    11.121624    1.5104795    9.6111444  -0.28134466      1.00721    1.3286844    0.7936231   -3.5502959            3    5.1729953    7.2929487    7.3856553     0.840382 -0.035451208  -0.23973507  0.019738927    5.0121242    4.9937405    1.0224678        0.075    2.0399638          0.5   0.11360753    4.4011166    2.7958319    33.336665 -0.022283421  -0.36475173 -0.025389783   0.41927515    2.5490591   0.77737376 
  148000    11.165609     1.523992    9.6416173  -0.28615622    1.0162203    1.3031528   0.82562638   -3.5502959            3    5.1827221    7.2565159    7.3168642    0.9747862 0.0064444449  0.047693441  0.088827248    5.0153637    5.0069118    1.0070861        0.075    2.0527341          0.5   0.11189846    4.4683367    2.8067629    33.336665  0.022368569  -0.35838605 -0.006302281   0.30746524   -2.4990804    3.3981807 
  149000    11.129664    1.5076968    9.6219673  -0.28974308    1.0053544    1.3082839   0.80410959   -3.5502959            3    5.0819068    7.1430793    7.2656391   0.83700197 -0.026089621  -0.29930781  0.041171641      4.91891    4.9054042    1.0264363        0.075    2.0696575          0.5   0.11404848    4.3841007     2.818492    33.336665 0.0039587535  -0.36581502 -0.025123715   0.38824561    3.3008966    3.7054917 
  150000    11.133467    1.5078353    9.6256315  -0.28784642    1.0054468    1.3012915   0.80891729   -3.5502959            3    5.0240713    7.0957052     7.236999   0.73950984  0.016319224 -0.041200534 -0.024643845       4.8601    4.8485121    1.0050263        0.075    2.0420547          0.5   0.11166959    4.4774946    2.8065181    33.336665 -0.022595659  -0.38359984  0.017782495   0.38779078    1.2535544   -1.2361402 
  151000    11.143606    1.5191261    9.6244798   -0.2802881    1.0129756    1.3085619   0.81662093   -3.5502959            3    5.1781343    7.2487951    7.3623565   0.92325144 -0.021652603  0.082963987  0.033781221    5.0126014    5.0015943    1.0189847        0.075    2.0611095          0.5   0.11322052    4.4161605    2.7899055    33.336665  -0.01706344  -0.43791561  0.024155434    0.4633799  -0.17821541    2.4026371 
  152000    11.149985    1.5289213    9.6210642  -0.28913924    1.0195072    1.3055833   0.82948448   -3.5502959            3    5.1831034    7.3385234    7.2891661   0.92162065 0.0096832736  -0.02849366  0.082959942    5.0149629    5.0069652    1.0237384        0.075     2.062961          0.5   0.11374872     4.395654    2.8256164    33.336665  0.010290886  -0.32874477 -0.016253457    0.3859544   -2.3712503    4.0822964 
  153000    11.175079    1.5346967     9.640382  -0.29645863    1.0233584    1.3236531   0.82387381   -3.5502959            3    5.1802716    7.1743405    7.3536599    1.0128145  0.021350489   0.15152757 -0.025016853    5.0132685    5.0016956    1.0014922        0.075    2.1071112          0.5   0.11127692    4.4932949    2.7593728    33.336665 0.0063155595  -0.37053783  0.012629388    0.3795677   -1.8092952    3.3500888 
  154000    11.188317    1.5010141    9.6873026  -0.28165908    1.0008983    1.3008615   0.80162599   -3.5502959            3    5.1410359    7.1981133    7.2825067   0.94248768 0.0050154134   -0.1457977   0.10566547    4.9785425    4.9655347     1.023525        0.075    2.1006085          0.5     0.113725    4.3965708    2.8035815    33.336665 -0.012308912  -0.38870811 -0.0063192226    0.3722864    5.5750717    4.9611379 
  155000    11.132305    1.5110376    9.6212674  -0.29132752    1.0075821    1.3000507   0.81330041   -3.5502959            3    5.2952597    7.3411341    7.4527653    1.0918798 -0.017131501  -0.11639105   0.03447466    5.1303999    5.1198679    1.0344362        0.075    2.0665043          0.5   0.11493736    4.3501958    2.8080627    33.336665 -0.024669741  -0.36957356 0.0042720626   0.37047707   -0.9383335   0.49969278 
  156000    11.083905    1.4860622    9.5978433   -0.2774255   0.99092812    1.3139398   0.77631211   -3.5502959            3    5.3956493    7.4543004    7.4683932    1.2642542 0.0028674619  0.089419983 -0.035131399    5.2382871    5.2183837    1.0082152        0.075    2.0691673          0.5   0.11202391    4.4633327    2.8143335    33.336665 0.0044342949  -0.36811089 -0.0048638898   0.31376469   -1.0729469    10.581468 
  157000    11.199984    1.5475352    9.6524486  -0.28790528    1.0319192    1.3227068   0.83876537   -3.5502959            3    5.0959964    7.1343831    7.3147082   0.83889782 -0.025997103   -0.2113255  0.048335356    4.9259747     4.917548    1.0237531        0.075    2.0633542          0.5   0.11375034    4.3955911    2.8122087    33.336665  0.025455551   -0.4447424 0.0032124618   0.44935223    2.9356199   -1.5022565 
  158000    11.149447    1.5062511    9.6431955  -0.28852948    1.0043904    1.2927046   0.81287251   -3.5502959            3    5.2972837    7.3859028    7.4226786    1.0832698 0.0078643484  -0.28305411  0.014710958    5.1325106     5.122883    1.0236468        0.075    2.0701476          0.5   0.11373854    4.3960474    2.8193256    33.336665 -0.015971924  -0.33652566 -7.53915e-05   0.33624146     2.381316    3.5205964 
  159000    11.109747    1.4933705    9.6163767  -0.30068284   0.99580145    1.3048216   0.79049939   -3.5502959            3     5.229271    7.2811254    7.3804009    1.0262866 0.0054690943  0.084382938  0.020937371     5.069033    5.0532355    1.0384361        0.075    2.0692917          0.5   0.11538179    4.3334393    2.8058214    33.336665 0.0025198741  -0.39142987 -0.032231245    0.4334359  -0.41050772    5.1500183 
  160000    11.086442    1.5014385    9.5850031  -0.29809718    1.0011813    1.2833265   0.81376804   -3.5502959            3    5.2078007    7.2974096    7.3479606   0.97803187 -0.044477197 -0.083045245  0.051742079    5.0428461    5.0346652    1.0239897        0.075    2.0716468          0.5   0.11377663    4.3945755    2.7958184    33.336665 -0.0079452536  -0.34330469 -0.0021853335   0.32757368    -1.465702  -0.17672001 
  161000    11.095165    1.4808827    9.6142822  -0.28672041   0.98747437    1.2616933   0.80533143   -3.5502959            3    5.1612387    7.2286221    7.3395709    0.9155232 0.0051973026  0.027765533 0.0086881229    4.9979942    4.9910218    1.0358265        0.075     2.076034          0.5   0.11509184    4.3443568    2.8154556    33.336665  -0.03045227  -0.40975212 -0.006927857   0.36774899  -0.72690177    5.1514467 
  162000    11.063613    1.4850131    9.5786004  -0.30508551   0.99022857    1.2683554    0.8054857   -3.5502959            3    5.2824614    7.3338156    7.5079143    1.0056543   0.01085876 -0.078126929   0.02463553    5.1191856    5.1113456    1.0329064        0.075    2.0918641          0.5   0.11476737    4.3566388    2.7866012    33.336665 -0.020644401  -0.40666206 -0.013677778   0.34848702   -1.2344786  0.075711364 
  163000    11.105272    1.4873098    9.6179619  -0.29032232   0.99176004    1.2692678   0.80742977   -3.5502959            3    5.1351297    7.2238149    7.3484328   0.83314136  0.018708496  0.068588023  0.043664341    4.9714598    4.9638908    1.0241469        0.075    2.0590472          0.5    0.1137941     4.393901    2.8033036    33.336665 -0.027687377  -0.33790966 -0.033165545   0.35369633   -1.4336844  -0.65427326 
  164000    11.099426    1.4748331     9.624593  -0.29749083   0.98344044    1.2953921   0.77618273   -3.5502959            3    5.1053539    7.1381137    7.2815068   0.89644139  0.019768467  -0.23828654 -0.005754372     4.948018    4.9305906    1.0207312        0.075    2.0582838          0.5   0.11341458    4.4086042    2.7877137    33.336665  0.011737567  -0.34285645 -0.012267526   0.35675532    3.4950848   0.46044852 
  165000    11.135937    1.5047342    9.6312032  -0.28990784    1.0033789    1.3088368   0.80045049   -3.5502959            3    5.2809586    7.3156742    7.3863919    1.1408097 0.0071997284  -0.14396311  0.076148342    5.1187035    5.1043814    1.0387142        0.075    2.0491928          0.5   0.11541269    4.3322793    2.8090593    33.336665 0.0026361789  -0.30903018 -0.0062350899   0.35379685    1.0623366    3.1578755 
  166000     11.05606    1.4491394    9.6069205  -0.30117384   0.96630746    1.2523253   0.77630385   -3.5502959            3    4.9262805    7.0111877    7.1970268   0.57062701 0.0080944889  -0.16200838 -0.025779798      4.76892    4.7573274    1.0096379        0.075    2.0526665          0.5   0.11218199    4.4570435    2.7882514    33.336665 -0.013261267  -0.34890448 -0.0064244822   0.34872121    2.4579395    4.7094635 
  167000    11.082668    1.4839703     9.598698  -0.28170251   0.98953323    1.3002986   0.78306732   -3.5502959            3    5.2887587    7.3646451    7.3948922    1.1067388 0.0079352858   0.27113316  0.037435712    5.1300273    5.1133335    1.0184273        0.075    2.0768111          0.5   0.11315859    4.4185775    2.7995368    33.336665  0.016281484  -0.33265654 0.00075177566    0.3298842   -2.4708253    4.4941362 
  168000    11.069268    1.4742719    9.5949962  -0.29518921   0.98306617    1.2929082   0.77721241   -3.5502959            3    5.0172404    7.1928392    7.2336706   0.62521142  0.028184169 -0.091016124  0.019574112    4.8596958    4.8428122    1.0326508        0.075    2.0632257          0.5   0.11473898     4.357717    2.8083472    33.336665 -0.0078458281  -0.31284896 -0.0068872247   0.35727463   -1.2934861    5.6595057 
  169000     11.08487    1.4918926    9.5929771  -0.29753172   0.99481591    1.2981969   0.79326666   -3.5502959            3    5.1139605    7.1912152    7.3405091   0.81015711  0.019735844 -0.035203884 -0.044680179    4.9531616    4.9388188    1.0219243        0.075    2.1050555          0.5   0.11354714    4.4034573    2.7921482    33.336665  0.011387177  -0.27346782  0.014700347   0.36611525     2.208392    3.6778314 
  170000    11.068347    1.4934452    9.5749013  -0.29641802   0.99585125     1.289461   0.80080575   -3.5502959            3    5.1436988    7.2234916    7.3557162   0.85188841 -0.012365006 -0.053072265 -0.041701958    4.9813716    4.9697356     1.037169        0.075    2.0833472          0.5     0.115241    4.3387336    2.7744721    33.336665 -0.0090572652  -0.35141495 -0.027323539   0.44507712    2.5398727  -0.60100025 
  171000    11.037033    1.4392735    9.5977594  -0.29862828   0.95972877    1.2056383   0.79641708   -3.5502959            3    5.2412472    7.3238356    7.3890375    1.0108686 -0.0011845936 0.0012325368  0.031010964    5.0798097    5.0785927    1.0197936        0.075     2.070245          0.5   0.11331041    4.4126574    2.8073799    33.336665 -0.017156887   -0.3913038 -0.0013649109   0.40175152   -1.5492496    3.8146861 
  172000    11.051754    1.4690166    9.5827374  -0.31221889   0.97956191    1.2674546   0.78831535   -3.5502959            3     5.125206    7.1749293    7.3141976   0.88649114  0.025646085  -0.19276799  -0.11140018    4.9654108    4.9542118    1.0272451        0.075    2.0799506          0.5   0.11413835    4.3806487    2.8197493    33.336665 0.0046200962  -0.35120927  0.009257041   0.37193437   0.65077471    3.5806463 
  173000    11.074775    1.4779435    9.5968313  -0.28598679   0.98551448    1.2726386   0.79478171   -3.5502959            3    5.1561341    7.2697142    7.3409286    0.8577595  0.013268427  0.075681228  0.018195535    4.9950281    4.9844405    1.0204524        0.075    2.0718865          0.5    0.1133836    4.4098089    2.7925365    33.336665 -0.0042591102  -0.36449298  0.031260993   0.37309033  -0.36832055    4.8336002 
  174000    11.107248    1.4867179    9.6205297  -0.29766589   0.99136538    1.2757057   0.80248749   -3.5502959            3    5.1308324    7.1833169    7.3500857   0.85909461 -0.007955405 -0.080839464  0.023814134    4.9681644     4.958725    1.0290471        0.075    2.0819313          0.5   0.11433857    4.3729775    2.7892892    33.336665 -0.017842404  -0.36698935 -0.0056310879   0.40228453   -1.5019563    3.3578878 
  175000     11.12065    1.4852299    9.6354204  -0.28804219   0.99037319    1.2704464   0.80433498   -3.5502959            3    5.2067819     7.263815    7.4041364   0.95239417  0.022696042  0.079096838  0.028135882    5.0437393     5.035384     1.019707        0.075    2.0618916          0.5   0.11330078    4.4130323    2.7953977    33.336665  0.019399024  -0.36663375 -0.017173339   0.33142348   0.63187043    8.1362638 
  176000    11.105851    1.4829716     9.622879  -0.28693705    0.9888673    1.2820768   0.79408559   -3.5502959            3     5.014005    7.1307654    7.2500034   0.66124633  0.014247585  -0.10206966 -0.078476824    4.8530401    4.8410381    1.0192529        0.075     2.050261          0.5   0.11325033    4.4149983    2.7910117    33.336665  0.016368603  -0.36814115 -0.025356592   0.38123041    1.3665925   -3.5135426 
  177000    11.153421    1.5226742    9.6307466  -0.27834472    1.0153416    1.3203803   0.81269661   -3.5502959            3    4.8928598    7.1177075     7.112922   0.44794991 -0.0092737003 0.0095517541 -0.063645589    4.7281224    4.7147253    1.0386715        0.075    2.0177058          0.5   0.11540794    4.3324574    2.8113418    33.336665 0.0019288595  -0.28171723 -0.016537699   0.29410135   0.96496834    5.0089167 
  178000    11.166269    1.5337963    9.6324731   -0.2979158     1.022758    1.3383405   0.81309821   -3.5502959            3    5.1021193    7.1358332    7.3134317   0.85709303  0.010289669  -0.18242223   0.02749939    4.9373005    4.9215618    1.0295114        0.075    2.0779389          0.5   0.11439015    4.3710057    2.7886841    33.336665 -0.0072171367   -0.3714315 -0.006850135     0.364045   -0.7664467   -1.2310231 
  179000    11.118276    1.5080476    9.6102284  -0.30474805    1.0055883    1.2806053   0.82292091   -3.5502959            3     5.333541    7.3136266    7.4647423     1.222254 -0.0087913283   0.11526184 -0.081314164     5.166731    5.1607726    1.0234025        0.075    2.0570432          0.5   0.11371139    4.3970969    2.7953556    33.336665 -0.0026578016  -0.35818372 -0.0059857895   0.43469685  -0.25818746    6.9366919 
  180000    11.081032    1.4558183    9.6252138  -0.30398251   0.97076105    1.2785225   0.76628748   -3.5502959            3     5.093834    7.1288929     7.303251   0.84935796  0.024615627  -0.33932819  0.014341216    4.9385039    4.9213465    1.0275014        0.075    2.0564727          0.5   0.11416682    4.3795562     2.813601    33.336665 0.0024836746  -0.37906747 0.0028267569   0.34876832    2.5195663    4.2637837 
  181000    11.124224    1.5092767    9.6149475  -0.30095599    1.0064079    1.2601524   0.83789892   -3.5502959            3    5.2259403    7.2479302     7.343874    1.0860165  0.025576701 8.375113e-05  0.047191783    5.0560942    5.0559312    1.0135977        0.075     2.042011          0.5   0.11262197    4.4396313    2.8075613    33.336665 -0.0029538712  -0.38866501  0.016112204   0.32630616   -1.8646488    6.3074268 
  182000    11.111839    1.5059433    9.6058959  -0.29338894    1.0041852    1.3033186   0.80546638   -3.5502959            3    5.3234413    7.3615032    7.4431569    1.1656637  0.050352589  -0.16402116 0.00066204805    5.1601694    5.1476086    1.0285482        0.075    2.0501882          0.5   0.11428314    4.3750986    2.7944557    33.336665 -0.001447982  -0.35861215 -0.034206505   0.31696987    0.5838839    2.5097799 
  183000    11.138609    1.4771647    9.6614442  -0.28620846   0.98499514    1.2294408   0.82266706   -3.5502959            3    4.9232382    7.0470171    7.1765718   0.54612576  0.008803974  -0.12360431   0.11905806    4.7564797    4.7573725    1.0253015        0.075     2.040366          0.5   0.11392239    4.3889529    2.7955065    33.336665 0.00093776363  -0.31928133 0.0051999529   0.40995672    1.1286964   -1.8377582 
  184000    11.105564    1.4737239    9.6318403   -0.2966296   0.98270077    1.2501659   0.80505106   -3.5502959            3    5.2474673     7.351712    7.4076392   0.98305059  0.019804172  0.019432484  0.042449307    5.0842796    5.0788055    1.0389197        0.075    2.0582109          0.5   0.11543553    4.3314222     2.824705    33.336665  -0.02230623  -0.35932738  0.014995798    0.3737028    1.2067112    2.2918741 
  185000    11.076229    1.4631632    9.6130662  -0.28726783   0.97565875    1.2267889   0.80887832   -3.5502959            3    5.0990718    7.1732563    7.2695573    0.8544018  0.015746936 0.0044975602 -0.0041757728    4.9351083    4.9335639    1.0406166        0.075    2.0519344          0.5   0.11562407    4.3243592    2.8226556    33.336665  0.001762744    -0.357138 0.0059750158   0.38211483   0.23905569   0.83959985 
  186000    11.088638    1.4673342    9.6213036  -0.27969538   0.97844001    1.2370298    0.8066958   -3.5502959            3    5.2514066    7.3724561     7.396805   0.98495857  0.010671607  -0.15464558 -0.065852108    5.0878855     5.084517    1.0244938        0.075    2.0007137          0.5   0.11383264    4.3924133    2.7860454    33.336665  0.018322652  -0.34695718 -0.015710813   0.35833844 -0.096125135    7.9560979 
  187000    11.081562    1.4984278    9.5831345  -0.29926553   0.99917371    1.2979944   0.80066121   -3.5502959            3    5.3283563    7.3490394    7.4835634     1.152466 0.0070970218   0.16756797  0.032977792    5.1660584    5.1532419    1.0211268        0.075    2.0389355          0.5   0.11345853    4.4068965    2.7958017    33.336665 -0.0093060184  -0.45422333 -0.017247878   0.41050506    1.0791732    5.6927312 
  188000    11.105486    1.4952102     9.610276  -0.29040339   0.99702818    1.2929363   0.80045335   -3.5502959            3    5.2926842    7.2634672     7.356278    1.2583076 -0.0083227763 -0.011750526  0.043951978    5.1304286    5.1182522    1.0146881        0.075    2.0882627          0.5   0.11274312    4.4348603    2.8098973    33.336665  0.020395798  -0.36576196  0.013686801    0.3850482   -2.7603274    5.0175522 
  189000    11.105099    1.4941448     9.610954  -0.30568852   0.99631771    1.2606974   0.82072663   -3.5502959            3    5.2496491    7.2976473    7.4171577    1.0341422  0.027077522   -0.1362053 -0.028712237    5.0832839    5.0795665    1.0451415        0.075    2.0708856          0.5   0.11612684    4.3056369     2.820262    33.336665 0.0061181814  -0.34560271 0.0051367096   0.43165186    1.9726588     4.184399 
  190000     11.03955    1.4463138    9.5932363  -0.29858214   0.96442333    1.2415513   0.78033574   -3.5502959            3    5.0497633    7.0700317    7.2997651   0.77949304  -0.01700354  0.037749116 -0.040718953    4.8915855    4.8822637    1.0164597        0.075    2.0612122          0.5   0.11293997    4.4271306    2.8100934    33.336665 -0.0085010927  -0.33790741 -0.014149096   0.40036395   -1.7738479  -0.23670263 
  191000    11.088495    1.5080807    9.5804143  -0.29244964    1.0056104     1.264369    0.8337639   -3.5502959            3     5.451311    7.4645701    7.4910475    1.3983155 -0.018816631  0.016410842 -0.017901023    5.2823031    5.2807331     1.030425        0.075    2.0679904          0.5   0.11449167      4.36713    2.7965037    33.336665 0.0026052174  -0.45938031  0.012258839   0.40532095   0.94780106     6.038888 
  192000    11.080225    1.4956611    9.5845635   -0.2822002   0.99732885    1.2640777   0.82016129   -3.5502959            3    5.1010768    7.2344479    7.2860528   0.78272987 0.0046197139   0.23468897 -0.029152314    4.9348263    4.9305382    1.0135256        0.075    2.0529496          0.5   0.11261395    4.4399472    2.7972527    33.336665 -0.013587603  -0.32940842   0.02399722    0.3254766   -2.8090758   -5.2361743 
  193000    11.123018    1.4829245     9.640094  -0.28001608   0.98883587    1.2398105    0.8221638   -3.5502959            3    5.2153797    7.2550197    7.4329076   0.95821183  0.043856274  -0.18433205 0.0036926907    5.0487232     5.048115    1.0394954        0.075    2.1065856          0.5   0.11549949    4.3290236    2.7989486    33.336665  -0.01082272  -0.41702792  0.013820791   0.37602368    3.5253768   0.67362702 
  194000     11.07964    1.4631075    9.6165321  -0.28306167   0.97562158    1.2372285   0.80186825   -3.5502959            3    5.1640529    7.2500254    7.3405368   0.90159655 -0.021611213  -0.21140183  0.025502952    5.0015104    4.9971365    1.0188787        0.075    2.0987707          0.5   0.11320875    4.4166199    2.8030041    33.336665 -0.010483865  -0.44392557  0.034304409   0.39571395   0.18437938  -0.92587735 
  195000    11.070134    1.4572398     9.612894  -0.29174734   0.97170893    1.2637215   0.77771751   -3.5502959            3     5.230419    7.2116927    7.3969424     1.082622  0.016770623   0.15282521 -0.090049505     5.072772    5.0599285    1.0223459        0.075    2.0916722          0.5   0.11359398    4.4016415    2.7934916    33.336665 -0.0091278909  -0.40059592 0.0096031013   0.40512197   -3.7416847    3.7828864 
  196000    11.113647    1.5030749    9.6105718  -0.30930979    1.0022725    1.2794341   0.81817645   -3.5502959            3    5.0396313    7.1613389    7.2210911   0.73646386  0.014754499  -0.17528146   0.04343451     4.873783    4.8670209    1.0234416        0.075    2.0637959          0.5   0.11371574    4.3969289    2.8085376    33.336665 0.0076933763  -0.31323114 -0.008226148   0.39016907  -0.37477613    7.2936873 
  197000    11.096013    1.4817841    9.6142289  -0.28555281   0.98807545    1.2933847   0.78524036   -3.5502959            3    5.2898361     7.305844    7.4530941    1.1105703  0.028116663    0.0587796  0.022077148    5.1306642    5.1153436    1.0153528        0.075    2.0776743          0.5   0.11281698     4.431957    2.8010688    33.336665 -0.020076937  -0.33977563  -0.02641308   0.34562112  -0.87558275     7.056316 
  198000    11.118041    1.4816734    9.6363676  -0.30173057   0.98800161    1.2607722    0.8068228   -3.5502959            3    5.2020249    7.2177133    7.3629081    1.0254534 -0.0067058126   -0.1110376  0.048562698    5.0384781    5.0319322    1.0381784        0.075    2.0572633          0.5   0.11535315    4.3345152    2.8048898    33.336665  0.027606811  -0.37915511 -0.018843914   0.37109415   0.66917261      4.44804 
  199000    11.126632    1.5213867    9.6052457  -0.28111483    1.0144831    1.3011379   0.82407328   -3.5502959            3    5.2540565    7.3527515    7.3885589    1.0208592 -0.027787035 -0.075799646 -0.059855843     5.087013     5.078518    1.0150043        0.075    2.0478673          0.5   0.11277825    4.4334788    2.8071953    33.336665 0.0085295654   -0.4138825 0.0052115081   0.50149103 -0.059599014    2.7788491 
  200000    11.127277    1.5248404    9.6024364  -0.27900929     1.016786     1.318225   0.81653743   -3.5502959            3    5.3850331    7.4929925    7.4949195    1.1671873 0.0034648296  -0.13428597  -0.14815224    5.2195171    5.2071894    1.0272595        0.075    2.0468534          0.5   0.11413995    4.3805872    2.7818751    33.336665 -0.010234743  -0.34805413 -0.0099474817   0.35043135   0.56144415    3.5320484 
Loop time of 75.4862 on 1 procs for 100000 steps with 4504 atoms

Performance: 572290.012 tau/day, 1324.745 timesteps/s
98.7% CPU use with 1 MPI tasks x 1 OpenMP threads

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 9.6915     | 9.6915     | 9.6915     |   0.0 | 12.84
Bond    | 17.137     | 17.137     | 17.137     |   0.0 | 22.70
Neigh   | 29.028     | 29.028     | 29.028     |   0.0 | 38.45
Comm    | 1.7455     | 1.7455     | 1.7455     |   0.0 |  2.31
Output  | 0.17105    | 0.17105    | 0.17105    |   0.0 |  0.23
Modify  | 16.217     | 16.217     | 16.217     |   0.0 | 21.48
Other   |            | 1.496      |            |       |  1.98

Nlocal:    4504 ave 4504 max 4504 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Nghost:    1386 ave 1386 max 1386 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Neighs:    10020 ave 10020 max 10020 min
Histogram: 1 0 0 0 0 0 0 0 0 0

Total # of neighbors = 10020
Ave neighs/atom = 2.22469
Ave special neighs/atom = 6.98401
Neighbor list builds = 14883
Dangerous builds = 0
