LAMMPS (5 Jun 2019)
OMP_NUM_THREADS environment is not set. Defaulting to 1 thread. (src/comm.cpp:88)
  using 1 OpenMP thread(s) per MPI task
#--- Brush Variables---#
variable      M      equal  $(2 * 30)                 # The number of polymer chains on each brush
variable      M      equal  60                 
variable      N      string 30                 # The number of beads per chain
variable      xhi    equal  $(sqrt(2) * 20)                 # The width of the polymer Brush
variable      xhi    equal  28.284271247461902021                 
variable      yhi    equal  $(sqrt(2) * 20)                 # The length of the polymer Brush
variable      yhi    equal  28.284271247461902021                 
variable      wthick equal  3                  # The thickness of the walls wthick=1,2,3,4 gives 2,3,4,6 layers respectively

#--- Simulation Variables ---#
variable       Temp      index 1        #0.8 1 1.68                 #[Grest96]
variable       Tstep     equal 0.005                       # Timestep in Tau (default = 0.005)
variable       Nequil    equal 30000                       # Number of timesteps to equilibrate
variable       Ncomp     equal 70000                     # Number of timesteps to compress - until no more occilation of walls
variable       Nshear    equal 100000      #2000000                      # Number of timesteps to shear - use approx 4ns for 10m/s
variable       Nthermo   equal 1000                        # Number of timesteps between thermo data prints
variable       Ndump_e   equal 10000
variable       Ndump_c   equal 10000                      # Number of timesteps per dump file (compression)
variable       Ndump_s   equal 10000                       # Number of timesteps per dump file (shear)
variable       Wall_v    index 0.5   #0.001 0.01 0.1 0.2 0.4 0.6 0.8 1 1.2 1.4 1.6 1.8 2   # 0.005 0.05 0.1 0.5 1.5 0.001 0.003 0.2 0.0002 2                      # Wall velocity (A/fs) - equal to 10 m/s
variable       Pcomp     index 3 #3 4 5 8 10 1.50 0.5 0.05

include        MDPBB.in
# This is an input script that creates a mono disperse polymer brush bilayer
# A coarse grained bead-spring model is used for the polymers which are end
# grafted to the surfaces of 2 opposing FCC walls at random sites.

#--- Initialization ---#

dimension     3
boundary      p p f
units         lj
atom_style    bond


#--- Moved to main.in ---#
#variable      M      equal  50                # The number of polymer chains on each brush
#variable      N      string 80                # The number of beads per chain
#variable      xhi    equal  15                # The width of the polymer Brush
#variable      yhi    equal  20                # The length of the polymer Brush
#variable      wthick equal  3                 # The thickness of the walls wthick=1,2,3,4 gives 2,3,4,6 layers respectively

variable      zhi    equal  $(1.1 * 2 * v_N + (2 * v_wthick))  # The initial height of the simulation box the value is such that no overlaps occur
variable      zhi    equal  72  
variable      z0     equal  $((v_zhi)/4 - (v_N)/30)          # This is the location at which to place the CoM of the molecule
variable      z0     equal  17          

print "The number of grafted chains = $(v_M)"
The number of grafted chains = 60
print "The number of beads per chain = $(v_N)"
The number of beads per chain = 30

variable      check  equal count(all)         # The number of atoms in the system
variable      ntwall equal count(twall)       # The number of atoms in the top wall
variable      nbwall equal count(bwall)       # The number of atoms in the bottom wall
variable      s equal 234897  #45335              # Seed for the RNG

print "zhi = ${zhi}"
zhi = 72

#--- Create the simulation box ---#

region        sbox block 0 ${xhi} 0 ${yhi} 0 ${zhi}
region        sbox block 0 28.2842712474619 0 ${yhi} 0 ${zhi}
region        sbox block 0 28.2842712474619 0 28.2842712474619 0 ${zhi}
region        sbox block 0 28.2842712474619 0 28.2842712474619 0 72
create_box    4 sbox bond/types 3 extra/bond/per/atom 12 extra/special/per/atom 2
Created orthogonal box = (0 0 0) to (28.2843 28.2843 72)
  1 by 1 by 1 MPI processor grid

mass          1 1.0                   # Wall atoms that are not grafted
mass          2 1.0                   # Grafted bead
mass          3 1.0                   # The rest of the beads on the chain
mass          4 1.0                   # Wall atoms that the chains are grafted to

bond_style    hybrid fene harmonic    # Finitely extensible linearly elastic bond between neighbouring beads
#bond_coeff    1 fene 30.0 1.5 0.0 0.0      # Values obtained from literature [Grest, Galushcko]
bond_coeff    1 fene 30.0 30.0 0.0 0.0
bond_coeff    2 fene 30.0 30.0 0.0 0.0       # This is the grafting bond between the polymer and the wall atom
special_bonds fene                    #
  0 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.000293 secs
pair_style	  lj/cut 1.122462         # LJ potential with rc=2^1/6
#pair_coeff	  * * 1.0 1.0             # LJ potential acts between all atoms
pair_coeff    1 1 0.0 0.0
pair_coeff    1 2 1.0 1.0
pair_coeff    1 3 1.0 1.0
pair_coeff    2 2 1.0 1.0
pair_coeff    2 3 1.0 1.0
pair_coeff    2 4 1.0 1.0
pair_coeff    3 3 1.0 1.0
pair_coeff    3 4 1.0 1.0
pair_coeff    4 4 0.0 0.0
neighbor      10 bin                  #
neigh_modify  one 4000

#--- Create and read the molecule file ---#
python        BSMolf input 1 $N format i file BSMolf.py
python        BSMolf input 1 30 format i file BSMolf.py
python        BSMolf invoke    # Call the python function with number of beads to write the mol file
molecule      bs     bsmol.txt     # Read the Mol file to define the polymer chain
Read molecule bs:
  30 atoms with max type 2
  29 bonds with max type 1
  0 angles with max type 0
  0 dihedrals with max type 0
  0 impropers with max type 0

#--- Define the FCC wall region ---#
region        wall  block 0 ${xhi} 0 ${yhi} 0 ${wthick}
region        wall  block 0 28.2842712474619 0 ${yhi} 0 ${wthick}
region        wall  block 0 28.2842712474619 0 28.2842712474619 0 ${wthick}
region        wall  block 0 28.2842712474619 0 28.2842712474619 0 3
lattice       fcc 1
Lattice spacing in x,y,z = 1.5874 1.5874 1.5874

#--- Create the Top Brush  (At the bottom then rotate 180 degrees to top) ---#

create_atoms  1 region wall
Created 2592 atoms
  create_atoms CPU = 0.0015656 secs
group         twall  region wall
2592 atoms in group twall
#group         tsurf  region wsurf

# A loop to insert the Chains into the sim box
variable      i loop $M                                   # Index to insert N total number of chains
variable      i loop 60                                   
label         loop                                        # Start of loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1628                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1628]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1628 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1628                         
1 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 1
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 1
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1628]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1628]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 2592                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 2592+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 7.1433047338569 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 7.1433047338569 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.4e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 2622               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1628 $b
create_bonds  single/bond 2 1628 2593
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020087 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 408                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[408]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1958                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1958]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1976                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1976]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1976 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1976                         
2 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 2
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 2
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1976]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1976]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 2622                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 2622+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 15.0803099936979 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 15.0803099936979 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 7.21e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 2652               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1976 $b
create_bonds  single/bond 2 1976 2623
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020044 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1883                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1883]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1883 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1883                         
3 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 3
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 3
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1883]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1883]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 2652                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 2652+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 12.6992084157456 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 12.6992084157456 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 4.81e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 2682               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1883 $b
create_bonds  single/bond 2 1883 2653
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0033692 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2554                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2554]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1232                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1232]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 869                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[869]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1122                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1122]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1876                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1876]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1876 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1876                         
4 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 4
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 4
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1876]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1876]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 2682                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 2682+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 13.4929089417297 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 13.4929089417297 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 5.45e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 2712               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1876 $b
create_bonds  single/bond 2 1876 2683
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019148 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2321                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2321]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 19                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[19]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 494                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[494]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 847                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[847]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2100                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2100]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2100 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2100                         
5 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 5
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 5
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2100]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2100]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 2712                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 2712+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 18.2551120976343 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 18.2551120976343 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 7.08e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 2742               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2100 $b
create_bonds  single/bond 2 2100 2713
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020004 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1839                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1839]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1839 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1839                         
6 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 6
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 6
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1839]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1839]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 2742                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 2742+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 11.1118073637774 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 11.1118073637774 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 6.55e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 2772               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1839 $b
create_bonds  single/bond 2 1839 2743
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0033376 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1785                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1785]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1448                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1448]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1448 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1448                         
7 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 7
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 7
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1448]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1448]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 2772                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 2772+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 3.9685026299205 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 3.9685026299205 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.16e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 2802               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1448 $b
create_bonds  single/bond 2 1448 2773
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019922 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2019                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2019]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2019 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2019                         
8 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 8
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 8
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2019]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2019]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 2802                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 2802+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 15.874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 15.874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.05e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 2832               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2019 $b
create_bonds  single/bond 2 2019 2803
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020292 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1595                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1595]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1595 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1595                         
9 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 9
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 9
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1595]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1595]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 2832                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 2832+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 6.3496042078728 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 6.3496042078728 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.28e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 2862               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1595 $b
create_bonds  single/bond 2 1595 2833
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0037494 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1606                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1606]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 311                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[311]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2257                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2257]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1560                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1560]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1560 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1560                         
10 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 10
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 10
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1560]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1560]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 2862                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 2862+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 17.4614115716502 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 17.4614115716502 5.5559036818887 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 17.4614115716502 5.5559036818887 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 5.75e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 2892               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1560 $b
create_bonds  single/bond 2 1560 2863
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020365 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2382                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2382]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1806                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1806]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2327                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2327]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2327 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2327                         
11 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 11
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 11
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2327]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2327]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 2892                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 2892+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 22.2236147275548 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 22.2236147275548 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.27e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 2922               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2327 $b
create_bonds  single/bond 2 2327 2893
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019417 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1525                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1525]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2204                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2204]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2204 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2204                         
12 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 12
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 12
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2204]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2204]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 2922                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 2922+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 19.8425131496025 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 19.8425131496025 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 5.49e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 2952               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2204 $b
create_bonds  single/bond 2 2204 2923
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0036581 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2172                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2172]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2172 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2172                         
13 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 13
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 13
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2172]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2172]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 2952                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 2952+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 19.8425131496025 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 19.8425131496025 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 6.55e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 2982               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2172 $b
create_bonds  single/bond 2 2172 2953
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020156 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1078                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1078]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2588                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2588]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2588 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2588                         
14 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 14
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 14
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2588]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2588]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 2982                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 2982+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 25.3984168314912 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 25.3984168314912 27.7795184094435 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 25.3984168314912 27.7795184094435 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 7.12e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3012               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2588 $b
create_bonds  single/bond 2 2588 2983
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020654 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2526                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2526]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1878                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1878]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2435                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2435]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2435 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2435                         
15 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 15
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 15
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2435]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2435]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3012                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3012+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 23.811015779523 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 23.811015779523 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 6.7e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3042               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2435 $b
create_bonds  single/bond 2 2435 3013
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0034456 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 612                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[612]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2418                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2418]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 339                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[339]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2204                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2204]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2204 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2204                         
15 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 15
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 16
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2204]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2204]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3042                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3042+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2421                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2421]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 888                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[888]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 675                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[675]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1721                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1721]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1209                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1209]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 375                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[375]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2387                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2387]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2387 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2387                         
16 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 16
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 16
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2387]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2387]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3042                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3042+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 23.811015779523 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 23.811015779523 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.69e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3072               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2387 $b
create_bonds  single/bond 2 2387 3043
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.002082 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2480                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2480]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2480 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2480                         
17 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 17
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 17
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2480]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2480]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3072                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3072+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 26.1921173574753 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 26.1921173574753 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.34e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3102               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2480 $b
create_bonds  single/bond 2 2480 3073
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019953 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2344                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2344]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2344 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2344                         
18 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 18
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 18
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2344]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2344]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3102                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3102+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 23.0173152535389 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 23.0173152535389 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 6.5e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3132               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2344 $b
create_bonds  single/bond 2 2344 3103
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.001958 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2066                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2066]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1137                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1137]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 962                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[962]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1818                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1818]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 243                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[243]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 982                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[982]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1131                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1131]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 852                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[852]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1581                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1581]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 742                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[742]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 618                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[618]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 223                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[223]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1765                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1765]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1901                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1901]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 873                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[873]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1296                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1296]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1116                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1116]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 587                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[587]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1502                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1502]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 474                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[474]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2287                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2287]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2287 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2287                         
19 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 19
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 19
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2287]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2287]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3132                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3132+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 20.6362136755866 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 20.6362136755866 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.11e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3162               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2287 $b
create_bonds  single/bond 2 2287 3133
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020264 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1195                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1195]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2543                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2543]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2543 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2543                         
20 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 20
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 20
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2543]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2543]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3162                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3162+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 26.9858178834594 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 26.9858178834594 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 7.86e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3192               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2543 $b
create_bonds  single/bond 2 2543 3163
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.002439 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1989                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1989]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2383                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2383]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2383 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2383                         
21 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 21
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 21
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2383]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2383]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3192                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3192+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 23.811015779523 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 23.811015779523 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 6.19e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3222               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2383 $b
create_bonds  single/bond 2 2383 3193
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020378 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2577                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2577]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1228                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1228]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 861                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[861]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 182                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[182]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 670                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[670]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 470                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[470]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1063                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1063]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1549                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1549]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1233                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1233]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2152                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2152]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2152 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2152                         
22 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 22
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 22
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2152]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2152]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3222                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3222+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 18.2551120976343 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 18.2551120976343 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.77e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3252               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2152 $b
create_bonds  single/bond 2 2152 3223
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020864 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 386                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[386]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 430                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[430]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2079                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2079]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2079 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2079                         
23 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 23
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 23
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2079]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2079]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3252                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3252+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 24.6047163055071 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 24.6047163055071 15.874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 24.6047163055071 15.874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 5.99e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3282               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2079 $b
create_bonds  single/bond 2 2079 3253
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019388 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1644                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1644]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1644 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1644                         
24 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 24
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 24
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1644]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1644]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3282                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3282+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 7.1433047338569 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 7.1433047338569 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001327 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3312               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1644 $b
create_bonds  single/bond 2 1644 3283
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019482 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 586                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[586]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 836                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[836]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 699                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[699]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2040                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2040]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2040 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2040                         
25 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 25
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 25
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2040]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2040]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3312                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3312+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 16.6677110456661 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 16.6677110456661 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 7.91e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3342               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2040 $b
create_bonds  single/bond 2 2040 3313
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0021571 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2257                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2257]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1127                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1127]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2587                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2587]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2587 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2587                         
26 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 26
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 26
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2587]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2587]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3342                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3342+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.1921173574753 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.1921173574753 26.9858178834594 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.1921173574753 26.9858178834594 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 6.15e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3372               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2587 $b
create_bonds  single/bond 2 2587 3343
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0032136 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1690                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1690]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2374                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2374]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1116                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1116]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1406                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1406]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1897                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1897]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1123                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1123]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 760                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[760]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 36                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[36]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 389                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[389]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1494                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1494]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 275                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[275]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1315                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1315]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1315 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1315                         
27 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 27
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 27
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1315]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1315]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3372                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3372+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 0 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 0 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 6.21e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3402               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1315 $b
create_bonds  single/bond 2 1315 3373
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.003113 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 467                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[467]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 852                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[852]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 100                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[100]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2435                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2435]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2435 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2435                         
27 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 27
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 28
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2435]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2435]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3402                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3402+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 892                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[892]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 936                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[936]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1264                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1264]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1906                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1906]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 476                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[476]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1310                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1310]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1243                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1243]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2393                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2393]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 631                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[631]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1603                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1603]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1603 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1603                         
28 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 28
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 28
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1603]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1603]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3402                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3402+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 6.3496042078728 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 6.3496042078728 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.25e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3432               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1603 $b
create_bonds  single/bond 2 1603 3403
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0021618 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 555                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[555]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2309                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2309]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 461                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[461]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 823                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[823]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 986                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[986]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1386                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1386]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1076                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1076]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2061                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2061]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1478                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1478]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1266                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1266]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1509                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1509]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 167                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[167]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 300                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[300]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1060                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1060]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 887                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[887]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 990                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[990]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1285                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1285]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2152                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2152]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2152 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2152                         
28 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 28
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 29
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2152]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2152]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3432                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3432+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2081                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2081]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2566                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2566]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 261                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[261]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1361                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1361]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2219                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2219]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2219 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2219                         
29 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 29
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 29
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2219]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2219]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3432                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3432+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 19.0488126236184 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 19.0488126236184 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001173 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3462               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2219 $b
create_bonds  single/bond 2 2219 3433
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020093 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2447                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2447]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2447 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2447                         
30 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 30
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 30
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2447]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2447]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3462                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3462+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 23.811015779523 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 23.811015779523 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001116 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3492               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2447 $b
create_bonds  single/bond 2 2447 3463
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019719 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 858                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[858]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1434                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1434]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1045                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1045]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 892                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[892]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2095                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2095]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2095 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2095                         
31 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 31
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 31
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2095]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2095]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3492                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3492+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 17.4614115716502 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 17.4614115716502 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.99e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3522               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2095 $b
create_bonds  single/bond 2 2095 3493
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0031901 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1769                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1769]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2540                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2540]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2540 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2540                         
32 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 32
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 32
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2540]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2540]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3522                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3522+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 6.3496042078728 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 6.3496042078728 27.7795184094435 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 6.3496042078728 27.7795184094435 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 6.88e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3552               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2540 $b
create_bonds  single/bond 2 2540 3523
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020315 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 452                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[452]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 382                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[382]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 751                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[751]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1931                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1931]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1931 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1931                         
33 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 33
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 33
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1931]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1931]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3552                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3552+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 12.6992084157456 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 12.6992084157456 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.32e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3582               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1931 $b
create_bonds  single/bond 2 1931 3553
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0021617 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2246                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2246]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 79                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[79]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 50                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[50]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 968                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[968]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1432                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1432]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1432 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1432                         
34 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 34
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 34
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1432]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1432]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3582                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3582+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 2.3811015779523 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 2.3811015779523 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.72e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3612               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1432 $b
create_bonds  single/bond 2 1432 3583
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0021772 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2052                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2052]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2052 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2052                         
35 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 35
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 35
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2052]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2052]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3612                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3612+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 16.6677110456661 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 16.6677110456661 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.51e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3642               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2052 $b
create_bonds  single/bond 2 2052 3613
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0021262 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1046                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1046]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1912                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1912]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1912 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1912                         
36 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 36
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 36
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1912]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1912]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3642                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3642+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 13.4929089417297 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 13.4929089417297 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001241 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3672               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1912 $b
create_bonds  single/bond 2 1912 3643
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020751 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1175                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1175]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 79                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[79]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 350                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[350]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2273                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2273]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2384                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2384]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2384 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2384                         
37 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 37
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 37
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2384]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2384]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3672                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3672+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 24.6047163055071 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 24.6047163055071 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.03e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3702               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2384 $b
create_bonds  single/bond 2 2384 3673
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020955 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 319                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[319]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1600                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1600]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1600 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1600                         
38 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 38
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 38
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1600]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1600]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3702                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3702+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 7.1433047338569 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 7.1433047338569 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 7.1e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3732               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1600 $b
create_bonds  single/bond 2 1600 3703
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.001947 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2108                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2108]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2108 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2108                         
39 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 39
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 39
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2108]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2108]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3732                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3732+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 6.3496042078728 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 6.3496042078728 18.2551120976343 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 6.3496042078728 18.2551120976343 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.81e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3762               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2108 $b
create_bonds  single/bond 2 2108 3733
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0022096 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2013                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2013]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2342                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2342]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2561                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2561]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 539                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[539]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 663                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[663]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2211                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2211]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2211 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2211                         
40 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 40
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 40
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2211]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2211]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3762                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3762+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 19.0488126236184 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.8425131496025 19.0488126236184 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.13e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3792               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2211 $b
create_bonds  single/bond 2 2211 3763
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019685 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 285                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[285]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 575                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[575]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 475                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[475]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 44                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[44]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 66                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[66]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 632                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[632]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 609                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[609]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 230                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[230]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1731                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1731]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1731 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1731                         
41 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 41
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 41
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1731]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1731]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3792                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3792+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 9.5244063118092 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0.7937005259841 9.5244063118092 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.75e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3822               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1731 $b
create_bonds  single/bond 2 1731 3793
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0030538 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2408                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2408]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2408 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2408                         
42 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 42
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 42
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2408]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2408]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3822                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3822+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 24.6047163055071 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 24.6047163055071 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.67e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3852               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2408 $b
create_bonds  single/bond 2 2408 3823
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0022048 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1160                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1160]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2245                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2245]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1872                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1872]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1872 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1872                         
43 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 43
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 43
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1872]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1872]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3852                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3852+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 11.9055078897615 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 11.9055078897615 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.1e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3882               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1872 $b
create_bonds  single/bond 2 1872 3853
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020145 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1952                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1952]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1952 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1952                         
44 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 44
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 44
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1952]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1952]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3882                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3882+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 15.0803099936979 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 15.0803099936979 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 6.93e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3912               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1952 $b
create_bonds  single/bond 2 1952 3883
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019894 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1320                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1320]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1320 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1320                         
45 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 45
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 45
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1320]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1320]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3912                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3912+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 0.7937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 0.7937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.09e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3942               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1320 $b
create_bonds  single/bond 2 1320 3913
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0022474 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 131                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[131]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2026                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2026]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1913                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1913]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 129                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[129]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1274                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1274]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 598                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[598]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 785                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[785]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 398                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[398]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2573                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2573]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2010                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2010]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 361                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[361]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 187                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[187]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1849                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1849]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1950                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1950]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 67                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[67]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1727                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1727]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1727 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1727                         
46 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 46
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 46
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1727]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1727]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3942                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3942+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 7.937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 7.937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 7.19e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 3972               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1727 $b
create_bonds  single/bond 2 1727 3943
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0021858 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 238                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[238]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 201                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[201]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1360                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1360]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1360 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1360                         
47 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 47
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 47
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1360]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1360]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 3972                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 3972+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 0.7937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 0.7937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 7.43e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4002               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1360 $b
create_bonds  single/bond 2 1360 3973
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0032508 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 822                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[822]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 347                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[347]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1893                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1893]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1612                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1612]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1612 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1612                         
48 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 48
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 48
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1612]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1612]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4002                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4002+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 7.1433047338569 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 7.1433047338569 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.66e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4032               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1612 $b
create_bonds  single/bond 2 1612 4003
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020711 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 465                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[465]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 53                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[53]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 564                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[564]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2000                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2000]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2000 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2000                         
49 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 49
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 49
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2000]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2000]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4032                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4032+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 15.0803099936979 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 15.0803099936979 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 7.39e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4062               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2000 $b
create_bonds  single/bond 2 2000 4033
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019953 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 657                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[657]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 859                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[859]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1119                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1119]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 484                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[484]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1275                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1275]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1484                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1484]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1484 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1484                         
50 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 50
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 50
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1484]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1484]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4062                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4062+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 3.9685026299205 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.874010519682 3.9685026299205 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 9.16e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4092               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1484 $b
create_bonds  single/bond 2 1484 4063
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0018916 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 681                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[681]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2346                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2346]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1294                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1294]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 327                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[327]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 497                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[497]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 524                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[524]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1346                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1346]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 427                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[427]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2320                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2320]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2320 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2320                         
51 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 51
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 51
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2320]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2320]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4092                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4092+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 23.0173152535389 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 23.0173152535389 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000116 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4122               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2320 $b
create_bonds  single/bond 2 2320 4093
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0036748 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2341                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2341]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2510                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2510]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1760                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1760]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1760 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1760                         
52 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 52
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 52
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1760]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1760]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4122                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4122+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 10.3181068377933 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 10.3181068377933 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.2e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4152               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1760 $b
create_bonds  single/bond 2 1760 4123
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0021287 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1566                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1566]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1156                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1156]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2489                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2489]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2239                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2239]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2239 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2239                         
53 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 53
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 53
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2239]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2239]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4152                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4152+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 20.6362136755866 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 20.6362136755866 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001048 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4182               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2239 $b
create_bonds  single/bond 2 2239 4153
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0023916 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 729                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[729]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2525                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2525]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2160                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2160]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2160 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2160                         
54 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 54
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 54
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2160]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2160]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4182                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4182+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 18.2551120976343 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 18.2551120976343 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001344 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4212               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2160 $b
create_bonds  single/bond 2 2160 4183
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0022008 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1135                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1135]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1404                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1404]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1404 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1404                         
55 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 55
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 55
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1404]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1404]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4212                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4212+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 2.3811015779523 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 2.3811015779523 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.23e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4242               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1404 $b
create_bonds  single/bond 2 1404 4213
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0032188 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 715                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[715]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 357                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[357]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 598                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[598]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2124                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2124]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2124 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2124                         
56 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 56
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 56
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2124]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2124]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4242                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4242+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 18.2551120976343 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 18.2551120976343 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001204 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4272               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2124 $b
create_bonds  single/bond 2 2124 4243
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0022428 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 571                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[571]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1498                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1498]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1747                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1747]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1747 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1747                         
57 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 57
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 57
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1747]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1747]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4272                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4272+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 9.5244063118092 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 9.5244063118092 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 8.71e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4302               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1747 $b
create_bonds  single/bond 2 1747 4273
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0021088 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 560                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[560]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1453                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1453]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1598                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1598]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2452                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2452]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 2452 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 2452                         
58 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 58
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 58
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[2452]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[2452]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4302                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4302+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 26.1921173574753 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 26.1921173574753 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 7.82e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4332               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 2452 $b
create_bonds  single/bond 2 2452 4303
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0034809 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1455                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1455]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1455 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1455                         
59 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 59
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 59
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1455]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1455]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4332                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4332+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 3.1748021039364 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 3.1748021039364 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001242 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4362               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1455 $b
create_bonds  single/bond 2 1455 4333
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020324 secs
next i
jump MDPBB.in loop    # End of the loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 2434                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[2434]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 225                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[225]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
jump MDPBB.in loop
variable      randni equal round(random(1,${ntwall},$s))  # Pick a random "top" wall atom
variable      randni equal round(random(1,2592,$s))  
variable      randni equal round(random(1,2592,234897))  
variable      randatomi equal ${randni}                   # This is to obtain an integer number for atom-id
variable      randatomi equal 1723                   
variable      randzi equal z[${randatomi}]                # Determine the z coordinate of the chosen atom
variable      randzi equal z[1723]                
# if the chosen atom is not a surface atom then restart the loop
if            "${randzi} < $(v_wthick - 0.7)" then "jump MDPBB.in loop"
set           atom ${randatomi} type 4                    # Set this grafted wall atom as a new type
set           atom 1723 type 4                    
  1 settings made for type
group         twg id ${randatomi}                         # Add this atom to a top-wall-grafted group
group         twg id 1723                         
60 atoms in group twg
variable      twgcount equal count(twg)
print         "twg contains ${twgcount}"
twg contains 60
print         "i = $(v_i)"                                # The index i should always be equal to the number of atom in twg
i = 60
variable      x0 equal x[${randatomi}]                    # Determine its x-coord
variable      x0 equal x[1723]                    
variable      y0 equal y[${randatomi}]                    # Determine its y-coord
variable      y0 equal y[1723]                    
variable      check0 equal ${check}                       # Count the number of atoms in the simulation
variable      check0 equal 4362                       
variable      b equal ${check}+1                          # The grafted bead id will be one higher after being inserted
variable      b equal 4362+1                          
if            "${twgcount} != $(v_i)" then "jump MDPBB.in loop"
# Otherwise insert the chain directly above the chosen wall atom pointing perpendicular to the wall
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.1921173574753 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.1921173574753 7.937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.1921173574753 7.937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 7.84e-05 secs
variable      check1 equal ${check}               # Count the new total number of atoms
variable      check1 equal 4392               
# Check that the molecule has indeed been inserted (This check is no longer an issue).
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomi} $b" "next i"
create_bonds  single/bond 2 ${randatomi} $b
create_bonds  single/bond 2 1723 $b
create_bonds  single/bond 2 1723 4363
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019692 secs
next i
jump MDPBB.in loop    # End of the loop

# Rotate the created brush about the centre of the simulation box by 180 degrees to make it true top brush
displace_atoms all rotate $(v_xhi/2.0) $(v_yhi/2.0) $(v_zhi/2.0 - 1) 1 0 0 180 units box
displace_atoms all rotate 14.142135623730949234 $(v_yhi/2.0) $(v_zhi/2.0 - 1) 1 0 0 180 units box
displace_atoms all rotate 14.142135623730949234 14.142135623730949234 $(v_zhi/2.0 - 1) 1 0 0 180 units box
displace_atoms all rotate 14.142135623730949234 14.142135623730949234 35 1 0 0 180 units box

variable      ntop0 equal ${check}          # Count the total number of atoms in the top brush
variable      ntop0 equal 4392          

#--- Create the Bottom brush ---#

# Repeating the same procedure as above again but with new atoms

create_atoms  1 region wall
Created 2592 atoms
  create_atoms CPU = 0.0004476 secs
group         bwall region wall
2592 atoms in group bwall
variable      nbwall0 equal ${nbwall}
variable      nbwall0 equal 2592

variable      j loop $M
variable      j loop 60
label         loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4576
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4576]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5860
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5860]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 5860 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 5860                         
1 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 1
print         "j = $(v_j)"
j = 1
variable      x0 equal x[${randatomj}]
variable      x0 equal x[5860]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[5860]
variable      check0 equal ${check}
variable      check0 equal 6984
variable      b equal ${check}+1
variable      b equal 6984+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 3.9685026299205 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 3.9685026299205 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001552 secs
variable      check1 equal ${check}
variable      check1 equal 7014
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 5860 $b
create_bonds  single/bond 2 5860 6985
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.002373 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6347
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6347]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6347 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6347                         
2 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 2
print         "j = $(v_j)"
j = 2
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6347]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6347]
variable      check0 equal ${check}
variable      check0 equal 7014
variable      b equal ${check}+1
variable      b equal 7014+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 14.2866094677138 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 14.2866094677138 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001438 secs
variable      check1 equal ${check}
variable      check1 equal 7044
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6347 $b
create_bonds  single/bond 2 6347 7015
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0033391 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6818
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6818]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6854
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6854]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4833
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4833]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6503
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6503]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6503 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6503                         
3 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 3
print         "j = $(v_j)"
j = 3
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6503]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6503]
variable      check0 equal ${check}
variable      check0 equal 7044
variable      b equal ${check}+1
variable      b equal 7044+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 17.4614115716502 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 17.4614115716502 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001574 secs
variable      check1 equal ${check}
variable      check1 equal 7074
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6503 $b
create_bonds  single/bond 2 6503 7045
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.001982 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4829
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4829]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4498
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4498]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6094
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6094]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5664
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5664]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5637
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5637]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6026
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6026]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6793
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6793]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6469
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6469]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5324
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5324]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4509
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4509]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5445
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5445]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5292
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5292]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6808
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6808]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6808 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6808                         
4 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 4
print         "j = $(v_j)"
j = 4
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6808]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6808]
variable      check0 equal ${check}
variable      check0 equal 7074
variable      b equal ${check}+1
variable      b equal 7074+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 24.6047163055071 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 24.6047163055071 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000136 secs
variable      check1 equal ${check}
variable      check1 equal 7104
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6808 $b
create_bonds  single/bond 2 6808 7075
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020174 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4779
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4779]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5937
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5937]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6758
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6758]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5764
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5764]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 5764 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 5764                         
5 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 5
print         "j = $(v_j)"
j = 5
variable      x0 equal x[${randatomj}]
variable      x0 equal x[5764]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[5764]
variable      check0 equal ${check}
variable      check0 equal 7104
variable      b equal ${check}+1
variable      b equal 7104+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 2.3811015779523 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 2.3811015779523 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000119 secs
variable      check1 equal ${check}
variable      check1 equal 7134
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 5764 $b
create_bonds  single/bond 2 5764 7105
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020869 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5191
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5191]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4596
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4596]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4966
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4966]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5371
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5371]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4509
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4509]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5993
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5993]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6083
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6083]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6083 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6083                         
6 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 6
print         "j = $(v_j)"
j = 6
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6083]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6083]
variable      check0 equal ${check}
variable      check0 equal 7134
variable      b equal ${check}+1
variable      b equal 7134+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 7.937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 7.937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001213 secs
variable      check1 equal ${check}
variable      check1 equal 7164
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6083 $b
create_bonds  single/bond 2 6083 7135
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.002014 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5098
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5098]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5929
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5929]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5381
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5381]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5467
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5467]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5776
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5776]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 5776 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 5776                         
7 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 7
print         "j = $(v_j)"
j = 7
variable      x0 equal x[${randatomj}]
variable      x0 equal x[5776]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[5776]
variable      check0 equal ${check}
variable      check0 equal 7164
variable      b equal ${check}+1
variable      b equal 7164+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 2.3811015779523 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 2.3811015779523 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001366 secs
variable      check1 equal ${check}
variable      check1 equal 7194
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 5776 $b
create_bonds  single/bond 2 5776 7165
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0031556 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6071
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6071]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6071 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6071                         
8 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 8
print         "j = $(v_j)"
j = 8
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6071]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6071]
variable      check0 equal ${check}
variable      check0 equal 7194
variable      b equal ${check}+1
variable      b equal 7194+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 7.937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 7.937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001206 secs
variable      check1 equal ${check}
variable      check1 equal 7224
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6071 $b
create_bonds  single/bond 2 6071 7195
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0021088 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6654
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6654]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5617
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5617]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4955
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4955]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6882
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6882]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5904
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5904]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 5904 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 5904                         
9 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 9
print         "j = $(v_j)"
j = 9
variable      x0 equal x[${randatomj}]
variable      x0 equal x[5904]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[5904]
variable      check0 equal ${check}
variable      check0 equal 7224
variable      b equal ${check}+1
variable      b equal 7224+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 3.9685026299205 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 3.9685026299205 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001345 secs
variable      check1 equal ${check}
variable      check1 equal 7254
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 5904 $b
create_bonds  single/bond 2 5904 7225
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0021257 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6200
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6200]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6200 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6200                         
10 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 10
print         "j = $(v_j)"
j = 10
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6200]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6200]
variable      check0 equal ${check}
variable      check0 equal 7254
variable      b equal ${check}+1
variable      b equal 7254+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 11.9055078897615 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 1.5874010519682 11.9055078897615 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001571 secs
variable      check1 equal ${check}
variable      check1 equal 7284
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6200 $b
create_bonds  single/bond 2 6200 7255
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0032614 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6880
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6880]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6880 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6880                         
11 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 11
print         "j = $(v_j)"
j = 11
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6880]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6880]
variable      check0 equal ${check}
variable      check0 equal 7284
variable      b equal ${check}+1
variable      b equal 7284+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 26.1921173574753 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 26.1921173574753 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001237 secs
variable      check1 equal ${check}
variable      check1 equal 7314
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6880 $b
create_bonds  single/bond 2 6880 7285
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0024754 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6601
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6601]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4764
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4764]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6340
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6340]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6340 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6340                         
12 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 12
print         "j = $(v_j)"
j = 12
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6340]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6340]
variable      check0 equal ${check}
variable      check0 equal 7314
variable      b equal ${check}+1
variable      b equal 7314+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 15.0803099936979 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 0 15.0803099936979 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000156 secs
variable      check1 equal ${check}
variable      check1 equal 7344
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6340 $b
create_bonds  single/bond 2 6340 7315
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0021524 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4716
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4716]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6569
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6569]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4928
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4928]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4895
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4895]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5083
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5083]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6928
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6928]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6928 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6928                         
13 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 13
print         "j = $(v_j)"
j = 13
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6928]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6928]
variable      check0 equal ${check}
variable      check0 equal 7344
variable      b equal ${check}+1
variable      b equal 7344+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 27.7795184094435 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 27.7795184094435 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001292 secs
variable      check1 equal ${check}
variable      check1 equal 7374
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6928 $b
create_bonds  single/bond 2 6928 7345
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020849 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5468
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5468]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6928
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6928]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6928 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6928                         
13 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 13
print         "j = $(v_j)"
j = 14
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6928]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6928]
variable      check0 equal ${check}
variable      check0 equal 7374
variable      b equal ${check}+1
variable      b equal 7374+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5947
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5947]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 5947 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 5947                         
14 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 14
print         "j = $(v_j)"
j = 14
variable      x0 equal x[${randatomj}]
variable      x0 equal x[5947]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[5947]
variable      check0 equal ${check}
variable      check0 equal 7374
variable      b equal ${check}+1
variable      b equal 7374+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 4.7622031559046 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 4.7622031559046 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001247 secs
variable      check1 equal ${check}
variable      check1 equal 7404
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 5947 $b
create_bonds  single/bond 2 5947 7375
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020431 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5734
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5734]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5157
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5157]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6299
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6299]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6299 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6299                         
15 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 15
print         "j = $(v_j)"
j = 15
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6299]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6299]
variable      check0 equal ${check}
variable      check0 equal 7404
variable      b equal ${check}+1
variable      b equal 7404+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 12.6992084157456 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 12.6992084157456 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001528 secs
variable      check1 equal ${check}
variable      check1 equal 7434
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6299 $b
create_bonds  single/bond 2 6299 7405
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020058 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5311
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5311]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6297
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6297]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4947
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4947]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6311
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6311]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6311 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6311                         
16 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 16
print         "j = $(v_j)"
j = 16
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6311]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6311]
variable      check0 equal ${check}
variable      check0 equal 7434
variable      b equal ${check}+1
variable      b equal 7434+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 12.6992084157456 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 12.6992084157456 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001275 secs
variable      check1 equal ${check}
variable      check1 equal 7464
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6311 $b
create_bonds  single/bond 2 6311 7435
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.002192 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6351
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6351]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6351 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6351                         
17 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 17
print         "j = $(v_j)"
j = 17
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6351]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6351]
variable      check0 equal ${check}
variable      check0 equal 7464
variable      b equal ${check}+1
variable      b equal 7464+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 14.2866094677138 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 14.2866094677138 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001522 secs
variable      check1 equal ${check}
variable      check1 equal 7494
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6351 $b
create_bonds  single/bond 2 6351 7465
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020194 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4959
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4959]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5482
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5482]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4646
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4646]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6565
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6565]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6520
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6520]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6520 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6520                         
18 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 18
print         "j = $(v_j)"
j = 18
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6520]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6520]
variable      check0 equal ${check}
variable      check0 equal 7494
variable      b equal ${check}+1
variable      b equal 7494+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 18.2551120976343 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 14.2866094677138 18.2551120976343 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001514 secs
variable      check1 equal ${check}
variable      check1 equal 7524
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6520 $b
create_bonds  single/bond 2 6520 7495
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.003321 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6709
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6709]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4737
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4737]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4535
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4535]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5629
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5629]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4691
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4691]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6440
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6440]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6440 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6440                         
19 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 19
print         "j = $(v_j)"
j = 19
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6440]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6440]
variable      check0 equal ${check}
variable      check0 equal 7524
variable      b equal ${check}+1
variable      b equal 7524+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 16.6677110456661 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.1118073637774 16.6677110456661 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000131 secs
variable      check1 equal ${check}
variable      check1 equal 7554
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6440 $b
create_bonds  single/bond 2 6440 7525
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020766 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6069
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6069]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6322
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6322]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6273
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6273]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5904
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5904]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 5904 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 5904                         
19 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 19
print         "j = $(v_j)"
j = 20
variable      x0 equal x[${randatomj}]
variable      x0 equal x[5904]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[5904]
variable      check0 equal ${check}
variable      check0 equal 7554
variable      b equal ${check}+1
variable      b equal 7554+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5146
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5146]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6927
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6927]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6927 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6927                         
20 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 20
print         "j = $(v_j)"
j = 20
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6927]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6927]
variable      check0 equal ${check}
variable      check0 equal 7554
variable      b equal ${check}+1
variable      b equal 7554+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 26.9858178834594 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 26.9858178834594 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001261 secs
variable      check1 equal ${check}
variable      check1 equal 7584
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6927 $b
create_bonds  single/bond 2 6927 7555
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0022973 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6526
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6526]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6067
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6067]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6067 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6067                         
21 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 21
print         "j = $(v_j)"
j = 21
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6067]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6067]
variable      check0 equal ${check}
variable      check0 equal 7584
variable      b equal ${check}+1
variable      b equal 7584+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 7.937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.1433047338569 7.937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001532 secs
variable      check1 equal ${check}
variable      check1 equal 7614
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6067 $b
create_bonds  single/bond 2 6067 7585
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020114 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6926
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6926]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5569
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5569]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6432
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6432]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6432 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6432                         
22 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 22
print         "j = $(v_j)"
j = 22
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6432]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6432]
variable      check0 equal ${check}
variable      check0 equal 7614
variable      b equal ${check}+1
variable      b equal 7614+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 16.6677110456661 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 16.6677110456661 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001214 secs
variable      check1 equal ${check}
variable      check1 equal 7644
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6432 $b
create_bonds  single/bond 2 6432 7615
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0035477 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4930
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4930]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5580
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5580]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5401
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5401]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5609
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5609]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5670
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5670]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5855
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5855]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 5855 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 5855                         
23 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 23
print         "j = $(v_j)"
j = 23
variable      x0 equal x[${randatomj}]
variable      x0 equal x[5855]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[5855]
variable      check0 equal ${check}
variable      check0 equal 7644
variable      b equal ${check}+1
variable      b equal 7644+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 3.1748021039364 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 8.7307057858251 3.1748021039364 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001656 secs
variable      check1 equal ${check}
variable      check1 equal 7674
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 5855 $b
create_bonds  single/bond 2 5855 7645
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019704 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6288
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6288]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6288 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6288                         
24 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 24
print         "j = $(v_j)"
j = 24
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6288]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6288]
variable      check0 equal ${check}
variable      check0 equal 7674
variable      b equal ${check}+1
variable      b equal 7674+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 13.4929089417297 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 13.4929089417297 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001665 secs
variable      check1 equal ${check}
variable      check1 equal 7704
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6288 $b
create_bonds  single/bond 2 6288 7675
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020997 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5487
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5487]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6407
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6407]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6407 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6407                         
25 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 25
print         "j = $(v_j)"
j = 25
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6407]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6407]
variable      check0 equal ${check}
variable      check0 equal 7704
variable      b equal ${check}+1
variable      b equal 7704+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 14.2866094677138 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 27.7795184094435 14.2866094677138 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002043 secs
variable      check1 equal ${check}
variable      check1 equal 7734
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6407 $b
create_bonds  single/bond 2 6407 7705
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020957 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6608
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6608]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6608 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6608                         
26 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 26
print         "j = $(v_j)"
j = 26
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6608]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6608]
variable      check0 equal ${check}
variable      check0 equal 7734
variable      b equal ${check}+1
variable      b equal 7734+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 19.8425131496025 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 19.8425131496025 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001357 secs
variable      check1 equal ${check}
variable      check1 equal 7764
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6608 $b
create_bonds  single/bond 2 6608 7735
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019746 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6657
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6657]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5101
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5101]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4452
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4452]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6958
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6958]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6692
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6692]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6692 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6692                         
27 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 27
print         "j = $(v_j)"
j = 27
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6692]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6692]
variable      check0 equal ${check}
variable      check0 equal 7764
variable      b equal ${check}+1
variable      b equal 7764+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 25.3984168314912 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 25.3984168314912 21.4299142015707 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 25.3984168314912 21.4299142015707 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001466 secs
variable      check1 equal ${check}
variable      check1 equal 7794
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6692 $b
create_bonds  single/bond 2 6692 7765
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019884 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5365
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5365]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6929
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6929]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6568
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6568]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6568 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6568                         
28 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 28
print         "j = $(v_j)"
j = 28
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6568]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6568]
variable      check0 equal ${check}
variable      check0 equal 7794
variable      b equal ${check}+1
variable      b equal 7794+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 19.8425131496025 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 19.8425131496025 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001293 secs
variable      check1 equal ${check}
variable      check1 equal 7824
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6568 $b
create_bonds  single/bond 2 6568 7795
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0021572 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6279
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6279]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6279 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6279                         
29 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 29
print         "j = $(v_j)"
j = 29
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6279]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6279]
variable      check0 equal ${check}
variable      check0 equal 7824
variable      b equal ${check}+1
variable      b equal 7824+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 12.6992084157456 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 12.6992084157456 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000146 secs
variable      check1 equal ${check}
variable      check1 equal 7854
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6279 $b
create_bonds  single/bond 2 6279 7825
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0021248 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6038
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6038]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4570
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4570]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6166
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6166]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5100
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5100]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6419
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6419]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6419 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6419                         
30 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 30
print         "j = $(v_j)"
j = 30
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6419]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6419]
variable      check0 equal ${check}
variable      check0 equal 7854
variable      b equal ${check}+1
variable      b equal 7854+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 15.874010519682 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.9685026299205 15.874010519682 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001492 secs
variable      check1 equal ${check}
variable      check1 equal 7884
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6419 $b
create_bonds  single/bond 2 6419 7855
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0022031 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5826
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5826]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4460
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4460]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5257
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5257]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6436
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6436]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6436 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6436                         
31 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 31
print         "j = $(v_j)"
j = 31
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6436]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6436]
variable      check0 equal ${check}
variable      check0 equal 7884
variable      b equal ${check}+1
variable      b equal 7884+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 16.6677110456661 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 16.6677110456661 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001337 secs
variable      check1 equal ${check}
variable      check1 equal 7914
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6436 $b
create_bonds  single/bond 2 6436 7885
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020589 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6362
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6362]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5258
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5258]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4507
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4507]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5018
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5018]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6494
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6494]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4816
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4816]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6947
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6947]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6947 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6947                         
32 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 32
print         "j = $(v_j)"
j = 32
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6947]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6947]
variable      check0 equal ${check}
variable      check0 equal 7914
variable      b equal ${check}+1
variable      b equal 7914+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 26.9858178834594 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 26.9858178834594 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001521 secs
variable      check1 equal ${check}
variable      check1 equal 7944
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6947 $b
create_bonds  single/bond 2 6947 7915
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0022714 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5144
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5144]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5523
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5523]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4423
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4423]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5825
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5825]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5712
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5712]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 5712 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 5712                         
33 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 33
print         "j = $(v_j)"
j = 33
variable      x0 equal x[${randatomj}]
variable      x0 equal x[5712]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[5712]
variable      check0 equal ${check}
variable      check0 equal 7944
variable      b equal ${check}+1
variable      b equal 7944+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 0.7937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 7.937005259841 0.7937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001285 secs
variable      check1 equal ${check}
variable      check1 equal 7974
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 5712 $b
create_bonds  single/bond 2 5712 7945
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0031091 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6588
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6588]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6588 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6588                         
34 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 34
print         "j = $(v_j)"
j = 34
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6588]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6588]
variable      check0 equal ${check}
variable      check0 equal 7974
variable      b equal ${check}+1
variable      b equal 7974+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 19.8425131496025 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 12.6992084157456 19.8425131496025 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001612 secs
variable      check1 equal ${check}
variable      check1 equal 8004
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6588 $b
create_bonds  single/bond 2 6588 7975
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0021239 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6940
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6940]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6940 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6940                         
35 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 35
print         "j = $(v_j)"
j = 35
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6940]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6940]
variable      check0 equal ${check}
variable      check0 equal 8004
variable      b equal ${check}+1
variable      b equal 8004+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 27.7795184094435 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 9.5244063118092 27.7795184094435 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001751 secs
variable      check1 equal ${check}
variable      check1 equal 8034
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6940 $b
create_bonds  single/bond 2 6940 8005
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020928 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6938
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6938]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6310
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6310]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5909
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5909]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5234
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5234]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6811
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6811]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6811 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6811                         
36 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 36
print         "j = $(v_j)"
j = 36
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6811]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6811]
variable      check0 equal ${check}
variable      check0 equal 8034
variable      b equal ${check}+1
variable      b equal 8034+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 23.811015779523 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 16.6677110456661 23.811015779523 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001356 secs
variable      check1 equal ${check}
variable      check1 equal 8064
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6811 $b
create_bonds  single/bond 2 6811 8035
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0031718 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5963
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5963]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 5963 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 5963                         
37 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 37
print         "j = $(v_j)"
j = 37
variable      x0 equal x[${randatomj}]
variable      x0 equal x[5963]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[5963]
variable      check0 equal ${check}
variable      check0 equal 8064
variable      b equal ${check}+1
variable      b equal 8064+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 4.7622031559046 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.0173152535389 4.7622031559046 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000138 secs
variable      check1 equal ${check}
variable      check1 equal 8094
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 5963 $b
create_bonds  single/bond 2 5963 8065
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019945 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6464
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6464]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6464 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6464                         
38 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 38
print         "j = $(v_j)"
j = 38
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6464]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6464]
variable      check0 equal ${check}
variable      check0 equal 8094
variable      b equal ${check}+1
variable      b equal 8094+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 16.6677110456661 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 16.6677110456661 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000153 secs
variable      check1 equal ${check}
variable      check1 equal 8124
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6464 $b
create_bonds  single/bond 2 6464 8095
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0021187 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5045
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5045]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5926
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5926]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6733
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6733]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4587
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4587]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4941
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4941]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5208
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5208]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4585
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4585]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5204
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5204]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5963
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5963]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 5963 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 5963                         
38 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 38
print         "j = $(v_j)"
j = 39
variable      x0 equal x[${randatomj}]
variable      x0 equal x[5963]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[5963]
variable      check0 equal ${check}
variable      check0 equal 8124
variable      b equal ${check}+1
variable      b equal 8124+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6888
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6888]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6888 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6888                         
39 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 39
print         "j = $(v_j)"
j = 39
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6888]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6888]
variable      check0 equal ${check}
variable      check0 equal 8124
variable      b equal ${check}+1
variable      b equal 8124+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 17.4614115716502 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 17.4614115716502 26.1921173574753 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 17.4614115716502 26.1921173574753 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001424 secs
variable      check1 equal ${check}
variable      check1 equal 8154
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6888 $b
create_bonds  single/bond 2 6888 8125
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0024042 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6535
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6535]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6535 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6535                         
40 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 40
print         "j = $(v_j)"
j = 40
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6535]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6535]
variable      check0 equal ${check}
variable      check0 equal 8154
variable      b equal ${check}+1
variable      b equal 8154+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 17.4614115716502 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 21.4299142015707 17.4614115716502 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000132 secs
variable      check1 equal ${check}
variable      check1 equal 8184
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6535 $b
create_bonds  single/bond 2 6535 8155
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0032483 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4898
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4898]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6120
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6120]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6120 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6120                         
41 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 41
print         "j = $(v_j)"
j = 41
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6120]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6120]
variable      check0 equal ${check}
variable      check0 equal 8184
variable      b equal ${check}+1
variable      b equal 8184+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 8.7307057858251 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 8.7307057858251 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001667 secs
variable      check1 equal ${check}
variable      check1 equal 8214
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6120 $b
create_bonds  single/bond 2 6120 8185
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0022655 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6003
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6003]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6003 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6003                         
42 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 42
print         "j = $(v_j)"
j = 42
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6003]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6003]
variable      check0 equal ${check}
variable      check0 equal 8214
variable      b equal ${check}+1
variable      b equal 8214+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 6.3496042078728 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 10.3181068377933 6.3496042078728 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001602 secs
variable      check1 equal ${check}
variable      check1 equal 8244
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6003 $b
create_bonds  single/bond 2 6003 8215
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019495 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4598
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4598]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6402
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6402]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4976
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4976]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6855
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6855]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6855 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6855                         
43 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 43
print         "j = $(v_j)"
j = 43
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6855]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6855]
variable      check0 equal ${check}
variable      check0 equal 8244
variable      b equal ${check}+1
variable      b equal 8244+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 25.3984168314912 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 25.3984168314912 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001533 secs
variable      check1 equal ${check}
variable      check1 equal 8274
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6855 $b
create_bonds  single/bond 2 6855 8245
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0033074 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5694
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5694]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5510
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5510]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4864
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4864]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6159
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6159]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6159 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6159                         
44 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 44
print         "j = $(v_j)"
j = 44
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6159]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6159]
variable      check0 equal ${check}
variable      check0 equal 8274
variable      b equal ${check}+1
variable      b equal 8274+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 9.5244063118092 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 15.0803099936979 9.5244063118092 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001946 secs
variable      check1 equal ${check}
variable      check1 equal 8304
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6159 $b
create_bonds  single/bond 2 6159 8275
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0024402 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6926
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6926]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6871
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6871]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6871 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6871                         
45 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 45
print         "j = $(v_j)"
j = 45
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6871]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6871]
variable      check0 equal ${check}
variable      check0 equal 8304
variable      b equal ${check}+1
variable      b equal 8304+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 25.3984168314912 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 11.9055078897615 25.3984168314912 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001383 secs
variable      check1 equal ${check}
variable      check1 equal 8334
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6871 $b
create_bonds  single/bond 2 6871 8305
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020126 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5949
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5949]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6820
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6820]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6820 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6820                         
46 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 46
print         "j = $(v_j)"
j = 46
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6820]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6820]
variable      check0 equal ${check}
variable      check0 equal 8334
variable      b equal ${check}+1
variable      b equal 8334+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 24.6047163055071 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 24.6047163055071 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002477 secs
variable      check1 equal ${check}
variable      check1 equal 8364
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6820 $b
create_bonds  single/bond 2 6820 8335
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.006573 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6613
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6613]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6354
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6354]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4510
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4510]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5695
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5695]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 5695 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 5695                         
47 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 47
print         "j = $(v_j)"
j = 47
variable      x0 equal x[${randatomj}]
variable      x0 equal x[5695]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[5695]
variable      check0 equal ${check}
variable      check0 equal 8364
variable      b equal ${check}+1
variable      b equal 8364+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 0 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 2.3811015779523 0 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001614 secs
variable      check1 equal ${check}
variable      check1 equal 8394
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 5695 $b
create_bonds  single/bond 2 5695 8365
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0046874 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5254
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5254]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4882
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4882]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6184
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6184]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6184 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6184                         
48 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 48
print         "j = $(v_j)"
j = 48
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6184]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6184]
variable      check0 equal ${check}
variable      check0 equal 8394
variable      b equal ${check}+1
variable      b equal 8394+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 10.3181068377933 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 10.3181068377933 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001499 secs
variable      check1 equal ${check}
variable      check1 equal 8424
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6184 $b
create_bonds  single/bond 2 6184 8395
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0027235 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5992
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5992]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 5992 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 5992                         
49 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 49
print         "j = $(v_j)"
j = 49
variable      x0 equal x[${randatomj}]
variable      x0 equal x[5992]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[5992]
variable      check0 equal ${check}
variable      check0 equal 8424
variable      b equal ${check}+1
variable      b equal 8424+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 7.1433047338569 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 4.7622031559046 7.1433047338569 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001803 secs
variable      check1 equal ${check}
variable      check1 equal 8454
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 5992 $b
create_bonds  single/bond 2 5992 8425
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0069186 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4794
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4794]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6824
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6824]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6824 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6824                         
50 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 50
print         "j = $(v_j)"
j = 50
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6824]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6824]
variable      check0 equal ${check}
variable      check0 equal 8454
variable      b equal ${check}+1
variable      b equal 8454+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 24.6047163055071 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 24.6047163055071 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001664 secs
variable      check1 equal ${check}
variable      check1 equal 8484
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6824 $b
create_bonds  single/bond 2 6824 8455
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0033403 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6718
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6718]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4584
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4584]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5752
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5752]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 5752 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 5752                         
51 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 51
print         "j = $(v_j)"
j = 51
variable      x0 equal x[${randatomj}]
variable      x0 equal x[5752]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[5752]
variable      check0 equal ${check}
variable      check0 equal 8484
variable      b equal ${check}+1
variable      b equal 8484+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 0.7937005259841 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 23.811015779523 0.7937005259841 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0002506 secs
variable      check1 equal ${check}
variable      check1 equal 8514
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 5752 $b
create_bonds  single/bond 2 5752 8485
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0024342 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4916
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4916]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5111
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5111]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4777
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4777]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6815
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6815]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6815 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6815                         
52 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 52
print         "j = $(v_j)"
j = 52
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6815]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6815]
variable      check0 equal ${check}
variable      check0 equal 8514
variable      b equal ${check}+1
variable      b equal 8514+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 23.811015779523 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 18.2551120976343 23.811015779523 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.00019 secs
variable      check1 equal ${check}
variable      check1 equal 8544
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6815 $b
create_bonds  single/bond 2 6815 8515
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0022958 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5358
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5358]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5127
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5127]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5945
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5945]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5888
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5888]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 5888 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 5888                         
53 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 53
print         "j = $(v_j)"
j = 53
variable      x0 equal x[${randatomj}]
variable      x0 equal x[5888]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[5888]
variable      check0 equal ${check}
variable      check0 equal 8544
variable      b equal ${check}+1
variable      b equal 8544+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 3.9685026299205 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 20.6362136755866 3.9685026299205 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001617 secs
variable      check1 equal ${check}
variable      check1 equal 8574
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 5888 $b
create_bonds  single/bond 2 5888 8545
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.003336 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6748
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6748]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6748 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6748                         
54 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 54
print         "j = $(v_j)"
j = 54
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6748]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6748]
variable      check0 equal ${check}
variable      check0 equal 8574
variable      b equal ${check}+1
variable      b equal 8574+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 23.0173152535389 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 19.0488126236184 23.0173152535389 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001433 secs
variable      check1 equal ${check}
variable      check1 equal 8604
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6748 $b
create_bonds  single/bond 2 6748 8575
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020056 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4625
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4625]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5290
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5290]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4414
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4414]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6966
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6966]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5802
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5802]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5224
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5224]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5544
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5544]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5158
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5158]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4725
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4725]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4437
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4437]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4798
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4798]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4632
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4632]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5425
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5425]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5773
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5773]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5505
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5505]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5801
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5801]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6327
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6327]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6327 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6327                         
55 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 55
print         "j = $(v_j)"
j = 55
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6327]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6327]
variable      check0 equal ${check}
variable      check0 equal 8604
variable      b equal ${check}+1
variable      b equal 8604+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 24.6047163055071 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 24.6047163055071 12.6992084157456 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 24.6047163055071 12.6992084157456 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001648 secs
variable      check1 equal ${check}
variable      check1 equal 8634
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6327 $b
create_bonds  single/bond 2 6327 8605
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0019687 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5847
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5847]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 5847 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 5847                         
56 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 56
print         "j = $(v_j)"
j = 56
variable      x0 equal x[${randatomj}]
variable      x0 equal x[5847]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[5847]
variable      check0 equal ${check}
variable      check0 equal 8634
variable      b equal ${check}+1
variable      b equal 8634+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 3.1748021039364 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 5.5559036818887 3.1748021039364 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001574 secs
variable      check1 equal ${check}
variable      check1 equal 8664
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 5847 $b
create_bonds  single/bond 2 5847 8635
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020795 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6933
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6933]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6480
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6480]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6480 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6480                         
57 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 57
print         "j = $(v_j)"
j = 57
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6480]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6480]
variable      check0 equal ${check}
variable      check0 equal 8664
variable      b equal ${check}+1
variable      b equal 8664+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 16.6677110456661 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 26.9858178834594 16.6677110456661 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.000136 secs
variable      check1 equal ${check}
variable      check1 equal 8694
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6480 $b
create_bonds  single/bond 2 6480 8665
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0038642 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6756
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6756]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6756 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6756                         
58 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 58
print         "j = $(v_j)"
j = 58
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6756]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6756]
variable      check0 equal ${check}
variable      check0 equal 8694
variable      b equal ${check}+1
variable      b equal 8694+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 23.0173152535389 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 22.2236147275548 23.0173152535389 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001805 secs
variable      check1 equal ${check}
variable      check1 equal 8724
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6756 $b
create_bonds  single/bond 2 6756 8695
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0020524 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 4457
variable      randzj equal z[${randatomj}]
variable      randzj equal z[4457]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6708
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6708]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6708 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6708                         
59 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 59
print         "j = $(v_j)"
j = 59
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6708]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6708]
variable      check0 equal ${check}
variable      check0 equal 8724
variable      b equal ${check}+1
variable      b equal 8724+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 23.0173152535389 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 3.1748021039364 23.0173152535389 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001451 secs
variable      check1 equal ${check}
variable      check1 equal 8754
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6708 $b
create_bonds  single/bond 2 6708 8725
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0022035 secs
next j
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 5450
variable      randzj equal z[${randatomj}]
variable      randzj equal z[5450]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
jump MDPBB.in loopj
variable      randnj equal round(random(v_ntop0,$(v_ntop0 + v_nbwall0),$s))
variable      randnj equal round(random(v_ntop0,6984,$s))
variable      randnj equal round(random(v_ntop0,6984,234897))
variable      randatomj equal ${randnj}
variable      randatomj equal 6875
variable      randzj equal z[${randatomj}]
variable      randzj equal z[6875]
if            "${randzj} < $(v_wthick - 0.7)" then "jump MDPBB.in loopj"
set           atom ${randatomj} type 4
set           atom 6875 type 4
  1 settings made for type
group         bwg id ${randatomj}                         # Add this atom to a bot-wall-grafted group
group         bwg id 6875                         
60 atoms in group bwg
variable      bwgcount equal count(bwg)
print         "bwg contains ${bwgcount}"
bwg contains 60
print         "j = $(v_j)"
j = 60
variable      x0 equal x[${randatomj}]
variable      x0 equal x[6875]
variable      y0 equal y[${randatomj}]
variable      y0 equal y[6875]
variable      check0 equal ${check}
variable      check0 equal 8754
variable      b equal ${check}+1
variable      b equal 8754+1
if            "${bwgcount} != $(v_j)" then "jump MDPBB.in loopj"
create_atoms  1 single ${x0} ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 ${y0} ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 25.3984168314912 ${z0} mol bs 24987 units box remap yes rotate 0 0 0 1
create_atoms  1 single 13.4929089417297 25.3984168314912 17 mol bs 24987 units box remap yes rotate 0 0 0 1
Created 30 atoms
  create_atoms CPU = 0.0001676 secs
variable      check1 equal ${check}
variable      check1 equal 8784
if            "${check1} != ${check0}" then "create_bonds  single/bond 2 ${randatomj} $b" "next j"
create_bonds  single/bond 2 ${randatomj} $b
create_bonds  single/bond 2 6875 $b
create_bonds  single/bond 2 6875 8755
  2 = max # of 1-2 neighbors
  5 = max # of special neighbors
  special bonds CPU = 0.0034986 secs
next j
jump MDPBB.in loopj

# Assign the beads to 2 different groups of grafted and non-grafted beads

group         gbeads type 2
120 atoms in group gbeads
group         fbeads type 3
3480 atoms in group fbeads

#--- Create harmonic bonds in the walls ---#
bond_coeff    3 harmonic 800.0 $(1.5874 * sqrt(2)/2)
bond_coeff    3 harmonic 800.0 1.1224613044555256103
create_bonds  many bwall bwall 3 0.5 1.2
Neighbor list info ...
  update every 1 steps, delay 10 steps, check yes
  max neighbors/atom: 4000, page size: 100000
  master list distance cutoff = 11.1225
  ghost atom cutoff = 11.1225
  binsize = 5.56123, bins = 6 6 13
  2 neighbor lists, perpetual/occasional/extra = 1 1 0
  (1) command create_bonds, occasional
      attributes: full, newton on
      pair build: full/bin
      stencil: full/bin/3d
      bin: standard
  (2) pair lj/cut, perpetual
      attributes: half, newton on
      pair build: half/bin/newton
      stencil: half/bin/3d/newton
      bin: standard
Added 12960 bonds, new total = 16560
  12 = max # of 1-2 neighbors
  12 = max # of special neighbors
  special bonds CPU = 0.0038227 secs
create_bonds  many twall twall 3 0.5 1.2
Added 12960 bonds, new total = 29520
  12 = max # of 1-2 neighbors
  12 = max # of special neighbors
  special bonds CPU = 0.0051778 secs

info system


fix           1 twall setforce 0.0 0.0 0.0  # Freeze top wall
fix           2 bwall setforce 0.0 0.0 0.0  # Freeze bottom wall

#dump           1 all image 250 stg0.*.jpg type type zoom 2 view 60 120 bond none none
#dump          2 all atom 50 dump.brush
#dump          3 all custom 100 dump.random.bin id x y z vx vy vz


#--- Minimize the system to obtain the initial structure for the PB bilayer ---#

timestep      0.010
minimize      0.0 1.0e-8 10000 100000
WARNING: Using 'neigh_modify every 1 delay 0 check yes' setting during minimization (src/min.cpp:168)
Neighbor list info ...
  update every 1 steps, delay 0 steps, check yes
  max neighbors/atom: 4000, page size: 100000
  master list distance cutoff = 11.1225
  ghost atom cutoff = 11.1225
  binsize = 5.56123, bins = 6 6 13
  1 neighbor lists, perpetual/occasional/extra = 1 0 0
  (1) pair lj/cut, perpetual
      attributes: half, newton on
      pair build: half/bin/newton
      stencil: half/bin/3d/newton
      bin: standard
WARNING: Inconsistent image flags (src/domain.cpp:784)
Per MPI rank memory allocation (min/avg/max) = 35.35 | 35.35 | 35.35 Mbytes
Step Temp E_pair E_mol TotEng Press 
       0            0 0.0089794653    9.0584173    9.0673968    1.0198392 
      54            0 -0.071475036    7.6692279    7.5977529    1.1344806 
Loop time of 1.27889 on 1 procs for 54 steps with 8784 atoms

100.2% CPU use with 1 MPI tasks x 1 OpenMP threads

Minimization stats:
  Stopping criterion = linesearch alpha is zero
  Energy initial, next-to-last, final = 
         9.06739676916      7.59775291095      7.59775291095
  Force two-norm initial, final = 938.779 161.77
  Force max component initial, final = 107.218 12.0367
  Final line search alpha, max atom move = 3.96153e-09 4.76837e-08
  Iterations, force evaluations = 54 111

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 1.1902     | 1.1902     | 1.1902     |   0.0 | 93.07
Bond    | 0.057542   | 0.057542   | 0.057542   |   0.0 |  4.50
Neigh   | 0          | 0          | 0          |   0.0 |  0.00
Comm    | 0.011415   | 0.011415   | 0.011415   |   0.0 |  0.89
Output  | 0          | 0          | 0          |   0.0 |  0.00
Modify  | 0.0033627  | 0.0033627  | 0.0033627  |   0.0 |  0.26
Other   |            | 0.01634    |            |       |  1.28

Nlocal:    8784 ave 8784 max 8784 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Nghost:    19666 ave 19666 max 19666 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Neighs:    4.88014e+06 ave 4.88014e+06 max 4.88014e+06 min
Histogram: 1 0 0 0 0 0 0 0 0 0

Total # of neighbors = 4880143
Ave neighs/atom = 555.572
Ave special neighs/atom = 6.72131
Neighbor list builds = 0
Dangerous builds = 0

#--- Shrink the simulation box such that it encloses the system exactly ---#

variable z_f equal bound(all,zmin)
variable z_c equal bound(all,zmax)

change_box all z final ${z_f} $(v_z_c + 0.1) units box
change_box all z final 0 $(v_z_c + 0.1) units box
change_box all z final 0 70.099999999999994316 units box
  orthogonal box = (0 0 0) to (28.2843 28.2843 70.1)

info variables                              # For diagnostics

minimize      0.0 1.0e-8 10000 100000
WARNING: Using 'neigh_modify every 1 delay 0 check yes' setting during minimization (src/min.cpp:168)
WARNING: Inconsistent image flags (src/domain.cpp:784)
Per MPI rank memory allocation (min/avg/max) = 35.35 | 35.35 | 35.35 Mbytes
Step Temp E_pair E_mol TotEng Press 
      54            0 -0.071475036    7.6692279    7.5977529    1.1652297 
      55            0 -0.071475036    7.6692279    7.5977529    1.1652297 
Loop time of 0.497 on 1 procs for 1 steps with 8784 atoms

100.6% CPU use with 1 MPI tasks x 1 OpenMP threads

Minimization stats:
  Stopping criterion = linesearch alpha is zero
  Energy initial, next-to-last, final = 
         7.59775291095      7.59775291095      7.59775291095
  Force two-norm initial, final = 161.77 161.77
  Force max component initial, final = 12.0367 12.0367
  Final line search alpha, max atom move = 3.96153e-09 4.76837e-08
  Iterations, force evaluations = 1 43

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 0.46391    | 0.46391    | 0.46391    |   0.0 | 93.34
Bond    | 0.023304   | 0.023304   | 0.023304   |   0.0 |  4.69
Neigh   | 0          | 0          | 0          |   0.0 |  0.00
Comm    | 0.0044246  | 0.0044246  | 0.0044246  |   0.0 |  0.89
Output  | 0          | 0          | 0          |   0.0 |  0.00
Modify  | 0.0012994  | 0.0012994  | 0.0012994  |   0.0 |  0.26
Other   |            | 0.004062   |            |       |  0.82

Nlocal:    8784 ave 8784 max 8784 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Nghost:    19666 ave 19666 max 19666 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Neighs:    4.90978e+06 ave 4.90978e+06 max 4.90978e+06 min
Histogram: 1 0 0 0 0 0 0 0 0 0

Total # of neighbors = 4909778
Ave neighs/atom = 558.946
Ave special neighs/atom = 6.72131
Neighbor list builds = 0
Dangerous builds = 0

#--- Remove the fixes for the restart file ---#
unfix         1
unfix         2

#--- Write Restart File ---#

write_restart  MDPBB.rst
#write_data     MDPBB.data
print        "Created a Polymer Brush Bilayer with Surface Coverage = $(v_M/(lx*ly))"
Created a Polymer Brush Bilayer with Surface Coverage = 0.075000000000000011102

label          sim

include        ecs.in
# This is an input script that creates a mono disperse polymer brush bilayer
# A coarse grained bead-spring model is used for the polymers which are end
# grafted to the surfaces of 2 opposing FCC walls at random sites.

clear
OMP_NUM_THREADS environment is not set. Defaulting to 1 thread. (src/comm.cpp:88)
  using 1 OpenMP thread(s) per MPI task


#--- Read in the Restart file ---#

read_restart    MDPBB.rst
  restoring atom style bond from restart
  orthogonal box = (0 0 0) to (28.2843 28.2843 70.1)
  1 by 1 by 1 MPI processor grid
  restoring pair style lj/cut from restart
  restoring bond style hybrid from restart
  8784 atoms
  29520 bonds
  12 = max # of 1-2 neighbors
  12 = max # of special neighbors
  special bonds CPU = 0.0038142 secs
  read_restart CPU = 0.0073689 secs
reset_timestep  0

#--- Redefine the bond coeffs ---#

bond_coeff    1 fene 30.0 1.5 0.0 0.0      # Values obtained from literature [Grest, Galushcko]
bond_coeff    2 fene 30.0 1.5 0.0 0.0       # This is the grafting bond between the polymer and the wall atom
bond_coeff    3 harmonic 800.0 $(1.5874 * sqrt(2)/2)
bond_coeff    3 harmonic 800.0 1.1224613044555256103

neigh_modify   every 1 delay 0 check yes

#--- Define variables ---#

# for dimensional values: eps = 4.14e-21 J at T = 300K and sigma = 0.5nm

#--- Moved to main.in ---#
#variable       Temp       equal ${Tstr} #[Grest96]
#variable       Tstep     equal 0.005                       # Timestep in Tau (default = 0.005)
#variable       Nequil    equal 10000                       # Number of timesteps to equilibrate
#variable       Ncomp     equal 200000                      # Number of timesteps to compress - until no more occilation of walls
#variable       Nshear    equal 1000000                     # Number of timesteps to shear - use approx 4ns for 10m/s
#variable       Nthermo   equal 1000                        # Number of timesteps between thermo data prints
#variable       Ndump_e   equal 10000
#variable       Ndump_c   equal 10000                       # Number of timesteps per dump file (compression)
#variable       Ndump_s   equal 10000                       # Number of timesteps per dump file (shear)
#variable       Wall_v    equal 0.0002                      # Wall velocity (A/fs) - equal to 10 m/s
#variable       Pcomp     equal 1
variable        Pcomp2    equal ${Pcomp}
variable        Pcomp2    equal 3
variable        Wall_v2   equal ${Wall_v}
variable        Wall_v2   equal 0.5

# For Equilibration - density profiles (10 for entire run)
variable       Nfreqe   equal ${Nequil}/10                  # Calculate bin averages every this many timesteps
variable       Nfreqe   equal 30000/10                  
variable       Neverye  equal 100                           # Use input values every this many timesteps
variable       Nrepeate equal ${Nfreqe}/${Neverye}          #s Number of times to use input values
variable       Nrepeate equal 3000/${Neverye}          
variable       Nrepeate equal 3000/100          


# For compression - density profiles (10 for entire run)
variable       Nfreqc   equal ${Ncomp}/10                  # Calculate bin averages every this many timesteps
variable       Nfreqc   equal 70000/10                  
variable       Neveryc  equal 100                          # Use input values every this many timesteps
variable       Nrepeatc equal ${Nfreqc}/${Neveryc}         # Number of times to use input values
variable       Nrepeatc equal 7000/${Neveryc}         
variable       Nrepeatc equal 7000/100         

# For Shear - density profiles (10 for entire run)
variable       Nfreqs   equal ${Nshear}/10                  # Calculate bin averages every this many timesteps
variable       Nfreqs   equal 100000/10                  
variable       Neverys  equal 100                          # Use input values every this many timesteps
variable       Nrepeats equal ${Nfreqs}/${Neverys}         # Number of times to use input values
variable       Nrepeats equal 10000/${Neverys}         
variable       Nrepeats equal 10000/100         


variable       binres   equal  0.001                       # Giving 1000 data points across the sim. box


variable       bwzmin  equal bound(bwall,zmin)
variable       bwzmax  equal bound(bwall,zmax)
variable       twzmin  equal bound(twall,zmin)
variable       twzmax  equal bound(twall,zmax)
variable       c       equal count(gbeads)
variable       surfcov equal $(v_M/(lx*ly))
variable       surfcov equal 0.075000000000000011102
variable       D       equal v_twzmin-v_bwzmax
variable       Dout    equal v_twzmax-v_bwzmin
variable       srate   equal (v_Wall_v/v_D)


#--- Define regions and groups ---#

print        "bwzmin = ${bwzmin}"
bwzmin = 0
print        "bwzmax = ${bwzmax}"
bwzmax = 2.3811015779523
print        "twzmin = ${twzmin}"
twzmin = 67.6188984220477
print        "twzmax = ${twzmax}"
twzmax = 70

region         bwallb  block  INF INF INF INF ${bwzmin} $(v_bwzmin + 0.4) units box
region         bwallb  block  INF INF INF INF 0 $(v_bwzmin + 0.4) units box
region         bwallb  block  INF INF INF INF 0 0.4000000000000000222 units box
region         bwallm  block  INF INF INF INF $(v_bwzmin + 0.35) $(v_bwzmax - 0.35) units box
region         bwallm  block  INF INF INF INF 0.3499999999999999778 $(v_bwzmax - 0.35) units box
region         bwallm  block  INF INF INF INF 0.3499999999999999778 2.0311015779522998415 units box
region         bwallt  block  INF INF INF INF $(v_bwzmax - 0.7) $(v_bwzmax) units box
region         bwallt  block  INF INF INF INF 1.6811015779522999747 $(v_bwzmax) units box
region         bwallt  block  INF INF INF INF 1.6811015779522999747 2.3811015779522999303 units box
region         bmelt   block  INF INF INF INF $(v_bwzmax) $(v_twzmax / 2) units box
region         bmelt   block  INF INF INF INF 2.3811015779522999303 $(v_twzmax / 2) units box
region         bmelt   block  INF INF INF INF 2.3811015779522999303 35 units box
region         tmelt   block  INF INF INF INF $(v_twzmax / 2)  $(v_twzmin - 0.1) units box
region         tmelt   block  INF INF INF INF 35  $(v_twzmin - 0.1) units box
region         tmelt   block  INF INF INF INF 35  67.518898422047712415 units box
region         twallb  block  INF INF INF INF $(v_twzmin - 0.1) $(v_twzmin + 0.35) units box
region         twallb  block  INF INF INF INF 67.518898422047712415 $(v_twzmin + 0.35) units box
region         twallb  block  INF INF INF INF 67.518898422047712415 67.968898422047701047 units box
region         twallm  block  INF INF INF INF $(v_twzmin + 0.35) $(v_twzmax - 0.35) units box
region         twallm  block  INF INF INF INF 67.968898422047701047 $(v_twzmax - 0.35) units box
region         twallm  block  INF INF INF INF 67.968898422047701047 69.650000000000005684 units box
region         twallt  block  INF INF INF INF $(v_twzmax - 0.35) $(v_twzmax) units box
region         twallt  block  INF INF INF INF 69.650000000000005684 $(v_twzmax) units box
region         twallt  block  INF INF INF INF 69.650000000000005684 70 units box

group          bwsurf  region bwallt
648 atoms in group bwsurf
group          bwbulk  region bwallm
1296 atoms in group bwbulk
group          bwout   region bwallb
648 atoms in group bwout
group          bbeads  region bmelt
1800 atoms in group bbeads
group          tbeads  region tmelt
1800 atoms in group tbeads
group          abeads  union  bbeads tbeads
3600 atoms in group abeads
group          twsurf  region twallb
648 atoms in group twsurf
group          twbulk  region twallm
1296 atoms in group twbulk
group          twout   region twallt
648 atoms in group twout
group          rest4bot union abeads twall
6192 atoms in group rest4bot
group          rest4top union abeads bwall
6192 atoms in group rest4top
group          walls    union bwall twall
5184 atoms in group walls
group          alltop   union twall tbeads
4392 atoms in group alltop
# Other groups are: gbeads fbeads bwall twall

info system
info coeffs

#--- Exclude wall-wall interactions ---#

#neigh_modify exclude type 1 1
#neigh_modify exclude type 1 4
#neigh_modify exclude type 4 4


############
# Computes #
############

#compute         sysTemp   all    temp/deform                       # Calculate the temperature without translational velocities
#compute         sysPress  all    pressure sysTemp                  # Calculate the pressure of the entire system of atoms
compute         melTemp   abeads temp
compute         melPress  all    pressure melTemp
compute         wallTemp  walls  temp
compute         wallPress all    pressure wallTemp
variable        melDens   equal  $(mass(abeads))/(lx*ly*v_D)
variable        melDens   equal  3600/(lx*ly*v_D)

#--- Forces and Energies ---#

compute         fbwall  bwall group/group rest4bot
compute         ftwall  twall group/group rest4top
compute         fwalls  bwall group/group twall

#--- Like done in comp_shear.in ---#
group           rest_bot union abeads bwall
6192 atoms in group rest_bot
group           rest_bot2 subtract all bwsurf
8136 atoms in group rest_bot2
compute         ggbot bwsurf group/group rest_bot
compute         ggbot2 bwsurf group/group rest_bot

group           rest_top union abeads twall
6192 atoms in group rest_top
group           rest_top2 subtract all twsurf
8136 atoms in group rest_top2
compute         ggtop twsurf group/group rest_top
compute         ggtop2 twsurf group/group rest_top2


#--- Calculate the applied force on each atom for the pressure applied---#
variable Fcomp equal (${Pcomp}*lx*ly)
variable Fcomp equal (3*lx*ly)
variable Fcatom equal (-${Fcomp})/(count(twout))
variable Fcatom equal (-2400)/(count(twout))


#compute	        peratom   all   stress/atom NULL
#compute	        p_all     all   reduce sum c_peratom[1] c_peratom[2] c_peratom[3]
#variable	      press_all equal -(c_p_all[1]+c_p_all[2]+c_p_all[3])/(3*v_volume)



info groups variables                              # For diagnostics


#################
# Equilibration #
#################

#--- Number Density profiles (Equil) ---#
compute         eabeads abeads chunk/atom bin/1d z lower ${binres} units reduced # Check bound keyword to maybe only bin melt area
compute         eabeads abeads chunk/atom bin/1d z lower 0.001 units reduced 
fix             abeads_edz abeads ave/chunk ${Neverye} ${Nrepeate} ${Nfreqe} eabeads density/number file abeads_edz
fix             abeads_edz abeads ave/chunk 100 ${Nrepeate} ${Nfreqe} eabeads density/number file abeads_edz
fix             abeads_edz abeads ave/chunk 100 30 ${Nfreqe} eabeads density/number file abeads_edz
fix             abeads_edz abeads ave/chunk 100 30 3000 eabeads density/number file abeads_edz
compute         ebbeads bbeads chunk/atom bin/1d z lower ${binres} units reduced # Check bound keyword to maybe only bin melt area
compute         ebbeads bbeads chunk/atom bin/1d z lower 0.001 units reduced 
fix             bbeads_edz bbeads  ave/chunk ${Neverye} ${Nrepeate} ${Nfreqe} ebbeads density/number file bbeads_edz
fix             bbeads_edz bbeads  ave/chunk 100 ${Nrepeate} ${Nfreqe} ebbeads density/number file bbeads_edz
fix             bbeads_edz bbeads  ave/chunk 100 30 ${Nfreqe} ebbeads density/number file bbeads_edz
fix             bbeads_edz bbeads  ave/chunk 100 30 3000 ebbeads density/number file bbeads_edz
compute         etbeads tbeads chunk/atom bin/1d z lower ${binres} units reduced # Check bound keyword to maybe only bin melt area
compute         etbeads tbeads chunk/atom bin/1d z lower 0.001 units reduced 
fix             tbeads_edz tbeads  ave/chunk ${Neverye} ${Nrepeate} ${Nfreqe} etbeads density/number file tbeads_edz
fix             tbeads_edz tbeads  ave/chunk 100 ${Nrepeate} ${Nfreqe} etbeads density/number file tbeads_edz
fix             tbeads_edz tbeads  ave/chunk 100 30 ${Nfreqe} etbeads density/number file tbeads_edz
fix             tbeads_edz tbeads  ave/chunk 100 30 3000 etbeads density/number file tbeads_edz

#--- Radius of gyration of the bottom brush chains ---#
compute         chunk_bot bbeads chunk/atom molecule
compute         rgbbeads bbeads gyration/chunk chunk_bot
variable        aveRg    equal  (ave(c_rgbbeads))


#--- Fixes (Equil) ---#

#velocity       abeads create ${Temp} 290842 dist gaussian
#fix             nvt_melt    abeads nvt temp ${Temp} ${Temp} 100.0

# NVE for all and langevin thermostat for melt
fix             nve_melt abeads nve
fix             lang_melt abeads langevin ${Temp} ${Temp} 0.1 798753
fix             lang_melt abeads langevin 1 ${Temp} 0.1 798753
fix             lang_melt abeads langevin 1 1 0.1 798753
fix             nve_walls  walls nve

#--- Langevin thermostat the bulk of the walls in y ---#
# Only thermostat the bulk of the wall not the surface or the outer layer
compute         Tempyt     twbulk temp/partial 0 1 0
fix             lang_tbulk twbulk langevin ${Temp} ${Temp} 0.1 87239 zero yes
fix             lang_tbulk twbulk langevin 1 ${Temp} 0.1 87239 zero yes
fix             lang_tbulk twbulk langevin 1 1 0.1 87239 zero yes
fix_modify      lang_tbulk temp Tempyt
compute         Tempyb     bwbulk temp/partial 0 1 0
fix             lang_bbulk bwbulk langevin ${Temp} ${Temp} 0.1 87239 zero yes
fix             lang_bbulk bwbulk langevin 1 ${Temp} 0.1 87239 zero yes
fix             lang_bbulk bwbulk langevin 1 1 0.1 87239 zero yes
fix_modify      lang_bbulk temp Tempyb

#--- Freeze the outer layer of the walls ---#
fix             freeze_bout bwout setforce 0.0 0.0 0.0
fix             freeze_tout twout setforce 0.0 0.0 0.0

variable        sbot equal  f_freeze_bout[1]/(lx*ly)
variable        pbot equal -f_freeze_bout[3]/(lx*ly)
#--- Thermo output ---#

thermo_style  custom step etotal ke pe epair temp c_melTemp c_wallTemp v_Fcatom v_Pcomp2 press pxx pyy pzz pxy pxz pyz c_melPress c_wallPress v_melDens v_surfcov v_aveRg v_Wall_v2 v_srate v_D v_bwzmax zhi c_fbwall[1] c_fbwall[3] c_ftwall[1] c_ftwall[3] v_sbot v_pbot #c_ggbot[1] c_ggbot[3] c_ggtop[1] c_ggtop[3]
thermo        ${Nthermo}
thermo        1000
thermo_modify flush yes

#--- Dumps ---#
#dump           eq all image ${Ndump_e} stg1.*.jpg type type zoom 2 view 60 120 bond none none


#--- Run Equilibration ---#
timestep    ${Tstep}
timestep    0.005
run         ${Nequil}
run         30000
Neighbor list info ...
  update every 1 steps, delay 0 steps, check yes
  max neighbors/atom: 2000, page size: 100000
  master list distance cutoff = 1.42246
  ghost atom cutoff = 1.42246
  binsize = 0.711231, bins = 40 40 99
  8 neighbor lists, perpetual/occasional/extra = 1 7 0
  (1) pair lj/cut, perpetual
      attributes: half, newton on
      pair build: half/bin/newton
      stencil: half/bin/3d/newton
      bin: standard
  (2) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (3) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (4) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (5) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (6) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (7) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
  (8) compute group/group, occasional, copy from (1)
      attributes: half, newton on
      pair build: copy
      stencil: none
      bin: none
WARNING: Inconsistent image flags (src/domain.cpp:784)
Per MPI rank memory allocation (min/avg/max) = 8.568 | 8.568 | 8.568 Mbytes
Step TotEng KinEng PotEng E_pair Temp c_melTemp c_wallTemp v_Fcatom v_Pcomp2 Press Pxx Pyy Pzz Pxy Pxz Pyz c_melPress c_wallPress v_melDens v_surfcov v_aveRg v_Wall_v2 v_srate v_D v_bwzmax Zhi c_fbwall[1] c_fbwall[3] c_ftwall[1] c_ftwall[3] v_sbot v_pbot 
WARNING: One or more chunks do not contain all atoms in molecule (src/compute_chunk_atom.cpp:1161)
       0    8.7330033            0    8.7330033 -0.071475036            0            0            0   -3.7037037            3   0.88177689    1.7031904    1.7031871  -0.76104679 -1.5711907e-05 -4.0587857e-08 -5.1206675e-07   0.88177689   0.88177689  0.068978418        0.075    3.8373271          0.5 0.0076642686    65.237797    2.3811016         70.1            0            0            0            0 -5.6843419e-16    22.094841 
    1000    8.9583684    1.6493588    7.3090097 -0.029346818    1.0996977    1.0239939    1.1524775   -3.7037037            3   0.18021242    1.2995981    1.4411139   -2.2000748 -0.0032962503  0.022394111  0.012239426  0.073698678   0.11449641  0.069333894        0.075    3.4706466          0.5  0.007703766    64.903321     2.559357         70.1 0.00055329703 -0.0011258496 -0.00013059715 0.00040484386    -0.968657   -13.128684 
    2000    8.1666041    1.6026122    6.5639919 -0.034862948    1.0685298    1.0142205    1.1064475   -3.7037037            3  0.076175664    1.1749337     1.266892   -2.2132987 0.00050121649  0.010887359  0.013262986 -0.026083922   0.01108687  0.069329559        0.075    3.2309484          0.5 0.0077032843    64.907379     2.544417         70.1 2.6947553e-05 -3.9254467e-05 -0.00020970508 0.00027019746  -0.36891352   -10.563658 
    3000    7.5464815    1.6104795     5.936002 -0.041456172    1.0737753    1.0058662    1.1211375   -3.7037037            3   0.55419865    1.5116895    1.5308525    -1.379946 0.0006108557  0.031424595 0.0012444404   0.45058139     0.489646  0.069325411        0.075    3.0360576          0.5 0.0077028235    64.911263    2.5358542         70.1  0.000629648 -0.0007491225 0.00054677393 0.00086503575  -0.79842795   -4.7377781 
    4000    7.0445677    1.5280877    5.5164799 -0.048229459    1.0188411    1.0042049    1.0292009   -3.7037037            3   0.58753544    1.4676178    1.5247688   -1.2297803 -0.0054853153  0.020372881  0.013524676    0.4924151   0.52308941  0.069331822        0.075    2.8836184          0.5 0.0077035358    64.905261    2.5382566         70.1 0.00052064131 -0.0028442893 -0.003859697 0.0054047851  -0.84939088    1.6875023 
    5000    6.6369446    1.4814228    5.1555219   -0.0534298   0.98772763    1.0248292   0.96215545   -3.7037037            3   0.49651144    1.3880835    1.3952224   -1.2937716 -0.00068043642  0.029305312  0.014352662   0.40758755   0.43074182  0.069367533        0.075    2.7472712          0.5 0.0077075037    64.871847    2.5652061         70.1 0.00023940381 -0.00026957079 0.0023282638 0.0021408693 -0.086013022    -7.477737 
    6000    6.2934417    1.4187169    4.8747248 -0.072935191   0.94591897    1.0160053   0.89743454   -3.7037037            3   0.53916623    1.3614807    1.4175223   -1.1615043 0.0016002278  0.010771413  0.011169546   0.45622394   0.47396289  0.069415901        0.075    2.6391887          0.5 0.0077128779    64.826645     2.567428         70.1 0.00023179056 -0.0057287418 0.0023319586 0.0086672323   0.39279456   -5.2063346 
    7000    6.0508536     1.400875    4.6499786 -0.081730338   0.93402303     1.029407   0.86796997   -3.7037037            3   0.74668395    1.4712035    1.5276615  -0.75881315 -0.00069279997 -0.010620091 -0.019144077   0.66646483   0.68062055  0.069319567        0.075    2.5300739          0.5 0.0077021742    64.916735     2.538009         70.1 -0.00053100613 -0.0048191142 0.00093068653 0.0052822779   -1.2643431    1.5706324 
    8000    5.7501635    1.3666375    4.3835261 -0.096308748   0.91119539    0.9976046    0.8513699   -3.7037037            3   0.76168117    1.4772711     1.519594  -0.71182162 0.0025189243 -0.046971807  0.016440296   0.68299625   0.69765872  0.069375409        0.075    2.4525259          0.5 0.0077083788    64.864482    2.5732229         70.1 0.0023116571 -0.0099568444 -0.0071233698  0.012513698   0.78180441   -2.5330996 
    9000    5.5894777     1.370231    4.2192467  -0.10733041   0.91359135   0.98519352    0.8640481   -3.7037037            3   0.80069955     1.497928    1.5134092  -0.60923859 -0.0031916386 -0.034221426  0.021026039   0.72084289   0.73747359  0.069364787        0.075    2.3875163          0.5 0.0077071986    64.874415    2.5649949         70.1 0.0019038331 -0.030644625 0.00014595699  0.017535246   0.41309929   -2.5938594 
   10000    5.4298971     1.370809    4.0590881  -0.12634715   0.91397671   0.99685145   0.85660602   -3.7037037            3   0.81758099    1.5110471    1.5034829  -0.56178701 -0.0059742447 -0.0083934665  0.010943489   0.73841214   0.75360688  0.069394185        0.075    2.3392551          0.5  0.007710465    64.846932    2.5646225         70.1 -0.00059768841 -0.028457822 0.00042396409  0.041671261   -1.6518819    1.9645712 
   11000    5.2871435     1.324093    3.9630505  -0.13441467   0.88282914    1.0155576   0.79083472   -3.7037037            3   0.93185433    1.5525384    1.5671183  -0.32409371 -0.0086482542  0.013500722  0.028652824   0.85876416   0.86667972  0.069383078        0.075    2.2792742          0.5 0.0077092308    64.857313    2.5585029         70.1 -0.0042516871 -0.035895026 0.0042473416  0.057952322  -0.28669615    -2.492451 
   12000    5.2159077    1.3304205    3.8854872  -0.14590493   0.88704797    1.0144023   0.79878613   -3.7037037            3    1.0098928    1.5972604    1.6200096  -0.18759161 -0.0042764472  0.026645835 -0.0019268771   0.93606777   0.94479235  0.069308772        0.075    2.2321658          0.5 0.0077009747    64.926846     2.533442         70.1 -0.0012130849 -0.053013856 0.0044903059  0.058712517    1.1563472     1.352786 
   13000    5.1952453    1.3179856    3.8772597  -0.15321248   0.87875709    1.0126501   0.78595328   -3.7037037            3   0.95022255    1.5434131    1.5534355  -0.24618094  0.005066544  0.025645387  0.028065957   0.87758354   0.88523454   0.06936201        0.075    2.1909113          0.5   0.00770689    64.877012    2.5685538         70.1 0.0044820947 -0.050031775 -0.006028024  0.068760535    1.5717306  -0.10490276 
   14000    5.1222299    1.3233098    3.7989202  -0.15744502   0.88230696    1.0010962   0.79999168   -3.7037037            3    1.0011808    1.5704924    1.5860694  -0.15301944 -0.0012297135  0.010930753  -0.01166574   0.92724431   0.93693425  0.069360195        0.075    2.1634306          0.5 0.0077066883    64.878711    2.5548199         70.1 -0.0039026644 -0.061492897 0.0044318892   0.08455578  -0.89085141   0.98481625 
   15000    5.0713557    1.3065845    3.7647712  -0.15117467   0.87115552    1.0036825   0.77929876   -3.7037037            3   0.98162863    1.5558482    1.5491978  -0.16016017 -0.0051656226 -0.019253361 -0.014450993   0.90960464   0.91721612  0.069324747        0.075    2.1287839          0.5 0.0077027497    64.911885    2.5334753         70.1 -0.012232596 -0.075344456 0.0018727651  0.075352107   -1.1220173   -2.5661403 
   16000    5.0814686    1.3047523    3.7767163   -0.1550728   0.86993391   0.99843392   0.78087321   -3.7037037            3   0.99734379    1.5680175    1.5699876  -0.14597375 0.0071168258  -0.04503343  0.025936573   0.92517428   0.93326812  0.069327983        0.075    2.1128072          0.5 0.0077031092    64.908855    2.5551279         70.1 0.0028123693 -0.083693906  0.008688463   0.09271227   -1.4345188   -1.0098383 
   17000    5.0423385    1.3090264    3.7333121  -0.15820294   0.87278362    1.0056758   0.78067359   -3.7037037            3    1.0135325    1.5702653    1.5768824  -0.10655032 -0.0015528329 -0.027578672 -0.025262585    0.9413814   0.94899202  0.069324454        0.075    2.0914622          0.5 0.0077027171    64.912159    2.5421593         70.1 -0.0021883679   -0.1053357  0.003627755  0.099602385   -1.2978457   0.85959191 
   18000    5.0327365    1.2782457    3.7544907  -0.14666136   0.85226085    0.9907735   0.75624412   -3.7037037            3    1.0203128    1.5768653    1.5726248 -0.088551627 -0.00039608784  0.001927277 -0.018035431   0.95041956   0.95672876  0.069339451        0.075    2.0667108          0.5 0.0077043834     64.89812    2.5532388         70.1 -0.014176267   -0.1022282 -0.0058598172  0.090232626  -0.27170305 -0.0017415062 
   19000    5.0876529    1.2815278    3.8061251  -0.15218528   0.85444913   0.98519971   0.76382268   -3.7037037            3   0.98958718    1.5663819    1.5566186  -0.15423902 0.0059206385 -0.0070286894  0.017458249   0.91899351   0.92636083  0.069337229        0.075     2.048746          0.5 0.0077041366    64.900199    2.5511331         70.1  0.005050754  -0.09308598 -0.00043465739   0.07371128  -0.53395388   -1.3803156 
   20000    5.0315384    1.2708886    3.7606499  -0.14843566    0.8473555   0.99130378   0.74756339   -3.7037037            3    1.0135929     1.576291    1.5699767  -0.10548901 0.0055969461  0.034527688 -0.018045342   0.94450192    0.9499748  0.069345264        0.075    2.0171539          0.5 0.0077050293     64.89268    2.5548301         70.1    0.0117994 -0.085911448 -0.010185888  0.095888109    0.6893927   -2.5243454 
   21000    5.0144457    1.2856587     3.728787  -0.15286815   0.85720341   0.99364229   0.76262761   -3.7037037            3     1.045367    1.5998583    1.5904778 -0.054235061 0.0008149526   -0.0164899 -0.033491321    0.9748838   0.98159885  0.069422815        0.075    2.0124697          0.5 0.0077136461    64.820189    2.5844011         70.1 0.0026601054  -0.10161057 0.0011509331   0.08380696    1.0509556     4.612567 
   22000    5.0017957    1.2611419    3.7406538  -0.16290878   0.84085699     0.996455   0.73297423   -3.7037037            3    1.0001292    1.5566274    1.5644006  -0.12064032 -0.0077190783 -0.0099228302 -0.0095433501   0.93238662   0.93618056  0.069312588        0.075    2.0029078          0.5 0.0077013987    64.923272    2.5429415         70.1 -0.0044362831  -0.10682258  0.006971096  0.081621399   -1.1720934    2.4662597 
   23000    4.9942049    1.2724952    3.7217097  -0.15652307   0.84842674    1.0048256   0.73998932   -3.7037037            3   0.99603301    1.5491339    1.5673011    -0.128336 -0.001875906 -0.0052289956 -0.0077824605   0.92764206   0.93154715  0.069325001        0.075    1.9942767          0.5 0.0077027779    64.911647     2.533905         70.1 -0.0045969597 -0.076764972 -0.0097729487  0.099358572   -2.5099399   -1.5350911 
   24000    5.0168394    1.2882598    3.7285796  -0.15621585   0.85893764    1.0054954   0.75733579   -3.7037037            3    1.0728095    1.6051818    1.6189844 -0.0057376725 -0.0049743679 0.0032923647  0.029672738    1.0028154    1.0082807  0.069331799        0.075    1.9750549          0.5 0.0077035332    64.905283    2.5530632         70.1 -0.013752145  -0.11324236 0.0034298835  0.090054614   -1.4503726  0.043522672 
   25000    5.0277669    1.2917007    3.7360662  -0.15845322   0.86123182    1.0166824   0.75345533   -3.7037037            3    1.0279557    1.5777409    1.5745906 -0.068464441 0.00036518185 0.0040751393  0.015244464   0.95832019    0.9627089  0.069373872        0.075    1.9715247          0.5  0.007708208    64.865919    2.5687647         70.1 0.0087876851 -0.087845802 -0.010772625   0.10898971   -2.0666512   -1.6235503 
   26000    5.0189364    1.2666254     3.752311  -0.15052145   0.84451307    1.0030192   0.73461168   -3.7037037            3    1.0063284    1.5610706    1.5522971 -0.094382586 -0.0026740017 0.0081839503  0.028660167   0.93843444   0.94195845   0.06933913        0.075    1.9704194          0.5 0.0077043478     64.89842    2.5391751         70.1   0.01179347 -0.085625765 -0.0038805015  0.084927021   -1.6657009   -1.7102698 
   27000    5.0096943    1.2920262    3.7176681  -0.15840084   0.86144887    1.0028504   0.76342795   -3.7037037            3    1.0406946    1.5928139    1.5932655 -0.063995611 -0.0045592144   0.01739862  0.021698235   0.97013741   0.97633549  0.069319747        0.075    1.9619239          0.5 0.0077021942    64.916567    2.5389673         70.1 -0.0077778956  -0.10332332 0.0016675109   0.10033834  0.077700283    3.9886399 
   28000    5.0023727     1.279195    3.7231777  -0.16230449   0.85289376   0.99727408   0.75280272   -3.7037037            3     1.018042    1.5723666     1.562814 -0.081054538 0.0029409491 -0.029855106 -0.025435466   0.94846681   0.95404076  0.069314033        0.075    1.9445634          0.5 0.0077015592    64.921919    2.5398767         70.1 -0.00014941612  -0.10471632 -0.00073346888   0.08472897    1.8747656    2.0179973 
   29000    5.0386045    1.2923514    3.7462531  -0.15334304   0.86166567    1.0038056   0.76313203   -3.7037037            3     0.959521    1.5241031    1.5281927  -0.17373279 -0.0030083793 -0.038492007  0.014782575   0.88899116    0.8951006  0.069352894        0.075    1.9428662          0.5 0.0077058771     64.88554    2.5683647         70.1 -0.0050654639  -0.10938174 -0.0026429011   0.07496684    2.8811348   -1.6065238 
   30000     5.037132    1.2856923    3.7514397  -0.14991379   0.85722577    1.0176756   0.74597711   -3.7037037            3    0.9764118    1.5356641    1.5497298  -0.15615852 -0.0021930671  0.046973098  0.042574912   0.90746745   0.91110127  0.069375796        0.075    1.9424658          0.5 0.0077084218     64.86412    2.5681682         70.1  0.011902357  -0.08727486 -0.0015484436  0.099334666     1.240097   0.79518059 
Loop time of 36.6094 on 1 procs for 30000 steps with 8784 atoms

Performance: 354007.665 tau/day, 819.462 timesteps/s
99.1% CPU use with 1 MPI tasks x 1 OpenMP threads

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 2.2868     | 2.2868     | 2.2868     |   0.0 |  6.25
Bond    | 9.5726     | 9.5726     | 9.5726     |   0.0 | 26.15
Neigh   | 9.9129     | 9.9129     | 9.9129     |   0.0 | 27.08
Comm    | 0.83951    | 0.83951    | 0.83951    |   0.0 |  2.29
Output  | 0.049416   | 0.049416   | 0.049416   |   0.0 |  0.13
Modify  | 13.102     | 13.102     | 13.102     |   0.0 | 35.79
Other   |            | 0.8462     |            |       |  2.31

Nlocal:    8784 ave 8784 max 8784 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Nghost:    1952 ave 1952 max 1952 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Neighs:    5251 ave 5251 max 5251 min
Histogram: 1 0 0 0 0 0 0 0 0 0

Total # of neighbors = 5251
Ave neighs/atom = 0.597791
Ave special neighs/atom = 6.72131
Neighbor list builds = 3982
Dangerous builds = 0
#undump      eq

#--- Unfix Equil ---#

unfix abeads_edz
unfix bbeads_edz
unfix tbeads_edz

unfix freeze_tout


###############
# Compression #
###############


#--- Bring the brushes closer together fit the sim box ---#

variable       bbzmax  equal bound(bbeads,zmax)
variable       tbzmin  equal bound(tbeads,zmin)
displace_atoms  alltop move 0.0 0.0 -$(v_tbzmin - v_bbzmax) units box
displace_atoms  alltop move 0.0 0.0 -36.101478229387396368 units box
variable z_f equal bound(all,zmin)
variable z_c equal bound(all,zmax)
change_box all z final ${z_f} $(v_z_c + 0.1) units box
change_box all z final 0 $(v_z_c + 0.1) units box
change_box all z final 0 33.998521770612597948 units box
  orthogonal box = (0 0 0) to (28.2843 28.2843 33.9985)

print         "D = $D"
D = 28.7626420906069
print         "D = $(v_twzmin - v_bwzmax)"
D = 28.762642090606881595
info variables

#--- Computes ---#

# Number density profiles

compute         cabeads abeads chunk/atom bin/1d z lower ${binres} units reduced # Check bound keyword to maybe only bin melt area
compute         cabeads abeads chunk/atom bin/1d z lower 0.001 units reduced 
fix             abeads_cdz abeads  ave/chunk ${Neveryc} ${Nrepeatc} ${Nfreqc} cabeads density/number file abeads_cdz
fix             abeads_cdz abeads  ave/chunk 100 ${Nrepeatc} ${Nfreqc} cabeads density/number file abeads_cdz
fix             abeads_cdz abeads  ave/chunk 100 70 ${Nfreqc} cabeads density/number file abeads_cdz
fix             abeads_cdz abeads  ave/chunk 100 70 7000 cabeads density/number file abeads_cdz
compute         cbbeads bbeads chunk/atom bin/1d z lower ${binres} units reduced # Check bound keyword to maybe only bin melt area
compute         cbbeads bbeads chunk/atom bin/1d z lower 0.001 units reduced 
fix             bbeads_cdz bbeads  ave/chunk ${Neveryc} ${Nrepeatc} ${Nfreqc} cbbeads density/number file bbeads_cdz
fix             bbeads_cdz bbeads  ave/chunk 100 ${Nrepeatc} ${Nfreqc} cbbeads density/number file bbeads_cdz
fix             bbeads_cdz bbeads  ave/chunk 100 70 ${Nfreqc} cbbeads density/number file bbeads_cdz
fix             bbeads_cdz bbeads  ave/chunk 100 70 7000 cbbeads density/number file bbeads_cdz
compute         ctbeads tbeads chunk/atom bin/1d z lower ${binres} units reduced # Check bound keyword to maybe only bin melt area
compute         ctbeads tbeads chunk/atom bin/1d z lower 0.001 units reduced 
fix             tbeads_cdz tbeads  ave/chunk ${Neveryc} ${Nrepeatc} ${Nfreqc} ctbeads density/number file tbeads_cdz
fix             tbeads_cdz tbeads  ave/chunk 100 ${Nrepeatc} ${Nfreqc} ctbeads density/number file tbeads_cdz
fix             tbeads_cdz tbeads  ave/chunk 100 70 ${Nfreqc} ctbeads density/number file tbeads_cdz
fix             tbeads_cdz tbeads  ave/chunk 100 70 7000 ctbeads density/number file tbeads_cdz



#--- Fixes ---#
fix             freeze_tout twout setforce 0.0 0.0 NULL
fix             comp_tout twout aveforce 0.0 0.0 ${Fcatom}
fix             comp_tout twout aveforce 0.0 0.0 -3.7037037037037
fix             rwalls all wall/reflect zlo EDGE zhi EDGE




#--- Dumps ---#
#dump           comp all image ${Ndump_c} stg2.*.jpg type type zoom 2 view 60 120 bond none none


#--- Run Compression ---#
timestep    ${Tstep}
timestep    0.005
run         ${Ncomp}
run         70000
WARNING: Inconsistent image flags (src/domain.cpp:784)
Per MPI rank memory allocation (min/avg/max) = 9.738 | 9.738 | 9.738 Mbytes
Step TotEng KinEng PotEng E_pair Temp c_melTemp c_wallTemp v_Fcatom v_Pcomp2 Press Pxx Pyy Pzz Pxy Pxz Pyz c_melPress c_wallPress v_melDens v_surfcov v_aveRg v_Wall_v2 v_srate v_D v_bwzmax Zhi c_fbwall[1] c_fbwall[3] c_ftwall[1] c_ftwall[3] v_sbot v_pbot 
   30000    5.0374736    1.2856923    3.7517813  -0.14957214   0.85722577    1.0176756   0.74597711   -3.7037037            3    2.0143615    3.1663359    3.1962429  -0.31949439 -0.0044578983  0.096705525  0.086305919    1.8722083    1.8797007   0.15645294        0.075    1.9424658          0.5   0.01738366    28.762642    2.5681682    33.998522  0.011902357  -0.08727486 -0.0015484436  0.099334666     1.240097   0.79518059 
   31000    5.0430672    1.3170811    3.7259861   -0.1730313   0.87815404   0.98763009    0.8023049   -3.7037037            3    2.4167681    3.4613701    3.4433987   0.34553545 0.0061962986 -0.010666294  0.021713808     2.263881     2.286083   0.17510381        0.075     1.936096          0.5  0.019455979    25.699041    2.5582223    33.998522 0.0030653281  -0.11788784  0.012324054   0.41334391    1.9850282    2.2130535 
   32000    5.0108545    1.2948547    3.7159998  -0.19147674   0.86333474    1.0089773   0.76236925   -3.7037037            3    2.2678419    3.3508653    3.3348814   0.11777904 -0.001163608  0.037272218 -0.033629984     2.122565    2.1343321   0.18806185        0.075    1.9249924          0.5  0.020895761    23.928299    2.5636031    33.998522 -0.00095005076  -0.08707277 -0.00042245009   0.36925628    2.0637415  -0.14947672 
   33000    4.9995502     1.302382    3.6971682  -0.19273505   0.86835349    0.9929715    0.7819881   -3.7037037            3    2.3057545     3.358012      3.39276   0.16649155 -0.00087972091  0.059472615   0.11289402    2.1567391    2.1743626   0.19872511        0.075     1.918429          0.5  0.022080568    22.644345    2.5404663    33.998522 -0.0031704162  -0.11232671 -0.0047370435   0.34391905  -0.90134454   0.68429308 
   34000    5.0017427    1.2951198     3.706623  -0.20173971   0.86351149    1.0096753   0.76218405   -3.7037037            3    2.3711417    3.4269483     3.420637   0.26583978 0.0041048023   0.12142433  -0.02930796    2.2259001    2.2375395   0.20912891        0.075    1.9043558          0.5  0.023236546    21.517828    2.5661031    33.998522 0.0033242573  -0.10914079  0.001808568   0.35927854   -4.1101229    1.2385068 
   35000     5.033943    1.3147011     3.719242  -0.18972957   0.87656717    1.0142683   0.78111862   -3.7037037            3    2.3716335    3.4185443    3.4356472   0.26070906 -0.0027952835   0.13676307  -0.05695201    2.2227838    2.2374236   0.21779246        0.075    1.8955657          0.5  0.024199162    20.661872    2.5625808    33.998522 0.0011768498  -0.10679603 0.0042605678   0.35028474   -2.9564032   0.86998916 
   36000    4.9802554    1.2859408    3.6943146   -0.2050832   0.85739148    1.0220276   0.74323594   -3.7037037            3    2.4762823    3.5086058    3.4795422   0.44069905 -0.020566187   0.08910817 -0.010335084    2.3346515    2.3410457   0.22774512        0.075    1.8903659          0.5  0.025305013    19.758931    2.5605123    33.998522 0.0097609293  -0.11592513  0.013757301   0.33814542   -2.1865377    2.0006846 
   37000    4.9975812    1.3095775    3.6880036  -0.20005036    0.8731511    1.0097237   0.77848555   -3.7037037            3    2.4526244    3.4957514    3.4620193   0.40010245  -0.01031064  0.069860304  0.014771321    2.3042764    2.3190158   0.23588346        0.075    1.8850372          0.5  0.026209273    19.077217    2.5526987    33.998522 0.0014823729 -0.091885872 0.0044528769   0.34148104   -2.0506882    1.3359354 
   38000     4.966384    1.2779269     3.688457  -0.19807286   0.85204829   0.99618489   0.75212631   -3.7037037            3    2.4145479    3.4770905    3.4413549   0.32519828  0.018557113  0.035177659 -0.016719571    2.2712229    2.2827308   0.24532672        0.075    1.8984915          0.5  0.027258525    18.342885    2.5492831    33.998522 0.00035625865 -0.092689596 0.0038797647   0.29687306   -1.2026757   -2.2371927 
   39000    4.9952873    1.2879028    3.7073845  -0.20675986   0.85869962    1.0136075   0.75129951   -3.7037037            3    2.4474388    3.4666069    3.4497826    0.4259268 0.0084036337  -0.02142934 -0.0062606742    2.3042713    2.3133163   0.25499931        0.075    1.8961539          0.5  0.028333257    17.647106    2.5629845    33.998522 0.0061183817  -0.10495822 -0.004821054   0.36400875   0.74512353  -0.57274925 
   40000    4.9582252    1.2728973    3.6853279  -0.20660733   0.84869484    1.0093275   0.73731757   -3.7037037            3     2.413003    3.4396613    3.4661176   0.33323002 0.0081598202  -0.08853538  0.010182985    2.2724999    2.2794468   0.26492107        0.075    1.8844343          0.5  0.029435675    16.986191    2.5655106    33.998522 -0.0039885986  -0.10096275 -0.011847604   0.34147354  0.043007026   -3.6795321 
   41000     4.961178    1.2723269    3.6888511   -0.2070261   0.84831448   0.99641452   0.74563964   -3.7037037            3     2.373648      3.43355    3.4284395   0.25895465 0.0020291974  -0.12765984  0.013046285    2.2315591    2.2418006   0.27650593        0.075    1.8590683          0.5  0.030722881    16.274515    2.5605106    33.998522 -0.0049376547  -0.10000983  0.011763428   0.41748949   -1.2269085   -1.8002173 
   42000    4.9269183    1.2686903    3.6582279  -0.20477515   0.84588986   0.99187621   0.74468226   -3.7037037            3    2.3618493    3.4418908    3.4112216   0.23243534 0.0047085491 -0.072141822  0.024224052    2.2199428    2.2306023   0.28799047        0.075    1.8381971          0.5  0.031998941    15.625517     2.540588    33.998522 0.0059719806  -0.10966695  0.007463671   0.35491178   -1.2502876  -0.10281973 
   43000    4.9296732    1.2806526    3.6490206  -0.20512684   0.85386558    1.0080445   0.74697073   -3.7037037            3    2.4990163    3.5383809    3.5096792   0.44898872 0.0032301743 -0.027040616 -0.0088549631    2.3566737    2.3656299   0.30037202        0.075    1.8093268          0.5  0.033374669    14.981422    2.5663049    33.998522 0.0022538418  -0.10853007  0.021146442   0.37039661   -1.0923346    0.2715075 
   44000    4.9624281    1.2767923    3.6856358  -0.21134577   0.85129181    1.0268864   0.72952571   -3.7037037            3    2.5462032    3.5549338    3.5512816   0.53239417 0.0077811383  0.019273519  0.021966308     2.407185    2.4103236   0.31229633        0.075    1.7904741          0.5  0.034699592    14.409391    2.5777615    33.998522 -0.0020243097 -0.099184745 -0.011835988   0.37933632   -1.0803037   0.48561588 
   45000    4.9229523    1.2656338    3.6573186  -0.21536478    0.8438519   0.99788862   0.73705385   -3.7037037            3    2.4778374    3.5075477    3.4846984   0.44126605 -0.015116959 0.0045693849 -0.028020553    2.3373846    2.3457948   0.32677434        0.075    1.7427826          0.5   0.03630826    13.770971    2.5666009    33.998522  0.003479324 -0.089652588 -0.0046217977   0.37206295  -0.50646436   0.78638449 
   46000    4.9186828    1.2751311    3.6435517  -0.22399455   0.85018417    1.0007197   0.74581853   -3.7037037            3    2.4287132    3.4690902    3.4799803   0.33706912 -0.0040928939 -0.0042388245 -0.015245478    2.2865902    2.2962961   0.34054299        0.075    1.7063653          0.5   0.03783811    13.214191    2.5310008    33.998522 -0.0063964332  -0.10437791 -0.0043404977   0.33488881    1.0430199  -0.15844259 
   47000     4.952659    1.2833242    3.6693348   -0.2189021   0.85564688    1.0052501   0.75192965   -3.7037037            3    2.4681614     3.552686    3.4865369   0.36526125 0.0020209261   0.06610658  0.040965339    2.3248738    2.3351447   0.35652039        0.075     1.656844          0.5  0.039613376    12.621999    2.5722935    33.998522 -0.012660011  -0.10107998  0.011543794    0.3378332    1.0047919    -3.831185 
   48000    4.8969347    1.2671841    3.6297506  -0.23160163   0.84488559   0.97583784   0.75411725   -3.7037037            3     2.353006    3.4427941    3.3848212   0.23140267 -0.011954871  0.073336015  0.019581179    2.2093016    2.2238812   0.37251852        0.075    1.5990705          0.5  0.041390947    12.079936    2.5828678    33.998522 -0.0060114109 -0.089057529 -0.0058890878   0.40695163     1.965373  -0.46136313 
   49000    4.8835007    1.2670489    3.6164518  -0.23189169   0.84479545    1.0046134   0.73398318   -3.7037037            3    2.5016954    3.5217002    3.5360052   0.44738092 -0.011498653 -0.0060666711  0.019455704    2.3618278    2.3687631   0.38728669        0.075      1.54474          0.5  0.043031855    11.619299    2.5648233    33.998522 -0.0069586145  -0.10478734 -0.018527828   0.35874376   0.82532889     1.499778 
   50000    4.8817539    1.2670909    3.6146631  -0.22751094   0.84482341   0.99617896   0.73988731   -3.7037037            3     2.483303    3.5299253    3.5217934   0.39819025 0.0004440073 -0.039941694  0.049174361    2.3423102    2.3514867   0.40385878        0.075    1.4875693          0.5  0.044873197    11.142509    2.5588677    33.998522 -0.018249585  -0.12458869 -0.0017278943   0.40986333   -0.1615552   -3.3015324 
   51000     4.906303    1.2843198    3.6219832  -0.23732056   0.85631068    1.0029201   0.75467244   -3.7037037            3    2.5036297    3.5446512    3.5291216    0.4371163 -0.0064778544  0.038891977  0.060965143    2.3598195    2.3709214   0.41986417        0.075    1.4339033          0.5  0.046651575    10.717752    2.5685513    33.998522 -0.0042244313  -0.09343608 0.0039119023   0.33897881    1.2285767   -1.3533044 
   52000    4.8592174    1.2567507    3.6024667  -0.23901958   0.83792917   0.99868332   0.72646549   -3.7037037            3    2.5038017    3.5212211    3.5218124   0.46837144   0.01780079 -0.062893179  0.045707354    2.3653666     2.371654   0.43619074        0.075    1.3735185          0.5  0.048465638    10.316588    2.5439154    33.998522 0.0024728826 -0.095658015 -0.00034259487   0.30447872   0.90367886   -2.1721089 
   53000    4.9110323    1.2823603     3.628672   -0.2288378    0.8550042   0.98883302   0.76224037   -3.7037037            3    2.4178201    3.4584475    3.4716321   0.32338068 0.0068513341 -0.033500566   -0.0360345    2.2725677    2.2869758     0.455369        0.075    1.3258076          0.5  0.050596556    9.8820956    2.5627487    33.998522 -0.0033907349   -0.1021756  -0.01283353   0.34313455  -0.57985415   -4.1332411 
   54000    4.9073544    1.2853522    3.6220022  -0.24292895   0.85699904    1.0224169   0.74230061   -3.7037037            3    2.5048101    3.5121054    3.5276926   0.47463218 -0.0051778712   0.11384522   -0.0203553    2.3633574    2.3695219   0.47636194        0.075     1.279171          0.5  0.052929104    9.4465986    2.5392444    33.998522 -0.0045857607  -0.11368322 -0.0047548177   0.37417026   -1.9435708    2.4202949 
   55000    4.9094522    1.2567921    3.6526601  -0.22703077   0.83795681   0.99357449   0.73005983   -3.7037037            3     2.564561     3.587504    3.5666936    0.5394855 -0.0094383519   0.11908916  0.031346959     2.425441    2.4330893   0.49737811        0.075    1.2418674          0.5  0.055264234    9.0474428    2.5532858    33.998522 0.0056701452  -0.10906278 0.0044779107   0.38297457  -0.86354747    2.9187436 
   56000    4.9106798    1.2725218     3.638158  -0.24009364   0.84844445    1.0113746   0.73547178   -3.7037037            3    2.5541001    3.5571803    3.5995065   0.50561338 0.0017109923   0.12010655   0.02070317    2.4139487     2.420273   0.52535851        0.075    1.1934044          0.5  0.058373167    8.5655794    2.5558582    33.998522 0.0003434126 -0.098591716 -0.0076797928    0.3644813   -1.6353562   0.82196785 
   57000    4.9047157    1.2913451    3.6133707  -0.24880652   0.86099474    1.0271567   0.74578039   -3.7037037            3    2.4436051    3.5001135    3.4815755   0.34912629 0.0024339284      0.13555 0.00083700367    2.3014894    2.3076897   0.54652805        0.075    1.1505587          0.5  0.060725339    8.2337951    2.5547136    33.998522 -0.007247794  -0.11465497  0.017941291   0.36585144   -1.3647022   -2.6896039 
   58000    4.9048571    1.2841727    3.6206844  -0.24696896   0.85621261   0.99654292   0.75893446   -3.7037037            3    2.5446949    3.5935757    3.5435433   0.49696553 -0.0018632655  0.037936622  0.027597625    2.4000725    2.4128304   0.57344223        0.075    1.1199377          0.5  0.063715803    7.8473467    2.5443383    33.998522 0.00042491958  -0.12250665 -0.0046125406   0.37578294  -0.41803648   -3.6334551 
   59000    4.8955754    1.2759806    3.6195948  -0.24524277    0.8507506   0.99569367   0.75026838   -3.7037037            3    2.4142634    3.4789031    3.4611042   0.30278295 0.0013420272  0.096001108 -0.061680609    2.2712925    2.2825113   0.60348278        0.075    1.0949508          0.5  0.067053642    7.4567165    2.5434667    33.998522 -0.0045442951  -0.11313963 -0.0030462235   0.41889337   0.78481448   -1.8192508 
   60000    4.9069784    1.2943077    3.6126707   -0.2492901   0.86297005    1.0150506   0.75753406   -3.7037037            3    2.5144432    3.5469415    3.5494186   0.44696954 0.0074125594  0.088232306 -0.020362999    2.3700877    2.3801298   0.63685245        0.075    1.0587921          0.5  0.070761383    7.0660009    2.5452914    33.998522 -0.0022623133  -0.11047204 -0.016788296   0.40737376  -0.74627124  -0.56863351 
   61000     4.912942    1.2998643    3.6130777  -0.24447894   0.86667488   0.99179449   0.77996085   -3.7037037            3    2.5613956    3.5736104    3.5946815   0.51589487 -0.0037530935  0.058238067 -0.022906611    2.4127664    2.4301594    0.6696456        0.075     1.052682          0.5  0.074405067    6.7199724    2.5729459    33.998522 -0.00012949294  -0.12968121 -0.020493114   0.38057009   0.60279271   0.37494087 
   62000    4.8867767    1.2971665    3.5896102  -0.25987838   0.86487614    1.0058695   0.76713928   -3.7037037            3    2.5110732    3.5213058    3.5707113   0.44120245 -0.018313364  0.086468151  0.014482256    2.3648873    2.3779746   0.71133015        0.075    1.0325165          0.5  0.079036683    6.3261764    2.5782715    33.998522 -0.0041364446  -0.13478773 0.0011011168   0.32524363   0.62006788   0.87090263 
   63000    4.9172376    1.2959434    3.6212942  -0.25770958   0.86406064    1.0097586   0.76305681   -3.7037037            3    2.6005772    3.6271928    3.5894735   0.58506544 0.0042270723    0.1367646  0.031376322    2.4551693     2.466964   0.74733761        0.075    1.0172722          0.5  0.083037512     6.021375     2.565963    33.998522 -0.0069020676  -0.17560706 0.0072785335   0.38284848  -0.14303686  -0.63504115 
   64000    4.8652246    1.2776044    3.5876202  -0.25623638   0.85183326    1.0150548   0.73865894   -3.7037037            3     2.546233    3.6042971    3.6017954   0.43260661 0.00014604847  0.063811733 -0.041935012    2.4054744     2.411919   0.78967263        0.075   0.99389387          0.5  0.087741404    5.6985639    2.5527186    33.998522 -0.0088847973  -0.16313117 -0.0059347427   0.41321202  0.098650015   -1.7113845 
   65000    4.8394273    1.2885347    3.5508927  -0.27462491   0.85912092    1.0139733   0.75175943   -3.7037037            3    2.6635445     3.669263    3.6639606   0.65740997 0.0041407208 -0.069323029 -0.013529862    2.5202894    2.5293736   0.83178743        0.075   0.98739273          0.5  0.092420826     5.410036    2.5457199    33.998522  0.010720543  -0.23143277 -0.0012422972     0.410395  -0.50931462  0.046908849 
   66000    4.8502717    1.2879462    3.5623255  -0.27821521   0.85872856    0.9942327   0.76480213   -3.7037037            3    2.6606954    3.6817896    3.6823228   0.61797377 -0.016421716 -0.043927633  0.049096636    2.5149549    2.5291366   0.86457555        0.075   0.98367113          0.5   0.09606395    5.2048661    2.5575465    33.998522   0.00075521  -0.27741811 -0.004182942   0.34612607  0.088302023     2.535243 
   67000    4.8170726    1.2784195    3.5386531  -0.30558382   0.85237669   0.98397577   0.76116065   -3.7037037            3     2.693469    3.6851236    3.7121558   0.68312742  0.012184795    0.1217312  0.048173223    2.5484224    2.5632674   0.89356948        0.075   0.97601207          0.5  0.099285498    5.0359822    2.5730151    33.998522 -0.002490799  -0.27049174  0.015985727   0.36748567   -2.7658369    2.0236459 
   68000    4.7718706    1.2670411    3.5048295  -0.30468864   0.84479022   0.99503423   0.74062595   -3.7037037            3    2.7191113     3.710625    3.7335143   0.71319452 -0.016376493 -0.031480215 -0.0020855332    2.5779778    2.5874464    0.9176212        0.075   0.97352373          0.5   0.10195791    4.9039844    2.5575136    33.998522 0.0052086979  -0.33858558  0.017542774   0.39110561  -0.45983822    1.6360417 
   69000     4.770827    1.2604458    3.5103812  -0.31894038   0.84039286   0.97099042   0.74986996   -3.7037037            3    2.6885434     3.681072    3.7048372   0.67972114 -0.015305318 -0.017114145  0.055312095    2.5456484    2.5600601   0.91831652        0.075   0.97861283          0.5   0.10203517    4.9002712    2.5413923    33.998522 -0.0055298496   -0.3039147 -0.010055794   0.38957997    2.2465835  -0.47845902 
   70000    4.7811956    1.2929318    3.4882637  -0.31851596   0.86205269     1.021803   0.75129072   -3.7037037            3     2.682475    3.7146565    3.7102273   0.62254111 -0.0091629544  0.041324431  -0.11923299    2.5393092     2.547268   0.93311497        0.075   0.98311327          0.5   0.10367944    4.8225568    2.5673979    33.998522  0.010694812  -0.33899889 -0.0091703249   0.30062911   -1.3261118   -1.3861713 
   71000    4.7634517    1.2757003    3.4877514  -0.33613911    0.8505637    1.0157476   0.73602652   -3.7037037            3    2.8353192    3.7830973    3.8007752   0.92208504  0.012468691 0.0023925629  0.029073154    2.6950622    2.7009135   0.93452303        0.075    0.9860509          0.5   0.10383589    4.8152907    2.5592522    33.998522 0.0066475704   -0.3882731  0.003308372   0.41040083    -1.062515    6.8775968 
   72000    4.7807179    1.2836835    3.4970344  -0.31532302   0.85588643   0.98856828    0.7639192   -3.7037037            3    2.7076896    3.7086433    3.7193153   0.69511015  0.011142602 0.0050567391 -0.019175193    2.5621173    2.5768803   0.93389409        0.075   0.98496251          0.5   0.10376601    4.8185335    2.5478496    33.998522 0.0026455185  -0.35856168 -0.0075797164     0.344985  -0.64644722    1.2169749 
   73000    4.7778726    1.2844452    3.4934274  -0.33158606    0.8563943   0.99769462   0.75844265   -3.7037037            3     2.896278    3.8506986    3.8584611   0.97967438 -0.015437415  -0.11722506  0.022405083    2.7517494    2.7642611   0.93873615        0.075   0.99184944          0.5   0.10430402    4.7936792    2.5464193    33.998522 -0.006466202  -0.38419005 -0.0061717054   0.28511952     2.912595    7.2273417 
   74000    4.7578507    1.2740967    3.4837541  -0.33971617   0.84949449    1.0005528    0.7447657   -3.7037037            3    2.8693191      3.84082    3.8019637   0.96517373 0.0059969861  -0.13199782 -0.0023117388    2.7273968    2.7369241   0.93031372        0.075   0.99519901          0.5   0.10336819     4.837078    2.5434004    33.998522 0.0033272616  -0.36740632  0.007794025   0.36646586    2.5841946    5.3939357 
   75000    4.7317275    1.2457338    3.4859937  -0.32624052   0.83058377   0.96266175   0.73903099   -3.7037037            3     2.744234    3.7357865     3.732355   0.76456064 -0.0056640637 -0.043209536 -0.038469744    2.6034045    2.6168528   0.93627374        0.075    1.0038937          0.5   0.10403042    4.8062867    2.5457952    33.998522 -3.2477337e-05  -0.33615595   0.02056964   0.39511291    1.6845908    3.9405409 
   76000    4.7617939    1.2886784    3.4731155  -0.33172755   0.85921675     1.012132   0.75320041   -3.7037037            3    2.7745729    3.7670243    3.7573228    0.7993716  0.036062999 -0.0056549439 -0.015468455    2.6310432    2.6406457   0.94688461        0.075   0.99680465          0.5    0.1052094     4.752427    2.5508268    33.998522 -0.0081601138  -0.40059369  0.030281865   0.36523311   0.42436122    2.1068142 
   77000    4.7835922        1.288    3.4955922  -0.34320444   0.85876445   0.98565267    0.7708208   -3.7037037            3    2.8766698    3.8542088    3.8388153    0.9369853 0.0017000824  0.020658722  0.021978607    2.7297824    2.7462463   0.95442215        0.075    1.0012432          0.5   0.10604691    4.7148948    2.5634593    33.998522 0.0037166252  -0.35623899 -0.0032464006   0.36776901  -0.70256619    2.7326875 
   78000    4.8042281    1.2994165    3.5048116  -0.32318365   0.86637627    1.0030966   0.77160681   -3.7037037            3    2.7294315    3.7410046     3.729519    0.7177708 -0.023677059  0.055247792 -0.010964045    2.5823943    2.5966998    0.9679699        0.075    1.0026818          0.5   0.10755221    4.6489049    2.6026928    33.998522 -0.012660148  -0.42180476 -0.002020069   0.41845946  -0.22125942     1.962026 
   79000    4.7522403    1.2854532     3.466787  -0.34396733    0.8570664   0.99471517   0.76165045   -3.7037037            3    2.7906104    3.7717024    3.7841885   0.81594041 0.00089077863  0.022191214  -0.03993785    2.6454705    2.6589878   0.94803884        0.075    1.0067719          0.5   0.10533765     4.746641    2.5429112    33.998522 0.0066883486  -0.36349084 0.0051397055    0.3519563  0.021899026    4.2267372 
   80000    4.7612987    1.2776669    3.4836318  -0.33027557   0.85187492   0.99983145   0.74930041   -3.7037037            3    2.8657374    3.8043017    3.8914588   0.90145176 -0.0079552052 -0.076805412 -0.072794059    2.7229509    2.7334378   0.95481699        0.075    1.0091327          0.5   0.10609078    4.7129451      2.56205    33.998522 -0.018908178  -0.34460843   0.01391712   0.40480462    1.1315545    1.1154952 
   81000    4.7738316    1.2925613    3.4812703  -0.33259578   0.86180566    1.0069114   0.76121262   -3.7037037            3    2.8936249    3.8693382    3.8395551   0.97198147 -0.0060811772  -0.19362339  0.010680371    2.7485684    2.7603885   0.95784871        0.075     1.000984          0.5   0.10642763    4.6980279    2.5575322    33.998522 -0.0088114862  -0.37325431 0.0032175195   0.31852686    2.7095599    4.1714816 
   82000     4.725809    1.2642765    3.4615325  -0.33362622   0.84294694   0.98107727   0.74719388   -3.7037037            3    2.9576368    3.9355903    3.9058242    1.0314959 -0.005296637 -0.054844664 -0.018732078    2.8152517    2.8278187   0.94835734        0.075    1.0097246          0.5   0.10537304    4.7450468    2.5542839    33.998522 0.0049296271   -0.3722428   0.00151945   0.39600567  0.093679353    4.0550645 
   83000     4.752901    1.2805804    3.4723206  -0.32985972   0.85381747    1.0340315   0.72884418   -3.7037037            3    2.8761168    3.8449953    3.8491175   0.93423767 0.0015789544  -0.01172017  0.062498284    2.7372285    2.7392918   0.95446781        0.075    1.0140721          0.5   0.10605198    4.7146692    2.5453946    33.998522 -0.0065895187  -0.39237986  0.011694538   0.36790911  -0.18373184    1.8261828 
   84000    4.7640751    1.2856121     3.478463  -0.33175555   0.85717232    1.0050438   0.75465789   -3.7037037            3    2.8405416    3.8038539      3.84669   0.87108101 0.0040289756  0.023278025  0.021685916    2.6967342    2.7075523   0.95734739        0.075    1.0132357          0.5   0.10637193    4.7004881     2.571864    33.998522 -0.0043588506  -0.38031151 -0.0019296873   0.32555967  -0.57017899    4.9042453 
   85000    4.7557969    1.2819581    3.4738388  -0.33572026   0.85473604   0.99065867   0.76051824   -3.7037037            3    2.8914544    3.8760939    3.8337092   0.96456009  0.017917785   0.12920971 -0.010636835    2.7465302    2.7603685   0.94585465        0.075    1.0167473          0.5   0.10509496     4.757602    2.5278443    33.998522 0.0089209895  -0.37287835 -0.013542334     0.334587   -3.7296118     5.888775 
   86000    4.7264538    1.2647101    3.4617437  -0.33558826   0.84323607   0.96870446   0.75627533   -3.7037037            3    2.8539473    3.8589654    3.8415279   0.86134859 0.0029179491  -0.04463484 -0.031647866    2.7098317    2.7257665   0.95063118        0.075    1.0093758          0.5   0.10562569     4.733697    2.5345057    33.998522    0.0178558  -0.41574667  -0.01295154   0.37707203  0.026718696    3.1514465 
   87000    4.7657186    1.2893261    3.4763925  -0.33547652   0.85964862   0.99360392   0.76679785   -3.7037037            3    2.8661338    3.8558027    3.8405778    0.9020209 -0.013692839  0.070478798 0.0089984896     2.720013    2.7346582   0.96053658        0.075    1.0088017          0.5   0.10672629    4.6848814    2.5439814    33.998522 0.0042176264  -0.40273237  -0.01375752   0.42379443    1.5983429     2.010622 
   88000    4.7266981    1.2598095    3.4668886  -0.33721212   0.83996865   0.98127567   0.74200916   -3.7037037            3    2.9098745    3.9110469    3.8608543   0.95772216  0.011643665  0.022895797  0.040066781    2.7684774    2.7800302   0.96076725        0.075     1.011506          0.5   0.10675192    4.6837566     2.541723    33.998522 -0.0013525266  -0.34091279 0.0088291139   0.37812316  -0.38714939    2.9256108 
   89000    4.7359513    1.2729354    3.4630159   -0.3345342   0.84872023   0.99007796   0.75072722   -3.7037037            3    2.8957335    3.8636815    3.8457727   0.97774652 -0.003821998  0.057860973  0.034877591    2.7526752    2.7647245   0.96089057        0.075    1.0119522          0.5   0.10676562    4.6831556    2.5473205    33.998522 -0.014266448  -0.36564944 -0.0038498837   0.35391884    -2.179671    3.9172055 
   90000    4.7595436     1.276189    3.4833546  -0.33108302   0.85088956   0.99477758   0.75113997   -3.7037037            3     2.832737    3.8154416    3.8073295   0.87544002 -0.012131637   0.14637305 0.00085215454       2.6896    2.7011061   0.95359262        0.075    1.0160286          0.5   0.10595474    4.7189962     2.548468    33.998522 -0.0015261404  -0.37635567 0.0031544726   0.35057264   -2.7315691    3.8955378 
   91000    4.7604817     1.273723    3.4867586   -0.3265051   0.84924535   0.99154138   0.75060091   -3.7037037            3    2.8147109     3.819259    3.8346394   0.79023421  0.010976231  0.060717762  0.011875938    2.6716766    2.6835082   0.95630337        0.075    1.0091447          0.5   0.10625593    4.7056197    2.5566861    33.998522 0.0078835883  -0.34377616 0.0059938949   0.33797518    0.8825498    4.2776931 
   92000    4.7566448    1.2805911    3.4760537  -0.32635262    0.8538246   0.99233338   0.75781086   -3.7037037            3    2.8942591    3.8517771    3.8489005   0.98209978 -0.011133135  0.062752479 -0.010307673    2.7498509    2.7629517   0.95988425        0.075    1.0152356          0.5   0.10665381    4.6880653    2.5625677    33.998522 -0.025544089  -0.38395712 -0.011230474   0.40092283    1.1793288    4.3945484 
   93000    4.7564127     1.282251    3.4741617  -0.31173959   0.85493133    1.0021862   0.75284466   -3.7037037            3    2.8784412    3.8418757    3.8808145   0.91263335 -0.0011893302 -0.072425948  0.013586388    2.7349793      2.74583    0.9561864        0.075    1.0195706          0.5   0.10624293    4.7061954    2.5559304    33.998522 -0.020399176  -0.38412567 0.0043218633    0.3459872   0.53080392    3.5009936 
   94000    4.7270515    1.2639195     3.463132  -0.33258857   0.84270891   0.98390705   0.74482556   -3.7037037            3    2.8290304    3.8189064    3.8244725   0.84371235  0.017571547     -0.16609 -0.081067008    2.6870966    2.6988379     0.960831        0.075    1.0216793          0.5     0.106759    4.6834459     2.567884    33.998522 -0.010111613  -0.33675815 -0.019380578   0.34277782    2.0376595    6.5017333 
   95000    4.7488576    1.2828187     3.466039  -0.31258215   0.85530983    1.0012092   0.75416446   -3.7037037            3    2.8411323     3.863127    3.8355087   0.82476111  0.010086759 -0.073699011 -0.015821384    2.6974189    2.7086503    0.9479765        0.075    1.0164036          0.5   0.10533072    4.7469531    2.5720562    33.998522 -0.010068677   -0.3828011 0.0036481299   0.32171305   0.99423287     0.809816 
   96000     4.760756    1.3051177    3.4556382  -0.34109917   0.87017754    1.0199979   0.76631235   -3.7037037            3    2.9086166    3.8723367    3.8933876   0.96012563 -0.0073093607 -0.014653404 -0.033145505    2.7625884    2.7736486   0.95804564        0.075     1.021173          0.5   0.10644952    4.6970622    2.5407929    33.998522  0.017329085  -0.38744489  0.015675891   0.37070469  -0.75724055    4.6404893 
   97000    4.7839135    1.2836961    3.5002174  -0.33242931   0.85589487    0.9829721   0.76781942   -3.7037037            3    2.7495803    3.7525949    3.7503196   0.74582654 0.0012042367 -0.066182005  0.036344405    2.6032649    2.6195116   0.95041191        0.075    1.0223013          0.5   0.10560132    4.7347891    2.5502875    33.998522 -0.008211486  -0.33062365 -0.0066533687   0.36391108   0.19489655    1.9592466 
   98000     4.770252    1.2857193    3.4845327  -0.33291402   0.85724379    1.0055122   0.75445372   -3.7037037            3    2.8358623     3.832234    3.8082163   0.86713667  0.024353213   0.14452665 -0.013869867    2.6920938     2.702811   0.95578145        0.075    1.0219562          0.5   0.10619794    4.7081893    2.5512276    33.998522 -0.010467574  -0.38774768 0.0019348544   0.36654788   -1.7959696    3.2205357 
   99000    4.7389084    1.2836421    3.4552663  -0.34074308   0.85585882    1.0068997   0.75114333   -3.7037037            3    2.8297486    3.8216685    3.8419816   0.82559577 0.0095888935    0.1504644  0.037158083     2.686611    2.6965137   0.95748938        0.075    1.0261496          0.5   0.10638771     4.699791    2.5657687    33.998522  0.034548311  -0.35930013 -0.0058784784   0.40039376   -1.3101803    1.8946789 
  100000     4.768785    1.2746247    3.4941603  -0.32486226   0.84984653   0.99722372   0.74767392   -3.7037037            3    2.7666062    3.7601103    3.7831943   0.75651411 -0.014325525   0.11796361 -0.0061700081    2.6241297    2.6346517   0.95569798        0.075    1.0256205          0.5   0.10618866    4.7086005    2.5454161    33.998522 -0.0026961044  -0.35938292 -0.0043702947   0.33686843    -1.090436  -0.82975933 
Loop time of 102.166 on 1 procs for 70000 steps with 8784 atoms

Performance: 295990.314 tau/day, 685.163 timesteps/s
99.1% CPU use with 1 MPI tasks x 1 OpenMP threads

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 12.23      | 12.23      | 12.23      |   0.0 | 11.97
Bond    | 22.418     | 22.418     | 22.418     |   0.0 | 21.94
Neigh   | 30.486     | 30.486     | 30.486     |   0.0 | 29.84
Comm    | 1.8802     | 1.8802     | 1.8802     |   0.0 |  1.84
Output  | 0.13435    | 0.13435    | 0.13435    |   0.0 |  0.13
Modify  | 33.07      | 33.07      | 33.07      |   0.0 | 32.37
Other   |            | 1.946      |            |       |  1.90

Nlocal:    8784 ave 8784 max 8784 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Nghost:    1938 ave 1938 max 1938 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Neighs:    20274 ave 20274 max 20274 min
Histogram: 1 0 0 0 0 0 0 0 0 0

Total # of neighbors = 20274
Ave neighs/atom = 2.30806
Ave special neighs/atom = 6.72131
Neighbor list builds = 9086
Dangerous builds = 0
#undump      comp

unfix abeads_cdz
unfix bbeads_cdz
unfix tbeads_cdz

###############
# Shearing    #
###############

#--- Keep only thermostat on walls ---#
unfix lang_melt

#variable    vtop equal (v_Wall_v/2)
#variable    vbot equal -(v_Wall_v/2)
velocity    twout set $(v_Wall_v/2) 0.0 0.0  units box
velocity    twout set 0.25 0.0 0.0  units box
velocity    bwout set -$(v_Wall_v/2) 0.0 0.0  units box
velocity    bwout set -0.25 0.0 0.0  units box


#--- Number Density profiles ---#

compute         sabeads abeads chunk/atom bin/1d z lower ${binres} units reduced # Check bound keyword to maybe only bin melt area
compute         sabeads abeads chunk/atom bin/1d z lower 0.001 units reduced 
fix             abeads_sdz abeads  ave/chunk ${Neverys} ${Nrepeats} ${Nfreqs} sabeads density/number file abeads_sdz
fix             abeads_sdz abeads  ave/chunk 100 ${Nrepeats} ${Nfreqs} sabeads density/number file abeads_sdz
fix             abeads_sdz abeads  ave/chunk 100 100 ${Nfreqs} sabeads density/number file abeads_sdz
fix             abeads_sdz abeads  ave/chunk 100 100 10000 sabeads density/number file abeads_sdz
compute         sbbeads bbeads chunk/atom bin/1d z lower ${binres} units reduced # Check bound keyword to maybe only bin melt area
compute         sbbeads bbeads chunk/atom bin/1d z lower 0.001 units reduced 
fix             bbeads_sdz bbeads  ave/chunk ${Neverys} ${Nrepeats} ${Nfreqs} sbbeads density/number file bbeads_sdz
fix             bbeads_sdz bbeads  ave/chunk 100 ${Nrepeats} ${Nfreqs} sbbeads density/number file bbeads_sdz
fix             bbeads_sdz bbeads  ave/chunk 100 100 ${Nfreqs} sbbeads density/number file bbeads_sdz
fix             bbeads_sdz bbeads  ave/chunk 100 100 10000 sbbeads density/number file bbeads_sdz
compute         stbeads tbeads chunk/atom bin/1d z lower ${binres} units reduced # Check bound keyword to maybe only bin melt area
compute         stbeads tbeads chunk/atom bin/1d z lower 0.001 units reduced 
fix             tbeads_sdz tbeads  ave/chunk ${Neverys} ${Nrepeats} ${Nfreqs} stbeads density/number file tbeads_sdz
fix             tbeads_sdz tbeads  ave/chunk 100 ${Nrepeats} ${Nfreqs} stbeads density/number file tbeads_sdz
fix             tbeads_sdz tbeads  ave/chunk 100 100 ${Nfreqs} stbeads density/number file tbeads_sdz
fix             tbeads_sdz tbeads  ave/chunk 100 100 10000 stbeads density/number file tbeads_sdz

#--- Temperature and Velocity profiles ---#
compute        eall all chunk/atom bin/1d z lower ${binres} units reduced
compute        eall all chunk/atom bin/1d z lower 0.001 units reduced
#compute        biasT all temp/profile 1 1 1 xyz 100 100 100
fix            temp_prof   all ave/chunk ${Neverys} ${Nrepeats} ${Nfreqs} eall temp file temp_sz
fix            temp_prof   all ave/chunk 100 ${Nrepeats} ${Nfreqs} eall temp file temp_sz
fix            temp_prof   all ave/chunk 100 100 ${Nfreqs} eall temp file temp_sz
fix            temp_prof   all ave/chunk 100 100 10000 eall temp file temp_sz
#fix            temp_bias   all ave/chunk ${Neverys} ${Nrepeats} ${Nfreqs} eall temp bias biasT file tempb_sz
fix            vel_prof_x_s all ave/chunk ${Neverys} ${Nrepeats} ${Nfreqs} eall vx vy file velp_sz
fix            vel_prof_x_s all ave/chunk 100 ${Nrepeats} ${Nfreqs} eall vx vy file velp_sz
fix            vel_prof_x_s all ave/chunk 100 100 ${Nfreqs} eall vx vy file velp_sz
fix            vel_prof_x_s all ave/chunk 100 100 10000 eall vx vy file velp_sz
#--- Ave s_bot and p_bot ---#

fix             fc_ave all ave/time ${Neverys} ${Nrepeats} ${Nfreqs} v_sbot v_pbot file fc_ave.dump
fix             fc_ave all ave/time 100 ${Nrepeats} ${Nfreqs} v_sbot v_pbot file fc_ave.dump
fix             fc_ave all ave/time 100 100 ${Nfreqs} v_sbot v_pbot file fc_ave.dump
fix             fc_ave all ave/time 100 100 10000 v_sbot v_pbot file fc_ave.dump

#--- Dumps ---#
#dump           shear all image ${Ndump_s} stg3.*.jpg type type zoom 2 view 60 120 bond none none

#--- Run Shear ---#
timestep    ${Tstep}
timestep    0.005
run         ${Nshear}
run         100000
WARNING: Inconsistent image flags (src/domain.cpp:784)
Per MPI rank memory allocation (min/avg/max) = 10.39 | 10.39 | 10.39 Mbytes
Step TotEng KinEng PotEng E_pair Temp c_melTemp c_wallTemp v_Fcatom v_Pcomp2 Press Pxx Pyy Pzz Pxy Pxz Pyz c_melPress c_wallPress v_melDens v_surfcov v_aveRg v_Wall_v2 v_srate v_D v_bwzmax Zhi c_fbwall[1] c_fbwall[3] c_ftwall[1] c_ftwall[3] v_sbot v_pbot 
  100000    4.7733836    1.2792233    3.4941603  -0.32486226    0.8529126   0.99722372   0.75286961   -3.7037037            3    2.7675963    3.7630884    3.7831943   0.75650631 -0.014325525   0.11796361 -0.0061700081    2.6241297    2.6356418   0.95569798        0.075    1.0256205          0.5   0.10618866    4.7086005    2.5454161    33.998522 -0.0026961044  -0.35938292 -0.0043702947   0.33686843    -1.090436  -0.82975933 
  101000    4.8250832    1.3360752     3.489008  -0.32631765   0.89081825    1.0607928   0.77296226   -3.7037037            3    2.8746983    3.8468448    3.8521014   0.92514884  0.018965568  -0.36188462   0.01501219    2.7274028    2.7343322   0.94412452        0.075    1.0307316          0.5   0.10490272    4.7663204    2.5444197    33.998522  0.018339488  -0.39370826 -0.00052158825   0.34715388    3.8896416    4.5758073 
  102000    4.8943403     1.364564    3.5297764  -0.31913314   0.90981288    1.0817943   0.79056704   -3.7037037            3    2.9176506    3.8781032    3.8634367    1.0114119 -0.020389601  -0.21047041 -0.055078524    2.7670003    2.7745055     0.938477        0.075     1.066643          0.5   0.10427522     4.795003    2.5411556    33.998522 0.0073710503  -0.34947894 0.00016757345    0.3938512    1.2358929     4.083841 
  103000    4.9206141    1.3898307    3.5307834  -0.31434912   0.92665929    1.1325733   0.78385436   -3.7037037            3    2.7916837    3.7693576    3.7899056    0.8157879  0.010827804 -0.052547444  0.078887743    2.6423126    2.6418194   0.92712435        0.075     1.147889          0.5   0.10301382    4.8537179    2.5632995    33.998522 -0.0025156874  -0.35480867 -0.013909414   0.36175859   0.88675175  0.014392495 
  104000    4.9931284    1.4092324    3.5838961  -0.31180832   0.93959522    1.1637302    0.7841404   -3.7037037            3    2.7578512    3.7435047    3.7543164   0.77573244  0.042505288  0.031759937  0.032888842    2.6084256    2.6038641    0.9256475        0.075    1.2328498          0.5   0.10284972    4.8614618    2.5824018    33.998522 -0.0031810869  -0.37085741  0.017786425   0.37813693   -0.5857268  -0.69904507 
  105000    5.0176325    1.4342296    3.5834029  -0.29788325    0.9562619    1.2062951     0.782827   -3.7037037            3    2.9655033    3.9283082    3.8919212    1.0762804  0.018400135  -0.11057706  0.010686734    2.8163279     2.805884   0.90902269        0.075    1.3299073          0.5   0.10100252    4.9503715    2.5430089    33.998522 -0.011558759  -0.34844526 -0.0076048035    0.3990081  0.016163418    4.9871895 
  106000    5.0749693      1.46449    3.6104793  -0.28946199   0.97643783    1.2466819   0.78897266   -3.7037037            3    2.8020445     3.788703    3.8214954   0.79593511  0.018268327  -0.12284583 -0.049276253    2.6516981    2.6370812   0.90679332        0.075    1.4322213          0.5   0.10075481    4.9625421     2.519793    33.998522  0.002665554  -0.40502034 0.0028041299   0.35443738     0.824718 -0.048446793 
  107000    5.1160856    1.4749404    3.6411452  -0.28184904   0.98340558     1.269666   0.78482021   -3.7037037            3    2.7686895    3.7201767    3.7852085   0.80068346 0.0093960454  -0.12348378 -0.016078484    2.6191344    2.6006849    0.9184536        0.075    1.5164321          0.5    0.1020504    4.8995398    2.5596017    33.998522 0.0046546297  -0.29883834 -0.020493358   0.35519393   0.55217282    1.6086481 
  108000    5.1322982    1.5066017    3.6256965  -0.29364133    1.0045155    1.3216785   0.78447585   -3.7037037            3    2.8857492    3.8227125    3.8686701   0.96586504 -0.0099076247  -0.10038923 -0.070791013    2.7362597    2.7108622    0.9147153        0.075    1.6038222          0.5   0.10163503    4.9195635    2.5466388    33.998522 0.00055189661   -0.3509332 -0.0088251783   0.38653337  -0.41764227    2.8843404 
  109000    5.1377877    1.5087408    3.6290469   -0.2778196    1.0059417    1.3277574   0.78267167   -3.7037037            3    2.7214903    3.6973038    3.7510111   0.71615589  0.016450311 -0.062528628 -0.010677336    2.5723446    2.5457989   0.89899266        0.075    1.6926547          0.5  0.099888074    5.0056026     2.545625    33.998522 0.0018543034  -0.35269197  0.017876532   0.35624495  -0.33207529    3.0332848 
  110000    5.1939718    1.5145002    3.6794717  -0.27113021    1.0097817    1.3442369   0.77773571   -3.7037037            3    2.8333175    3.7746478    3.8407009   0.88460373 0.0080685854 -0.060487587 -0.056576486    2.6851124    2.6554455   0.90946843        0.075        1.728          0.5   0.10105205    4.9479452    2.5699143    33.998522 0.0050662594  -0.35051076 -0.011223623   0.32621645  -0.66913515    2.7099436 
  111000    5.1902419    1.5461609     3.644081  -0.28956056    1.0308913    1.3744645   0.79251799   -3.7037037            3    2.8793947    3.7861559    3.8784898    0.9735384 -0.015175592 -0.030622476 -0.018470302    2.7283727    2.6975229   0.90887391        0.075    1.8088437          0.5   0.10098599    4.9511818    2.5657622    33.998522 0.0067525269  -0.40417718 0.0063273515   0.36532844    0.7322659    3.8949076 
  112000    5.2062547    1.5573582    3.6488965  -0.27445373     1.038357    1.3784564   0.80239724   -3.7037037            3    2.9441757    3.8447826    3.8971379    1.0906066 0.0048888783 -0.028135578  0.035244803    2.7912711    2.7617757   0.89162039        0.075    1.8761246          0.5  0.099068932    5.0469909    2.5373374    33.998522 0.0090581983  -0.35027316  0.014531665   0.39404129  -0.52900938    5.3386371 
  113000    5.2056984    1.5684422    3.6372563  -0.29662505    1.0457472    1.4049334   0.79653522   -3.7037037            3    2.8642954    3.7078479    3.8768373    1.0082011 0.0080656522 -0.084183142 0.0021327537    2.7125078    2.6783919   0.91357485        0.075    1.9364278          0.5   0.10150832    4.9257048    2.5769476    33.998522 -0.0018434151  -0.36779027 -0.0035192715   0.40205436  -0.08804498    1.8803914 
  114000    5.2312114    1.5793396    3.6518718  -0.27468291    1.0530129    1.4202953   0.79818056   -3.7037037            3    2.7221457    3.6822906    3.7861875   0.69795907 -0.017500762    0.0594623 -0.0063857705    2.5700446    2.5342095   0.91391941        0.075    1.9693741          0.5    0.1015466    4.9238477    2.5701793    33.998522 -0.0075238566  -0.37053451 0.0064678631   0.34728768  -0.85080703   0.60585728 
  115000    5.2238539    1.5856595    3.6381944  -0.27500953    1.0572267    1.4227776   0.80359742   -3.7037037            3    2.8123781    3.7612273    3.8323231   0.84358402  0.015676374 -0.064481566  -0.11791936    2.6592448    2.6241135   0.89867449        0.075    1.9646847          0.5  0.099852721    5.0073748    2.5238136    33.998522 -0.0060491753   -0.3676053 -0.0043081843     0.362033    1.9327123   0.88205039 
  116000    5.2088021    1.5307804    3.6780217  -0.27546675    1.0206365    1.3957823    0.7603376   -3.7037037            3    2.9225141    3.7765094    3.9323549    1.0586781  0.011565939 -0.032937642  0.029880987    2.7776244    2.7378215   0.90460896        0.075    1.9811988          0.5   0.10051211    4.9745251    2.5522776    33.998522 0.0074473308  -0.37366006 0.0079333851   0.46214671   0.74261974    4.0536399 
  117000    5.2163459    1.5595885    3.6567574  -0.28095973    1.0398441    1.4158881   0.77892522   -3.7037037            3    2.8509336    3.7125531    3.8741196   0.96612801 0.0093681035  -0.14649527 -0.038584419    2.7025018    2.6635805   0.88999141        0.075    1.9956247          0.5  0.098887934    5.0562286     2.530451    33.998522 -0.012770428  -0.38663328 -0.013011953   0.35776865    1.1040294    0.9333445 
  118000    5.2460362    1.5691053    3.6769308  -0.27337174    1.0461893    1.4255092   0.78299694   -3.7037037            3    2.8997687    3.7786868    3.8930664    1.0275528  0.011840068  -0.11792608 -0.007366951     2.750561    2.7111425   0.91217284        0.075    2.0306496          0.5   0.10135254    4.9332756    2.5572495    33.998522 0.0010006518  -0.45584747  0.005961722   0.38188028   0.75107888    4.2554502 
  119000    5.2465654    1.5602748    3.6862906  -0.26545384    1.0403016    1.4280007   0.77128977   -3.7037037            3    2.7912463    3.6646059    3.8137764   0.89535666 -0.010539552 -0.034912289  0.043735178    2.6442695    2.6022905   0.89061921        0.075     2.021059          0.5   0.09895769    5.0526644    2.5587306    33.998522  0.020088591  -0.39730314  0.015386176   0.37166438   -2.2861486  -0.49719206 
  120000    5.2553496     1.579768    3.6755817  -0.26788344    1.0532986    1.4265585   0.79431552   -3.7037037            3    2.7569366    3.7124522    3.7848623   0.77349529 0.00081394864  -0.15001355  0.011673423     2.605572    2.5681716   0.88907693        0.075    2.0191752          0.5  0.098786326    5.0614292    2.5390632    33.998522  0.040113887  -0.39273763 -0.0046425238   0.36364745    -1.041766   -2.2182053 
  121000     5.254056    1.5806847    3.6733713  -0.26848833    1.0539098    1.4356935   0.78900803   -3.7037037            3    2.8500382    3.7548669    3.8566565   0.93859132 -0.010776339  -0.17278873  0.079639818    2.6996851    2.6600645   0.90306138        0.075    1.9921701          0.5   0.10034015      4.98305    2.5499416    33.998522  0.017819454   -0.3930679 0.0041904092   0.41647519   -1.1791689    1.8276529 
  122000    5.2309126    1.5644943    3.6664183  -0.25598722     1.043115    1.3994252   0.79589959   -3.7037037            3    2.8760368    3.7852676    3.8644872   0.97835545 -0.015552353  -0.13967961 -0.0018415372    2.7243703    2.6908621   0.90039761        0.075    1.9910096          0.5   0.10004418     4.997792    2.5503409    33.998522  -0.02014937  -0.38504637 0.0081597153   0.42322827 -0.0016197998     4.527901 
  123000    5.2572274    1.5758091    3.6814182  -0.27113608     1.050659    1.4532735   0.77129209   -3.7037037            3    2.8970989    3.7952938    3.9005601   0.99544296 0.0060002397 -0.027408916  0.095381076    2.7501217     2.704799   0.91166106        0.075    2.0021542          0.5   0.10129567     4.936045    2.5557108    33.998522   0.01535242  -0.34476922 -0.0018029431   0.37050486  -0.49108419    7.7691454 
  124000    5.2343076    1.5724865    3.6618211  -0.26577687    1.0484437    1.4331557   0.78150749   -3.7037037            3    2.9408973    3.8810478     3.908708     1.032936 -0.0098978896  -0.17205762 0.0044087222    2.7919734    2.7512594   0.90033842        0.075    1.9898048          0.5    0.1000376    4.9981206     2.532596    33.998522  0.002792539  -0.35506792  0.014765651   0.36927017  -0.19983417    3.1618619 
  125000    5.2663709    1.5718568    3.6945141  -0.25612113    1.0480238    1.4135571     0.794405   -3.7037037            3    2.7966727    3.7298488    3.8148947   0.84527445 -0.0085513186 -0.0075121814  0.039208363     2.645291     2.609628   0.89941045        0.075      1.99978          0.5  0.099934494    5.0032774     2.535904    33.998522  0.011052493  -0.29819355 -0.0084686079   0.39932657   0.35288166  -0.88075178 
  126000    5.2166882    1.5415802     3.675108  -0.25463353    1.0278371    1.4054971   0.76579385   -3.7037037            3    2.7617176    3.7081714     3.824072   0.75290925 0.0025679391  0.038183675 -0.046487606    2.6157881    2.5757395   0.90627947        0.075    2.0339291          0.5   0.10069772    4.9653557    2.5538044    33.998522 -0.0034919023   -0.3863253 -0.0073366381   0.37492358    1.1309837    1.1316655 
  127000    5.2351367    1.5654471    3.6696896  -0.26695746    1.0437502    1.4099006   0.78970209   -3.7037037            3    2.8134304    3.7542147    3.8462231    0.8398535 0.0072341346  -0.18940373 -0.049959855     2.662945    2.6268697   0.91361703        0.075     2.013287          0.5     0.101513    4.9254774    2.5512747    33.998522 0.0053810286  -0.33835456 0.0030118024   0.40641201    1.7549504    4.3068947 
  128000    5.1937684    1.5453165    3.6484519  -0.27012602    1.0303283    1.4142769   0.76391879   -3.7037037            3    2.7029788    3.6410147    3.7226262   0.74529545 0.0060914906  0.054354908 0.0095286206    2.5574066     2.515839     0.897458        0.075    2.0173318          0.5  0.099717556    5.0141622    2.5501872    33.998522 -0.0042853134  -0.35659625 -0.0052611943   0.39236811  -0.61896286    3.4370495 
  129000    5.2258143    1.5431083     3.682706  -0.27657059     1.028856    1.3783125   0.78639698   -3.7037037            3    2.9553689      3.78576    3.9495229    1.1308237 -0.0014999493  -0.19847766  0.043617674    2.8055133    2.7729879   0.90044631        0.075    2.0358035          0.5   0.10004959    4.9975217    2.5412083    33.998522 0.0089691808   -0.3107304  0.003307462   0.40102967    2.2570909    5.1267019 
  130000     5.220342    1.5435505    3.6767915    -0.282382    1.0291508    1.3909087   0.77814999   -3.7037037            3    2.9236884    3.7642547    3.9197458    1.0870646 0.0082128971  -0.10059432  0.044808812    2.7754043    2.7396407    0.8953728        0.075    2.0329751          0.5  0.099485867    5.0258395    2.5654132    33.998522  0.027164465  -0.40576624  0.013107476   0.32816325     1.051076    6.3997955 
  131000    5.2248664    1.5662723    3.6585941   -0.2664625    1.0443004    1.4162177     0.786248   -3.7037037            3    2.7244676    3.6337431    3.7478816    0.7917782  -0.01451875  -0.13608223 -0.032709934    2.5746404     2.537071   0.89601454        0.075    2.0481565          0.5  0.099557172    5.0222399    2.5513291    33.998522 -0.0044528078  -0.38253012 -0.017886387   0.50058945    2.0020272  -0.39331607 
  132000    5.2411434    1.5532006    3.6879428  -0.26853805     1.035585    1.4107942   0.77524488   -3.7037037            3    2.8535598    3.7699796    3.8667439   0.92395579  0.018150119   -0.1175412  0.061831832    2.7058293    2.6668808   0.90768399        0.075    2.0276741          0.5   0.10085378    4.9576726    2.5550683    33.998522 -0.014898289   -0.3879953  0.021551896   0.41779781   0.35236432    1.8983669 
  133000    5.2204802    1.5709445    3.6495357  -0.26877337    1.0474156    1.4199518   0.78893392   -3.7037037            3    2.8974205    3.7710651    3.9143153    1.0068809 -0.0063507871  -0.11489432 -0.042036543    2.7470814    2.7095297   0.91252269        0.075    2.0209627          0.5   0.10139141    4.9313842    2.5572582    33.998522  0.004445468  -0.43088795  0.012729428   0.41125922    1.2659421     5.556368 
  134000    5.2298694    1.5894538    3.6404156  -0.27177176    1.0597565    1.4208526   0.80922112   -3.7037037            3    2.6763569    3.6751715    3.7236915   0.63020766 -0.015749994  -0.15891497  0.012598405    2.5221519    2.4883469   0.92390711        0.075    1.9909079          0.5   0.10265635    4.8706195    2.5828814    33.998522 0.0025125413  -0.31974282 -0.0060281985   0.42343645     3.179232 -0.080965574 
  135000    5.2002051    1.5551718    3.6450333  -0.27738088    1.0368993    1.3871771   0.79387147   -3.7037037            3    2.7338058     3.645763    3.7744548   0.78119971  0.009411917  -0.23089126  0.020867703    2.5825259    2.5502519   0.90928037        0.075    1.9950028          0.5   0.10103115    4.9489686    2.5831502    33.998522 -0.0018229361  -0.34951077 -0.017994912   0.38883474    2.3957302    4.3226125 
  136000    5.2191415    1.5880369    3.6311045  -0.27971577    1.0588118     1.442076   0.79288307   -3.7037037            3    2.8315853    3.7716999    3.8503688   0.87268703  0.012156238 -0.064718193 -0.045637366    2.6804937     2.640767   0.92597263        0.075    2.0052733          0.5   0.10288585    4.8597549    2.5399705    33.998522  0.006920013  -0.36772354 0.0027949983   0.37239126  -0.92041129    5.5838581 
  137000    5.1971548    1.5502008     3.646954  -0.26867954    1.0335849    1.3851251   0.78967988   -3.7037037            3    2.8087047    3.7252914    3.8297239   0.87109884 0.0082365803 -0.031168133 0.0062303705    2.6582235    2.6254223   0.90455747        0.075    2.0388139          0.5   0.10050639    4.9748083    2.5682409    33.998522 -0.0074126167  -0.33886256  -0.01607095   0.39665118  -0.10216795    3.1167543 
  138000    5.1817672     1.535633    3.6461341  -0.27719304    1.0238719    1.4002945   0.76268706   -3.7037037            3    2.6768087     3.639024    3.7452163   0.64618575 -0.012390137 -0.048785253  0.015980305    2.5314712     2.491519   0.91522124        0.075    2.0475092          0.5   0.10169125    4.9168439    2.5509574    33.998522 0.0058333617  -0.39920355 -0.0042051283   0.36281703   0.68931738    0.5561584 
  139000    5.2067404    1.5472666    3.6594739  -0.28831921    1.0316285    1.3941627   0.78008904   -3.7037037            3    2.6520507    3.5949758    3.7257774   0.63539895  0.022350098  -0.11695208 -0.071468134    2.5033971    2.4675724    0.9028384        0.075    2.0320936          0.5   0.10031538    4.9842807    2.5393162    33.998522  0.001557849  -0.35040462 -0.00073168974   0.37036099     2.783225    0.3608634 
  140000    5.2057163    1.5412359    3.6644804  -0.28463931    1.0276076    1.4035899   0.76672916   -3.7037037            3    2.8667675    3.7337563    3.8678541   0.99869201 -0.0042319904  0.048143111 -0.056027177    2.7206597    2.6810417   0.90040412        0.075    2.0489704          0.5    0.1000449    4.9977559     2.571864    33.998522 -0.0045477184  -0.36379664 -0.00034062839   0.38981864  -0.41546465    4.7728641 
  141000    5.1947878    1.5603429    3.6344449  -0.27716664     1.040347    1.4297752   0.77013451   -3.7037037            3    2.9029992    3.8102199    3.9028977   0.99587989 -0.013361816 -0.023195923 -0.051488783    2.7562425    2.7138086   0.91786783        0.075    2.0121789          0.5   0.10198531    4.9026666    2.5615444    33.998522  0.011592449  -0.39862264  0.017775117   0.36053551   0.36373756   0.40119997 
  142000    5.2017891    1.5571664    3.6446226  -0.27005266    1.0382291     1.419535   0.77365621   -3.7037037            3    2.8578257    3.7600282    3.8677644   0.94568458 -0.014837302 -0.079919811  0.017851964     2.710398    2.6699901   0.90045867        0.075    2.0223342          0.5   0.10005096    4.9974531     2.541866    33.998522   0.01815923  -0.40508474 0.00052901149     0.349268    1.2283551     2.281136 
  143000    5.2320678     1.593238    3.6388297   -0.2808171    1.0622796    1.4183837   0.81521106   -3.7037037            3    2.7520011    3.6675555    3.7895682   0.79887955 -0.010385271 -0.095421291  -0.02305771    2.5966547    2.5643178   0.92140204        0.075    2.0097717          0.5     0.102378    4.8838616    2.5693973    33.998522 -0.0063661053  -0.42201569 -0.0010877486   0.34552753  -0.69765519    3.5314536 
  144000    5.2123185    1.5453149    3.6670036  -0.26842604    1.0303272    1.3704973    0.7943169   -3.7037037            3    2.6929478      3.65136    3.7286489   0.69883454 0.0042675336 -0.044282185  0.036251954     2.541583     2.511601   0.89746075        0.075    2.0066506          0.5  0.099717861    5.0141469    2.5429896    33.998522 -0.015385275   -0.3658544   0.01754407   0.34046425     1.619765   -2.1934062 
  145000    5.2066423    1.5453607    3.6612816  -0.26900727    1.0303577    1.3978464   0.77537776   -3.7037037            3     2.879787      3.78609    3.8852738   0.96799719 -0.004199403   0.05457079  -0.04087796    2.7320312    2.6948213   0.90093508        0.075    2.0213314          0.5    0.1001039    4.9948105    2.5249461    33.998522  0.004008461  -0.36870396 -0.010707811   0.34173638  -0.54690362   0.12000892 
  146000    5.2005433    1.5636363     3.636907  -0.27815353    1.0425429    1.4184305   0.78173317   -3.7037037            3    3.0021901    3.8799377    3.9905405     1.136092 0.0014617857   -0.1490428  0.052501671    2.8532232    2.8145006   0.91937268        0.075    2.0194229          0.5   0.10215252    4.8946419    2.5350118    33.998522 -0.015385104    -0.364941 -0.021326505   0.35058148   0.21884356     2.444395 
  147000    5.2381285    1.5682958    3.6698327  -0.27133912    1.0456496    1.4048028   0.79646051   -3.7037037            3    2.9132147      3.82027    3.9200855   0.99928857 0.00049694365  -0.25177364 -0.086536209    2.7614414    2.7273285    0.9067191        0.075     2.023784          0.5   0.10074657    4.9629483    2.5305755    33.998522  0.019404798  -0.43119681 -0.0099935545   0.36322687    1.0744084   0.30446411 
  148000     5.227541    1.5705945    3.6569465  -0.27186674    1.0471822    1.3866716   0.81164779   -3.7037037            3    2.7674234    3.6701309    3.8117166   0.82042275 -0.003474891  -0.16810129 -0.0033261386     2.612756    2.5839363   0.91220215        0.075      2.05002          0.5   0.10135579    4.9331171    2.5417282    33.998522 -0.00071268582  -0.34844598  0.011106902   0.41583138  -0.99116103    1.4517427 
  149000    5.1967328    1.5438399    3.6528929   -0.2771678    1.0293438     1.388299    0.7802891   -3.7037037            3    2.7585842    3.6611513    3.7747355    0.8398658 -0.006873245  -0.17019339  0.026424773    2.6098925    2.5748818   0.90676925        0.075    2.0671634          0.5   0.10075214    4.9626738    2.5538257    33.998522 0.0012857094  -0.44681861 -0.005436175   0.40089991   0.44028467    1.2093188 
  150000    5.2669278    1.5845345    3.6823934  -0.27149874    1.0564766    1.4282859   0.79850142   -3.7037037            3    2.8423659    3.7324579    3.8692611   0.92537873 -0.0018755088  0.021483135  0.038126566    2.6902037    2.6533724   0.91084739        0.075    2.0704428          0.5   0.10120527    4.9404544    2.5222194    33.998522 -0.0059693911  -0.37820637 0.0038696725   0.36461862 -0.0024030919    5.8606851 
  151000    5.2054998    1.5414414    3.6640584  -0.28293437    1.0277446    1.3902745   0.77620742   -3.7037037            3    2.8336912    3.7091412    3.8653277   0.92660478 -0.0066029592  -0.10817315    0.0696871    2.6857773    2.6497274   0.90605688        0.075    2.0708607          0.5   0.10067299    4.9665756    2.5594538    33.998522  0.015440301  -0.33041554 0.0088768401   0.38984818    1.2850947    2.3244075 
  152000    5.2130836    1.5569038    3.6561799  -0.29693601     1.038054    1.4191376   0.77363541   -3.7037037            3    2.8310948    3.6742447    3.8594828    0.9595569 -0.021006812  0.011179973 -0.032215195     2.683671    2.6433118   0.91178883        0.075    2.0719656          0.5   0.10130987    4.9353533    2.5403859    33.998522 0.0061746625  -0.32702941 -0.012741307   0.38378262  -0.78743679    5.5576822 
  153000    5.2427252    1.5597476    3.6829777  -0.27975538    1.0399501    1.4016943   0.78896081   -3.7037037            3    2.7990208    3.6845957    3.8029637   0.90950291 0.0045682527 -0.058349804   0.03027221    2.6486766    2.6135459   0.91174974        0.075    2.0668409          0.5   0.10130553    4.9355649    2.5697442    33.998522 -0.030474916  -0.41437173 -0.010753378   0.34944882  0.035418324    6.6338141 
  154000    5.2497935    1.5639547    3.6858388  -0.27687057    1.0427552     1.394543   0.79867997   -3.7037037            3    2.6833504    3.6088646    3.7284543   0.71273227 -0.010411084  -0.22587819  0.011695168    2.5311541    2.4988218   0.90666962        0.075    2.0470495          0.5   0.10074107    4.9632191    2.5729762    33.998522 0.0047650006  -0.35319612 -0.0041233714   0.31492618   0.99513137    3.3604228 
  155000    5.2458758    1.5795753    3.6663006  -0.27729072    1.0531701    1.4023253   0.81092496   -3.7037037            3    2.8119227    3.7221727    3.8409066   0.87268889  -0.01473997  -0.15448328 0.0077378196    2.6573931    2.6263644   0.91014035        0.075    2.0347071          0.5   0.10112671    4.9442924    2.5362243    33.998522 -0.006307016  -0.31304201  0.009261222   0.38219737     2.041694    5.9710329 
  156000    5.2303069    1.5652051    3.6651018  -0.27268632    1.0435889    1.4183709    0.7835471   -3.7037037            3     2.810599    3.7319474    3.8486784   0.85117131  0.013768815 -0.058913188  0.033230257    2.6612865    2.6229175   0.90585963        0.075    2.0228423          0.5   0.10065107    4.9676571    2.5466178    33.998522 -0.023919559  -0.38455132 -0.004704142   0.36270787    1.7454297    2.3458399 
  157000    5.2044926    1.5478385    3.6566541  -0.27750764    1.0320098    1.3963316   0.77922919   -3.7037037            3    2.8459665    3.7391852    3.8846537   0.91406051 -0.009608822 -0.018536557  0.087524683    2.6974767    2.6612012   0.91123389        0.075    2.0074991          0.5   0.10124821    4.9383589    2.5864981    33.998522 -0.0041372902   -0.3301439  -0.01008982   0.38566266   0.18485229     4.462563 
  158000    5.2235024     1.563412    3.6600904  -0.27500763    1.0423934    1.4088817   0.78811028   -3.7037037            3    2.7631048    3.6832701    3.7843166   0.82172773 0.0045025052  -0.18614219 -0.018561361    2.6129227    2.5766789   0.90557032        0.075    2.0352347          0.5   0.10061892    4.9692441    2.5367201    33.998522 -0.0057427468  -0.37811385  0.010833144   0.38280985    1.0862383    3.8284937 
  159000    5.2796522     1.587693    3.6919593   -0.2677613    1.0585825    1.4217581   0.80660282   -3.7037037            3      2.75613    3.6681547    3.7876318   0.81260343   0.01209723  -0.17182073 -0.0049823037    2.6024239    2.5680002   0.90581586        0.075    2.0647029          0.5   0.10064621    4.9678971    2.5437021    33.998522  0.023551084  -0.35304446 -0.015205122   0.39442376    1.5984495      2.65415 
  160000    5.2333836    1.5539302    3.6794534  -0.26924593    1.0360714    1.4133237   0.77431278   -3.7037037            3    2.8146009    3.7167985    3.8454596   0.88154461   0.01743735 -0.076839962 -0.014300182    2.6670481    2.6275872   0.90871132        0.075    2.0642629          0.5   0.10096792    4.9520677    2.5513525    33.998522  0.016019059  -0.37629997 -0.005573822   0.33863941  -0.32951059    3.1937188 
  161000    5.2346568    1.5635135    3.6711433   -0.2689492     1.042461    1.4010927   0.79363351   -3.7037037            3    2.8456668    3.6964296     3.867674   0.97289702 -0.0083174705  -0.16102873  0.063326435    2.6944322    2.6602716   0.90094921        0.075    2.0416901          0.5   0.10010547    4.9947322    2.5623057    33.998522 -0.027540311  -0.42892318 0.0089771713   0.37072321    2.2255002    2.7792755 
  162000    5.2456831    1.5836777    3.6620054  -0.28141625    1.0559053    1.4362915   0.79197444   -3.7037037            3    2.7087154    3.6014146    3.7733549   0.75137685  0.016978608 -0.087759727  0.080579259     2.557797    2.5186626   0.90063017        0.075    2.0636592          0.5   0.10007002    4.9965015    2.5133976    33.998522  0.032251029  -0.35880313 -0.00080580922   0.34484463    1.6736445    2.1569688 
  163000    5.2612677    1.5721607     3.689107  -0.27200479    1.0482264    1.4137174   0.79463705   -3.7037037            3    2.6682948    3.6047301     3.712531   0.68762344  0.010546492  0.004535927 -0.044094025     2.516869     2.481229   0.90750641        0.075    2.0207948          0.5   0.10083405    4.9586427    2.5446288    33.998522  0.041527403  -0.45467632 -0.0071714489   0.37126878  -0.51715097    3.7344281 
  164000    5.2252992    1.5655621    3.6597371  -0.26467155    1.0438269    1.4108106   0.78920012   -3.7037037            3    2.8072088    3.7251391    3.8225095   0.87397799 -0.022821872 0.0043792887  0.042710791    2.6568191    2.6205277   0.90742069        0.075    2.0304934          0.5   0.10082452    4.9591111    2.5548066    33.998522 -0.0010300564   -0.3964792  0.011351086   0.33366509    1.1072765    3.5475844 
  165000    5.2101762     1.542679    3.6674972  -0.26473686    1.0285698    1.3898367   0.77790967   -3.7037037            3    2.9082405    3.7725436    3.9193533    1.0328246 -0.025830026 -0.082070419  0.021908056    2.7600022    2.7243346   0.89498136        0.075    2.0320534          0.5  0.099442374    5.0280377    2.5769826    33.998522 -0.0074505339  -0.37144318 0.0097247787   0.37746139 0.0096547039    4.0517413 
  166000    5.2679054    1.5925939    3.6753114  -0.26750404    1.0618502    1.4417469   0.79826029   -3.7037037            3    2.9784811    3.8759034    3.9593894    1.1001505 -0.00015725566 -0.0085659527   0.01805185    2.8263648    2.7877064   0.91611867        0.075    2.0082181          0.5   0.10179096    4.9120274    2.5404564    33.998522 -0.014354315  -0.34317964 -0.028380942   0.43713565   -3.0073336    2.6724235 
  167000    5.2618948    1.5650544    3.6968405  -0.26031591    1.0434884    1.4079139   0.79063787   -3.7037037            3    2.8985248    3.7700689    3.8710659    1.0544395 0.0098800502 -0.032917288  0.044258593     2.747861    2.7122269   0.90920103        0.075    2.0086096          0.5   0.10102234    4.9494005    2.5578576    33.998522  0.012167803  -0.42971885 0.0093993517   0.39675727 -0.075567612    1.3310707 
  168000    5.2240285     1.550065    3.6739635  -0.26669533    1.0334944    1.4137013   0.76968355   -3.7037037            3    2.6820145    3.5755105    3.7593595   0.71117358  0.010712861    -0.040745  0.048819317    2.5353438    2.4949508   0.90462244        0.075    2.0074261          0.5    0.1005136     4.974451    2.5615513    33.998522 -0.013269268  -0.37544945  0.016285034    0.4266962    0.1249423    3.8509959 
  169000    5.2287301    1.5553997    3.6733303  -0.26921523    1.0370512    1.3998448   0.78533268   -3.7037037            3    2.8069651    3.7547985    3.8162081   0.84988876  0.025348838  0.011341397  0.010263342    2.6573123    2.6217349   0.90704524        0.075    2.0008413          0.5    0.1007828    4.9611638    2.5449916    33.998522 -0.0052264889  -0.31370548 -0.015204056   0.37976911   0.18848953    1.1575858 
  170000    5.2353241    1.5655857    3.6697384  -0.26732859    1.0438426    1.4265289   0.77831219   -3.7037037            3    2.8542378    3.8121189    3.8510363   0.89955817 0.00055124397 -0.016532859 0.0074012068    2.7059228    2.6654767   0.91181538        0.075     2.038066          0.5   0.10131282    4.9352096    2.5225909    33.998522  0.029238472  -0.37743247 0.0084059982   0.37620982    1.4612157    2.6502718 
  171000    5.2149403    1.5533503      3.66159  -0.26099166    1.0356848    1.4088778   0.77674484   -3.7037037            3    2.7877222    3.7129415    3.8079018   0.84232341 0.0047281523 -0.00067555056 -0.024023547    2.6397059    2.6012968   0.90138119        0.075    2.0384582          0.5   0.10015347    4.9923385    2.5555978    33.998522 -0.0027805422  -0.36144883 -0.0037057886   0.34068531    2.8867203    2.4700664 
  172000    5.2324357    1.5756819    3.6567539  -0.27698698    1.0505742    1.4306847   0.78683364   -3.7037037            3    2.7920313     3.710195    3.7809962   0.88490285  0.020432096  0.044143373  0.072645374    2.6420925    2.6027204   0.89916078        0.075    2.0476383          0.5  0.099906753    5.0046667    2.5299668    33.998522 5.3730986e-05  -0.37125146 -0.0051254946   0.39196458   -1.5524349    4.1340659 
  173000    5.2300568    1.5519802    3.6780766  -0.26041369    1.0347713    1.4208362     0.766893   -3.7037037            3    2.8418152     3.768545       3.8404   0.91650062 -0.0065183756 -0.026648161 0.0099846487    2.6956763    2.6538074   0.90171021        0.075     2.035141          0.5   0.10019002    4.9905169    2.5508926    33.998522 0.0049657661  -0.34591431 0.00082388604   0.37058683    0.2620123    4.3682428 
  174000    5.2204321    1.5554469    3.6649852  -0.27101526    1.0370827    1.4064292   0.78081384   -3.7037037            3    2.8796735    3.7618766     3.880793   0.99635084 0.0086185318  -0.15080745 -0.015139401    2.7308818     2.693572   0.89993577        0.075    2.0452688          0.5  0.099992863    5.0003569    2.5523803    33.998522 -0.016072293  -0.37820249 -0.012775392    0.3348473    1.3497281    0.6529809 
  175000    5.2261659    1.5564844    3.6696816  -0.26826396    1.0377744    1.4127776   0.77757781   -3.7037037            3    2.8289503    3.7391788    3.8697265   0.87794576 -0.00074006623 -0.0083300909  0.039119006    2.6807753    2.6420089   0.90784302        0.075     2.063049          0.5   0.10087145    4.9568041    2.5601436    33.998522 0.0074501214  -0.35170061 -0.0047360067   0.35908014    1.5172573    2.3432529 
  176000    5.2301009    1.5666951    3.6634058  -0.27676985    1.0445823     1.445846   0.76615211   -3.7037037            3    2.7593257    3.6438228    3.8033402   0.83081415 -0.0054927027  -0.20768296 -0.010042551     2.613328    2.5680086   0.90447102        0.075    2.0337788          0.5   0.10049678    4.9752838     2.536034    33.998522 0.0089796587  -0.38705194  0.014386895   0.37742686    2.0060978    2.0705469 
  177000    5.1769552    1.5434703    3.6334849  -0.27912508    1.0290973    1.4023364   0.77012414   -3.7037037            3    2.8744835    3.7758108    3.8936097   0.95402989 -0.0086212648  -0.16862529  0.043363448    2.7277288    2.6889236   0.90286984        0.075    2.0144238          0.5   0.10031887    4.9841071    2.5478873    33.998522 0.0034823455  -0.35237768 0.0063213414   0.37884407    1.5902295   0.98441609 
  178000    5.2068494    1.5522726    3.6545768  -0.27025652    1.0349662    1.3991069   0.78231189   -3.7037037            3    2.7891784    3.7358298     3.855259   0.77644642 0.0070133218  -0.11422064 -0.025566619    2.6401013    2.6040459   0.92084543        0.075    2.0292762          0.5   0.10231616    4.8868136    2.5650401    33.998522 0.0026971246  -0.36049058  0.036941872   0.35444476    2.5949279    1.9656795 
  179000    5.2239288    1.5768973    3.6470315  -0.27258222    1.0513846    1.3982596   0.81072242   -3.7037037            3    2.8569119    3.7712156    3.8690527   0.93046754 0.0066207951 -0.049153589  0.031398295    2.7024209    2.6718915   0.90735344        0.075    2.0011341          0.5   0.10081705    4.9594786    2.5378979    33.998522 0.0066138156  -0.40405294 0.0034856627   0.41281667   0.29150666     1.484124 
  180000    5.2082412    1.5595583    3.6486829  -0.28351845    1.0398239     1.408535   0.78399687   -3.7037037            3    2.8154061    3.7432417    3.8200498    0.8829267 -0.021578461   0.10188536  0.069255669    2.6660078     2.629026   0.91109264        0.075    2.0125983          0.5   0.10123252    4.9391245    2.5273214    33.998522 -0.0028635864  -0.35487932 -0.025280518   0.41436642   -1.7175077     4.623648 
  181000    5.1883389    1.5431317    3.6452072   -0.2714425    1.0288716    1.3793116   0.78572968   -3.7037037            3    2.8122432    3.7460787    3.8181912   0.87245979 0.0050651163  0.051830172 -0.012904592    2.6625148      2.62973   0.91820063        0.075    2.0384012          0.5   0.10202229    4.9008897    2.5665351    33.998522  0.011920706  -0.40558146  0.023445245   0.36982381   -1.1063257    3.3788837 
  182000    5.2287175    1.5575036     3.671214   -0.2679881    1.0384539    1.3868482    0.7967344   -3.7037037            3    2.7939866    3.7061784     3.849648   0.82613331 -0.0036333711 -0.043272324  0.018889511    2.6421611    2.6104762   0.91233663        0.075    2.0396208          0.5   0.10137074    4.9323899    2.5460576    33.998522 0.0020971776  -0.40389622 0.0061298795   0.39575525   -1.2792018    3.5766966 
  183000    5.1938773    1.5494855    3.6443918  -0.27153945    1.0331079    1.3989768   0.77925318   -3.7037037            3    2.7895786    3.7173823    3.8308164    0.8205371  0.001844709   -0.1718363 -0.019785039    2.6410843    2.6044633   0.91901156        0.075    2.0438376          0.5    0.1021124    4.8965652    2.5761172    33.998522  0.010488387  -0.30894608 -0.0044434774   0.39715658    0.2005736    3.2701752 
  184000    5.2015415    1.5561013    3.6454402  -0.28186978     1.037519    1.3909044   0.79233344   -3.7037037            3    2.8691929    3.7121714     3.877497    1.0179103 -0.033805294 -0.030246004 -0.063257239     2.718206    2.6851457    0.9096876        0.075    2.0826987          0.5    0.1010764    4.9467531     2.550246    33.998522  0.028376374  -0.39541114  0.004118826   0.41917531  -0.19136755    6.6209221 
  185000    5.2226681    1.5604636    3.6622045  -0.28520959    1.0404275    1.4132147   0.78177026   -3.7037037            3     2.682245    3.5884565    3.7457123   0.71256638 -0.022944772  0.050017795 -0.067082025    2.5332711    2.4952458   0.91594619        0.075    2.0880763          0.5    0.1017718    4.9129523    2.5612591    33.998522  0.021279692  -0.34429048  0.010621553   0.36138023   -1.8648734   0.44330676 
  186000     5.217094    1.5706122    3.6464818  -0.27903769     1.047194    1.4278304   0.78308763   -3.7037037            3    2.6433578    3.5628236    3.7281454   0.63910442 -0.014328941 -0.049608552 -0.004662156    2.4941328    2.4544246   0.90186655        0.075     2.056571          0.5   0.10020739    4.9896517    2.5397885    33.998522 0.0083359842  -0.34068198 -0.014787408   0.35744263   0.45228626    2.5048011 
  187000    5.2071535    1.5620804    3.6450731  -0.26539599    1.0415055    1.4167171   0.78116495   -3.7037037            3    2.7385141    3.6080818     3.809853   0.79760744 -0.019241191 -0.093327072 -0.038673111    2.5896555    2.5510513   0.89259631        0.075    2.0424506          0.5  0.099177368    5.0414728    2.5458443    33.998522  0.017153484  -0.38436566 -0.025625383   0.37389514     1.414034    1.5718116 
  188000    5.2013097    1.5486372    3.6526725  -0.28709349    1.0325423    1.3920324    0.7831169   -3.7037037            3    2.7700597    3.6673801    3.8218445   0.82095459 -0.00029382366 -0.077090055 -0.026491323    2.6208292    2.5858633   0.91015908        0.075    2.0260848          0.5   0.10112879    4.9441906    2.5793162    33.998522  0.008223167  -0.39656154  0.010892408   0.39201131   -1.0001806    3.8759004 
  189000    5.2295008    1.5485829    3.6809179  -0.26152492    1.0325062    1.3734437    0.7959633   -3.7037037            3    2.7688765    3.7365154    3.7828223   0.78729169 -0.019261231 -0.015171535 0.0098171418    2.6171979    2.5871397   0.91582185        0.075      2.03371          0.5   0.10175798    4.9136194    2.5647106    33.998522  0.013531583   -0.4058595 -0.021652259   0.43880603   -1.7400123    1.7682085 
  190000    5.2132456    1.5599814    3.6532642  -0.25923801     1.040106     1.398988    0.7911043   -3.7037037            3    2.8773748    3.7967073    3.8946081   0.94080913   0.01097506  -0.13816732  0.069147865    2.7266222    2.6922581   0.90188525        0.075    2.0144007          0.5   0.10020947    4.9895483    2.5543661    33.998522 0.0088634109   -0.3614483 -0.0028104598   0.35186191   -1.1544649    2.4049107 
  191000    5.2013115    1.5372229    3.6640886  -0.27668188    1.0249319    1.4032371   0.76244007   -3.7037037            3    2.7715152    3.6590144    3.8260279   0.82950333  0.027337664  -0.10607785 -0.056474661    2.6262248    2.5858362   0.90284153        0.075    2.0244856          0.5   0.10031573    4.9842634    2.5297289    33.998522 -0.0010291021  -0.36509294 -0.016914975   0.38586373  -0.86280879    2.8140584 
  192000    5.2267032    1.5838695    3.6428337  -0.26837755    1.0560332    1.4269373   0.79868655   -3.7037037            3    2.7763574    3.7538139    3.8038375   0.77142093  0.011382067  -0.23223808 -0.0069308596    2.6241599    2.5875423   0.92633106        0.075    2.0481631          0.5   0.10292567    4.8578745    2.5726508    33.998522 0.0052390818  -0.30558922  0.011253094    0.3483299     1.120263    4.7171628 
  193000    5.2445119    1.5683929     3.676119  -0.26408579    1.0457143    1.4166582   0.78833798   -3.7037037            3    2.8746842    3.7732117    3.8814504   0.96939046 -0.0077545646  -0.12625653 -0.024181943    2.7244587    2.6872292   0.90281555        0.075     2.057683          0.5   0.10031284    4.9844068    2.5598993    33.998522   0.01206681  -0.31514995 -0.0083138155   0.32371004  -0.31878121    3.7307152 
  194000    5.2653514    1.6080118    3.6573396  -0.28719233    1.0721299    1.4328121    0.8218843   -3.7037037            3    2.8235954    3.7192489    3.8497508   0.90178641 -0.0071176163 -0.023474728  0.010757461    2.6669773    2.6340029   0.91582217        0.075    2.0377151          0.5   0.10175802    4.9136177    2.5326249    33.998522 -0.014522549  -0.44965164 0.0056873359   0.36777931   -1.3635887  0.054346629 
  195000    5.2311199    1.5686076    3.6625123  -0.26780088    1.0458575    1.4130323   0.79109837   -3.7037037            3     2.845259    3.7566859    3.8496464   0.92944477 -0.0064251199 -0.030658985 -0.0049482672    2.6945075    2.6582839   0.90706675        0.075    2.0534374          0.5   0.10078519    4.9610461    2.5307436    33.998522  0.022675974  -0.39517889 -0.0059037052   0.42122963    2.3282449    3.4423528 
  196000    5.2332657    1.5613712    3.6718945  -0.27107522    1.0410327      1.41233   0.78341004   -3.7037037            3     2.797648    3.6796569    3.8279147   0.88537251  0.012117984  -0.14082043   0.01177976    2.6483616    2.6107658    0.8973273        0.075    2.0747782          0.5  0.099703034    5.0148925    2.5553943    33.998522 0.0003583578  -0.35844879 -0.0082150737   0.37912394    2.8506826    3.0989877 
  197000      5.21539     1.557541     3.657849  -0.27719459    1.0384789    1.4259697   0.76961128   -3.7037037            3    2.6802037    3.6134435     3.737902   0.68926557  0.017009984  -0.14791289 -0.020184877    2.5335468    2.4915166   0.91140969        0.075    2.0550095          0.5   0.10126774    4.9374064    2.5705498    33.998522  0.017150292  -0.38329215 -0.0027209055   0.35919548    1.2932743    1.6586302 
  198000    5.1904335    1.5286855    3.6617481  -0.27043234    1.0192397    1.3885221   0.76301198   -3.7037037            3    2.8265692    3.7213223    3.8504283   0.90795706 -0.0070972489     -0.14916 0.0060645893    2.6811698    2.6428373    0.8896501        0.075    2.0573584          0.5  0.098850011    5.0581684    2.5635418    33.998522 -0.0093874409  -0.39519033 -0.015398752   0.39134012   0.19721314     3.653059 
  199000    5.2400191      1.56398    3.6760391  -0.26882268    1.0427721    1.4246004   0.77783719   -3.7037037            3    2.7948965    3.6848434    3.8381114   0.86173476 0.0089361923 -0.087997299 -0.043387271     2.646672    2.6063906   0.90440601        0.075    2.0701343          0.5   0.10048956    4.9756414    2.5723105    33.998522 -0.0056046785  -0.37461456  0.017252245     0.390041    1.5176739    4.9330072 
  200000    5.2325078    1.5821637    3.6503441  -0.27648031    1.0548959    1.4208781   0.80096671   -3.7037037            3    2.6987665    3.6300796    3.7522984   0.71392158 0.0047465518   0.12123116 -0.040696883    2.5461345    2.5107532   0.90595649        0.075    2.0430903          0.5   0.10066183     4.967126    2.5491519    33.998522 -0.0041178467  -0.37630264 -0.011396736   0.37558718   0.17630997    1.5625209 
Loop time of 150.663 on 1 procs for 100000 steps with 8784 atoms

Performance: 286731.947 tau/day, 663.731 timesteps/s
99.0% CPU use with 1 MPI tasks x 1 OpenMP threads

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 19.587     | 19.587     | 19.587     |   0.0 | 13.00
Bond    | 33.492     | 33.492     | 33.492     |   0.0 | 22.23
Neigh   | 59.409     | 59.409     | 59.409     |   0.0 | 39.43
Comm    | 3.0989     | 3.0989     | 3.0989     |   0.0 |  2.06
Output  | 0.19214    | 0.19214    | 0.19214    |   0.0 |  0.13
Modify  | 31.898     | 31.898     | 31.898     |   0.0 | 21.17
Other   |            | 2.987      |            |       |  1.98

Nlocal:    8784 ave 8784 max 8784 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Nghost:    1866 ave 1866 max 1866 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Neighs:    18941 ave 18941 max 18941 min
Histogram: 1 0 0 0 0 0 0 0 0 0

Total # of neighbors = 18941
Ave neighs/atom = 2.15631
Ave special neighs/atom = 6.72131
Neighbor list builds = 16063
Dangerous builds = 0
